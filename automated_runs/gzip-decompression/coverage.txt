    1|       |typedef void *voidp;
    2|       |typedef unsigned char uch;
    3|       |typedef unsigned short ush;
    4|       |typedef unsigned long ulg;
    5|       |typedef long __off_t;
    6|       |typedef long __off64_t;
    7|       |typedef long __ssize_t;
    8|       |typedef __ssize_t ssize_t;
    9|       |typedef unsigned long size_t;
   10|       |struct _IO_FILE;
   11|       |struct _IO_FILE;
   12|       |typedef struct _IO_FILE FILE;
   13|       |typedef void _IO_lock_t;
   14|       |struct _IO_marker {
   15|       |    struct _IO_marker *_next;
   16|       |    struct _IO_FILE *_sbuf;
   17|       |    int _pos;
   18|       |};
   19|       |struct _IO_FILE {
   20|       |    int _flags;
   21|       |    char *_IO_read_ptr;
   22|       |    char *_IO_read_end;
   23|       |    char *_IO_read_base;
   24|       |    char *_IO_write_base;
   25|       |    char *_IO_write_ptr;
   26|       |    char *_IO_write_end;
   27|       |    char *_IO_buf_base;
   28|       |    char *_IO_buf_end;
   29|       |    char *_IO_save_base;
   30|       |    char *_IO_backup_base;
   31|       |    char *_IO_save_end;
   32|       |    struct _IO_marker *_markers;
   33|       |    struct _IO_FILE *_chain;
   34|       |    int _fileno;
   35|       |    int _flags2;
   36|       |    __off_t _old_offset;
   37|       |    unsigned short _cur_column;
   38|       |    signed char _vtable_offset;
   39|       |    char _shortbuf[1];
   40|       |    _IO_lock_t *_lock;
   41|       |    __off64_t _offset;
   42|       |    void *__pad1;
   43|       |    void *__pad2;
   44|       |    void *__pad3;
   45|       |    void *__pad4;
   46|       |    size_t __pad5;
   47|       |    int _mode;
   48|       |    char _unused2[(15UL * sizeof(int) - 4UL * sizeof(void *)) - sizeof(size_t)];
   49|       |};
   50|       |typedef unsigned char char_type;
   51|       |typedef long code_int;
   52|       |typedef unsigned long cmp_code_int;
   53|       |typedef struct _IO_FILE _IO_FILE;
   54|       |struct huft;
   55|       |union __anonunion_v_25 {
   56|       |    ush n;
   57|       |    struct huft *t;
   58|       |};
   59|       |struct huft {
   60|       |    uch e;
   61|       |    uch b;
   62|       |    union __anonunion_v_25 v;
   63|       |};
   64|       |typedef int file_t;
   65|       |union __anonunion_fc_7 {
   66|       |    ush freq;
   67|       |    ush code;
   68|       |};
   69|       |union __anonunion_dl_8 {
   70|       |    ush dad;
   71|       |    ush len;
   72|       |};
   73|       |struct ct_data {
   74|       |    union __anonunion_fc_7 fc;
   75|       |    union __anonunion_dl_8 dl;
   76|       |};
   77|       |typedef struct ct_data ct_data;
   78|       |struct tree_desc {
   79|       |    ct_data *dyn_tree;
   80|       |    ct_data *static_tree;
   81|       |    int *extra_bits;
   82|       |    int extra_base;
   83|       |    int elems;
   84|       |    int max_length;
   85|       |    int max_code;
   86|       |};
   87|       |typedef struct tree_desc tree_desc;
   88|       |typedef ush Pos;
   89|       |typedef unsigned int IPos;
   90|       |struct config {
   91|       |    ush good_length;
   92|       |    ush max_lazy;
   93|       |    ush nice_length;
   94|       |    ush max_chain;
   95|       |};
   96|       |typedef struct config config;
   97|       |typedef unsigned long __dev_t;
   98|       |typedef unsigned int __uid_t;
   99|       |typedef unsigned int __gid_t;
  100|       |typedef unsigned long __ino_t;
  101|       |typedef unsigned int __mode_t;
  102|       |typedef unsigned long __nlink_t;
  103|       |typedef long __time_t;
  104|       |typedef long __blksize_t;
  105|       |typedef long __blkcnt_t;
  106|       |typedef long __syscall_slong_t;
  107|       |typedef __off_t off_t;
  108|       |typedef __time_t time_t;
  109|       |struct timespec {
  110|       |    __time_t tv_sec;
  111|       |    __syscall_slong_t tv_nsec;
  112|       |};
  113|       |typedef void (*__sighandler_t)(int);
  114|       |struct stat {
  115|       |    __dev_t st_dev;
  116|       |    __ino_t st_ino;
  117|       |    __nlink_t st_nlink;
  118|       |    __mode_t st_mode;
  119|       |    __uid_t st_uid;
  120|       |    __gid_t st_gid;
  121|       |    int __pad0;
  122|       |    __dev_t st_rdev;
  123|       |    __off_t st_size;
  124|       |    __blksize_t st_blksize;
  125|       |    __blkcnt_t st_blocks;
  126|       |    struct timespec st_atim;
  127|       |    struct timespec st_mtim;
  128|       |    struct timespec st_ctim;
  129|       |    __syscall_slong_t __glibc_reserved[3];
  130|       |};
  131|       |struct option {
  132|       |    char const *name;
  133|       |    int has_arg;
  134|       |    int *flag;
  135|       |    int val;
  136|       |};
  137|       |struct dirent {
  138|       |    __ino_t d_ino;
  139|       |    __off_t d_off;
  140|       |    unsigned short d_reclen;
  141|       |    unsigned char d_type;
  142|       |    char d_name[256];
  143|       |};
  144|       |struct __dirstream;
  145|       |struct __dirstream;
  146|       |typedef struct __dirstream DIR;
  147|       |typedef struct dirent dir_type;
  148|       |struct utimbuf {
  149|       |    __time_t actime;
  150|       |    __time_t modtime;
  151|       |};
  152|       |uch inbuf[32832];
  153|       |uch outbuf[18432];
  154|       |ush d_buf[32768];
  155|       |uch window[65536L];
  156|       |ush prev[1L << 16];
  157|       |unsigned int insize;
  158|       |unsigned int inptr;
  159|       |int ifd;
  160|       |int ofd;
  161|       |int test;
  162|       |int unlzh(int in, int out);
  163|       |int fill_inbuf(int eof_ok);
  164|       |void write_buf(int fd, voidp buf, unsigned int cnt);
  165|       |void error(char *m);
  166|       |static unsigned int decode(unsigned int count, uch *buffer);
  167|       |static void decode_start(void);
  168|       |static void huf_decode_start(void);
  169|       |static unsigned int decode_c(void);
  170|       |static unsigned int decode_p(void);
  171|       |static void read_pt_len(int nn, int nbit, int i_special);
  172|       |static void read_c_len(void);
  173|       |static void fillbuf(int n);
  174|       |static unsigned int getbits(int n);
  175|       |static void init_getbits(void);
  176|       |static void make_table(int nchar, uch *bitlen, int tablebits, ush *table);
  177|       |static uch pt_len[19];
  178|       |static unsigned int blocksize;
  179|       |static ush pt_table[256];
  180|       |static ush bitbuf;
  181|       |static unsigned int subbitbuf;
  182|       |static int bitcount;
  183|       |static void fillbuf(int n)
  184|      0|{
  185|      0|    unsigned int tmp;
  186|      0|    int tmp___0;
  187|      0|    int tmp___1;
  188|       |
  189|      0|    {
  190|      0|        bitbuf = (ush)((int)bitbuf << n);
  191|      0|        {
  192|      0|            while (1) {
  193|      0|while_continue: /* CIL Label */
  194|      0|                ;
  195|      0|                if (!(n > bitcount)) {
  196|      0|                    goto while_break;
  197|      0|                }
  198|      0|                n -= bitcount;
  199|      0|                bitbuf = (ush)((unsigned int)bitbuf | (subbitbuf << n));
  200|      0|                if (inptr < insize) {
  201|      0|                    tmp = inptr;
  202|      0|                    inptr++;
  203|      0|                    tmp___1 = (int)inbuf[tmp];
  204|      0|                }
  205|      0|                else {
  206|      0|                    {
  207|      0|                        tmp___0 = fill_inbuf(1);
  208|      0|                        tmp___1 = tmp___0;
  209|      0|                    }
  210|      0|                }
  211|      0|                subbitbuf = (unsigned int)tmp___1;
  212|      0|                if ((int)subbitbuf == -1) {
  213|      0|                    subbitbuf = 0U;
  214|      0|                }
  215|      0|                bitcount = 8;
  216|      0|            }
  217|      0|while_break: /* CIL Label */
  218|      0|            ;
  219|      0|        }
  220|      0|        bitcount -= n;
  221|      0|        bitbuf = (ush)((unsigned int)bitbuf | (subbitbuf >> bitcount));
  222|      0|        return;
  223|      0|    }
  224|      0|}
  225|       |static unsigned int getbits(int n)
  226|      0|{
  227|      0|    unsigned int x;
  228|       |
  229|      0|    {
  230|      0|        {
  231|      0|            x = (unsigned int)((int)bitbuf >>
  232|      0|                               (16UL * sizeof(char) - (unsigned long)n));
  233|      0|            fillbuf(n);
  234|      0|        }
  235|      0|        return (x);
  236|      0|    }
  237|      0|}
  238|       |static void init_getbits(void)
  239|      0|{
  240|       |
  241|      0|    {
  242|      0|        {
  243|      0|            bitbuf = (ush)0;
  244|      0|            subbitbuf = 0U;
  245|      0|            bitcount = 0;
  246|      0|            fillbuf((int)(16UL * sizeof(char)));
  247|      0|        }
  248|      0|        return;
  249|      0|    }
  250|      0|}
  251|       |static void make_table(int nchar, uch *bitlen, int tablebits, ush *table)
  252|      0|{
  253|      0|    ush count[17];
  254|      0|    ush weight[17];
  255|      0|    ush start[18];
  256|      0|    ush *p;
  257|      0|    unsigned int i___0;
  258|      0|    unsigned int k;
  259|      0|    unsigned int len;
  260|      0|    unsigned int ch;
  261|      0|    unsigned int jutbits;
  262|      0|    unsigned int avail;
  263|      0|    unsigned int nextcode;
  264|      0|    unsigned int mask;
  265|      0|    unsigned int tmp;
  266|      0|    ush tmp___0;
  267|      0|    unsigned int tmp___1;
  268|      0|    void *__cil_tmp20;
  269|      0|    void *__cil_tmp21;
  270|      0|    void *__cil_tmp22;
  271|      0|    char *__cil_tmp23;
  272|       |
  273|      0|    {
  274|      0|        i___0 = 1U;
  275|      0|        {
  276|      0|            while (1) {
  277|      0|while_continue: /* CIL Label */
  278|      0|                ;
  279|      0|                if (!(i___0 <= 16U)) {
  280|      0|                    goto while_break;
  281|      0|                }
  282|      0|                count[i___0] = (ush)0;
  283|      0|                i___0++;
  284|      0|            }
  285|      0|while_break: /* CIL Label */
  286|      0|            ;
  287|      0|        }
  288|      0|        i___0 = 0U;
  289|      0|        {
  290|      0|            while (1) {
  291|      0|while_continue___0: /* CIL Label */
  292|      0|                ;
  293|      0|                if (!(i___0 < (unsigned int)nchar)) {
  294|      0|                    goto while_break___0;
  295|      0|                }
  296|      0|                count[*(bitlen + i___0)] = (ush)((int)count[*(bitlen + i___0)] + 1);
  297|      0|                i___0++;
  298|      0|            }
  299|      0|while_break___0: /* CIL Label */
  300|      0|            ;
  301|      0|        }
  302|      0|        start[1] = (ush)0;
  303|      0|        i___0 = 1U;
  304|      0|        {
  305|      0|            while (1) {
  306|      0|while_continue___1: /* CIL Label */
  307|      0|                ;
  308|      0|                if (!(i___0 <= 16U)) {
  309|      0|                    goto while_break___1;
  310|      0|                }
  311|      0|                start[i___0 + 1U] =
  312|      0|                    (ush)((int)start[i___0] + ((int)count[i___0] << (16U - i___0)));
  313|      0|                i___0++;
  314|      0|            }
  315|      0|while_break___1: /* CIL Label */
  316|      0|            ;
  317|      0|        }
  318|      0|        if (((int)start[17] & 65535) != 0) {
  319|      0|            {
  320|      0|                error((char *)"Bad table\n");
  321|      0|            }
  322|      0|        }
  323|      0|        jutbits = (unsigned int)(16 - tablebits);
  324|      0|        i___0 = 1U;
  325|      0|        {
  326|      0|            while (1) {
  327|      0|while_continue___2: /* CIL Label */
  328|      0|                ;
  329|      0|                if (!(i___0 <= (unsigned int)tablebits)) {
  330|      0|                    goto while_break___2;
  331|      0|                }
  332|      0|                start[i___0] = (ush)((int)start[i___0] >> jutbits);
  333|      0|                weight[i___0] = (ush)(1U << ((unsigned int)tablebits - i___0));
  334|      0|                i___0++;
  335|      0|            }
  336|      0|while_break___2: /* CIL Label */
  337|      0|            ;
  338|      0|        }
  339|      0|        {
  340|      0|            while (1) {
  341|      0|while_continue___3: /* CIL Label */
  342|      0|                ;
  343|      0|                if (!(i___0 <= 16U)) {
  344|      0|                    goto while_break___3;
  345|      0|                }
  346|      0|                weight[i___0] = (ush)(1U << (16U - i___0));
  347|      0|                i___0++;
  348|      0|            }
  349|      0|while_break___3: /* CIL Label */
  350|      0|            ;
  351|      0|        }
  352|      0|        i___0 = (unsigned int)((int)start[tablebits + 1] >> jutbits);
  353|      0|        if (i___0 != 0U) {
  354|      0|            k = (unsigned int)(1 << tablebits);
  355|      0|            {
  356|      0|                while (1) {
  357|      0|while_continue___4: /* CIL Label */
  358|      0|                    ;
  359|      0|                    if (!(i___0 != k)) {
  360|      0|                        goto while_break___4;
  361|      0|                    }
  362|      0|                    tmp = i___0;
  363|      0|                    i___0++;
  364|      0|                    *(table + tmp) = (ush)0;
  365|      0|                }
  366|      0|while_break___4: /* CIL Label */
  367|      0|                ;
  368|      0|            }
  369|      0|        }
  370|      0|        avail = (unsigned int)nchar;
  371|      0|        mask = 1U << (15 - tablebits);
  372|      0|        ch = 0U;
  373|      0|        {
  374|      0|            while (1) {
  375|      0|while_continue___5: /* CIL Label */
  376|      0|                ;
  377|      0|                if (!(ch < (unsigned int)nchar)) {
  378|      0|                    goto while_break___5;
  379|      0|                }
  380|      0|                len = (unsigned int)*(bitlen + ch);
  381|      0|                if (len == 0U) {
  382|      0|                    goto __Cont;
  383|      0|                }
  384|      0|                nextcode = (unsigned int)((int)start[len] + (int)weight[len]);
  385|      0|                if (len <= (unsigned int)tablebits) {
  386|      0|                    i___0 = (unsigned int)start[len];
  387|      0|                    {
  388|      0|                        while (1) {
  389|      0|while_continue___6: /* CIL Label */
  390|      0|                            ;
  391|      0|                            if (!(i___0 < nextcode)) {
  392|      0|                                goto while_break___6;
  393|      0|                            }
  394|      0|                            *(table + i___0) = (ush)ch;
  395|      0|                            i___0++;
  396|      0|                        }
  397|      0|while_break___6: /* CIL Label */
  398|      0|                        ;
  399|      0|                    }
  400|      0|                }
  401|      0|                else {
  402|      0|                    k = (unsigned int)start[len];
  403|      0|                    p = table + (k >> jutbits);
  404|      0|                    i___0 = len - (unsigned int)tablebits;
  405|      0|                    {
  406|      0|                        while (1) {
  407|      0|while_continue___7: /* CIL Label */
  408|      0|                            ;
  409|      0|                            if (!(i___0 != 0U)) {
  410|      0|                                goto while_break___7;
  411|      0|                            }
  412|      0|                            if ((int)*p == 0) {
  413|      0|                                tmp___0 = (ush)0;
  414|      0|                                prev[avail] = tmp___0;
  415|      0|                                *((prev + 32768) + avail) = tmp___0;
  416|      0|                                tmp___1 = avail;
  417|      0|                                avail++;
  418|      0|                                *p = (ush)tmp___1;
  419|      0|                            }
  420|      0|                            if (k & mask) {
  421|      0|                                p = (prev + 32768) + (int)*p;
  422|      0|                            }
  423|      0|                            else {
  424|      0|                                p = &prev[*p];
  425|      0|                            }
  426|      0|                            k <<= 1;
  427|      0|                            i___0--;
  428|      0|                        }
  429|      0|while_break___7: /* CIL Label */
  430|      0|                        ;
  431|      0|                    }
  432|      0|                    *p = (ush)ch;
  433|      0|                }
  434|      0|                start[len] = (ush)nextcode;
  435|      0|__Cont:
  436|      0|                ch++;
  437|      0|            }
  438|      0|while_break___5: /* CIL Label */
  439|      0|            ;
  440|      0|        }
  441|      0|        return;
  442|      0|    }
  443|      0|}
  444|       |static void read_pt_len(int nn, int nbit, int i_special)
  445|      0|{
  446|      0|    int i___0;
  447|      0|    int c;
  448|      0|    int n;
  449|      0|    unsigned int mask;
  450|      0|    int tmp;
  451|      0|    int tmp___0;
  452|      0|    int tmp___1;
  453|      0|    int tmp___2;
  454|       |
  455|      0|    {
  456|      0|        {
  457|      0|            n = (int)getbits(nbit);
  458|      0|        }
  459|      0|        if (n == 0) {
  460|      0|            {
  461|      0|                c = (int)getbits(nbit);
  462|      0|                i___0 = 0;
  463|      0|            }
  464|      0|            {
  465|      0|                while (1) {
  466|      0|while_continue: /* CIL Label */
  467|      0|                    ;
  468|      0|                    if (!(i___0 < nn)) {
  469|      0|                        goto while_break;
  470|      0|                    }
  471|      0|                    pt_len[i___0] = (uch)0;
  472|      0|                    i___0++;
  473|      0|                }
  474|      0|while_break: /* CIL Label */
  475|      0|                ;
  476|      0|            }
  477|      0|            i___0 = 0;
  478|      0|            {
  479|      0|                while (1) {
  480|      0|while_continue___0: /* CIL Label */
  481|      0|                    ;
  482|      0|                    if (!(i___0 < 256)) {
  483|      0|                        goto while_break___0;
  484|      0|                    }
  485|      0|                    pt_table[i___0] = (ush)c;
  486|      0|                    i___0++;
  487|      0|                }
  488|      0|while_break___0: /* CIL Label */
  489|      0|                ;
  490|      0|            }
  491|      0|        }
  492|      0|        else {
  493|      0|            i___0 = 0;
  494|      0|            {
  495|      0|                while (1) {
  496|      0|while_continue___1: /* CIL Label */
  497|      0|                    ;
  498|      0|                    if (!(i___0 < n)) {
  499|      0|                        goto while_break___1;
  500|      0|                    }
  501|      0|                    c = (int)bitbuf >> (16UL * sizeof(char) - 3UL);
  502|      0|                    if (c == 7) {
  503|      0|                        mask = 1U << ((16UL * sizeof(char) - 1UL) - 3UL);
  504|      0|                        {
  505|      0|                            while (1) {
  506|      0|while_continue___2: /* CIL Label */
  507|      0|                                ;
  508|      0|                                if (!(mask & (unsigned int)bitbuf)) {
  509|      0|                                    goto while_break___2;
  510|      0|                                }
  511|      0|                                mask >>= 1;
  512|      0|                                c++;
  513|      0|                            }
  514|      0|while_break___2: /* CIL Label */
  515|      0|                            ;
  516|      0|                        }
  517|      0|                    }
  518|      0|                    if (c < 7) {
  519|      0|                        tmp = 3;
  520|      0|                    }
  521|      0|                    else {
  522|      0|                        tmp = c - 3;
  523|      0|                    }
  524|      0|                    {
  525|      0|                        fillbuf(tmp);
  526|      0|                        tmp___0 = i___0;
  527|      0|                        i___0++;
  528|      0|                        pt_len[tmp___0] = (uch)c;
  529|      0|                    }
  530|      0|                    if (i___0 == i_special) {
  531|      0|                        {
  532|      0|                            c = (int)getbits(2);
  533|      0|                        }
  534|      0|                        {
  535|      0|                            while (1) {
  536|      0|while_continue___3: /* CIL Label */
  537|      0|                                ;
  538|      0|                                c--;
  539|      0|                                if (!(c >= 0)) {
  540|      0|                                    goto while_break___3;
  541|      0|                                }
  542|      0|                                tmp___1 = i___0;
  543|      0|                                i___0++;
  544|      0|                                pt_len[tmp___1] = (uch)0;
  545|      0|                            }
  546|      0|while_break___3: /* CIL Label */
  547|      0|                            ;
  548|      0|                        }
  549|      0|                    }
  550|      0|                }
  551|      0|while_break___1: /* CIL Label */
  552|      0|                ;
  553|      0|            }
  554|      0|            {
  555|      0|                while (1) {
  556|      0|while_continue___4: /* CIL Label */
  557|      0|                    ;
  558|      0|                    if (!(i___0 < nn)) {
  559|      0|                        goto while_break___4;
  560|      0|                    }
  561|      0|                    tmp___2 = i___0;
  562|      0|                    i___0++;
  563|      0|                    pt_len[tmp___2] = (uch)0;
  564|      0|                }
  565|      0|while_break___4: /* CIL Label */
  566|      0|                ;
  567|      0|            }
  568|      0|            {
  569|      0|                make_table(nn, pt_len, 8, pt_table);
  570|      0|            }
  571|      0|        }
  572|      0|        return;
  573|      0|    }
  574|      0|}
  575|       |static void read_c_len(void)
  576|      0|{
  577|      0|    int i___0;
  578|      0|    int c;
  579|      0|    int n;
  580|      0|    unsigned int mask;
  581|      0|    unsigned int tmp;
  582|      0|    unsigned int tmp___0;
  583|      0|    int tmp___1;
  584|      0|    int tmp___2;
  585|      0|    int tmp___3;
  586|       |
  587|      0|    {
  588|      0|        {
  589|      0|            n = (int)getbits(9);
  590|      0|        }
  591|      0|        if (n == 0) {
  592|      0|            {
  593|      0|                c = (int)getbits(9);
  594|      0|                i___0 = 0;
  595|      0|            }
  596|      0|            {
  597|      0|                while (1) {
  598|      0|while_continue: /* CIL Label */
  599|      0|                    ;
  600|      0|                    if (!(i___0 < 510)) {
  601|      0|                        goto while_break;
  602|      0|                    }
  603|      0|                    outbuf[i___0] = (uch)0;
  604|      0|                    i___0++;
  605|      0|                }
  606|      0|while_break: /* CIL Label */
  607|      0|                ;
  608|      0|            }
  609|      0|            i___0 = 0;
  610|      0|            {
  611|      0|                while (1) {
  612|      0|while_continue___0: /* CIL Label */
  613|      0|                    ;
  614|      0|                    if (!(i___0 < 4096)) {
  615|      0|                        goto while_break___0;
  616|      0|                    }
  617|      0|                    d_buf[i___0] = (ush)c;
  618|      0|                    i___0++;
  619|      0|                }
  620|      0|while_break___0: /* CIL Label */
  621|      0|                ;
  622|      0|            }
  623|      0|        }
  624|      0|        else {
  625|      0|            i___0 = 0;
  626|      0|            {
  627|      0|                while (1) {
  628|      0|while_continue___1: /* CIL Label */
  629|      0|                    ;
  630|      0|                    if (!(i___0 < n)) {
  631|      0|                        goto while_break___1;
  632|      0|                    }
  633|      0|                    c = (int)pt_table[(int)bitbuf >> (16UL * sizeof(char) - 8UL)];
  634|      0|                    if (c >= 19) {
  635|      0|                        mask = 1U << ((16UL * sizeof(char) - 1UL) - 8UL);
  636|      0|                        {
  637|      0|                            while (1) {
  638|      0|while_continue___2: /* CIL Label */
  639|      0|                                ;
  640|      0|                                if ((unsigned int)bitbuf & mask) {
  641|      0|                                    c = (int)*((prev + 32768) + c);
  642|      0|                                }
  643|      0|                                else {
  644|      0|                                    c = (int)prev[c];
  645|      0|                                }
  646|      0|                                mask >>= 1;
  647|      0|                                if (!(c >= 19)) {
  648|      0|                                    goto while_break___2;
  649|      0|                                }
  650|      0|                            }
  651|      0|while_break___2: /* CIL Label */
  652|      0|                            ;
  653|      0|                        }
  654|      0|                    }
  655|      0|                    {
  656|      0|                        fillbuf((int)pt_len[c]);
  657|      0|                    }
  658|      0|                    if (c <= 2) {
  659|      0|                        if (c == 0) {
  660|      0|                            c = 1;
  661|      0|                        }
  662|      0|                        else {
  663|      0|                            if (c == 1) {
  664|      0|                                {
  665|      0|                                    tmp = getbits(4);
  666|      0|                                    c = (int)(tmp + 3U);
  667|      0|                                }
  668|      0|                            }
  669|      0|                            else {
  670|      0|                                {
  671|      0|                                    tmp___0 = getbits(9);
  672|      0|                                    c = (int)(tmp___0 + 20U);
  673|      0|                                }
  674|      0|                            }
  675|      0|                        }
  676|      0|                        {
  677|      0|                            while (1) {
  678|      0|while_continue___3: /* CIL Label */
  679|      0|                                ;
  680|      0|                                c--;
  681|      0|                                if (!(c >= 0)) {
  682|      0|                                    goto while_break___3;
  683|      0|                                }
  684|      0|                                tmp___1 = i___0;
  685|      0|                                i___0++;
  686|      0|                                outbuf[tmp___1] = (uch)0;
  687|      0|                            }
  688|      0|while_break___3: /* CIL Label */
  689|      0|                            ;
  690|      0|                        }
  691|      0|                    }
  692|      0|                    else {
  693|      0|                        tmp___2 = i___0;
  694|      0|                        i___0++;
  695|      0|                        outbuf[tmp___2] = (uch)(c - 2);
  696|      0|                    }
  697|      0|                }
  698|      0|while_break___1: /* CIL Label */
  699|      0|                ;
  700|      0|            }
  701|      0|            {
  702|      0|                while (1) {
  703|      0|while_continue___4: /* CIL Label */
  704|      0|                    ;
  705|      0|                    if (!(i___0 < 510)) {
  706|      0|                        goto while_break___4;
  707|      0|                    }
  708|      0|                    tmp___3 = i___0;
  709|      0|                    i___0++;
  710|      0|                    outbuf[tmp___3] = (uch)0;
  711|      0|                }
  712|      0|while_break___4: /* CIL Label */
  713|      0|                ;
  714|      0|            }
  715|      0|            {
  716|      0|                make_table(510, outbuf, 12, d_buf);
  717|      0|            }
  718|      0|        }
  719|      0|        return;
  720|      0|    }
  721|      0|}
  722|       |static unsigned int decode_c(void)
  723|      0|{
  724|      0|    unsigned int j___0;
  725|      0|    unsigned int mask;
  726|       |
  727|      0|    {
  728|      0|        if (blocksize == 0U) {
  729|      0|            {
  730|      0|                blocksize = getbits(16);
  731|      0|            }
  732|      0|            if (blocksize == 0U) {
  733|      0|                return (510U);
  734|      0|            }
  735|      0|            {
  736|      0|                read_pt_len(19, 5, 3);
  737|      0|                read_c_len();
  738|      0|                read_pt_len(14, 4, -1);
  739|      0|            }
  740|      0|        }
  741|      0|        blocksize--;
  742|      0|        j___0 = (unsigned int)d_buf[(int)bitbuf >> (16UL * sizeof(char) - 12UL)];
  743|      0|        if (j___0 >= 510U) {
  744|      0|            mask = 1U << ((16UL * sizeof(char) - 1UL) - 12UL);
  745|      0|            {
  746|      0|                while (1) {
  747|      0|while_continue: /* CIL Label */
  748|      0|                    ;
  749|      0|                    if ((unsigned int)bitbuf & mask) {
  750|      0|                        j___0 = (unsigned int)*((prev + 32768) + j___0);
  751|      0|                    }
  752|      0|                    else {
  753|      0|                        j___0 = (unsigned int)prev[j___0];
  754|      0|                    }
  755|      0|                    mask >>= 1;
  756|      0|                    if (!(j___0 >= 510U)) {
  757|      0|                        goto while_break;
  758|      0|                    }
  759|      0|                }
  760|      0|while_break: /* CIL Label */
  761|      0|                ;
  762|      0|            }
  763|      0|        }
  764|      0|        {
  765|      0|            fillbuf((int)outbuf[j___0]);
  766|      0|        }
  767|      0|        return (j___0);
  768|      0|    }
  769|      0|}
  770|       |static unsigned int decode_p(void)
  771|      0|{
  772|      0|    unsigned int j___0;
  773|      0|    unsigned int mask;
  774|      0|    unsigned int tmp;
  775|       |
  776|      0|    {
  777|      0|        j___0 = (unsigned int)pt_table[(int)bitbuf >> (16UL * sizeof(char) - 8UL)];
  778|      0|        if (j___0 >= 14U) {
  779|      0|            mask = 1U << ((16UL * sizeof(char) - 1UL) - 8UL);
  780|      0|            {
  781|      0|                while (1) {
  782|      0|while_continue: /* CIL Label */
  783|      0|                    ;
  784|      0|                    if ((unsigned int)bitbuf & mask) {
  785|      0|                        j___0 = (unsigned int)*((prev + 32768) + j___0);
  786|      0|                    }
  787|      0|                    else {
  788|      0|                        j___0 = (unsigned int)prev[j___0];
  789|      0|                    }
  790|      0|                    mask >>= 1;
  791|      0|                    if (!(j___0 >= 14U)) {
  792|      0|                        goto while_break;
  793|      0|                    }
  794|      0|                }
  795|      0|while_break: /* CIL Label */
  796|      0|                ;
  797|      0|            }
  798|      0|        }
  799|      0|        {
  800|      0|            fillbuf((int)pt_len[j___0]);
  801|      0|        }
  802|      0|        if (j___0 != 0U) {
  803|      0|            {
  804|      0|                tmp = getbits((int)(j___0 - 1U));
  805|      0|                j___0 = (1U << (j___0 - 1U)) + tmp;
  806|      0|            }
  807|      0|        }
  808|      0|        return (j___0);
  809|      0|    }
  810|      0|}
  811|       |static void huf_decode_start(void)
  812|      0|{
  813|       |
  814|      0|    {
  815|      0|        {
  816|      0|            init_getbits();
  817|      0|            blocksize = 0U;
  818|      0|        }
  819|      0|        return;
  820|      0|    }
  821|      0|}
  822|       |static int j;
  823|       |static int done;
  824|       |static void decode_start(void)
  825|      0|{
  826|       |
  827|      0|    {
  828|      0|        {
  829|      0|            huf_decode_start();
  830|      0|            j = 0;
  831|      0|            done = 0;
  832|      0|        }
  833|      0|        return;
  834|      0|    }
  835|      0|}
  836|       |static unsigned int i;
  837|       |static unsigned int decode(unsigned int count, uch *buffer)
  838|      0|{
  839|      0|    unsigned int r;
  840|      0|    unsigned int c;
  841|      0|    unsigned int tmp;
  842|       |
  843|      0|    {
  844|      0|        r = 0U;
  845|      0|        {
  846|      0|            while (1) {
  847|      0|while_continue: /* CIL Label */
  848|      0|                ;
  849|      0|                j--;
  850|      0|                if (!(j >= 0)) {
  851|      0|                    goto while_break;
  852|      0|                }
  853|      0|                *(buffer + r) = *(buffer + i);
  854|      0|                i = (i + 1U) & ((1U << 13) - 1U);
  855|      0|                r++;
  856|      0|                if (r == count) {
  857|      0|                    return (r);
  858|      0|                }
  859|      0|            }
  860|      0|while_break: /* CIL Label */
  861|      0|            ;
  862|      0|        }
  863|      0|        {
  864|      0|            while (1) {
  865|      0|while_continue___0: /* CIL Label */
  866|      0|                ;
  867|      0|                {
  868|      0|                    c = decode_c();
  869|      0|                }
  870|      0|                if (c == 510U) {
  871|      0|                    done = 1;
  872|      0|                    return (r);
  873|      0|                }
  874|      0|                if (c <= 255U) {
  875|      0|                    *(buffer + r) = (uch)c;
  876|      0|                    r++;
  877|      0|                    if (r == count) {
  878|      0|                        return (r);
  879|      0|                    }
  880|      0|                }
  881|      0|                else {
  882|      0|                    {
  883|      0|                        j = (int)(c - 253U);
  884|      0|                        tmp = decode_p();
  885|      0|                        i = ((r - tmp) - 1U) & ((1U << 13) - 1U);
  886|      0|                    }
  887|      0|                    {
  888|      0|                        while (1) {
  889|      0|while_continue___1: /* CIL Label */
  890|      0|                            ;
  891|      0|                            j--;
  892|      0|                            if (!(j >= 0)) {
  893|      0|                                goto while_break___1;
  894|      0|                            }
  895|      0|                            *(buffer + r) = *(buffer + i);
  896|      0|                            i = (i + 1U) & ((1U << 13) - 1U);
  897|      0|                            r++;
  898|      0|                            if (r == count) {
  899|      0|                                return (r);
  900|      0|                            }
  901|      0|                        }
  902|      0|while_break___1: /* CIL Label */
  903|      0|                        ;
  904|      0|                    }
  905|      0|                }
  906|      0|            }
  907|      0|while_break___0: /* CIL Label */
  908|      0|            ;
  909|      0|        }
  910|      0|    }
  911|      0|}
  912|       |int unlzh(int in, int out)
  913|      0|{
  914|      0|    unsigned int n;
  915|       |
  916|      0|    {
  917|      0|        {
  918|      0|            ifd = in;
  919|      0|            ofd = out;
  920|      0|            decode_start();
  921|      0|        }
  922|      0|        {
  923|      0|            while (1) {
  924|      0|while_continue: /* CIL Label */
  925|      0|                ;
  926|      0|                if (!(!done)) {
  927|      0|                    goto while_break;
  928|      0|                }
  929|      0|                {
  930|      0|                    n = decode(1U << 13, window);
  931|      0|                }
  932|      0|                if (!test) {
  933|      0|                    if (n > 0U) {
  934|      0|                        {
  935|      0|                            write_buf(out, (voidp)((char *)(window)), n);
  936|      0|                        }
  937|      0|                    }
  938|      0|                }
  939|      0|            }
  940|      0|while_break: /* CIL Label */
  941|      0|            ;
  942|      0|        }
  943|      0|        return (0);
  944|      0|    }
  945|      0|}
  946|       |unsigned int outcnt;
  947|       |long bytes_out;
  948|       |int unpack(int in, int out);
  949|       |void flush_window(void);
  950|       |static ulg orig_len;
  951|       |static int max_len;
  952|       |static uch literal[256];
  953|       |static int lit_base[26];
  954|       |static int leaves[26];
  955|       |static int parents[26];
  956|       |static int peek_bits;
  957|       |static ulg bitbuf___0;
  958|       |static int valid;
  959|       |static void read_tree(void);
  960|       |static void build_tree(void);
  961|       |static void read_tree(void)
  962|      0|{
  963|      0|    int len;
  964|      0|    int base;
  965|      0|    int n;
  966|      0|    unsigned int tmp;
  967|      0|    int tmp___0;
  968|      0|    int tmp___1;
  969|      0|    unsigned int tmp___2;
  970|      0|    int tmp___3;
  971|      0|    int tmp___4;
  972|      0|    unsigned int tmp___5;
  973|      0|    int tmp___6;
  974|      0|    int tmp___7;
  975|      0|    int tmp___8;
  976|      0|    unsigned int tmp___9;
  977|      0|    int tmp___10;
  978|      0|    int tmp___11;
  979|      0|    char *__cil_tmp17;
  980|      0|    char *__cil_tmp18;
  981|       |
  982|      0|    {
  983|      0|        orig_len = (ulg)0;
  984|      0|        n = 1;
  985|      0|        {
  986|      0|            while (1) {
  987|      0|while_continue: /* CIL Label */
  988|      0|                ;
  989|      0|                if (!(n <= 4)) {
  990|      0|                    goto while_break;
  991|      0|                }
  992|      0|                if (inptr < insize) {
  993|      0|                    tmp = inptr;
  994|      0|                    inptr++;
  995|      0|                    tmp___1 = (int)inbuf[tmp];
  996|      0|                }
  997|      0|                else {
  998|      0|                    {
  999|      0|                        tmp___0 = fill_inbuf(0);
 1000|      0|                        tmp___1 = tmp___0;
 1001|      0|                    }
 1002|      0|                }
 1003|      0|                orig_len = (orig_len << 8) | (ulg)tmp___1;
 1004|      0|                n++;
 1005|      0|            }
 1006|      0|while_break: /* CIL Label */
 1007|      0|            ;
 1008|      0|        }
 1009|      0|        if (inptr < insize) {
 1010|      0|            tmp___2 = inptr;
 1011|      0|            inptr++;
 1012|      0|            tmp___4 = (int)inbuf[tmp___2];
 1013|      0|        }
 1014|      0|        else {
 1015|      0|            {
 1016|      0|                tmp___3 = fill_inbuf(0);
 1017|      0|                tmp___4 = tmp___3;
 1018|      0|            }
 1019|      0|        }
 1020|      0|        max_len = tmp___4;
 1021|      0|        if (max_len > 25) {
 1022|      0|            {
 1023|      0|                error((char *)"invalid compressed data -- Huffman code > 32 bits");
 1024|      0|            }
 1025|      0|        }
 1026|      0|        n = 0;
 1027|      0|        len = 1;
 1028|      0|        {
 1029|      0|            while (1) {
 1030|      0|while_continue___0: /* CIL Label */
 1031|      0|                ;
 1032|      0|                if (!(len <= max_len)) {
 1033|      0|                    goto while_break___0;
 1034|      0|                }
 1035|      0|                if (inptr < insize) {
 1036|      0|                    tmp___5 = inptr;
 1037|      0|                    inptr++;
 1038|      0|                    tmp___7 = (int)inbuf[tmp___5];
 1039|      0|                }
 1040|      0|                else {
 1041|      0|                    {
 1042|      0|                        tmp___6 = fill_inbuf(0);
 1043|      0|                        tmp___7 = tmp___6;
 1044|      0|                    }
 1045|      0|                }
 1046|      0|                leaves[len] = tmp___7;
 1047|      0|                n += leaves[len];
 1048|      0|                len++;
 1049|      0|            }
 1050|      0|while_break___0: /* CIL Label */
 1051|      0|            ;
 1052|      0|        }
 1053|      0|        if (n > 256) {
 1054|      0|            {
 1055|      0|                error((char *)"too many leaves in Huffman tree");
 1056|      0|            }
 1057|      0|        }
 1058|      0|        (leaves[max_len])++;
 1059|      0|        base = 0;
 1060|      0|        len = 1;
 1061|      0|        {
 1062|      0|            while (1) {
 1063|      0|while_continue___1: /* CIL Label */
 1064|      0|                ;
 1065|      0|                if (!(len <= max_len)) {
 1066|      0|                    goto while_break___1;
 1067|      0|                }
 1068|      0|                lit_base[len] = base;
 1069|      0|                n = leaves[len];
 1070|      0|                {
 1071|      0|                    while (1) {
 1072|      0|while_continue___2: /* CIL Label */
 1073|      0|                        ;
 1074|      0|                        if (!(n > 0)) {
 1075|      0|                            goto while_break___2;
 1076|      0|                        }
 1077|      0|                        tmp___8 = base;
 1078|      0|                        base++;
 1079|      0|                        if (inptr < insize) {
 1080|      0|                            tmp___9 = inptr;
 1081|      0|                            inptr++;
 1082|      0|                            tmp___11 = (int)inbuf[tmp___9];
 1083|      0|                        }
 1084|      0|                        else {
 1085|      0|                            {
 1086|      0|                                tmp___10 = fill_inbuf(0);
 1087|      0|                                tmp___11 = tmp___10;
 1088|      0|                            }
 1089|      0|                        }
 1090|      0|                        literal[tmp___8] = (uch)tmp___11;
 1091|      0|                        n--;
 1092|      0|                    }
 1093|      0|while_break___2: /* CIL Label */
 1094|      0|                    ;
 1095|      0|                }
 1096|      0|                len++;
 1097|      0|            }
 1098|      0|while_break___1: /* CIL Label */
 1099|      0|            ;
 1100|      0|        }
 1101|      0|        (leaves[max_len])++;
 1102|      0|        return;
 1103|      0|    }
 1104|      0|}
 1105|       |static void build_tree(void)
 1106|      0|{
 1107|      0|    int nodes;
 1108|      0|    int len;
 1109|      0|    uch *prefixp;
 1110|      0|    int prefixes;
 1111|      0|    int tmp;
 1112|       |
 1113|      0|    {
 1114|      0|        nodes = 0;
 1115|      0|        len = max_len;
 1116|      0|        {
 1117|      0|            while (1) {
 1118|      0|while_continue: /* CIL Label */
 1119|      0|                ;
 1120|      0|                if (!(len >= 1)) {
 1121|      0|                    goto while_break;
 1122|      0|                }
 1123|      0|                nodes >>= 1;
 1124|      0|                parents[len] = nodes;
 1125|      0|                lit_base[len] -= nodes;
 1126|      0|                nodes += leaves[len];
 1127|      0|                len--;
 1128|      0|            }
 1129|      0|while_break: /* CIL Label */
 1130|      0|            ;
 1131|      0|        }
 1132|      0|        if (max_len <= 12) {
 1133|      0|            peek_bits = max_len;
 1134|      0|        }
 1135|      0|        else {
 1136|      0|            peek_bits = 12;
 1137|      0|        }
 1138|      0|        prefixp = &outbuf[1 << peek_bits];
 1139|      0|        len = 1;
 1140|      0|        {
 1141|      0|            while (1) {
 1142|      0|while_continue___0: /* CIL Label */
 1143|      0|                ;
 1144|      0|                if (!(len <= peek_bits)) {
 1145|      0|                    goto while_break___0;
 1146|      0|                }
 1147|      0|                prefixes = leaves[len] << (peek_bits - len);
 1148|      0|                {
 1149|      0|                    while (1) {
 1150|      0|while_continue___1: /* CIL Label */
 1151|      0|                        ;
 1152|      0|                        tmp = prefixes;
 1153|      0|                        prefixes--;
 1154|      0|                        if (!tmp) {
 1155|      0|                            goto while_break___1;
 1156|      0|                        }
 1157|      0|                        prefixp--;
 1158|      0|                        *prefixp = (uch)len;
 1159|      0|                    }
 1160|      0|while_break___1: /* CIL Label */
 1161|      0|                    ;
 1162|      0|                }
 1163|      0|                len++;
 1164|      0|            }
 1165|      0|while_break___0: /* CIL Label */
 1166|      0|            ;
 1167|      0|        }
 1168|      0|        {
 1169|      0|            while (1) {
 1170|      0|while_continue___2: /* CIL Label */
 1171|      0|                ;
 1172|      0|                if (!((unsigned long)prefixp > (unsigned long)(outbuf))) {
 1173|      0|                    goto while_break___2;
 1174|      0|                }
 1175|      0|                prefixp--;
 1176|      0|                *prefixp = (uch)0;
 1177|      0|            }
 1178|      0|while_break___2: /* CIL Label */
 1179|      0|            ;
 1180|      0|        }
 1181|      0|        return;
 1182|      0|    }
 1183|      0|}
 1184|       |int unpack(int in, int out)
 1185|      0|{
 1186|      0|    int len;
 1187|      0|    unsigned int eob;
 1188|      0|    register unsigned int peek;
 1189|      0|    unsigned int peek_mask;
 1190|      0|    unsigned int tmp;
 1191|      0|    int tmp___0;
 1192|      0|    int tmp___1;
 1193|      0|    ulg mask;
 1194|      0|    unsigned int tmp___2;
 1195|      0|    int tmp___3;
 1196|      0|    int tmp___4;
 1197|      0|    unsigned int tmp___5;
 1198|      0|    char *__cil_tmp15;
 1199|       |
 1200|      0|    {
 1201|      0|        {
 1202|      0|            ifd = in;
 1203|      0|            ofd = out;
 1204|      0|            read_tree();
 1205|      0|            build_tree();
 1206|      0|            valid = 0;
 1207|      0|            bitbuf___0 = (ulg)0;
 1208|      0|            peek_mask = (unsigned int)((1 << peek_bits) - 1);
 1209|      0|            eob = (unsigned int)(leaves[max_len] - 1);
 1210|      0|        }
 1211|      0|        {
 1212|      0|            while (1) {
 1213|      0|while_continue: /* CIL Label */
 1214|      0|                ;
 1215|      0|                {
 1216|      0|                    while (1) {
 1217|      0|while_continue___0: /* CIL Label */
 1218|      0|                        ;
 1219|      0|                        if (!(valid < peek_bits)) {
 1220|      0|                            goto while_break___0;
 1221|      0|                        }
 1222|      0|                        if (inptr < insize) {
 1223|      0|                            tmp = inptr;
 1224|      0|                            inptr++;
 1225|      0|                            tmp___1 = (int)inbuf[tmp];
 1226|      0|                        }
 1227|      0|                        else {
 1228|      0|                            {
 1229|      0|                                tmp___0 = fill_inbuf(0);
 1230|      0|                                tmp___1 = tmp___0;
 1231|      0|                            }
 1232|      0|                        }
 1233|      0|                        bitbuf___0 = (bitbuf___0 << 8) | (ulg)tmp___1;
 1234|      0|                        valid += 8;
 1235|      0|                    }
 1236|      0|while_break___0: /* CIL Label */
 1237|      0|                    ;
 1238|      0|                }
 1239|      0|                peek = (unsigned int)((bitbuf___0 >> (valid - peek_bits)) &
 1240|      0|                                      (unsigned long)peek_mask);
 1241|      0|                len = (int)outbuf[peek];
 1242|      0|                if (len > 0) {
 1243|      0|                    peek >>= peek_bits - len;
 1244|      0|                }
 1245|      0|                else {
 1246|      0|                    mask = (ulg)peek_mask;
 1247|      0|                    len = peek_bits;
 1248|      0|                    {
 1249|      0|                        while (1) {
 1250|      0|while_continue___1: /* CIL Label */
 1251|      0|                            ;
 1252|      0|                            len++;
 1253|      0|                            mask = (mask << 1) + 1UL;
 1254|      0|                            {
 1255|      0|                                while (1) {
 1256|      0|while_continue___2: /* CIL Label */
 1257|      0|                                    ;
 1258|      0|                                    if (!(valid < len)) {
 1259|      0|                                        goto while_break___2;
 1260|      0|                                    }
 1261|      0|                                    if (inptr < insize) {
 1262|      0|                                        tmp___2 = inptr;
 1263|      0|                                        inptr++;
 1264|      0|                                        tmp___4 = (int)inbuf[tmp___2];
 1265|      0|                                    }
 1266|      0|                                    else {
 1267|      0|                                        {
 1268|      0|                                            tmp___3 = fill_inbuf(0);
 1269|      0|                                            tmp___4 = tmp___3;
 1270|      0|                                        }
 1271|      0|                                    }
 1272|      0|                                    bitbuf___0 = (bitbuf___0 << 8) | (ulg)tmp___4;
 1273|      0|                                    valid += 8;
 1274|      0|                                }
 1275|      0|while_break___2: /* CIL Label */
 1276|      0|                                ;
 1277|      0|                            }
 1278|      0|                            peek = (unsigned int)((bitbuf___0 >> (valid - len)) & mask);
 1279|      0|                            if (!(peek < (unsigned int)parents[len])) {
 1280|      0|                                goto while_break___1;
 1281|      0|                            }
 1282|      0|                        }
 1283|      0|while_break___1: /* CIL Label */
 1284|      0|                        ;
 1285|      0|                    }
 1286|      0|                }
 1287|      0|                if (peek == eob) {
 1288|      0|                    if (len == max_len) {
 1289|      0|                        goto while_break;
 1290|      0|                    }
 1291|      0|                }
 1292|      0|                tmp___5 = outcnt;
 1293|      0|                outcnt++;
 1294|      0|                window[tmp___5] = literal[peek + (unsigned int)lit_base[len]];
 1295|      0|                if (outcnt == 32768U) {
 1296|      0|                    {
 1297|      0|                        flush_window();
 1298|      0|                    }
 1299|      0|                }
 1300|      0|                valid -= len;
 1301|      0|            }
 1302|      0|while_break: /* CIL Label */
 1303|      0|            ;
 1304|      0|        }
 1305|      0|        {
 1306|      0|            flush_window();
 1307|      0|        }
 1308|      0|        if (orig_len != (ulg)bytes_out) {
 1309|      0|            {
 1310|      0|                error((char *)"invalid compressed data--length error");
 1311|      0|            }
 1312|      0|        }
 1313|      0|        return (0);
 1314|      0|    }
 1315|      0|}
 1316|       |extern ssize_t read(int __fd, void *__buf, size_t __nbytes);
 1317|       |extern struct _IO_FILE *stderr;
 1318|       |extern int fprintf(FILE *__restrict __stream, char const *__restrict __format,
 1319|       |                   ...);
 1320|       |extern __attribute__((__nothrow__)) void *(
 1321|       |    __attribute__((__nonnull__(1, 2), __leaf__))
 1322|       |    memcpy)(void *__restrict __dest, void const *__restrict __src, size_t __n);
 1323|       |extern
 1324|       |__attribute__((__nothrow__)) void *(__attribute__((__nonnull__(1),
 1325|       |                                    __leaf__))
 1326|       |                                    memset)(void *__s, int __c, size_t __n);
 1327|       |long bytes_in;
 1328|       |char ifname[1024];
 1329|       |char *progname;
 1330|       |int exit_code;
 1331|       |int quiet;
 1332|       |int to_stdout;
 1333|       |void read_error(void);
 1334|       |int maxbits;
 1335|       |int block_mode;
 1336|       |int unlzw(int in, int out);
 1337|       |int block_mode = 128;
 1338|       |int unlzw(int in, int out)
 1339|      0|{
 1340|      0|    register char_type *stackp;
 1341|      0|    code_int code;
 1342|      0|    int finchar;
 1343|      0|    code_int oldcode;
 1344|      0|    code_int incode;
 1345|      0|    long inbits;
 1346|      0|    long posbits;
 1347|      0|    int outpos;
 1348|      0|    unsigned int bitmask;
 1349|      0|    code_int free_ent;
 1350|      0|    code_int maxcode;
 1351|      0|    code_int maxmaxcode;
 1352|      0|    int n_bits;
 1353|      0|    int rsize;
 1354|      0|    unsigned int tmp;
 1355|      0|    int tmp___0;
 1356|      0|    register int i___0;
 1357|      0|    int e;
 1358|      0|    int o;
 1359|      0|    register char_type *p;
 1360|      0|    int tmp___1;
 1361|      0|    char const *tmp___2;
 1362|      0|    register int i___1;
 1363|      0|    char *__cil_tmp27;
 1364|      0|    char *__cil_tmp28;
 1365|      0|    char *__cil_tmp29;
 1366|       |
 1367|      0|    {
 1368|      0|        if (inptr < insize) {
 1369|      0|            tmp = inptr;
 1370|      0|            inptr++;
 1371|      0|            maxbits = (int)inbuf[tmp];
 1372|      0|        }
 1373|      0|        else {
 1374|      0|            {
 1375|      0|                tmp___0 = fill_inbuf(0);
 1376|      0|                maxbits = tmp___0;
 1377|      0|            }
 1378|      0|        }
 1379|      0|        block_mode = maxbits & 128;
 1380|      0|        if ((maxbits & 96) != 0) {
 1381|      0|            if (!quiet) {
 1382|      0|                {
 1383|      0|                    fprintf((FILE * /* __restrict  */) stderr,
 1384|      0|                            (char const * /* __restrict  */) "\n%s: %s: warning, unknown "
 1385|      0|                            "flags 0x%x\n",
 1386|      0|                            progname, ifname, maxbits & 96);
 1387|      0|                }
 1388|      0|            }
 1389|      0|            if (exit_code == 0) {
 1390|      0|                exit_code = 2;
 1391|      0|            }
 1392|      0|        }
 1393|      0|        maxbits &= 31;
 1394|      0|        maxmaxcode = 1L << maxbits;
 1395|      0|        if (maxbits > 16) {
 1396|      0|            {
 1397|      0|                fprintf(
 1398|      0|                    (FILE * /* __restrict  */) stderr,
 1399|      0|                    (char const * /* __restrict  */) "\n%s: %s: compressed with %d "
 1400|      0|                    "bits, can only handle %d bits\n",
 1401|      0|                    progname, ifname, maxbits, 16);
 1402|      0|                exit_code = 1;
 1403|      0|            }
 1404|      0|            return (1);
 1405|      0|        }
 1406|      0|        rsize = (int)insize;
 1407|      0|        n_bits = 9;
 1408|      0|        maxcode = (1L << n_bits) - 1L;
 1409|      0|        bitmask = (unsigned int)((1 << n_bits) - 1);
 1410|      0|        oldcode = (code_int)-1;
 1411|      0|        finchar = 0;
 1412|      0|        outpos = 0;
 1413|      0|        posbits = (long)(inptr << 3);
 1414|      0|        if (block_mode) {
 1415|      0|            free_ent = (code_int)257;
 1416|      0|        }
 1417|      0|        else {
 1418|      0|            free_ent = (code_int)256;
 1419|      0|        }
 1420|      0|        {
 1421|      0|            memset((voidp)(prev), 0, (size_t)256);
 1422|      0|            code = (code_int)255;
 1423|      0|        }
 1424|      0|        {
 1425|      0|            while (1) {
 1426|      0|while_continue: /* CIL Label */
 1427|      0|                ;
 1428|      0|                if (!(code >= 0L)) {
 1429|      0|                    goto while_break;
 1430|      0|                }
 1431|      0|                window[code] = (char_type)code;
 1432|      0|                code--;
 1433|      0|            }
 1434|      0|while_break: /* CIL Label */
 1435|      0|            ;
 1436|      0|        }
 1437|      0|        {
 1438|      0|            while (1) {
 1439|      0|while_continue___0: /* CIL Label */
 1440|      0|                ;
 1441|      0|resetbuf:
 1442|      0|                o = (int)(posbits >> 3);
 1443|      0|                e = (int)(insize - (unsigned int)o);
 1444|      0|                i___0 = 0;
 1445|      0|                {
 1446|      0|                    while (1) {
 1447|      0|while_continue___1: /* CIL Label */
 1448|      0|                        ;
 1449|      0|                        if (!(i___0 < e)) {
 1450|      0|                            goto while_break___1;
 1451|      0|                        }
 1452|      0|                        inbuf[i___0] = inbuf[i___0 + o];
 1453|      0|                        i___0++;
 1454|      0|                    }
 1455|      0|while_break___1: /* CIL Label */
 1456|      0|                    ;
 1457|      0|                }
 1458|      0|                insize = (unsigned int)e;
 1459|      0|                posbits = 0L;
 1460|      0|                if (insize < 64U) {
 1461|      0|                    {
 1462|      0|                        rsize = (int)read(in, (void *)((char *)(inbuf) + insize),
 1463|      0|                                          (size_t)32768);
 1464|      0|                    }
 1465|      0|                    if (rsize == -1) {
 1466|      0|                        {
 1467|      0|                            read_error();
 1468|      0|                        }
 1469|      0|                    }
 1470|      0|                    insize += (unsigned int)rsize;
 1471|      0|                    bytes_in = (long)((ulg)bytes_in + (ulg)rsize);
 1472|      0|                }
 1473|      0|                if (rsize != 0) {
 1474|      0|                    inbits = ((long)insize - (long)(insize % (unsigned int)n_bits)) << 3;
 1475|      0|                }
 1476|      0|                else {
 1477|      0|                    inbits = ((long)insize << 3) - (long)(n_bits - 1);
 1478|      0|                }
 1479|      0|                {
 1480|      0|                    while (1) {
 1481|      0|while_continue___2: /* CIL Label */
 1482|      0|                        ;
 1483|      0|                        if (!(inbits > posbits)) {
 1484|      0|                            goto while_break___2;
 1485|      0|                        }
 1486|      0|                        if (free_ent > maxcode) {
 1487|      0|                            posbits =
 1488|      0|                                (posbits - 1L) + ((long)(n_bits << 3) -
 1489|      0|                                                  ((posbits - 1L) + (long)(n_bits << 3)) %
 1490|      0|                                                  (long)(n_bits << 3));
 1491|      0|                            n_bits++;
 1492|      0|                            if (n_bits == maxbits) {
 1493|      0|                                maxcode = maxmaxcode;
 1494|      0|                            }
 1495|      0|                            else {
 1496|      0|                                maxcode = (1L << n_bits) - 1L;
 1497|      0|                            }
 1498|      0|                            bitmask = (unsigned int)((1 << n_bits) - 1);
 1499|      0|                            goto resetbuf;
 1500|      0|                        }
 1501|      0|                        p = &inbuf[posbits >> 3];
 1502|      0|                        code = ((((long)*(p + 0) | ((long)*(p + 1) << 8)) |
 1503|      0|                                 ((long)*(p + 2) << 16)) >>
 1504|      0|                                (posbits & 7L)) &
 1505|      0|                               (long)bitmask;
 1506|      0|                        posbits += (long)n_bits;
 1507|      0|                        if (oldcode == -1L) {
 1508|      0|                            if (code >= 256L) {
 1509|      0|                                {
 1510|      0|                                    error((char *)"corrupt input.");
 1511|      0|                                }
 1512|      0|                            }
 1513|      0|                            tmp___1 = outpos;
 1514|      0|                            outpos++;
 1515|      0|                            oldcode = code;
 1516|      0|                            finchar = (int)oldcode;
 1517|      0|                            outbuf[tmp___1] = (char_type)finchar;
 1518|      0|                            goto while_continue___2;
 1519|      0|                        }
 1520|      0|                        if (code == 256L) {
 1521|      0|                            if (block_mode) {
 1522|      0|                                {
 1523|      0|                                    memset((voidp)(prev), 0, (size_t)256);
 1524|      0|                                    free_ent = (code_int)256;
 1525|      0|                                    posbits =
 1526|      0|                                        (posbits - 1L) + ((long)(n_bits << 3) -
 1527|      0|                                                          ((posbits - 1L) + (long)(n_bits << 3)) %
 1528|      0|                                                          (long)(n_bits << 3));
 1529|      0|                                    n_bits = 9;
 1530|      0|                                    maxcode = (1L << n_bits) - 1L;
 1531|      0|                                    bitmask = (unsigned int)((1 << n_bits) - 1);
 1532|      0|                                }
 1533|      0|                                goto resetbuf;
 1534|      0|                            }
 1535|      0|                        }
 1536|      0|                        incode = code;
 1537|      0|                        stackp = (char_type *)(&d_buf[32767]);
 1538|      0|                        if (code >= free_ent) {
 1539|      0|                            if (code > free_ent) {
 1540|      0|                                if (!test) {
 1541|      0|                                    if (outpos > 0) {
 1542|      0|                                        {
 1543|      0|                                            write_buf(out, (voidp)((char *)(outbuf)),
 1544|      0|                                                      (unsigned int)outpos);
 1545|      0|                                            bytes_out = (long)((ulg)bytes_out + (ulg)outpos);
 1546|      0|                                        }
 1547|      0|                                    }
 1548|      0|                                }
 1549|      0|                                if (to_stdout) {
 1550|      0|                                    tmp___2 = "corrupt input.";
 1551|      0|                                }
 1552|      0|                                else {
 1553|      0|                                    tmp___2 = "corrupt input. Use zcat to recover some data.";
 1554|      0|                                }
 1555|      0|                                {
 1556|      0|                                    error((char *)tmp___2);
 1557|      0|                                }
 1558|      0|                            }
 1559|      0|                            stackp--;
 1560|      0|                            *stackp = (char_type)finchar;
 1561|      0|                            code = oldcode;
 1562|      0|                        }
 1563|      0|                        {
 1564|      0|                            while (1) {
 1565|      0|while_continue___3: /* CIL Label */
 1566|      0|                                ;
 1567|      0|                                if (!((cmp_code_int)code >= 256UL)) {
 1568|      0|                                    goto while_break___3;
 1569|      0|                                }
 1570|      0|                                stackp--;
 1571|      0|                                *stackp = window[code];
 1572|      0|                                code = (code_int)prev[code];
 1573|      0|                            }
 1574|      0|while_break___3: /* CIL Label */
 1575|      0|                            ;
 1576|      0|                        }
 1577|      0|                        stackp--;
 1578|      0|                        finchar = (int)window[code];
 1579|      0|                        *stackp = (char_type)finchar;
 1580|      0|                        i___1 = (int)((char_type *)(&d_buf[32767]) - stackp);
 1581|      0|                        if (outpos + i___1 >= 16384) {
 1582|      0|                            {
 1583|      0|                                while (1) {
 1584|      0|while_continue___4: /* CIL Label */
 1585|      0|                                    ;
 1586|      0|                                    if (i___1 > 16384 - outpos) {
 1587|      0|                                        i___1 = 16384 - outpos;
 1588|      0|                                    }
 1589|      0|                                    if (i___1 > 0) {
 1590|      0|                                        {
 1591|      0|                                            memcpy((void * /* __restrict  */)(outbuf + outpos),
 1592|      0|                                                   (void const * /* __restrict  */)stackp,
 1593|      0|                                                   (size_t)i___1);
 1594|      0|                                            outpos += i___1;
 1595|      0|                                        }
 1596|      0|                                    }
 1597|      0|                                    if (outpos >= 16384) {
 1598|      0|                                        if (!test) {
 1599|      0|                                            {
 1600|      0|                                                write_buf(out, (voidp)((char *)(outbuf)),
 1601|      0|                                                          (unsigned int)outpos);
 1602|      0|                                                bytes_out = (long)((ulg)bytes_out + (ulg)outpos);
 1603|      0|                                            }
 1604|      0|                                        }
 1605|      0|                                        outpos = 0;
 1606|      0|                                    }
 1607|      0|                                    stackp += i___1;
 1608|      0|                                    i___1 = (int)((char_type *)(&d_buf[32767]) - stackp);
 1609|      0|                                    if (!(i___1 > 0)) {
 1610|      0|                                        goto while_break___4;
 1611|      0|                                    }
 1612|      0|                                }
 1613|      0|while_break___4: /* CIL Label */
 1614|      0|                                ;
 1615|      0|                            }
 1616|      0|                        }
 1617|      0|                        else {
 1618|      0|                            {
 1619|      0|                                memcpy((void * /* __restrict  */)(outbuf + outpos),
 1620|      0|                                       (void const * /* __restrict  */)stackp, (size_t)i___1);
 1621|      0|                                outpos += i___1;
 1622|      0|                            }
 1623|      0|                        }
 1624|      0|                        code = free_ent;
 1625|      0|                        if (code < maxmaxcode) {
 1626|      0|                            prev[code] = (unsigned short)oldcode;
 1627|      0|                            window[code] = (char_type)finchar;
 1628|      0|                            free_ent = code + 1L;
 1629|      0|                        }
 1630|      0|                        oldcode = incode;
 1631|      0|                    }
 1632|      0|while_break___2: /* CIL Label */
 1633|      0|                    ;
 1634|      0|                }
 1635|      0|                if (!(rsize != 0)) {
 1636|      0|                    goto while_break___0;
 1637|      0|                }
 1638|      0|            }
 1639|      0|while_break___0: /* CIL Label */
 1640|      0|            ;
 1641|      0|        }
 1642|      0|        if (!test) {
 1643|      0|            if (outpos > 0) {
 1644|      0|                {
 1645|      0|                    write_buf(out, (voidp)((char *)(outbuf)), (unsigned int)outpos);
 1646|      0|                    bytes_out = (long)((ulg)bytes_out + (ulg)outpos);
 1647|      0|                }
 1648|      0|            }
 1649|      0|        }
 1650|      0|        return (0);
 1651|      0|    }
 1652|      0|}
 1653|       |int lzw(int in, int out);
 1654|       |static int msg_done = 0;
 1655|       |int lzw(int in, int out)
 1656|      0|{
 1657|       |
 1658|      0|    {
 1659|      0|        if (msg_done) {
 1660|      0|            return (1);
 1661|      0|        }
 1662|      0|        {
 1663|      0|            msg_done = 1;
 1664|      0|            fprintf((FILE * /* __restrict  */) stderr,
 1665|      0|                    (char const * /* __restrict  */) "output in compress .Z format "
 1666|      0|                    "not supported\n");
 1667|      0|        }
 1668|      0|        if (in != out) {
 1669|      0|            exit_code = 1;
 1670|      0|        }
 1671|      0|        return (1);
 1672|      0|    }
 1673|      0|}
 1674|       |extern __attribute__((__nothrow__)) unsigned short const **(
 1675|       |    __attribute__((__leaf__)) __ctype_b_loc)(void)__attribute__((__const__));
 1676|       |extern __attribute__((__nothrow__)) int *(
 1677|       |    __attribute__((__leaf__)) __errno_location)(void)__attribute__((__const__));
 1678|       |extern ssize_t write(int __fd, void const *__buf, size_t __n);
 1679|       |extern __attribute__((__nothrow__)) void *(__attribute__((__leaf__))
 1680|       |        malloc)(size_t __size)
 1681|       |__attribute__((__malloc__));
 1682|       |extern
 1683|       |__attribute__((__nothrow__)) void *(__attribute__((__leaf__))
 1684|       |                                    calloc)(size_t __nmemb, size_t __size)
 1685|       |__attribute__((__malloc__));
 1686|       |extern __attribute__((__nothrow__)) void(__attribute__((__leaf__))
 1687|       |        free)(void *__ptr);
 1688|       |extern __attribute__((__nothrow__)) char *(__attribute__((__nonnull__(1),
 1689|       |        __leaf__))
 1690|       |        getenv)(char const *__name);
 1691|       |extern int _IO_putc(int __c, _IO_FILE *__fp);
 1692|       |extern void perror(char const *__s);
 1693|       |extern __attribute__((__nothrow__)) char *(
 1694|       |    __attribute__((__nonnull__(1, 2), __leaf__))
 1695|       |    strcpy)(char *__restrict __dest, char const *__restrict __src);
 1696|       |extern __attribute__((__nothrow__)) char *(__attribute__((__nonnull__(1),
 1697|       |        __leaf__))
 1698|       |        strrchr)(char const *__s, int __c)
 1699|       |__attribute__((__pure__));
 1700|       |extern __attribute__((__nothrow__))
 1701|       |size_t(__attribute__((__nonnull__(1, 2), __leaf__))
 1702|       |       strcspn)(char const *__s, char const *__reject)
 1703|       |__attribute__((__pure__));
 1704|       |extern __attribute__((__nothrow__))
 1705|       |size_t(__attribute__((__nonnull__(1, 2), __leaf__))
 1706|       |       strspn)(char const *__s, char const *__accept) __attribute__((__pure__));
 1707|       |extern __attribute__((__nothrow__))
 1708|       |size_t(__attribute__((__nonnull__(1), __leaf__)) strlen)(char const *__s)
 1709|       |__attribute__((__pure__));
 1710|       |char ofname[1024];
 1711|       |void abort_gzip(void);
 1712|       |int copy(int in, int out);
 1713|       |ulg updcrc(uch *s, unsigned int n);
 1714|       |void clear_bufs(void);
 1715|       |void flush_outbuf(void);
 1716|       |char *strlwr(char *s);
 1717|       |char *basename(char *fname);
 1718|       |char *add_envopt(int *argcp, char ***argvp, char *env___0);
 1719|       |void write_error(void);
 1720|       |void display_ratio(long num, long den, FILE *file);
 1721|       |voidp xmalloc(unsigned int size);
 1722|       |ulg crc_32_tab[256];
 1723|       |int copy(int in, int out)
 1724|      0|{
 1725|      0|    int *tmp;
 1726|      0|    int *tmp___0;
 1727|       |
 1728|      0|    {
 1729|      0|        {
 1730|      0|            tmp = __errno_location();
 1731|      0|            *tmp = 0;
 1732|      0|        }
 1733|      0|        {
 1734|      0|            while (1) {
 1735|      0|while_continue: /* CIL Label */
 1736|      0|                ;
 1737|      0|                if (insize != 0U) {
 1738|      0|                    if (!((int)insize != -1)) {
 1739|      0|                        goto while_break;
 1740|      0|                    }
 1741|      0|                }
 1742|      0|                else {
 1743|      0|                    goto while_break;
 1744|      0|                }
 1745|      0|                {
 1746|      0|                    write_buf(out, (voidp)((char *)(inbuf)), insize);
 1747|      0|                    bytes_out += (long)insize;
 1748|      0|                    insize =
 1749|      0|                        (unsigned int)read(in, (void *)((char *)(inbuf)), (size_t)32768);
 1750|      0|                }
 1751|      0|            }
 1752|      0|while_break: /* CIL Label */
 1753|      0|            ;
 1754|      0|        }
 1755|      0|        if ((int)insize == -1) {
 1756|      0|            {
 1757|      0|                tmp___0 = __errno_location();
 1758|      0|            }
 1759|      0|            if (*tmp___0 != 0) {
 1760|      0|                {
 1761|      0|                    read_error();
 1762|      0|                }
 1763|      0|            }
 1764|      0|        }
 1765|      0|        bytes_in = bytes_out;
 1766|      0|        return (0);
 1767|      0|    }
 1768|      0|}
 1769|       |static ulg crc = (ulg)4294967295L;
 1770|       |ulg updcrc(uch *s, unsigned int n)
 1771|     43|{
 1772|     43|    register ulg c;
 1773|     43|    uch *tmp;
 1774|       |
 1775|     43|    {
 1776|     43|        if ((unsigned long)s == (unsigned long)((void *)0)) {
 1777|      5|            c = (ulg)4294967295L;
 1778|      5|        }
 1779|     38|        else {
 1780|     38|            c = crc;
 1781|     38|            if (n) {
 1782|     38|                {
 1783|  1.27M|                    while (1) {
 1784|  1.27M|while_continue: /* CIL Label */
 1785|  1.27M|                        ;
 1786|  1.27M|                        tmp = s;
 1787|  1.27M|                        s++;
 1788|  1.27M|                        c = crc_32_tab[((int)c ^ (int)*tmp) & 255] ^ (c >> 8);
 1789|  1.27M|                        n--;
 1790|  1.27M|                        if (!n) {
 1791|     38|                            goto while_break;
 1792|     38|                        }
 1793|  1.27M|                    }
 1794|     38|while_break: /* CIL Label */
 1795|     38|                    ;
 1796|     38|                }
 1797|     38|            }
 1798|     38|        }
 1799|     43|        crc = c;
 1800|     43|        return (c ^ 4294967295UL);
 1801|     43|    }
 1802|     43|}
 1803|       |void clear_bufs(void)
 1804|      5|{
 1805|       |
 1806|      5|    {
 1807|      5|        outcnt = 0U;
 1808|      5|        inptr = 0U;
 1809|      5|        insize = inptr;
 1810|      5|        bytes_out = 0L;
 1811|      5|        bytes_in = bytes_out;
 1812|      5|        return;
 1813|      5|    }
 1814|      5|}
 1815|       |int fill_inbuf(int eof_ok)
 1816|      0|{
 1817|      0|    int len;
 1818|      0|    int *tmp;
 1819|       |
 1820|      0|    {
 1821|      0|        {
 1822|      0|            insize = 0U;
 1823|      0|            tmp = __errno_location();
 1824|      0|            *tmp = 0;
 1825|      0|        }
 1826|      0|        {
 1827|      0|            while (1) {
 1828|      0|while_continue: /* CIL Label */
 1829|      0|                ;
 1830|      0|                {
 1831|      0|                    len = (int)read(ifd, (void *)((char *)(inbuf) + insize),
 1832|      0|                                    (size_t)(32768U - insize));
 1833|      0|                }
 1834|      0|                if (len == 0) {
 1835|      0|                    goto while_break;
 1836|      0|                }
 1837|      0|                else {
 1838|      0|                    if (len == -1) {
 1839|      0|                        goto while_break;
 1840|      0|                    }
 1841|      0|                }
 1842|      0|                insize += (unsigned int)len;
 1843|      0|                if (!(insize < 32768U)) {
 1844|      0|                    goto while_break;
 1845|      0|                }
 1846|      0|            }
 1847|      0|while_break: /* CIL Label */
 1848|      0|            ;
 1849|      0|        }
 1850|      0|        if (insize == 0U) {
 1851|      0|            if (eof_ok) {
 1852|      0|                return (-1);
 1853|      0|            }
 1854|      0|            {
 1855|      0|                read_error();
 1856|      0|            }
 1857|      0|        }
 1858|      0|        bytes_in = (long)((ulg)bytes_in + (ulg)insize);
 1859|      0|        inptr = 1U;
 1860|      0|        return ((int)inbuf[0]);
 1861|      0|    }
 1862|      0|}
 1863|       |void flush_outbuf(void)
 1864|     71|{
 1865|       |
 1866|     71|    {
 1867|     71|        if (outcnt == 0U) {
 1868|      0|            return;
 1869|      0|        }
 1870|     71|        {
 1871|     71|            write_buf(ofd, (voidp)((char *)(outbuf)), outcnt);
 1872|     71|            bytes_out = (long)((ulg)bytes_out + (ulg)outcnt);
 1873|     71|            outcnt = 0U;
 1874|     71|        }
 1875|     71|        return;
 1876|     71|    }
 1877|     71|}
 1878|       |void flush_window(void)
 1879|      0|{
 1880|       |
 1881|      0|    {
 1882|      0|        if (outcnt == 0U) {
 1883|      0|            return;
 1884|      0|        }
 1885|      0|        {
 1886|      0|            updcrc(window, outcnt);
 1887|      0|        }
 1888|      0|        if (!test) {
 1889|      0|            {
 1890|      0|                write_buf(ofd, (voidp)((char *)(window)), outcnt);
 1891|      0|            }
 1892|      0|        }
 1893|      0|        bytes_out = (long)((ulg)bytes_out + (ulg)outcnt);
 1894|      0|        outcnt = 0U;
 1895|      0|        return;
 1896|      0|    }
 1897|      0|}
 1898|       |void write_buf(int fd, voidp buf, unsigned int cnt)
 1899|     71|{
 1900|     71|    unsigned int n;
 1901|       |
 1902|     71|    {
 1903|     71|        {
 1904|     71|            while (1) {
 1905|     71|while_continue: /* CIL Label */
 1906|     71|                ;
 1907|     71|                {
 1908|     71|                    n = (unsigned int)write(fd, (void const *)buf, (size_t)cnt);
 1909|     71|                }
 1910|     71|                if (!(n != cnt)) {
 1911|     71|                    goto while_break;
 1912|     71|                }
 1913|      0|                if (n == 4294967295U) {
 1914|      0|                    {
 1915|      0|                        write_error();
 1916|      0|                    }
 1917|      0|                }
 1918|      0|                cnt -= n;
 1919|      0|                buf = (voidp)((char *)buf + n);
 1920|      0|            }
 1921|     71|while_break: /* CIL Label */
 1922|     71|            ;
 1923|     71|        }
 1924|      0|        return;
 1925|     71|    }
 1926|     71|}
 1927|       |char *strlwr(char *s)
 1928|      5|{
 1929|      5|    char *t;
 1930|      5|    unsigned short const **tmp___0;
 1931|       |
 1932|      5|    {
 1933|      5|        t = s;
 1934|      5|        {
 1935|     55|            while (1) {
 1936|     55|while_continue: /* CIL Label */
 1937|     55|                ;
 1938|     55|                if (!*t) {
 1939|      5|                    goto while_break;
 1940|      5|                }
 1941|     50|                {
 1942|     50|                    tmp___0 = __ctype_b_loc();
 1943|     50|                }
 1944|     50|                if ((int const) * (*tmp___0 + (int)*t) & 256) {
 1945|      0|                    *t = (char)(((int)*t - 65) + 97);
 1946|      0|                }
 1947|     50|                else {
 1948|     50|                    *t = *t;
 1949|     50|                }
 1950|     50|                t++;
 1951|     50|            }
 1952|      5|while_break: /* CIL Label */
 1953|      5|            ;
 1954|      5|        }
 1955|      0|        return (s);
 1956|      5|    }
 1957|      5|}
 1958|       |char *basename(char *fname)
 1959|      8|{
 1960|      8|    char *p;
 1961|       |
 1962|      8|    {
 1963|      8|        {
 1964|      8|            p = strrchr((char const *)fname, '/');
 1965|      8|        }
 1966|      8|        if ((unsigned long)p != (unsigned long)((void *)0)) {
 1967|      3|            fname = p + 1;
 1968|      3|        }
 1969|      8|        return (fname);
 1970|      8|    }
 1971|      8|}
 1972|       |char *add_envopt(int *argcp, char ***argvp, char *env___0)
 1973|      3|{
 1974|      3|    char *p;
 1975|      3|    char **oargv;
 1976|      3|    char **nargv;
 1977|      3|    int oargc;
 1978|      3|    int nargc;
 1979|      3|    char *tmp;
 1980|      3|    size_t tmp___0;
 1981|      3|    size_t tmp___2;
 1982|      3|    size_t tmp___3;
 1983|      3|    char *tmp___4;
 1984|      3|    int tmp___6;
 1985|      3|    char **tmp___7;
 1986|      3|    char **tmp___8;
 1987|      3|    size_t tmp___9;
 1988|      3|    char **tmp___10;
 1989|      3|    char *tmp___11;
 1990|      3|    char **tmp___12;
 1991|      3|    char **tmp___13;
 1992|      3|    int tmp___14;
 1993|      3|    char *__cil_tmp25;
 1994|      3|    char *__cil_tmp26;
 1995|       |
 1996|      3|    {
 1997|      3|        {
 1998|      3|            oargc = *argcp;
 1999|      3|            nargc = 0;
 2000|      3|            tmp = getenv((char const *)env___0);
 2001|      3|            env___0 = tmp;
 2002|      3|        }
 2003|      3|        if ((unsigned long)env___0 == (unsigned long)((void *)0)) {
 2004|      3|            return ((char *)((void *)0));
 2005|      3|        }
 2006|      0|        {
 2007|      0|            tmp___0 = strlen((char const *)env___0);
 2008|      0|            p = (char *)xmalloc((unsigned int)(tmp___0 + 1UL));
 2009|      0|            env___0 = strcpy((char * /* __restrict  */)p,
 2010|      0|                             (char const * /* __restrict  */)env___0);
 2011|      0|            p = env___0;
 2012|      0|        }
 2013|      0|        {
 2014|      0|            while (1) {
 2015|      0|while_continue: /* CIL Label */
 2016|      0|                ;
 2017|      0|                if (!*p) {
 2018|      0|                    goto while_break;
 2019|      0|                }
 2020|      0|                {
 2021|      0|                    tmp___2 = strspn((char const *)p, " \t");
 2022|      0|                    p += tmp___2;
 2023|      0|                }
 2024|      0|                if ((int)*p == 0) {
 2025|      0|                    goto while_break;
 2026|      0|                }
 2027|      0|                {
 2028|      0|                    tmp___3 = strcspn((char const *)p, " \t");
 2029|      0|                    p += tmp___3;
 2030|      0|                }
 2031|      0|                if (*p) {
 2032|      0|                    tmp___4 = p;
 2033|      0|                    p++;
 2034|      0|                    *tmp___4 = (char)'\000';
 2035|      0|                }
 2036|      0|                nargc++;
 2037|      0|            }
 2038|      0|while_break: /* CIL Label */
 2039|      0|            ;
 2040|      0|        }
 2041|      0|        if (nargc == 0) {
 2042|      0|            {
 2043|      0|                free((void *)env___0);
 2044|      0|            }
 2045|      0|            return ((char *)((void *)0));
 2046|      0|        }
 2047|      0|        {
 2048|      0|            *argcp += nargc;
 2049|      0|            nargv = (char **)calloc((size_t)(*argcp + 1), sizeof(char *));
 2050|      0|        }
 2051|      0|        if ((unsigned long)nargv == (unsigned long)((void *)0)) {
 2052|      0|            {
 2053|      0|                error((char *)"out of memory");
 2054|      0|            }
 2055|      0|        }
 2056|      0|        oargv = *argvp;
 2057|      0|        *argvp = nargv;
 2058|      0|        tmp___6 = oargc;
 2059|      0|        oargc--;
 2060|      0|        if (tmp___6 < 0) {
 2061|      0|            {
 2062|      0|                error((char *)"argc<=0");
 2063|      0|            }
 2064|      0|        }
 2065|      0|        tmp___7 = nargv;
 2066|      0|        nargv++;
 2067|      0|        tmp___8 = oargv;
 2068|      0|        oargv++;
 2069|      0|        *tmp___7 = *tmp___8;
 2070|      0|        p = env___0;
 2071|      0|        {
 2072|      0|            while (1) {
 2073|      0|while_continue___0: /* CIL Label */
 2074|      0|                ;
 2075|      0|                if (!(nargc > 0)) {
 2076|      0|                    goto while_break___0;
 2077|      0|                }
 2078|      0|                {
 2079|      0|                    tmp___9 = strspn((char const *)p, " \t");
 2080|      0|                    p += tmp___9;
 2081|      0|                    tmp___10 = nargv;
 2082|      0|                    nargv++;
 2083|      0|                    *tmp___10 = p;
 2084|      0|                }
 2085|      0|                {
 2086|      0|                    while (1) {
 2087|      0|while_continue___1: /* CIL Label */
 2088|      0|                        ;
 2089|      0|                        tmp___11 = p;
 2090|      0|                        p++;
 2091|      0|                        if (!*tmp___11) {
 2092|      0|                            goto while_break___1;
 2093|      0|                        }
 2094|      0|                    }
 2095|      0|while_break___1: /* CIL Label */
 2096|      0|                    ;
 2097|      0|                }
 2098|      0|                nargc--;
 2099|      0|            }
 2100|      0|while_break___0: /* CIL Label */
 2101|      0|            ;
 2102|      0|        }
 2103|      0|        {
 2104|      0|            while (1) {
 2105|      0|while_continue___2: /* CIL Label */
 2106|      0|                ;
 2107|      0|                tmp___14 = oargc;
 2108|      0|                oargc--;
 2109|      0|                if (!tmp___14) {
 2110|      0|                    goto while_break___2;
 2111|      0|                }
 2112|      0|                tmp___12 = nargv;
 2113|      0|                nargv++;
 2114|      0|                tmp___13 = oargv;
 2115|      0|                oargv++;
 2116|      0|                *tmp___12 = *tmp___13;
 2117|      0|            }
 2118|      0|while_break___2: /* CIL Label */
 2119|      0|            ;
 2120|      0|        }
 2121|      0|        *nargv = (char *)((void *)0);
 2122|      0|        return (env___0);
 2123|      0|    }
 2124|      0|}
 2125|       |void error(char *m)
 2126|      0|{
 2127|       |
 2128|      0|    {
 2129|      0|        {
 2130|      0|            fprintf((FILE * /* __restrict  */) stderr,
 2131|      0|                    (char const * /* __restrict  */) "\n%s: %s: %s\n", progname,
 2132|      0|                    ifname, m);
 2133|      0|            abort_gzip();
 2134|      0|        }
 2135|      0|        return;
 2136|      0|    }
 2137|      0|}
 2138|       |void read_error(void)
 2139|      0|{
 2140|      0|    int *tmp;
 2141|       |
 2142|      0|    {
 2143|      0|        {
 2144|      0|            fprintf((FILE * /* __restrict  */) stderr,
 2145|      0|                    (char const * /* __restrict  */) "\n%s: ", progname);
 2146|      0|            tmp = __errno_location();
 2147|      0|        }
 2148|      0|        if (*tmp != 0) {
 2149|      0|            {
 2150|      0|                perror((char const *)(ifname));
 2151|      0|            }
 2152|      0|        }
 2153|      0|        else {
 2154|      0|            {
 2155|      0|                fprintf((FILE * /* __restrict  */) stderr,
 2156|      0|                        (char const * /* __restrict  */) "%s: unexpected end of file\n",
 2157|      0|                        ifname);
 2158|      0|            }
 2159|      0|        }
 2160|      0|        {
 2161|      0|            abort_gzip();
 2162|      0|        }
 2163|      0|        return;
 2164|      0|    }
 2165|      0|}
 2166|       |void write_error(void)
 2167|      0|{
 2168|       |
 2169|      0|    {
 2170|      0|        {
 2171|      0|            fprintf((FILE * /* __restrict  */) stderr,
 2172|      0|                    (char const * /* __restrict  */) "\n%s: ", progname);
 2173|      0|            perror((char const *)(ofname));
 2174|      0|            abort_gzip();
 2175|      0|        }
 2176|      0|        return;
 2177|      0|    }
 2178|      0|}
 2179|       |void display_ratio(long num, long den, FILE *file)
 2180|      0|{
 2181|      0|    long ratio;
 2182|       |
 2183|      0|    {
 2184|      0|        if (den == 0L) {
 2185|      0|            ratio = 0L;
 2186|      0|        }
 2187|      0|        else {
 2188|      0|            if (den < 2147483L) {
 2189|      0|                ratio = (1000L * num) / den;
 2190|      0|            }
 2191|      0|            else {
 2192|      0|                ratio = num / (den / 1000L);
 2193|      0|            }
 2194|      0|        }
 2195|      0|        if (ratio < 0L) {
 2196|      0|            {
 2197|      0|                _IO_putc('-', file);
 2198|      0|                ratio = -ratio;
 2199|      0|            }
 2200|      0|        }
 2201|      0|        else {
 2202|      0|            {
 2203|      0|                _IO_putc(' ', file);
 2204|      0|            }
 2205|      0|        }
 2206|      0|        {
 2207|      0|            fprintf((FILE * /* __restrict  */) file,
 2208|      0|                    (char const * /* __restrict  */) "%2ld.%1ld%%", ratio / 10L,
 2209|      0|                    ratio % 10L);
 2210|      0|        }
 2211|      0|        return;
 2212|      0|    }
 2213|      0|}
 2214|       |voidp xmalloc(unsigned int size)
 2215|      0|{
 2216|      0|    voidp cp;
 2217|      0|    voidp tmp;
 2218|      0|    char *__cil_tmp4;
 2219|       |
 2220|      0|    {
 2221|      0|        {
 2222|      0|            tmp = malloc((size_t)size);
 2223|      0|            cp = tmp;
 2224|      0|        }
 2225|      0|        if ((unsigned long)cp == (unsigned long)((void *)0)) {
 2226|      0|            {
 2227|      0|                error((char *)"out of memory");
 2228|      0|            }
 2229|      0|        }
 2230|      0|        return (cp);
 2231|      0|    }
 2232|      0|}
 2233|       |ulg crc_32_tab[256] = {
 2234|       |    (ulg)0L,          (ulg)1996959894L, (ulg)3993919788L, (ulg)2567524794L,
 2235|       |    (ulg)124634137L,  (ulg)1886057615L, (ulg)3915621685L, (ulg)2657392035L,
 2236|       |    (ulg)249268274L,  (ulg)2044508324L, (ulg)3772115230L, (ulg)2547177864L,
 2237|       |    (ulg)162941995L,  (ulg)2125561021L, (ulg)3887607047L, (ulg)2428444049L,
 2238|       |    (ulg)498536548L,  (ulg)1789927666L, (ulg)4089016648L, (ulg)2227061214L,
 2239|       |    (ulg)450548861L,  (ulg)1843258603L, (ulg)4107580753L, (ulg)2211677639L,
 2240|       |    (ulg)325883990L,  (ulg)1684777152L, (ulg)4251122042L, (ulg)2321926636L,
 2241|       |    (ulg)335633487L,  (ulg)1661365465L, (ulg)4195302755L, (ulg)2366115317L,
 2242|       |    (ulg)997073096L,  (ulg)1281953886L, (ulg)3579855332L, (ulg)2724688242L,
 2243|       |    (ulg)1006888145L, (ulg)1258607687L, (ulg)3524101629L, (ulg)2768942443L,
 2244|       |    (ulg)901097722L,  (ulg)1119000684L, (ulg)3686517206L, (ulg)2898065728L,
 2245|       |    (ulg)853044451L,  (ulg)1172266101L, (ulg)3705015759L, (ulg)2882616665L,
 2246|       |    (ulg)651767980L,  (ulg)1373503546L, (ulg)3369554304L, (ulg)3218104598L,
 2247|       |    (ulg)565507253L,  (ulg)1454621731L, (ulg)3485111705L, (ulg)3099436303L,
 2248|       |    (ulg)671266974L,  (ulg)1594198024L, (ulg)3322730930L, (ulg)2970347812L,
 2249|       |    (ulg)795835527L,  (ulg)1483230225L, (ulg)3244367275L, (ulg)3060149565L,
 2250|       |    (ulg)1994146192L, (ulg)31158534L,   (ulg)2563907772L, (ulg)4023717930L,
 2251|       |    (ulg)1907459465L, (ulg)112637215L,  (ulg)2680153253L, (ulg)3904427059L,
 2252|       |    (ulg)2013776290L, (ulg)251722036L,  (ulg)2517215374L, (ulg)3775830040L,
 2253|       |    (ulg)2137656763L, (ulg)141376813L,  (ulg)2439277719L, (ulg)3865271297L,
 2254|       |    (ulg)1802195444L, (ulg)476864866L,  (ulg)2238001368L, (ulg)4066508878L,
 2255|       |    (ulg)1812370925L, (ulg)453092731L,  (ulg)2181625025L, (ulg)4111451223L,
 2256|       |    (ulg)1706088902L, (ulg)314042704L,  (ulg)2344532202L, (ulg)4240017532L,
 2257|       |    (ulg)1658658271L, (ulg)366619977L,  (ulg)2362670323L, (ulg)4224994405L,
 2258|       |    (ulg)1303535960L, (ulg)984961486L,  (ulg)2747007092L, (ulg)3569037538L,
 2259|       |    (ulg)1256170817L, (ulg)1037604311L, (ulg)2765210733L, (ulg)3554079995L,
 2260|       |    (ulg)1131014506L, (ulg)879679996L,  (ulg)2909243462L, (ulg)3663771856L,
 2261|       |    (ulg)1141124467L, (ulg)855842277L,  (ulg)2852801631L, (ulg)3708648649L,
 2262|       |    (ulg)1342533948L, (ulg)654459306L,  (ulg)3188396048L, (ulg)3373015174L,
 2263|       |    (ulg)1466479909L, (ulg)544179635L,  (ulg)3110523913L, (ulg)3462522015L,
 2264|       |    (ulg)1591671054L, (ulg)702138776L,  (ulg)2966460450L, (ulg)3352799412L,
 2265|       |    (ulg)1504918807L, (ulg)783551873L,  (ulg)3082640443L, (ulg)3233442989L,
 2266|       |    (ulg)3988292384L, (ulg)2596254646L, (ulg)62317068L,   (ulg)1957810842L,
 2267|       |    (ulg)3939845945L, (ulg)2647816111L, (ulg)81470997L,   (ulg)1943803523L,
 2268|       |    (ulg)3814918930L, (ulg)2489596804L, (ulg)225274430L,  (ulg)2053790376L,
 2269|       |    (ulg)3826175755L, (ulg)2466906013L, (ulg)167816743L,  (ulg)2097651377L,
 2270|       |    (ulg)4027552580L, (ulg)2265490386L, (ulg)503444072L,  (ulg)1762050814L,
 2271|       |    (ulg)4150417245L, (ulg)2154129355L, (ulg)426522225L,  (ulg)1852507879L,
 2272|       |    (ulg)4275313526L, (ulg)2312317920L, (ulg)282753626L,  (ulg)1742555852L,
 2273|       |    (ulg)4189708143L, (ulg)2394877945L, (ulg)397917763L,  (ulg)1622183637L,
 2274|       |    (ulg)3604390888L, (ulg)2714866558L, (ulg)953729732L,  (ulg)1340076626L,
 2275|       |    (ulg)3518719985L, (ulg)2797360999L, (ulg)1068828381L, (ulg)1219638859L,
 2276|       |    (ulg)3624741850L, (ulg)2936675148L, (ulg)906185462L,  (ulg)1090812512L,
 2277|       |    (ulg)3747672003L, (ulg)2825379669L, (ulg)829329135L,  (ulg)1181335161L,
 2278|       |    (ulg)3412177804L, (ulg)3160834842L, (ulg)628085408L,  (ulg)1382605366L,
 2279|       |    (ulg)3423369109L, (ulg)3138078467L, (ulg)570562233L,  (ulg)1426400815L,
 2280|       |    (ulg)3317316542L, (ulg)2998733608L, (ulg)733239954L,  (ulg)1555261956L,
 2281|       |    (ulg)3268935591L, (ulg)3050360625L, (ulg)752459403L,  (ulg)1541320221L,
 2282|       |    (ulg)2607071920L, (ulg)3965973030L, (ulg)1969922972L, (ulg)40735498L,
 2283|       |    (ulg)2617837225L, (ulg)3943577151L, (ulg)1913087877L, (ulg)83908371L,
 2284|       |    (ulg)2512341634L, (ulg)3803740692L, (ulg)2075208622L, (ulg)213261112L,
 2285|       |    (ulg)2463272603L, (ulg)3855990285L, (ulg)2094854071L, (ulg)198958881L,
 2286|       |    (ulg)2262029012L, (ulg)4057260610L, (ulg)1759359992L, (ulg)534414190L,
 2287|       |    (ulg)2176718541L, (ulg)4139329115L, (ulg)1873836001L, (ulg)414664567L,
 2288|       |    (ulg)2282248934L, (ulg)4279200368L, (ulg)1711684554L, (ulg)285281116L,
 2289|       |    (ulg)2405801727L, (ulg)4167216745L, (ulg)1634467795L, (ulg)376229701L,
 2290|       |    (ulg)2685067896L, (ulg)3608007406L, (ulg)1308918612L, (ulg)956543938L,
 2291|       |    (ulg)2808555105L, (ulg)3495958263L, (ulg)1231636301L, (ulg)1047427035L,
 2292|       |    (ulg)2932959818L, (ulg)3654703836L, (ulg)1088359270L, (ulg)936918000L,
 2293|       |    (ulg)2847714899L, (ulg)3736837829L, (ulg)1202900863L, (ulg)817233897L,
 2294|       |    (ulg)3183342108L, (ulg)3401237130L, (ulg)1404277552L, (ulg)615818150L,
 2295|       |    (ulg)3134207493L, (ulg)3453421203L, (ulg)1423857449L, (ulg)601450431L,
 2296|       |    (ulg)3009837614L, (ulg)3294710456L, (ulg)1567103746L, (ulg)711928724L,
 2297|       |    (ulg)3020668471L, (ulg)3272380065L, (ulg)1510334235L, (ulg)755167117L
 2298|       |};
 2299|       |int inflate(void);
 2300|       |int huft_build(unsigned int *b, unsigned int n, unsigned int s, ush *d, ush *e,
 2301|       |               struct huft **t, int *m);
 2302|       |int huft_free(struct huft *t);
 2303|       |int inflate_codes(struct huft *tl, struct huft *td, int bl, int bd);
 2304|       |int inflate_stored(void);
 2305|       |int inflate_fixed(void);
 2306|       |int inflate_dynamic(void);
 2307|       |int inflate_block(int *e);
 2308|       |static unsigned int border[19] = {16U, 17U, 18U, 0U, 8U,  7U, 9U,  6U, 10U, 5U,
 2309|       |                                  11U, 4U,  12U, 3U, 13U, 2U, 14U, 1U, 15U
 2310|       |                                 };
 2311|       |static ush cplens[31] = {
 2312|       |    (ush)3,   (ush)4,  (ush)5,   (ush)6,   (ush)7,   (ush)8,   (ush)9,
 2313|       |    (ush)10,  (ush)11, (ush)13,  (ush)15,  (ush)17,  (ush)19,  (ush)23,
 2314|       |    (ush)27,  (ush)31, (ush)35,  (ush)43,  (ush)51,  (ush)59,  (ush)67,
 2315|       |    (ush)83,  (ush)99, (ush)115, (ush)131, (ush)163, (ush)195, (ush)227,
 2316|       |    (ush)258, (ush)0,  (ush)0
 2317|       |};
 2318|       |static ush cplext[31] = {
 2319|       |    (ush)0, (ush)0, (ush)0, (ush)0, (ush)0, (ush)0,  (ush)0, (ush)0,
 2320|       |    (ush)1, (ush)1, (ush)1, (ush)1, (ush)2, (ush)2,  (ush)2, (ush)2,
 2321|       |    (ush)3, (ush)3, (ush)3, (ush)3, (ush)4, (ush)4,  (ush)4, (ush)4,
 2322|       |    (ush)5, (ush)5, (ush)5, (ush)5, (ush)0, (ush)99, (ush)99
 2323|       |};
 2324|       |static ush cpdist[30] = {
 2325|       |    (ush)1,    (ush)2,    (ush)3,    (ush)4,     (ush)5,     (ush)7,
 2326|       |    (ush)9,    (ush)13,   (ush)17,   (ush)25,    (ush)33,    (ush)49,
 2327|       |    (ush)65,   (ush)97,   (ush)129,  (ush)193,   (ush)257,   (ush)385,
 2328|       |    (ush)513,  (ush)769,  (ush)1025, (ush)1537,  (ush)2049,  (ush)3073,
 2329|       |    (ush)4097, (ush)6145, (ush)8193, (ush)12289, (ush)16385, (ush)24577
 2330|       |};
 2331|       |static ush cpdext[30] = {(ush)0,  (ush)0,  (ush)0,  (ush)0,  (ush)1,  (ush)1,
 2332|       |                         (ush)2,  (ush)2,  (ush)3,  (ush)3,  (ush)4,  (ush)4,
 2333|       |                         (ush)5,  (ush)5,  (ush)6,  (ush)6,  (ush)7,  (ush)7,
 2334|       |                         (ush)8,  (ush)8,  (ush)9,  (ush)9,  (ush)10, (ush)10,
 2335|       |                         (ush)11, (ush)11, (ush)12, (ush)12, (ush)13, (ush)13
 2336|       |                        };
 2337|       |ulg bb;
 2338|       |unsigned int bk;
 2339|       |ush mask_bits[17] = {(ush)0,     (ush)1,    (ush)3,    (ush)7,    (ush)15,
 2340|       |                     (ush)31,    (ush)63,   (ush)127,  (ush)255,  (ush)511,
 2341|       |                     (ush)1023,  (ush)2047, (ush)4095, (ush)8191, (ush)16383,
 2342|       |                     (ush)32767, (ush)65535
 2343|       |                    };
 2344|       |int lbits = 9;
 2345|       |int dbits = 6;
 2346|       |unsigned int hufts;
 2347|       |int huft_build(unsigned int *b, unsigned int n, unsigned int s, ush *d, ush *e,
 2348|       |               struct huft **t, int *m)
 2349|      0|{
 2350|      0|    unsigned int a;
 2351|      0|    unsigned int c[17];
 2352|      0|    unsigned int f;
 2353|      0|    int g;
 2354|      0|    int h;
 2355|      0|    register unsigned int i___0;
 2356|      0|    register unsigned int j___0;
 2357|      0|    register int k;
 2358|      0|    int l;
 2359|      0|    register unsigned int *p;
 2360|      0|    register struct huft *q;
 2361|      0|    struct huft r;
 2362|      0|    struct huft *u[16];
 2363|      0|    unsigned int v[288];
 2364|      0|    register int w;
 2365|      0|    unsigned int x[17];
 2366|      0|    unsigned int *xp;
 2367|      0|    int y;
 2368|      0|    unsigned int z;
 2369|      0|    unsigned int *tmp;
 2370|      0|    unsigned int *tmp___0;
 2371|      0|    unsigned int tmp___1;
 2372|      0|    unsigned int *tmp___2;
 2373|      0|    int tmp___4;
 2374|      0|    unsigned int *tmp___5;
 2375|      0|    unsigned int tmp___6;
 2376|      0|    int tmp___7;
 2377|      0|    void *__cil_tmp36;
 2378|      0|    void *__cil_tmp37;
 2379|      0|    void *__cil_tmp38;
 2380|      0|    void *__cil_tmp39;
 2381|      0|    int __cil_tmp40;
 2382|       |
 2383|      0|    {
 2384|      0|        {
 2385|      0|            memset((voidp)(c), 0, sizeof(c));
 2386|      0|            p = b;
 2387|      0|            i___0 = n;
 2388|      0|        }
 2389|      0|        {
 2390|      0|            while (1) {
 2391|      0|while_continue: /* CIL Label */
 2392|      0|                ;
 2393|      0|                (c[*p])++;
 2394|      0|                p++;
 2395|      0|                i___0--;
 2396|      0|                if (!i___0) {
 2397|      0|                    goto while_break;
 2398|      0|                }
 2399|      0|            }
 2400|      0|while_break: /* CIL Label */
 2401|      0|            ;
 2402|      0|        }
 2403|      0|        if (c[0] == n) {
 2404|      0|            *t = (struct huft *)((void *)0);
 2405|      0|            *m = 0;
 2406|      0|            return (0);
 2407|      0|        }
 2408|      0|        l = *m;
 2409|      0|        j___0 = 1U;
 2410|      0|        {
 2411|      0|            while (1) {
 2412|      0|while_continue___0: /* CIL Label */
 2413|      0|                ;
 2414|      0|                if (!(j___0 <= 16U)) {
 2415|      0|                    goto while_break___0;
 2416|      0|                }
 2417|      0|                if (c[j___0]) {
 2418|      0|                    goto while_break___0;
 2419|      0|                }
 2420|      0|                j___0++;
 2421|      0|            }
 2422|      0|while_break___0: /* CIL Label */
 2423|      0|            ;
 2424|      0|        }
 2425|      0|        k = (int)j___0;
 2426|      0|        if ((unsigned int)l < j___0) {
 2427|      0|            l = (int)j___0;
 2428|      0|        }
 2429|      0|        i___0 = 16U;
 2430|      0|        {
 2431|      0|            while (1) {
 2432|      0|while_continue___1: /* CIL Label */
 2433|      0|                ;
 2434|      0|                if (!i___0) {
 2435|      0|                    goto while_break___1;
 2436|      0|                }
 2437|      0|                if (c[i___0]) {
 2438|      0|                    goto while_break___1;
 2439|      0|                }
 2440|      0|                i___0--;
 2441|      0|            }
 2442|      0|while_break___1: /* CIL Label */
 2443|      0|            ;
 2444|      0|        }
 2445|      0|        g = (int)i___0;
 2446|      0|        if ((unsigned int)l > i___0) {
 2447|      0|            l = (int)i___0;
 2448|      0|        }
 2449|      0|        *m = l;
 2450|      0|        y = 1 << j___0;
 2451|      0|        {
 2452|      0|            while (1) {
 2453|      0|while_continue___2: /* CIL Label */
 2454|      0|                ;
 2455|      0|                if (!(j___0 < i___0)) {
 2456|      0|                    goto while_break___2;
 2457|      0|                }
 2458|      0|                y = (int)((unsigned int)y - c[j___0]);
 2459|      0|                if (y < 0) {
 2460|      0|                    return (2);
 2461|      0|                }
 2462|      0|                j___0++;
 2463|      0|                y <<= 1;
 2464|      0|            }
 2465|      0|while_break___2: /* CIL Label */
 2466|      0|            ;
 2467|      0|        }
 2468|      0|        y = (int)((unsigned int)y - c[i___0]);
 2469|      0|        if (y < 0) {
 2470|      0|            return (2);
 2471|      0|        }
 2472|      0|        c[i___0] += (unsigned int)y;
 2473|      0|        j___0 = 0U;
 2474|      0|        x[1] = j___0;
 2475|      0|        p = c + 1;
 2476|      0|        xp = x + 2;
 2477|      0|        {
 2478|      0|            while (1) {
 2479|      0|while_continue___3: /* CIL Label */
 2480|      0|                ;
 2481|      0|                i___0--;
 2482|      0|                if (!i___0) {
 2483|      0|                    goto while_break___3;
 2484|      0|                }
 2485|      0|                tmp = xp;
 2486|      0|                xp++;
 2487|      0|                tmp___0 = p;
 2488|      0|                p++;
 2489|      0|                j___0 += *tmp___0;
 2490|      0|                *tmp = j___0;
 2491|      0|            }
 2492|      0|while_break___3: /* CIL Label */
 2493|      0|            ;
 2494|      0|        }
 2495|      0|        p = b;
 2496|      0|        i___0 = 0U;
 2497|      0|        {
 2498|      0|            while (1) {
 2499|      0|while_continue___4: /* CIL Label */
 2500|      0|                ;
 2501|      0|                tmp___2 = p;
 2502|      0|                p++;
 2503|      0|                j___0 = *tmp___2;
 2504|      0|                if (j___0 != 0U) {
 2505|      0|                    tmp___1 = x[j___0];
 2506|      0|                    (x[j___0])++;
 2507|      0|                    v[tmp___1] = i___0;
 2508|      0|                }
 2509|      0|                i___0++;
 2510|      0|                if (!(i___0 < n)) {
 2511|      0|                    goto while_break___4;
 2512|      0|                }
 2513|      0|            }
 2514|      0|while_break___4: /* CIL Label */
 2515|      0|            ;
 2516|      0|        }
 2517|      0|        i___0 = 0U;
 2518|      0|        x[0] = i___0;
 2519|      0|        p = v;
 2520|      0|        h = -1;
 2521|      0|        w = -l;
 2522|      0|        u[0] = (struct huft *)((void *)0);
 2523|      0|        q = (struct huft *)((void *)0);
 2524|      0|        z = 0U;
 2525|      0|        {
 2526|      0|            while (1) {
 2527|      0|while_continue___5: /* CIL Label */
 2528|      0|                ;
 2529|      0|                if (!(k <= g)) {
 2530|      0|                    goto while_break___5;
 2531|      0|                }
 2532|      0|                a = c[k];
 2533|      0|                {
 2534|      0|                    while (1) {
 2535|      0|while_continue___6: /* CIL Label */
 2536|      0|                        ;
 2537|      0|                        tmp___6 = a;
 2538|      0|                        a--;
 2539|      0|                        if (!tmp___6) {
 2540|      0|                            goto while_break___6;
 2541|      0|                        }
 2542|      0|                        {
 2543|      0|                            while (1) {
 2544|      0|while_continue___7: /* CIL Label */
 2545|      0|                                ;
 2546|      0|                                if (!(k > w + l)) {
 2547|      0|                                    goto while_break___7;
 2548|      0|                                }
 2549|      0|                                h++;
 2550|      0|                                w += l;
 2551|      0|                                z = (unsigned int)(g - w);
 2552|      0|                                if (z > (unsigned int)l) {
 2553|      0|                                    z = (unsigned int)l;
 2554|      0|                                }
 2555|      0|                                else {
 2556|      0|                                    z = z;
 2557|      0|                                }
 2558|      0|                                j___0 = (unsigned int)(k - w);
 2559|      0|                                f = (unsigned int)(1 << j___0);
 2560|      0|                                if (f > a + 1U) {
 2561|      0|                                    f -= a + 1U;
 2562|      0|                                    xp = c + k;
 2563|      0|                                    {
 2564|      0|                                        while (1) {
 2565|      0|while_continue___8: /* CIL Label */
 2566|      0|                                            ;
 2567|      0|                                            j___0++;
 2568|      0|                                            if (!(j___0 < z)) {
 2569|      0|                                                goto while_break___8;
 2570|      0|                                            }
 2571|      0|                                            f <<= 1;
 2572|      0|                                            xp++;
 2573|      0|                                            if (f <= *xp) {
 2574|      0|                                                goto while_break___8;
 2575|      0|                                            }
 2576|      0|                                            f -= *xp;
 2577|      0|                                        }
 2578|      0|while_break___8: /* CIL Label */
 2579|      0|                                        ;
 2580|      0|                                    }
 2581|      0|                                }
 2582|      0|                                {
 2583|      0|                                    z = (unsigned int)(1 << j___0);
 2584|      0|                                    q = (struct huft *)malloc((unsigned long)(z + 1U) *
 2585|      0|                                                              sizeof(struct huft));
 2586|      0|                                }
 2587|      0|                                if ((unsigned long)q ==
 2588|      0|                                        (unsigned long)((struct huft *)((void *)0))) {
 2589|      0|                                    if (h) {
 2590|      0|                                        {
 2591|      0|                                            huft_free(u[0]);
 2592|      0|                                        }
 2593|      0|                                    }
 2594|      0|                                    return (3);
 2595|      0|                                }
 2596|      0|                                hufts += z + 1U;
 2597|      0|                                *t = q + 1;
 2598|      0|                                t = &q->v.t;
 2599|      0|                                *t = (struct huft *)((void *)0);
 2600|      0|                                q++;
 2601|      0|                                u[h] = q;
 2602|      0|                                if (h) {
 2603|      0|                                    x[h] = i___0;
 2604|      0|                                    r.b = (uch)l;
 2605|      0|                                    r.e = (uch)(16U + j___0);
 2606|      0|                                    r.v.t = q;
 2607|      0|                                    j___0 = i___0 >> (w - l);
 2608|      0|                                    *(u[h - 1] + j___0) = r;
 2609|      0|                                }
 2610|      0|                            }
 2611|      0|while_break___7: /* CIL Label */
 2612|      0|                            ;
 2613|      0|                        }
 2614|      0|                        r.b = (uch)(k - w);
 2615|      0|                        if ((unsigned long)p >= (unsigned long)(v + n)) {
 2616|      0|                            r.e = (uch)99;
 2617|      0|                        }
 2618|      0|                        else {
 2619|      0|                            if (*p < s) {
 2620|      0|                                if (*p < 256U) {
 2621|      0|                                    tmp___4 = 16;
 2622|      0|                                }
 2623|      0|                                else {
 2624|      0|                                    tmp___4 = 15;
 2625|      0|                                }
 2626|      0|                                r.e = (uch)tmp___4;
 2627|      0|                                r.v.n = (ush)*p;
 2628|      0|                                p++;
 2629|      0|                            }
 2630|      0|                            else {
 2631|      0|                                r.e = (uch) * (e + (*p - s));
 2632|      0|                                tmp___5 = p;
 2633|      0|                                p++;
 2634|      0|                                r.v.n = *(d + (*tmp___5 - s));
 2635|      0|                            }
 2636|      0|                        }
 2637|      0|                        f = (unsigned int)(1 << (k - w));
 2638|      0|                        j___0 = i___0 >> w;
 2639|      0|                        {
 2640|      0|                            while (1) {
 2641|      0|while_continue___9: /* CIL Label */
 2642|      0|                                ;
 2643|      0|                                if (!(j___0 < z)) {
 2644|      0|                                    goto while_break___9;
 2645|      0|                                }
 2646|      0|                                *(q + j___0) = r;
 2647|      0|                                j___0 += f;
 2648|      0|                            }
 2649|      0|while_break___9: /* CIL Label */
 2650|      0|                            ;
 2651|      0|                        }
 2652|      0|                        j___0 = (unsigned int)(1 << (k - 1));
 2653|      0|                        {
 2654|      0|                            while (1) {
 2655|      0|while_continue___10: /* CIL Label */
 2656|      0|                                ;
 2657|      0|                                if (!(i___0 & j___0)) {
 2658|      0|                                    goto while_break___10;
 2659|      0|                                }
 2660|      0|                                i___0 ^= j___0;
 2661|      0|                                j___0 >>= 1;
 2662|      0|                            }
 2663|      0|while_break___10: /* CIL Label */
 2664|      0|                            ;
 2665|      0|                        }
 2666|      0|                        i___0 ^= j___0;
 2667|      0|                        {
 2668|      0|                            while (1) {
 2669|      0|while_continue___11: /* CIL Label */
 2670|      0|                                ;
 2671|      0|                                if (!((i___0 & (unsigned int)((1 << w) - 1)) != x[h])) {
 2672|      0|                                    goto while_break___11;
 2673|      0|                                }
 2674|      0|                                h--;
 2675|      0|                                w -= l;
 2676|      0|                            }
 2677|      0|while_break___11: /* CIL Label */
 2678|      0|                            ;
 2679|      0|                        }
 2680|      0|                    }
 2681|      0|while_break___6: /* CIL Label */
 2682|      0|                    ;
 2683|      0|                }
 2684|      0|                k++;
 2685|      0|            }
 2686|      0|while_break___5: /* CIL Label */
 2687|      0|            ;
 2688|      0|        }
 2689|      0|        if (y != 0) {
 2690|      0|            if (g != 1) {
 2691|      0|                tmp___7 = 1;
 2692|      0|            }
 2693|      0|            else {
 2694|      0|                tmp___7 = 0;
 2695|      0|            }
 2696|      0|        }
 2697|      0|        else {
 2698|      0|            tmp___7 = 0;
 2699|      0|        }
 2700|      0|        return (tmp___7);
 2701|      0|    }
 2702|      0|}
 2703|       |int huft_free(struct huft *t)
 2704|      0|{
 2705|      0|    register struct huft *p;
 2706|      0|    register struct huft *q;
 2707|       |
 2708|      0|    {
 2709|      0|        p = t;
 2710|      0|        {
 2711|      0|            while (1) {
 2712|      0|while_continue: /* CIL Label */
 2713|      0|                ;
 2714|      0|                if (!((unsigned long)p !=
 2715|      0|                        (unsigned long)((struct huft *)((void *)0)))) {
 2716|      0|                    goto while_break;
 2717|      0|                }
 2718|      0|                {
 2719|      0|                    p--;
 2720|      0|                    q = p->v.t;
 2721|      0|                    free((void *)((char *)p));
 2722|      0|                    p = q;
 2723|      0|                }
 2724|      0|            }
 2725|      0|while_break: /* CIL Label */
 2726|      0|            ;
 2727|      0|        }
 2728|      0|        return (0);
 2729|      0|    }
 2730|      0|}
 2731|       |int inflate_codes(struct huft *tl, struct huft *td, int bl, int bd)
 2732|      0|{
 2733|      0|    register unsigned int e;
 2734|      0|    unsigned int n;
 2735|      0|    unsigned int d;
 2736|      0|    unsigned int w;
 2737|      0|    struct huft *t;
 2738|      0|    unsigned int ml;
 2739|      0|    unsigned int md;
 2740|      0|    register ulg b;
 2741|      0|    register unsigned int k;
 2742|      0|    unsigned int tmp;
 2743|      0|    int tmp___0;
 2744|      0|    int tmp___1;
 2745|      0|    unsigned int tmp___2;
 2746|      0|    int tmp___3;
 2747|      0|    int tmp___4;
 2748|      0|    unsigned int tmp___5;
 2749|      0|    unsigned int tmp___6;
 2750|      0|    int tmp___7;
 2751|      0|    int tmp___8;
 2752|      0|    unsigned int tmp___9;
 2753|      0|    int tmp___10;
 2754|      0|    int tmp___11;
 2755|      0|    unsigned int tmp___12;
 2756|      0|    int tmp___13;
 2757|      0|    int tmp___14;
 2758|      0|    unsigned int tmp___15;
 2759|      0|    int tmp___16;
 2760|      0|    int tmp___17;
 2761|      0|    unsigned int tmp___19;
 2762|      0|    unsigned int tmp___20;
 2763|      0|    unsigned int tmp___21;
 2764|       |
 2765|      0|    {
 2766|      0|        b = bb;
 2767|      0|        k = bk;
 2768|      0|        w = outcnt;
 2769|      0|        ml = (unsigned int)mask_bits[bl];
 2770|      0|        md = (unsigned int)mask_bits[bd];
 2771|      0|        {
 2772|      0|            while (1) {
 2773|      0|while_continue: /* CIL Label */
 2774|      0|                ;
 2775|      0|                {
 2776|      0|                    while (1) {
 2777|      0|while_continue___0: /* CIL Label */
 2778|      0|                        ;
 2779|      0|                        if (!(k < (unsigned int)bl)) {
 2780|      0|                            goto while_break___0;
 2781|      0|                        }
 2782|      0|                        if (inptr < insize) {
 2783|      0|                            tmp = inptr;
 2784|      0|                            inptr++;
 2785|      0|                            tmp___1 = (int)inbuf[tmp];
 2786|      0|                        }
 2787|      0|                        else {
 2788|      0|                            {
 2789|      0|                                tmp___0 = fill_inbuf(0);
 2790|      0|                                tmp___1 = tmp___0;
 2791|      0|                            }
 2792|      0|                        }
 2793|      0|                        b |= (ulg)((uch)tmp___1) << k;
 2794|      0|                        k += 8U;
 2795|      0|                    }
 2796|      0|while_break___0: /* CIL Label */
 2797|      0|                    ;
 2798|      0|                }
 2799|      0|                t = tl + ((unsigned int)b & ml);
 2800|      0|                e = (unsigned int)t->e;
 2801|      0|                if (e > 16U) {
 2802|      0|                    {
 2803|      0|                        while (1) {
 2804|      0|while_continue___1: /* CIL Label */
 2805|      0|                            ;
 2806|      0|                            if (e == 99U) {
 2807|      0|                                return (1);
 2808|      0|                            }
 2809|      0|                            b >>= (int)t->b;
 2810|      0|                            k -= (unsigned int)t->b;
 2811|      0|                            e -= 16U;
 2812|      0|                            {
 2813|      0|                                while (1) {
 2814|      0|while_continue___2: /* CIL Label */
 2815|      0|                                    ;
 2816|      0|                                    if (!(k < e)) {
 2817|      0|                                        goto while_break___2;
 2818|      0|                                    }
 2819|      0|                                    if (inptr < insize) {
 2820|      0|                                        tmp___2 = inptr;
 2821|      0|                                        inptr++;
 2822|      0|                                        tmp___4 = (int)inbuf[tmp___2];
 2823|      0|                                    }
 2824|      0|                                    else {
 2825|      0|                                        {
 2826|      0|                                            tmp___3 = fill_inbuf(0);
 2827|      0|                                            tmp___4 = tmp___3;
 2828|      0|                                        }
 2829|      0|                                    }
 2830|      0|                                    b |= (ulg)((uch)tmp___4) << k;
 2831|      0|                                    k += 8U;
 2832|      0|                                }
 2833|      0|while_break___2: /* CIL Label */
 2834|      0|                                ;
 2835|      0|                            }
 2836|      0|                            t = t->v.t + ((unsigned int)b & (unsigned int)mask_bits[e]);
 2837|      0|                            e = (unsigned int)t->e;
 2838|      0|                            if (!(e > 16U)) {
 2839|      0|                                goto while_break___1;
 2840|      0|                            }
 2841|      0|                        }
 2842|      0|while_break___1: /* CIL Label */
 2843|      0|                        ;
 2844|      0|                    }
 2845|      0|                }
 2846|      0|                b >>= (int)t->b;
 2847|      0|                k -= (unsigned int)t->b;
 2848|      0|                if (e == 16U) {
 2849|      0|                    tmp___5 = w;
 2850|      0|                    w++;
 2851|      0|                    window[tmp___5] = (uch)t->v.n;
 2852|      0|                    if (w == 32768U) {
 2853|      0|                        {
 2854|      0|                            outcnt = w;
 2855|      0|                            flush_window();
 2856|      0|                            w = 0U;
 2857|      0|                        }
 2858|      0|                    }
 2859|      0|                }
 2860|      0|                else {
 2861|      0|                    if (e == 15U) {
 2862|      0|                        goto while_break;
 2863|      0|                    }
 2864|      0|                    {
 2865|      0|                        while (1) {
 2866|      0|while_continue___3: /* CIL Label */
 2867|      0|                            ;
 2868|      0|                            if (!(k < e)) {
 2869|      0|                                goto while_break___3;
 2870|      0|                            }
 2871|      0|                            if (inptr < insize) {
 2872|      0|                                tmp___6 = inptr;
 2873|      0|                                inptr++;
 2874|      0|                                tmp___8 = (int)inbuf[tmp___6];
 2875|      0|                            }
 2876|      0|                            else {
 2877|      0|                                {
 2878|      0|                                    tmp___7 = fill_inbuf(0);
 2879|      0|                                    tmp___8 = tmp___7;
 2880|      0|                                }
 2881|      0|                            }
 2882|      0|                            b |= (ulg)((uch)tmp___8) << k;
 2883|      0|                            k += 8U;
 2884|      0|                        }
 2885|      0|while_break___3: /* CIL Label */
 2886|      0|                        ;
 2887|      0|                    }
 2888|      0|                    n = (unsigned int)t->v.n +
 2889|      0|                        ((unsigned int)b & (unsigned int)mask_bits[e]);
 2890|      0|                    b >>= e;
 2891|      0|                    k -= e;
 2892|      0|                    {
 2893|      0|                        while (1) {
 2894|      0|while_continue___4: /* CIL Label */
 2895|      0|                            ;
 2896|      0|                            if (!(k < (unsigned int)bd)) {
 2897|      0|                                goto while_break___4;
 2898|      0|                            }
 2899|      0|                            if (inptr < insize) {
 2900|      0|                                tmp___9 = inptr;
 2901|      0|                                inptr++;
 2902|      0|                                tmp___11 = (int)inbuf[tmp___9];
 2903|      0|                            }
 2904|      0|                            else {
 2905|      0|                                {
 2906|      0|                                    tmp___10 = fill_inbuf(0);
 2907|      0|                                    tmp___11 = tmp___10;
 2908|      0|                                }
 2909|      0|                            }
 2910|      0|                            b |= (ulg)((uch)tmp___11) << k;
 2911|      0|                            k += 8U;
 2912|      0|                        }
 2913|      0|while_break___4: /* CIL Label */
 2914|      0|                        ;
 2915|      0|                    }
 2916|      0|                    t = td + ((unsigned int)b & md);
 2917|      0|                    e = (unsigned int)t->e;
 2918|      0|                    if (e > 16U) {
 2919|      0|                        {
 2920|      0|                            while (1) {
 2921|      0|while_continue___5: /* CIL Label */
 2922|      0|                                ;
 2923|      0|                                if (e == 99U) {
 2924|      0|                                    return (1);
 2925|      0|                                }
 2926|      0|                                b >>= (int)t->b;
 2927|      0|                                k -= (unsigned int)t->b;
 2928|      0|                                e -= 16U;
 2929|      0|                                {
 2930|      0|                                    while (1) {
 2931|      0|while_continue___6: /* CIL Label */
 2932|      0|                                        ;
 2933|      0|                                        if (!(k < e)) {
 2934|      0|                                            goto while_break___6;
 2935|      0|                                        }
 2936|      0|                                        if (inptr < insize) {
 2937|      0|                                            tmp___12 = inptr;
 2938|      0|                                            inptr++;
 2939|      0|                                            tmp___14 = (int)inbuf[tmp___12];
 2940|      0|                                        }
 2941|      0|                                        else {
 2942|      0|                                            {
 2943|      0|                                                tmp___13 = fill_inbuf(0);
 2944|      0|                                                tmp___14 = tmp___13;
 2945|      0|                                            }
 2946|      0|                                        }
 2947|      0|                                        b |= (ulg)((uch)tmp___14) << k;
 2948|      0|                                        k += 8U;
 2949|      0|                                    }
 2950|      0|while_break___6: /* CIL Label */
 2951|      0|                                    ;
 2952|      0|                                }
 2953|      0|                                t = t->v.t + ((unsigned int)b & (unsigned int)mask_bits[e]);
 2954|      0|                                e = (unsigned int)t->e;
 2955|      0|                                if (!(e > 16U)) {
 2956|      0|                                    goto while_break___5;
 2957|      0|                                }
 2958|      0|                            }
 2959|      0|while_break___5: /* CIL Label */
 2960|      0|                            ;
 2961|      0|                        }
 2962|      0|                    }
 2963|      0|                    b >>= (int)t->b;
 2964|      0|                    k -= (unsigned int)t->b;
 2965|      0|                    {
 2966|      0|                        while (1) {
 2967|      0|while_continue___7: /* CIL Label */
 2968|      0|                            ;
 2969|      0|                            if (!(k < e)) {
 2970|      0|                                goto while_break___7;
 2971|      0|                            }
 2972|      0|                            if (inptr < insize) {
 2973|      0|                                tmp___15 = inptr;
 2974|      0|                                inptr++;
 2975|      0|                                tmp___17 = (int)inbuf[tmp___15];
 2976|      0|                            }
 2977|      0|                            else {
 2978|      0|                                {
 2979|      0|                                    tmp___16 = fill_inbuf(0);
 2980|      0|                                    tmp___17 = tmp___16;
 2981|      0|                                }
 2982|      0|                            }
 2983|      0|                            b |= (ulg)((uch)tmp___17) << k;
 2984|      0|                            k += 8U;
 2985|      0|                        }
 2986|      0|while_break___7: /* CIL Label */
 2987|      0|                        ;
 2988|      0|                    }
 2989|      0|                    d = (w - (unsigned int)t->v.n) -
 2990|      0|                        ((unsigned int)b & (unsigned int)mask_bits[e]);
 2991|      0|                    b >>= e;
 2992|      0|                    k -= e;
 2993|      0|                    {
 2994|      0|                        while (1) {
 2995|      0|while_continue___8: /* CIL Label */
 2996|      0|                            ;
 2997|      0|                            d &= 32767U;
 2998|      0|                            if (d > w) {
 2999|      0|                                tmp___19 = d;
 3000|      0|                            }
 3001|      0|                            else {
 3002|      0|                                tmp___19 = w;
 3003|      0|                            }
 3004|      0|                            e = 32768U - tmp___19;
 3005|      0|                            if (e > n) {
 3006|      0|                                e = n;
 3007|      0|                            }
 3008|      0|                            else {
 3009|      0|                                e = e;
 3010|      0|                            }
 3011|      0|                            n -= e;
 3012|      0|                            if (w - d >= e) {
 3013|      0|                                {
 3014|      0|                                    memcpy((void * /* __restrict  */)(window + w),
 3015|      0|                                           (void const * /* __restrict  */)(window + d),
 3016|      0|                                           (size_t)e);
 3017|      0|                                    w += e;
 3018|      0|                                    d += e;
 3019|      0|                                }
 3020|      0|                            }
 3021|      0|                            else {
 3022|      0|                                {
 3023|      0|                                    while (1) {
 3024|      0|while_continue___9: /* CIL Label */
 3025|      0|                                        ;
 3026|      0|                                        tmp___20 = w;
 3027|      0|                                        w++;
 3028|      0|                                        tmp___21 = d;
 3029|      0|                                        d++;
 3030|      0|                                        window[tmp___20] = window[tmp___21];
 3031|      0|                                        e--;
 3032|      0|                                        if (!e) {
 3033|      0|                                            goto while_break___9;
 3034|      0|                                        }
 3035|      0|                                    }
 3036|      0|while_break___9: /* CIL Label */
 3037|      0|                                    ;
 3038|      0|                                }
 3039|      0|                            }
 3040|      0|                            if (w == 32768U) {
 3041|      0|                                {
 3042|      0|                                    outcnt = w;
 3043|      0|                                    flush_window();
 3044|      0|                                    w = 0U;
 3045|      0|                                }
 3046|      0|                            }
 3047|      0|                            if (!n) {
 3048|      0|                                goto while_break___8;
 3049|      0|                            }
 3050|      0|                        }
 3051|      0|while_break___8: /* CIL Label */
 3052|      0|                        ;
 3053|      0|                    }
 3054|      0|                }
 3055|      0|            }
 3056|      0|while_break: /* CIL Label */
 3057|      0|            ;
 3058|      0|        }
 3059|      0|        outcnt = w;
 3060|      0|        bb = b;
 3061|      0|        bk = k;
 3062|      0|        return (0);
 3063|      0|    }
 3064|      0|}
 3065|       |int inflate_stored(void)
 3066|      0|{
 3067|      0|    unsigned int n;
 3068|      0|    unsigned int w;
 3069|      0|    register ulg b;
 3070|      0|    register unsigned int k;
 3071|      0|    unsigned int tmp;
 3072|      0|    int tmp___0;
 3073|      0|    int tmp___1;
 3074|      0|    unsigned int tmp___2;
 3075|      0|    int tmp___3;
 3076|      0|    int tmp___4;
 3077|      0|    unsigned int tmp___5;
 3078|      0|    int tmp___6;
 3079|      0|    int tmp___7;
 3080|      0|    unsigned int tmp___8;
 3081|      0|    unsigned int tmp___9;
 3082|       |
 3083|      0|    {
 3084|      0|        b = bb;
 3085|      0|        k = bk;
 3086|      0|        w = outcnt;
 3087|      0|        n = k & 7U;
 3088|      0|        b >>= n;
 3089|      0|        k -= n;
 3090|      0|        {
 3091|      0|            while (1) {
 3092|      0|while_continue: /* CIL Label */
 3093|      0|                ;
 3094|      0|                if (!(k < 16U)) {
 3095|      0|                    goto while_break;
 3096|      0|                }
 3097|      0|                if (inptr < insize) {
 3098|      0|                    tmp = inptr;
 3099|      0|                    inptr++;
 3100|      0|                    tmp___1 = (int)inbuf[tmp];
 3101|      0|                }
 3102|      0|                else {
 3103|      0|                    {
 3104|      0|                        tmp___0 = fill_inbuf(0);
 3105|      0|                        tmp___1 = tmp___0;
 3106|      0|                    }
 3107|      0|                }
 3108|      0|                b |= (ulg)((uch)tmp___1) << k;
 3109|      0|                k += 8U;
 3110|      0|            }
 3111|      0|while_break: /* CIL Label */
 3112|      0|            ;
 3113|      0|        }
 3114|      0|        n = (unsigned int)b & 65535U;
 3115|      0|        b >>= 16;
 3116|      0|        k -= 16U;
 3117|      0|        {
 3118|      0|            while (1) {
 3119|      0|while_continue___0: /* CIL Label */
 3120|      0|                ;
 3121|      0|                if (!(k < 16U)) {
 3122|      0|                    goto while_break___0;
 3123|      0|                }
 3124|      0|                if (inptr < insize) {
 3125|      0|                    tmp___2 = inptr;
 3126|      0|                    inptr++;
 3127|      0|                    tmp___4 = (int)inbuf[tmp___2];
 3128|      0|                }
 3129|      0|                else {
 3130|      0|                    {
 3131|      0|                        tmp___3 = fill_inbuf(0);
 3132|      0|                        tmp___4 = tmp___3;
 3133|      0|                    }
 3134|      0|                }
 3135|      0|                b |= (ulg)((uch)tmp___4) << k;
 3136|      0|                k += 8U;
 3137|      0|            }
 3138|      0|while_break___0: /* CIL Label */
 3139|      0|            ;
 3140|      0|        }
 3141|      0|        if (n != (unsigned int)(~b & 65535UL)) {
 3142|      0|            return (1);
 3143|      0|        }
 3144|      0|        b >>= 16;
 3145|      0|        k -= 16U;
 3146|      0|        {
 3147|      0|            while (1) {
 3148|      0|while_continue___1: /* CIL Label */
 3149|      0|                ;
 3150|      0|                tmp___9 = n;
 3151|      0|                n--;
 3152|      0|                if (!tmp___9) {
 3153|      0|                    goto while_break___1;
 3154|      0|                }
 3155|      0|                {
 3156|      0|                    while (1) {
 3157|      0|while_continue___2: /* CIL Label */
 3158|      0|                        ;
 3159|      0|                        if (!(k < 8U)) {
 3160|      0|                            goto while_break___2;
 3161|      0|                        }
 3162|      0|                        if (inptr < insize) {
 3163|      0|                            tmp___5 = inptr;
 3164|      0|                            inptr++;
 3165|      0|                            tmp___7 = (int)inbuf[tmp___5];
 3166|      0|                        }
 3167|      0|                        else {
 3168|      0|                            {
 3169|      0|                                tmp___6 = fill_inbuf(0);
 3170|      0|                                tmp___7 = tmp___6;
 3171|      0|                            }
 3172|      0|                        }
 3173|      0|                        b |= (ulg)((uch)tmp___7) << k;
 3174|      0|                        k += 8U;
 3175|      0|                    }
 3176|      0|while_break___2: /* CIL Label */
 3177|      0|                    ;
 3178|      0|                }
 3179|      0|                tmp___8 = w;
 3180|      0|                w++;
 3181|      0|                window[tmp___8] = (uch)b;
 3182|      0|                if (w == 32768U) {
 3183|      0|                    {
 3184|      0|                        outcnt = w;
 3185|      0|                        flush_window();
 3186|      0|                        w = 0U;
 3187|      0|                    }
 3188|      0|                }
 3189|      0|                b >>= 8;
 3190|      0|                k -= 8U;
 3191|      0|            }
 3192|      0|while_break___1: /* CIL Label */
 3193|      0|            ;
 3194|      0|        }
 3195|      0|        outcnt = w;
 3196|      0|        bb = b;
 3197|      0|        bk = k;
 3198|      0|        return (0);
 3199|      0|    }
 3200|      0|}
 3201|       |int inflate_fixed(void)
 3202|      0|{
 3203|      0|    int i___0;
 3204|      0|    struct huft *tl;
 3205|      0|    struct huft *td;
 3206|      0|    int bl;
 3207|      0|    int bd;
 3208|      0|    unsigned int l[288];
 3209|      0|    int tmp;
 3210|      0|    void *__cil_tmp8;
 3211|       |
 3212|      0|    {
 3213|      0|        i___0 = 0;
 3214|      0|        {
 3215|      0|            while (1) {
 3216|      0|while_continue: /* CIL Label */
 3217|      0|                ;
 3218|      0|                if (!(i___0 < 144)) {
 3219|      0|                    goto while_break;
 3220|      0|                }
 3221|      0|                l[i___0] = 8U;
 3222|      0|                i___0++;
 3223|      0|            }
 3224|      0|while_break: /* CIL Label */
 3225|      0|            ;
 3226|      0|        }
 3227|      0|        {
 3228|      0|            while (1) {
 3229|      0|while_continue___0: /* CIL Label */
 3230|      0|                ;
 3231|      0|                if (!(i___0 < 256)) {
 3232|      0|                    goto while_break___0;
 3233|      0|                }
 3234|      0|                l[i___0] = 9U;
 3235|      0|                i___0++;
 3236|      0|            }
 3237|      0|while_break___0: /* CIL Label */
 3238|      0|            ;
 3239|      0|        }
 3240|      0|        {
 3241|      0|            while (1) {
 3242|      0|while_continue___1: /* CIL Label */
 3243|      0|                ;
 3244|      0|                if (!(i___0 < 280)) {
 3245|      0|                    goto while_break___1;
 3246|      0|                }
 3247|      0|                l[i___0] = 7U;
 3248|      0|                i___0++;
 3249|      0|            }
 3250|      0|while_break___1: /* CIL Label */
 3251|      0|            ;
 3252|      0|        }
 3253|      0|        {
 3254|      0|            while (1) {
 3255|      0|while_continue___2: /* CIL Label */
 3256|      0|                ;
 3257|      0|                if (!(i___0 < 288)) {
 3258|      0|                    goto while_break___2;
 3259|      0|                }
 3260|      0|                l[i___0] = 8U;
 3261|      0|                i___0++;
 3262|      0|            }
 3263|      0|while_break___2: /* CIL Label */
 3264|      0|            ;
 3265|      0|        }
 3266|      0|        {
 3267|      0|            bl = 7;
 3268|      0|            i___0 = huft_build(l, 288U, 257U, cplens, cplext, &tl, &bl);
 3269|      0|        }
 3270|      0|        if (i___0 != 0) {
 3271|      0|            return (i___0);
 3272|      0|        }
 3273|      0|        i___0 = 0;
 3274|      0|        {
 3275|      0|            while (1) {
 3276|      0|while_continue___3: /* CIL Label */
 3277|      0|                ;
 3278|      0|                if (!(i___0 < 30)) {
 3279|      0|                    goto while_break___3;
 3280|      0|                }
 3281|      0|                l[i___0] = 5U;
 3282|      0|                i___0++;
 3283|      0|            }
 3284|      0|while_break___3: /* CIL Label */
 3285|      0|            ;
 3286|      0|        }
 3287|      0|        {
 3288|      0|            bd = 5;
 3289|      0|            i___0 = huft_build(l, 30U, 0U, cpdist, cpdext, &td, &bd);
 3290|      0|        }
 3291|      0|        if (i___0 > 1) {
 3292|      0|            {
 3293|      0|                huft_free(tl);
 3294|      0|            }
 3295|      0|            return (i___0);
 3296|      0|        }
 3297|      0|        {
 3298|      0|            tmp = inflate_codes(tl, td, bl, bd);
 3299|      0|        }
 3300|      0|        if (tmp) {
 3301|      0|            return (1);
 3302|      0|        }
 3303|      0|        {
 3304|      0|            huft_free(tl);
 3305|      0|            huft_free(td);
 3306|      0|        }
 3307|      0|        return (0);
 3308|      0|    }
 3309|      0|}
 3310|       |int inflate_dynamic(void)
 3311|      0|{
 3312|      0|    int i___0;
 3313|      0|    unsigned int j___0;
 3314|      0|    unsigned int l;
 3315|      0|    unsigned int m;
 3316|      0|    unsigned int n;
 3317|      0|    struct huft *tl;
 3318|      0|    struct huft *td;
 3319|      0|    int bl;
 3320|      0|    int bd;
 3321|      0|    unsigned int nb;
 3322|      0|    unsigned int nl;
 3323|      0|    unsigned int nd;
 3324|      0|    unsigned int ll[316];
 3325|      0|    register ulg b;
 3326|      0|    register unsigned int k;
 3327|      0|    unsigned int tmp;
 3328|      0|    int tmp___0;
 3329|      0|    int tmp___1;
 3330|      0|    unsigned int tmp___2;
 3331|      0|    int tmp___3;
 3332|      0|    int tmp___4;
 3333|      0|    unsigned int tmp___5;
 3334|      0|    int tmp___6;
 3335|      0|    int tmp___7;
 3336|      0|    unsigned int tmp___8;
 3337|      0|    int tmp___9;
 3338|      0|    int tmp___10;
 3339|      0|    unsigned int tmp___11;
 3340|      0|    int tmp___12;
 3341|      0|    int tmp___13;
 3342|      0|    int tmp___14;
 3343|      0|    unsigned int tmp___15;
 3344|      0|    int tmp___16;
 3345|      0|    int tmp___17;
 3346|      0|    int tmp___18;
 3347|      0|    unsigned int tmp___19;
 3348|      0|    unsigned int tmp___20;
 3349|      0|    int tmp___21;
 3350|      0|    int tmp___22;
 3351|      0|    int tmp___23;
 3352|      0|    unsigned int tmp___24;
 3353|      0|    unsigned int tmp___25;
 3354|      0|    int tmp___26;
 3355|      0|    int tmp___27;
 3356|      0|    int tmp___28;
 3357|      0|    unsigned int tmp___29;
 3358|      0|    int tmp___30;
 3359|      0|    void *__cil_tmp48;
 3360|       |
 3361|      0|    {
 3362|      0|        b = bb;
 3363|      0|        k = bk;
 3364|      0|        {
 3365|      0|            while (1) {
 3366|      0|while_continue: /* CIL Label */
 3367|      0|                ;
 3368|      0|                if (!(k < 5U)) {
 3369|      0|                    goto while_break;
 3370|      0|                }
 3371|      0|                if (inptr < insize) {
 3372|      0|                    tmp = inptr;
 3373|      0|                    inptr++;
 3374|      0|                    tmp___1 = (int)inbuf[tmp];
 3375|      0|                }
 3376|      0|                else {
 3377|      0|                    {
 3378|      0|                        tmp___0 = fill_inbuf(0);
 3379|      0|                        tmp___1 = tmp___0;
 3380|      0|                    }
 3381|      0|                }
 3382|      0|                b |= (ulg)((uch)tmp___1) << k;
 3383|      0|                k += 8U;
 3384|      0|            }
 3385|      0|while_break: /* CIL Label */
 3386|      0|            ;
 3387|      0|        }
 3388|      0|        nl = 257U + ((unsigned int)b & 31U);
 3389|      0|        b >>= 5;
 3390|      0|        k -= 5U;
 3391|      0|        {
 3392|      0|            while (1) {
 3393|      0|while_continue___0: /* CIL Label */
 3394|      0|                ;
 3395|      0|                if (!(k < 5U)) {
 3396|      0|                    goto while_break___0;
 3397|      0|                }
 3398|      0|                if (inptr < insize) {
 3399|      0|                    tmp___2 = inptr;
 3400|      0|                    inptr++;
 3401|      0|                    tmp___4 = (int)inbuf[tmp___2];
 3402|      0|                }
 3403|      0|                else {
 3404|      0|                    {
 3405|      0|                        tmp___3 = fill_inbuf(0);
 3406|      0|                        tmp___4 = tmp___3;
 3407|      0|                    }
 3408|      0|                }
 3409|      0|                b |= (ulg)((uch)tmp___4) << k;
 3410|      0|                k += 8U;
 3411|      0|            }
 3412|      0|while_break___0: /* CIL Label */
 3413|      0|            ;
 3414|      0|        }
 3415|      0|        nd = 1U + ((unsigned int)b & 31U);
 3416|      0|        b >>= 5;
 3417|      0|        k -= 5U;
 3418|      0|        {
 3419|      0|            while (1) {
 3420|      0|while_continue___1: /* CIL Label */
 3421|      0|                ;
 3422|      0|                if (!(k < 4U)) {
 3423|      0|                    goto while_break___1;
 3424|      0|                }
 3425|      0|                if (inptr < insize) {
 3426|      0|                    tmp___5 = inptr;
 3427|      0|                    inptr++;
 3428|      0|                    tmp___7 = (int)inbuf[tmp___5];
 3429|      0|                }
 3430|      0|                else {
 3431|      0|                    {
 3432|      0|                        tmp___6 = fill_inbuf(0);
 3433|      0|                        tmp___7 = tmp___6;
 3434|      0|                    }
 3435|      0|                }
 3436|      0|                b |= (ulg)((uch)tmp___7) << k;
 3437|      0|                k += 8U;
 3438|      0|            }
 3439|      0|while_break___1: /* CIL Label */
 3440|      0|            ;
 3441|      0|        }
 3442|      0|        nb = 4U + ((unsigned int)b & 15U);
 3443|      0|        b >>= 4;
 3444|      0|        k -= 4U;
 3445|      0|        if (nl > 286U) {
 3446|      0|            return (1);
 3447|      0|        }
 3448|      0|        else {
 3449|      0|            if (nd > 30U) {
 3450|      0|                return (1);
 3451|      0|            }
 3452|      0|        }
 3453|      0|        j___0 = 0U;
 3454|      0|        {
 3455|      0|            while (1) {
 3456|      0|while_continue___2: /* CIL Label */
 3457|      0|                ;
 3458|      0|                if (!(j___0 < nb)) {
 3459|      0|                    goto while_break___2;
 3460|      0|                }
 3461|      0|                {
 3462|      0|                    while (1) {
 3463|      0|while_continue___3: /* CIL Label */
 3464|      0|                        ;
 3465|      0|                        if (!(k < 3U)) {
 3466|      0|                            goto while_break___3;
 3467|      0|                        }
 3468|      0|                        if (inptr < insize) {
 3469|      0|                            tmp___8 = inptr;
 3470|      0|                            inptr++;
 3471|      0|                            tmp___10 = (int)inbuf[tmp___8];
 3472|      0|                        }
 3473|      0|                        else {
 3474|      0|                            {
 3475|      0|                                tmp___9 = fill_inbuf(0);
 3476|      0|                                tmp___10 = tmp___9;
 3477|      0|                            }
 3478|      0|                        }
 3479|      0|                        b |= (ulg)((uch)tmp___10) << k;
 3480|      0|                        k += 8U;
 3481|      0|                    }
 3482|      0|while_break___3: /* CIL Label */
 3483|      0|                    ;
 3484|      0|                }
 3485|      0|                ll[border[j___0]] = (unsigned int)b & 7U;
 3486|      0|                b >>= 3;
 3487|      0|                k -= 3U;
 3488|      0|                j___0++;
 3489|      0|            }
 3490|      0|while_break___2: /* CIL Label */
 3491|      0|            ;
 3492|      0|        }
 3493|      0|        {
 3494|      0|            while (1) {
 3495|      0|while_continue___4: /* CIL Label */
 3496|      0|                ;
 3497|      0|                if (!(j___0 < 19U)) {
 3498|      0|                    goto while_break___4;
 3499|      0|                }
 3500|      0|                ll[border[j___0]] = 0U;
 3501|      0|                j___0++;
 3502|      0|            }
 3503|      0|while_break___4: /* CIL Label */
 3504|      0|            ;
 3505|      0|        }
 3506|      0|        {
 3507|      0|            bl = 7;
 3508|      0|            i___0 = huft_build(ll, 19U, 19U, (ush *)((void *)0), (ush *)((void *)0),
 3509|      0|                               &tl, &bl);
 3510|      0|        }
 3511|      0|        if (i___0 != 0) {
 3512|      0|            if (i___0 == 1) {
 3513|      0|                {
 3514|      0|                    huft_free(tl);
 3515|      0|                }
 3516|      0|            }
 3517|      0|            return (i___0);
 3518|      0|        }
 3519|      0|        n = nl + nd;
 3520|      0|        m = (unsigned int)mask_bits[bl];
 3521|      0|        l = 0U;
 3522|      0|        i___0 = (int)l;
 3523|      0|        {
 3524|      0|            while (1) {
 3525|      0|while_continue___5: /* CIL Label */
 3526|      0|                ;
 3527|      0|                if (!((unsigned int)i___0 < n)) {
 3528|      0|                    goto while_break___5;
 3529|      0|                }
 3530|      0|                {
 3531|      0|                    while (1) {
 3532|      0|while_continue___6: /* CIL Label */
 3533|      0|                        ;
 3534|      0|                        if (!(k < (unsigned int)bl)) {
 3535|      0|                            goto while_break___6;
 3536|      0|                        }
 3537|      0|                        if (inptr < insize) {
 3538|      0|                            tmp___11 = inptr;
 3539|      0|                            inptr++;
 3540|      0|                            tmp___13 = (int)inbuf[tmp___11];
 3541|      0|                        }
 3542|      0|                        else {
 3543|      0|                            {
 3544|      0|                                tmp___12 = fill_inbuf(0);
 3545|      0|                                tmp___13 = tmp___12;
 3546|      0|                            }
 3547|      0|                        }
 3548|      0|                        b |= (ulg)((uch)tmp___13) << k;
 3549|      0|                        k += 8U;
 3550|      0|                    }
 3551|      0|while_break___6: /* CIL Label */
 3552|      0|                    ;
 3553|      0|                }
 3554|      0|                td = tl + ((unsigned int)b & m);
 3555|      0|                j___0 = (unsigned int)td->b;
 3556|      0|                b >>= j___0;
 3557|      0|                k -= j___0;
 3558|      0|                j___0 = (unsigned int)td->v.n;
 3559|      0|                if (j___0 < 16U) {
 3560|      0|                    tmp___14 = i___0;
 3561|      0|                    i___0++;
 3562|      0|                    l = j___0;
 3563|      0|                    ll[tmp___14] = l;
 3564|      0|                }
 3565|      0|                else {
 3566|      0|                    if (j___0 == 16U) {
 3567|      0|                        {
 3568|      0|                            while (1) {
 3569|      0|while_continue___7: /* CIL Label */
 3570|      0|                                ;
 3571|      0|                                if (!(k < 2U)) {
 3572|      0|                                    goto while_break___7;
 3573|      0|                                }
 3574|      0|                                if (inptr < insize) {
 3575|      0|                                    tmp___15 = inptr;
 3576|      0|                                    inptr++;
 3577|      0|                                    tmp___17 = (int)inbuf[tmp___15];
 3578|      0|                                }
 3579|      0|                                else {
 3580|      0|                                    {
 3581|      0|                                        tmp___16 = fill_inbuf(0);
 3582|      0|                                        tmp___17 = tmp___16;
 3583|      0|                                    }
 3584|      0|                                }
 3585|      0|                                b |= (ulg)((uch)tmp___17) << k;
 3586|      0|                                k += 8U;
 3587|      0|                            }
 3588|      0|while_break___7: /* CIL Label */
 3589|      0|                            ;
 3590|      0|                        }
 3591|      0|                        j___0 = 3U + ((unsigned int)b & 3U);
 3592|      0|                        b >>= 2;
 3593|      0|                        k -= 2U;
 3594|      0|                        if ((unsigned int)i___0 + j___0 > n) {
 3595|      0|                            return (1);
 3596|      0|                        }
 3597|      0|                        {
 3598|      0|                            while (1) {
 3599|      0|while_continue___8: /* CIL Label */
 3600|      0|                                ;
 3601|      0|                                tmp___19 = j___0;
 3602|      0|                                j___0--;
 3603|      0|                                if (!tmp___19) {
 3604|      0|                                    goto while_break___8;
 3605|      0|                                }
 3606|      0|                                tmp___18 = i___0;
 3607|      0|                                i___0++;
 3608|      0|                                ll[tmp___18] = l;
 3609|      0|                            }
 3610|      0|while_break___8: /* CIL Label */
 3611|      0|                            ;
 3612|      0|                        }
 3613|      0|                    }
 3614|      0|                    else {
 3615|      0|                        if (j___0 == 17U) {
 3616|      0|                            {
 3617|      0|                                while (1) {
 3618|      0|while_continue___9: /* CIL Label */
 3619|      0|                                    ;
 3620|      0|                                    if (!(k < 3U)) {
 3621|      0|                                        goto while_break___9;
 3622|      0|                                    }
 3623|      0|                                    if (inptr < insize) {
 3624|      0|                                        tmp___20 = inptr;
 3625|      0|                                        inptr++;
 3626|      0|                                        tmp___22 = (int)inbuf[tmp___20];
 3627|      0|                                    }
 3628|      0|                                    else {
 3629|      0|                                        {
 3630|      0|                                            tmp___21 = fill_inbuf(0);
 3631|      0|                                            tmp___22 = tmp___21;
 3632|      0|                                        }
 3633|      0|                                    }
 3634|      0|                                    b |= (ulg)((uch)tmp___22) << k;
 3635|      0|                                    k += 8U;
 3636|      0|                                }
 3637|      0|while_break___9: /* CIL Label */
 3638|      0|                                ;
 3639|      0|                            }
 3640|      0|                            j___0 = 3U + ((unsigned int)b & 7U);
 3641|      0|                            b >>= 3;
 3642|      0|                            k -= 3U;
 3643|      0|                            if ((unsigned int)i___0 + j___0 > n) {
 3644|      0|                                return (1);
 3645|      0|                            }
 3646|      0|                            {
 3647|      0|                                while (1) {
 3648|      0|while_continue___10: /* CIL Label */
 3649|      0|                                    ;
 3650|      0|                                    tmp___24 = j___0;
 3651|      0|                                    j___0--;
 3652|      0|                                    if (!tmp___24) {
 3653|      0|                                        goto while_break___10;
 3654|      0|                                    }
 3655|      0|                                    tmp___23 = i___0;
 3656|      0|                                    i___0++;
 3657|      0|                                    ll[tmp___23] = 0U;
 3658|      0|                                }
 3659|      0|while_break___10: /* CIL Label */
 3660|      0|                                ;
 3661|      0|                            }
 3662|      0|                            l = 0U;
 3663|      0|                        }
 3664|      0|                        else {
 3665|      0|                            {
 3666|      0|                                while (1) {
 3667|      0|while_continue___11: /* CIL Label */
 3668|      0|                                    ;
 3669|      0|                                    if (!(k < 7U)) {
 3670|      0|                                        goto while_break___11;
 3671|      0|                                    }
 3672|      0|                                    if (inptr < insize) {
 3673|      0|                                        tmp___25 = inptr;
 3674|      0|                                        inptr++;
 3675|      0|                                        tmp___27 = (int)inbuf[tmp___25];
 3676|      0|                                    }
 3677|      0|                                    else {
 3678|      0|                                        {
 3679|      0|                                            tmp___26 = fill_inbuf(0);
 3680|      0|                                            tmp___27 = tmp___26;
 3681|      0|                                        }
 3682|      0|                                    }
 3683|      0|                                    b |= (ulg)((uch)tmp___27) << k;
 3684|      0|                                    k += 8U;
 3685|      0|                                }
 3686|      0|while_break___11: /* CIL Label */
 3687|      0|                                ;
 3688|      0|                            }
 3689|      0|                            j___0 = 11U + ((unsigned int)b & 127U);
 3690|      0|                            b >>= 7;
 3691|      0|                            k -= 7U;
 3692|      0|                            if ((unsigned int)i___0 + j___0 > n) {
 3693|      0|                                return (1);
 3694|      0|                            }
 3695|      0|                            {
 3696|      0|                                while (1) {
 3697|      0|while_continue___12: /* CIL Label */
 3698|      0|                                    ;
 3699|      0|                                    tmp___29 = j___0;
 3700|      0|                                    j___0--;
 3701|      0|                                    if (!tmp___29) {
 3702|      0|                                        goto while_break___12;
 3703|      0|                                    }
 3704|      0|                                    tmp___28 = i___0;
 3705|      0|                                    i___0++;
 3706|      0|                                    ll[tmp___28] = 0U;
 3707|      0|                                }
 3708|      0|while_break___12: /* CIL Label */
 3709|      0|                                ;
 3710|      0|                            }
 3711|      0|                            l = 0U;
 3712|      0|                        }
 3713|      0|                    }
 3714|      0|                }
 3715|      0|            }
 3716|      0|while_break___5: /* CIL Label */
 3717|      0|            ;
 3718|      0|        }
 3719|      0|        {
 3720|      0|            huft_free(tl);
 3721|      0|            bb = b;
 3722|      0|            bk = k;
 3723|      0|            bl = lbits;
 3724|      0|            i___0 = huft_build(ll, nl, 257U, cplens, cplext, &tl, &bl);
 3725|      0|        }
 3726|      0|        if (i___0 != 0) {
 3727|      0|            if (i___0 == 1) {
 3728|      0|                {
 3729|      0|                    fprintf(
 3730|      0|                        (FILE * /* __restrict  */) stderr,
 3731|      0|                        (char const * /* __restrict  */) " incomplete literal tree\n");
 3732|      0|                    huft_free(tl);
 3733|      0|                }
 3734|      0|            }
 3735|      0|            return (i___0);
 3736|      0|        }
 3737|      0|        {
 3738|      0|            bd = dbits;
 3739|      0|            i___0 = huft_build(ll + nl, nd, 0U, cpdist, cpdext, &td, &bd);
 3740|      0|        }
 3741|      0|        if (i___0 != 0) {
 3742|      0|            if (i___0 == 1) {
 3743|      0|                {
 3744|      0|                    fprintf(
 3745|      0|                        (FILE * /* __restrict  */) stderr,
 3746|      0|                        (char const * /* __restrict  */) " incomplete distance tree\n");
 3747|      0|                    huft_free(td);
 3748|      0|                }
 3749|      0|            }
 3750|      0|            {
 3751|      0|                huft_free(tl);
 3752|      0|            }
 3753|      0|            return (i___0);
 3754|      0|        }
 3755|      0|        {
 3756|      0|            tmp___30 = inflate_codes(tl, td, bl, bd);
 3757|      0|        }
 3758|      0|        if (tmp___30) {
 3759|      0|            return (1);
 3760|      0|        }
 3761|      0|        {
 3762|      0|            huft_free(tl);
 3763|      0|            huft_free(td);
 3764|      0|        }
 3765|      0|        return (0);
 3766|      0|    }
 3767|      0|}
 3768|       |int inflate_block(int *e)
 3769|      0|{
 3770|      0|    unsigned int t;
 3771|      0|    register ulg b;
 3772|      0|    register unsigned int k;
 3773|      0|    unsigned int tmp;
 3774|      0|    int tmp___0;
 3775|      0|    int tmp___1;
 3776|      0|    unsigned int tmp___2;
 3777|      0|    int tmp___3;
 3778|      0|    int tmp___4;
 3779|      0|    int tmp___5;
 3780|      0|    int tmp___6;
 3781|      0|    int tmp___7;
 3782|       |
 3783|      0|    {
 3784|      0|        b = bb;
 3785|      0|        k = bk;
 3786|      0|        {
 3787|      0|            while (1) {
 3788|      0|while_continue: /* CIL Label */
 3789|      0|                ;
 3790|      0|                if (!(k < 1U)) {
 3791|      0|                    goto while_break;
 3792|      0|                }
 3793|      0|                if (inptr < insize) {
 3794|      0|                    tmp = inptr;
 3795|      0|                    inptr++;
 3796|      0|                    tmp___1 = (int)inbuf[tmp];
 3797|      0|                }
 3798|      0|                else {
 3799|      0|                    {
 3800|      0|                        tmp___0 = fill_inbuf(0);
 3801|      0|                        tmp___1 = tmp___0;
 3802|      0|                    }
 3803|      0|                }
 3804|      0|                b |= (ulg)((uch)tmp___1) << k;
 3805|      0|                k += 8U;
 3806|      0|            }
 3807|      0|while_break: /* CIL Label */
 3808|      0|            ;
 3809|      0|        }
 3810|      0|        *e = (int)b & 1;
 3811|      0|        b >>= 1;
 3812|      0|        k--;
 3813|      0|        {
 3814|      0|            while (1) {
 3815|      0|while_continue___0: /* CIL Label */
 3816|      0|                ;
 3817|      0|                if (!(k < 2U)) {
 3818|      0|                    goto while_break___0;
 3819|      0|                }
 3820|      0|                if (inptr < insize) {
 3821|      0|                    tmp___2 = inptr;
 3822|      0|                    inptr++;
 3823|      0|                    tmp___4 = (int)inbuf[tmp___2];
 3824|      0|                }
 3825|      0|                else {
 3826|      0|                    {
 3827|      0|                        tmp___3 = fill_inbuf(0);
 3828|      0|                        tmp___4 = tmp___3;
 3829|      0|                    }
 3830|      0|                }
 3831|      0|                b |= (ulg)((uch)tmp___4) << k;
 3832|      0|                k += 8U;
 3833|      0|            }
 3834|      0|while_break___0: /* CIL Label */
 3835|      0|            ;
 3836|      0|        }
 3837|      0|        t = (unsigned int)b & 3U;
 3838|      0|        b >>= 2;
 3839|      0|        k -= 2U;
 3840|      0|        bb = b;
 3841|      0|        bk = k;
 3842|      0|        if (t == 2U) {
 3843|      0|            {
 3844|      0|                tmp___5 = inflate_dynamic();
 3845|      0|            }
 3846|      0|            return (tmp___5);
 3847|      0|        }
 3848|      0|        if (t == 0U) {
 3849|      0|            {
 3850|      0|                tmp___6 = inflate_stored();
 3851|      0|            }
 3852|      0|            return (tmp___6);
 3853|      0|        }
 3854|      0|        if (t == 1U) {
 3855|      0|            {
 3856|      0|                tmp___7 = inflate_fixed();
 3857|      0|            }
 3858|      0|            return (tmp___7);
 3859|      0|        }
 3860|      0|        return (2);
 3861|      0|    }
 3862|      0|}
 3863|       |int inflate(void)
 3864|      0|{
 3865|      0|    int e;
 3866|      0|    int r;
 3867|      0|    unsigned int h;
 3868|       |
 3869|      0|    {
 3870|      0|        outcnt = 0U;
 3871|      0|        bk = 0U;
 3872|      0|        bb = (ulg)0;
 3873|      0|        h = 0U;
 3874|      0|        {
 3875|      0|            while (1) {
 3876|      0|while_continue: /* CIL Label */
 3877|      0|                ;
 3878|      0|                {
 3879|      0|                    hufts = 0U;
 3880|      0|                    r = inflate_block(&e);
 3881|      0|                }
 3882|      0|                if (r != 0) {
 3883|      0|                    return (r);
 3884|      0|                }
 3885|      0|                if (hufts > h) {
 3886|      0|                    h = hufts;
 3887|      0|                }
 3888|      0|                if (!(!e)) {
 3889|      0|                    goto while_break;
 3890|      0|                }
 3891|      0|            }
 3892|      0|while_break: /* CIL Label */
 3893|      0|            ;
 3894|      0|        }
 3895|      0|        {
 3896|      0|            while (1) {
 3897|      0|while_continue___0: /* CIL Label */
 3898|      0|                ;
 3899|      0|                if (!(bk >= 8U)) {
 3900|      0|                    goto while_break___0;
 3901|      0|                }
 3902|      0|                bk -= 8U;
 3903|      0|                inptr--;
 3904|      0|            }
 3905|      0|while_break___0: /* CIL Label */
 3906|      0|            ;
 3907|      0|        }
 3908|      0|        {
 3909|      0|            outcnt = outcnt;
 3910|      0|            flush_window();
 3911|      0|        }
 3912|      0|        return (0);
 3913|      0|    }
 3914|      0|}
 3915|       |int method;
 3916|       |int decrypt;
 3917|       |int unzip(int in, int out);
 3918|       |int check_zipfile(int in);
 3919|       |char *key;
 3920|       |int pkzip = 0;
 3921|       |int ext_header = 0;
 3922|       |int check_zipfile(int in)
 3923|      0|{
 3924|      0|    uch *h;
 3925|       |
 3926|      0|    {
 3927|      0|        h = inbuf + inptr;
 3928|      0|        ifd = in;
 3929|      0|        inptr += (unsigned int)((30 + ((int)((ush) * ((h + 26) + 0)) |
 3930|      0|                                       ((int)((ush) * ((h + 26) + 1)) << 8))) +
 3931|      0|                                ((int)((ush) * ((h + 28) + 0)) |
 3932|      0|                                 ((int)((ush) * ((h + 28) + 1)) << 8)));
 3933|      0|        if (inptr > insize) {
 3934|      0|            {
 3935|      0|                fprintf(
 3936|      0|                    (FILE * /* __restrict  */) stderr,
 3937|      0|                    (char const * /* __restrict  */) "\n%s: %s: not a valid zip file\n",
 3938|      0|                    progname, ifname);
 3939|      0|                exit_code = 1;
 3940|      0|            }
 3941|      0|            return (1);
 3942|      0|        }
 3943|      0|        else {
 3944|      0|            if (((ulg)((int)((ush) * (h + 0)) | ((int)((ush) * (h + 1)) << 8)) |
 3945|      0|                    ((ulg)((int)((ush) * ((h + 2) + 0)) |
 3946|      0|                           ((int)((ush) * ((h + 2) + 1)) << 8))
 3947|      0|                     << 16)) != 67324752UL) {
 3948|      0|                {
 3949|      0|                    fprintf((FILE * /* __restrict  */) stderr,
 3950|      0|                            (char const
 3951|      0|                             * /* __restrict  */) "\n%s: %s: not a valid zip file\n",
 3952|      0|                            progname, ifname);
 3953|      0|                    exit_code = 1;
 3954|      0|                }
 3955|      0|                return (1);
 3956|      0|            }
 3957|      0|        }
 3958|      0|        method = (int)*(h + 8);
 3959|      0|        if (method != 0) {
 3960|      0|            if (method != 8) {
 3961|      0|                {
 3962|      0|                    fprintf((FILE * /* __restrict  */) stderr,
 3963|      0|                            (char const
 3964|      0|                             * /* __restrict  */) "\n%s: %s: first entry not "
 3965|      0|                            "deflated or stored -- use unzip\n",
 3966|      0|                            progname, ifname);
 3967|      0|                    exit_code = 1;
 3968|      0|                }
 3969|      0|                return (1);
 3970|      0|            }
 3971|      0|        }
 3972|      0|        decrypt = (int)*(h + 6) & 1;
 3973|      0|        if (decrypt != 0) {
 3974|      0|            {
 3975|      0|                fprintf(
 3976|      0|                    (FILE * /* __restrict  */) stderr,
 3977|      0|                    (char const
 3978|      0|                     * /* __restrict  */) "\n%s: %s: encrypted file -- use unzip\n",
 3979|      0|                    progname, ifname);
 3980|      0|                exit_code = 1;
 3981|      0|            }
 3982|      0|            return (1);
 3983|      0|        }
 3984|      0|        ext_header = ((int)*(h + 6) & 8) != 0;
 3985|      0|        pkzip = 1;
 3986|      0|        return (0);
 3987|      0|    }
 3988|      0|}
 3989|       |int unzip(int in, int out)
 3990|      0|{
 3991|      0|    ulg orig_crc;
 3992|      0|    ulg orig_len___0;
 3993|      0|    int n;
 3994|      0|    uch buf[16];
 3995|      0|    int res;
 3996|      0|    int tmp;
 3997|      0|    register ulg n___0;
 3998|      0|    int tmp___0;
 3999|      0|    uch c;
 4000|      0|    unsigned int tmp___1;
 4001|      0|    int tmp___2;
 4002|      0|    int tmp___3;
 4003|      0|    unsigned int tmp___4;
 4004|      0|    ulg tmp___5;
 4005|      0|    unsigned int tmp___6;
 4006|      0|    int tmp___7;
 4007|      0|    int tmp___8;
 4008|      0|    unsigned int tmp___9;
 4009|      0|    int tmp___10;
 4010|      0|    int tmp___11;
 4011|      0|    ulg tmp___12;
 4012|      0|    void *__cil_tmp24;
 4013|      0|    char *__cil_tmp25;
 4014|      0|    char *__cil_tmp26;
 4015|      0|    char *__cil_tmp27;
 4016|      0|    char *__cil_tmp28;
 4017|      0|    char *__cil_tmp29;
 4018|      0|    char *__cil_tmp30;
 4019|      0|    char *__cil_tmp31;
 4020|       |
 4021|      0|    {
 4022|      0|        {
 4023|      0|            orig_crc = (ulg)0;
 4024|      0|            orig_len___0 = (ulg)0;
 4025|      0|            ifd = in;
 4026|      0|            ofd = out;
 4027|      0|            updcrc((uch *)((void *)0), 0U);
 4028|      0|        }
 4029|      0|        if (pkzip) {
 4030|      0|            if (!ext_header) {
 4031|      0|                orig_crc = (ulg)((int)((ush) * ((inbuf + 14) + 0)) |
 4032|      0|                                 ((int)((ush) * ((inbuf + 14) + 1)) << 8)) |
 4033|      0|                           ((ulg)((int)((ush) * (((inbuf + 14) + 2) + 0)) |
 4034|      0|                                  ((int)((ush) * (((inbuf + 14) + 2) + 1)) << 8))
 4035|      0|                            << 16);
 4036|      0|                orig_len___0 = (ulg)((int)((ush) * ((inbuf + 22) + 0)) |
 4037|      0|                                     ((int)((ush) * ((inbuf + 22) + 1)) << 8)) |
 4038|      0|                               ((ulg)((int)((ush) * (((inbuf + 22) + 2) + 0)) |
 4039|      0|                                      ((int)((ush) * (((inbuf + 22) + 2) + 1)) << 8))
 4040|      0|                                << 16);
 4041|      0|            }
 4042|      0|        }
 4043|      0|        if (method == 8) {
 4044|      0|            {
 4045|      0|                tmp = inflate();
 4046|      0|                res = tmp;
 4047|      0|            }
 4048|      0|            if (res == 3) {
 4049|      0|                {
 4050|      0|                    error((char *)"out of memory");
 4051|      0|                }
 4052|      0|            }
 4053|      0|            else {
 4054|      0|                if (res != 0) {
 4055|      0|                    {
 4056|      0|                        error((char *)"invalid compressed data--format violated");
 4057|      0|                    }
 4058|      0|                }
 4059|      0|            }
 4060|      0|        }
 4061|      0|        else {
 4062|      0|            if (pkzip) {
 4063|      0|                if (method == 0) {
 4064|      0|                    n___0 = (ulg)((int)((ush) * ((inbuf + 22) + 0)) |
 4065|      0|                                  ((int)((ush) * ((inbuf + 22) + 1)) << 8)) |
 4066|      0|                            ((ulg)((int)((ush) * (((inbuf + 22) + 2) + 0)) |
 4067|      0|                                   ((int)((ush) * (((inbuf + 22) + 2) + 1)) << 8))
 4068|      0|                             << 16);
 4069|      0|                    if (decrypt) {
 4070|      0|                        tmp___0 = 12;
 4071|      0|                    }
 4072|      0|                    else {
 4073|      0|                        tmp___0 = 0;
 4074|      0|                    }
 4075|      0|                    if (n___0 != ((ulg)((int)((ush) * ((inbuf + 18) + 0)) |
 4076|      0|                                        ((int)((ush) * ((inbuf + 18) + 1)) << 8)) |
 4077|      0|                                  ((ulg)((int)((ush) * (((inbuf + 18) + 2) + 0)) |
 4078|      0|                                         ((int)((ush) * (((inbuf + 18) + 2) + 1)) << 8))
 4079|      0|                                   << 16)) -
 4080|      0|                            (unsigned long)tmp___0) {
 4081|      0|                        {
 4082|      0|                            fprintf((FILE * /* __restrict  */) stderr,
 4083|      0|                                    (char const * /* __restrict  */) "len %ld, siz %ld\n",
 4084|      0|                                    n___0,
 4085|      0|                                    (ulg)((int)((ush) * ((inbuf + 18) + 0)) |
 4086|      0|                                          ((int)((ush) * ((inbuf + 18) + 1)) << 8)) |
 4087|      0|                                    ((ulg)((int)((ush) * (((inbuf + 18) + 2) + 0)) |
 4088|      0|                                           ((int)((ush) * (((inbuf + 18) + 2) + 1)) << 8))
 4089|      0|                                     << 16));
 4090|      0|                            error((char *)"invalid compressed data--length mismatch");
 4091|      0|                        }
 4092|      0|                    }
 4093|      0|                    {
 4094|      0|                        while (1) {
 4095|      0|while_continue: /* CIL Label */
 4096|      0|                            ;
 4097|      0|                            tmp___5 = n___0;
 4098|      0|                            n___0--;
 4099|      0|                            if (!tmp___5) {
 4100|      0|                                goto while_break;
 4101|      0|                            }
 4102|      0|                            if (inptr < insize) {
 4103|      0|                                tmp___1 = inptr;
 4104|      0|                                inptr++;
 4105|      0|                                tmp___3 = (int)inbuf[tmp___1];
 4106|      0|                            }
 4107|      0|                            else {
 4108|      0|                                {
 4109|      0|                                    tmp___2 = fill_inbuf(0);
 4110|      0|                                    tmp___3 = tmp___2;
 4111|      0|                                }
 4112|      0|                            }
 4113|      0|                            c = (uch)tmp___3;
 4114|      0|                            tmp___4 = outcnt;
 4115|      0|                            outcnt++;
 4116|      0|                            window[tmp___4] = c;
 4117|      0|                            if (outcnt == 32768U) {
 4118|      0|                                {
 4119|      0|                                    flush_window();
 4120|      0|                                }
 4121|      0|                            }
 4122|      0|                        }
 4123|      0|while_break: /* CIL Label */
 4124|      0|                        ;
 4125|      0|                    }
 4126|      0|                    {
 4127|      0|                        flush_window();
 4128|      0|                    }
 4129|      0|                }
 4130|      0|                else {
 4131|      0|                    {
 4132|      0|                        error((char *)"internal error, invalid method");
 4133|      0|                    }
 4134|      0|                }
 4135|      0|            }
 4136|      0|            else {
 4137|      0|                {
 4138|      0|                    error((char *)"internal error, invalid method");
 4139|      0|                }
 4140|      0|            }
 4141|      0|        }
 4142|      0|        if (!pkzip) {
 4143|      0|            n = 0;
 4144|      0|            {
 4145|      0|                while (1) {
 4146|      0|while_continue___0: /* CIL Label */
 4147|      0|                    ;
 4148|      0|                    if (!(n < 8)) {
 4149|      0|                        goto while_break___0;
 4150|      0|                    }
 4151|      0|                    if (inptr < insize) {
 4152|      0|                        tmp___6 = inptr;
 4153|      0|                        inptr++;
 4154|      0|                        tmp___8 = (int)inbuf[tmp___6];
 4155|      0|                    }
 4156|      0|                    else {
 4157|      0|                        {
 4158|      0|                            tmp___7 = fill_inbuf(0);
 4159|      0|                            tmp___8 = tmp___7;
 4160|      0|                        }
 4161|      0|                    }
 4162|      0|                    buf[n] = (uch)tmp___8;
 4163|      0|                    n++;
 4164|      0|                }
 4165|      0|while_break___0: /* CIL Label */
 4166|      0|                ;
 4167|      0|            }
 4168|      0|            orig_crc = (ulg)((int)((ush)buf[0]) | ((int)((ush)buf[1]) << 8)) |
 4169|      0|                       ((ulg)((int)((ush) * ((buf + 2) + 0)) |
 4170|      0|                              ((int)((ush) * ((buf + 2) + 1)) << 8))
 4171|      0|                        << 16);
 4172|      0|            orig_len___0 = (ulg)((int)((ush) * ((buf + 4) + 0)) |
 4173|      0|                                 ((int)((ush) * ((buf + 4) + 1)) << 8)) |
 4174|      0|                           ((ulg)((int)((ush) * (((buf + 4) + 2) + 0)) |
 4175|      0|                                  ((int)((ush) * (((buf + 4) + 2) + 1)) << 8))
 4176|      0|                            << 16);
 4177|      0|        }
 4178|      0|        else {
 4179|      0|            if (ext_header) {
 4180|      0|                n = 0;
 4181|      0|                {
 4182|      0|                    while (1) {
 4183|      0|while_continue___1: /* CIL Label */
 4184|      0|                        ;
 4185|      0|                        if (!(n < 16)) {
 4186|      0|                            goto while_break___1;
 4187|      0|                        }
 4188|      0|                        if (inptr < insize) {
 4189|      0|                            tmp___9 = inptr;
 4190|      0|                            inptr++;
 4191|      0|                            tmp___11 = (int)inbuf[tmp___9];
 4192|      0|                        }
 4193|      0|                        else {
 4194|      0|                            {
 4195|      0|                                tmp___10 = fill_inbuf(0);
 4196|      0|                                tmp___11 = tmp___10;
 4197|      0|                            }
 4198|      0|                        }
 4199|      0|                        buf[n] = (uch)tmp___11;
 4200|      0|                        n++;
 4201|      0|                    }
 4202|      0|while_break___1: /* CIL Label */
 4203|      0|                    ;
 4204|      0|                }
 4205|      0|                orig_crc = (ulg)((int)((ush) * ((buf + 4) + 0)) |
 4206|      0|                                 ((int)((ush) * ((buf + 4) + 1)) << 8)) |
 4207|      0|                           ((ulg)((int)((ush) * (((buf + 4) + 2) + 0)) |
 4208|      0|                                  ((int)((ush) * (((buf + 4) + 2) + 1)) << 8))
 4209|      0|                            << 16);
 4210|      0|                orig_len___0 = (ulg)((int)((ush) * ((buf + 12) + 0)) |
 4211|      0|                                     ((int)((ush) * ((buf + 12) + 1)) << 8)) |
 4212|      0|                               ((ulg)((int)((ush) * (((buf + 12) + 2) + 0)) |
 4213|      0|                                      ((int)((ush) * (((buf + 12) + 2) + 1)) << 8))
 4214|      0|                                << 16);
 4215|      0|            }
 4216|      0|        }
 4217|      0|        {
 4218|      0|            tmp___12 = updcrc(outbuf, 0U);
 4219|      0|        }
 4220|      0|        if (orig_crc != tmp___12) {
 4221|      0|            {
 4222|      0|                error((char *)"invalid compressed data--crc error");
 4223|      0|            }
 4224|      0|        }
 4225|      0|        if (orig_len___0 != (ulg)bytes_out) {
 4226|      0|            {
 4227|      0|                error((char *)"invalid compressed data--length error");
 4228|      0|            }
 4229|      0|        }
 4230|      0|        if (pkzip) {
 4231|      0|            if (inptr + 4U < insize) {
 4232|      0|                if (((ulg)((int)((ush) * ((inbuf + inptr) + 0)) |
 4233|      0|                           ((int)((ush) * ((inbuf + inptr) + 1)) << 8)) |
 4234|      0|                        ((ulg)((int)((ush) * (((inbuf + inptr) + 2) + 0)) |
 4235|      0|                               ((int)((ush) * (((inbuf + inptr) + 2) + 1)) << 8))
 4236|      0|                         << 16)) == 67324752UL) {
 4237|      0|                    if (to_stdout) {
 4238|      0|                        if (!quiet) {
 4239|      0|                            {
 4240|      0|                                fprintf(
 4241|      0|                                    (FILE * /* __restrict  */) stderr,
 4242|      0|                                    (char const * /* __restrict  */) "%s: %s has more than one "
 4243|      0|                                    "entry--rest ignored\n",
 4244|      0|                                    progname, ifname);
 4245|      0|                            }
 4246|      0|                        }
 4247|      0|                        if (exit_code == 0) {
 4248|      0|                            exit_code = 2;
 4249|      0|                        }
 4250|      0|                    }
 4251|      0|                    else {
 4252|      0|                        {
 4253|      0|                            fprintf(
 4254|      0|                                (FILE * /* __restrict  */) stderr,
 4255|      0|                                (char const * /* __restrict  */) "%s: %s has more than one "
 4256|      0|                                "entry -- unchanged\n",
 4257|      0|                                progname, ifname);
 4258|      0|                            exit_code = 1;
 4259|      0|                            pkzip = 0;
 4260|      0|                            ext_header = pkzip;
 4261|      0|                        }
 4262|      0|                        return (1);
 4263|      0|                    }
 4264|      0|                }
 4265|      0|            }
 4266|      0|        }
 4267|      0|        pkzip = 0;
 4268|      0|        ext_header = pkzip;
 4269|      0|        return (0);
 4270|      0|    }
 4271|      0|}
 4272|       |int file_read(char *buf, unsigned int size);
 4273|       |void bi_init(file_t zipfile);
 4274|       |void send_bits(int value, int length);
 4275|       |unsigned int bi_reverse(unsigned int code, int len);
 4276|       |void bi_windup(void);
 4277|       |void copy_block(char *buf, unsigned int len, int header);
 4278|       |int (*read_buf)(char *buf, unsigned int size);
 4279|       |static file_t zfile;
 4280|       |static unsigned short bi_buf;
 4281|       |static int bi_valid;
 4282|       |void bi_init(file_t zipfile)
 4283|      5|{
 4284|       |
 4285|      5|    {
 4286|      5|        zfile = zipfile;
 4287|      5|        bi_buf = (unsigned short)0;
 4288|      5|        bi_valid = 0;
 4289|      5|        if (zfile != -1) {
 4290|      5|            read_buf = &file_read;
 4291|      5|        }
 4292|      5|        return;
 4293|      5|    }
 4294|      5|}
 4295|       |void send_bits(int value, int length)
 4296|  53.1k|{
 4297|  53.1k|    unsigned int tmp;
 4298|  53.1k|    unsigned int tmp___0;
 4299|  53.1k|    unsigned int tmp___1;
 4300|  53.1k|    unsigned int tmp___2;
 4301|       |
 4302|  53.1k|    {
 4303|  53.1k|        if (bi_valid > (int)(16UL * sizeof(char)) - length) {
 4304|  18.5k|            bi_buf = (unsigned short)((int)bi_buf | (value << bi_valid));
 4305|  18.5k|            if (outcnt < 16382U) {
 4306|  18.5k|                tmp = outcnt;
 4307|  18.5k|                outcnt++;
 4308|  18.5k|                outbuf[tmp] = (uch)((int)bi_buf & 255);
 4309|  18.5k|                tmp___0 = outcnt;
 4310|  18.5k|                outcnt++;
 4311|  18.5k|                outbuf[tmp___0] = (uch)((int)bi_buf >> 8);
 4312|  18.5k|            }
 4313|      2|            else {
 4314|      2|                tmp___1 = outcnt;
 4315|      2|                outcnt++;
 4316|      2|                outbuf[tmp___1] = (uch)((int)bi_buf & 255);
 4317|      2|                if (outcnt == 16384U) {
 4318|      0|                    {
 4319|      0|                        flush_outbuf();
 4320|      0|                    }
 4321|      0|                }
 4322|      2|                tmp___2 = outcnt;
 4323|      2|                outcnt++;
 4324|      2|                outbuf[tmp___2] = (uch)((int)bi_buf >> 8);
 4325|      2|                if (outcnt == 16384U) {
 4326|      2|                    {
 4327|      2|                        flush_outbuf();
 4328|      2|                    }
 4329|      2|                }
 4330|      2|            }
 4331|  18.5k|            bi_buf = (unsigned short)((int)((ush)value) >> (16UL * sizeof(char) -
 4332|  18.5k|                                      (unsigned long)bi_valid));
 4333|  18.5k|            bi_valid = (int)((unsigned long)bi_valid +
 4334|  18.5k|                             ((unsigned long)length - 16UL * sizeof(char)));
 4335|  18.5k|        }
 4336|  34.5k|        else {
 4337|  34.5k|            bi_buf = (unsigned short)((int)bi_buf | (value << bi_valid));
 4338|  34.5k|            bi_valid += length;
 4339|  34.5k|        }
 4340|  53.1k|        return;
 4341|  53.1k|    }
 4342|  53.1k|}
 4343|       |unsigned int bi_reverse(unsigned int code, int len)
 4344|  9.82k|{
 4345|  9.82k|    register unsigned int res;
 4346|       |
 4347|  9.82k|    {
 4348|  9.82k|        res = 0U;
 4349|  9.82k|        {
 4350|  76.5k|            while (1) {
 4351|  76.5k|while_continue: /* CIL Label */
 4352|  76.5k|                ;
 4353|  76.5k|                res |= code & 1U;
 4354|  76.5k|                code >>= 1;
 4355|  76.5k|                res <<= 1;
 4356|  76.5k|                len--;
 4357|  76.5k|                if (!(len > 0)) {
 4358|  9.82k|                    goto while_break;
 4359|  9.82k|                }
 4360|  76.5k|            }
 4361|  9.82k|while_break: /* CIL Label */
 4362|  9.82k|            ;
 4363|  9.82k|        }
 4364|      0|        return (res >> 1);
 4365|  9.82k|    }
 4366|  9.82k|}
 4367|       |void bi_windup(void)
 4368|     37|{
 4369|     37|    unsigned int tmp;
 4370|     37|    unsigned int tmp___0;
 4371|     37|    unsigned int tmp___1;
 4372|     37|    unsigned int tmp___2;
 4373|     37|    unsigned int tmp___3;
 4374|       |
 4375|     37|    {
 4376|     37|        if (bi_valid > 8) {
 4377|      3|            if (outcnt < 16382U) {
 4378|      3|                tmp = outcnt;
 4379|      3|                outcnt++;
 4380|      3|                outbuf[tmp] = (uch)((int)bi_buf & 255);
 4381|      3|                tmp___0 = outcnt;
 4382|      3|                outcnt++;
 4383|      3|                outbuf[tmp___0] = (uch)((int)bi_buf >> 8);
 4384|      3|            }
 4385|      0|            else {
 4386|      0|                tmp___1 = outcnt;
 4387|      0|                outcnt++;
 4388|      0|                outbuf[tmp___1] = (uch)((int)bi_buf & 255);
 4389|      0|                if (outcnt == 16384U) {
 4390|      0|                    {
 4391|      0|                        flush_outbuf();
 4392|      0|                    }
 4393|      0|                }
 4394|      0|                tmp___2 = outcnt;
 4395|      0|                outcnt++;
 4396|      0|                outbuf[tmp___2] = (uch)((int)bi_buf >> 8);
 4397|      0|                if (outcnt == 16384U) {
 4398|      0|                    {
 4399|      0|                        flush_outbuf();
 4400|      0|                    }
 4401|      0|                }
 4402|      0|            }
 4403|      3|        }
 4404|     34|        else {
 4405|     34|            if (bi_valid > 0) {
 4406|     33|                tmp___3 = outcnt;
 4407|     33|                outcnt++;
 4408|     33|                outbuf[tmp___3] = (uch)bi_buf;
 4409|     33|                if (outcnt == 16384U) {
 4410|      0|                    {
 4411|      0|                        flush_outbuf();
 4412|      0|                    }
 4413|      0|                }
 4414|     33|            }
 4415|     34|        }
 4416|     37|        bi_buf = (unsigned short)0;
 4417|     37|        bi_valid = 0;
 4418|     37|        return;
 4419|     37|    }
 4420|     37|}
 4421|       |void copy_block(char *buf, unsigned int len, int header)
 4422|     32|{
 4423|     32|    unsigned int tmp;
 4424|     32|    unsigned int tmp___0;
 4425|     32|    unsigned int tmp___1;
 4426|     32|    unsigned int tmp___2;
 4427|     32|    unsigned int tmp___3;
 4428|     32|    unsigned int tmp___4;
 4429|     32|    unsigned int tmp___5;
 4430|     32|    unsigned int tmp___6;
 4431|     32|    unsigned int tmp___7;
 4432|     32|    char *tmp___8;
 4433|     32|    unsigned int tmp___9;
 4434|       |
 4435|     32|    {
 4436|     32|        {
 4437|     32|            bi_windup();
 4438|     32|        }
 4439|     32|        if (header) {
 4440|     32|            if (outcnt < 16382U) {
 4441|     32|                tmp = outcnt;
 4442|     32|                outcnt++;
 4443|     32|                outbuf[tmp] = (uch)((int)((ush)len) & 255);
 4444|     32|                tmp___0 = outcnt;
 4445|     32|                outcnt++;
 4446|     32|                outbuf[tmp___0] = (uch)((int)((ush)len) >> 8);
 4447|     32|            }
 4448|      0|            else {
 4449|      0|                tmp___1 = outcnt;
 4450|      0|                outcnt++;
 4451|      0|                outbuf[tmp___1] = (uch)((int)((ush)len) & 255);
 4452|      0|                if (outcnt == 16384U) {
 4453|      0|                    {
 4454|      0|                        flush_outbuf();
 4455|      0|                    }
 4456|      0|                }
 4457|      0|                tmp___2 = outcnt;
 4458|      0|                outcnt++;
 4459|      0|                outbuf[tmp___2] = (uch)((int)((ush)len) >> 8);
 4460|      0|                if (outcnt == 16384U) {
 4461|      0|                    {
 4462|      0|                        flush_outbuf();
 4463|      0|                    }
 4464|      0|                }
 4465|      0|            }
 4466|     32|            if (outcnt < 16382U) {
 4467|     32|                tmp___3 = outcnt;
 4468|     32|                outcnt++;
 4469|     32|                outbuf[tmp___3] = (uch)((int)((ush)(~len)) & 255);
 4470|     32|                tmp___4 = outcnt;
 4471|     32|                outcnt++;
 4472|     32|                outbuf[tmp___4] = (uch)((int)((ush)(~len)) >> 8);
 4473|     32|            }
 4474|      0|            else {
 4475|      0|                tmp___5 = outcnt;
 4476|      0|                outcnt++;
 4477|      0|                outbuf[tmp___5] = (uch)((int)((ush)(~len)) & 255);
 4478|      0|                if (outcnt == 16384U) {
 4479|      0|                    {
 4480|      0|                        flush_outbuf();
 4481|      0|                    }
 4482|      0|                }
 4483|      0|                tmp___6 = outcnt;
 4484|      0|                outcnt++;
 4485|      0|                outbuf[tmp___6] = (uch)((int)((ush)(~len)) >> 8);
 4486|      0|                if (outcnt == 16384U) {
 4487|      0|                    {
 4488|      0|                        flush_outbuf();
 4489|      0|                    }
 4490|      0|                }
 4491|      0|            }
 4492|     32|        }
 4493|     32|        {
 4494|  1.04M|            while (1) {
 4495|  1.04M|while_continue: /* CIL Label */
 4496|  1.04M|                ;
 4497|  1.04M|                tmp___9 = len;
 4498|  1.04M|                len--;
 4499|  1.04M|                if (!tmp___9) {
 4500|     32|                    goto while_break;
 4501|     32|                }
 4502|  1.04M|                tmp___7 = outcnt;
 4503|  1.04M|                outcnt++;
 4504|  1.04M|                tmp___8 = buf;
 4505|  1.04M|                buf++;
 4506|  1.04M|                outbuf[tmp___7] = (uch)*tmp___8;
 4507|  1.04M|                if (outcnt == 16384U) {
 4508|     64|                    {
 4509|     64|                        flush_outbuf();
 4510|     64|                    }
 4511|     64|                }
 4512|  1.04M|            }
 4513|     32|while_break: /* CIL Label */
 4514|     32|            ;
 4515|     32|        }
 4516|      0|        return;
 4517|     32|    }
 4518|     32|}
 4519|       |int level;
 4520|       |void ct_init(ush *attr, int *methodp);
 4521|       |int ct_tally(int dist, int lc);
 4522|       |ulg flush_block(char *buf, ulg stored_len, int eof);
 4523|       |static int extra_lbits[29] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2,
 4524|       |                              2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0
 4525|       |                             };
 4526|       |static int extra_dbits[30] = {0, 0, 0,  0,  1,  1,  2,  2,  3,  3,
 4527|       |                              4, 4, 5,  5,  6,  6,  7,  7,  8,  8,
 4528|       |                              9, 9, 10, 10, 11, 11, 12, 12, 13, 13
 4529|       |                             };
 4530|       |static int extra_blbits[19] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 4531|       |                               0, 0, 0, 0, 0, 0, 2, 3, 7
 4532|       |                              };
 4533|       |static ct_data dyn_ltree[573];
 4534|       |static ct_data dyn_dtree[61];
 4535|       |static ct_data static_ltree[288];
 4536|       |static ct_data static_dtree[30];
 4537|       |static ct_data bl_tree[39];
 4538|       |static tree_desc l_desc = {dyn_ltree, static_ltree, extra_lbits, 257, 286, 15,
 4539|       |                           0
 4540|       |                          };
 4541|       |static tree_desc d_desc = {dyn_dtree, static_dtree, extra_dbits, 0, 30, 15, 0};
 4542|       |static tree_desc bl_desc = {bl_tree, (ct_data *)0, extra_blbits, 0, 19, 7, 0};
 4543|       |static ush bl_count[16];
 4544|       |static uch bl_order[19] = {(uch)16, (uch)17, (uch)18, (uch)0,  (uch)8,
 4545|       |                           (uch)7,  (uch)9,  (uch)6,  (uch)10, (uch)5,
 4546|       |                           (uch)11, (uch)4,  (uch)12, (uch)3,  (uch)13,
 4547|       |                           (uch)2,  (uch)14, (uch)1,  (uch)15
 4548|       |                          };
 4549|       |static int heap[573];
 4550|       |static int heap_len;
 4551|       |static int heap_max;
 4552|       |static uch depth[573];
 4553|       |static uch length_code[256];
 4554|       |static uch dist_code[512];
 4555|       |static int base_length[29];
 4556|       |static int base_dist[30];
 4557|       |static uch flag_buf[4096];
 4558|       |static unsigned int last_lit;
 4559|       |static unsigned int last_dist;
 4560|       |static unsigned int last_flags;
 4561|       |static uch flags;
 4562|       |static uch flag_bit;
 4563|       |static ulg opt_len;
 4564|       |static ulg static_len;
 4565|       |static ulg compressed_len;
 4566|       |static ulg input_len;
 4567|       |ush *file_type;
 4568|       |int *file_method;
 4569|       |long block_start;
 4570|       |unsigned int strstart;
 4571|       |static void init_block(void);
 4572|       |static void pqdownheap(ct_data *tree, int k);
 4573|       |static void gen_bitlen(tree_desc *desc);
 4574|       |static void gen_codes(ct_data *tree, int max_code);
 4575|       |static void build_tree___0(tree_desc *desc);
 4576|       |static void scan_tree(ct_data *tree, int max_code);
 4577|       |static void send_tree(ct_data *tree, int max_code);
 4578|       |static int build_bl_tree(void);
 4579|       |static void send_all_trees(int lcodes, int dcodes, int blcodes);
 4580|       |static void compress_block(ct_data *ltree, ct_data *dtree);
 4581|       |static void set_file_type(void);
 4582|       |void ct_init(ush *attr, int *methodp)
 4583|      5|{
 4584|      5|    int n;
 4585|      5|    int bits;
 4586|      5|    int length;
 4587|      5|    int code;
 4588|      5|    int dist;
 4589|      5|    int tmp;
 4590|      5|    int tmp___0;
 4591|      5|    int tmp___1;
 4592|      5|    int tmp___2;
 4593|      5|    int tmp___3;
 4594|      5|    int tmp___4;
 4595|      5|    int tmp___5;
 4596|       |
 4597|      5|    {
 4598|      5|        file_type = attr;
 4599|      5|        file_method = methodp;
 4600|      5|        input_len = (ulg)0L;
 4601|      5|        compressed_len = input_len;
 4602|      5|        if ((int)static_dtree[0].dl.len != 0) {
 4603|      2|            return;
 4604|      2|        }
 4605|      3|        length = 0;
 4606|      3|        code = 0;
 4607|      3|        {
 4608|     87|            while (1) {
 4609|     87|while_continue: /* CIL Label */
 4610|     87|                ;
 4611|     87|                if (!(code < 28)) {
 4612|      3|                    goto while_break;
 4613|      3|                }
 4614|     84|                base_length[code] = length;
 4615|     84|                n = 0;
 4616|     84|                {
 4617|    852|                    while (1) {
 4618|    852|while_continue___0: /* CIL Label */
 4619|    852|                        ;
 4620|    852|                        if (!(n < 1 << extra_lbits[code])) {
 4621|     84|                            goto while_break___0;
 4622|     84|                        }
 4623|    768|                        tmp = length;
 4624|    768|                        length++;
 4625|    768|                        length_code[tmp] = (uch)code;
 4626|    768|                        n++;
 4627|    768|                    }
 4628|     84|while_break___0: /* CIL Label */
 4629|     84|                    ;
 4630|     84|                }
 4631|      0|                code++;
 4632|     84|            }
 4633|      3|while_break: /* CIL Label */
 4634|      3|            ;
 4635|      3|        }
 4636|      0|        length_code[length - 1] = (uch)code;
 4637|      3|        dist = 0;
 4638|      3|        code = 0;
 4639|      3|        {
 4640|     51|            while (1) {
 4641|     51|while_continue___1: /* CIL Label */
 4642|     51|                ;
 4643|     51|                if (!(code < 16)) {
 4644|      3|                    goto while_break___1;
 4645|      3|                }
 4646|     48|                base_dist[code] = dist;
 4647|     48|                n = 0;
 4648|     48|                {
 4649|    816|                    while (1) {
 4650|    816|while_continue___2: /* CIL Label */
 4651|    816|                        ;
 4652|    816|                        if (!(n < 1 << extra_dbits[code])) {
 4653|     48|                            goto while_break___2;
 4654|     48|                        }
 4655|    768|                        tmp___0 = dist;
 4656|    768|                        dist++;
 4657|    768|                        dist_code[tmp___0] = (uch)code;
 4658|    768|                        n++;
 4659|    768|                    }
 4660|     48|while_break___2: /* CIL Label */
 4661|     48|                    ;
 4662|     48|                }
 4663|      0|                code++;
 4664|     48|            }
 4665|      3|while_break___1: /* CIL Label */
 4666|      3|            ;
 4667|      3|        }
 4668|      0|        dist >>= 7;
 4669|      3|        {
 4670|     45|            while (1) {
 4671|     45|while_continue___3: /* CIL Label */
 4672|     45|                ;
 4673|     45|                if (!(code < 30)) {
 4674|      3|                    goto while_break___3;
 4675|      3|                }
 4676|     42|                base_dist[code] = dist << 7;
 4677|     42|                n = 0;
 4678|     42|                {
 4679|    804|                    while (1) {
 4680|    804|while_continue___4: /* CIL Label */
 4681|    804|                        ;
 4682|    804|                        if (!(n < 1 << (extra_dbits[code] - 7))) {
 4683|     42|                            goto while_break___4;
 4684|     42|                        }
 4685|    762|                        tmp___1 = dist;
 4686|    762|                        dist++;
 4687|    762|                        dist_code[256 + tmp___1] = (uch)code;
 4688|    762|                        n++;
 4689|    762|                    }
 4690|     42|while_break___4: /* CIL Label */
 4691|     42|                    ;
 4692|     42|                }
 4693|      0|                code++;
 4694|     42|            }
 4695|      3|while_break___3: /* CIL Label */
 4696|      3|            ;
 4697|      3|        }
 4698|      0|        bits = 0;
 4699|      3|        {
 4700|     51|            while (1) {
 4701|     51|while_continue___5: /* CIL Label */
 4702|     51|                ;
 4703|     51|                if (!(bits <= 15)) {
 4704|      3|                    goto while_break___5;
 4705|      3|                }
 4706|     48|                bl_count[bits] = (ush)0;
 4707|     48|                bits++;
 4708|     48|            }
 4709|      3|while_break___5: /* CIL Label */
 4710|      3|            ;
 4711|      3|        }
 4712|      0|        n = 0;
 4713|      3|        {
 4714|    435|            while (1) {
 4715|    435|while_continue___6: /* CIL Label */
 4716|    435|                ;
 4717|    435|                if (!(n <= 143)) {
 4718|      3|                    goto while_break___6;
 4719|      3|                }
 4720|    432|                tmp___2 = n;
 4721|    432|                n++;
 4722|    432|                static_ltree[tmp___2].dl.len = (ush)8;
 4723|    432|                bl_count[8] = (ush)((int)bl_count[8] + 1);
 4724|    432|            }
 4725|      3|while_break___6: /* CIL Label */
 4726|      3|            ;
 4727|      3|        }
 4728|      0|        {
 4729|    339|            while (1) {
 4730|    339|while_continue___7: /* CIL Label */
 4731|    339|                ;
 4732|    339|                if (!(n <= 255)) {
 4733|      3|                    goto while_break___7;
 4734|      3|                }
 4735|    336|                tmp___3 = n;
 4736|    336|                n++;
 4737|    336|                static_ltree[tmp___3].dl.len = (ush)9;
 4738|    336|                bl_count[9] = (ush)((int)bl_count[9] + 1);
 4739|    336|            }
 4740|      3|while_break___7: /* CIL Label */
 4741|      3|            ;
 4742|      3|        }
 4743|      0|        {
 4744|     75|            while (1) {
 4745|     75|while_continue___8: /* CIL Label */
 4746|     75|                ;
 4747|     75|                if (!(n <= 279)) {
 4748|      3|                    goto while_break___8;
 4749|      3|                }
 4750|     72|                tmp___4 = n;
 4751|     72|                n++;
 4752|     72|                static_ltree[tmp___4].dl.len = (ush)7;
 4753|     72|                bl_count[7] = (ush)((int)bl_count[7] + 1);
 4754|     72|            }
 4755|      3|while_break___8: /* CIL Label */
 4756|      3|            ;
 4757|      3|        }
 4758|      0|        {
 4759|     27|            while (1) {
 4760|     27|while_continue___9: /* CIL Label */
 4761|     27|                ;
 4762|     27|                if (!(n <= 287)) {
 4763|      3|                    goto while_break___9;
 4764|      3|                }
 4765|     24|                tmp___5 = n;
 4766|     24|                n++;
 4767|     24|                static_ltree[tmp___5].dl.len = (ush)8;
 4768|     24|                bl_count[8] = (ush)((int)bl_count[8] + 1);
 4769|     24|            }
 4770|      3|while_break___9: /* CIL Label */
 4771|      3|            ;
 4772|      3|        }
 4773|      0|        {
 4774|      3|            gen_codes(static_ltree, 287);
 4775|      3|            n = 0;
 4776|      3|        }
 4777|      3|        {
 4778|     93|            while (1) {
 4779|     93|while_continue___10: /* CIL Label */
 4780|     93|                ;
 4781|     93|                if (!(n < 30)) {
 4782|      3|                    goto while_break___10;
 4783|      3|                }
 4784|     90|                {
 4785|     90|                    static_dtree[n].dl.len = (ush)5;
 4786|     90|                    static_dtree[n].fc.code = (ush)bi_reverse((unsigned int)n, 5);
 4787|     90|                    n++;
 4788|     90|                }
 4789|     90|            }
 4790|      3|while_break___10: /* CIL Label */
 4791|      3|            ;
 4792|      3|        }
 4793|      0|        {
 4794|      3|            init_block();
 4795|      3|        }
 4796|      3|        return;
 4797|      3|    }
 4798|      3|}
 4799|       |static void init_block(void)
 4800|     39|{
 4801|     39|    int n;
 4802|       |
 4803|     39|    {
 4804|     39|        n = 0;
 4805|     39|        {
 4806|  11.1k|            while (1) {
 4807|  11.1k|while_continue: /* CIL Label */
 4808|  11.1k|                ;
 4809|  11.1k|                if (!(n < 286)) {
 4810|     39|                    goto while_break;
 4811|     39|                }
 4812|  11.1k|                dyn_ltree[n].fc.freq = (ush)0;
 4813|  11.1k|                n++;
 4814|  11.1k|            }
 4815|     39|while_break: /* CIL Label */
 4816|     39|            ;
 4817|     39|        }
 4818|      0|        n = 0;
 4819|     39|        {
 4820|  1.20k|            while (1) {
 4821|  1.20k|while_continue___0: /* CIL Label */
 4822|  1.20k|                ;
 4823|  1.20k|                if (!(n < 30)) {
 4824|     39|                    goto while_break___0;
 4825|     39|                }
 4826|  1.17k|                dyn_dtree[n].fc.freq = (ush)0;
 4827|  1.17k|                n++;
 4828|  1.17k|            }
 4829|     39|while_break___0: /* CIL Label */
 4830|     39|            ;
 4831|     39|        }
 4832|      0|        n = 0;
 4833|     39|        {
 4834|    780|            while (1) {
 4835|    780|while_continue___1: /* CIL Label */
 4836|    780|                ;
 4837|    780|                if (!(n < 19)) {
 4838|     39|                    goto while_break___1;
 4839|     39|                }
 4840|    741|                bl_tree[n].fc.freq = (ush)0;
 4841|    741|                n++;
 4842|    741|            }
 4843|     39|while_break___1: /* CIL Label */
 4844|     39|            ;
 4845|     39|        }
 4846|      0|        dyn_ltree[256].fc.freq = (ush)1;
 4847|     39|        static_len = (ulg)0L;
 4848|     39|        opt_len = static_len;
 4849|     39|        last_flags = 0U;
 4850|     39|        last_dist = last_flags;
 4851|     39|        last_lit = last_dist;
 4852|     39|        flags = (uch)0;
 4853|     39|        flag_bit = (uch)1;
 4854|     39|        return;
 4855|     39|    }
 4856|     39|}
 4857|       |static void pqdownheap(ct_data *tree, int k)
 4858|  21.9k|{
 4859|  21.9k|    int v;
 4860|  21.9k|    int j___0;
 4861|       |
 4862|  21.9k|    {
 4863|  21.9k|        v = heap[k];
 4864|  21.9k|        j___0 = k << 1;
 4865|  21.9k|        {
 4866|   119k|            while (1) {
 4867|   119k|while_continue: /* CIL Label */
 4868|   119k|                ;
 4869|   119k|                if (!(j___0 <= heap_len)) {
 4870|  17.7k|                    goto while_break;
 4871|  17.7k|                }
 4872|   101k|                if (j___0 < heap_len) {
 4873|   100k|                    if ((int)(tree + heap[j___0 + 1])->fc.freq <
 4874|   100k|                            (int)(tree + heap[j___0])->fc.freq) {
 4875|  33.1k|                        j___0++;
 4876|  33.1k|                    }
 4877|  67.3k|                    else {
 4878|  67.3k|                        if ((int)(tree + heap[j___0 + 1])->fc.freq ==
 4879|  67.3k|                                (int)(tree + heap[j___0])->fc.freq) {
 4880|  14.6k|                            if ((int)depth[heap[j___0 + 1]] <= (int)depth[heap[j___0]]) {
 4881|  14.5k|                                j___0++;
 4882|  14.5k|                            }
 4883|  14.6k|                        }
 4884|  67.3k|                    }
 4885|   100k|                }
 4886|   101k|                if ((int)(tree + v)->fc.freq < (int)(tree + heap[j___0])->fc.freq) {
 4887|  3.68k|                    goto while_break;
 4888|  3.68k|                }
 4889|  97.9k|                else {
 4890|  97.9k|                    if ((int)(tree + v)->fc.freq == (int)(tree + heap[j___0])->fc.freq) {
 4891|    646|                        if ((int)depth[v] <= (int)depth[heap[j___0]]) {
 4892|    516|                            goto while_break;
 4893|    516|                        }
 4894|    646|                    }
 4895|  97.9k|                }
 4896|  97.4k|                heap[k] = heap[j___0];
 4897|  97.4k|                k = j___0;
 4898|  97.4k|                j___0 <<= 1;
 4899|  97.4k|            }
 4900|  21.9k|while_break: /* CIL Label */
 4901|  21.9k|            ;
 4902|  21.9k|        }
 4903|      0|        heap[k] = v;
 4904|  21.9k|        return;
 4905|  21.9k|    }
 4906|  21.9k|}
 4907|       |static void gen_bitlen(tree_desc *desc)
 4908|    108|{
 4909|    108|    ct_data *tree;
 4910|    108|    int *extra;
 4911|    108|    int base;
 4912|    108|    int max_code;
 4913|    108|    int max_length;
 4914|    108|    ct_data *stree;
 4915|    108|    int h;
 4916|    108|    int n;
 4917|    108|    int m;
 4918|    108|    int bits;
 4919|    108|    int xbits;
 4920|    108|    ush f;
 4921|    108|    int overflow;
 4922|       |
 4923|    108|    {
 4924|    108|        tree = desc->dyn_tree;
 4925|    108|        extra = desc->extra_bits;
 4926|    108|        base = desc->extra_base;
 4927|    108|        max_code = desc->max_code;
 4928|    108|        max_length = desc->max_length;
 4929|    108|        stree = desc->static_tree;
 4930|    108|        overflow = 0;
 4931|    108|        bits = 0;
 4932|    108|        {
 4933|  1.83k|            while (1) {
 4934|  1.83k|while_continue: /* CIL Label */
 4935|  1.83k|                ;
 4936|  1.83k|                if (!(bits <= 15)) {
 4937|    108|                    goto while_break;
 4938|    108|                }
 4939|  1.72k|                bl_count[bits] = (ush)0;
 4940|  1.72k|                bits++;
 4941|  1.72k|            }
 4942|    108|while_break: /* CIL Label */
 4943|    108|            ;
 4944|    108|        }
 4945|      0|        (tree + heap[heap_max])->dl.len = (ush)0;
 4946|    108|        h = heap_max + 1;
 4947|    108|        {
 4948|  17.6k|            while (1) {
 4949|  17.6k|while_continue___0: /* CIL Label */
 4950|  17.6k|                ;
 4951|  17.6k|                if (!(h < 573)) {
 4952|    108|                    goto while_break___0;
 4953|    108|                }
 4954|  17.5k|                n = heap[h];
 4955|  17.5k|                bits = (int)(tree + (int)(tree + n)->dl.dad)->dl.len + 1;
 4956|  17.5k|                if (bits > max_length) {
 4957|      0|                    bits = max_length;
 4958|      0|                    overflow++;
 4959|      0|                }
 4960|  17.5k|                (tree + n)->dl.len = (ush)bits;
 4961|  17.5k|                if (n > max_code) {
 4962|  8.65k|                    goto __Cont;
 4963|  8.65k|                }
 4964|  8.87k|                bl_count[bits] = (ush)((int)bl_count[bits] + 1);
 4965|  8.87k|                xbits = 0;
 4966|  8.87k|                if (n >= base) {
 4967|    538|                    xbits = *(extra + (n - base));
 4968|    538|                }
 4969|  8.87k|                f = (tree + n)->fc.freq;
 4970|  8.87k|                opt_len += (ulg)f * (ulg)(bits + xbits);
 4971|  8.87k|                if (stree) {
 4972|  8.58k|                    static_len += (ulg)f * (ulg)((int)(stree + n)->dl.len + xbits);
 4973|  8.58k|                }
 4974|  17.5k|__Cont:
 4975|  17.5k|                h++;
 4976|  17.5k|            }
 4977|    108|while_break___0: /* CIL Label */
 4978|    108|            ;
 4979|    108|        }
 4980|    108|        if (overflow == 0) {
 4981|    108|            return;
 4982|    108|        }
 4983|      0|        {
 4984|      0|            while (1) {
 4985|      0|while_continue___1: /* CIL Label */
 4986|      0|                ;
 4987|      0|                bits = max_length - 1;
 4988|      0|                {
 4989|      0|                    while (1) {
 4990|      0|while_continue___2: /* CIL Label */
 4991|      0|                        ;
 4992|      0|                        if (!((int)bl_count[bits] == 0)) {
 4993|      0|                            goto while_break___2;
 4994|      0|                        }
 4995|      0|                        bits--;
 4996|      0|                    }
 4997|      0|while_break___2: /* CIL Label */
 4998|      0|                    ;
 4999|      0|                }
 5000|      0|                bl_count[bits] = (ush)((int)bl_count[bits] - 1);
 5001|      0|                bl_count[bits + 1] = (ush)((int)bl_count[bits + 1] + 2);
 5002|      0|                bl_count[max_length] = (ush)((int)bl_count[max_length] - 1);
 5003|      0|                overflow -= 2;
 5004|      0|                if (!(overflow > 0)) {
 5005|      0|                    goto while_break___1;
 5006|      0|                }
 5007|      0|            }
 5008|      0|while_break___1: /* CIL Label */
 5009|      0|            ;
 5010|      0|        }
 5011|      0|        bits = max_length;
 5012|      0|        {
 5013|      0|            while (1) {
 5014|      0|while_continue___3: /* CIL Label */
 5015|      0|                ;
 5016|      0|                if (!(bits != 0)) {
 5017|      0|                    goto while_break___3;
 5018|      0|                }
 5019|      0|                n = (int)bl_count[bits];
 5020|      0|                {
 5021|      0|                    while (1) {
 5022|      0|while_continue___4: /* CIL Label */
 5023|      0|                        ;
 5024|      0|                        if (!(n != 0)) {
 5025|      0|                            goto while_break___4;
 5026|      0|                        }
 5027|      0|                        h--;
 5028|      0|                        m = heap[h];
 5029|      0|                        if (m > max_code) {
 5030|      0|                            goto while_continue___4;
 5031|      0|                        }
 5032|      0|                        if ((unsigned int)(tree + m)->dl.len != (unsigned int)bits) {
 5033|      0|                            opt_len += (ulg)(((long)bits - (long)(tree + m)->dl.len) *
 5034|      0|                                             (long)(tree + m)->fc.freq);
 5035|      0|                            (tree + m)->dl.len = (ush)bits;
 5036|      0|                        }
 5037|      0|                        n--;
 5038|      0|                    }
 5039|      0|while_break___4: /* CIL Label */
 5040|      0|                    ;
 5041|      0|                }
 5042|      0|                bits--;
 5043|      0|            }
 5044|      0|while_break___3: /* CIL Label */
 5045|      0|            ;
 5046|      0|        }
 5047|      0|        return;
 5048|      0|    }
 5049|      0|}
 5050|       |static void gen_codes(ct_data *tree, int max_code)
 5051|    111|{
 5052|    111|    ush next_code[16];
 5053|    111|    ush code;
 5054|    111|    int bits;
 5055|    111|    int n;
 5056|    111|    int len;
 5057|    111|    ush tmp;
 5058|    111|    void *__cil_tmp10;
 5059|       |
 5060|    111|    {
 5061|    111|        code = (ush)0;
 5062|    111|        bits = 1;
 5063|    111|        {
 5064|  1.77k|            while (1) {
 5065|  1.77k|while_continue: /* CIL Label */
 5066|  1.77k|                ;
 5067|  1.77k|                if (!(bits <= 15)) {
 5068|    111|                    goto while_break;
 5069|    111|                }
 5070|  1.66k|                code = (ush)(((int)code + (int)bl_count[bits - 1]) << 1);
 5071|  1.66k|                next_code[bits] = code;
 5072|  1.66k|                bits++;
 5073|  1.66k|            }
 5074|    111|while_break: /* CIL Label */
 5075|    111|            ;
 5076|    111|        }
 5077|      0|        n = 0;
 5078|    111|        {
 5079|  11.8k|            while (1) {
 5080|  11.8k|while_continue___0: /* CIL Label */
 5081|  11.8k|                ;
 5082|  11.8k|                if (!(n <= max_code)) {
 5083|    111|                    goto while_break___0;
 5084|    111|                }
 5085|  11.6k|                len = (int)(tree + n)->dl.len;
 5086|  11.6k|                if (len == 0) {
 5087|  1.95k|                    goto __Cont;
 5088|  1.95k|                }
 5089|  9.73k|                {
 5090|  9.73k|                    tmp = next_code[len];
 5091|  9.73k|                    next_code[len] = (ush)((int)next_code[len] + 1);
 5092|  9.73k|                    (tree + n)->fc.code = (ush)bi_reverse((unsigned int)tmp, len);
 5093|  9.73k|                }
 5094|  11.6k|__Cont:
 5095|  11.6k|                n++;
 5096|  11.6k|            }
 5097|    111|while_break___0: /* CIL Label */
 5098|    111|            ;
 5099|    111|        }
 5100|      0|        return;
 5101|    111|    }
 5102|    111|}
 5103|       |static void build_tree___0(tree_desc *desc)
 5104|    108|{
 5105|    108|    ct_data *tree;
 5106|    108|    ct_data *stree;
 5107|    108|    int elems;
 5108|    108|    int n;
 5109|    108|    int m;
 5110|    108|    int max_code;
 5111|    108|    int node;
 5112|    108|    int new;
 5113|    108|    int tmp;
 5114|    108|    int tmp___0;
 5115|    108|    int tmp___1;
 5116|    108|    ush tmp___2;
 5117|    108|    int tmp___3;
 5118|       |
 5119|    108|    {
 5120|    108|        tree = desc->dyn_tree;
 5121|    108|        stree = desc->static_tree;
 5122|    108|        elems = desc->elems;
 5123|    108|        max_code = -1;
 5124|    108|        node = elems;
 5125|    108|        heap_len = 0;
 5126|    108|        heap_max = 573;
 5127|    108|        n = 0;
 5128|    108|        {
 5129|  12.1k|            while (1) {
 5130|  12.1k|while_continue: /* CIL Label */
 5131|  12.1k|                ;
 5132|  12.1k|                if (!(n < elems)) {
 5133|    108|                    goto while_break;
 5134|    108|                }
 5135|  12.0k|                if ((int)(tree + n)->fc.freq != 0) {
 5136|  8.86k|                    heap_len++;
 5137|  8.86k|                    max_code = n;
 5138|  8.86k|                    heap[heap_len] = max_code;
 5139|  8.86k|                    depth[n] = (uch)0;
 5140|  8.86k|                }
 5141|  3.19k|                else {
 5142|  3.19k|                    (tree + n)->dl.len = (ush)0;
 5143|  3.19k|                }
 5144|  12.0k|                n++;
 5145|  12.0k|            }
 5146|    108|while_break: /* CIL Label */
 5147|    108|            ;
 5148|    108|        }
 5149|      0|        {
 5150|    116|            while (1) {
 5151|    116|while_continue___0: /* CIL Label */
 5152|    116|                ;
 5153|    116|                if (!(heap_len < 2)) {
 5154|    108|                    goto while_break___0;
 5155|    108|                }
 5156|      8|                heap_len++;
 5157|      8|                if (max_code < 2) {
 5158|      6|                    max_code++;
 5159|      6|                    tmp = max_code;
 5160|      6|                }
 5161|      2|                else {
 5162|      2|                    tmp = 0;
 5163|      2|                }
 5164|      8|                heap[heap_len] = tmp;
 5165|      8|                new = tmp;
 5166|      8|                (tree + new)->fc.freq = (ush)1;
 5167|      8|                depth[new] = (uch)0;
 5168|      8|                opt_len--;
 5169|      8|                if (stree) {
 5170|      8|                    static_len -= (ulg)(stree + new)->dl.len;
 5171|      8|                }
 5172|      8|            }
 5173|    108|while_break___0: /* CIL Label */
 5174|    108|            ;
 5175|    108|        }
 5176|      0|        desc->max_code = max_code;
 5177|    108|        n = heap_len / 2;
 5178|    108|        {
 5179|  4.52k|            while (1) {
 5180|  4.52k|while_continue___1: /* CIL Label */
 5181|  4.52k|                ;
 5182|  4.52k|                if (!(n >= 1)) {
 5183|    108|                    goto while_break___1;
 5184|    108|                }
 5185|  4.41k|                {
 5186|  4.41k|                    pqdownheap(tree, n);
 5187|  4.41k|                    n--;
 5188|  4.41k|                }
 5189|  4.41k|            }
 5190|    108|while_break___1: /* CIL Label */
 5191|    108|            ;
 5192|    108|        }
 5193|      0|        {
 5194|  8.76k|            while (1) {
 5195|  8.76k|while_continue___2: /* CIL Label */
 5196|  8.76k|                ;
 5197|  8.76k|                {
 5198|  8.76k|                    n = heap[1];
 5199|  8.76k|                    tmp___0 = heap_len;
 5200|  8.76k|                    heap_len--;
 5201|  8.76k|                    heap[1] = heap[tmp___0];
 5202|  8.76k|                    pqdownheap(tree, 1);
 5203|  8.76k|                    m = heap[1];
 5204|  8.76k|                    heap_max--;
 5205|  8.76k|                    heap[heap_max] = n;
 5206|  8.76k|                    heap_max--;
 5207|  8.76k|                    heap[heap_max] = m;
 5208|  8.76k|                    (tree + node)->fc.freq =
 5209|  8.76k|                        (ush)((int)(tree + n)->fc.freq + (int)(tree + m)->fc.freq);
 5210|  8.76k|                }
 5211|  8.76k|                if ((int)depth[n] >= (int)depth[m]) {
 5212|  8.56k|                    tmp___1 = (int)depth[n];
 5213|  8.56k|                }
 5214|    206|                else {
 5215|    206|                    tmp___1 = (int)depth[m];
 5216|    206|                }
 5217|  8.76k|                {
 5218|  8.76k|                    depth[node] = (uch)(tmp___1 + 1);
 5219|  8.76k|                    tmp___2 = (ush)node;
 5220|  8.76k|                    (tree + m)->dl.dad = tmp___2;
 5221|  8.76k|                    (tree + n)->dl.dad = tmp___2;
 5222|  8.76k|                    tmp___3 = node;
 5223|  8.76k|                    node++;
 5224|  8.76k|                    heap[1] = tmp___3;
 5225|  8.76k|                    pqdownheap(tree, 1);
 5226|  8.76k|                }
 5227|  8.76k|                if (!(heap_len >= 2)) {
 5228|    108|                    goto while_break___2;
 5229|    108|                }
 5230|  8.76k|            }
 5231|    108|while_break___2: /* CIL Label */
 5232|    108|            ;
 5233|    108|        }
 5234|      0|        {
 5235|    108|            heap_max--;
 5236|    108|            heap[heap_max] = heap[1];
 5237|    108|            gen_bitlen(desc);
 5238|    108|            gen_codes(tree, max_code);
 5239|    108|        }
 5240|    108|        return;
 5241|    108|    }
 5242|    108|}
 5243|       |static void scan_tree(ct_data *tree, int max_code)
 5244|     72|{
 5245|     72|    int n;
 5246|     72|    int prevlen;
 5247|     72|    int curlen;
 5248|     72|    int nextlen;
 5249|     72|    int count;
 5250|     72|    int max_count;
 5251|     72|    int min_count;
 5252|       |
 5253|     72|    {
 5254|     72|        prevlen = -1;
 5255|     72|        nextlen = (int)(tree + 0)->dl.len;
 5256|     72|        count = 0;
 5257|     72|        max_count = 7;
 5258|     72|        min_count = 4;
 5259|     72|        if (nextlen == 0) {
 5260|     34|            max_count = 138;
 5261|     34|            min_count = 3;
 5262|     34|        }
 5263|     72|        (tree + (max_code + 1))->dl.len = (ush)65535;
 5264|     72|        n = 0;
 5265|     72|        {
 5266|  10.2k|            while (1) {
 5267|  10.2k|while_continue: /* CIL Label */
 5268|  10.2k|                ;
 5269|  10.2k|                if (!(n <= max_code)) {
 5270|     72|                    goto while_break;
 5271|     72|                }
 5272|  10.1k|                curlen = nextlen;
 5273|  10.1k|                nextlen = (int)(tree + (n + 1))->dl.len;
 5274|  10.1k|                count++;
 5275|  10.1k|                if (count < max_count) {
 5276|  8.82k|                    if (curlen == nextlen) {
 5277|  8.34k|                        goto __Cont;
 5278|  8.34k|                    }
 5279|    482|                    else {
 5280|    482|                        goto _L;
 5281|    482|                    }
 5282|  8.82k|                }
 5283|  1.32k|                else {
 5284|  1.80k|_L:
 5285|  1.80k|                    if (count < min_count) {
 5286|    368|                        bl_tree[curlen].fc.freq =
 5287|    368|                            (ush)((int)bl_tree[curlen].fc.freq + count);
 5288|    368|                    }
 5289|  1.43k|                    else {
 5290|  1.43k|                        if (curlen != 0) {
 5291|  1.36k|                            if (curlen != prevlen) {
 5292|     67|                                bl_tree[curlen].fc.freq =
 5293|     67|                                    (ush)((int)bl_tree[curlen].fc.freq + 1);
 5294|     67|                            }
 5295|  1.36k|                            bl_tree[16].fc.freq = (ush)((int)bl_tree[16].fc.freq + 1);
 5296|  1.36k|                        }
 5297|     66|                        else {
 5298|     66|                            if (count <= 10) {
 5299|     25|                                bl_tree[17].fc.freq = (ush)((int)bl_tree[17].fc.freq + 1);
 5300|     25|                            }
 5301|     41|                            else {
 5302|     41|                                bl_tree[18].fc.freq = (ush)((int)bl_tree[18].fc.freq + 1);
 5303|     41|                            }
 5304|     66|                        }
 5305|  1.43k|                    }
 5306|  1.80k|                }
 5307|  1.80k|                count = 0;
 5308|  1.80k|                prevlen = curlen;
 5309|  1.80k|                if (nextlen == 0) {
 5310|     75|                    max_count = 138;
 5311|     75|                    min_count = 3;
 5312|     75|                }
 5313|  1.72k|                else {
 5314|  1.72k|                    if (curlen == nextlen) {
 5315|  1.31k|                        max_count = 6;
 5316|  1.31k|                        min_count = 3;
 5317|  1.31k|                    }
 5318|    415|                    else {
 5319|    415|                        max_count = 7;
 5320|    415|                        min_count = 4;
 5321|    415|                    }
 5322|  1.72k|                }
 5323|  10.1k|__Cont:
 5324|  10.1k|                n++;
 5325|  10.1k|            }
 5326|     72|while_break: /* CIL Label */
 5327|     72|            ;
 5328|     72|        }
 5329|      0|        return;
 5330|     72|    }
 5331|     72|}
 5332|       |static void send_tree(ct_data *tree, int max_code)
 5333|      2|{
 5334|      2|    int n;
 5335|      2|    int prevlen;
 5336|      2|    int curlen;
 5337|      2|    int nextlen;
 5338|      2|    int count;
 5339|      2|    int max_count;
 5340|      2|    int min_count;
 5341|       |
 5342|      2|    {
 5343|      2|        prevlen = -1;
 5344|      2|        nextlen = (int)(tree + 0)->dl.len;
 5345|      2|        count = 0;
 5346|      2|        max_count = 7;
 5347|      2|        min_count = 4;
 5348|      2|        if (nextlen == 0) {
 5349|      1|            max_count = 138;
 5350|      1|            min_count = 3;
 5351|      1|        }
 5352|      2|        n = 0;
 5353|      2|        {
 5354|    318|            while (1) {
 5355|    318|while_continue: /* CIL Label */
 5356|    318|                ;
 5357|    318|                if (!(n <= max_code)) {
 5358|      2|                    goto while_break;
 5359|      2|                }
 5360|    316|                curlen = nextlen;
 5361|    316|                nextlen = (int)(tree + (n + 1))->dl.len;
 5362|    316|                count++;
 5363|    316|                if (count < max_count) {
 5364|    315|                    if (curlen == nextlen) {
 5365|    207|                        goto __Cont;
 5366|    207|                    }
 5367|    108|                    else {
 5368|    108|                        goto _L;
 5369|    108|                    }
 5370|    315|                }
 5371|      1|                else {
 5372|    109|_L:
 5373|    109|                    if (count < min_count) {
 5374|    100|                        {
 5375|    126|                            while (1) {
 5376|    126|while_continue___0: /* CIL Label */
 5377|    126|                                ;
 5378|    126|                                {
 5379|    126|                                    send_bits((int)bl_tree[curlen].fc.code,
 5380|    126|                                              (int)bl_tree[curlen].dl.len);
 5381|    126|                                    count--;
 5382|    126|                                }
 5383|    126|                                if (!(count != 0)) {
 5384|    100|                                    goto while_break___0;
 5385|    100|                                }
 5386|    126|                            }
 5387|    100|while_break___0: /* CIL Label */
 5388|    100|                            ;
 5389|    100|                        }
 5390|    100|                    }
 5391|      9|                    else {
 5392|      9|                        if (curlen != 0) {
 5393|      6|                            if (curlen != prevlen) {
 5394|      6|                                {
 5395|      6|                                    send_bits((int)bl_tree[curlen].fc.code,
 5396|      6|                                              (int)bl_tree[curlen].dl.len);
 5397|      6|                                    count--;
 5398|      6|                                }
 5399|      6|                            }
 5400|      6|                            {
 5401|      6|                                send_bits((int)bl_tree[16].fc.code, (int)bl_tree[16].dl.len);
 5402|      6|                                send_bits(count - 3, 2);
 5403|      6|                            }
 5404|      6|                        }
 5405|      3|                        else {
 5406|      3|                            if (count <= 10) {
 5407|      1|                                {
 5408|      1|                                    send_bits((int)bl_tree[17].fc.code, (int)bl_tree[17].dl.len);
 5409|      1|                                    send_bits(count - 3, 3);
 5410|      1|                                }
 5411|      1|                            }
 5412|      2|                            else {
 5413|      2|                                {
 5414|      2|                                    send_bits((int)bl_tree[18].fc.code, (int)bl_tree[18].dl.len);
 5415|      2|                                    send_bits(count - 11, 7);
 5416|      2|                                }
 5417|      2|                            }
 5418|      3|                        }
 5419|      9|                    }
 5420|    109|                }
 5421|    109|                count = 0;
 5422|    109|                prevlen = curlen;
 5423|    109|                if (nextlen == 0) {
 5424|      8|                    max_count = 138;
 5425|      8|                    min_count = 3;
 5426|      8|                }
 5427|    101|                else {
 5428|    101|                    if (curlen == nextlen) {
 5429|      0|                        max_count = 6;
 5430|      0|                        min_count = 3;
 5431|      0|                    }
 5432|    101|                    else {
 5433|    101|                        max_count = 7;
 5434|    101|                        min_count = 4;
 5435|    101|                    }
 5436|    101|                }
 5437|    316|__Cont:
 5438|    316|                n++;
 5439|    316|            }
 5440|      2|while_break: /* CIL Label */
 5441|      2|            ;
 5442|      2|        }
 5443|      0|        return;
 5444|      2|    }
 5445|      2|}
 5446|       |static int build_bl_tree(void)
 5447|     36|{
 5448|     36|    int max_blindex;
 5449|       |
 5450|     36|    {
 5451|     36|        {
 5452|     36|            scan_tree(dyn_ltree, l_desc.max_code);
 5453|     36|            scan_tree(dyn_dtree, d_desc.max_code);
 5454|     36|            build_tree___0(&bl_desc);
 5455|     36|            max_blindex = 18;
 5456|     36|        }
 5457|     36|        {
 5458|    115|            while (1) {
 5459|    115|while_continue: /* CIL Label */
 5460|    115|                ;
 5461|    115|                if (!(max_blindex >= 3)) {
 5462|      0|                    goto while_break;
 5463|      0|                }
 5464|    115|                if ((int)bl_tree[bl_order[max_blindex]].dl.len != 0) {
 5465|     36|                    goto while_break;
 5466|     36|                }
 5467|     79|                max_blindex--;
 5468|     79|            }
 5469|     36|while_break: /* CIL Label */
 5470|     36|            ;
 5471|     36|        }
 5472|      0|        opt_len += (ulg)(((3 * (max_blindex + 1) + 5) + 5) + 4);
 5473|     36|        return (max_blindex);
 5474|     36|    }
 5475|     36|}
 5476|       |static void send_all_trees(int lcodes, int dcodes, int blcodes)
 5477|      1|{
 5478|      1|    int rank;
 5479|       |
 5480|      1|    {
 5481|      1|        {
 5482|      1|            send_bits(lcodes - 257, 5);
 5483|      1|            send_bits(dcodes - 1, 5);
 5484|      1|            send_bits(blcodes - 4, 4);
 5485|      1|            rank = 0;
 5486|      1|        }
 5487|      1|        {
 5488|     18|            while (1) {
 5489|     18|while_continue: /* CIL Label */
 5490|     18|                ;
 5491|     18|                if (!(rank < blcodes)) {
 5492|      1|                    goto while_break;
 5493|      1|                }
 5494|     17|                {
 5495|     17|                    send_bits((int)bl_tree[bl_order[rank]].dl.len, 3);
 5496|     17|                    rank++;
 5497|     17|                }
 5498|     17|            }
 5499|      1|while_break: /* CIL Label */
 5500|      1|            ;
 5501|      1|        }
 5502|      0|        {
 5503|      1|            send_tree(dyn_ltree, lcodes - 1);
 5504|      1|            send_tree(dyn_dtree, dcodes - 1);
 5505|      1|        }
 5506|      1|        return;
 5507|      1|    }
 5508|      1|}
 5509|       |ulg flush_block(char *buf, ulg stored_len, int eof)
 5510|     36|{
 5511|     36|    ulg opt_lenb;
 5512|     36|    ulg static_lenb;
 5513|     36|    int max_blindex;
 5514|       |
 5515|     36|    {
 5516|     36|        flag_buf[last_flags] = flags;
 5517|     36|        if ((int)*file_type == 65535) {
 5518|      0|            {
 5519|      0|                set_file_type();
 5520|      0|            }
 5521|      0|        }
 5522|     36|        {
 5523|     36|            build_tree___0(&l_desc);
 5524|     36|            build_tree___0(&d_desc);
 5525|     36|            max_blindex = build_bl_tree();
 5526|     36|            opt_lenb = ((opt_len + 3UL) + 7UL) >> 3;
 5527|     36|            static_lenb = ((static_len + 3UL) + 7UL) >> 3;
 5528|     36|            input_len += stored_len;
 5529|     36|        }
 5530|     36|        if (static_lenb <= opt_lenb) {
 5531|      3|            opt_lenb = static_lenb;
 5532|      3|        }
 5533|     36|        if (stored_len <= opt_lenb) {
 5534|     35|            if (eof) {
 5535|      4|                if (compressed_len == 0UL) {
 5536|      3|                    goto _L___2;
 5537|      3|                }
 5538|      1|                else {
 5539|      1|                    goto _L___2;
 5540|      1|                }
 5541|      4|            }
 5542|     31|            else {
 5543|     31|                goto _L___2;
 5544|     31|            }
 5545|     35|        }
 5546|      1|        else {
 5547|     36|_L___2:
 5548|     36|            if (stored_len + 4UL <= opt_lenb) {
 5549|     32|                if ((unsigned long)buf != (unsigned long)((char *)0)) {
 5550|     32|                    {
 5551|     32|                        send_bits(eof, 3);
 5552|     32|                        compressed_len =
 5553|     32|                            ((compressed_len + 3UL) + 7UL) & 0xfffffffffffffff8UL;
 5554|     32|                        compressed_len += (stored_len + 4UL) << 3;
 5555|     32|                        copy_block(buf, (unsigned int)stored_len, 1);
 5556|     32|                    }
 5557|     32|                }
 5558|      0|                else {
 5559|      0|                    goto _L;
 5560|      0|                }
 5561|     32|            }
 5562|      4|            else {
 5563|      4|_L:
 5564|      4|                if (static_lenb == opt_lenb) {
 5565|      3|                    {
 5566|      3|                        send_bits((1 << 1) + eof, 3);
 5567|      3|                        compress_block(static_ltree, static_dtree);
 5568|      3|                        compressed_len += 3UL + static_len;
 5569|      3|                    }
 5570|      3|                }
 5571|      1|                else {
 5572|      1|                    {
 5573|      1|                        send_bits((2 << 1) + eof, 3);
 5574|      1|                        send_all_trees(l_desc.max_code + 1, d_desc.max_code + 1,
 5575|      1|                                       max_blindex + 1);
 5576|      1|                        compress_block(dyn_ltree, dyn_dtree);
 5577|      1|                        compressed_len += 3UL + opt_len;
 5578|      1|                    }
 5579|      1|                }
 5580|      4|            }
 5581|     36|        }
 5582|     36|        {
 5583|     36|            init_block();
 5584|     36|        }
 5585|     36|        if (eof) {
 5586|      5|            {
 5587|      5|                bi_windup();
 5588|      5|                compressed_len += 7UL;
 5589|      5|            }
 5590|      5|        }
 5591|     36|        return (compressed_len >> 3);
 5592|     36|    }
 5593|     36|}
 5594|       |int ct_tally(int dist, int lc)
 5595|  1.06M|{
 5596|  1.06M|    unsigned int tmp;
 5597|  1.06M|    int tmp___0;
 5598|  1.06M|    unsigned int tmp___1;
 5599|  1.06M|    unsigned int tmp___2;
 5600|  1.06M|    ulg out_length;
 5601|  1.06M|    ulg in_length;
 5602|  1.06M|    int dcode;
 5603|  1.06M|    int tmp___3;
 5604|       |
 5605|  1.06M|    {
 5606|  1.06M|        tmp = last_lit;
 5607|  1.06M|        last_lit++;
 5608|  1.06M|        inbuf[tmp] = (uch)lc;
 5609|  1.06M|        if (dist == 0) {
 5610|  1.05M|            dyn_ltree[lc].fc.freq = (ush)((int)dyn_ltree[lc].fc.freq + 1);
 5611|  1.05M|        }
 5612|  13.2k|        else {
 5613|  13.2k|            dist--;
 5614|  13.2k|            dyn_ltree[((int)length_code[lc] + 256) + 1].fc.freq =
 5615|  13.2k|                (ush)((int)dyn_ltree[((int)length_code[lc] + 256) + 1].fc.freq + 1);
 5616|  13.2k|            if (dist < 256) {
 5617|  3.80k|                tmp___0 = (int)dist_code[dist];
 5618|  3.80k|            }
 5619|  9.46k|            else {
 5620|  9.46k|                tmp___0 = (int)dist_code[256 + (dist >> 7)];
 5621|  9.46k|            }
 5622|  13.2k|            dyn_dtree[tmp___0].fc.freq = (ush)((int)dyn_dtree[tmp___0].fc.freq + 1);
 5623|  13.2k|            tmp___1 = last_dist;
 5624|  13.2k|            last_dist++;
 5625|  13.2k|            d_buf[tmp___1] = (ush)dist;
 5626|  13.2k|            flags = (uch)((int)flags | (int)flag_bit);
 5627|  13.2k|        }
 5628|  1.06M|        flag_bit = (uch)((int)flag_bit << 1);
 5629|  1.06M|        if ((last_lit & 7U) == 0U) {
 5630|   133k|            tmp___2 = last_flags;
 5631|   133k|            last_flags++;
 5632|   133k|            flag_buf[tmp___2] = flags;
 5633|   133k|            flags = (uch)0;
 5634|   133k|            flag_bit = (uch)1;
 5635|   133k|        }
 5636|  1.06M|        if (level > 2) {
 5637|  1.06M|            if ((last_lit & 4095U) == 0U) {
 5638|    228|                out_length = (ulg)last_lit * 8UL;
 5639|    228|                in_length = (ulg)strstart - (ulg)block_start;
 5640|    228|                dcode = 0;
 5641|    228|                {
 5642|  7.06k|                    while (1) {
 5643|  7.06k|while_continue: /* CIL Label */
 5644|  7.06k|                        ;
 5645|  7.06k|                        if (!(dcode < 30)) {
 5646|    228|                            goto while_break;
 5647|    228|                        }
 5648|  6.84k|                        out_length += (ulg)dyn_dtree[dcode].fc.freq *
 5649|  6.84k|                                      (ulg)(5L + (long)extra_dbits[dcode]);
 5650|  6.84k|                        dcode++;
 5651|  6.84k|                    }
 5652|    228|while_break: /* CIL Label */
 5653|    228|                    ;
 5654|    228|                }
 5655|      0|                out_length >>= 3;
 5656|    228|                if (last_dist < last_lit / 2U) {
 5657|    224|                    if (out_length < in_length / 2UL) {
 5658|      0|                        return (1);
 5659|      0|                    }
 5660|    224|                }
 5661|    228|            }
 5662|  1.06M|        }
 5663|  1.06M|        if (last_lit == 32767U) {
 5664|     31|            tmp___3 = 1;
 5665|     31|        }
 5666|  1.06M|        else {
 5667|  1.06M|            if (last_dist == 32768U) {
 5668|      0|                tmp___3 = 1;
 5669|      0|            }
 5670|  1.06M|            else {
 5671|  1.06M|                tmp___3 = 0;
 5672|  1.06M|            }
 5673|  1.06M|        }
 5674|  1.06M|        return (tmp___3);
 5675|  1.06M|    }
 5676|  1.06M|}
 5677|       |static void compress_block(ct_data *ltree, ct_data *dtree)
 5678|      4|{
 5679|      4|    unsigned int dist;
 5680|      4|    int lc;
 5681|      4|    unsigned int lx;
 5682|      4|    unsigned int dx;
 5683|      4|    unsigned int fx;
 5684|      4|    uch flag;
 5685|      4|    unsigned int code;
 5686|      4|    int extra;
 5687|      4|    unsigned int tmp;
 5688|      4|    unsigned int tmp___0;
 5689|      4|    unsigned int tmp___1;
 5690|       |
 5691|      4|    {
 5692|      4|        lx = 0U;
 5693|      4|        dx = 0U;
 5694|      4|        fx = 0U;
 5695|      4|        flag = (uch)0;
 5696|      4|        if (last_lit != 0U) {
 5697|      2|            {
 5698|  20.1k|                while (1) {
 5699|  20.1k|while_continue: /* CIL Label */
 5700|  20.1k|                    ;
 5701|  20.1k|                    if ((lx & 7U) == 0U) {
 5702|  2.51k|                        tmp = fx;
 5703|  2.51k|                        fx++;
 5704|  2.51k|                        flag = flag_buf[tmp];
 5705|  2.51k|                    }
 5706|  20.1k|                    tmp___0 = lx;
 5707|  20.1k|                    lx++;
 5708|  20.1k|                    lc = (int)inbuf[tmp___0];
 5709|  20.1k|                    if (((int)flag & 1) == 0) {
 5710|  7.10k|                        {
 5711|  7.10k|                            send_bits((int)(ltree + lc)->fc.code, (int)(ltree + lc)->dl.len);
 5712|  7.10k|                        }
 5713|  7.10k|                    }
 5714|  13.0k|                    else {
 5715|  13.0k|                        {
 5716|  13.0k|                            code = (unsigned int)length_code[lc];
 5717|  13.0k|                            send_bits((int)(ltree + ((code + 256U) + 1U))->fc.code,
 5718|  13.0k|                                      (int)(ltree + ((code + 256U) + 1U))->dl.len);
 5719|  13.0k|                            extra = extra_lbits[code];
 5720|  13.0k|                        }
 5721|  13.0k|                        if (extra != 0) {
 5722|  6.98k|                            {
 5723|  6.98k|                                lc -= base_length[code];
 5724|  6.98k|                                send_bits(lc, extra);
 5725|  6.98k|                            }
 5726|  6.98k|                        }
 5727|  13.0k|                        tmp___1 = dx;
 5728|  13.0k|                        dx++;
 5729|  13.0k|                        dist = (unsigned int)d_buf[tmp___1];
 5730|  13.0k|                        if (dist < 256U) {
 5731|  3.78k|                            code = (unsigned int)dist_code[dist];
 5732|  3.78k|                        }
 5733|  9.23k|                        else {
 5734|  9.23k|                            code = (unsigned int)dist_code[256U + (dist >> 7)];
 5735|  9.23k|                        }
 5736|  13.0k|                        {
 5737|  13.0k|                            send_bits((int)(dtree + code)->fc.code,
 5738|  13.0k|                                      (int)(dtree + code)->dl.len);
 5739|  13.0k|                            extra = extra_dbits[code];
 5740|  13.0k|                        }
 5741|  13.0k|                        if (extra != 0) {
 5742|  12.8k|                            {
 5743|  12.8k|                                dist -= (unsigned int)base_dist[code];
 5744|  12.8k|                                send_bits((int)dist, extra);
 5745|  12.8k|                            }
 5746|  12.8k|                        }
 5747|  13.0k|                    }
 5748|  20.1k|                    flag = (uch)((int)flag >> 1);
 5749|  20.1k|                    if (!(lx < last_lit)) {
 5750|      2|                        goto while_break;
 5751|      2|                    }
 5752|  20.1k|                }
 5753|      2|while_break: /* CIL Label */
 5754|      2|                ;
 5755|      2|            }
 5756|      2|        }
 5757|      4|        {
 5758|      4|            send_bits((int)(ltree + 256)->fc.code, (int)(ltree + 256)->dl.len);
 5759|      4|        }
 5760|      4|        return;
 5761|      4|    }
 5762|      4|}
 5763|       |static void set_file_type(void)
 5764|      0|{
 5765|      0|    int n;
 5766|      0|    unsigned int ascii_freq;
 5767|      0|    unsigned int bin_freq;
 5768|      0|    int tmp;
 5769|      0|    int tmp___0;
 5770|      0|    int tmp___1;
 5771|       |
 5772|      0|    {
 5773|      0|        n = 0;
 5774|      0|        ascii_freq = 0U;
 5775|      0|        bin_freq = 0U;
 5776|      0|        {
 5777|      0|            while (1) {
 5778|      0|while_continue: /* CIL Label */
 5779|      0|                ;
 5780|      0|                if (!(n < 7)) {
 5781|      0|                    goto while_break;
 5782|      0|                }
 5783|      0|                tmp = n;
 5784|      0|                n++;
 5785|      0|                bin_freq += (unsigned int)dyn_ltree[tmp].fc.freq;
 5786|      0|            }
 5787|      0|while_break: /* CIL Label */
 5788|      0|            ;
 5789|      0|        }
 5790|      0|        {
 5791|      0|            while (1) {
 5792|      0|while_continue___0: /* CIL Label */
 5793|      0|                ;
 5794|      0|                if (!(n < 128)) {
 5795|      0|                    goto while_break___0;
 5796|      0|                }
 5797|      0|                tmp___0 = n;
 5798|      0|                n++;
 5799|      0|                ascii_freq += (unsigned int)dyn_ltree[tmp___0].fc.freq;
 5800|      0|            }
 5801|      0|while_break___0: /* CIL Label */
 5802|      0|            ;
 5803|      0|        }
 5804|      0|        {
 5805|      0|            while (1) {
 5806|      0|while_continue___1: /* CIL Label */
 5807|      0|                ;
 5808|      0|                if (!(n < 256)) {
 5809|      0|                    goto while_break___1;
 5810|      0|                }
 5811|      0|                tmp___1 = n;
 5812|      0|                n++;
 5813|      0|                bin_freq += (unsigned int)dyn_ltree[tmp___1].fc.freq;
 5814|      0|            }
 5815|      0|while_break___1: /* CIL Label */
 5816|      0|            ;
 5817|      0|        }
 5818|      0|        if (bin_freq > ascii_freq >> 2) {
 5819|      0|            *file_type = (ush)0;
 5820|      0|        }
 5821|      0|        else {
 5822|      0|            *file_type = (ush)1;
 5823|      0|        }
 5824|      0|        return;
 5825|      0|    }
 5826|      0|}
 5827|       |void lm_init(int pack_level, ush *flags___0);
 5828|       |ulg deflate(void);
 5829|       |ulg window_size = 65536UL;
 5830|       |static unsigned int ins_h;
 5831|       |unsigned int prev_length;
 5832|       |unsigned int match_start;
 5833|       |static int eofile;
 5834|       |static unsigned int lookahead;
 5835|       |unsigned int max_chain_length;
 5836|       |static unsigned int max_lazy_match;
 5837|       |static int compr_level;
 5838|       |unsigned int good_match;
 5839|       |int nice_match;
 5840|       |static config configuration_table[10] = {
 5841|       |    {(ush)0, (ush)0, (ush)0, (ush)0},
 5842|       |    {(ush)4, (ush)4, (ush)8, (ush)4},
 5843|       |    {(ush)4, (ush)5, (ush)16, (ush)8},
 5844|       |    {(ush)4, (ush)6, (ush)32, (ush)32},
 5845|       |    {(ush)4, (ush)4, (ush)16, (ush)16},
 5846|       |    {(ush)8, (ush)16, (ush)32, (ush)32},
 5847|       |    {(ush)8, (ush)16, (ush)128, (ush)128},
 5848|       |    {(ush)8, (ush)32, (ush)128, (ush)256},
 5849|       |    {(ush)32, (ush)128, (ush)258, (ush)1024},
 5850|       |    {(ush)32, (ush)258, (ush)258, (ush)4096}
 5851|       |};
 5852|       |static void fill_window(void);
 5853|       |static ulg deflate_fast(void);
 5854|       |int longest_match(IPos cur_match);
 5855|       |void lm_init(int pack_level, ush *flags___0)
 5856|      5|{
 5857|      5|    register unsigned int j___0;
 5858|      5|    unsigned int tmp;
 5859|      5|    char *__cil_tmp6;
 5860|      5|    char *__cil_tmp7;
 5861|       |
 5862|      5|    {
 5863|      5|        if (pack_level < 1) {
 5864|      0|            {
 5865|      0|                error((char *)"bad pack level");
 5866|      0|            }
 5867|      0|        }
 5868|      5|        else {
 5869|      5|            if (pack_level > 9) {
 5870|      0|                {
 5871|      0|                    error((char *)"bad pack level");
 5872|      0|                }
 5873|      0|            }
 5874|      5|        }
 5875|      5|        {
 5876|      5|            compr_level = pack_level;
 5877|      5|            memset((voidp)((char *)(prev + 32768)), 0,
 5878|      5|                   (unsigned long)((unsigned int)(1 << 15)) *
 5879|      5|                   sizeof(*(prev + 32768)));
 5880|      5|            max_lazy_match = (unsigned int)configuration_table[pack_level].max_lazy;
 5881|      5|            good_match = (unsigned int)configuration_table[pack_level].good_length;
 5882|      5|            nice_match = (int)configuration_table[pack_level].nice_length;
 5883|      5|            max_chain_length =
 5884|      5|                (unsigned int)configuration_table[pack_level].max_chain;
 5885|      5|        }
 5886|      5|        if (pack_level == 1) {
 5887|      0|            *flags___0 = (ush)((int)*flags___0 | 4);
 5888|      0|        }
 5889|      5|        else {
 5890|      5|            if (pack_level == 9) {
 5891|      0|                *flags___0 = (ush)((int)*flags___0 | 2);
 5892|      0|            }
 5893|      5|        }
 5894|      5|        strstart = 0U;
 5895|      5|        block_start = 0L;
 5896|      5|        if (sizeof(int) <= 2UL) {
 5897|      0|            tmp = 32768U;
 5898|      0|        }
 5899|      5|        else {
 5900|      5|            tmp = 65536U;
 5901|      5|        }
 5902|      5|        {
 5903|      5|            lookahead = (unsigned int)(*read_buf)((char *)(window), tmp);
 5904|      5|        }
 5905|      5|        if (lookahead == 0U) {
 5906|      2|            eofile = 1;
 5907|      2|            lookahead = 0U;
 5908|      2|            return;
 5909|      2|        }
 5910|      3|        else {
 5911|      3|            if (lookahead == 4294967295U) {
 5912|      0|                eofile = 1;
 5913|      0|                lookahead = 0U;
 5914|      0|                return;
 5915|      0|            }
 5916|      3|        }
 5917|      3|        eofile = 0;
 5918|      3|        {
 5919|      4|            while (1) {
 5920|      4|while_continue: /* CIL Label */
 5921|      4|                ;
 5922|      4|                if (lookahead < 262U) {
 5923|      2|                    if (!(!eofile)) {
 5924|      1|                        goto while_break;
 5925|      1|                    }
 5926|      2|                }
 5927|      2|                else {
 5928|      2|                    goto while_break;
 5929|      2|                }
 5930|      1|                {
 5931|      1|                    fill_window();
 5932|      1|                }
 5933|      1|            }
 5934|      3|while_break: /* CIL Label */
 5935|      3|            ;
 5936|      3|        }
 5937|      0|        ins_h = 0U;
 5938|      3|        j___0 = 0U;
 5939|      3|        {
 5940|      9|            while (1) {
 5941|      9|while_continue___0: /* CIL Label */
 5942|      9|                ;
 5943|      9|                if (!(j___0 < 2U)) {
 5944|      3|                    goto while_break___0;
 5945|      3|                }
 5946|      6|                ins_h = ((ins_h << 5) ^ (unsigned int)window[j___0]) &
 5947|      6|                        ((unsigned int)(1 << 15) - 1U);
 5948|      6|                j___0++;
 5949|      6|            }
 5950|      3|while_break___0: /* CIL Label */
 5951|      3|            ;
 5952|      3|        }
 5953|      0|        return;
 5954|      3|    }
 5955|      3|}
 5956|       |int longest_match(IPos cur_match)
 5957|   674k|{
 5958|   674k|    unsigned int chain_length;
 5959|   674k|    register uch *scan;
 5960|   674k|    register uch *match;
 5961|   674k|    register int len;
 5962|   674k|    int best_len;
 5963|   674k|    IPos limit;
 5964|   674k|    unsigned int tmp;
 5965|   674k|    register uch *strend;
 5966|   674k|    register uch scan_end1;
 5967|   674k|    register uch scan_end;
 5968|       |
 5969|   674k|    {
 5970|   674k|        chain_length = max_chain_length;
 5971|   674k|        scan = window + strstart;
 5972|   674k|        best_len = (int)prev_length;
 5973|   674k|        if (strstart > 32506U) {
 5974|   659k|            tmp = strstart - 32506U;
 5975|   659k|        }
 5976|  15.7k|        else {
 5977|  15.7k|            tmp = 0U;
 5978|  15.7k|        }
 5979|   674k|        limit = tmp;
 5980|   674k|        strend = (window + strstart) + 258;
 5981|   674k|        scan_end1 = *(scan + (best_len - 1));
 5982|   674k|        scan_end = *(scan + best_len);
 5983|   674k|        if (prev_length >= good_match) {
 5984|  4.59k|            chain_length >>= 2;
 5985|  4.59k|        }
 5986|   674k|        {
 5987|  1.95M|            while (1) {
 5988|  1.95M|while_continue: /* CIL Label */
 5989|  1.95M|                ;
 5990|  1.95M|                match = window + cur_match;
 5991|  1.95M|                if ((int)*(match + best_len) != (int)scan_end) {
 5992|  1.73M|                    goto __Cont;
 5993|  1.73M|                }
 5994|   220k|                else {
 5995|   220k|                    if ((int)*(match + (best_len - 1)) != (int)scan_end1) {
 5996|   154k|                        goto __Cont;
 5997|   154k|                    }
 5998|  65.2k|                    else {
 5999|  65.2k|                        if ((int)*match != (int)*scan) {
 6000|  21.0k|                            goto __Cont;
 6001|  21.0k|                        }
 6002|  44.2k|                        else {
 6003|  44.2k|                            match++;
 6004|  44.2k|                            if ((int)*match != (int)*(scan + 1)) {
 6005|     33|                                goto __Cont;
 6006|     33|                            }
 6007|  44.2k|                        }
 6008|  65.2k|                    }
 6009|   220k|                }
 6010|  44.1k|                scan += 2;
 6011|  44.1k|                match++;
 6012|  44.1k|                {
 6013|  70.2k|                    while (1) {
 6014|  70.2k|while_continue___0: /* CIL Label */
 6015|  70.2k|                        ;
 6016|  70.2k|                        scan++;
 6017|  70.2k|                        match++;
 6018|  70.2k|                        if ((int)*scan == (int)*match) {
 6019|  57.3k|                            scan++;
 6020|  57.3k|                            match++;
 6021|  57.3k|                            if ((int)*scan == (int)*match) {
 6022|  49.6k|                                scan++;
 6023|  49.6k|                                match++;
 6024|  49.6k|                                if ((int)*scan == (int)*match) {
 6025|  43.9k|                                    scan++;
 6026|  43.9k|                                    match++;
 6027|  43.9k|                                    if ((int)*scan == (int)*match) {
 6028|  38.2k|                                        scan++;
 6029|  38.2k|                                        match++;
 6030|  38.2k|                                        if ((int)*scan == (int)*match) {
 6031|  34.8k|                                            scan++;
 6032|  34.8k|                                            match++;
 6033|  34.8k|                                            if ((int)*scan == (int)*match) {
 6034|  31.4k|                                                scan++;
 6035|  31.4k|                                                match++;
 6036|  31.4k|                                                if ((int)*scan == (int)*match) {
 6037|  28.9k|                                                    scan++;
 6038|  28.9k|                                                    match++;
 6039|  28.9k|                                                    if ((int)*scan == (int)*match) {
 6040|  26.0k|                                                        if (!((unsigned long)scan <
 6041|  26.0k|                                                                (unsigned long)strend)) {
 6042|     18|                                                            goto while_break___0;
 6043|     18|                                                        }
 6044|  26.0k|                                                    }
 6045|  2.91k|                                                    else {
 6046|  2.91k|                                                        goto while_break___0;
 6047|  2.91k|                                                    }
 6048|  28.9k|                                                }
 6049|  2.48k|                                                else {
 6050|  2.48k|                                                    goto while_break___0;
 6051|  2.48k|                                                }
 6052|  31.4k|                                            }
 6053|  3.38k|                                            else {
 6054|  3.38k|                                                goto while_break___0;
 6055|  3.38k|                                            }
 6056|  34.8k|                                        }
 6057|  3.40k|                                        else {
 6058|  3.40k|                                            goto while_break___0;
 6059|  3.40k|                                        }
 6060|  38.2k|                                    }
 6061|  5.69k|                                    else {
 6062|  5.69k|                                        goto while_break___0;
 6063|  5.69k|                                    }
 6064|  43.9k|                                }
 6065|  5.74k|                                else {
 6066|  5.74k|                                    goto while_break___0;
 6067|  5.74k|                                }
 6068|  49.6k|                            }
 6069|  7.61k|                            else {
 6070|  7.61k|                                goto while_break___0;
 6071|  7.61k|                            }
 6072|  57.3k|                        }
 6073|  12.9k|                        else {
 6074|  12.9k|                            goto while_break___0;
 6075|  12.9k|                        }
 6076|  70.2k|                    }
 6077|  44.1k|while_break___0: /* CIL Label */
 6078|  44.1k|                    ;
 6079|  44.1k|                }
 6080|      0|                len = 258 - (int)(strend - scan);
 6081|  44.1k|                scan = strend - 258;
 6082|  44.1k|                if (len > best_len) {
 6083|  27.6k|                    match_start = cur_match;
 6084|  27.6k|                    best_len = len;
 6085|  27.6k|                    if (len >= nice_match) {
 6086|     52|                        goto while_break;
 6087|     52|                    }
 6088|  27.5k|                    scan_end1 = *(scan + (best_len - 1));
 6089|  27.5k|                    scan_end = *(scan + best_len);
 6090|  27.5k|                }
 6091|  1.95M|__Cont:
 6092|  1.95M|                cur_match = (IPos)prev[cur_match & 32767U];
 6093|  1.95M|                if (cur_match > limit) {
 6094|  1.29M|                    chain_length--;
 6095|  1.29M|                    if (!(chain_length != 0U)) {
 6096|  6.55k|                        goto while_break;
 6097|  6.55k|                    }
 6098|  1.29M|                }
 6099|   668k|                else {
 6100|   668k|                    goto while_break;
 6101|   668k|                }
 6102|  1.95M|            }
 6103|   674k|while_break: /* CIL Label */
 6104|   674k|            ;
 6105|   674k|        }
 6106|      0|        return (best_len);
 6107|   674k|    }
 6108|   674k|}
 6109|       |static void fill_window(void)
 6110|     38|{
 6111|     38|    register unsigned int n;
 6112|     38|    register unsigned int m;
 6113|     38|    unsigned int more;
 6114|     38|    unsigned int tmp;
 6115|     38|    unsigned int tmp___0;
 6116|       |
 6117|     38|    {
 6118|     38|        more = (unsigned int)((window_size - (ulg)lookahead) - (ulg)strstart);
 6119|     38|        if (more == 4294967295U) {
 6120|      0|            more--;
 6121|      0|        }
 6122|     38|        else {
 6123|     38|            if (strstart >= 65274U) {
 6124|     36|                {
 6125|     36|                    memcpy((void * /* __restrict  */)((char *)(window)),
 6126|     36|                           (void const * /* __restrict  */)((char *)(window) + 32768),
 6127|     36|                           (size_t)32768U);
 6128|     36|                    match_start -= 32768U;
 6129|     36|                    strstart -= 32768U;
 6130|     36|                    block_start -= 32768L;
 6131|     36|                    n = 0U;
 6132|     36|                }
 6133|     36|                {
 6134|  1.17M|                    while (1) {
 6135|  1.17M|while_continue: /* CIL Label */
 6136|  1.17M|                        ;
 6137|  1.17M|                        if (!(n < (unsigned int)(1 << 15))) {
 6138|     36|                            goto while_break;
 6139|     36|                        }
 6140|  1.17M|                        m = (unsigned int)*((prev + 32768) + n);
 6141|  1.17M|                        if (m >= 32768U) {
 6142|   650k|                            tmp = m - 32768U;
 6143|   650k|                        }
 6144|   529k|                        else {
 6145|   529k|                            tmp = 0U;
 6146|   529k|                        }
 6147|  1.17M|                        *((prev + 32768) + n) = (Pos)tmp;
 6148|  1.17M|                        n++;
 6149|  1.17M|                    }
 6150|     36|while_break: /* CIL Label */
 6151|     36|                    ;
 6152|     36|                }
 6153|      0|                n = 0U;
 6154|     36|                {
 6155|  1.17M|                    while (1) {
 6156|  1.17M|while_continue___0: /* CIL Label */
 6157|  1.17M|                        ;
 6158|  1.17M|                        if (!(n < 32768U)) {
 6159|     36|                            goto while_break___0;
 6160|     36|                        }
 6161|  1.17M|                        m = (unsigned int)prev[n];
 6162|  1.17M|                        if (m >= 32768U) {
 6163|   520k|                            tmp___0 = m - 32768U;
 6164|   520k|                        }
 6165|   659k|                        else {
 6166|   659k|                            tmp___0 = 0U;
 6167|   659k|                        }
 6168|  1.17M|                        prev[n] = (Pos)tmp___0;
 6169|  1.17M|                        n++;
 6170|  1.17M|                    }
 6171|     36|while_break___0: /* CIL Label */
 6172|     36|                    ;
 6173|     36|                }
 6174|      0|                more += 32768U;
 6175|     36|            }
 6176|     38|        }
 6177|     38|        if (!eofile) {
 6178|     38|            {
 6179|     38|                n = (unsigned int)(*read_buf)(((char *)(window) + strstart) + lookahead,
 6180|     38|                                              more);
 6181|     38|            }
 6182|     38|            if (n == 0U) {
 6183|      3|                eofile = 1;
 6184|      3|            }
 6185|     35|            else {
 6186|     35|                if (n == 4294967295U) {
 6187|      0|                    eofile = 1;
 6188|      0|                }
 6189|     35|                else {
 6190|     35|                    lookahead += n;
 6191|     35|                }
 6192|     35|            }
 6193|     38|        }
 6194|     38|        return;
 6195|     38|    }
 6196|     38|}
 6197|       |static ulg deflate_fast(void)
 6198|      0|{
 6199|      0|    IPos hash_head;
 6200|      0|    int flush;
 6201|      0|    unsigned int match_length;
 6202|      0|    char *tmp;
 6203|      0|    char *tmp___0;
 6204|      0|    ulg tmp___1;
 6205|       |
 6206|      0|    {
 6207|      0|        match_length = 0U;
 6208|      0|        prev_length = 2U;
 6209|      0|        {
 6210|      0|            while (1) {
 6211|      0|while_continue: /* CIL Label */
 6212|      0|                ;
 6213|      0|                if (!(lookahead != 0U)) {
 6214|      0|                    goto while_break;
 6215|      0|                }
 6216|      0|                ins_h = ((ins_h << 5) ^ (unsigned int)window[(strstart + 3U) - 1U]) &
 6217|      0|                        ((unsigned int)(1 << 15) - 1U);
 6218|      0|                hash_head = (IPos) * ((prev + 32768) + ins_h);
 6219|      0|                prev[strstart & 32767U] = (ush)hash_head;
 6220|      0|                *((prev + 32768) + ins_h) = (ush)strstart;
 6221|      0|                if (hash_head != 0U) {
 6222|      0|                    if (strstart - hash_head <= 32506U) {
 6223|      0|                        {
 6224|      0|                            match_length = (unsigned int)longest_match(hash_head);
 6225|      0|                        }
 6226|      0|                        if (match_length > lookahead) {
 6227|      0|                            match_length = lookahead;
 6228|      0|                        }
 6229|      0|                    }
 6230|      0|                }
 6231|      0|                if (match_length >= 3U) {
 6232|      0|                    {
 6233|      0|                        flush = ct_tally((int)(strstart - match_start),
 6234|      0|                                         (int)(match_length - 3U));
 6235|      0|                        lookahead -= match_length;
 6236|      0|                    }
 6237|      0|                    if (match_length <= max_lazy_match) {
 6238|      0|                        match_length--;
 6239|      0|                        {
 6240|      0|                            while (1) {
 6241|      0|while_continue___0: /* CIL Label */
 6242|      0|                                ;
 6243|      0|                                strstart++;
 6244|      0|                                ins_h = ((ins_h << 5) ^
 6245|      0|                                         (unsigned int)window[(strstart + 3U) - 1U]) &
 6246|      0|                                        ((unsigned int)(1 << 15) - 1U);
 6247|      0|                                hash_head = (IPos) * ((prev + 32768) + ins_h);
 6248|      0|                                prev[strstart & 32767U] = (ush)hash_head;
 6249|      0|                                *((prev + 32768) + ins_h) = (ush)strstart;
 6250|      0|                                match_length--;
 6251|      0|                                if (!(match_length != 0U)) {
 6252|      0|                                    goto while_break___0;
 6253|      0|                                }
 6254|      0|                            }
 6255|      0|while_break___0: /* CIL Label */
 6256|      0|                            ;
 6257|      0|                        }
 6258|      0|                        strstart++;
 6259|      0|                    }
 6260|      0|                    else {
 6261|      0|                        strstart += match_length;
 6262|      0|                        match_length = 0U;
 6263|      0|                        ins_h = (unsigned int)window[strstart];
 6264|      0|                        ins_h = ((ins_h << 5) ^ (unsigned int)window[strstart + 1U]) &
 6265|      0|                                ((unsigned int)(1 << 15) - 1U);
 6266|      0|                    }
 6267|      0|                }
 6268|      0|                else {
 6269|      0|                    {
 6270|      0|                        flush = ct_tally(0, (int)window[strstart]);
 6271|      0|                        lookahead--;
 6272|      0|                        strstart++;
 6273|      0|                    }
 6274|      0|                }
 6275|      0|                if (flush) {
 6276|      0|                    if (block_start >= 0L) {
 6277|      0|                        tmp = (char *)(&window[(unsigned int)block_start]);
 6278|      0|                    }
 6279|      0|                    else {
 6280|      0|                        tmp = (char *)((void *)0);
 6281|      0|                    }
 6282|      0|                    {
 6283|      0|                        flush_block(tmp, (ulg)((long)strstart - block_start), 0);
 6284|      0|                        block_start = (long)strstart;
 6285|      0|                    }
 6286|      0|                }
 6287|      0|                {
 6288|      0|                    while (1) {
 6289|      0|while_continue___1: /* CIL Label */
 6290|      0|                        ;
 6291|      0|                        if (lookahead < 262U) {
 6292|      0|                            if (!(!eofile)) {
 6293|      0|                                goto while_break___1;
 6294|      0|                            }
 6295|      0|                        }
 6296|      0|                        else {
 6297|      0|                            goto while_break___1;
 6298|      0|                        }
 6299|      0|                        {
 6300|      0|                            fill_window();
 6301|      0|                        }
 6302|      0|                    }
 6303|      0|while_break___1: /* CIL Label */
 6304|      0|                    ;
 6305|      0|                }
 6306|      0|            }
 6307|      0|while_break: /* CIL Label */
 6308|      0|            ;
 6309|      0|        }
 6310|      0|        if (block_start >= 0L) {
 6311|      0|            tmp___0 = (char *)(&window[(unsigned int)block_start]);
 6312|      0|        }
 6313|      0|        else {
 6314|      0|            tmp___0 = (char *)((void *)0);
 6315|      0|        }
 6316|      0|        {
 6317|      0|            tmp___1 = flush_block(tmp___0, (ulg)((long)strstart - block_start), 1);
 6318|      0|        }
 6319|      0|        return (tmp___1);
 6320|      0|    }
 6321|      0|}
 6322|       |ulg deflate(void)
 6323|      5|{
 6324|      5|    IPos hash_head;
 6325|      5|    IPos prev_match;
 6326|      5|    int flush;
 6327|      5|    int match_available;
 6328|      5|    register unsigned int match_length;
 6329|      5|    ulg tmp;
 6330|      5|    char *tmp___0;
 6331|      5|    char *tmp___1;
 6332|      5|    int tmp___2;
 6333|      5|    char *tmp___3;
 6334|      5|    ulg tmp___4;
 6335|       |
 6336|      5|    {
 6337|      5|        match_available = 0;
 6338|      5|        match_length = 2U;
 6339|      5|        if (compr_level <= 3) {
 6340|      0|            {
 6341|      0|                tmp = deflate_fast();
 6342|      0|            }
 6343|      0|            return (tmp);
 6344|      0|        }
 6345|      5|        {
 6346|  1.08M|            while (1) {
 6347|  1.08M|while_continue: /* CIL Label */
 6348|  1.08M|                ;
 6349|  1.08M|                if (!(lookahead != 0U)) {
 6350|      5|                    goto while_break;
 6351|      5|                }
 6352|  1.08M|                ins_h = ((ins_h << 5) ^ (unsigned int)window[(strstart + 3U) - 1U]) &
 6353|  1.08M|                        ((unsigned int)(1 << 15) - 1U);
 6354|  1.08M|                hash_head = (IPos) * ((prev + 32768) + ins_h);
 6355|  1.08M|                prev[strstart & 32767U] = (ush)hash_head;
 6356|  1.08M|                *((prev + 32768) + ins_h) = (ush)strstart;
 6357|  1.08M|                prev_length = match_length;
 6358|  1.08M|                prev_match = match_start;
 6359|  1.08M|                match_length = 2U;
 6360|  1.08M|                if (hash_head != 0U) {
 6361|   818k|                    if (prev_length < max_lazy_match) {
 6362|   813k|                        if (strstart - hash_head <= 32506U) {
 6363|   674k|                            {
 6364|   674k|                                match_length = (unsigned int)longest_match(hash_head);
 6365|   674k|                            }
 6366|   674k|                            if (match_length > lookahead) {
 6367|      1|                                match_length = lookahead;
 6368|      1|                            }
 6369|   674k|                            if (match_length == 3U) {
 6370|  4.35k|                                if (strstart - match_start > 4096U) {
 6371|  2.34k|                                    match_length--;
 6372|  2.34k|                                }
 6373|  4.35k|                            }
 6374|   674k|                        }
 6375|   813k|                    }
 6376|   818k|                }
 6377|  1.08M|                if (prev_length >= 3U) {
 6378|  14.9k|                    if (match_length <= prev_length) {
 6379|  13.2k|                        {
 6380|  13.2k|                            flush = ct_tally((int)((strstart - 1U) - prev_match),
 6381|  13.2k|                                             (int)(prev_length - 3U));
 6382|  13.2k|                            lookahead -= prev_length - 1U;
 6383|  13.2k|                            prev_length -= 2U;
 6384|  13.2k|                        }
 6385|  13.2k|                        {
 6386|   196k|                            while (1) {
 6387|   196k|while_continue___0: /* CIL Label */
 6388|   196k|                                ;
 6389|   196k|                                strstart++;
 6390|   196k|                                ins_h = ((ins_h << 5) ^
 6391|   196k|                                         (unsigned int)window[(strstart + 3U) - 1U]) &
 6392|   196k|                                        ((unsigned int)(1 << 15) - 1U);
 6393|   196k|                                hash_head = (IPos) * ((prev + 32768) + ins_h);
 6394|   196k|                                prev[strstart & 32767U] = (ush)hash_head;
 6395|   196k|                                *((prev + 32768) + ins_h) = (ush)strstart;
 6396|   196k|                                prev_length--;
 6397|   196k|                                if (!(prev_length != 0U)) {
 6398|  13.2k|                                    goto while_break___0;
 6399|  13.2k|                                }
 6400|   196k|                            }
 6401|  13.2k|while_break___0: /* CIL Label */
 6402|  13.2k|                            ;
 6403|  13.2k|                        }
 6404|      0|                        match_available = 0;
 6405|  13.2k|                        match_length = 2U;
 6406|  13.2k|                        strstart++;
 6407|  13.2k|                        if (flush) {
 6408|      0|                            if (block_start >= 0L) {
 6409|      0|                                tmp___0 = (char *)(&window[(unsigned int)block_start]);
 6410|      0|                            }
 6411|      0|                            else {
 6412|      0|                                tmp___0 = (char *)((void *)0);
 6413|      0|                            }
 6414|      0|                            {
 6415|      0|                                flush_block(tmp___0, (ulg)((long)strstart - block_start), 0);
 6416|      0|                                block_start = (long)strstart;
 6417|      0|                            }
 6418|      0|                        }
 6419|  13.2k|                    }
 6420|  1.64k|                    else {
 6421|  1.64k|                        goto _L;
 6422|  1.64k|                    }
 6423|  14.9k|                }
 6424|  1.06M|                else {
 6425|  1.06M|_L:
 6426|  1.06M|                    if (match_available) {
 6427|  1.05M|                        {
 6428|  1.05M|                            tmp___2 = ct_tally(0, (int)window[strstart - 1U]);
 6429|  1.05M|                        }
 6430|  1.05M|                        if (tmp___2) {
 6431|     31|                            if (block_start >= 0L) {
 6432|     31|                                tmp___1 = (char *)(&window[(unsigned int)block_start]);
 6433|     31|                            }
 6434|      0|                            else {
 6435|      0|                                tmp___1 = (char *)((void *)0);
 6436|      0|                            }
 6437|     31|                            {
 6438|     31|                                flush_block(tmp___1, (ulg)((long)strstart - block_start), 0);
 6439|     31|                                block_start = (long)strstart;
 6440|     31|                            }
 6441|     31|                        }
 6442|  1.05M|                        strstart++;
 6443|  1.05M|                        lookahead--;
 6444|  1.05M|                    }
 6445|  13.2k|                    else {
 6446|  13.2k|                        match_available = 1;
 6447|  13.2k|                        strstart++;
 6448|  13.2k|                        lookahead--;
 6449|  13.2k|                    }
 6450|  1.06M|                }
 6451|  1.08M|                {
 6452|  1.08M|                    while (1) {
 6453|  1.08M|while_continue___1: /* CIL Label */
 6454|  1.08M|                        ;
 6455|  1.08M|                        if (lookahead < 262U) {
 6456|    375|                            if (!(!eofile)) {
 6457|    338|                                goto while_break___1;
 6458|    338|                            }
 6459|    375|                        }
 6460|  1.08M|                        else {
 6461|  1.08M|                            goto while_break___1;
 6462|  1.08M|                        }
 6463|     37|                        {
 6464|     37|                            fill_window();
 6465|     37|                        }
 6466|     37|                    }
 6467|  1.08M|while_break___1: /* CIL Label */
 6468|  1.08M|                    ;
 6469|  1.08M|                }
 6470|  1.08M|            }
 6471|      5|while_break: /* CIL Label */
 6472|      5|            ;
 6473|      5|        }
 6474|      5|        if (match_available) {
 6475|      2|            {
 6476|      2|                ct_tally(0, (int)window[strstart - 1U]);
 6477|      2|            }
 6478|      2|        }
 6479|      5|        if (block_start >= 0L) {
 6480|      4|            tmp___3 = (char *)(&window[(unsigned int)block_start]);
 6481|      4|        }
 6482|      1|        else {
 6483|      1|            tmp___3 = (char *)((void *)0);
 6484|      1|        }
 6485|      5|        {
 6486|      5|            tmp___4 = flush_block(tmp___3, (ulg)((long)strstart - block_start), 1);
 6487|      5|        }
 6488|      5|        return (tmp___4);
 6489|      5|    }
 6490|      5|}
 6491|       |long header_bytes;
 6492|       |long time_stamp;
 6493|       |int save_orig_name;
 6494|       |int zip(int in, int out);
 6495|       |static ulg crc___0;
 6496|       |int zip(int in, int out)
 6497|      5|{
 6498|      5|    uch flags___0;
 6499|      5|    ush attr;
 6500|      5|    ush deflate_flags;
 6501|      5|    unsigned int tmp;
 6502|      5|    unsigned int tmp___0;
 6503|      5|    unsigned int tmp___1;
 6504|      5|    unsigned int tmp___2;
 6505|      5|    unsigned int tmp___3;
 6506|      5|    unsigned int tmp___4;
 6507|      5|    unsigned int tmp___5;
 6508|      5|    unsigned int tmp___6;
 6509|      5|    unsigned int tmp___7;
 6510|      5|    unsigned int tmp___8;
 6511|      5|    unsigned int tmp___9;
 6512|      5|    unsigned int tmp___10;
 6513|      5|    unsigned int tmp___11;
 6514|      5|    unsigned int tmp___12;
 6515|      5|    char *p;
 6516|      5|    char *tmp___13;
 6517|      5|    unsigned int tmp___14;
 6518|      5|    char *tmp___15;
 6519|      5|    unsigned int tmp___16;
 6520|      5|    unsigned int tmp___17;
 6521|      5|    unsigned int tmp___18;
 6522|      5|    unsigned int tmp___19;
 6523|      5|    unsigned int tmp___20;
 6524|      5|    unsigned int tmp___21;
 6525|      5|    unsigned int tmp___22;
 6526|      5|    unsigned int tmp___23;
 6527|      5|    unsigned int tmp___24;
 6528|      5|    unsigned int tmp___25;
 6529|      5|    unsigned int tmp___26;
 6530|      5|    unsigned int tmp___27;
 6531|      5|    unsigned int tmp___28;
 6532|      5|    unsigned int tmp___29;
 6533|      5|    unsigned int tmp___30;
 6534|      5|    unsigned int tmp___31;
 6535|      5|    char *__cil_tmp40;
 6536|      5|    char *__cil_tmp41;
 6537|       |
 6538|      5|    {
 6539|      5|        flags___0 = (uch)0;
 6540|      5|        attr = (ush)0;
 6541|      5|        deflate_flags = (ush)0;
 6542|      5|        ifd = in;
 6543|      5|        ofd = out;
 6544|      5|        outcnt = 0U;
 6545|      5|        method = 8;
 6546|      5|        tmp = outcnt;
 6547|      5|        outcnt++;
 6548|      5|        outbuf[tmp] = (uch) * ("\037\213" + 0);
 6549|      5|        if (outcnt == 16384U) {
 6550|      0|            {
 6551|      0|                flush_outbuf();
 6552|      0|            }
 6553|      0|        }
 6554|      5|        tmp___0 = outcnt;
 6555|      5|        outcnt++;
 6556|      5|        outbuf[tmp___0] = (uch) * ("\037\213" + 1);
 6557|      5|        if (outcnt == 16384U) {
 6558|      0|            {
 6559|      0|                flush_outbuf();
 6560|      0|            }
 6561|      0|        }
 6562|      5|        tmp___1 = outcnt;
 6563|      5|        outcnt++;
 6564|      5|        outbuf[tmp___1] = (uch)8;
 6565|      5|        if (outcnt == 16384U) {
 6566|      0|            {
 6567|      0|                flush_outbuf();
 6568|      0|            }
 6569|      0|        }
 6570|      5|        if (save_orig_name) {
 6571|      5|            flags___0 = (uch)((int)flags___0 | 8);
 6572|      5|        }
 6573|      5|        tmp___2 = outcnt;
 6574|      5|        outcnt++;
 6575|      5|        outbuf[tmp___2] = flags___0;
 6576|      5|        if (outcnt == 16384U) {
 6577|      0|            {
 6578|      0|                flush_outbuf();
 6579|      0|            }
 6580|      0|        }
 6581|      5|        if (outcnt < 16382U) {
 6582|      5|            tmp___3 = outcnt;
 6583|      5|            outcnt++;
 6584|      5|            outbuf[tmp___3] = (uch)((time_stamp & 65535L) & 255L);
 6585|      5|            tmp___4 = outcnt;
 6586|      5|            outcnt++;
 6587|      5|            outbuf[tmp___4] = (uch)((int)((ush)(time_stamp & 65535L)) >> 8);
 6588|      5|        }
 6589|      0|        else {
 6590|      0|            tmp___5 = outcnt;
 6591|      0|            outcnt++;
 6592|      0|            outbuf[tmp___5] = (uch)((time_stamp & 65535L) & 255L);
 6593|      0|            if (outcnt == 16384U) {
 6594|      0|                {
 6595|      0|                    flush_outbuf();
 6596|      0|                }
 6597|      0|            }
 6598|      0|            tmp___6 = outcnt;
 6599|      0|            outcnt++;
 6600|      0|            outbuf[tmp___6] = (uch)((int)((ush)(time_stamp & 65535L)) >> 8);
 6601|      0|            if (outcnt == 16384U) {
 6602|      0|                {
 6603|      0|                    flush_outbuf();
 6604|      0|                }
 6605|      0|            }
 6606|      0|        }
 6607|      5|        if (outcnt < 16382U) {
 6608|      5|            tmp___7 = outcnt;
 6609|      5|            outcnt++;
 6610|      5|            outbuf[tmp___7] = (uch)(((ulg)time_stamp >> 16) & 255UL);
 6611|      5|            tmp___8 = outcnt;
 6612|      5|            outcnt++;
 6613|      5|            outbuf[tmp___8] = (uch)((int)((ush)((ulg)time_stamp >> 16)) >> 8);
 6614|      5|        }
 6615|      0|        else {
 6616|      0|            tmp___9 = outcnt;
 6617|      0|            outcnt++;
 6618|      0|            outbuf[tmp___9] = (uch)(((ulg)time_stamp >> 16) & 255UL);
 6619|      0|            if (outcnt == 16384U) {
 6620|      0|                {
 6621|      0|                    flush_outbuf();
 6622|      0|                }
 6623|      0|            }
 6624|      0|            tmp___10 = outcnt;
 6625|      0|            outcnt++;
 6626|      0|            outbuf[tmp___10] = (uch)((int)((ush)((ulg)time_stamp >> 16)) >> 8);
 6627|      0|            if (outcnt == 16384U) {
 6628|      0|                {
 6629|      0|                    flush_outbuf();
 6630|      0|                }
 6631|      0|            }
 6632|      0|        }
 6633|      5|        {
 6634|      5|            crc___0 = updcrc((uch *)0, 0U);
 6635|      5|            bi_init(out);
 6636|      5|            ct_init(&attr, &method);
 6637|      5|            lm_init(level, &deflate_flags);
 6638|      5|            tmp___11 = outcnt;
 6639|      5|            outcnt++;
 6640|      5|            outbuf[tmp___11] = (uch)deflate_flags;
 6641|      5|        }
 6642|      5|        if (outcnt == 16384U) {
 6643|      0|            {
 6644|      0|                flush_outbuf();
 6645|      0|            }
 6646|      0|        }
 6647|      5|        tmp___12 = outcnt;
 6648|      5|        outcnt++;
 6649|      5|        outbuf[tmp___12] = (uch)3;
 6650|      5|        if (outcnt == 16384U) {
 6651|      0|            {
 6652|      0|                flush_outbuf();
 6653|      0|            }
 6654|      0|        }
 6655|      5|        if (save_orig_name) {
 6656|      5|            {
 6657|      5|                tmp___13 = basename(ifname);
 6658|      5|                p = tmp___13;
 6659|      5|            }
 6660|      5|            {
 6661|     55|                while (1) {
 6662|     55|while_continue: /* CIL Label */
 6663|     55|                    ;
 6664|     55|                    tmp___14 = outcnt;
 6665|     55|                    outcnt++;
 6666|     55|                    outbuf[tmp___14] = (uch)*p;
 6667|     55|                    if (outcnt == 16384U) {
 6668|      0|                        {
 6669|      0|                            flush_outbuf();
 6670|      0|                        }
 6671|      0|                    }
 6672|     55|                    tmp___15 = p;
 6673|     55|                    p++;
 6674|     55|                    if (!*tmp___15) {
 6675|      5|                        goto while_break;
 6676|      5|                    }
 6677|     55|                }
 6678|      5|while_break: /* CIL Label */
 6679|      5|                ;
 6680|      5|            }
 6681|      5|        }
 6682|      5|        {
 6683|      5|            header_bytes = (long)outcnt;
 6684|      5|            deflate();
 6685|      5|        }
 6686|      5|        if (outcnt < 16382U) {
 6687|      5|            tmp___16 = outcnt;
 6688|      5|            outcnt++;
 6689|      5|            outbuf[tmp___16] = (uch)((crc___0 & 65535UL) & 255UL);
 6690|      5|            tmp___17 = outcnt;
 6691|      5|            outcnt++;
 6692|      5|            outbuf[tmp___17] = (uch)((int)((ush)(crc___0 & 65535UL)) >> 8);
 6693|      5|        }
 6694|      0|        else {
 6695|      0|            tmp___18 = outcnt;
 6696|      0|            outcnt++;
 6697|      0|            outbuf[tmp___18] = (uch)((crc___0 & 65535UL) & 255UL);
 6698|      0|            if (outcnt == 16384U) {
 6699|      0|                {
 6700|      0|                    flush_outbuf();
 6701|      0|                }
 6702|      0|            }
 6703|      0|            tmp___19 = outcnt;
 6704|      0|            outcnt++;
 6705|      0|            outbuf[tmp___19] = (uch)((int)((ush)(crc___0 & 65535UL)) >> 8);
 6706|      0|            if (outcnt == 16384U) {
 6707|      0|                {
 6708|      0|                    flush_outbuf();
 6709|      0|                }
 6710|      0|            }
 6711|      0|        }
 6712|      5|        if (outcnt < 16382U) {
 6713|      5|            tmp___20 = outcnt;
 6714|      5|            outcnt++;
 6715|      5|            outbuf[tmp___20] = (uch)((crc___0 >> 16) & 255UL);
 6716|      5|            tmp___21 = outcnt;
 6717|      5|            outcnt++;
 6718|      5|            outbuf[tmp___21] = (uch)((int)((ush)(crc___0 >> 16)) >> 8);
 6719|      5|        }
 6720|      0|        else {
 6721|      0|            tmp___22 = outcnt;
 6722|      0|            outcnt++;
 6723|      0|            outbuf[tmp___22] = (uch)((crc___0 >> 16) & 255UL);
 6724|      0|            if (outcnt == 16384U) {
 6725|      0|                {
 6726|      0|                    flush_outbuf();
 6727|      0|                }
 6728|      0|            }
 6729|      0|            tmp___23 = outcnt;
 6730|      0|            outcnt++;
 6731|      0|            outbuf[tmp___23] = (uch)((int)((ush)(crc___0 >> 16)) >> 8);
 6732|      0|            if (outcnt == 16384U) {
 6733|      0|                {
 6734|      0|                    flush_outbuf();
 6735|      0|                }
 6736|      0|            }
 6737|      0|        }
 6738|      5|        if (outcnt < 16382U) {
 6739|      5|            tmp___24 = outcnt;
 6740|      5|            outcnt++;
 6741|      5|            outbuf[tmp___24] = (uch)((bytes_in & 65535L) & 255L);
 6742|      5|            tmp___25 = outcnt;
 6743|      5|            outcnt++;
 6744|      5|            outbuf[tmp___25] = (uch)((int)((ush)(bytes_in & 65535L)) >> 8);
 6745|      5|        }
 6746|      0|        else {
 6747|      0|            tmp___26 = outcnt;
 6748|      0|            outcnt++;
 6749|      0|            outbuf[tmp___26] = (uch)((bytes_in & 65535L) & 255L);
 6750|      0|            if (outcnt == 16384U) {
 6751|      0|                {
 6752|      0|                    flush_outbuf();
 6753|      0|                }
 6754|      0|            }
 6755|      0|            tmp___27 = outcnt;
 6756|      0|            outcnt++;
 6757|      0|            outbuf[tmp___27] = (uch)((int)((ush)(bytes_in & 65535L)) >> 8);
 6758|      0|            if (outcnt == 16384U) {
 6759|      0|                {
 6760|      0|                    flush_outbuf();
 6761|      0|                }
 6762|      0|            }
 6763|      0|        }
 6764|      5|        if (outcnt < 16382U) {
 6765|      5|            tmp___28 = outcnt;
 6766|      5|            outcnt++;
 6767|      5|            outbuf[tmp___28] = (uch)(((ulg)bytes_in >> 16) & 255UL);
 6768|      5|            tmp___29 = outcnt;
 6769|      5|            outcnt++;
 6770|      5|            outbuf[tmp___29] = (uch)((int)((ush)((ulg)bytes_in >> 16)) >> 8);
 6771|      5|        }
 6772|      0|        else {
 6773|      0|            tmp___30 = outcnt;
 6774|      0|            outcnt++;
 6775|      0|            outbuf[tmp___30] = (uch)(((ulg)bytes_in >> 16) & 255UL);
 6776|      0|            if (outcnt == 16384U) {
 6777|      0|                {
 6778|      0|                    flush_outbuf();
 6779|      0|                }
 6780|      0|            }
 6781|      0|            tmp___31 = outcnt;
 6782|      0|            outcnt++;
 6783|      0|            outbuf[tmp___31] = (uch)((int)((ush)((ulg)bytes_in >> 16)) >> 8);
 6784|      0|            if (outcnt == 16384U) {
 6785|      0|                {
 6786|      0|                    flush_outbuf();
 6787|      0|                }
 6788|      0|            }
 6789|      0|        }
 6790|      5|        {
 6791|      5|            header_bytes = (long)((unsigned long)header_bytes + 2UL * sizeof(long));
 6792|      5|            flush_outbuf();
 6793|      5|        }
 6794|      5|        return (0);
 6795|      5|    }
 6796|      5|}
 6797|       |int file_read(char *buf, unsigned int size)
 6798|     43|{
 6799|     43|    unsigned int len;
 6800|       |
 6801|     43|    {
 6802|     43|        {
 6803|     43|            len = (unsigned int)read(ifd, (void *)buf, (size_t)size);
 6804|     43|        }
 6805|     43|        if (len == 4294967295U) {
 6806|      0|            return ((int)len);
 6807|      0|        }
 6808|     43|        else {
 6809|     43|            if (len == 0U) {
 6810|      5|                return ((int)len);
 6811|      5|            }
 6812|     43|        }
 6813|     38|        {
 6814|     38|            crc___0 = updcrc((uch *)buf, len);
 6815|     38|            bytes_in = (long)((ulg)bytes_in + (ulg)len);
 6816|     38|        }
 6817|     38|        return ((int)len);
 6818|     43|    }
 6819|     43|}
 6820|       |static char *license_msg[15] = {
 6821|       |    (char *)"   Copyright (C) 1992-1993 Jean-loup Gailly",
 6822|       |    (char *)"   This program is free software; you can redistribute it and/or "
 6823|       |    "modify",
 6824|       |    (char *)"   it under the terms of the GNU General Public License as "
 6825|       |    "published by",
 6826|       |    (char *)"   the Free Software Foundation; either version 2, or (at your "
 6827|       |    "option)",
 6828|       |    (char *)"   any later version.",
 6829|       |    (char *)"",
 6830|       |    (char
 6831|       |     *)"   This program is distributed in the hope that it will be useful,",
 6832|       |    (char *)"   but WITHOUT ANY WARRANTY; without even the implied warranty of",
 6833|       |    (char *)"   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
 6834|       |    (char *)"   GNU General Public License for more details.",
 6835|       |    (char *)"",
 6836|       |    (char *)"   You should have received a copy of the GNU General Public "
 6837|       |    "License",
 6838|       |    (char *)"   along with this program; if not, write to the Free Software",
 6839|       |    (char *)"   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.",
 6840|       |    (char *)0
 6841|       |};
 6842|       |extern __attribute__((__nothrow__))
 6843|       |__sighandler_t(__attribute__((__leaf__)) signal)(int __sig,
 6844|       |        void (*__handler)(int));
 6845|       |extern __attribute__((__nothrow__)) int(
 6846|       |    __attribute__((__nonnull__(1, 2), __leaf__))
 6847|       |    stat)(char const *__restrict __file, struct stat *__restrict __buf);
 6848|       |extern
 6849|       |__attribute__((__nothrow__)) int(__attribute__((__nonnull__(2), __leaf__))
 6850|       |                                 fstat)(int __fd, struct stat *__buf);
 6851|       |extern __attribute__((__nothrow__)) int(
 6852|       |    __attribute__((__nonnull__(1, 2), __leaf__))
 6853|       |    lstat)(char const *__restrict __file, struct stat *__restrict __buf);
 6854|       |extern
 6855|       |__attribute__((__nothrow__)) int(__attribute__((__nonnull__(1), __leaf__))
 6856|       |                                 chmod)(char const *__file,
 6857|       |                                        __mode_t __mode);
 6858|       |extern struct _IO_FILE *stdin;
 6859|       |extern struct _IO_FILE *stdout;
 6860|       |extern int fflush(FILE *__stream);
 6861|       |extern int printf(char const *__restrict __format, ...);
 6862|       |extern char *fgets(char *__restrict __s, int __n, FILE *__restrict __stream);
 6863|       |extern __attribute__((__nothrow__)) int(__attribute__((__leaf__))
 6864|       |                                        fileno)(FILE *__stream);
 6865|       |extern __attribute__((__nothrow__)) int(
 6866|       |    __attribute__((__nonnull__(1, 2), __leaf__))
 6867|       |    memcmp)(void const *__s1, void const *__s2, size_t __n)
 6868|       |__attribute__((__pure__));
 6869|       |extern __attribute__((__nothrow__)) char *(
 6870|       |    __attribute__((__nonnull__(1, 2), __leaf__))
 6871|       |    strncpy)(char *__restrict __dest, char const *__restrict __src, size_t __n);
 6872|       |extern __attribute__((__nothrow__)) char *(
 6873|       |    __attribute__((__nonnull__(1, 2), __leaf__))
 6874|       |    strcat)(char *__restrict __dest, char const *__restrict __src);
 6875|       |extern __attribute__((__nothrow__)) int(
 6876|       |    __attribute__((__nonnull__(1, 2), __leaf__))
 6877|       |    strcmp)(char const *__s1, char const *__s2) __attribute__((__pure__));
 6878|       |extern __attribute__((__nothrow__)) int(
 6879|       |    __attribute__((__nonnull__(1, 2), __leaf__))
 6880|       |    strncmp)(char const *__s1, char const *__s2, size_t __n)
 6881|       |__attribute__((__pure__));
 6882|       |long ifile_size;
 6883|       |int verbose;
 6884|       |extern char *optarg;
 6885|       |extern int optind;
 6886|       |extern int getopt_long(int argc, char *const *argv, char const *shortopts,
 6887|       |                       struct option const *longopts, int *longind);
 6888|       |extern __attribute__((__nothrow__)) char *(__attribute__((__leaf__))
 6889|       |        ctime)(time_t const *__timer);
 6890|       |extern int(__attribute__((__nonnull__(1))) open)(char const *__file,
 6891|       |        int __oflag, ...);
 6892|       |extern __attribute__((__nothrow__))
 6893|       |__off_t(__attribute__((__leaf__)) lseek)(int __fd, __off_t __offset,
 6894|       |        int __whence);
 6895|       |extern int close(int __fd);
 6896|       |extern
 6897|       |__attribute__((__nothrow__)) int(__attribute__((__nonnull__(1), __leaf__))
 6898|       |                                 chown)(char const *__file, __uid_t __owner,
 6899|       |                                        __gid_t __group);
 6900|       |extern __attribute__((__nothrow__)) int(__attribute__((__leaf__))
 6901|       |                                        isatty)(int __fd);
 6902|       |extern
 6903|       |__attribute__((__nothrow__)) int(__attribute__((__nonnull__(1), __leaf__))
 6904|       |                                 unlink)(char const *__name);
 6905|       |extern
 6906|       |__attribute__((__nothrow__)) int(__attribute__((__nonnull__(1), __leaf__))
 6907|       |                                 atoi)(char const *__nptr)
 6908|       |__attribute__((__pure__));
 6909|       |extern __attribute__((__nothrow__, __noreturn__)) void(__attribute__((__leaf__))
 6910|       |        exit)(int __status);
 6911|       |extern DIR *(__attribute__((__nonnull__(1))) opendir)(char const *__name);
 6912|       |extern int(__attribute__((__nonnull__(1))) closedir)(DIR *__dirp);
 6913|       |extern struct dirent *(__attribute__((__nonnull__(1))) readdir)(DIR *__dirp);
 6914|       |extern
 6915|       |__attribute__((__nothrow__)) int(__attribute__((__nonnull__(1), __leaf__))
 6916|       |                                 utime)(char const *__file,
 6917|       |                                        struct utimbuf const *__file_times);
 6918|       |int ascii = 0;
 6919|       |int to_stdout = 0;
 6920|       |int decompress = 0;
 6921|       |int force = 0;
 6922|       |int no_name = -1;
 6923|       |int no_time = -1;
 6924|       |int recursive = 0;
 6925|       |int list = 0;
 6926|       |int verbose = 0;
 6927|       |int quiet = 0;
 6928|       |int do_lzw = 0;
 6929|       |int test = 0;
 6930|       |int foreground;
 6931|       |int maxbits = 16;
 6932|       |int method = 8;
 6933|       |int level = 6;
 6934|       |int exit_code = 0;
 6935|       |int last_member;
 6936|       |int part_nb;
 6937|       |char *env;
 6938|       |char **args = (char **)((void *)0);
 6939|       |char z_suffix[31];
 6940|       |int z_len;
 6941|       |long total_in = 0L;
 6942|       |long total_out = 0L;
 6943|       |int remove_ofname = 0;
 6944|       |struct stat istat;
 6945|       |struct option longopts[24] = {
 6946|       |    {"ascii", 0, (int *)0, 'a'},      {"to-stdout", 0, (int *)0, 'c'},
 6947|       |    {"stdout", 0, (int *)0, 'c'},     {"decompress", 0, (int *)0, 'd'},
 6948|       |    {"uncompress", 0, (int *)0, 'd'}, {"force", 0, (int *)0, 'f'},
 6949|       |    {"help", 0, (int *)0, 'h'},       {"list", 0, (int *)0, 'l'},
 6950|       |    {"license", 0, (int *)0, 'L'},    {"no-name", 0, (int *)0, 'n'},
 6951|       |    {"name", 0, (int *)0, 'N'},       {"quiet", 0, (int *)0, 'q'},
 6952|       |    {"silent", 0, (int *)0, 'q'},     {"recursive", 0, (int *)0, 'r'},
 6953|       |    {"suffix", 1, (int *)0, 'S'},     {"test", 0, (int *)0, 't'},
 6954|       |    {"no-time", 0, (int *)0, 'T'},    {"verbose", 0, (int *)0, 'v'},
 6955|       |    {"version", 0, (int *)0, 'V'},    {"fast", 0, (int *)0, '1'},
 6956|       |    {"best", 0, (int *)0, '9'},       {"lzw", 0, (int *)0, 'Z'},
 6957|       |    {"bits", 1, (int *)0, 'b'},       {(char const *)0, 0, (int *)0, 0}
 6958|       |};
 6959|       |static void usage(void);
 6960|       |static void help(void);
 6961|       |static void license(void);
 6962|       |static void version(void);
 6963|       |static void treat_stdin(void);
 6964|       |static void treat_file(char *iname);
 6965|       |static int create_outfile(void);
 6966|       |static int do_stat(char *name, struct stat *sbuf);
 6967|       |static char *get_suffix(char *name);
 6968|       |static int get_istat(char *iname, struct stat *sbuf);
 6969|       |static int make_ofname(void);
 6970|       |static int same_file(struct stat *stat1, struct stat *stat2);
 6971|       |static int name_too_long(char *name, struct stat *statb);
 6972|       |static void shorten_name(char *name);
 6973|       |static int get_method(int in);
 6974|       |static void do_list(int ifd___0, int method___0);
 6975|       |static int check_ofname(void);
 6976|       |static void copy_stat(struct stat *ifstat);
 6977|       |static void do_exit(int exitcode);
 6978|       |int main(int argc, char **argv);
 6979|       |int (*work)(int infile, int outfile) = &zip;
 6980|       |static void treat_dir(char *dir);
 6981|       |static void reset_times(char *name, struct stat *statb);
 6982|       |static void usage(void)
 6983|      0|{
 6984|       |
 6985|      0|    {
 6986|      0|        {
 6987|      0|            fprintf((FILE * /* __restrict  */) stderr,
 6988|      0|                    (char const * /* __restrict  */) "usage: %s [-%scdfhlLnN%stvV19] "
 6989|      0|                    "[-S suffix] [file ...]\n",
 6990|      0|                    progname, "", "r");
 6991|      0|        }
 6992|      0|        return;
 6993|      0|    }
 6994|      0|}
 6995|       |static char *help_msg[18] = {
 6996|       |    (char *)" -c --stdout      write on standard output, keep original files "
 6997|       |    "unchanged",
 6998|       |    (char *)" -d --decompress  decompress",
 6999|       |    (char *)" -f --force       force overwrite of output file and compress "
 7000|       |    "links",
 7001|       |    (char *)" -h --help        give this help",
 7002|       |    (char *)" -l --list        list compressed file contents",
 7003|       |    (char *)" -L --license     display software license",
 7004|       |    (char *)" -n --no-name     do not save or restore the original name and "
 7005|       |    "time stamp",
 7006|       |    (char
 7007|       |     *)" -N --name        save or restore the original name and time stamp",
 7008|       |    (char *)" -q --quiet       suppress all warnings",
 7009|       |    (char *)" -r --recursive   operate recursively on directories",
 7010|       |    (char *)" -S .suf  --suffix .suf     use suffix .suf on compressed files",
 7011|       |    (char *)" -t --test        test compressed file integrity",
 7012|       |    (char *)" -v --verbose     verbose mode",
 7013|       |    (char *)" -V --version     display version number",
 7014|       |    (char *)" -1 --fast        compress faster",
 7015|       |    (char *)" -9 --best        compress better",
 7016|       |    (char *)" file...          files to (de)compress. If none given, use "
 7017|       |    "standard input.",
 7018|       |    (char *)0
 7019|       |};
 7020|       |static void help(void)
 7021|      0|{
 7022|      0|    char **p;
 7023|      0|    char **tmp;
 7024|       |
 7025|      0|    {
 7026|      0|        {
 7027|      0|            p = help_msg;
 7028|      0|            fprintf((FILE * /* __restrict  */) stderr,
 7029|      0|                    (char const * /* __restrict  */) "%s %s (%s)\n", progname,
 7030|      0|                    "1.2.4", "18 Aug 93");
 7031|      0|            usage();
 7032|      0|        }
 7033|      0|        {
 7034|      0|            while (1) {
 7035|      0|while_continue: /* CIL Label */
 7036|      0|                ;
 7037|      0|                if (!*p) {
 7038|      0|                    goto while_break;
 7039|      0|                }
 7040|      0|                {
 7041|      0|                    tmp = p;
 7042|      0|                    p++;
 7043|      0|                    fprintf((FILE * /* __restrict  */) stderr,
 7044|      0|                            (char const * /* __restrict  */) "%s\n", *tmp);
 7045|      0|                }
 7046|      0|            }
 7047|      0|while_break: /* CIL Label */
 7048|      0|            ;
 7049|      0|        }
 7050|      0|        return;
 7051|      0|    }
 7052|      0|}
 7053|       |static void license(void)
 7054|      0|{
 7055|      0|    char **p;
 7056|      0|    char **tmp;
 7057|       |
 7058|      0|    {
 7059|      0|        {
 7060|      0|            p = license_msg;
 7061|      0|            fprintf((FILE * /* __restrict  */) stderr,
 7062|      0|                    (char const * /* __restrict  */) "%s %s (%s)\n", progname,
 7063|      0|                    "1.2.4", "18 Aug 93");
 7064|      0|        }
 7065|      0|        {
 7066|      0|            while (1) {
 7067|      0|while_continue: /* CIL Label */
 7068|      0|                ;
 7069|      0|                if (!*p) {
 7070|      0|                    goto while_break;
 7071|      0|                }
 7072|      0|                {
 7073|      0|                    tmp = p;
 7074|      0|                    p++;
 7075|      0|                    fprintf((FILE * /* __restrict  */) stderr,
 7076|      0|                            (char const * /* __restrict  */) "%s\n", *tmp);
 7077|      0|                }
 7078|      0|            }
 7079|      0|while_break: /* CIL Label */
 7080|      0|            ;
 7081|      0|        }
 7082|      0|        return;
 7083|      0|    }
 7084|      0|}
 7085|       |static void version(void)
 7086|      0|{
 7087|       |
 7088|      0|    {
 7089|      0|        {
 7090|      0|            fprintf((FILE * /* __restrict  */) stderr,
 7091|      0|                    (char const * /* __restrict  */) "%s %s (%s)\n", progname,
 7092|      0|                    "1.2.4", "18 Aug 93");
 7093|      0|            fprintf((FILE * /* __restrict  */) stderr,
 7094|      0|                    (char const * /* __restrict  */) "Compilation options:\n%s %s ",
 7095|      0|                    "DIRENT", "UTIME");
 7096|      0|            fprintf((FILE * /* __restrict  */) stderr,
 7097|      0|                    (char const * /* __restrict  */) "STDC_HEADERS ");
 7098|      0|            fprintf((FILE * /* __restrict  */) stderr,
 7099|      0|                    (char const * /* __restrict  */) "HAVE_UNISTD_H ");
 7100|      0|            fprintf((FILE * /* __restrict  */) stderr,
 7101|      0|                    (char const * /* __restrict  */) "\n");
 7102|      0|        }
 7103|      0|        return;
 7104|      0|    }
 7105|      0|}
 7106|       |int main(int argc, char **argv)
 7107|      3|{
 7108|      3|    int file_count;
 7109|      3|    int proglen;
 7110|      3|    int optc;
 7111|      3|    int tmp;
 7112|      3|    void (*tmp___0)(int);
 7113|      3|    void (*tmp___1)(int);
 7114|      3|    void (*tmp___2)(int);
 7115|      3|    int tmp___3;
 7116|      3|    int tmp___4;
 7117|      3|    int tmp___5;
 7118|      3|    int tmp___6;
 7119|      3|    int tmp___7;
 7120|      3|    int tmp___8;
 7121|      3|    char *__cil_tmp19;
 7122|      3|    char *__cil_tmp20;
 7123|       |
 7124|      3|    {
 7125|      3|        {
 7126|      3|            progname = basename(*(argv + 0));
 7127|      3|            proglen = (int)strlen((char const *)progname);
 7128|      3|        }
 7129|      3|        if (proglen > 4) {
 7130|      3|            {
 7131|      3|                tmp = strcmp((char const *)((progname + proglen) - 4), ".exe");
 7132|      3|            }
 7133|      3|            if (tmp == 0) {
 7134|      0|                *(progname + (proglen - 4)) = (char)'\000';
 7135|      0|            }
 7136|      3|        }
 7137|      3|        {
 7138|      3|            env = add_envopt(&argc, &argv, (char *)"GZIP");
 7139|      3|        }
 7140|      3|        if ((unsigned long)env != (unsigned long)((void *)0)) {
 7141|      0|            args = argv;
 7142|      0|        }
 7143|      3|        {
 7144|      3|            tmp___0 = signal(2, (void (*)(int))1);
 7145|      3|            foreground = (unsigned long)tmp___0 != (unsigned long)((void (*)(int))1);
 7146|      3|        }
 7147|      3|        if (foreground) {
 7148|      3|            {
 7149|      3|                signal(2, (void (*)(int))(&abort_gzip));
 7150|      3|            }
 7151|      3|        }
 7152|      3|        {
 7153|      3|            tmp___1 = signal(15, (void (*)(int))1);
 7154|      3|        }
 7155|      3|        if ((unsigned long)tmp___1 != (unsigned long)((void (*)(int))1)) {
 7156|      3|            {
 7157|      3|                signal(15, (void (*)(int))(&abort_gzip));
 7158|      3|            }
 7159|      3|        }
 7160|      3|        {
 7161|      3|            tmp___2 = signal(1, (void (*)(int))1);
 7162|      3|        }
 7163|      3|        if ((unsigned long)tmp___2 != (unsigned long)((void (*)(int))1)) {
 7164|      3|            {
 7165|      3|                signal(1, (void (*)(int))(&abort_gzip));
 7166|      3|            }
 7167|      3|        }
 7168|      3|        {
 7169|      3|            tmp___5 = strncmp((char const *)progname, "un", (size_t)2);
 7170|      3|        }
 7171|      3|        if (tmp___5 == 0) {
 7172|      0|            decompress = 1;
 7173|      0|        }
 7174|      3|        else {
 7175|      3|            {
 7176|      3|                tmp___6 = strncmp((char const *)progname, "gun", (size_t)3);
 7177|      3|            }
 7178|      3|            if (tmp___6 == 0) {
 7179|      0|                decompress = 1;
 7180|      0|            }
 7181|      3|            else {
 7182|      3|                {
 7183|      3|                    tmp___3 = strcmp((char const *)(progname + 1), "cat");
 7184|      3|                }
 7185|      3|                if (tmp___3 == 0) {
 7186|      0|                    to_stdout = 1;
 7187|      0|                    decompress = to_stdout;
 7188|      0|                }
 7189|      3|                else {
 7190|      3|                    {
 7191|      3|                        tmp___4 = strcmp((char const *)progname, "gzcat");
 7192|      3|                    }
 7193|      3|                    if (tmp___4 == 0) {
 7194|      0|                        to_stdout = 1;
 7195|      0|                        decompress = to_stdout;
 7196|      0|                    }
 7197|      3|                }
 7198|      3|            }
 7199|      3|        }
 7200|      3|        {
 7201|      3|            strncpy((char * /* __restrict  */)(z_suffix),
 7202|      3|                    (char const * /* __restrict  */) ".gz", sizeof(z_suffix) - 1UL);
 7203|      3|            z_len = (int)strlen((char const *)(z_suffix));
 7204|      3|        }
 7205|      3|        {
 7206|      3|            while (1) {
 7207|      3|while_continue: /* CIL Label */
 7208|      3|                ;
 7209|      3|                {
 7210|      3|                    optc = getopt_long(argc, (char *const *)argv,
 7211|      3|                                       "ab:cdfhH?lLmMnNqrS:tvVZ123456789",
 7212|      3|                                       (struct option const *)(longopts), (int *)0);
 7213|      3|                }
 7214|      3|                if (!(optc != -1)) {
 7215|      3|                    goto while_break;
 7216|      3|                }
 7217|      0|                {
 7218|      0|                    if (optc == 97) {
 7219|      0|                        goto case_97;
 7220|      0|                    }
 7221|      0|                    if (optc == 98) {
 7222|      0|                        goto case_98;
 7223|      0|                    }
 7224|      0|                    if (optc == 99) {
 7225|      0|                        goto case_99;
 7226|      0|                    }
 7227|      0|                    if (optc == 100) {
 7228|      0|                        goto case_100;
 7229|      0|                    }
 7230|      0|                    if (optc == 102) {
 7231|      0|                        goto case_102;
 7232|      0|                    }
 7233|      0|                    if (optc == 104) {
 7234|      0|                        goto case_104;
 7235|      0|                    }
 7236|      0|                    if (optc == 72) {
 7237|      0|                        goto case_104;
 7238|      0|                    }
 7239|      0|                    if (optc == 63) {
 7240|      0|                        goto case_104;
 7241|      0|                    }
 7242|      0|                    if (optc == 108) {
 7243|      0|                        goto case_108;
 7244|      0|                    }
 7245|      0|                    if (optc == 76) {
 7246|      0|                        goto case_76;
 7247|      0|                    }
 7248|      0|                    if (optc == 109) {
 7249|      0|                        goto case_109;
 7250|      0|                    }
 7251|      0|                    if (optc == 77) {
 7252|      0|                        goto case_77;
 7253|      0|                    }
 7254|      0|                    if (optc == 110) {
 7255|      0|                        goto case_110;
 7256|      0|                    }
 7257|      0|                    if (optc == 78) {
 7258|      0|                        goto case_78;
 7259|      0|                    }
 7260|      0|                    if (optc == 113) {
 7261|      0|                        goto case_113;
 7262|      0|                    }
 7263|      0|                    if (optc == 114) {
 7264|      0|                        goto case_114;
 7265|      0|                    }
 7266|      0|                    if (optc == 83) {
 7267|      0|                        goto case_83;
 7268|      0|                    }
 7269|      0|                    if (optc == 116) {
 7270|      0|                        goto case_116;
 7271|      0|                    }
 7272|      0|                    if (optc == 118) {
 7273|      0|                        goto case_118;
 7274|      0|                    }
 7275|      0|                    if (optc == 86) {
 7276|      0|                        goto case_86;
 7277|      0|                    }
 7278|      0|                    if (optc == 90) {
 7279|      0|                        goto case_90;
 7280|      0|                    }
 7281|      0|                    if (optc == 49) {
 7282|      0|                        goto case_49;
 7283|      0|                    }
 7284|      0|                    if (optc == 50) {
 7285|      0|                        goto case_49;
 7286|      0|                    }
 7287|      0|                    if (optc == 51) {
 7288|      0|                        goto case_49;
 7289|      0|                    }
 7290|      0|                    if (optc == 52) {
 7291|      0|                        goto case_49;
 7292|      0|                    }
 7293|      0|                    if (optc == 53) {
 7294|      0|                        goto case_49;
 7295|      0|                    }
 7296|      0|                    if (optc == 54) {
 7297|      0|                        goto case_49;
 7298|      0|                    }
 7299|      0|                    if (optc == 55) {
 7300|      0|                        goto case_49;
 7301|      0|                    }
 7302|      0|                    if (optc == 56) {
 7303|      0|                        goto case_49;
 7304|      0|                    }
 7305|      0|                    if (optc == 57) {
 7306|      0|                        goto case_49;
 7307|      0|                    }
 7308|      0|                    goto switch_default;
 7309|      0|case_97: /* CIL Label */
 7310|      0|                    ascii = 1;
 7311|      0|                    goto switch_break;
 7312|      0|case_98 : { /* CIL Label */
 7313|      0|                        maxbits = atoi((char const *)optarg);
 7314|      0|                    }
 7315|      0|                    goto switch_break;
 7316|      0|case_99: /* CIL Label */
 7317|      0|                    to_stdout = 1;
 7318|      0|                    goto switch_break;
 7319|      0|case_100: /* CIL Label */
 7320|      0|                    decompress = 1;
 7321|      0|                    goto switch_break;
 7322|      0|case_102: /* CIL Label */
 7323|      0|                    force++;
 7324|      0|                    goto switch_break;
 7325|      0|case_104: /* CIL Label */
 7326|      0|case_72:  /* CIL Label */
 7327|      0|case_63 : { /* CIL Label */
 7328|      0|                        help();
 7329|      0|                        do_exit(0);
 7330|      0|                    }
 7331|      0|                    goto switch_break;
 7332|      0|case_108: /* CIL Label */
 7333|      0|                    to_stdout = 1;
 7334|      0|                    decompress = to_stdout;
 7335|      0|                    list = decompress;
 7336|      0|                    goto switch_break;
 7337|      0|case_76 : { /* CIL Label */
 7338|      0|                        license();
 7339|      0|                        do_exit(0);
 7340|      0|                    }
 7341|      0|                    goto switch_break;
 7342|      0|case_109: /* CIL Label */
 7343|      0|                    no_time = 1;
 7344|      0|                    goto switch_break;
 7345|      0|case_77: /* CIL Label */
 7346|      0|                    no_time = 0;
 7347|      0|                    goto switch_break;
 7348|      0|case_110: /* CIL Label */
 7349|      0|                    no_time = 1;
 7350|      0|                    no_name = no_time;
 7351|      0|                    goto switch_break;
 7352|      0|case_78: /* CIL Label */
 7353|      0|                    no_time = 0;
 7354|      0|                    no_name = no_time;
 7355|      0|                    goto switch_break;
 7356|      0|case_113: /* CIL Label */
 7357|      0|                    quiet = 1;
 7358|      0|                    verbose = 0;
 7359|      0|                    goto switch_break;
 7360|      0|case_114: /* CIL Label */
 7361|      0|                    recursive = 1;
 7362|      0|                    goto switch_break;
 7363|      0|case_83 : { /* CIL Label */
 7364|      0|                        z_len = (int)strlen((char const *)optarg);
 7365|      0|                        strcpy((char * /* __restrict  */)(z_suffix),
 7366|      0|                               (char const * /* __restrict  */)optarg);
 7367|      0|                    }
 7368|      0|                    goto switch_break;
 7369|      0|case_116: /* CIL Label */
 7370|      0|                    to_stdout = 1;
 7371|      0|                    decompress = to_stdout;
 7372|      0|                    test = decompress;
 7373|      0|                    goto switch_break;
 7374|      0|case_118: /* CIL Label */
 7375|      0|                    verbose++;
 7376|      0|                    quiet = 0;
 7377|      0|                    goto switch_break;
 7378|      0|case_86 : { /* CIL Label */
 7379|      0|                        version();
 7380|      0|                        do_exit(0);
 7381|      0|                    }
 7382|      0|                    goto switch_break;
 7383|      0|case_90 : { /* CIL Label */
 7384|      0|                        fprintf((FILE * /* __restrict  */) stderr,
 7385|      0|                                (char const * /* __restrict  */) "%s: -Z not supported in "
 7386|      0|                                "this version\n",
 7387|      0|                                progname);
 7388|      0|                        usage();
 7389|      0|                        do_exit(1);
 7390|      0|                    }
 7391|      0|                    goto switch_break;
 7392|      0|case_49: /* CIL Label */
 7393|      0|case_50: /* CIL Label */
 7394|      0|case_51: /* CIL Label */
 7395|      0|case_52: /* CIL Label */
 7396|      0|case_53: /* CIL Label */
 7397|      0|case_54: /* CIL Label */
 7398|      0|case_55: /* CIL Label */
 7399|      0|case_56: /* CIL Label */
 7400|      0|case_57: /* CIL Label */
 7401|      0|                    level = optc - 48;
 7402|      0|                    goto switch_break;
 7403|      0|switch_default : { /* CIL Label */
 7404|      0|                        usage();
 7405|      0|                        do_exit(1);
 7406|      0|                    }
 7407|      0|switch_break: /* CIL Label */
 7408|      0|                    ;
 7409|      0|                }
 7410|      0|            }
 7411|      3|while_break: /* CIL Label */
 7412|      3|            ;
 7413|      3|        }
 7414|      3|        if (no_time < 0) {
 7415|      3|            no_time = decompress;
 7416|      3|        }
 7417|      3|        if (no_name < 0) {
 7418|      3|            no_name = decompress;
 7419|      3|        }
 7420|      3|        file_count = argc - optind;
 7421|      3|        if (ascii) {
 7422|      0|            if (!quiet) {
 7423|      0|                {
 7424|      0|                    fprintf((FILE * /* __restrict  */) stderr,
 7425|      0|                            (char const * /* __restrict  */) "%s: option --ascii ignored "
 7426|      0|                            "on this system\n",
 7427|      0|                            progname);
 7428|      0|                }
 7429|      0|            }
 7430|      0|        }
 7431|      3|        if (z_len == 0) {
 7432|      0|            if (!decompress) {
 7433|      0|                {
 7434|      0|                    fprintf(
 7435|      0|                        (FILE * /* __restrict  */) stderr,
 7436|      0|                        (char const * /* __restrict  */) "%s: incorrect suffix \'%s\'\n",
 7437|      0|                        progname, optarg);
 7438|      0|                    do_exit(1);
 7439|      0|                }
 7440|      0|            }
 7441|      0|            else {
 7442|      0|                goto _L;
 7443|      0|            }
 7444|      0|        }
 7445|      3|        else {
 7446|      3|_L:
 7447|      3|            if (z_len > 30) {
 7448|      0|                {
 7449|      0|                    fprintf(
 7450|      0|                        (FILE * /* __restrict  */) stderr,
 7451|      0|                        (char const * /* __restrict  */) "%s: incorrect suffix \'%s\'\n",
 7452|      0|                        progname, optarg);
 7453|      0|                    do_exit(1);
 7454|      0|                }
 7455|      0|            }
 7456|      3|        }
 7457|      3|        if (do_lzw) {
 7458|      0|            if (!decompress) {
 7459|      0|                work = &lzw;
 7460|      0|            }
 7461|      0|        }
 7462|      3|        if (file_count != 0) {
 7463|      3|            if (to_stdout) {
 7464|      0|                if (!test) {
 7465|      0|                    if (!list) {
 7466|      0|                        if (!decompress) {
 7467|      0|                            tmp___7 = 1;
 7468|      0|                        }
 7469|      0|                        else {
 7470|      0|                            if (!ascii) {
 7471|      0|                                tmp___7 = 1;
 7472|      0|                            }
 7473|      0|                            else {
 7474|      0|                                tmp___7 = 0;
 7475|      0|                            }
 7476|      0|                        }
 7477|      0|                    }
 7478|      0|                    else {
 7479|      0|                        tmp___7 = 0;
 7480|      0|                    }
 7481|      0|                }
 7482|      0|                else {
 7483|      0|                    tmp___7 = 0;
 7484|      0|                }
 7485|      0|            }
 7486|      3|            else {
 7487|      3|                tmp___7 = 0;
 7488|      3|            }
 7489|      3|            {
 7490|      8|                while (1) {
 7491|      8|while_continue___0: /* CIL Label */
 7492|      8|                    ;
 7493|      8|                    if (!(optind < argc)) {
 7494|      3|                        goto while_break___0;
 7495|      3|                    }
 7496|      5|                    {
 7497|      5|                        tmp___8 = optind;
 7498|      5|                        optind++;
 7499|      5|                        treat_file(*(argv + tmp___8));
 7500|      5|                    }
 7501|      5|                }
 7502|      3|while_break___0: /* CIL Label */
 7503|      3|                ;
 7504|      3|            }
 7505|      3|        }
 7506|      0|        else {
 7507|      0|            {
 7508|      0|                treat_stdin();
 7509|      0|            }
 7510|      0|        }
 7511|      3|        if (list) {
 7512|      0|            if (!quiet) {
 7513|      0|                if (file_count > 1) {
 7514|      0|                    {
 7515|      0|                        do_list(-1, -1);
 7516|      0|                    }
 7517|      0|                }
 7518|      0|            }
 7519|      0|        }
 7520|      3|        {
 7521|      3|            do_exit(exit_code);
 7522|      3|        }
 7523|      3|        return (exit_code);
 7524|      3|    }
 7525|      3|}
 7526|       |static void treat_stdin(void)
 7527|      0|{
 7528|      0|    char const *tmp;
 7529|      0|    char const *tmp___0;
 7530|      0|    struct _IO_FILE *tmp___1;
 7531|      0|    int tmp___2;
 7532|      0|    int tmp___3;
 7533|      0|    int tmp___4;
 7534|      0|    int tmp___5;
 7535|      0|    int tmp___6;
 7536|      0|    int tmp___7;
 7537|      0|    int tmp___8;
 7538|      0|    int tmp___9;
 7539|      0|    int tmp___10;
 7540|      0|    char *__cil_tmp13;
 7541|      0|    char *__cil_tmp14;
 7542|      0|    char *__cil_tmp15;
 7543|      0|    char *__cil_tmp16;
 7544|      0|    char *__cil_tmp17;
 7545|      0|    char *__cil_tmp18;
 7546|      0|    char *__cil_tmp19;
 7547|       |
 7548|      0|    {
 7549|      0|        if (!force) {
 7550|      0|            if (!list) {
 7551|      0|                if (decompress) {
 7552|      0|                    tmp___1 = stdin;
 7553|      0|                }
 7554|      0|                else {
 7555|      0|                    tmp___1 = stdout;
 7556|      0|                }
 7557|      0|                {
 7558|      0|                    tmp___2 = fileno(tmp___1);
 7559|      0|                    tmp___3 = isatty(tmp___2);
 7560|      0|                }
 7561|      0|                if (tmp___3) {
 7562|      0|                    if (decompress) {
 7563|      0|                        tmp = "de";
 7564|      0|                    }
 7565|      0|                    else {
 7566|      0|                        tmp = "";
 7567|      0|                    }
 7568|      0|                    if (decompress) {
 7569|      0|                        tmp___0 = "read from";
 7570|      0|                    }
 7571|      0|                    else {
 7572|      0|                        tmp___0 = "written to";
 7573|      0|                    }
 7574|      0|                    {
 7575|      0|                        fprintf((FILE * /* __restrict  */) stderr,
 7576|      0|                                (char const * /* __restrict  */) "%s: compressed data not "
 7577|      0|                                "%s a terminal. Use -f to "
 7578|      0|                                "force %scompression.\n",
 7579|      0|                                progname, tmp___0, tmp);
 7580|      0|                        fprintf((FILE * /* __restrict  */) stderr,
 7581|      0|                                (char const * /* __restrict  */) "For help, type: %s -h\n",
 7582|      0|                                progname);
 7583|      0|                        do_exit(1);
 7584|      0|                    }
 7585|      0|                }
 7586|      0|            }
 7587|      0|        }
 7588|      0|        if (decompress) {
 7589|      0|            tmp___4 = 1;
 7590|      0|        }
 7591|      0|        else {
 7592|      0|            if (!ascii) {
 7593|      0|                tmp___4 = 1;
 7594|      0|            }
 7595|      0|            else {
 7596|      0|                tmp___4 = 0;
 7597|      0|            }
 7598|      0|        }
 7599|      0|        if (!test) {
 7600|      0|            if (!list) {
 7601|      0|                if (!decompress) {
 7602|      0|                    tmp___5 = 1;
 7603|      0|                }
 7604|      0|                else {
 7605|      0|                    if (!ascii) {
 7606|      0|                        tmp___5 = 1;
 7607|      0|                    }
 7608|      0|                    else {
 7609|      0|                        tmp___5 = 0;
 7610|      0|                    }
 7611|      0|                }
 7612|      0|            }
 7613|      0|            else {
 7614|      0|                tmp___5 = 0;
 7615|      0|            }
 7616|      0|        }
 7617|      0|        else {
 7618|      0|            tmp___5 = 0;
 7619|      0|        }
 7620|      0|        {
 7621|      0|            strcpy((char * /* __restrict  */)(ifname),
 7622|      0|                   (char const * /* __restrict  */) "stdin");
 7623|      0|            strcpy((char * /* __restrict  */)(ofname),
 7624|      0|                   (char const * /* __restrict  */) "stdout");
 7625|      0|            time_stamp = 0L;
 7626|      0|        }
 7627|      0|        if (list) {
 7628|      0|            goto _L;
 7629|      0|        }
 7630|      0|        else {
 7631|      0|            if (!no_time) {
 7632|      0|_L : {
 7633|      0|                    tmp___6 = fileno(stdin);
 7634|      0|                    tmp___7 = fstat(tmp___6, &istat);
 7635|      0|                }
 7636|      0|                if (tmp___7 != 0) {
 7637|      0|                    {
 7638|      0|                        error((char *)"fstat(stdin)");
 7639|      0|                    }
 7640|      0|                }
 7641|      0|                time_stamp = istat.st_mtim.tv_sec;
 7642|      0|            }
 7643|      0|        }
 7644|      0|        {
 7645|      0|            ifile_size = -1L;
 7646|      0|            clear_bufs();
 7647|      0|            to_stdout = 1;
 7648|      0|            part_nb = 0;
 7649|      0|        }
 7650|      0|        if (decompress) {
 7651|      0|            {
 7652|      0|                method = get_method(ifd);
 7653|      0|            }
 7654|      0|            if (method < 0) {
 7655|      0|                {
 7656|      0|                    do_exit(exit_code);
 7657|      0|                }
 7658|      0|            }
 7659|      0|        }
 7660|      0|        if (list) {
 7661|      0|            {
 7662|      0|                do_list(ifd, method);
 7663|      0|            }
 7664|      0|            return;
 7665|      0|        }
 7666|      0|        {
 7667|      0|            while (1) {
 7668|      0|while_continue: /* CIL Label */
 7669|      0|                ;
 7670|      0|                {
 7671|      0|                    tmp___8 = fileno(stdout);
 7672|      0|                    tmp___9 = fileno(stdin);
 7673|      0|                    tmp___10 = (*work)(tmp___9, tmp___8);
 7674|      0|                }
 7675|      0|                if (tmp___10 != 0) {
 7676|      0|                    return;
 7677|      0|                }
 7678|      0|                if (!decompress) {
 7679|      0|                    goto while_break;
 7680|      0|                }
 7681|      0|                else {
 7682|      0|                    if (last_member) {
 7683|      0|                        goto while_break;
 7684|      0|                    }
 7685|      0|                    else {
 7686|      0|                        if (inptr == insize) {
 7687|      0|                            goto while_break;
 7688|      0|                        }
 7689|      0|                    }
 7690|      0|                }
 7691|      0|                {
 7692|      0|                    method = get_method(ifd);
 7693|      0|                }
 7694|      0|                if (method < 0) {
 7695|      0|                    return;
 7696|      0|                }
 7697|      0|                bytes_out = 0L;
 7698|      0|            }
 7699|      0|while_break: /* CIL Label */
 7700|      0|            ;
 7701|      0|        }
 7702|      0|        if (verbose) {
 7703|      0|            if (test) {
 7704|      0|                {
 7705|      0|                    fprintf((FILE * /* __restrict  */) stderr,
 7706|      0|                            (char const * /* __restrict  */) " OK\n");
 7707|      0|                }
 7708|      0|            }
 7709|      0|            else {
 7710|      0|                if (!decompress) {
 7711|      0|                    {
 7712|      0|                        display_ratio(bytes_in - (bytes_out - header_bytes), bytes_in,
 7713|      0|                                      stderr);
 7714|      0|                        fprintf((FILE * /* __restrict  */) stderr,
 7715|      0|                                (char const * /* __restrict  */) "\n");
 7716|      0|                    }
 7717|      0|                }
 7718|      0|            }
 7719|      0|        }
 7720|      0|        return;
 7721|      0|    }
 7722|      0|}
 7723|       |static void treat_file(char *iname)
 7724|      5|{
 7725|      5|    int cflag;
 7726|      5|    int tmp;
 7727|      5|    int tmp___0;
 7728|      5|    struct stat st;
 7729|      5|    int tmp___1;
 7730|      5|    int tmp___2;
 7731|      5|    int tmp___3;
 7732|      5|    int tmp___4;
 7733|      5|    char const *tmp___7;
 7734|      5|    size_t tmp___8;
 7735|      5|    char const *tmp___9;
 7736|      5|    size_t tmp___10;
 7737|      5|    int tmp___11;
 7738|      5|    int tmp___12;
 7739|      5|    void *__cil_tmp16;
 7740|      5|    char *__cil_tmp17;
 7741|      5|    char *__cil_tmp18;
 7742|      5|    char *__cil_tmp19;
 7743|      5|    char *__cil_tmp20;
 7744|       |
 7745|      5|    {
 7746|      5|        {
 7747|      5|            tmp = strcmp((char const *)iname, "-");
 7748|      5|        }
 7749|      5|        if (tmp == 0) {
 7750|      0|            {
 7751|      0|                cflag = to_stdout;
 7752|      0|                treat_stdin();
 7753|      0|                to_stdout = cflag;
 7754|      0|            }
 7755|      0|            return;
 7756|      0|        }
 7757|      5|        {
 7758|      5|            tmp___0 = get_istat(iname, &istat);
 7759|      5|        }
 7760|      5|        if (tmp___0 != 0) {
 7761|      0|            return;
 7762|      0|        }
 7763|      5|        if ((istat.st_mode & 61440U) == 16384U) {
 7764|      0|            if (recursive) {
 7765|      0|                {
 7766|      0|                    st = istat;
 7767|      0|                    treat_dir(iname);
 7768|      0|                    reset_times(iname, &st);
 7769|      0|                }
 7770|      0|            }
 7771|      0|            else {
 7772|      0|                if (!quiet) {
 7773|      0|                    {
 7774|      0|                        fprintf(
 7775|      0|                            (FILE * /* __restrict  */) stderr,
 7776|      0|                            (char const
 7777|      0|                             * /* __restrict  */) "%s: %s is a directory -- ignored\n",
 7778|      0|                            progname, ifname);
 7779|      0|                    }
 7780|      0|                }
 7781|      0|                if (exit_code == 0) {
 7782|      0|                    exit_code = 2;
 7783|      0|                }
 7784|      0|            }
 7785|      0|            return;
 7786|      0|        }
 7787|      5|        if (!((istat.st_mode & 61440U) == 32768U)) {
 7788|      0|            if (!quiet) {
 7789|      0|                {
 7790|      0|                    fprintf(
 7791|      0|                        (FILE * /* __restrict  */) stderr,
 7792|      0|                        (char const * /* __restrict  */) "%s: %s is not a directory or a "
 7793|      0|                        "regular file - ignored\n",
 7794|      0|                        progname, ifname);
 7795|      0|                }
 7796|      0|            }
 7797|      0|            if (exit_code == 0) {
 7798|      0|                exit_code = 2;
 7799|      0|            }
 7800|      0|            return;
 7801|      0|        }
 7802|      5|        if (istat.st_nlink > 1UL) {
 7803|      0|            if (!to_stdout) {
 7804|      0|                if (!force) {
 7805|      0|                    if (!quiet) {
 7806|      0|                        if (istat.st_nlink > 2UL) {
 7807|      0|                            tmp___1 = 's';
 7808|      0|                        }
 7809|      0|                        else {
 7810|      0|                            tmp___1 = ' ';
 7811|      0|                        }
 7812|      0|                        {
 7813|      0|                            fprintf((FILE * /* __restrict  */) stderr,
 7814|      0|                                    (char const * /* __restrict  */) "%s: %s has %d other "
 7815|      0|                                    "link%c -- unchanged\n",
 7816|      0|                                    progname, ifname, (int)istat.st_nlink - 1, tmp___1);
 7817|      0|                        }
 7818|      0|                    }
 7819|      0|                    if (exit_code == 0) {
 7820|      0|                        exit_code = 2;
 7821|      0|                    }
 7822|      0|                    return;
 7823|      0|                }
 7824|      0|            }
 7825|      0|        }
 7826|      5|        ifile_size = istat.st_size;
 7827|      5|        if (no_time) {
 7828|      0|            if (!list) {
 7829|      0|                time_stamp = 0L;
 7830|      0|            }
 7831|      0|            else {
 7832|      0|                time_stamp = istat.st_mtim.tv_sec;
 7833|      0|            }
 7834|      0|        }
 7835|      5|        else {
 7836|      5|            time_stamp = istat.st_mtim.tv_sec;
 7837|      5|        }
 7838|      5|        if (to_stdout) {
 7839|      0|            if (!list) {
 7840|      0|                if (!test) {
 7841|      0|                    {
 7842|      0|                        strcpy((char * /* __restrict  */)(ofname),
 7843|      0|                               (char const * /* __restrict  */) "stdout");
 7844|      0|                    }
 7845|      0|                }
 7846|      0|                else {
 7847|      0|                    goto _L___0;
 7848|      0|                }
 7849|      0|            }
 7850|      0|            else {
 7851|      0|                goto _L___0;
 7852|      0|            }
 7853|      0|        }
 7854|      5|        else {
 7855|      5|_L___0 : {
 7856|      5|                tmp___2 = make_ofname();
 7857|      5|            }
 7858|      5|            if (tmp___2 != 0) {
 7859|      0|                return;
 7860|      0|            }
 7861|      5|        }
 7862|      5|        if (ascii) {
 7863|      0|            if (!decompress) {
 7864|      0|                tmp___3 = 0;
 7865|      0|            }
 7866|      0|            else {
 7867|      0|                tmp___3 = 0;
 7868|      0|            }
 7869|      0|        }
 7870|      5|        else {
 7871|      5|            tmp___3 = 0;
 7872|      5|        }
 7873|      5|        {
 7874|      5|            ifd = open((char const *)(ifname), tmp___3, 384);
 7875|      5|        }
 7876|      5|        if (ifd == -1) {
 7877|      0|            {
 7878|      0|                fprintf((FILE * /* __restrict  */) stderr,
 7879|      0|                        (char const * /* __restrict  */) "%s: ", progname);
 7880|      0|                perror((char const *)(ifname));
 7881|      0|                exit_code = 1;
 7882|      0|            }
 7883|      0|            return;
 7884|      0|        }
 7885|      5|        {
 7886|      5|            clear_bufs();
 7887|      5|            part_nb = 0;
 7888|      5|        }
 7889|      5|        if (decompress) {
 7890|      0|            {
 7891|      0|                method = get_method(ifd);
 7892|      0|            }
 7893|      0|            if (method < 0) {
 7894|      0|                {
 7895|      0|                    close(ifd);
 7896|      0|                }
 7897|      0|                return;
 7898|      0|            }
 7899|      0|        }
 7900|      5|        if (list) {
 7901|      0|            {
 7902|      0|                do_list(ifd, method);
 7903|      0|                close(ifd);
 7904|      0|            }
 7905|      0|            return;
 7906|      0|        }
 7907|      5|        if (to_stdout) {
 7908|      0|            {
 7909|      0|                ofd = fileno(stdout);
 7910|      0|            }
 7911|      0|        }
 7912|      5|        else {
 7913|      5|            {
 7914|      5|                tmp___4 = create_outfile();
 7915|      5|            }
 7916|      5|            if (tmp___4 != 0) {
 7917|      0|                return;
 7918|      0|            }
 7919|      5|            if (!decompress) {
 7920|      5|                if (save_orig_name) {
 7921|      0|                    if (!verbose) {
 7922|      0|                        if (!quiet) {
 7923|      0|                            {
 7924|      0|                                fprintf((FILE * /* __restrict  */) stderr,
 7925|      0|                                        (char const
 7926|      0|                                         * /* __restrict  */) "%s: %s compressed to %s\n",
 7927|      0|                                        progname, ifname, ofname);
 7928|      0|                            }
 7929|      0|                        }
 7930|      0|                    }
 7931|      0|                }
 7932|      5|            }
 7933|      5|        }
 7934|      5|        if (!save_orig_name) {
 7935|      5|            save_orig_name = !no_name;
 7936|      5|        }
 7937|      5|        if (verbose) {
 7938|      0|            {
 7939|      0|                tmp___10 = strlen((char const *)(ifname));
 7940|      0|            }
 7941|      0|            if ((int)tmp___10 >= 15) {
 7942|      0|                tmp___9 = "";
 7943|      0|            }
 7944|      0|            else {
 7945|      0|                {
 7946|      0|                    tmp___8 = strlen((char const *)(ifname));
 7947|      0|                }
 7948|      0|                if ((int)tmp___8 >= 7) {
 7949|      0|                    tmp___7 = "\t";
 7950|      0|                }
 7951|      0|                else {
 7952|      0|                    tmp___7 = "\t\t";
 7953|      0|                }
 7954|      0|                tmp___9 = tmp___7;
 7955|      0|            }
 7956|      0|            {
 7957|      0|                fprintf((FILE * /* __restrict  */) stderr,
 7958|      0|                        (char const * /* __restrict  */) "%s:\t%s", ifname, tmp___9);
 7959|      0|            }
 7960|      0|        }
 7961|      5|        {
 7962|      5|            while (1) {
 7963|      5|while_continue: /* CIL Label */
 7964|      5|                ;
 7965|      5|                {
 7966|      5|                    tmp___11 = (*work)(ifd, ofd);
 7967|      5|                }
 7968|      5|                if (tmp___11 != 0) {
 7969|      0|                    method = -1;
 7970|      0|                    goto while_break;
 7971|      0|                }
 7972|      5|                if (!decompress) {
 7973|      5|                    goto while_break;
 7974|      5|                }
 7975|      0|                else {
 7976|      0|                    if (last_member) {
 7977|      0|                        goto while_break;
 7978|      0|                    }
 7979|      0|                    else {
 7980|      0|                        if (inptr == insize) {
 7981|      0|                            goto while_break;
 7982|      0|                        }
 7983|      0|                    }
 7984|      0|                }
 7985|      0|                {
 7986|      0|                    method = get_method(ifd);
 7987|      0|                }
 7988|      0|                if (method < 0) {
 7989|      0|                    goto while_break;
 7990|      0|                }
 7991|      0|                bytes_out = 0L;
 7992|      0|            }
 7993|      5|while_break: /* CIL Label */
 7994|      5|            ;
 7995|      5|        }
 7996|      0|        {
 7997|      5|            close(ifd);
 7998|      5|        }
 7999|      5|        if (!to_stdout) {
 8000|      5|            {
 8001|      5|                tmp___12 = close(ofd);
 8002|      5|            }
 8003|      5|            if (tmp___12) {
 8004|      0|                {
 8005|      0|                    write_error();
 8006|      0|                }
 8007|      0|            }
 8008|      5|        }
 8009|      5|        if (method == -1) {
 8010|      0|            if (!to_stdout) {
 8011|      0|                {
 8012|      0|                    unlink((char const *)(ofname));
 8013|      0|                }
 8014|      0|            }
 8015|      0|            return;
 8016|      0|        }
 8017|      5|        if (verbose) {
 8018|      0|            if (test) {
 8019|      0|                {
 8020|      0|                    fprintf((FILE * /* __restrict  */) stderr,
 8021|      0|                            (char const * /* __restrict  */) " OK");
 8022|      0|                }
 8023|      0|            }
 8024|      0|            else {
 8025|      0|                if (decompress) {
 8026|      0|                    {
 8027|      0|                        display_ratio(bytes_out - (bytes_in - header_bytes), bytes_out,
 8028|      0|                                      stderr);
 8029|      0|                    }
 8030|      0|                }
 8031|      0|                else {
 8032|      0|                    {
 8033|      0|                        display_ratio(bytes_in - (bytes_out - header_bytes), bytes_in,
 8034|      0|                                      stderr);
 8035|      0|                    }
 8036|      0|                }
 8037|      0|            }
 8038|      0|            if (!test) {
 8039|      0|                if (!to_stdout) {
 8040|      0|                    {
 8041|      0|                        fprintf((FILE * /* __restrict  */) stderr,
 8042|      0|                                (char const * /* __restrict  */) " -- replaced with %s",
 8043|      0|                                ofname);
 8044|      0|                    }
 8045|      0|                }
 8046|      0|            }
 8047|      0|            {
 8048|      0|                fprintf((FILE * /* __restrict  */) stderr,
 8049|      0|                        (char const * /* __restrict  */) "\n");
 8050|      0|            }
 8051|      0|        }
 8052|      5|        if (!to_stdout) {
 8053|      5|            {
 8054|      5|                copy_stat(&istat);
 8055|      5|            }
 8056|      5|        }
 8057|      5|        return;
 8058|      5|    }
 8059|      5|}
 8060|       |static int create_outfile(void)
 8061|      5|{
 8062|      5|    struct stat ostat;
 8063|      5|    int flags___0;
 8064|      5|    int tmp;
 8065|      5|    int tmp___0;
 8066|      5|    int tmp___1;
 8067|      5|    void *__cil_tmp6;
 8068|       |
 8069|      5|    {
 8070|      5|        flags___0 = 193;
 8071|      5|        if (ascii) {
 8072|      0|            if (decompress) {
 8073|      0|                flags___0 &= -1;
 8074|      0|            }
 8075|      0|        }
 8076|      5|        {
 8077|      5|            while (1) {
 8078|      5|while_continue: /* CIL Label */
 8079|      5|                ;
 8080|      5|                {
 8081|      5|                    tmp = check_ofname();
 8082|      5|                }
 8083|      5|                if (tmp != 0) {
 8084|      0|                    {
 8085|      0|                        close(ifd);
 8086|      0|                    }
 8087|      0|                    return (1);
 8088|      0|                }
 8089|      5|                {
 8090|      5|                    remove_ofname = 1;
 8091|      5|                    ofd = open((char const *)(ofname), flags___0, 384);
 8092|      5|                }
 8093|      5|                if (ofd == -1) {
 8094|      0|                    {
 8095|      0|                        perror((char const *)(ofname));
 8096|      0|                        close(ifd);
 8097|      0|                        exit_code = 1;
 8098|      0|                    }
 8099|      0|                    return (1);
 8100|      0|                }
 8101|      5|                {
 8102|      5|                    tmp___0 = fstat(ofd, &ostat);
 8103|      5|                }
 8104|      5|                if (tmp___0 != 0) {
 8105|      0|                    {
 8106|      0|                        fprintf((FILE * /* __restrict  */) stderr,
 8107|      0|                                (char const * /* __restrict  */) "%s: ", progname);
 8108|      0|                        perror((char const *)(ofname));
 8109|      0|                        close(ifd);
 8110|      0|                        close(ofd);
 8111|      0|                        unlink((char const *)(ofname));
 8112|      0|                        exit_code = 1;
 8113|      0|                    }
 8114|      0|                    return (1);
 8115|      0|                }
 8116|      5|                {
 8117|      5|                    tmp___1 = name_too_long(ofname, &ostat);
 8118|      5|                }
 8119|      5|                if (!tmp___1) {
 8120|      5|                    return (0);
 8121|      5|                }
 8122|      0|                if (decompress) {
 8123|      0|                    if (!quiet) {
 8124|      0|                        {
 8125|      0|                            fprintf(
 8126|      0|                                (FILE * /* __restrict  */) stderr,
 8127|      0|                                (char const
 8128|      0|                                 * /* __restrict  */) "%s: %s: warning, name truncated\n",
 8129|      0|                                progname, ofname);
 8130|      0|                        }
 8131|      0|                    }
 8132|      0|                    if (exit_code == 0) {
 8133|      0|                        exit_code = 2;
 8134|      0|                    }
 8135|      0|                    return (0);
 8136|      0|                }
 8137|      0|                {
 8138|      0|                    close(ofd);
 8139|      0|                    unlink((char const *)(ofname));
 8140|      0|                    shorten_name(ofname);
 8141|      0|                }
 8142|      0|            }
 8143|      0|while_break: /* CIL Label */
 8144|      0|            ;
 8145|      0|        }
 8146|      0|    }
 8147|      0|}
 8148|       |static int do_stat(char *name, struct stat *sbuf)
 8149|      5|{
 8150|      5|    int *tmp;
 8151|      5|    int tmp___0;
 8152|      5|    int tmp___1;
 8153|       |
 8154|      5|    {
 8155|      5|        {
 8156|      5|            tmp = __errno_location();
 8157|      5|            *tmp = 0;
 8158|      5|        }
 8159|      5|        if (!to_stdout) {
 8160|      5|            if (!force) {
 8161|      5|                {
 8162|      5|                    tmp___0 = lstat((char const * /* __restrict  */)name,
 8163|      5|                                    (struct stat * /* __restrict  */) sbuf);
 8164|      5|                }
 8165|      5|                return (tmp___0);
 8166|      5|            }
 8167|      5|        }
 8168|      0|        {
 8169|      0|            tmp___1 = stat((char const * /* __restrict  */)name,
 8170|      0|                           (struct stat * /* __restrict  */) sbuf);
 8171|      0|        }
 8172|      0|        return (tmp___1);
 8173|      5|    }
 8174|      5|}
 8175|       |static char *known_suffixes[9] = {
 8176|       |    z_suffix,       (char *)".gz",  (char *)".z",
 8177|       |    (char *)".taz", (char *)".tgz", (char *)"-gz",
 8178|       |    (char *)"-z",   (char *)"_z",   (char *)((void *)0)
 8179|       |};
 8180|       |static char *get_suffix(char *name)
 8181|      5|{
 8182|      5|    int nlen;
 8183|      5|    int slen;
 8184|      5|    char suffix[33];
 8185|      5|    char **suf;
 8186|      5|    int tmp;
 8187|      5|    int s;
 8188|      5|    int tmp___0;
 8189|      5|    int tmp___1;
 8190|      5|    void *__cil_tmp13;
 8191|       |
 8192|      5|    {
 8193|      5|        {
 8194|      5|            suf = known_suffixes;
 8195|      5|            tmp = strcmp((char const *)(z_suffix), "z");
 8196|      5|        }
 8197|      5|        if (tmp == 0) {
 8198|      0|            suf++;
 8199|      0|        }
 8200|      5|        {
 8201|      5|            nlen = (int)strlen((char const *)name);
 8202|      5|        }
 8203|      5|        if (nlen <= 32) {
 8204|      5|            {
 8205|      5|                strcpy((char * /* __restrict  */)(suffix),
 8206|      5|                       (char const * /* __restrict  */)name);
 8207|      5|            }
 8208|      5|        }
 8209|      0|        else {
 8210|      0|            {
 8211|      0|                strcpy((char * /* __restrict  */)(suffix),
 8212|      0|                       (char const * /* __restrict  */)(((name + nlen) - 30) - 2));
 8213|      0|            }
 8214|      0|        }
 8215|      5|        {
 8216|      5|            strlwr(suffix);
 8217|      5|            slen = (int)strlen((char const *)(suffix));
 8218|      5|        }
 8219|      5|        {
 8220|     40|            while (1) {
 8221|     40|while_continue: /* CIL Label */
 8222|     40|                ;
 8223|     40|                {
 8224|     40|                    tmp___0 = (int)strlen((char const *)*suf);
 8225|     40|                    s = tmp___0;
 8226|     40|                }
 8227|     40|                if (slen > s) {
 8228|     40|                    if ((int)suffix[(slen - s) - 1] != 47) {
 8229|     40|                        {
 8230|     40|                            tmp___1 = strcmp((char const *)((suffix + slen) - s),
 8231|     40|                                             (char const *)*suf);
 8232|     40|                        }
 8233|     40|                        if (tmp___1 == 0) {
 8234|      0|                            return ((name + nlen) - s);
 8235|      0|                        }
 8236|     40|                    }
 8237|     40|                }
 8238|     40|                suf++;
 8239|     40|                if (!((unsigned long)*suf != (unsigned long)((void *)0))) {
 8240|      5|                    goto while_break;
 8241|      5|                }
 8242|     40|            }
 8243|      5|while_break: /* CIL Label */
 8244|      5|            ;
 8245|      5|        }
 8246|      0|        return ((char *)((void *)0));
 8247|      5|    }
 8248|      5|}
 8249|       |static char *suffixes[6] = {z_suffix,     (char *)".gz", (char *)".z",
 8250|       |                            (char *)"-z", (char *)".Z",  (char *)((void *)0)
 8251|       |                           };
 8252|       |static int get_istat(char *iname, struct stat *sbuf)
 8253|      5|{
 8254|      5|    int ilen;
 8255|      5|    char **suf;
 8256|      5|    char *s;
 8257|      5|    int tmp;
 8258|      5|    int *tmp___0;
 8259|      5|    int tmp___1;
 8260|      5|    int tmp___2;
 8261|       |
 8262|      5|    {
 8263|      5|        {
 8264|      5|            suf = suffixes;
 8265|      5|            strcpy((char * /* __restrict  */)(ifname),
 8266|      5|                   (char const * /* __restrict  */)iname);
 8267|      5|            tmp = do_stat(ifname, sbuf);
 8268|      5|        }
 8269|      5|        if (tmp == 0) {
 8270|      5|            return (0);
 8271|      5|        }
 8272|      0|        if (!decompress) {
 8273|      0|            {
 8274|      0|                perror((char const *)(ifname));
 8275|      0|                exit_code = 1;
 8276|      0|            }
 8277|      0|            return (1);
 8278|      0|        }
 8279|      0|        else {
 8280|      0|            {
 8281|      0|                tmp___0 = __errno_location();
 8282|      0|            }
 8283|      0|            if (*tmp___0 != 2) {
 8284|      0|                {
 8285|      0|                    perror((char const *)(ifname));
 8286|      0|                    exit_code = 1;
 8287|      0|                }
 8288|      0|                return (1);
 8289|      0|            }
 8290|      0|        }
 8291|      0|        {
 8292|      0|            s = get_suffix(ifname);
 8293|      0|        }
 8294|      0|        if ((unsigned long)s != (unsigned long)((void *)0)) {
 8295|      0|            {
 8296|      0|                perror((char const *)(ifname));
 8297|      0|                exit_code = 1;
 8298|      0|            }
 8299|      0|            return (1);
 8300|      0|        }
 8301|      0|        {
 8302|      0|            ilen = (int)strlen((char const *)(ifname));
 8303|      0|            tmp___1 = strcmp((char const *)(z_suffix), ".gz");
 8304|      0|        }
 8305|      0|        if (tmp___1 == 0) {
 8306|      0|            suf++;
 8307|      0|        }
 8308|      0|        {
 8309|      0|            while (1) {
 8310|      0|while_continue: /* CIL Label */
 8311|      0|                ;
 8312|      0|                {
 8313|      0|                    s = *suf;
 8314|      0|                    strcat((char * /* __restrict  */)(ifname),
 8315|      0|                           (char const * /* __restrict  */)s);
 8316|      0|                    tmp___2 = do_stat(ifname, sbuf);
 8317|      0|                }
 8318|      0|                if (tmp___2 == 0) {
 8319|      0|                    return (0);
 8320|      0|                }
 8321|      0|                ifname[ilen] = (char)'\000';
 8322|      0|                suf++;
 8323|      0|                if (!((unsigned long)*suf != (unsigned long)((void *)0))) {
 8324|      0|                    goto while_break;
 8325|      0|                }
 8326|      0|            }
 8327|      0|while_break: /* CIL Label */
 8328|      0|            ;
 8329|      0|        }
 8330|      0|        {
 8331|      0|            strcat((char * /* __restrict  */)(ifname),
 8332|      0|                   (char const * /* __restrict  */)(z_suffix));
 8333|      0|            perror((char const *)(ifname));
 8334|      0|            exit_code = 1;
 8335|      0|        }
 8336|      0|        return (1);
 8337|      0|    }
 8338|      0|}
 8339|       |static int make_ofname(void)
 8340|      5|{
 8341|      5|    char *suff;
 8342|      5|    int tmp;
 8343|      5|    int tmp___0;
 8344|      5|    char *__cil_tmp4;
 8345|      5|    char *__cil_tmp5;
 8346|       |
 8347|      5|    {
 8348|      5|        {
 8349|      5|            strcpy((char * /* __restrict  */)(ofname),
 8350|      5|                   (char const * /* __restrict  */)(ifname));
 8351|      5|            suff = get_suffix(ofname);
 8352|      5|        }
 8353|      5|        if (decompress) {
 8354|      0|            if ((unsigned long)suff == (unsigned long)((void *)0)) {
 8355|      0|                if (!recursive) {
 8356|      0|                    if (list) {
 8357|      0|                        return (0);
 8358|      0|                    }
 8359|      0|                    else {
 8360|      0|                        if (test) {
 8361|      0|                            return (0);
 8362|      0|                        }
 8363|      0|                    }
 8364|      0|                }
 8365|      0|                if (verbose) {
 8366|      0|                    goto _L;
 8367|      0|                }
 8368|      0|                else {
 8369|      0|                    if (!recursive) {
 8370|      0|                        if (!quiet) {
 8371|      0|_L:
 8372|      0|                            if (!quiet) {
 8373|      0|                                {
 8374|      0|                                    fprintf(
 8375|      0|                                        (FILE * /* __restrict  */) stderr,
 8376|      0|                                        (char const * /* __restrict  */) "%s: %s: unknown suffix "
 8377|      0|                                        "-- ignored\n",
 8378|      0|                                        progname, ifname);
 8379|      0|                                }
 8380|      0|                            }
 8381|      0|                            if (exit_code == 0) {
 8382|      0|                                exit_code = 2;
 8383|      0|                            }
 8384|      0|                        }
 8385|      0|                    }
 8386|      0|                }
 8387|      0|                return (2);
 8388|      0|            }
 8389|      0|            {
 8390|      0|                strlwr(suff);
 8391|      0|                tmp = strcmp((char const *)suff, ".tgz");
 8392|      0|            }
 8393|      0|            if (tmp == 0) {
 8394|      0|                {
 8395|      0|                    strcpy((char * /* __restrict  */)suff,
 8396|      0|                           (char const * /* __restrict  */) ".tar");
 8397|      0|                }
 8398|      0|            }
 8399|      0|            else {
 8400|      0|                {
 8401|      0|                    tmp___0 = strcmp((char const *)suff, ".taz");
 8402|      0|                }
 8403|      0|                if (tmp___0 == 0) {
 8404|      0|                    {
 8405|      0|                        strcpy((char * /* __restrict  */)suff,
 8406|      0|                               (char const * /* __restrict  */) ".tar");
 8407|      0|                    }
 8408|      0|                }
 8409|      0|                else {
 8410|      0|                    *suff = (char)'\000';
 8411|      0|                }
 8412|      0|            }
 8413|      0|        }
 8414|      5|        else {
 8415|      5|            if ((unsigned long)suff != (unsigned long)((void *)0)) {
 8416|      0|                if (verbose) {
 8417|      0|                    {
 8418|      0|                        fprintf((FILE * /* __restrict  */) stderr,
 8419|      0|                                (char const * /* __restrict  */) "%s: %s already has %s "
 8420|      0|                                "suffix -- unchanged\n",
 8421|      0|                                progname, ifname, suff);
 8422|      0|                    }
 8423|      0|                }
 8424|      0|                else {
 8425|      0|                    if (!recursive) {
 8426|      0|                        if (!quiet) {
 8427|      0|                            {
 8428|      0|                                fprintf(
 8429|      0|                                    (FILE * /* __restrict  */) stderr,
 8430|      0|                                    (char const * /* __restrict  */) "%s: %s already has %s "
 8431|      0|                                    "suffix -- unchanged\n",
 8432|      0|                                    progname, ifname, suff);
 8433|      0|                            }
 8434|      0|                        }
 8435|      0|                    }
 8436|      0|                }
 8437|      0|                if (exit_code == 0) {
 8438|      0|                    exit_code = 2;
 8439|      0|                }
 8440|      0|                return (2);
 8441|      0|            }
 8442|      5|            else {
 8443|      5|                {
 8444|      5|                    save_orig_name = 0;
 8445|      5|                    strcat((char * /* __restrict  */)(ofname),
 8446|      5|                           (char const * /* __restrict  */)(z_suffix));
 8447|      5|                }
 8448|      5|            }
 8449|      5|        }
 8450|      5|        return (0);
 8451|      5|    }
 8452|      5|}
 8453|       |static int get_method(int in)
 8454|      0|{
 8455|      0|    uch flags___0;
 8456|      0|    char magic[2];
 8457|      0|    ulg stamp;
 8458|      0|    unsigned int tmp;
 8459|      0|    int tmp___0;
 8460|      0|    int tmp___1;
 8461|      0|    unsigned int tmp___2;
 8462|      0|    int tmp___3;
 8463|      0|    int tmp___4;
 8464|      0|    unsigned int tmp___5;
 8465|      0|    int tmp___6;
 8466|      0|    int tmp___7;
 8467|      0|    unsigned int tmp___8;
 8468|      0|    int tmp___9;
 8469|      0|    int tmp___10;
 8470|      0|    unsigned int tmp___11;
 8471|      0|    int tmp___12;
 8472|      0|    int tmp___13;
 8473|      0|    unsigned int tmp___14;
 8474|      0|    int tmp___15;
 8475|      0|    int tmp___16;
 8476|      0|    unsigned int tmp___17;
 8477|      0|    int tmp___18;
 8478|      0|    int tmp___19;
 8479|      0|    unsigned int tmp___20;
 8480|      0|    int tmp___21;
 8481|      0|    int tmp___22;
 8482|      0|    unsigned int tmp___23;
 8483|      0|    int tmp___24;
 8484|      0|    int tmp___25;
 8485|      0|    unsigned int tmp___26;
 8486|      0|    int tmp___27;
 8487|      0|    int tmp___28;
 8488|      0|    unsigned int tmp___29;
 8489|      0|    unsigned int tmp___30;
 8490|      0|    unsigned int part;
 8491|      0|    unsigned int tmp___31;
 8492|      0|    int tmp___32;
 8493|      0|    int tmp___33;
 8494|      0|    unsigned int tmp___34;
 8495|      0|    int tmp___35;
 8496|      0|    int tmp___36;
 8497|      0|    unsigned int len;
 8498|      0|    unsigned int tmp___37;
 8499|      0|    int tmp___38;
 8500|      0|    int tmp___39;
 8501|      0|    unsigned int tmp___40;
 8502|      0|    int tmp___41;
 8503|      0|    int tmp___42;
 8504|      0|    unsigned int tmp___43;
 8505|      0|    unsigned int tmp___44;
 8506|      0|    char c;
 8507|      0|    unsigned int tmp___45;
 8508|      0|    int tmp___46;
 8509|      0|    char *p;
 8510|      0|    char *tmp___47;
 8511|      0|    char *base;
 8512|      0|    unsigned int tmp___48;
 8513|      0|    int tmp___49;
 8514|      0|    int tmp___50;
 8515|      0|    char *tmp___51;
 8516|      0|    unsigned int tmp___52;
 8517|      0|    int tmp___53;
 8518|      0|    int tmp___54;
 8519|      0|    int tmp___55;
 8520|      0|    int tmp___56;
 8521|      0|    int tmp___57;
 8522|      0|    int tmp___58;
 8523|      0|    int tmp___59;
 8524|      0|    int tmp___60;
 8525|      0|    int tmp___61;
 8526|      0|    int tmp___62;
 8527|      0|    void *__cil_tmp74;
 8528|      0|    char *__cil_tmp75;
 8529|       |
 8530|      0|    {
 8531|      0|        if (force) {
 8532|      0|            if (to_stdout) {
 8533|      0|                if (inptr < insize) {
 8534|      0|                    tmp = inptr;
 8535|      0|                    inptr++;
 8536|      0|                    tmp___1 = (int)inbuf[tmp];
 8537|      0|                }
 8538|      0|                else {
 8539|      0|                    {
 8540|      0|                        tmp___0 = fill_inbuf(1);
 8541|      0|                        tmp___1 = tmp___0;
 8542|      0|                    }
 8543|      0|                }
 8544|      0|                magic[0] = (char)tmp___1;
 8545|      0|                if (inptr < insize) {
 8546|      0|                    tmp___2 = inptr;
 8547|      0|                    inptr++;
 8548|      0|                    tmp___4 = (int)inbuf[tmp___2];
 8549|      0|                }
 8550|      0|                else {
 8551|      0|                    {
 8552|      0|                        tmp___3 = fill_inbuf(1);
 8553|      0|                        tmp___4 = tmp___3;
 8554|      0|                    }
 8555|      0|                }
 8556|      0|                magic[1] = (char)tmp___4;
 8557|      0|            }
 8558|      0|            else {
 8559|      0|                goto _L;
 8560|      0|            }
 8561|      0|        }
 8562|      0|        else {
 8563|      0|_L:
 8564|      0|            if (inptr < insize) {
 8565|      0|                tmp___5 = inptr;
 8566|      0|                inptr++;
 8567|      0|                tmp___7 = (int)inbuf[tmp___5];
 8568|      0|            }
 8569|      0|            else {
 8570|      0|                {
 8571|      0|                    tmp___6 = fill_inbuf(0);
 8572|      0|                    tmp___7 = tmp___6;
 8573|      0|                }
 8574|      0|            }
 8575|      0|            magic[0] = (char)tmp___7;
 8576|      0|            if (inptr < insize) {
 8577|      0|                tmp___8 = inptr;
 8578|      0|                inptr++;
 8579|      0|                tmp___10 = (int)inbuf[tmp___8];
 8580|      0|            }
 8581|      0|            else {
 8582|      0|                {
 8583|      0|                    tmp___9 = fill_inbuf(0);
 8584|      0|                    tmp___10 = tmp___9;
 8585|      0|                }
 8586|      0|            }
 8587|      0|            magic[1] = (char)tmp___10;
 8588|      0|        }
 8589|      0|        {
 8590|      0|            method = -1;
 8591|      0|            part_nb++;
 8592|      0|            header_bytes = 0L;
 8593|      0|            last_member = 0;
 8594|      0|            tmp___61 =
 8595|      0|                memcmp((void const *)(magic), (void const *)"\037\213", (size_t)2);
 8596|      0|        }
 8597|      0|        if (tmp___61 == 0) {
 8598|      0|            goto _L___4;
 8599|      0|        }
 8600|      0|        else {
 8601|      0|            {
 8602|      0|                tmp___62 =
 8603|      0|                    memcmp((void const *)(magic), (void const *)"\037\236", (size_t)2);
 8604|      0|            }
 8605|      0|            if (tmp___62 == 0) {
 8606|      0|_L___4:
 8607|      0|                if (inptr < insize) {
 8608|      0|                    tmp___11 = inptr;
 8609|      0|                    inptr++;
 8610|      0|                    tmp___13 = (int)inbuf[tmp___11];
 8611|      0|                }
 8612|      0|                else {
 8613|      0|                    {
 8614|      0|                        tmp___12 = fill_inbuf(0);
 8615|      0|                        tmp___13 = tmp___12;
 8616|      0|                    }
 8617|      0|                }
 8618|      0|                method = tmp___13;
 8619|      0|                if (method != 8) {
 8620|      0|                    {
 8621|      0|                        fprintf(
 8622|      0|                            (FILE * /* __restrict  */) stderr,
 8623|      0|                            (char const * /* __restrict  */) "%s: %s: unknown method %d -- "
 8624|      0|                            "get newer version of gzip\n",
 8625|      0|                            progname, ifname, method);
 8626|      0|                        exit_code = 1;
 8627|      0|                    }
 8628|      0|                    return (-1);
 8629|      0|                }
 8630|      0|                work = &unzip;
 8631|      0|                if (inptr < insize) {
 8632|      0|                    tmp___14 = inptr;
 8633|      0|                    inptr++;
 8634|      0|                    tmp___16 = (int)inbuf[tmp___14];
 8635|      0|                }
 8636|      0|                else {
 8637|      0|                    {
 8638|      0|                        tmp___15 = fill_inbuf(0);
 8639|      0|                        tmp___16 = tmp___15;
 8640|      0|                    }
 8641|      0|                }
 8642|      0|                flags___0 = (uch)tmp___16;
 8643|      0|                if (((int)flags___0 & 32) != 0) {
 8644|      0|                    {
 8645|      0|                        fprintf(
 8646|      0|                            (FILE * /* __restrict  */) stderr,
 8647|      0|                            (char const * /* __restrict  */) "%s: %s is encrypted -- get "
 8648|      0|                            "newer version of gzip\n",
 8649|      0|                            progname, ifname);
 8650|      0|                        exit_code = 1;
 8651|      0|                    }
 8652|      0|                    return (-1);
 8653|      0|                }
 8654|      0|                if (((int)flags___0 & 2) != 0) {
 8655|      0|                    {
 8656|      0|                        fprintf(
 8657|      0|                            (FILE * /* __restrict  */) stderr,
 8658|      0|                            (char const
 8659|      0|                             * /* __restrict  */) "%s: %s is a a multi-part gzip file "
 8660|      0|                            "-- get newer version of gzip\n",
 8661|      0|                            progname, ifname);
 8662|      0|                        exit_code = 1;
 8663|      0|                    }
 8664|      0|                    if (force <= 1) {
 8665|      0|                        return (-1);
 8666|      0|                    }
 8667|      0|                }
 8668|      0|                if (((int)flags___0 & 192) != 0) {
 8669|      0|                    {
 8670|      0|                        fprintf(
 8671|      0|                            (FILE * /* __restrict  */) stderr,
 8672|      0|                            (char const * /* __restrict  */) "%s: %s has flags 0x%x -- get "
 8673|      0|                            "newer version of gzip\n",
 8674|      0|                            progname, ifname, (int)flags___0);
 8675|      0|                        exit_code = 1;
 8676|      0|                    }
 8677|      0|                    if (force <= 1) {
 8678|      0|                        return (-1);
 8679|      0|                    }
 8680|      0|                }
 8681|      0|                if (inptr < insize) {
 8682|      0|                    tmp___17 = inptr;
 8683|      0|                    inptr++;
 8684|      0|                    tmp___19 = (int)inbuf[tmp___17];
 8685|      0|                }
 8686|      0|                else {
 8687|      0|                    {
 8688|      0|                        tmp___18 = fill_inbuf(0);
 8689|      0|                        tmp___19 = tmp___18;
 8690|      0|                    }
 8691|      0|                }
 8692|      0|                stamp = (ulg)tmp___19;
 8693|      0|                if (inptr < insize) {
 8694|      0|                    tmp___20 = inptr;
 8695|      0|                    inptr++;
 8696|      0|                    tmp___22 = (int)inbuf[tmp___20];
 8697|      0|                }
 8698|      0|                else {
 8699|      0|                    {
 8700|      0|                        tmp___21 = fill_inbuf(0);
 8701|      0|                        tmp___22 = tmp___21;
 8702|      0|                    }
 8703|      0|                }
 8704|      0|                stamp |= (ulg)tmp___22 << 8;
 8705|      0|                if (inptr < insize) {
 8706|      0|                    tmp___23 = inptr;
 8707|      0|                    inptr++;
 8708|      0|                    tmp___25 = (int)inbuf[tmp___23];
 8709|      0|                }
 8710|      0|                else {
 8711|      0|                    {
 8712|      0|                        tmp___24 = fill_inbuf(0);
 8713|      0|                        tmp___25 = tmp___24;
 8714|      0|                    }
 8715|      0|                }
 8716|      0|                stamp |= (ulg)tmp___25 << 16;
 8717|      0|                if (inptr < insize) {
 8718|      0|                    tmp___26 = inptr;
 8719|      0|                    inptr++;
 8720|      0|                    tmp___28 = (int)inbuf[tmp___26];
 8721|      0|                }
 8722|      0|                else {
 8723|      0|                    {
 8724|      0|                        tmp___27 = fill_inbuf(0);
 8725|      0|                        tmp___28 = tmp___27;
 8726|      0|                    }
 8727|      0|                }
 8728|      0|                stamp |= (ulg)tmp___28 << 24;
 8729|      0|                if (stamp != 0UL) {
 8730|      0|                    if (!no_time) {
 8731|      0|                        time_stamp = (long)stamp;
 8732|      0|                    }
 8733|      0|                }
 8734|      0|                if (inptr < insize) {
 8735|      0|                    tmp___29 = inptr;
 8736|      0|                    inptr++;
 8737|      0|                }
 8738|      0|                else {
 8739|      0|                    {
 8740|      0|                        fill_inbuf(0);
 8741|      0|                    }
 8742|      0|                }
 8743|      0|                if (inptr < insize) {
 8744|      0|                    tmp___30 = inptr;
 8745|      0|                    inptr++;
 8746|      0|                }
 8747|      0|                else {
 8748|      0|                    {
 8749|      0|                        fill_inbuf(0);
 8750|      0|                    }
 8751|      0|                }
 8752|      0|                if (((int)flags___0 & 2) != 0) {
 8753|      0|                    if (inptr < insize) {
 8754|      0|                        tmp___31 = inptr;
 8755|      0|                        inptr++;
 8756|      0|                        tmp___33 = (int)inbuf[tmp___31];
 8757|      0|                    }
 8758|      0|                    else {
 8759|      0|                        {
 8760|      0|                            tmp___32 = fill_inbuf(0);
 8761|      0|                            tmp___33 = tmp___32;
 8762|      0|                        }
 8763|      0|                    }
 8764|      0|                    part = (unsigned int)tmp___33;
 8765|      0|                    if (inptr < insize) {
 8766|      0|                        tmp___34 = inptr;
 8767|      0|                        inptr++;
 8768|      0|                        tmp___36 = (int)inbuf[tmp___34];
 8769|      0|                    }
 8770|      0|                    else {
 8771|      0|                        {
 8772|      0|                            tmp___35 = fill_inbuf(0);
 8773|      0|                            tmp___36 = tmp___35;
 8774|      0|                        }
 8775|      0|                    }
 8776|      0|                    part |= (unsigned int)tmp___36 << 8;
 8777|      0|                    if (verbose) {
 8778|      0|                        {
 8779|      0|                            fprintf(
 8780|      0|                                (FILE * /* __restrict  */) stderr,
 8781|      0|                                (char const * /* __restrict  */) "%s: %s: part number %u\n",
 8782|      0|                                progname, ifname, part);
 8783|      0|                        }
 8784|      0|                    }
 8785|      0|                }
 8786|      0|                if (((int)flags___0 & 4) != 0) {
 8787|      0|                    if (inptr < insize) {
 8788|      0|                        tmp___37 = inptr;
 8789|      0|                        inptr++;
 8790|      0|                        tmp___39 = (int)inbuf[tmp___37];
 8791|      0|                    }
 8792|      0|                    else {
 8793|      0|                        {
 8794|      0|                            tmp___38 = fill_inbuf(0);
 8795|      0|                            tmp___39 = tmp___38;
 8796|      0|                        }
 8797|      0|                    }
 8798|      0|                    len = (unsigned int)tmp___39;
 8799|      0|                    if (inptr < insize) {
 8800|      0|                        tmp___40 = inptr;
 8801|      0|                        inptr++;
 8802|      0|                        tmp___42 = (int)inbuf[tmp___40];
 8803|      0|                    }
 8804|      0|                    else {
 8805|      0|                        {
 8806|      0|                            tmp___41 = fill_inbuf(0);
 8807|      0|                            tmp___42 = tmp___41;
 8808|      0|                        }
 8809|      0|                    }
 8810|      0|                    len |= (unsigned int)tmp___42 << 8;
 8811|      0|                    if (verbose) {
 8812|      0|                        {
 8813|      0|                            fprintf((FILE * /* __restrict  */) stderr,
 8814|      0|                                    (char const * /* __restrict  */) "%s: %s: extra field of "
 8815|      0|                                    "%u bytes ignored\n",
 8816|      0|                                    progname, ifname, len);
 8817|      0|                        }
 8818|      0|                    }
 8819|      0|                    {
 8820|      0|                        while (1) {
 8821|      0|while_continue: /* CIL Label */
 8822|      0|                            ;
 8823|      0|                            tmp___44 = len;
 8824|      0|                            len--;
 8825|      0|                            if (!tmp___44) {
 8826|      0|                                goto while_break;
 8827|      0|                            }
 8828|      0|                            if (inptr < insize) {
 8829|      0|                                tmp___43 = inptr;
 8830|      0|                                inptr++;
 8831|      0|                            }
 8832|      0|                            else {
 8833|      0|                                {
 8834|      0|                                    fill_inbuf(0);
 8835|      0|                                }
 8836|      0|                            }
 8837|      0|                        }
 8838|      0|while_break: /* CIL Label */
 8839|      0|                        ;
 8840|      0|                    }
 8841|      0|                }
 8842|      0|                if (((int)flags___0 & 8) != 0) {
 8843|      0|                    if (no_name) {
 8844|      0|                        goto _L___0;
 8845|      0|                    }
 8846|      0|                    else {
 8847|      0|                        if (to_stdout) {
 8848|      0|                            if (!list) {
 8849|      0|                                goto _L___0;
 8850|      0|                            }
 8851|      0|                            else {
 8852|      0|                                goto _L___1;
 8853|      0|                            }
 8854|      0|                        }
 8855|      0|                        else {
 8856|      0|_L___1:
 8857|      0|                            if (part_nb > 1) {
 8858|      0|_L___0 : {
 8859|      0|                                    while (1) {
 8860|      0|while_continue___0: /* CIL Label */
 8861|      0|                                        ;
 8862|      0|                                        if (inptr < insize) {
 8863|      0|                                            tmp___45 = inptr;
 8864|      0|                                            inptr++;
 8865|      0|                                            c = (char)inbuf[tmp___45];
 8866|      0|                                        }
 8867|      0|                                        else {
 8868|      0|                                            {
 8869|      0|                                                tmp___46 = fill_inbuf(0);
 8870|      0|                                                c = (char)tmp___46;
 8871|      0|                                            }
 8872|      0|                                        }
 8873|      0|                                        if (!((int)c != 0)) {
 8874|      0|                                            goto while_break___0;
 8875|      0|                                        }
 8876|      0|                                    }
 8877|      0|while_break___0: /* CIL Label */
 8878|      0|                                    ;
 8879|      0|                                }
 8880|      0|                            }
 8881|      0|                            else {
 8882|      0|                                {
 8883|      0|                                    tmp___47 = basename(ofname);
 8884|      0|                                    p = tmp___47;
 8885|      0|                                    base = p;
 8886|      0|                                }
 8887|      0|                                {
 8888|      0|                                    while (1) {
 8889|      0|while_continue___1: /* CIL Label */
 8890|      0|                                        ;
 8891|      0|                                        if (inptr < insize) {
 8892|      0|                                            tmp___48 = inptr;
 8893|      0|                                            inptr++;
 8894|      0|                                            tmp___50 = (int)inbuf[tmp___48];
 8895|      0|                                        }
 8896|      0|                                        else {
 8897|      0|                                            {
 8898|      0|                                                tmp___49 = fill_inbuf(0);
 8899|      0|                                                tmp___50 = tmp___49;
 8900|      0|                                            }
 8901|      0|                                        }
 8902|      0|                                        *p = (char)tmp___50;
 8903|      0|                                        tmp___51 = p;
 8904|      0|                                        p++;
 8905|      0|                                        if ((int)*tmp___51 == 0) {
 8906|      0|                                            goto while_break___1;
 8907|      0|                                        }
 8908|      0|                                        if ((unsigned long)p >=
 8909|      0|                                                (unsigned long)(ofname + sizeof(ofname))) {
 8910|      0|                                            {
 8911|      0|                                                error((char *)"corrupted input -- file name too large");
 8912|      0|                                            }
 8913|      0|                                        }
 8914|      0|                                    }
 8915|      0|while_break___1: /* CIL Label */
 8916|      0|                                    ;
 8917|      0|                                }
 8918|      0|                                if (!list) {
 8919|      0|                                    if (base) {
 8920|      0|                                        list = 0;
 8921|      0|                                    }
 8922|      0|                                }
 8923|      0|                            }
 8924|      0|                        }
 8925|      0|                    }
 8926|      0|                }
 8927|      0|                if (((int)flags___0 & 16) != 0) {
 8928|      0|                    {
 8929|      0|                        while (1) {
 8930|      0|while_continue___2: /* CIL Label */
 8931|      0|                            ;
 8932|      0|                            if (inptr < insize) {
 8933|      0|                                tmp___52 = inptr;
 8934|      0|                                inptr++;
 8935|      0|                                tmp___54 = (int)inbuf[tmp___52];
 8936|      0|                            }
 8937|      0|                            else {
 8938|      0|                                {
 8939|      0|                                    tmp___53 = fill_inbuf(0);
 8940|      0|                                    tmp___54 = tmp___53;
 8941|      0|                                }
 8942|      0|                            }
 8943|      0|                            if (!(tmp___54 != 0)) {
 8944|      0|                                goto while_break___2;
 8945|      0|                            }
 8946|      0|                        }
 8947|      0|while_break___2: /* CIL Label */
 8948|      0|                        ;
 8949|      0|                    }
 8950|      0|                }
 8951|      0|                if (part_nb == 1) {
 8952|      0|                    header_bytes = (long)((unsigned long)inptr + 2UL * sizeof(long));
 8953|      0|                }
 8954|      0|            }
 8955|      0|            else {
 8956|      0|                {
 8957|      0|                    tmp___59 = memcmp((void const *)(magic), (void const *)"PK\003\004",
 8958|      0|                                      (size_t)2);
 8959|      0|                }
 8960|      0|                if (tmp___59 == 0) {
 8961|      0|                    if (inptr == 2U) {
 8962|      0|                        {
 8963|      0|                            tmp___60 = memcmp((void const *)((char *)(inbuf)),
 8964|      0|                                              (void const *)"PK\003\004", (size_t)4);
 8965|      0|                        }
 8966|      0|                        if (tmp___60 == 0) {
 8967|      0|                            {
 8968|      0|                                inptr = 0U;
 8969|      0|                                work = &unzip;
 8970|      0|                                tmp___55 = check_zipfile(in);
 8971|      0|                            }
 8972|      0|                            if (tmp___55 != 0) {
 8973|      0|                                return (-1);
 8974|      0|                            }
 8975|      0|                            last_member = 1;
 8976|      0|                        }
 8977|      0|                        else {
 8978|      0|                            goto _L___3;
 8979|      0|                        }
 8980|      0|                    }
 8981|      0|                    else {
 8982|      0|                        goto _L___3;
 8983|      0|                    }
 8984|      0|                }
 8985|      0|                else {
 8986|      0|_L___3 : {
 8987|      0|                        tmp___58 = memcmp((void const *)(magic), (void const *)"\037\036",
 8988|      0|                                          (size_t)2);
 8989|      0|                    }
 8990|      0|                    if (tmp___58 == 0) {
 8991|      0|                        work = &unpack;
 8992|      0|                        method = 2;
 8993|      0|                    }
 8994|      0|                    else {
 8995|      0|                        {
 8996|      0|                            tmp___57 = memcmp((void const *)(magic), (void const *)"\037\235",
 8997|      0|                                              (size_t)2);
 8998|      0|                        }
 8999|      0|                        if (tmp___57 == 0) {
 9000|      0|                            work = &unlzw;
 9001|      0|                            method = 1;
 9002|      0|                            last_member = 1;
 9003|      0|                        }
 9004|      0|                        else {
 9005|      0|                            {
 9006|      0|                                tmp___56 = memcmp((void const *)(magic),
 9007|      0|                                                  (void const *)"\037\240", (size_t)2);
 9008|      0|                            }
 9009|      0|                            if (tmp___56 == 0) {
 9010|      0|                                work = &unlzh;
 9011|      0|                                method = 3;
 9012|      0|                                last_member = 1;
 9013|      0|                            }
 9014|      0|                            else {
 9015|      0|                                if (force) {
 9016|      0|                                    if (to_stdout) {
 9017|      0|                                        if (!list) {
 9018|      0|                                            method = 0;
 9019|      0|                                            work = &copy;
 9020|      0|                                            inptr = 0U;
 9021|      0|                                            last_member = 1;
 9022|      0|                                        }
 9023|      0|                                    }
 9024|      0|                                }
 9025|      0|                            }
 9026|      0|                        }
 9027|      0|                    }
 9028|      0|                }
 9029|      0|            }
 9030|      0|        }
 9031|      0|        if (method >= 0) {
 9032|      0|            return (method);
 9033|      0|        }
 9034|      0|        if (part_nb == 1) {
 9035|      0|            {
 9036|      0|                fprintf(
 9037|      0|                    (FILE * /* __restrict  */) stderr,
 9038|      0|                    (char const * /* __restrict  */) "\n%s: %s: not in gzip format\n",
 9039|      0|                    progname, ifname);
 9040|      0|                exit_code = 1;
 9041|      0|            }
 9042|      0|            return (-1);
 9043|      0|        }
 9044|      0|        else {
 9045|      0|            if (!quiet) {
 9046|      0|                {
 9047|      0|                    fprintf(
 9048|      0|                        (FILE * /* __restrict  */) stderr,
 9049|      0|                        (char const * /* __restrict  */) "\n%s: %s: decompression OK, "
 9050|      0|                        "trailing garbage ignored\n",
 9051|      0|                        progname, ifname);
 9052|      0|                }
 9053|      0|            }
 9054|      0|            if (exit_code == 0) {
 9055|      0|                exit_code = 2;
 9056|      0|            }
 9057|      0|            return (-2);
 9058|      0|        }
 9059|      0|    }
 9060|      0|}
 9061|       |static int first_time = 1;
 9062|       |static char *methods[9] = {(char *)"store", (char *)"compr", (char *)"pack ",
 9063|       |                           (char *)"lzh  ", (char *)"",      (char *)"",
 9064|       |                           (char *)"",      (char *)"",      (char *)"defla"
 9065|       |                          };
 9066|       |static void do_list(int ifd___0, int method___0)
 9067|      0|{
 9068|      0|    ulg crc___1;
 9069|      0|    char *date;
 9070|      0|    __off_t tmp;
 9071|      0|    uch buf[8];
 9072|      0|    ssize_t tmp___0;
 9073|      0|    char *tmp___1;
 9074|      0|    void *__cil_tmp9;
 9075|       |
 9076|      0|    {
 9077|      0|        if (first_time) {
 9078|      0|            if (method___0 >= 0) {
 9079|      0|                first_time = 0;
 9080|      0|                if (verbose) {
 9081|      0|                    {
 9082|      0|                        printf((
 9083|      0|                                   char const * /* __restrict  */) "method  crc     date  time  ");
 9084|      0|                    }
 9085|      0|                }
 9086|      0|                if (!quiet) {
 9087|      0|                    {
 9088|      0|                        printf(
 9089|      0|                            (char const * /* __restrict  */) "compressed  uncompr. ratio "
 9090|      0|                            "uncompressed_name\n");
 9091|      0|                    }
 9092|      0|                }
 9093|      0|            }
 9094|      0|            else {
 9095|      0|                goto _L;
 9096|      0|            }
 9097|      0|        }
 9098|      0|        else {
 9099|      0|_L:
 9100|      0|            if (method___0 < 0) {
 9101|      0|                if (total_in <= 0L) {
 9102|      0|                    return;
 9103|      0|                }
 9104|      0|                else {
 9105|      0|                    if (total_out <= 0L) {
 9106|      0|                        return;
 9107|      0|                    }
 9108|      0|                }
 9109|      0|                if (verbose) {
 9110|      0|                    {
 9111|      0|                        printf((char const * /* __restrict  */) "                          "
 9112|      0|                               "  %9lu %9lu ",
 9113|      0|                               total_in, total_out);
 9114|      0|                    }
 9115|      0|                }
 9116|      0|                else {
 9117|      0|                    if (!quiet) {
 9118|      0|                        {
 9119|      0|                            printf((char const * /* __restrict  */) "%9ld %9ld ", total_in,
 9120|      0|                                   total_out);
 9121|      0|                        }
 9122|      0|                    }
 9123|      0|                }
 9124|      0|                {
 9125|      0|                    display_ratio(total_out - (total_in - header_bytes), total_out,
 9126|      0|                                  stdout);
 9127|      0|                    printf((char const * /* __restrict  */) " (totals)\n");
 9128|      0|                }
 9129|      0|                return;
 9130|      0|            }
 9131|      0|        }
 9132|      0|        crc___1 = (ulg)(~0);
 9133|      0|        bytes_out = -1L;
 9134|      0|        bytes_in = ifile_size;
 9135|      0|        if (method___0 == 8) {
 9136|      0|            if (!last_member) {
 9137|      0|                {
 9138|      0|                    tmp = lseek(ifd___0, (off_t)-8, 2);
 9139|      0|                    bytes_in = tmp;
 9140|      0|                }
 9141|      0|                if (bytes_in != -1L) {
 9142|      0|                    {
 9143|      0|                        bytes_in += 8L;
 9144|      0|                        tmp___0 = read(ifd___0, (void *)((char *)(buf)), sizeof(buf));
 9145|      0|                    }
 9146|      0|                    if ((unsigned long)tmp___0 != sizeof(buf)) {
 9147|      0|                        {
 9148|      0|                            read_error();
 9149|      0|                        }
 9150|      0|                    }
 9151|      0|                    crc___1 = (ulg)((int)((ush)buf[0]) | ((int)((ush)buf[1]) << 8)) |
 9152|      0|                              ((ulg)((int)((ush) * ((buf + 2) + 0)) |
 9153|      0|                                     ((int)((ush) * ((buf + 2) + 1)) << 8))
 9154|      0|                               << 16);
 9155|      0|                    bytes_out = (long)((ulg)((int)((ush) * ((buf + 4) + 0)) |
 9156|      0|                                             ((int)((ush) * ((buf + 4) + 1)) << 8)) |
 9157|      0|                                       ((ulg)((int)((ush) * (((buf + 4) + 2) + 0)) |
 9158|      0|                                              ((int)((ush) * (((buf + 4) + 2) + 1)) << 8))
 9159|      0|                                        << 16));
 9160|      0|                }
 9161|      0|            }
 9162|      0|        }
 9163|      0|        {
 9164|      0|            tmp___1 = ctime((time_t const *)(&time_stamp));
 9165|      0|            date = tmp___1 + 4;
 9166|      0|            *(date + 12) = (char)'\000';
 9167|      0|        }
 9168|      0|        if (verbose) {
 9169|      0|            {
 9170|      0|                printf((char const * /* __restrict  */) "%5s %08lx %11s ",
 9171|      0|                       methods[method___0], crc___1, date);
 9172|      0|            }
 9173|      0|        }
 9174|      0|        {
 9175|      0|            printf((char const * /* __restrict  */) "%9ld %9ld ", bytes_in,
 9176|      0|                   bytes_out);
 9177|      0|        }
 9178|      0|        if (bytes_in == -1L) {
 9179|      0|            total_in = -1L;
 9180|      0|            header_bytes = 0L;
 9181|      0|            bytes_out = header_bytes;
 9182|      0|            bytes_in = bytes_out;
 9183|      0|        }
 9184|      0|        else {
 9185|      0|            if (total_in >= 0L) {
 9186|      0|                total_in += bytes_in;
 9187|      0|            }
 9188|      0|        }
 9189|      0|        if (bytes_out == -1L) {
 9190|      0|            total_out = -1L;
 9191|      0|            header_bytes = 0L;
 9192|      0|            bytes_out = header_bytes;
 9193|      0|            bytes_in = bytes_out;
 9194|      0|        }
 9195|      0|        else {
 9196|      0|            if (total_out >= 0L) {
 9197|      0|                total_out += bytes_out;
 9198|      0|            }
 9199|      0|        }
 9200|      0|        {
 9201|      0|            display_ratio(bytes_out - (bytes_in - header_bytes), bytes_out, stdout);
 9202|      0|            printf((char const * /* __restrict  */) " %s\n", ofname);
 9203|      0|        }
 9204|      0|        return;
 9205|      0|    }
 9206|      0|}
 9207|       |static int same_file(struct stat *stat1, struct stat *stat2)
 9208|      0|{
 9209|      0|    int tmp;
 9210|       |
 9211|      0|    {
 9212|      0|        if (stat1->st_ino == stat2->st_ino) {
 9213|      0|            if (stat1->st_dev == stat2->st_dev) {
 9214|      0|                tmp = 1;
 9215|      0|            }
 9216|      0|            else {
 9217|      0|                tmp = 0;
 9218|      0|            }
 9219|      0|        }
 9220|      0|        else {
 9221|      0|            tmp = 0;
 9222|      0|        }
 9223|      0|        return (tmp);
 9224|      0|    }
 9225|      0|}
 9226|       |static int name_too_long(char *name, struct stat *statb)
 9227|      5|{
 9228|      5|    int s;
 9229|      5|    int tmp;
 9230|      5|    char c;
 9231|      5|    struct stat tstat;
 9232|      5|    int res;
 9233|      5|    int tmp___0;
 9234|      5|    int tmp___1;
 9235|      5|    int tmp___2;
 9236|      5|    void *__cil_tmp12;
 9237|       |
 9238|      5|    {
 9239|      5|        {
 9240|      5|            tmp = (int)strlen((char const *)name);
 9241|      5|            s = tmp;
 9242|      5|            c = *(name + (s - 1));
 9243|      5|            tstat = *statb;
 9244|      5|            *(name + (s - 1)) = (char)'\000';
 9245|      5|            tmp___0 = stat((char const * /* __restrict  */)name,
 9246|      5|                           (struct stat * /* __restrict  */)(&tstat));
 9247|      5|        }
 9248|      5|        if (tmp___0 == 0) {
 9249|      0|            {
 9250|      0|                tmp___1 = same_file(statb, &tstat);
 9251|      0|            }
 9252|      0|            if (tmp___1) {
 9253|      0|                tmp___2 = 1;
 9254|      0|            }
 9255|      0|            else {
 9256|      0|                tmp___2 = 0;
 9257|      0|            }
 9258|      0|        }
 9259|      5|        else {
 9260|      5|            tmp___2 = 0;
 9261|      5|        }
 9262|      5|        res = tmp___2;
 9263|      5|        *(name + (s - 1)) = c;
 9264|      5|        return (res);
 9265|      5|    }
 9266|      5|}
 9267|       |static void shorten_name(char *name)
 9268|      0|{
 9269|      0|    int len;
 9270|      0|    char *trunc;
 9271|      0|    int plen;
 9272|      0|    int min_part;
 9273|      0|    char *p;
 9274|      0|    int tmp;
 9275|      0|    char *tmp___0;
 9276|      0|    char *__cil_tmp11;
 9277|      0|    char *__cil_tmp12;
 9278|      0|    char *__cil_tmp13;
 9279|      0|    char *__cil_tmp14;
 9280|      0|    char *__cil_tmp15;
 9281|       |
 9282|      0|    {
 9283|      0|        {
 9284|      0|            trunc = (char *)((void *)0);
 9285|      0|            min_part = 3;
 9286|      0|            len = (int)strlen((char const *)name);
 9287|      0|        }
 9288|      0|        if (decompress) {
 9289|      0|            if (len <= 1) {
 9290|      0|                {
 9291|      0|                    error((char *)"name too short");
 9292|      0|                }
 9293|      0|            }
 9294|      0|            *(name + (len - 1)) = (char)'\000';
 9295|      0|            return;
 9296|      0|        }
 9297|      0|        {
 9298|      0|            p = get_suffix(name);
 9299|      0|        }
 9300|      0|        if ((unsigned long)p == (unsigned long)((void *)0)) {
 9301|      0|            {
 9302|      0|                error((char *)"can\'t recover suffix\n");
 9303|      0|            }
 9304|      0|        }
 9305|      0|        *p = (char)'\000';
 9306|      0|        save_orig_name = 1;
 9307|      0|        if (len > 4) {
 9308|      0|            {
 9309|      0|                tmp = strcmp((char const *)(p - 4), ".tar");
 9310|      0|            }
 9311|      0|            if (tmp == 0) {
 9312|      0|                {
 9313|      0|                    strcpy((char * /* __restrict  */)(p - 4),
 9314|      0|                           (char const * /* __restrict  */) ".tgz");
 9315|      0|                }
 9316|      0|                return;
 9317|      0|            }
 9318|      0|        }
 9319|      0|        {
 9320|      0|            while (1) {
 9321|      0|while_continue: /* CIL Label */
 9322|      0|                ;
 9323|      0|                {
 9324|      0|                    p = strrchr((char const *)name, '/');
 9325|      0|                }
 9326|      0|                if (p) {
 9327|      0|                    p++;
 9328|      0|                }
 9329|      0|                else {
 9330|      0|                    p = name;
 9331|      0|                }
 9332|      0|                {
 9333|      0|                    while (1) {
 9334|      0|while_continue___0: /* CIL Label */
 9335|      0|                        ;
 9336|      0|                        if (!*p) {
 9337|      0|                            goto while_break___0;
 9338|      0|                        }
 9339|      0|                        {
 9340|      0|                            plen = (int)strcspn((char const *)p, ".");
 9341|      0|                            p += plen;
 9342|      0|                        }
 9343|      0|                        if (plen > min_part) {
 9344|      0|                            trunc = p - 1;
 9345|      0|                        }
 9346|      0|                        if (*p) {
 9347|      0|                            p++;
 9348|      0|                        }
 9349|      0|                    }
 9350|      0|while_break___0: /* CIL Label */
 9351|      0|                    ;
 9352|      0|                }
 9353|      0|                if ((unsigned long)trunc == (unsigned long)((void *)0)) {
 9354|      0|                    min_part--;
 9355|      0|                    if (!(min_part != 0)) {
 9356|      0|                        goto while_break;
 9357|      0|                    }
 9358|      0|                }
 9359|      0|                else {
 9360|      0|                    goto while_break;
 9361|      0|                }
 9362|      0|            }
 9363|      0|while_break: /* CIL Label */
 9364|      0|            ;
 9365|      0|        }
 9366|      0|        if ((unsigned long)trunc != (unsigned long)((void *)0)) {
 9367|      0|            {
 9368|      0|                while (1) {
 9369|      0|while_continue___1: /* CIL Label */
 9370|      0|                    ;
 9371|      0|                    *(trunc + 0) = *(trunc + 1);
 9372|      0|                    tmp___0 = trunc;
 9373|      0|                    trunc++;
 9374|      0|                    if (!*tmp___0) {
 9375|      0|                        goto while_break___1;
 9376|      0|                    }
 9377|      0|                }
 9378|      0|while_break___1: /* CIL Label */
 9379|      0|                ;
 9380|      0|            }
 9381|      0|            trunc--;
 9382|      0|        }
 9383|      0|        else {
 9384|      0|            {
 9385|      0|                trunc = strrchr((char const *)name, (int)*("." + 0));
 9386|      0|            }
 9387|      0|            if ((unsigned long)trunc == (unsigned long)((void *)0)) {
 9388|      0|                {
 9389|      0|                    error((char *)"internal error in shorten_name");
 9390|      0|                }
 9391|      0|            }
 9392|      0|            if ((int)*(trunc + 1) == 0) {
 9393|      0|                trunc--;
 9394|      0|            }
 9395|      0|        }
 9396|      0|        {
 9397|      0|            strcpy((char * /* __restrict  */)trunc,
 9398|      0|                   (char const * /* __restrict  */)(z_suffix));
 9399|      0|        }
 9400|      0|        return;
 9401|      0|    }
 9402|      0|}
 9403|       |static int check_ofname(void)
 9404|      5|{
 9405|      5|    struct stat ostat;
 9406|      5|    int *tmp;
 9407|      5|    int *tmp___0;
 9408|      5|    int tmp___1;
 9409|      5|    int tmp___2;
 9410|      5|    int tmp___3;
 9411|      5|    char const *tmp___4;
 9412|      5|    int tmp___5;
 9413|      5|    int tmp___6;
 9414|      5|    char response[80];
 9415|      5|    int tmp___7;
 9416|      5|    int tmp___8;
 9417|      5|    int tmp___10;
 9418|      5|    unsigned short const **tmp___11;
 9419|      5|    int tmp___12;
 9420|      5|    void *__cil_tmp16;
 9421|      5|    void *__cil_tmp17;
 9422|      5|    char *__cil_tmp18;
 9423|      5|    char *__cil_tmp19;
 9424|      5|    char *__cil_tmp20;
 9425|       |
 9426|      5|    {
 9427|      5|        {
 9428|      5|            tmp = __errno_location();
 9429|      5|            *tmp = 0;
 9430|      5|        }
 9431|      5|        {
 9432|      5|            while (1) {
 9433|      5|while_continue: /* CIL Label */
 9434|      5|                ;
 9435|      5|                {
 9436|      5|                    tmp___1 = stat((char const * /* __restrict  */)(ofname),
 9437|      5|                                   (struct stat * /* __restrict  */)(&ostat));
 9438|      5|                }
 9439|      5|                if (!(tmp___1 != 0)) {
 9440|      0|                    goto while_break;
 9441|      0|                }
 9442|      5|                {
 9443|      5|                    tmp___0 = __errno_location();
 9444|      5|                }
 9445|      5|                if (*tmp___0 != 36) {
 9446|      5|                    return (0);
 9447|      5|                }
 9448|      0|                {
 9449|      0|                    shorten_name(ofname);
 9450|      0|                }
 9451|      0|            }
 9452|      0|while_break: /* CIL Label */
 9453|      0|            ;
 9454|      0|        }
 9455|      0|        if (!decompress) {
 9456|      0|            {
 9457|      0|                tmp___3 = name_too_long(ofname, &ostat);
 9458|      0|            }
 9459|      0|            if (tmp___3) {
 9460|      0|                {
 9461|      0|                    shorten_name(ofname);
 9462|      0|                    tmp___2 = stat((char const * /* __restrict  */)(ofname),
 9463|      0|                                   (struct stat * /* __restrict  */)(&ostat));
 9464|      0|                }
 9465|      0|                if (tmp___2 != 0) {
 9466|      0|                    return (0);
 9467|      0|                }
 9468|      0|            }
 9469|      0|        }
 9470|      0|        {
 9471|      0|            tmp___6 = same_file(&istat, &ostat);
 9472|      0|        }
 9473|      0|        if (tmp___6) {
 9474|      0|            {
 9475|      0|                tmp___5 = strcmp((char const *)(ifname), (char const *)(ofname));
 9476|      0|            }
 9477|      0|            if (tmp___5 == 0) {
 9478|      0|                if (decompress) {
 9479|      0|                    tmp___4 = "de";
 9480|      0|                }
 9481|      0|                else {
 9482|      0|                    tmp___4 = "";
 9483|      0|                }
 9484|      0|                {
 9485|      0|                    fprintf((FILE * /* __restrict  */) stderr,
 9486|      0|                            (char const * /* __restrict  */) "%s: %s: cannot %scompress "
 9487|      0|                            "onto itself\n",
 9488|      0|                            progname, ifname, tmp___4);
 9489|      0|                }
 9490|      0|            }
 9491|      0|            else {
 9492|      0|                {
 9493|      0|                    fprintf((FILE * /* __restrict  */) stderr,
 9494|      0|                            (char const
 9495|      0|                             * /* __restrict  */) "%s: %s and %s are the same file\n",
 9496|      0|                            progname, ifname, ofname);
 9497|      0|                }
 9498|      0|            }
 9499|      0|            exit_code = 1;
 9500|      0|            return (1);
 9501|      0|        }
 9502|      0|        if (!force) {
 9503|      0|            {
 9504|      0|                strcpy((char * /* __restrict  */)(response),
 9505|      0|                       (char const * /* __restrict  */) "n");
 9506|      0|                fprintf((FILE * /* __restrict  */) stderr,
 9507|      0|                        (char const * /* __restrict  */) "%s: %s already exists;",
 9508|      0|                        progname, ofname);
 9509|      0|            }
 9510|      0|            if (foreground) {
 9511|      0|                {
 9512|      0|                    tmp___7 = fileno(stdin);
 9513|      0|                    tmp___8 = isatty(tmp___7);
 9514|      0|                }
 9515|      0|                if (tmp___8) {
 9516|      0|                    {
 9517|      0|                        fprintf((FILE * /* __restrict  */) stderr,
 9518|      0|                                (char const * /* __restrict  */) " do you wish to "
 9519|      0|                                "overwrite (y or n)? ");
 9520|      0|                        fflush(stderr);
 9521|      0|                        fgets((char * /* __restrict  */)(response),
 9522|      0|                              (int)(sizeof(response) - 1UL),
 9523|      0|                              (FILE * /* __restrict  */) stdin);
 9524|      0|                    }
 9525|      0|                }
 9526|      0|            }
 9527|      0|            {
 9528|      0|                tmp___11 = __ctype_b_loc();
 9529|      0|            }
 9530|      0|            if ((int const) * (*tmp___11 + (int)response[0]) & 256) {
 9531|      0|                tmp___10 = ((int)response[0] - 65) + 97;
 9532|      0|            }
 9533|      0|            else {
 9534|      0|                tmp___10 = (int)response[0];
 9535|      0|            }
 9536|      0|            if (tmp___10 != 121) {
 9537|      0|                {
 9538|      0|                    fprintf((FILE * /* __restrict  */) stderr,
 9539|      0|                            (char const * /* __restrict  */) "\tnot overwritten\n");
 9540|      0|                }
 9541|      0|                if (exit_code == 0) {
 9542|      0|                    exit_code = 2;
 9543|      0|                }
 9544|      0|                return (1);
 9545|      0|            }
 9546|      0|        }
 9547|      0|        {
 9548|      0|            chmod((char const *)(ofname), (__mode_t)511);
 9549|      0|            tmp___12 = unlink((char const *)(ofname));
 9550|      0|        }
 9551|      0|        if (tmp___12) {
 9552|      0|            {
 9553|      0|                fprintf((FILE * /* __restrict  */) stderr,
 9554|      0|                        (char const * /* __restrict  */) "%s: ", progname);
 9555|      0|                perror((char const *)(ofname));
 9556|      0|                exit_code = 1;
 9557|      0|            }
 9558|      0|            return (1);
 9559|      0|        }
 9560|      0|        return (0);
 9561|      0|    }
 9562|      0|}
 9563|       |static void reset_times(char *name, struct stat *statb)
 9564|      5|{
 9565|      5|    struct utimbuf timep;
 9566|      5|    int tmp;
 9567|       |
 9568|      5|    {
 9569|      5|        {
 9570|      5|            timep.actime = statb->st_atim.tv_sec;
 9571|      5|            timep.modtime = statb->st_mtim.tv_sec;
 9572|      5|            tmp = utime((char const *)name, (struct utimbuf const *)(&timep));
 9573|      5|        }
 9574|      5|        if (tmp) {
 9575|      0|            if (!((statb->st_mode & 61440U) == 16384U)) {
 9576|      0|                if (!quiet) {
 9577|      0|                    {
 9578|      0|                        fprintf((FILE * /* __restrict  */) stderr,
 9579|      0|                                (char const * /* __restrict  */) "%s: ", progname);
 9580|      0|                    }
 9581|      0|                }
 9582|      0|                if (exit_code == 0) {
 9583|      0|                    exit_code = 2;
 9584|      0|                }
 9585|      0|                if (!quiet) {
 9586|      0|                    {
 9587|      0|                        perror((char const *)(ofname));
 9588|      0|                    }
 9589|      0|                }
 9590|      0|            }
 9591|      0|        }
 9592|      5|        return;
 9593|      5|    }
 9594|      5|}
 9595|       |static void copy_stat(struct stat *ifstat)
 9596|      5|{
 9597|      5|    int tmp;
 9598|      5|    int tmp___0;
 9599|       |
 9600|      5|    {
 9601|      5|        if (decompress) {
 9602|      0|            if (time_stamp != 0L) {
 9603|      0|                if (ifstat->st_mtim.tv_sec != time_stamp) {
 9604|      0|                    ifstat->st_mtim.tv_sec = time_stamp;
 9605|      0|                    if (verbose > 1) {
 9606|      0|                        {
 9607|      0|                            fprintf(
 9608|      0|                                (FILE * /* __restrict  */) stderr,
 9609|      0|                                (char const * /* __restrict  */) "%s: time stamp restored\n",
 9610|      0|                                ofname);
 9611|      0|                        }
 9612|      0|                    }
 9613|      0|                }
 9614|      0|            }
 9615|      0|        }
 9616|      5|        {
 9617|      5|            reset_times(ofname, ifstat);
 9618|      5|            tmp = chmod((char const *)(ofname), ifstat->st_mode & 4095U);
 9619|      5|        }
 9620|      5|        if (tmp) {
 9621|      0|            if (!quiet) {
 9622|      0|                {
 9623|      0|                    fprintf((FILE * /* __restrict  */) stderr,
 9624|      0|                            (char const * /* __restrict  */) "%s: ", progname);
 9625|      0|                }
 9626|      0|            }
 9627|      0|            if (exit_code == 0) {
 9628|      0|                exit_code = 2;
 9629|      0|            }
 9630|      0|            if (!quiet) {
 9631|      0|                {
 9632|      0|                    perror((char const *)(ofname));
 9633|      0|                }
 9634|      0|            }
 9635|      0|        }
 9636|      5|        {
 9637|      5|            chown((char const *)(ofname), ifstat->st_uid, ifstat->st_gid);
 9638|      5|            remove_ofname = 0;
 9639|      5|            chmod((char const *)(ifname), (__mode_t)511);
 9640|      5|            tmp___0 = unlink((char const *)(ifname));
 9641|      5|        }
 9642|      5|        if (tmp___0) {
 9643|      0|            if (!quiet) {
 9644|      0|                {
 9645|      0|                    fprintf((FILE * /* __restrict  */) stderr,
 9646|      0|                            (char const * /* __restrict  */) "%s: ", progname);
 9647|      0|                }
 9648|      0|            }
 9649|      0|            if (exit_code == 0) {
 9650|      0|                exit_code = 2;
 9651|      0|            }
 9652|      0|            if (!quiet) {
 9653|      0|                {
 9654|      0|                    perror((char const *)(ifname));
 9655|      0|                }
 9656|      0|            }
 9657|      0|        }
 9658|      5|        return;
 9659|      5|    }
 9660|      5|}
 9661|       |static void treat_dir(char *dir)
 9662|      0|{
 9663|      0|    dir_type *dp;
 9664|      0|    DIR *dirp;
 9665|      0|    char nbuf[1024];
 9666|      0|    int len;
 9667|      0|    int tmp;
 9668|      0|    int tmp___0;
 9669|      0|    int tmp___1;
 9670|      0|    size_t tmp___2;
 9671|      0|    void *__cil_tmp11;
 9672|       |
 9673|      0|    {
 9674|      0|        {
 9675|      0|            dirp = opendir((char const *)dir);
 9676|      0|        }
 9677|      0|        if ((unsigned long)dirp == (unsigned long)((void *)0)) {
 9678|      0|            {
 9679|      0|                fprintf((FILE * /* __restrict  */) stderr,
 9680|      0|                        (char const * /* __restrict  */) "%s: %s unreadable\n",
 9681|      0|                        progname, dir);
 9682|      0|                exit_code = 1;
 9683|      0|            }
 9684|      0|            return;
 9685|      0|        }
 9686|      0|        {
 9687|      0|            while (1) {
 9688|      0|while_continue: /* CIL Label */
 9689|      0|                ;
 9690|      0|                {
 9691|      0|                    dp = readdir(dirp);
 9692|      0|                }
 9693|      0|                if (!((unsigned long)dp != (unsigned long)((void *)0))) {
 9694|      0|                    goto while_break;
 9695|      0|                }
 9696|      0|                {
 9697|      0|                    tmp = strcmp((char const *)(dp->d_name), ".");
 9698|      0|                }
 9699|      0|                if (tmp == 0) {
 9700|      0|                    goto while_continue;
 9701|      0|                }
 9702|      0|                else {
 9703|      0|                    {
 9704|      0|                        tmp___0 = strcmp((char const *)(dp->d_name), "..");
 9705|      0|                    }
 9706|      0|                    if (tmp___0 == 0) {
 9707|      0|                        goto while_continue;
 9708|      0|                    }
 9709|      0|                }
 9710|      0|                {
 9711|      0|                    len = (int)strlen((char const *)dir);
 9712|      0|                    tmp___2 = strlen((char const *)(dp->d_name));
 9713|      0|                }
 9714|      0|                if ((len + (int)tmp___2) + 1 < 1023) {
 9715|      0|                    {
 9716|      0|                        strcpy((char * /* __restrict  */)(nbuf),
 9717|      0|                               (char const * /* __restrict  */)dir);
 9718|      0|                    }
 9719|      0|                    if (len != 0) {
 9720|      0|                        tmp___1 = len;
 9721|      0|                        len++;
 9722|      0|                        nbuf[tmp___1] = (char)'/';
 9723|      0|                    }
 9724|      0|                    {
 9725|      0|                        strcpy((char * /* __restrict  */)(nbuf + len),
 9726|      0|                               (char const * /* __restrict  */)(dp->d_name));
 9727|      0|                        treat_file(nbuf);
 9728|      0|                    }
 9729|      0|                }
 9730|      0|                else {
 9731|      0|                    {
 9732|      0|                        fprintf((FILE * /* __restrict  */) stderr,
 9733|      0|                                (char const
 9734|      0|                                 * /* __restrict  */) "%s: %s/%s: pathname too long\n",
 9735|      0|                                progname, dir, dp->d_name);
 9736|      0|                        exit_code = 1;
 9737|      0|                    }
 9738|      0|                }
 9739|      0|            }
 9740|      0|while_break: /* CIL Label */
 9741|      0|            ;
 9742|      0|        }
 9743|      0|        {
 9744|      0|            closedir(dirp);
 9745|      0|        }
 9746|      0|        return;
 9747|      0|    }
 9748|      0|}
 9749|       |static int in_exit = 0;
 9750|       |static void do_exit(int exitcode)
 9751|      3|{
 9752|       |
 9753|      3|    {
 9754|      3|        if (in_exit) {
 9755|      0|            {
 9756|      0|                exit(exitcode);
 9757|      0|            }
 9758|      0|        }
 9759|      3|        in_exit = 1;
 9760|      3|        if ((unsigned long)env != (unsigned long)((void *)0)) {
 9761|      0|            {
 9762|      0|                free((void *)env);
 9763|      0|                env = (char *)((void *)0);
 9764|      0|            }
 9765|      0|        }
 9766|      3|        if ((unsigned long)args != (unsigned long)((void *)0)) {
 9767|      0|            {
 9768|      0|                free((void *)((char *)args));
 9769|      0|                args = (char **)((void *)0);
 9770|      0|            }
 9771|      0|        }
 9772|      3|        {
 9773|      3|            exit(exitcode);
 9774|      3|        }
 9775|      3|    }
 9776|      3|}
 9777|       |void abort_gzip(void)
 9778|      0|{
 9779|       |
 9780|      0|    {
 9781|      0|        if (remove_ofname) {
 9782|      0|            {
 9783|      0|                close(ofd);
 9784|      0|                unlink((char const *)(ofname));
 9785|      0|            }
 9786|      0|        }
 9787|      0|        {
 9788|      0|            do_exit(1);
 9789|      0|        }
 9790|      0|        return;
 9791|      0|    }
 9792|      0|}

