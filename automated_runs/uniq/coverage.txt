    1|       |typedef long __time_t;
    2|       |typedef long __syscall_slong_t;
    3|       |typedef __time_t time_t;
    4|       |struct timespec {
    5|       |    __time_t tv_sec;
    6|       |    __syscall_slong_t tv_nsec;
    7|       |};
    8|       |typedef unsigned long size_t;
    9|       |typedef unsigned long __dev_t;
   10|       |typedef unsigned int __uid_t;
   11|       |typedef unsigned int __gid_t;
   12|       |typedef unsigned long __ino_t;
   13|       |typedef unsigned int __mode_t;
   14|       |typedef unsigned long __nlink_t;
   15|       |typedef long __off_t;
   16|       |typedef long __blksize_t;
   17|       |typedef long __blkcnt_t;
   18|       |typedef __gid_t gid_t;
   19|       |typedef __mode_t mode_t;
   20|       |typedef __uid_t uid_t;
   21|       |struct stat {
   22|       |    __dev_t st_dev;
   23|       |    __ino_t st_ino;
   24|       |    __nlink_t st_nlink;
   25|       |    __mode_t st_mode;
   26|       |    __uid_t st_uid;
   27|       |    __gid_t st_gid;
   28|       |    int __pad0;
   29|       |    __dev_t st_rdev;
   30|       |    __off_t st_size;
   31|       |    __blksize_t st_blksize;
   32|       |    __blkcnt_t st_blocks;
   33|       |    struct timespec st_atim;
   34|       |    struct timespec st_mtim;
   35|       |    struct timespec st_ctim;
   36|       |    __syscall_slong_t __glibc_reserved[3];
   37|       |};
   38|       |typedef __ino_t ino_t;
   39|       |typedef __dev_t dev_t;
   40|       |struct di_set;
   41|       |struct di_set;
   42|       |struct hash_tuning {
   43|       |    float shrink_threshold;
   44|       |    float shrink_factor;
   45|       |    float growth_threshold;
   46|       |    float growth_factor;
   47|       |    _Bool is_n_buckets;
   48|       |};
   49|       |typedef struct hash_tuning Hash_tuning;
   50|       |struct hash_table;
   51|       |struct hash_table;
   52|       |typedef struct hash_table Hash_table;
   53|       |struct ino_map;
   54|       |struct ino_map;
   55|       |typedef size_t hashint;
   56|       |struct di_ent {
   57|       |    dev_t dev;
   58|       |    struct hash_table *ino_set;
   59|       |};
   60|       |struct di_set {
   61|       |    struct hash_table *dev_map;
   62|       |    struct ino_map *ino_map;
   63|       |    struct di_ent *probe;
   64|       |};
   65|       |typedef unsigned long uintmax_t;
   66|       |struct dev_ino {
   67|       |    ino_t st_ino;
   68|       |    dev_t st_dev;
   69|       |};
   70|       |struct cycle_check_state {
   71|       |    struct dev_ino dev_ino;
   72|       |    uintmax_t chdir_counter;
   73|       |    int magic;
   74|       |};
   75|       |typedef long __off64_t;
   76|       |struct _IO_FILE;
   77|       |struct _IO_FILE;
   78|       |typedef struct _IO_FILE FILE;
   79|       |typedef void _IO_lock_t;
   80|       |struct _IO_marker {
   81|       |    struct _IO_marker *_next;
   82|       |    struct _IO_FILE *_sbuf;
   83|       |    int _pos;
   84|       |};
   85|       |struct _IO_FILE {
   86|       |    int _flags;
   87|       |    char *_IO_read_ptr;
   88|       |    char *_IO_read_end;
   89|       |    char *_IO_read_base;
   90|       |    char *_IO_write_base;
   91|       |    char *_IO_write_ptr;
   92|       |    char *_IO_write_end;
   93|       |    char *_IO_buf_base;
   94|       |    char *_IO_buf_end;
   95|       |    char *_IO_save_base;
   96|       |    char *_IO_backup_base;
   97|       |    char *_IO_save_end;
   98|       |    struct _IO_marker *_markers;
   99|       |    struct _IO_FILE *_chain;
  100|       |    int _fileno;
  101|       |    int _flags2;
  102|       |    __off_t _old_offset;
  103|       |    unsigned short _cur_column;
  104|       |    signed char _vtable_offset;
  105|       |    char _shortbuf[1];
  106|       |    _IO_lock_t *_lock;
  107|       |    __off64_t _offset;
  108|       |    void *__pad1;
  109|       |    void *__pad2;
  110|       |    void *__pad3;
  111|       |    void *__pad4;
  112|       |    size_t __pad5;
  113|       |    int _mode;
  114|       |    char _unused2[(15UL * sizeof(int) - 4UL * sizeof(void *)) - sizeof(size_t)];
  115|       |};
  116|       |typedef __off_t off_t;
  117|       |struct cd_buf {
  118|       |    int fd;
  119|       |};
  120|       |typedef long __ssize_t;
  121|       |typedef __ssize_t ssize_t;
  122|       |struct allocator;
  123|       |struct allocator;
  124|       |struct allocator {
  125|       |    void *(*allocate)(size_t);
  126|       |    void *(*reallocate)(void *, size_t);
  127|       |    void (*free)(void *);
  128|       |    void (*die)(size_t);
  129|       |};
  130|       |typedef long ptrdiff_t;
  131|       |enum canonicalize_mode_t {
  132|       |    CAN_EXISTING = 0,
  133|       |    CAN_ALL_BUT_LAST = 1,
  134|       |    CAN_MISSING = 2,
  135|       |    CAN_NOLINKS = 4
  136|       |};
  137|       |typedef enum canonicalize_mode_t canonicalize_mode_t;
  138|       |typedef unsigned int __socklen_t;
  139|       |typedef __socklen_t socklen_t;
  140|       |typedef unsigned short sa_family_t;
  141|       |struct sockaddr {
  142|       |    sa_family_t sa_family;
  143|       |    char sa_data[14];
  144|       |};
  145|       |struct addrinfo {
  146|       |    int ai_flags;
  147|       |    int ai_family;
  148|       |    int ai_socktype;
  149|       |    int ai_protocol;
  150|       |    socklen_t ai_addrlen;
  151|       |    struct sockaddr *ai_addr;
  152|       |    char *ai_canonname;
  153|       |    struct addrinfo *ai_next;
  154|       |};
  155|       |struct __locale_data;
  156|       |struct __locale_data;
  157|       |struct __locale_struct {
  158|       |    struct __locale_data *__locales[13];
  159|       |    unsigned short const *__ctype_b;
  160|       |    int const *__ctype_tolower;
  161|       |    int const *__ctype_toupper;
  162|       |    char const *__names[13];
  163|       |};
  164|       |typedef struct __locale_struct *__locale_t;
  165|       |typedef __locale_t locale_t;
  166|       |struct base64_decode_context {
  167|       |    unsigned int i;
  168|       |    char buf[4];
  169|       |};
  170|       |enum backup_type {
  171|       |    no_backups = 0,
  172|       |    simple_backups = 1,
  173|       |    numbered_existing_backups = 2,
  174|       |    numbered_backups = 3
  175|       |};
  176|       |struct dirent {
  177|       |    __ino_t d_ino;
  178|       |    __off_t d_off;
  179|       |    unsigned short d_reclen;
  180|       |    unsigned char d_type;
  181|       |    char d_name[256];
  182|       |};
  183|       |struct __dirstream;
  184|       |struct __dirstream;
  185|       |typedef struct __dirstream DIR;
  186|       |enum numbered_backup_result {
  187|       |    BACKUP_IS_SAME_LENGTH = 0,
  188|       |    BACKUP_IS_LONGER = 1,
  189|       |    BACKUP_IS_NEW = 2
  190|       |};
  191|       |typedef __builtin_va_list __gnuc_va_list;
  192|       |typedef __gnuc_va_list va_list;
  193|       |struct argv_iterator;
  194|       |struct argv_iterator;
  195|       |enum argv_iter_err {
  196|       |    AI_ERR_OK = 1,
  197|       |    AI_ERR_EOF = 2,
  198|       |    AI_ERR_MEM = 3,
  199|       |    AI_ERR_READ = 4
  200|       |};
  201|       |struct argv_iterator {
  202|       |    FILE *fp;
  203|       |    size_t item_idx;
  204|       |    char *tok;
  205|       |    size_t buf_len;
  206|       |    char **arg_list;
  207|       |    char **p;
  208|       |};
  209|       |enum quoting_style {
  210|       |    literal_quoting_style = 0,
  211|       |    shell_quoting_style = 1,
  212|       |    shell_always_quoting_style = 2,
  213|       |    c_quoting_style = 3,
  214|       |    c_maybe_quoting_style = 4,
  215|       |    escape_quoting_style = 5,
  216|       |    locale_quoting_style = 6,
  217|       |    clocale_quoting_style = 7,
  218|       |    custom_quoting_style = 8
  219|       |};
  220|       |enum strtol_error {
  221|       |    LONGINT_OK = 0,
  222|       |    LONGINT_OVERFLOW = 1,
  223|       |    LONGINT_INVALID_SUFFIX_CHAR = 2,
  224|       |    LONGINT_INVALID_SUFFIX_CHAR_WITH_OVERFLOW = 3,
  225|       |    LONGINT_INVALID = 4
  226|       |};
  227|       |typedef enum strtol_error strtol_error;
  228|       |struct option {
  229|       |    char const *name;
  230|       |    int has_arg;
  231|       |    int *flag;
  232|       |    int val;
  233|       |};
  234|       |typedef long intmax_t;
  235|       |typedef void *iconv_t;
  236|       |typedef __nlink_t nlink_t;
  237|       |struct I_ring {
  238|       |    int ir_data[4];
  239|       |    int ir_default_val;
  240|       |    unsigned int ir_front;
  241|       |    unsigned int ir_back;
  242|       |    _Bool ir_empty;
  243|       |};
  244|       |typedef struct I_ring I_ring;
  245|       |struct _ftsent;
  246|       |struct _ftsent;
  247|       |union __anonunion_fts_cycle_25 {
  248|       |    struct hash_table *ht;
  249|       |    struct cycle_check_state *state;
  250|       |};
  251|       |struct __anonstruct_FTS_24 {
  252|       |    struct _ftsent *fts_cur;
  253|       |    struct _ftsent *fts_child;
  254|       |    struct _ftsent **fts_array;
  255|       |    dev_t fts_dev;
  256|       |    char *fts_path;
  257|       |    int fts_rfd;
  258|       |    int fts_cwd_fd;
  259|       |    size_t fts_pathlen;
  260|       |    size_t fts_nitems;
  261|       |    int (*fts_compar)(struct _ftsent const **, struct _ftsent const **);
  262|       |    int fts_options;
  263|       |    struct hash_table *fts_leaf_optimization_works_ht;
  264|       |    union __anonunion_fts_cycle_25 fts_cycle;
  265|       |    I_ring fts_fd_ring;
  266|       |};
  267|       |typedef struct __anonstruct_FTS_24 FTS;
  268|       |struct _ftsent {
  269|       |    struct _ftsent *fts_cycle;
  270|       |    struct _ftsent *fts_parent;
  271|       |    struct _ftsent *fts_link;
  272|       |    DIR *fts_dirp;
  273|       |    long fts_number;
  274|       |    void *fts_pointer;
  275|       |    char *fts_accpath;
  276|       |    char *fts_path;
  277|       |    int fts_errno;
  278|       |    int fts_symfd;
  279|       |    size_t fts_pathlen;
  280|       |    FTS *fts_fts;
  281|       |    ptrdiff_t fts_level;
  282|       |    size_t fts_namelen;
  283|       |    nlink_t fts_n_dirs_remaining;
  284|       |    unsigned short fts_info;
  285|       |    unsigned short fts_flags;
  286|       |    unsigned short fts_instr;
  287|       |    struct stat fts_statp[1];
  288|       |    char fts_name[1];
  289|       |};
  290|       |typedef struct _ftsent FTSENT;
  291|       |typedef unsigned int uint32_t;
  292|       |typedef uint32_t ucs4_t;
  293|       |typedef int __pid_t;
  294|       |typedef __pid_t pid_t;
  295|       |typedef int __sig_atomic_t;
  296|       |typedef __sig_atomic_t sig_atomic_t;
  297|       |struct __anonstruct_slaves_entry_t_50 {
  298|       |    sig_atomic_t volatile used;
  299|       |    pid_t volatile child;
  300|       |};
  301|       |typedef struct __anonstruct_slaves_entry_t_50 slaves_entry_t;
  302|       |union __anonunion_51 {
  303|       |    int __in;
  304|       |    int __i;
  305|       |};
  306|       |union __anonunion_52 {
  307|       |    int __in;
  308|       |    int __i;
  309|       |};
  310|       |union __anonunion_53 {
  311|       |    int __in;
  312|       |    int __i;
  313|       |};
  314|       |union __anonunion_54 {
  315|       |    int __in;
  316|       |    int __i;
  317|       |};
  318|       |union __anonunion_55 {
  319|       |    int __in;
  320|       |    int __i;
  321|       |};
  322|       |union __anonunion_56 {
  323|       |    int __in;
  324|       |    int __i;
  325|       |};
  326|       |union __anonunion_57 {
  327|       |    int __in;
  328|       |    int __i;
  329|       |};
  330|       |union __anonunion_58 {
  331|       |    int __in;
  332|       |    int __i;
  333|       |};
  334|       |typedef int wchar_t;
  335|       |typedef int nl_item;
  336|       |typedef unsigned int wint_t;
  337|       |enum __anonenum_arg_type_27 {
  338|       |    TYPE_NONE = 0,
  339|       |    TYPE_SCHAR = 1,
  340|       |    TYPE_UCHAR = 2,
  341|       |    TYPE_SHORT = 3,
  342|       |    TYPE_USHORT = 4,
  343|       |    TYPE_INT = 5,
  344|       |    TYPE_UINT = 6,
  345|       |    TYPE_LONGINT = 7,
  346|       |    TYPE_ULONGINT = 8,
  347|       |    TYPE_LONGLONGINT = 9,
  348|       |    TYPE_ULONGLONGINT = 10,
  349|       |    TYPE_DOUBLE = 11,
  350|       |    TYPE_LONGDOUBLE = 12,
  351|       |    TYPE_CHAR = 13,
  352|       |    TYPE_WIDE_CHAR = 14,
  353|       |    TYPE_STRING = 15,
  354|       |    TYPE_WIDE_STRING = 16,
  355|       |    TYPE_POINTER = 17,
  356|       |    TYPE_COUNT_SCHAR_POINTER = 18,
  357|       |    TYPE_COUNT_SHORT_POINTER = 19,
  358|       |    TYPE_COUNT_INT_POINTER = 20,
  359|       |    TYPE_COUNT_LONGINT_POINTER = 21,
  360|       |    TYPE_COUNT_LONGLONGINT_POINTER = 22
  361|       |};
  362|       |typedef enum __anonenum_arg_type_27 arg_type;
  363|       |union __anonunion_a_29 {
  364|       |    signed char a_schar;
  365|       |    unsigned char a_uchar;
  366|       |    short a_short;
  367|       |    unsigned short a_ushort;
  368|       |    int a_int;
  369|       |    unsigned int a_uint;
  370|       |    long a_longint;
  371|       |    unsigned long a_ulongint;
  372|       |    long long a_longlongint;
  373|       |    unsigned long long a_ulonglongint;
  374|       |    float a_float;
  375|       |    double a_double;
  376|       |    long double a_longdouble;
  377|       |    int a_char;
  378|       |    wint_t a_wide_char;
  379|       |    char const *a_string;
  380|       |    wchar_t const *a_wide_string;
  381|       |    void *a_pointer;
  382|       |    signed char *a_count_schar_pointer;
  383|       |    short *a_count_short_pointer;
  384|       |    int *a_count_int_pointer;
  385|       |    long *a_count_longint_pointer;
  386|       |    long long *a_count_longlongint_pointer;
  387|       |};
  388|       |struct __anonstruct_argument_28 {
  389|       |    arg_type type;
  390|       |    union __anonunion_a_29 a;
  391|       |};
  392|       |typedef struct __anonstruct_argument_28 argument;
  393|       |struct __anonstruct_arguments_30 {
  394|       |    size_t count;
  395|       |    argument *arg;
  396|       |    argument direct_alloc_arg[7];
  397|       |};
  398|       |typedef struct __anonstruct_arguments_30 arguments;
  399|       |struct __anonstruct_char_directive_31 {
  400|       |    char const *dir_start;
  401|       |    char const *dir_end;
  402|       |    int flags;
  403|       |    char const *width_start;
  404|       |    char const *width_end;
  405|       |    size_t width_arg_index;
  406|       |    char const *precision_start;
  407|       |    char const *precision_end;
  408|       |    size_t precision_arg_index;
  409|       |    char conversion;
  410|       |    size_t arg_index;
  411|       |};
  412|       |typedef struct __anonstruct_char_directive_31 char_directive;
  413|       |struct __anonstruct_char_directives_32 {
  414|       |    size_t count;
  415|       |    char_directive *dir;
  416|       |    size_t max_width_length;
  417|       |    size_t max_precision_length;
  418|       |    char_directive direct_alloc_dir[7];
  419|       |};
  420|       |typedef struct __anonstruct_char_directives_32 char_directives;
  421|       |typedef unsigned short fpucw_t;
  422|       |struct saved_cwd {
  423|       |    int desc;
  424|       |    char *name;
  425|       |};
  426|       |typedef long __suseconds_t;
  427|       |struct timeval {
  428|       |    __time_t tv_sec;
  429|       |    __suseconds_t tv_usec;
  430|       |};
  431|       |struct fs_res {
  432|       |    dev_t dev;
  433|       |    int resolution;
  434|       |    _Bool exact;
  435|       |};
  436|       |struct passwd {
  437|       |    char *pw_name;
  438|       |    char *pw_passwd;
  439|       |    __uid_t pw_uid;
  440|       |    __gid_t pw_gid;
  441|       |    char *pw_gecos;
  442|       |    char *pw_dir;
  443|       |    char *pw_shell;
  444|       |};
  445|       |struct group {
  446|       |    char *gr_name;
  447|       |    char *gr_passwd;
  448|       |    __gid_t gr_gid;
  449|       |    char **gr_mem;
  450|       |};
  451|       |typedef unsigned char uint8_t;
  452|       |union __anonunion___value_23 {
  453|       |    unsigned int __wch;
  454|       |    char __wchb[4];
  455|       |};
  456|       |struct __anonstruct___mbstate_t_22 {
  457|       |    int __count;
  458|       |    union __anonunion___value_23 __value;
  459|       |};
  460|       |typedef struct __anonstruct___mbstate_t_22 __mbstate_t;
  461|       |typedef __mbstate_t mbstate_t;
  462|       |struct mbchar {
  463|       |    char const *ptr;
  464|       |    size_t bytes;
  465|       |    _Bool wc_valid;
  466|       |    wchar_t wc;
  467|       |    char buf[24];
  468|       |};
  469|       |struct mbiter_multi {
  470|       |    char const *limit;
  471|       |    _Bool in_shift;
  472|       |    mbstate_t state;
  473|       |    _Bool next_done;
  474|       |    struct mbchar cur;
  475|       |};
  476|       |typedef struct mbiter_multi mbi_iterator_t;
  477|       |typedef uintmax_t randint;
  478|       |struct randint_source;
  479|       |struct randint_source;
  480|       |union __anonunion_tmp_21 {
  481|       |    unsigned int align;
  482|       |    char buf[4096];
  483|       |};
  484|       |struct tm {
  485|       |    int tm_sec;
  486|       |    int tm_min;
  487|       |    int tm_hour;
  488|       |    int tm_mday;
  489|       |    int tm_mon;
  490|       |    int tm_year;
  491|       |    int tm_wday;
  492|       |    int tm_yday;
  493|       |    int tm_isdst;
  494|       |    long tm_gmtoff;
  495|       |    char const *tm_zone;
  496|       |};
  497|       |struct __anonstruct___sigset_t_9 {
  498|       |    unsigned long __val[1024UL / (8UL * sizeof(unsigned long))];
  499|       |};
  500|       |typedef struct __anonstruct___sigset_t_9 __sigset_t;
  501|       |typedef __sigset_t sigset_t;
  502|       |struct sched_param {
  503|       |    int __sched_priority;
  504|       |};
  505|       |struct __anonstruct_posix_spawnattr_t_50 {
  506|       |    short __flags;
  507|       |    pid_t __pgrp;
  508|       |    sigset_t __sd;
  509|       |    sigset_t __ss;
  510|       |    struct sched_param __sp;
  511|       |    int __policy;
  512|       |    int __pad[16];
  513|       |};
  514|       |typedef struct __anonstruct_posix_spawnattr_t_50 posix_spawnattr_t;
  515|       |struct __spawn_action;
  516|       |struct __spawn_action;
  517|       |struct __anonstruct_posix_spawn_file_actions_t_51 {
  518|       |    int __allocated;
  519|       |    int __used;
  520|       |    struct __spawn_action *__actions;
  521|       |    int __pad[16];
  522|       |};
  523|       |typedef struct __anonstruct_posix_spawn_file_actions_t_51
  524|       |    posix_spawn_file_actions_t;
  525|       |struct numname {
  526|       |    int num;
  527|       |    char const name[8];
  528|       |};
  529|       |typedef unsigned long uint64_t;
  530|       |typedef uint64_t u64;
  531|       |struct sha512_ctx {
  532|       |    u64 state[8];
  533|       |    u64 total[2];
  534|       |    size_t buflen;
  535|       |    u64 buffer[32];
  536|       |};
  537|       |struct sha256_ctx {
  538|       |    uint32_t state[8];
  539|       |    uint32_t total[2];
  540|       |    size_t buflen;
  541|       |    uint32_t buffer[32];
  542|       |};
  543|       |struct sha1_ctx {
  544|       |    uint32_t A;
  545|       |    uint32_t B;
  546|       |    uint32_t C;
  547|       |    uint32_t D;
  548|       |    uint32_t E;
  549|       |    uint32_t total[2];
  550|       |    uint32_t buflen;
  551|       |    uint32_t buffer[32];
  552|       |};
  553|       |typedef int __clockid_t;
  554|       |typedef __clockid_t clockid_t;
  555|       |struct timezone {
  556|       |    int tz_minuteswest;
  557|       |    int tz_dsttime;
  558|       |};
  559|       |enum __anonenum_state_14 {
  560|       |    INITIAL_STATE = 0,
  561|       |    FD_STATE = 1,
  562|       |    FD_POST_CHDIR_STATE = 2,
  563|       |    FORKING_STATE = 3,
  564|       |    ERROR_STATE = 4,
  565|       |    FINAL_STATE = 5
  566|       |};
  567|       |union __anonunion_val_15 {
  568|       |    int fd;
  569|       |    int errnum;
  570|       |    pid_t child;
  571|       |};
  572|       |struct savewd {
  573|       |    enum __anonenum_state_14 state;
  574|       |    union __anonunion_val_15 val;
  575|       |};
  576|       |union __anonunion_52___0 {
  577|       |    int __in;
  578|       |    int __i;
  579|       |};
  580|       |union __anonunion_53___0 {
  581|       |    int __in;
  582|       |    int __i;
  583|       |};
  584|       |union __anonunion_54___0 {
  585|       |    int __in;
  586|       |    int __i;
  587|       |};
  588|       |typedef int __int32_t;
  589|       |struct __exit_status {
  590|       |    short e_termination;
  591|       |    short e_exit;
  592|       |};
  593|       |struct __anonstruct_ut_tv_15 {
  594|       |    __int32_t tv_sec;
  595|       |    __int32_t tv_usec;
  596|       |};
  597|       |struct utmpx {
  598|       |    short ut_type;
  599|       |    __pid_t ut_pid;
  600|       |    char ut_line[32];
  601|       |    char ut_id[4];
  602|       |    char ut_user[32];
  603|       |    char ut_host[256];
  604|       |    struct __exit_status ut_exit;
  605|       |    __int32_t ut_session;
  606|       |    struct __anonstruct_ut_tv_15 ut_tv;
  607|       |    __int32_t ut_addr_v6[4];
  608|       |    char __glibc_reserved[20];
  609|       |};
  610|       |typedef struct utmpx STRUCT_UTMP;
  611|       |struct obstack;
  612|       |struct obstack;
  613|       |struct _obstack_chunk {
  614|       |    char *limit;
  615|       |    struct _obstack_chunk *prev;
  616|       |    char contents[4];
  617|       |};
  618|       |union __anonunion_temp_26 {
  619|       |    long tempint;
  620|       |    void *tempptr;
  621|       |};
  622|       |struct obstack {
  623|       |    long chunk_size;
  624|       |    struct _obstack_chunk *chunk;
  625|       |    char *object_base;
  626|       |    char *next_free;
  627|       |    char *chunk_limit;
  628|       |    union __anonunion_temp_26 temp;
  629|       |    int alignment_mask;
  630|       |    struct _obstack_chunk *(*chunkfun)(void *, long);
  631|       |    void (*freefun)(void *, struct _obstack_chunk *);
  632|       |    void *extra_arg;
  633|       |    unsigned int use_extra_arg : 1;
  634|       |    unsigned int maybe_empty_object : 1;
  635|       |    unsigned int alloc_failed : 1;
  636|       |};
  637|       |struct Tokens {
  638|       |    size_t n_tok;
  639|       |    char **tok;
  640|       |    size_t *tok_len;
  641|       |    struct obstack o_data;
  642|       |    struct obstack o_tok;
  643|       |    struct obstack o_tok_len;
  644|       |};
  645|       |struct tokenbuffer {
  646|       |    size_t size;
  647|       |    char *buffer;
  648|       |};
  649|       |typedef struct tokenbuffer token_buffer;
  650|       |typedef size_t word;
  651|       |struct randread_source;
  652|       |struct randread_source;
  653|       |typedef unsigned long uint_least64_t;
  654|       |typedef struct timezone *__restrict __timezone_ptr_t;
  655|       |typedef uint_least64_t isaac_word;
  656|       |struct isaac_state {
  657|       |    isaac_word m[1 << 8];
  658|       |    isaac_word a;
  659|       |    isaac_word b;
  660|       |    isaac_word c;
  661|       |};
  662|       |union __anonunion_data_31 {
  663|       |    isaac_word w[1 << 8];
  664|       |    unsigned char b[(unsigned long)(1 << 8) * sizeof(isaac_word)];
  665|       |};
  666|       |struct isaac {
  667|       |    size_t buffered;
  668|       |    struct isaac_state state;
  669|       |    union __anonunion_data_31 data;
  670|       |};
  671|       |union __anonunion_buf_30 {
  672|       |    char c[2UL * ((unsigned long)(1 << 8) * sizeof(isaac_word))];
  673|       |    struct isaac isaac;
  674|       |};
  675|       |struct randread_source {
  676|       |    FILE *source;
  677|       |    void (*handler)(void const *);
  678|       |    void const *handler_arg;
  679|       |    union __anonunion_buf_30 buf;
  680|       |};
  681|       |struct sparse_ent_ {
  682|       |    size_t index;
  683|       |    size_t val;
  684|       |};
  685|       |typedef Hash_table sparse_map;
  686|       |struct randint_source {
  687|       |    struct randread_source *source;
  688|       |    randint randnum;
  689|       |    randint randmax;
  690|       |};
  691|       |struct quoting_options;
  692|       |struct quoting_options;
  693|       |struct quoting_options {
  694|       |    enum quoting_style style;
  695|       |    int flags;
  696|       |    unsigned int quote_these_too[255UL / (sizeof(int) * 8UL) + 1UL];
  697|       |    char const *left_quote;
  698|       |    char const *right_quote;
  699|       |};
  700|       |struct slotvec {
  701|       |    size_t size;
  702|       |    char *val;
  703|       |};
  704|       |typedef struct mbchar mbchar_t;
  705|       |struct mbuiter_multi {
  706|       |    _Bool in_shift;
  707|       |    mbstate_t state;
  708|       |    _Bool next_done;
  709|       |    struct mbchar cur;
  710|       |};
  711|       |typedef struct mbuiter_multi mbui_iterator_t;
  712|       |typedef long long_time_t;
  713|       |struct __anonstruct_textint_27 {
  714|       |    _Bool negative;
  715|       |    long value;
  716|       |    size_t digits;
  717|       |};
  718|       |typedef struct __anonstruct_textint_27 textint;
  719|       |struct __anonstruct_table_28 {
  720|       |    char const *name;
  721|       |    int type;
  722|       |    int value;
  723|       |};
  724|       |typedef struct __anonstruct_table_28 table;
  725|       |struct __anonstruct_relative_time_31 {
  726|       |    long year;
  727|       |    long month;
  728|       |    long day;
  729|       |    long hour;
  730|       |    long minutes;
  731|       |    long_time_t seconds;
  732|       |    long ns;
  733|       |};
  734|       |typedef struct __anonstruct_relative_time_31 relative_time;
  735|       |struct __anonstruct_parser_control_32 {
  736|       |    char const *input;
  737|       |    long day_ordinal;
  738|       |    int day_number;
  739|       |    int local_isdst;
  740|       |    long time_zone;
  741|       |    int meridian;
  742|       |    textint year;
  743|       |    long month;
  744|       |    long day;
  745|       |    long hour;
  746|       |    long minutes;
  747|       |    struct timespec seconds;
  748|       |    relative_time rel;
  749|       |    _Bool timespec_seen;
  750|       |    _Bool rels_seen;
  751|       |    size_t dates_seen;
  752|       |    size_t days_seen;
  753|       |    size_t local_zones_seen;
  754|       |    size_t dsts_seen;
  755|       |    size_t times_seen;
  756|       |    size_t zones_seen;
  757|       |    table local_time_zone_table[3];
  758|       |};
  759|       |typedef struct __anonstruct_parser_control_32 parser_control;
  760|       |union YYSTYPE;
  761|       |union YYSTYPE;
  762|       |union YYSTYPE {
  763|       |    long intval;
  764|       |    textint textintval;
  765|       |    struct timespec timespec;
  766|       |    relative_time rel;
  767|       |};
  768|       |typedef union YYSTYPE YYSTYPE;
  769|       |typedef unsigned char yytype_uint8;
  770|       |typedef signed char yytype_int8;
  771|       |typedef short yytype_int16;
  772|       |union yyalloc {
  773|       |    yytype_int16 yyss_alloc;
  774|       |    YYSTYPE yyvs_alloc;
  775|       |};
  776|       |enum nproc_query {
  777|       |    NPROC_ALL = 0,
  778|       |    NPROC_CURRENT = 1,
  779|       |    NPROC_CURRENT_OVERRIDABLE = 2
  780|       |};
  781|       |typedef unsigned long __cpu_mask;
  782|       |struct __anonstruct_cpu_set_t_24 {
  783|       |    __cpu_mask __bits[1024UL / (8UL * sizeof(__cpu_mask))];
  784|       |};
  785|       |typedef struct __anonstruct_cpu_set_t_24 cpu_set_t;
  786|       |struct mount_entry {
  787|       |    char *me_devname;
  788|       |    char *me_mountdir;
  789|       |    char *me_type;
  790|       |    dev_t me_dev;
  791|       |    unsigned int me_dummy : 1;
  792|       |    unsigned int me_remote : 1;
  793|       |    unsigned int me_type_malloced : 1;
  794|       |    struct mount_entry *me_next;
  795|       |};
  796|       |struct mntent {
  797|       |    char *mnt_fsname;
  798|       |    char *mnt_dir;
  799|       |    char *mnt_type;
  800|       |    char *mnt_opts;
  801|       |    int mnt_freq;
  802|       |    int mnt_passno;
  803|       |};
  804|       |struct mode_change;
  805|       |struct mode_change;
  806|       |struct mode_change {
  807|       |    char op;
  808|       |    char flag;
  809|       |    mode_t affected;
  810|       |    mode_t value;
  811|       |    mode_t mentioned;
  812|       |};
  813|       |typedef unsigned long longword;
  814|       |struct md5_ctx {
  815|       |    uint32_t A;
  816|       |    uint32_t B;
  817|       |    uint32_t C;
  818|       |    uint32_t D;
  819|       |    uint32_t total[2];
  820|       |    uint32_t buflen;
  821|       |    uint32_t buffer[32];
  822|       |};
  823|       |enum __anonenum_mbs_align_t_1 {
  824|       |    MBS_ALIGN_LEFT = 0,
  825|       |    MBS_ALIGN_RIGHT = 1,
  826|       |    MBS_ALIGN_CENTER = 2
  827|       |};
  828|       |typedef enum __anonenum_mbs_align_t_1 mbs_align_t;
  829|       |typedef unsigned long uintptr_t;
  830|       |struct preliminary_header {
  831|       |    void *next;
  832|       |    char room[sizeof(int)];
  833|       |};
  834|       |struct header {
  835|       |    void *next;
  836|       |    char
  837|       |    room[((((sizeof(struct preliminary_header) + 16UL) - 1UL) / 16UL) * 16UL -
  838|       |                                                sizeof(struct preliminary_header)) +
  839|       |                                               sizeof(int)];
  840|       |};
  841|       |struct __pthread_internal_list {
  842|       |    struct __pthread_internal_list *__prev;
  843|       |    struct __pthread_internal_list *__next;
  844|       |};
  845|       |typedef struct __pthread_internal_list __pthread_list_t;
  846|       |struct __pthread_mutex_s {
  847|       |    int __lock;
  848|       |    unsigned int __count;
  849|       |    int __owner;
  850|       |    unsigned int __nusers;
  851|       |    int __kind;
  852|       |    short __spins;
  853|       |    short __elision;
  854|       |    __pthread_list_t __list;
  855|       |};
  856|       |union __anonunion_pthread_mutex_t_11 {
  857|       |    struct __pthread_mutex_s __data;
  858|       |    char __size[40];
  859|       |    long __align;
  860|       |};
  861|       |typedef union __anonunion_pthread_mutex_t_11 pthread_mutex_t;
  862|       |union __anonunion_pthread_mutexattr_t_12 {
  863|       |    char __size[4];
  864|       |    int __align;
  865|       |};
  866|       |typedef union __anonunion_pthread_mutexattr_t_12 pthread_mutexattr_t;
  867|       |typedef int pthread_once_t;
  868|       |typedef pthread_mutex_t gl_recursive_lock_t;
  869|       |struct linebuffer {
  870|       |    size_t size;
  871|       |    size_t length;
  872|       |    char *buffer;
  873|       |};
  874|       |union __anonunion_memory_double_1 {
  875|       |    long double value;
  876|       |    unsigned int word[((sizeof(long double) + sizeof(unsigned int)) - 1UL) /
  877|       |                                            sizeof(unsigned int)];
  878|       |};
  879|       |typedef union __anonunion_memory_double_1 memory_double;
  880|       |struct ino_map_ent {
  881|       |    ino_t ino;
  882|       |    size_t mapped_ino;
  883|       |};
  884|       |struct ino_map {
  885|       |    struct hash_table *map;
  886|       |    size_t next_mapped_ino;
  887|       |    struct ino_map_ent *probe;
  888|       |};
  889|       |union __anonunion_id_23 {
  890|       |    uid_t u;
  891|       |    gid_t g;
  892|       |};
  893|       |struct userid {
  894|       |    union __anonunion_id_23 id;
  895|       |    struct userid *next;
  896|       |    char name[];
  897|       |};
  898|       |struct lconv {
  899|       |    char *decimal_point;
  900|       |    char *thousands_sep;
  901|       |    char *grouping;
  902|       |    char *int_curr_symbol;
  903|       |    char *currency_symbol;
  904|       |    char *mon_decimal_point;
  905|       |    char *mon_thousands_sep;
  906|       |    char *mon_grouping;
  907|       |    char *positive_sign;
  908|       |    char *negative_sign;
  909|       |    char int_frac_digits;
  910|       |    char frac_digits;
  911|       |    char p_cs_precedes;
  912|       |    char p_sep_by_space;
  913|       |    char n_cs_precedes;
  914|       |    char n_sep_by_space;
  915|       |    char p_sign_posn;
  916|       |    char n_sign_posn;
  917|       |    char int_p_cs_precedes;
  918|       |    char int_p_sep_by_space;
  919|       |    char int_n_cs_precedes;
  920|       |    char int_n_sep_by_space;
  921|       |    char int_p_sign_posn;
  922|       |    char int_n_sign_posn;
  923|       |};
  924|       |struct heap;
  925|       |struct heap;
  926|       |struct heap {
  927|       |    void **array;
  928|       |    size_t capacity;
  929|       |    size_t count;
  930|       |    int (*compare)(void const *, void const *);
  931|       |};
  932|       |struct hash_entry {
  933|       |    void *data;
  934|       |    struct hash_entry *next;
  935|       |};
  936|       |struct hash_table {
  937|       |    struct hash_entry *bucket;
  938|       |    struct hash_entry const *bucket_limit;
  939|       |    size_t n_buckets;
  940|       |    size_t n_buckets_used;
  941|       |    size_t n_entries;
  942|       |    Hash_tuning const *tuning;
  943|       |    size_t (*hasher)(void const *, size_t);
  944|       |    _Bool (*comparator)(void const *, void const *);
  945|       |    void (*data_freer)(void *);
  946|       |    struct hash_entry *free_entry_list;
  947|       |};
  948|       |struct F_triple {
  949|       |    char *name;
  950|       |    ino_t st_ino;
  951|       |    dev_t st_dev;
  952|       |};
  953|       |typedef unsigned char cc_t;
  954|       |typedef unsigned int speed_t;
  955|       |typedef unsigned int tcflag_t;
  956|       |struct termios {
  957|       |    tcflag_t c_iflag;
  958|       |    tcflag_t c_oflag;
  959|       |    tcflag_t c_cflag;
  960|       |    tcflag_t c_lflag;
  961|       |    cc_t c_line;
  962|       |    cc_t c_cc[32];
  963|       |    speed_t c_ispeed;
  964|       |    speed_t c_ospeed;
  965|       |};
  966|       |typedef long long xtime_t;
  967|       |struct __anonstruct___fsid_t_1 {
  968|       |    int __val[2];
  969|       |};
  970|       |typedef struct __anonstruct___fsid_t_1 __fsid_t;
  971|       |typedef unsigned long __fsblkcnt_t;
  972|       |typedef unsigned long __fsfilcnt_t;
  973|       |typedef long __fsword_t;
  974|       |struct Active_dir {
  975|       |    dev_t dev;
  976|       |    ino_t ino;
  977|       |    FTSENT *fts_ent;
  978|       |};
  979|       |struct statfs {
  980|       |    __fsword_t f_type;
  981|       |    __fsword_t f_bsize;
  982|       |    __fsblkcnt_t f_blocks;
  983|       |    __fsblkcnt_t f_bfree;
  984|       |    __fsblkcnt_t f_bavail;
  985|       |    __fsfilcnt_t f_files;
  986|       |    __fsfilcnt_t f_ffree;
  987|       |    __fsid_t f_fsid;
  988|       |    __fsword_t f_namelen;
  989|       |    __fsword_t f_frsize;
  990|       |    __fsword_t f_flags;
  991|       |    __fsword_t f_spare[4];
  992|       |};
  993|       |struct LCO_ent {
  994|       |    dev_t st_dev;
  995|       |    _Bool opt_ok;
  996|       |};
  997|       |struct fs_usage {
  998|       |    uintmax_t fsu_blocksize;
  999|       |    uintmax_t fsu_blocks;
 1000|       |    uintmax_t fsu_bfree;
 1001|       |    uintmax_t fsu_bavail;
 1002|       |    _Bool fsu_bavail_top_bit_set;
 1003|       |    uintmax_t fsu_files;
 1004|       |    uintmax_t fsu_ffree;
 1005|       |};
 1006|       |typedef long __clock_t;
 1007|       |union sigval {
 1008|       |    int sival_int;
 1009|       |    void *sival_ptr;
 1010|       |};
 1011|       |typedef union sigval sigval_t;
 1012|       |typedef __clock_t __sigchld_clock_t;
 1013|       |struct __anonstruct__kill_23 {
 1014|       |    __pid_t si_pid;
 1015|       |    __uid_t si_uid;
 1016|       |};
 1017|       |struct __anonstruct__timer_24 {
 1018|       |    int si_tid;
 1019|       |    int si_overrun;
 1020|       |    sigval_t si_sigval;
 1021|       |};
 1022|       |struct __anonstruct__rt_25 {
 1023|       |    __pid_t si_pid;
 1024|       |    __uid_t si_uid;
 1025|       |    sigval_t si_sigval;
 1026|       |};
 1027|       |struct __anonstruct__sigchld_26 {
 1028|       |    __pid_t si_pid;
 1029|       |    __uid_t si_uid;
 1030|       |    int si_status;
 1031|       |    __sigchld_clock_t si_utime;
 1032|       |    __sigchld_clock_t si_stime;
 1033|       |};
 1034|       |struct __anonstruct__sigfault_27 {
 1035|       |    void *si_addr;
 1036|       |    short si_addr_lsb;
 1037|       |};
 1038|       |struct __anonstruct__sigpoll_28 {
 1039|       |    long si_band;
 1040|       |    int si_fd;
 1041|       |};
 1042|       |struct __anonstruct__sigsys_29 {
 1043|       |    void *_call_addr;
 1044|       |    int _syscall;
 1045|       |    unsigned int _arch;
 1046|       |};
 1047|       |union __anonunion__sifields_22 {
 1048|       |    int _pad[128UL / sizeof(int) - 4UL];
 1049|       |    struct __anonstruct__kill_23 _kill;
 1050|       |    struct __anonstruct__timer_24 _timer;
 1051|       |    struct __anonstruct__rt_25 _rt;
 1052|       |    struct __anonstruct__sigchld_26 _sigchld;
 1053|       |    struct __anonstruct__sigfault_27 _sigfault;
 1054|       |    struct __anonstruct__sigpoll_28 _sigpoll;
 1055|       |    struct __anonstruct__sigsys_29 _sigsys;
 1056|       |};
 1057|       |struct __anonstruct_siginfo_t_21 {
 1058|       |    int si_signo;
 1059|       |    int si_errno;
 1060|       |    int si_code;
 1061|       |    union __anonunion__sifields_22 _sifields;
 1062|       |};
 1063|       |typedef struct __anonstruct_siginfo_t_21 siginfo_t;
 1064|       |union __anonunion___sigaction_handler_41 {
 1065|       |    void (*sa_handler)(int);
 1066|       |    void (*sa_sigaction)(int, siginfo_t *, void *);
 1067|       |};
 1068|       |struct sigaction {
 1069|       |    union __anonunion___sigaction_handler_41 __sigaction_handler;
 1070|       |    __sigset_t sa_mask;
 1071|       |    int sa_flags;
 1072|       |    void (*sa_restorer)(void);
 1073|       |};
 1074|       |typedef void (*sa_handler_t)(int);
 1075|       |struct __anonstruct_actions_entry_t_50 {
 1076|       |    void (*volatile action)(void);
 1077|       |};
 1078|       |typedef struct __anonstruct_actions_entry_t_50 actions_entry_t;
 1079|       |enum __anonenum_fadvice_t_19 {
 1080|       |    FADVISE_NORMAL = 0,
 1081|       |    FADVISE_SEQUENTIAL = 2,
 1082|       |    FADVISE_NOREUSE = 5,
 1083|       |    FADVISE_DONTNEED = 4,
 1084|       |    FADVISE_WILLNEED = 3,
 1085|       |    FADVISE_RANDOM = 1
 1086|       |};
 1087|       |typedef enum __anonenum_fadvice_t_19 fadvice_t;
 1088|       |struct exclude;
 1089|       |struct exclude;
 1090|       |struct patopts {
 1091|       |    char const *pattern;
 1092|       |    int options;
 1093|       |};
 1094|       |struct exclude_pattern {
 1095|       |    struct patopts *exclude;
 1096|       |    size_t exclude_alloc;
 1097|       |    size_t exclude_count;
 1098|       |};
 1099|       |enum exclude_type { exclude_hash = 0, exclude_pattern = 1 };
 1100|       |union __anonunion_v_29 {
 1101|       |    Hash_table *table;
 1102|       |    struct exclude_pattern pat;
 1103|       |};
 1104|       |struct exclude_segment {
 1105|       |    struct exclude_segment *next;
 1106|       |    enum exclude_type type;
 1107|       |    int options;
 1108|       |    union __anonunion_v_29 v;
 1109|       |};
 1110|       |struct exclude {
 1111|       |    struct exclude_segment *head;
 1112|       |    struct exclude_segment *tail;
 1113|       |};
 1114|       |enum countmode { count_occurrences = 0, count_none = 1 };
 1115|       |enum delimit_method { DM_NONE = 0, DM_PREPEND = 1, DM_SEPARATE = 2 };
 1116|       |enum Skip_field_option_type { SFO_NONE = 0, SFO_OBSOLETE = 1, SFO_NEW = 2 };
 1117|       |extern __attribute__((__nothrow__)) int
 1118|       |snprintf(char *__restrict __s, size_t __maxlen, char const *__restrict __format,
 1119|       |         ...);
 1120|       |extern __attribute__((__nothrow__)) double(__attribute__((
 1121|       |            __nonnull__(1), __leaf__)) strtod)(char const *__restrict __nptr,
 1122|       |                    char **__restrict __endptr);
 1123|       |__attribute__((__noreturn__)) void xalloc_die(void);
 1124|       |char *last_component(char const *name) __attribute__((__pure__));
 1125|       |extern __attribute__((__nothrow__)) void *(__attribute__((__leaf__)) malloc)(
 1126|       |    size_t __size) __attribute__((__malloc__));
 1127|       |extern __attribute__((__nothrow__)) void *(__attribute__((__nonnull__(1, 2),
 1128|       |        __leaf__)) memcpy)(
 1129|       |            void *__restrict __dest, void const *__restrict __src, size_t __n);
 1130|       |extern __attribute__((__nothrow__)) int *(
 1131|       |    __attribute__((__leaf__)) __errno_location)(void)__attribute__((__const__));
 1132|       |extern __attribute__((__nothrow__)) int(__attribute__((
 1133|       |        __nonnull__(1, 2), __leaf__)) stat)(char const *__restrict __file,
 1134|       |                struct stat *__restrict __buf);
 1135|       |extern __attribute__((__nothrow__)) int(__attribute__((
 1136|       |        __nonnull__(2), __leaf__)) fstat)(int __fd, struct stat *__buf);
 1137|       |extern __attribute__((__nothrow__)) int(__attribute__((
 1138|       |        __nonnull__(1), __leaf__)) chmod)(char const *__file, __mode_t __mode);
 1139|       |extern __attribute__((__nothrow__)) int(__attribute__((__leaf__)) fchmod)(
 1140|       |    int __fd, __mode_t __mode);
 1141|       |extern int close(int __fd);
 1142|       |extern __attribute__((__nothrow__)) int(__attribute__((
 1143|       |        __nonnull__(1), __leaf__)) chown)(char const *__file, __uid_t __owner,
 1144|       |                __gid_t __group);
 1145|       |extern __attribute__((__nothrow__)) int(__attribute__((__leaf__)) fchown)(
 1146|       |    int __fd, __uid_t __owner, __gid_t __group);
 1147|       |extern __attribute__((__nothrow__)) int(__attribute__((
 1148|       |        __nonnull__(1), __leaf__)) lchown)(char const *__file, __uid_t __owner,
 1149|       |                __gid_t __group);
 1150|       |char const diacrit_base[256];
 1151|       |char const diacrit_diac[256];
 1152|       |char const diacrit_base[256] = {
 1153|       |    (char const)0,   (char const)0,   (char const)0,   (char const)0,
 1154|       |    (char const)0,   (char const)0,   (char const)0,   (char const)0,
 1155|       |    (char const)0,   (char const)0,   (char const)0,   (char const)0,
 1156|       |    (char const)0,   (char const)0,   (char const)0,   (char const)0,
 1157|       |    (char const)0,   (char const)0,   (char const)0,   (char const)0,
 1158|       |    (char const)0,   (char const)0,   (char const)0,   (char const)0,
 1159|       |    (char const)0,   (char const)0,   (char const)0,   (char const)0,
 1160|       |    (char const)0,   (char const)0,   (char const)0,   (char const)0,
 1161|       |    (char const)0,   (char const)0,   (char const)0,   (char const)0,
 1162|       |    (char const)0,   (char const)0,   (char const)0,   (char const)0,
 1163|       |    (char const)0,   (char const)0,   (char const)0,   (char const)0,
 1164|       |    (char const)0,   (char const)0,   (char const)0,   (char const)0,
 1165|       |    (char const)0,   (char const)0,   (char const)0,   (char const)0,
 1166|       |    (char const)0,   (char const)0,   (char const)0,   (char const)0,
 1167|       |    (char const)0,   (char const)0,   (char const)0,   (char const)0,
 1168|       |    (char const)0,   (char const)0,   (char const)0,   (char const)0,
 1169|       |    (char const)0,   (char const)'A', (char const)'B', (char const)'C',
 1170|       |    (char const)'D', (char const)'E', (char const)'F', (char const)'G',
 1171|       |    (char const)'H', (char const)'I', (char const)'J', (char const)'K',
 1172|       |    (char const)'L', (char const)'M', (char const)'N', (char const)'O',
 1173|       |    (char const)'P', (char const)'Q', (char const)'R', (char const)'S',
 1174|       |    (char const)'T', (char const)'U', (char const)'V', (char const)'W',
 1175|       |    (char const)'X', (char const)'Y', (char const)'Z', (char const)0,
 1176|       |    (char const)0,   (char const)0,   (char const)0,   (char const)0,
 1177|       |    (char const)0,   (char const)'a', (char const)'b', (char const)'c',
 1178|       |    (char const)'d', (char const)'e', (char const)'f', (char const)'g',
 1179|       |    (char const)'h', (char const)'i', (char const)'j', (char const)'k',
 1180|       |    (char const)'l', (char const)'m', (char const)'n', (char const)'o',
 1181|       |    (char const)'p', (char const)'q', (char const)'r', (char const)'s',
 1182|       |    (char const)'t', (char const)'u', (char const)'v', (char const)'w',
 1183|       |    (char const)'x', (char const)'y', (char const)'z', (char const)0,
 1184|       |    (char const)0,   (char const)0,   (char const)0,   (char const)0,
 1185|       |    (char const)0,   (char const)0,   (char const)0,   (char const)0,
 1186|       |    (char const)0,   (char const)0,   (char const)0,   (char const)0,
 1187|       |    (char const)0,   (char const)0,   (char const)0,   (char const)0,
 1188|       |    (char const)0,   (char const)0,   (char const)0,   (char const)0,
 1189|       |    (char const)0,   (char const)0,   (char const)0,   (char const)0,
 1190|       |    (char const)0,   (char const)0,   (char const)0,   (char const)0,
 1191|       |    (char const)0,   (char const)0,   (char const)0,   (char const)0,
 1192|       |    (char const)0,   (char const)0,   (char const)0,   (char const)0,
 1193|       |    (char const)0,   (char const)0,   (char const)0,   (char const)0,
 1194|       |    (char const)0,   (char const)0,   (char const)0,   (char const)0,
 1195|       |    (char const)0,   (char const)0,   (char const)0,   (char const)0,
 1196|       |    (char const)0,   (char const)0,   (char const)0,   (char const)0,
 1197|       |    (char const)0,   (char const)0,   (char const)0,   (char const)0,
 1198|       |    (char const)0,   (char const)0,   (char const)0,   (char const)0,
 1199|       |    (char const)0,   (char const)0,   (char const)0,   (char const)0,
 1200|       |    (char const)0,   (char const)0,   (char const)0,   (char const)0,
 1201|       |    (char const)'A', (char const)'A', (char const)'A', (char const)'A',
 1202|       |    (char const)'A', (char const)'A', (char const)'A', (char const)'C',
 1203|       |    (char const)'E', (char const)'E', (char const)'E', (char const)'E',
 1204|       |    (char const)'I', (char const)'I', (char const)'I', (char const)'I',
 1205|       |    (char const)0,   (char const)'N', (char const)'O', (char const)'O',
 1206|       |    (char const)'O', (char const)'O', (char const)'O', (char const)0,
 1207|       |    (char const)'O', (char const)'U', (char const)'U', (char const)'U',
 1208|       |    (char const)'U', (char const)'Y', (char const)0,   (char const)0,
 1209|       |    (char const)'a', (char const)'a', (char const)'a', (char const)'a',
 1210|       |    (char const)'a', (char const)'a', (char const)'a', (char const)'c',
 1211|       |    (char const)'e', (char const)'e', (char const)'e', (char const)'e',
 1212|       |    (char const)'i', (char const)'i', (char const)'i', (char const)'i',
 1213|       |    (char const)0,   (char const)'n', (char const)'o', (char const)'o',
 1214|       |    (char const)'o', (char const)'o', (char const)'o', (char const)0,
 1215|       |    (char const)'o', (char const)'u', (char const)'u', (char const)'u',
 1216|       |    (char const)'u', (char const)'y', (char const)0,   (char const)'y'
 1217|       |};
 1218|       |char const diacrit_diac[256] = {
 1219|       |    (char const)0, (char const)0, (char const)0, (char const)0, (char const)0,
 1220|       |    (char const)0, (char const)0, (char const)0, (char const)0, (char const)0,
 1221|       |    (char const)0, (char const)0, (char const)0, (char const)0, (char const)0,
 1222|       |    (char const)0, (char const)0, (char const)0, (char const)0, (char const)0,
 1223|       |    (char const)0, (char const)0, (char const)0, (char const)0, (char const)0,
 1224|       |    (char const)0, (char const)0, (char const)0, (char const)0, (char const)0,
 1225|       |    (char const)0, (char const)0, (char const)0, (char const)0, (char const)0,
 1226|       |    (char const)0, (char const)0, (char const)0, (char const)0, (char const)0,
 1227|       |    (char const)0, (char const)0, (char const)0, (char const)0, (char const)0,
 1228|       |    (char const)0, (char const)0, (char const)0, (char const)0, (char const)0,
 1229|       |    (char const)0, (char const)0, (char const)0, (char const)0, (char const)0,
 1230|       |    (char const)0, (char const)0, (char const)0, (char const)0, (char const)0,
 1231|       |    (char const)0, (char const)0, (char const)0, (char const)0, (char const)0,
 1232|       |    (char const)0, (char const)0, (char const)0, (char const)0, (char const)0,
 1233|       |    (char const)0, (char const)0, (char const)0, (char const)0, (char const)0,
 1234|       |    (char const)0, (char const)0, (char const)0, (char const)0, (char const)0,
 1235|       |    (char const)0, (char const)0, (char const)0, (char const)0, (char const)0,
 1236|       |    (char const)0, (char const)0, (char const)0, (char const)0, (char const)0,
 1237|       |    (char const)0, (char const)0, (char const)0, (char const)0, (char const)4,
 1238|       |    (char const)0, (char const)3, (char const)0, (char const)0, (char const)0,
 1239|       |    (char const)0, (char const)0, (char const)0, (char const)0, (char const)0,
 1240|       |    (char const)0, (char const)0, (char const)0, (char const)0, (char const)0,
 1241|       |    (char const)0, (char const)0, (char const)0, (char const)0, (char const)0,
 1242|       |    (char const)0, (char const)0, (char const)0, (char const)0, (char const)0,
 1243|       |    (char const)0, (char const)0, (char const)0, (char const)0, (char const)0,
 1244|       |    (char const)0, (char const)6, (char const)0, (char const)0, (char const)0,
 1245|       |    (char const)0, (char const)0, (char const)0, (char const)0, (char const)0,
 1246|       |    (char const)0, (char const)0, (char const)0, (char const)0, (char const)0,
 1247|       |    (char const)0, (char const)0, (char const)0, (char const)0, (char const)0,
 1248|       |    (char const)0, (char const)0, (char const)0, (char const)0, (char const)0,
 1249|       |    (char const)0, (char const)0, (char const)0, (char const)0, (char const)0,
 1250|       |    (char const)0, (char const)0, (char const)0, (char const)0, (char const)0,
 1251|       |    (char const)0, (char const)0, (char const)0, (char const)0, (char const)0,
 1252|       |    (char const)0, (char const)0, (char const)0, (char const)0, (char const)0,
 1253|       |    (char const)0, (char const)0, (char const)0, (char const)0, (char const)0,
 1254|       |    (char const)0, (char const)0, (char const)0, (char const)0, (char const)0,
 1255|       |    (char const)0, (char const)0, (char const)0, (char const)0, (char const)0,
 1256|       |    (char const)0, (char const)0, (char const)0, (char const)0, (char const)0,
 1257|       |    (char const)0, (char const)0, (char const)3, (char const)2, (char const)4,
 1258|       |    (char const)6, (char const)5, (char const)8, (char const)1, (char const)7,
 1259|       |    (char const)3, (char const)2, (char const)4, (char const)5, (char const)3,
 1260|       |    (char const)2, (char const)4, (char const)5, (char const)0, (char const)6,
 1261|       |    (char const)3, (char const)2, (char const)4, (char const)6, (char const)5,
 1262|       |    (char const)0, (char const)9, (char const)3, (char const)2, (char const)4,
 1263|       |    (char const)5, (char const)2, (char const)0, (char const)0, (char const)3,
 1264|       |    (char const)2, (char const)4, (char const)6, (char const)5, (char const)8,
 1265|       |    (char const)1, (char const)7, (char const)3, (char const)2, (char const)4,
 1266|       |    (char const)5, (char const)3, (char const)2, (char const)4, (char const)5,
 1267|       |    (char const)0, (char const)6, (char const)3, (char const)2, (char const)4,
 1268|       |    (char const)6, (char const)5, (char const)0, (char const)9, (char const)3,
 1269|       |    (char const)2, (char const)4, (char const)5, (char const)2, (char const)0,
 1270|       |    (char const)0
 1271|       |};
 1272|       |extern __attribute__((__nothrow__)) void(__attribute__((__leaf__)) free)(
 1273|       |    void *__ptr);
 1274|       |extern __attribute__((__nothrow__, __noreturn__)) void(__attribute__((
 1275|       |            __leaf__)) __assert_fail)(char const *__assertion, char const *__file,
 1276|       |                                      unsigned int __line, char const *__function);
 1277|       |extern int(__attribute__((__nonnull__(1))) creat)(char const *__file,
 1278|       |        mode_t __mode);
 1279|       |extern void error(int __status, int __errnum, char const *__format, ...);
 1280|       |char const *quote(char const *name);
 1281|       |extern __attribute__((__nothrow__)) char *(__attribute__((__leaf__)) gettext)(
 1282|       |    char const *__msgid) __attribute__((__format_arg__(1)));
 1283|       |void close_stdout(void);
 1284|       |extern struct _IO_FILE *stdout;
 1285|       |extern struct _IO_FILE *stderr;
 1286|       |extern __attribute__((__noreturn__)) void _exit(int __status);
 1287|       |int close_stream(FILE *stream);
 1288|       |int volatile exit_failure;
 1289|       |char *quotearg_colon(char const *arg);
 1290|       |static char const *file_name;
 1291|       |static _Bool ignore_EPIPE;
 1292|       |void close_stdout(void)
 1293|      2|{
 1294|      2|    char const *write_error;
 1295|      2|    char const *tmp;
 1296|      2|    char *tmp___0;
 1297|      2|    int *tmp___1;
 1298|      2|    int *tmp___2;
 1299|      2|    int tmp___3;
 1300|      2|    int *tmp___4;
 1301|      2|    int tmp___5;
 1302|      2|    char *__cil_tmp10;
 1303|       |
 1304|      2|    {
 1305|      2|        {
 1306|      2|            tmp___3 = close_stream(stdout);
 1307|      2|        }
 1308|      2|        if (tmp___3 != 0) {
 1309|      0|            if (ignore_EPIPE) {
 1310|      0|                {
 1311|      0|                    tmp___4 = __errno_location();
 1312|      0|                }
 1313|      0|                if (!(*tmp___4 == 32)) {
 1314|      0|                    goto _L;
 1315|      0|                }
 1316|      0|            }
 1317|      0|            else {
 1318|      0|_L: {
 1319|      0|                    tmp = (char const *)gettext("write error");
 1320|      0|                    write_error = tmp;
 1321|      0|                }
 1322|      0|                if (file_name) {
 1323|      0|                    {
 1324|      0|                        tmp___0 = quotearg_colon(file_name);
 1325|      0|                        tmp___1 = __errno_location();
 1326|      0|                        error(0, *tmp___1, "%s: %s", tmp___0, write_error);
 1327|      0|                    }
 1328|      0|                }
 1329|      0|                else {
 1330|      0|                    {
 1331|      0|                        tmp___2 = __errno_location();
 1332|      0|                        error(0, *tmp___2, "%s", write_error);
 1333|      0|                    }
 1334|      0|                }
 1335|      0|                {
 1336|      0|                    _exit((int)exit_failure);
 1337|      0|                }
 1338|      0|            }
 1339|      0|        }
 1340|      2|        {
 1341|      2|            tmp___5 = close_stream(stderr);
 1342|      2|        }
 1343|      2|        if (tmp___5 != 0) {
 1344|      0|            {
 1345|      0|                _exit((int)exit_failure);
 1346|      0|            }
 1347|      0|        }
 1348|      2|        return;
 1349|      2|    }
 1350|      2|}
 1351|       |extern struct _IO_FILE *stdin;
 1352|       |int rpl_fflush(FILE *stream);
 1353|       |int(__attribute__((__nonnull__(1))) rpl_fseeko)(FILE *fp, off_t offset,
 1354|       |        int whence);
 1355|       |static char const *file_name___0;
 1356|       |extern __attribute__((__nothrow__)) int(
 1357|       |    __attribute__((__leaf__)) ferror_unlocked)(FILE *__stream);
 1358|       |int(__attribute__((__nonnull__(1))) rpl_fclose)(FILE *fp);
 1359|       |extern __attribute__((__nothrow__))
 1360|       |size_t(__attribute__((__leaf__)) __fpending)(FILE *__fp);
 1361|       |int close_stream(FILE *stream)
 1362|      4|{
 1363|      4|    _Bool some_pending;
 1364|      4|    size_t tmp;
 1365|      4|    _Bool prev_fail;
 1366|      4|    int tmp___0;
 1367|      4|    _Bool fclose_fail;
 1368|      4|    int tmp___1;
 1369|      4|    int *tmp___2;
 1370|      4|    int *tmp___3;
 1371|       |
 1372|      4|    {
 1373|      4|        {
 1374|      4|            tmp = __fpending(stream);
 1375|      4|            some_pending = (_Bool)(tmp != 0UL);
 1376|      4|            tmp___0 = ferror_unlocked(stream);
 1377|      4|            prev_fail = (_Bool)(tmp___0 != 0);
 1378|      4|            tmp___1 = rpl_fclose(stream);
 1379|      4|            fclose_fail = (_Bool)(tmp___1 != 0);
 1380|      4|        }
 1381|      4|        if (prev_fail) {
 1382|      0|            goto _L___0;
 1383|      0|        }
 1384|      4|        else {
 1385|      4|            if (fclose_fail) {
 1386|      0|                if (some_pending) {
 1387|      0|                    goto _L___0;
 1388|      0|                }
 1389|      0|                else {
 1390|      0|                    {
 1391|      0|                        tmp___3 = __errno_location();
 1392|      0|                    }
 1393|      0|                    if (*tmp___3 != 9) {
 1394|      0|_L___0:
 1395|      0|                        if (!fclose_fail) {
 1396|      0|                            {
 1397|      0|                                tmp___2 = __errno_location();
 1398|      0|                                *tmp___2 = 0;
 1399|      0|                            }
 1400|      0|                        }
 1401|      0|                        return (-1);
 1402|      0|                    }
 1403|      0|                }
 1404|      0|            }
 1405|      4|        }
 1406|      4|        return (0);
 1407|      4|    }
 1408|      4|}
 1409|       |extern __attribute__((__nothrow__)) int(
 1410|       |    __attribute__((__nonnull__(1), __leaf__)) chdir)(char const *__path);
 1411|       |extern __attribute__((__nothrow__)) int(__attribute__((__leaf__)) fchdir)(
 1412|       |    int __fd);
 1413|       |extern int(__attribute__((__nonnull__(2))) openat)(int __fd, char const *__file,
 1414|       |        int __oflag, ...);
 1415|       |extern __attribute__((__nothrow__)) void *(__attribute__((
 1416|       |            __nonnull__(1), __leaf__)) memchr)(void const *__s, int __c, size_t __n)
 1417|       |__attribute__((__pure__));
 1418|       |extern __attribute__((__nothrow__)) void *(__attribute__((
 1419|       |            __nonnull__(1), __leaf__)) memrchr)(void const *__s, int __c, size_t __n)
 1420|       |__attribute__((__pure__));
 1421|       |extern __attribute__((__nothrow__))
 1422|       |size_t(__attribute__((__nonnull__(1, 2),
 1423|       |                      __leaf__)) strspn)(char const *__s, char const *__accept)
 1424|       |__attribute__((__pure__));
 1425|       |extern __attribute__((__nothrow__))
 1426|       |size_t(__attribute__((__nonnull__(1), __leaf__)) strlen)(char const *__s)
 1427|       |__attribute__((__pure__));
 1428|       |extern __attribute__((__nothrow__))
 1429|       |ssize_t(__attribute__((__nonnull__(1, 2), __leaf__)) readlink)(
 1430|       |    char const *__restrict __path, char *__restrict __buf, size_t __len);
 1431|       |extern
 1432|       |__attribute__((__nothrow__,
 1433|       |               __noreturn__)) void(__attribute__((__leaf__)) abort)(void);
 1434|       |struct allocator const stdlib_allocator;
 1435|       |extern __attribute__((__nothrow__)) void *(__attribute__((
 1436|       |            __nonnull__(1, 2), __leaf__)) memmove)(void *__dest, void const *__src,
 1437|       |                    size_t __n);
 1438|       |extern __attribute__((__nothrow__)) char *(
 1439|       |    __attribute__((__nonnull__(1), __leaf__)) strchr)(char const *__s, int __c)
 1440|       |__attribute__((__pure__));
 1441|       |extern __attribute__((__nothrow__)) int(__attribute__((
 1442|       |        __nonnull__(1, 2), __leaf__)) lstat)(char const *__restrict __file,
 1443|       |                struct stat *__restrict __buf);
 1444|       |void *xmalloc(size_t n) __attribute__((__malloc__, __alloc_size__(1)));
 1445|       |void *xrealloc(void *p, size_t n) __attribute__((__alloc_size__(2)));
 1446|       |extern __attribute__((__nothrow__)) char *(
 1447|       |    __attribute__((__nonnull__(1), __leaf__)) strdup)(char const *__s)
 1448|       |__attribute__((__malloc__));
 1449|       |extern int getaddrinfo(char const *__restrict __name,
 1450|       |                       char const *__restrict __service,
 1451|       |                       struct addrinfo const *__restrict __req,
 1452|       |                       struct addrinfo **__restrict __pai);
 1453|       |extern __attribute__((__nothrow__)) void(
 1454|       |    __attribute__((__leaf__)) freeaddrinfo)(struct addrinfo *__ai);
 1455|       |extern __attribute__((__nothrow__)) char const *(
 1456|       |    __attribute__((__leaf__)) gai_strerror)(int __ecode);
 1457|       |static int last_cherror;
 1458|       |static struct addrinfo hints;
 1459|       |extern __attribute__((__nothrow__))
 1460|       |__locale_t(__attribute__((__leaf__)) newlocale)(int __category_mask,
 1461|       |        char const *__locale,
 1462|       |        __locale_t __base);
 1463|       |extern __attribute__((__nothrow__)) long double(__attribute__((
 1464|       |            __nonnull__(1, 3), __leaf__)) strtold_l)(char const *__restrict __nptr,
 1465|       |                    char **__restrict __endptr,
 1466|       |                    __locale_t __loc);
 1467|       |static locale_t volatile c_locale_cache;
 1468|       |extern __attribute__((__nothrow__)) double(__attribute__((
 1469|       |            __nonnull__(1, 3), __leaf__)) strtod_l)(char const *__restrict __nptr,
 1470|       |                    char **__restrict __endptr,
 1471|       |                    __locale_t __loc);
 1472|       |static locale_t volatile c_locale_cache___0;
 1473|       |int c_tolower(int c) __attribute__((__const__));
 1474|       |int c_strcasecmp(char const *s1, char const *s2) __attribute__((__pure__));
 1475|       |int c_strcasecmp(char const *s1, char const *s2) __attribute__((__pure__));
 1476|       |int c_strcasecmp(char const *s1, char const *s2)
 1477|      0|{
 1478|      0|    unsigned char const *p1;
 1479|      0|    unsigned char const *p2;
 1480|      0|    unsigned char c1;
 1481|      0|    unsigned char c2;
 1482|       |
 1483|      0|    {
 1484|      0|        p1 = (unsigned char const *)s1;
 1485|      0|        p2 = (unsigned char const *)s2;
 1486|      0|        if ((unsigned long)p1 == (unsigned long)p2) {
 1487|      0|            return (0);
 1488|      0|        }
 1489|      0|        {
 1490|      0|            while (1) {
 1491|      0|while_continue: /* CIL Label */
 1492|      0|                ;
 1493|      0|                {
 1494|      0|                    c1 = (unsigned char)c_tolower((int)*p1);
 1495|      0|                    c2 = (unsigned char)c_tolower((int)*p2);
 1496|      0|                }
 1497|      0|                if ((int)c1 == 0) {
 1498|      0|                    goto while_break;
 1499|      0|                }
 1500|      0|                p1++;
 1501|      0|                p2++;
 1502|      0|                if (!((int)c1 == (int)c2)) {
 1503|      0|                    goto while_break;
 1504|      0|                }
 1505|      0|            }
 1506|      0|while_break: /* CIL Label */
 1507|      0|            ;
 1508|      0|        }
 1509|      0|        return ((int)c1 - (int)c2);
 1510|      0|    }
 1511|      0|}
 1512|       |int c_tolower(int c) __attribute__((__const__));
 1513|       |int c_tolower(int c)
 1514|      0|{
 1515|      0|    int tmp;
 1516|       |
 1517|      0|    {
 1518|      0|        if (c >= 65) {
 1519|      0|            if (c <= 90) {
 1520|      0|                tmp = (c - 65) + 97;
 1521|      0|            }
 1522|      0|            else {
 1523|      0|                tmp = c;
 1524|      0|            }
 1525|      0|        }
 1526|      0|        else {
 1527|      0|            tmp = c;
 1528|      0|        }
 1529|      0|        return (tmp);
 1530|      0|    }
 1531|      0|}
 1532|       |char *last_component(char const *name) __attribute__((__pure__));
 1533|       |char *last_component(char const *name)
 1534|      0|{
 1535|      0|    char const *base;
 1536|      0|    char const *p;
 1537|      0|    _Bool saw_slash;
 1538|       |
 1539|      0|    {
 1540|      0|        base = name + 0;
 1541|      0|        saw_slash = (_Bool)0;
 1542|      0|        {
 1543|      0|            while (1) {
 1544|      0|while_continue: /* CIL Label */
 1545|      0|                ;
 1546|      0|                if (!((int const) * base == 47)) {
 1547|      0|                    goto while_break;
 1548|      0|                }
 1549|      0|                base++;
 1550|      0|            }
 1551|      0|while_break: /* CIL Label */
 1552|      0|            ;
 1553|      0|        }
 1554|      0|        p = base;
 1555|      0|        {
 1556|      0|            while (1) {
 1557|      0|while_continue___0: /* CIL Label */
 1558|      0|                ;
 1559|      0|                if (!*p) {
 1560|      0|                    goto while_break___0;
 1561|      0|                }
 1562|      0|                if ((int const) * p == 47) {
 1563|      0|                    saw_slash = (_Bool)1;
 1564|      0|                }
 1565|      0|                else {
 1566|      0|                    if (saw_slash) {
 1567|      0|                        base = p;
 1568|      0|                        saw_slash = (_Bool)0;
 1569|      0|                    }
 1570|      0|                }
 1571|      0|                p++;
 1572|      0|            }
 1573|      0|while_break___0: /* CIL Label */
 1574|      0|            ;
 1575|      0|        }
 1576|      0|        return ((char *)base);
 1577|      0|    }
 1578|      0|}
 1579|       |__inline static unsigned char to_uchar(char ch)
 1580|      0|{
 1581|       |
 1582|      0|    {
 1583|      0|        return ((unsigned char)ch);
 1584|      0|    }
 1585|      0|}
 1586|       |static char const b64str[64] = {
 1587|       |    (char const)'A', (char const)'B', (char const)'C', (char const)'D',
 1588|       |    (char const)'E', (char const)'F', (char const)'G', (char const)'H',
 1589|       |    (char const)'I', (char const)'J', (char const)'K', (char const)'L',
 1590|       |    (char const)'M', (char const)'N', (char const)'O', (char const)'P',
 1591|       |    (char const)'Q', (char const)'R', (char const)'S', (char const)'T',
 1592|       |    (char const)'U', (char const)'V', (char const)'W', (char const)'X',
 1593|       |    (char const)'Y', (char const)'Z', (char const)'a', (char const)'b',
 1594|       |    (char const)'c', (char const)'d', (char const)'e', (char const)'f',
 1595|       |    (char const)'g', (char const)'h', (char const)'i', (char const)'j',
 1596|       |    (char const)'k', (char const)'l', (char const)'m', (char const)'n',
 1597|       |    (char const)'o', (char const)'p', (char const)'q', (char const)'r',
 1598|       |    (char const)'s', (char const)'t', (char const)'u', (char const)'v',
 1599|       |    (char const)'w', (char const)'x', (char const)'y', (char const)'z',
 1600|       |    (char const)'0', (char const)'1', (char const)'2', (char const)'3',
 1601|       |    (char const)'4', (char const)'5', (char const)'6', (char const)'7',
 1602|       |    (char const)'8', (char const)'9', (char const)'+', (char const)'/'
 1603|       |};
 1604|       |static signed char const b64[256] = {
 1605|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 1606|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 1607|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 1608|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 1609|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 1610|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 1611|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 1612|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 1613|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 1614|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 1615|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 1616|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 1617|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 1618|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 1619|       |    (signed char const) - 1, (signed char const)62,   (signed char const) - 1,
 1620|       |    (signed char const) - 1, (signed char const) - 1, (signed char const)63,
 1621|       |    (signed char const)52,   (signed char const)53,   (signed char const)54,
 1622|       |    (signed char const)55,   (signed char const)56,   (signed char const)57,
 1623|       |    (signed char const)58,   (signed char const)59,   (signed char const)60,
 1624|       |    (signed char const)61,   (signed char const) - 1, (signed char const) - 1,
 1625|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 1626|       |    (signed char const) - 1, (signed char const) - 1, (signed char const)0,
 1627|       |    (signed char const)1,    (signed char const)2,    (signed char const)3,
 1628|       |    (signed char const)4,    (signed char const)5,    (signed char const)6,
 1629|       |    (signed char const)7,    (signed char const)8,    (signed char const)9,
 1630|       |    (signed char const)10,   (signed char const)11,   (signed char const)12,
 1631|       |    (signed char const)13,   (signed char const)14,   (signed char const)15,
 1632|       |    (signed char const)16,   (signed char const)17,   (signed char const)18,
 1633|       |    (signed char const)19,   (signed char const)20,   (signed char const)21,
 1634|       |    (signed char const)22,   (signed char const)23,   (signed char const)24,
 1635|       |    (signed char const)25,   (signed char const) - 1, (signed char const) - 1,
 1636|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 1637|       |    (signed char const) - 1, (signed char const)26,   (signed char const)27,
 1638|       |    (signed char const)28,   (signed char const)29,   (signed char const)30,
 1639|       |    (signed char const)31,   (signed char const)32,   (signed char const)33,
 1640|       |    (signed char const)34,   (signed char const)35,   (signed char const)36,
 1641|       |    (signed char const)37,   (signed char const)38,   (signed char const)39,
 1642|       |    (signed char const)40,   (signed char const)41,   (signed char const)42,
 1643|       |    (signed char const)43,   (signed char const)44,   (signed char const)45,
 1644|       |    (signed char const)46,   (signed char const)47,   (signed char const)48,
 1645|       |    (signed char const)49,   (signed char const)50,   (signed char const)51,
 1646|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 1647|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 1648|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 1649|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 1650|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 1651|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 1652|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 1653|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 1654|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 1655|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 1656|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 1657|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 1658|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 1659|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 1660|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 1661|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 1662|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 1663|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 1664|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 1665|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 1666|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 1667|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 1668|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 1669|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 1670|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 1671|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 1672|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 1673|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 1674|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 1675|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 1676|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 1677|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 1678|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 1679|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 1680|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 1681|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 1682|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 1683|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 1684|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 1685|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 1686|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 1687|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 1688|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 1689|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 1690|       |    (signed char const) - 1
 1691|       |};
 1692|       |char const *simple_backup_suffix;
 1693|       |void (*argmatch_die)(void);
 1694|       |ptrdiff_t __xargmatch_internal(char const *context, char const *arg,
 1695|       |                               char const *const *arglist, char const *vallist,
 1696|       |                               size_t valsize, void (*exit_fn)(void));
 1697|       |extern __attribute__((__nothrow__)) char *(
 1698|       |    __attribute__((__nonnull__(1), __leaf__)) getenv)(char const *__name);
 1699|       |extern __attribute__((__nothrow__)) int(__attribute__((
 1700|       |        __nonnull__(1, 2), __leaf__)) memcmp)(void const *__s1, void const *__s2,
 1701|       |                size_t __n) __attribute__((__pure__));
 1702|       |extern __attribute__((__nothrow__)) char *(__attribute__((
 1703|       |            __nonnull__(1, 2), __leaf__)) strcpy)(char *__restrict __dest,
 1704|       |                    char const *__restrict __src);
 1705|       |extern __attribute__((__nothrow__)) long(__attribute__((
 1706|       |            __nonnull__(1), __leaf__)) pathconf)(char const *__path, int __name);
 1707|       |extern int(__attribute__((__nonnull__(1))) closedir)(DIR *__dirp);
 1708|       |extern struct dirent *(__attribute__((__nonnull__(1))) readdir)(DIR *__dirp);
 1709|       |char const *simple_backup_suffix = "~";
 1710|       |static char const *const backup_args[9] = {
 1711|       |    (char const * /* const  */) "none",     (char const * /* const  */) "off",
 1712|       |    (char const * /* const  */) "simple",   (char const * /* const  */) "never",
 1713|       |    (char const * /* const  */) "existing", (char const * /* const  */) "nil",
 1714|       |    (char const * /* const  */) "numbered", (char const * /* const  */) "t",
 1715|       |    (char const * /* const  */)((void *)0)
 1716|       |};
 1717|       |static enum backup_type const backup_types[8] = {
 1718|       |    (enum backup_type const)0, (enum backup_type const)0,
 1719|       |    (enum backup_type const)1, (enum backup_type const)1,
 1720|       |    (enum backup_type const)2, (enum backup_type const)2,
 1721|       |    (enum backup_type const)3, (enum backup_type const)3
 1722|       |};
 1723|       |extern __ssize_t getdelim(char **__restrict __lineptr, size_t *__restrict __n,
 1724|       |                          int __delimiter, FILE *__restrict __stream);
 1725|       |extern __attribute__((__nothrow__)) int(__attribute__((__leaf__)) feof)(
 1726|       |    FILE *__stream);
 1727|       |ptrdiff_t argmatch(char const *arg, char const *const *arglist,
 1728|       |                   char const *vallist, size_t valsize)
 1729|       |__attribute__((__pure__));
 1730|       |void argmatch_invalid(char const *context, char const *value,
 1731|       |                      ptrdiff_t problem);
 1732|       |void argmatch_valid(char const *const *arglist, char const *vallist,
 1733|       |                    size_t valsize);
 1734|       |extern int fprintf(FILE *__restrict __stream, char const *__restrict __format,
 1735|       |                   ...);
 1736|       |extern int putc_unlocked(int __c, FILE *__stream);
 1737|       |extern int fputs_unlocked(char const *__restrict __s,
 1738|       |                          FILE *__restrict __stream);
 1739|       |extern __attribute__((__nothrow__)) int(__attribute__((__nonnull__(1, 2),
 1740|       |                                        __leaf__)) strncmp)(
 1741|       |                                                char const *__s1, char const *__s2, size_t __n) __attribute__((__pure__));
 1742|       |char *quotearg_n_style(int n, enum quoting_style s, char const *arg);
 1743|       |char const *quote_n(int n, char const *name);
 1744|       |__attribute__((__noreturn__)) void usage(int status);
 1745|       |static void __argmatch_die(void)
 1746|      0|{
 1747|       |
 1748|      0|    {
 1749|      0|        {
 1750|      0|            usage(1);
 1751|      0|        }
 1752|      0|        return;
 1753|      0|    }
 1754|      0|}
 1755|       |void (*argmatch_die)(void) = &__argmatch_die;
 1756|       |ptrdiff_t argmatch(char const *arg, char const *const *arglist,
 1757|       |                   char const *vallist, size_t valsize)
 1758|       |__attribute__((__pure__));
 1759|       |ptrdiff_t argmatch(char const *arg, char const *const *arglist,
 1760|       |                   char const *vallist, size_t valsize)
 1761|      0|{
 1762|      0|    size_t i;
 1763|      0|    size_t arglen;
 1764|      0|    ptrdiff_t matchind;
 1765|      0|    _Bool ambiguous;
 1766|      0|    int tmp;
 1767|      0|    size_t tmp___0;
 1768|      0|    int tmp___1;
 1769|       |
 1770|      0|    {
 1771|      0|        {
 1772|      0|            matchind = (ptrdiff_t)-1;
 1773|      0|            ambiguous = (_Bool)0;
 1774|      0|            arglen = strlen(arg);
 1775|      0|            i = (size_t)0;
 1776|      0|        }
 1777|      0|        {
 1778|      0|            while (1) {
 1779|      0|while_continue: /* CIL Label */
 1780|      0|                ;
 1781|      0|                if (!*(arglist + i)) {
 1782|      0|                    goto while_break;
 1783|      0|                }
 1784|      0|                {
 1785|      0|                    tmp___1 = strncmp((char const *)*(arglist + i), arg, arglen);
 1786|      0|                }
 1787|      0|                if (!tmp___1) {
 1788|      0|                    {
 1789|      0|                        tmp___0 = strlen((char const *)*(arglist + i));
 1790|      0|                    }
 1791|      0|                    if (tmp___0 == arglen) {
 1792|      0|                        return ((ptrdiff_t)i);
 1793|      0|                    }
 1794|      0|                    else {
 1795|      0|                        if (matchind == -1L) {
 1796|      0|                            matchind = (ptrdiff_t)i;
 1797|      0|                        }
 1798|      0|                        else {
 1799|      0|                            if ((unsigned long)vallist == (unsigned long)((void *)0)) {
 1800|      0|                                ambiguous = (_Bool)1;
 1801|      0|                            }
 1802|      0|                            else {
 1803|      0|                                {
 1804|      0|                                    tmp = memcmp(
 1805|      0|                                              (void const *)(vallist + valsize * (size_t)matchind),
 1806|      0|                                              (void const *)(vallist + valsize * i), valsize);
 1807|      0|                                }
 1808|      0|                                if (tmp) {
 1809|      0|                                    ambiguous = (_Bool)1;
 1810|      0|                                }
 1811|      0|                            }
 1812|      0|                        }
 1813|      0|                    }
 1814|      0|                }
 1815|      0|                i++;
 1816|      0|            }
 1817|      0|while_break: /* CIL Label */
 1818|      0|            ;
 1819|      0|        }
 1820|      0|        if (ambiguous) {
 1821|      0|            return ((ptrdiff_t)-2);
 1822|      0|        }
 1823|      0|        else {
 1824|      0|            return (matchind);
 1825|      0|        }
 1826|      0|    }
 1827|      0|}
 1828|       |void argmatch_invalid(char const *context, char const *value,
 1829|       |                      ptrdiff_t problem)
 1830|      0|{
 1831|      0|    char const *format;
 1832|      0|    char *tmp;
 1833|      0|    char *tmp___0;
 1834|      0|    char *tmp___1;
 1835|      0|    char const *tmp___2;
 1836|      0|    char *tmp___3;
 1837|      0|    char *__cil_tmp10;
 1838|      0|    char *__cil_tmp11;
 1839|       |
 1840|      0|    {
 1841|      0|        if (problem == -1L) {
 1842|      0|            {
 1843|      0|                tmp = gettext("invalid argument %s for %s");
 1844|      0|                tmp___1 = tmp;
 1845|      0|            }
 1846|      0|        }
 1847|      0|        else {
 1848|      0|            {
 1849|      0|                tmp___0 = gettext("ambiguous argument %s for %s");
 1850|      0|                tmp___1 = tmp___0;
 1851|      0|            }
 1852|      0|        }
 1853|      0|        {
 1854|      0|            format = (char const *)tmp___1;
 1855|      0|            tmp___2 = quote_n(1, context);
 1856|      0|            tmp___3 = quotearg_n_style(0, (enum quoting_style)6, value);
 1857|      0|            error(0, 0, format, tmp___3, tmp___2);
 1858|      0|        }
 1859|      0|        return;
 1860|      0|    }
 1861|      0|}
 1862|       |void argmatch_valid(char const *const *arglist, char const *vallist,
 1863|       |                    size_t valsize)
 1864|      0|{
 1865|      0|    size_t i;
 1866|      0|    char const *last_val;
 1867|      0|    char *tmp;
 1868|      0|    char const *tmp___0;
 1869|      0|    char const *tmp___1;
 1870|      0|    int tmp___2;
 1871|      0|    char *__cil_tmp10;
 1872|       |
 1873|      0|    {
 1874|      0|        {
 1875|      0|            last_val = (char const *)((void *)0);
 1876|      0|            tmp = gettext("Valid arguments are:");
 1877|      0|            fputs_unlocked((char const * /* __restrict  */)tmp,
 1878|      0|                           (FILE * /* __restrict  */)stderr);
 1879|      0|            i = (size_t)0;
 1880|      0|        }
 1881|      0|        {
 1882|      0|            while (1) {
 1883|      0|while_continue: /* CIL Label */
 1884|      0|                ;
 1885|      0|                if (!*(arglist + i)) {
 1886|      0|                    goto while_break;
 1887|      0|                }
 1888|      0|                if (i == 0UL) {
 1889|      0|                    {
 1890|      0|                        tmp___0 = quote((char const *)*(arglist + i));
 1891|      0|                        fprintf((FILE * /* __restrict  */)stderr,
 1892|      0|                                (char const * /* __restrict  */) "\n  - %s", tmp___0);
 1893|      0|                        last_val = vallist + valsize * i;
 1894|      0|                    }
 1895|      0|                }
 1896|      0|                else {
 1897|      0|                    {
 1898|      0|                        tmp___2 = memcmp((void const *)last_val,
 1899|      0|                                         (void const *)(vallist + valsize * i), valsize);
 1900|      0|                    }
 1901|      0|                    if (tmp___2) {
 1902|      0|                        {
 1903|      0|                            tmp___0 = quote((char const *)*(arglist + i));
 1904|      0|                            fprintf((FILE * /* __restrict  */)stderr,
 1905|      0|                                    (char const * /* __restrict  */) "\n  - %s", tmp___0);
 1906|      0|                            last_val = vallist + valsize * i;
 1907|      0|                        }
 1908|      0|                    }
 1909|      0|                    else {
 1910|      0|                        {
 1911|      0|                            tmp___1 = quote((char const *)*(arglist + i));
 1912|      0|                            fprintf((FILE * /* __restrict  */)stderr,
 1913|      0|                                    (char const * /* __restrict  */) ", %s", tmp___1);
 1914|      0|                        }
 1915|      0|                    }
 1916|      0|                }
 1917|      0|                i++;
 1918|      0|            }
 1919|      0|while_break: /* CIL Label */
 1920|      0|            ;
 1921|      0|        }
 1922|      0|        {
 1923|      0|            putc_unlocked('\n', stderr);
 1924|      0|        }
 1925|      0|        return;
 1926|      0|    }
 1927|      0|}
 1928|       |ptrdiff_t __xargmatch_internal(char const *context, char const *arg,
 1929|       |                               char const *const *arglist, char const *vallist,
 1930|       |                               size_t valsize, void (*exit_fn)(void))
 1931|      0|{
 1932|      0|    ptrdiff_t res;
 1933|      0|    ptrdiff_t tmp;
 1934|       |
 1935|      0|    {
 1936|      0|        {
 1937|      0|            tmp = argmatch(arg, arglist, vallist, valsize);
 1938|      0|            res = tmp;
 1939|      0|        }
 1940|      0|        if (res >= 0L) {
 1941|      0|            return (res);
 1942|      0|        }
 1943|      0|        {
 1944|      0|            argmatch_invalid(context, arg, res);
 1945|      0|            argmatch_valid(arglist, vallist, valsize);
 1946|      0|            (*exit_fn)();
 1947|      0|        }
 1948|      0|        return ((ptrdiff_t)-1);
 1949|      0|    }
 1950|      0|}
 1951|       |extern __attribute__((__nothrow__))
 1952|       |ssize_t(__attribute__((__nonnull__(2, 3), __leaf__)) readlinkat)(
 1953|       |    int __fd, char const *__restrict __path, char *__restrict __buf,
 1954|       |    size_t __len);
 1955|       |extern __attribute__((__nothrow__)) void *(__attribute__((
 1956|       |            __warn_unused_result__, __leaf__)) realloc)(void *__ptr, size_t __size);
 1957|       |struct allocator const stdlib_allocator = {
 1958|       |    (void *(*)(size_t))(&malloc), (void *(*)(void *, size_t))(&realloc),
 1959|       |    (void (*)(void *))(&free), (void (*)(size_t))((void *)0)
 1960|       |};
 1961|       |extern __attribute__((__nothrow__)) int(
 1962|       |    __attribute__((__nonnull__(1), __leaf__)) rpmatch)(char const *__response);
 1963|       |extern __ssize_t getline(char **__restrict __lineptr, size_t *__restrict __n,
 1964|       |                         FILE *__restrict __stream);
 1965|       |__inline static void *xnmalloc(size_t n, size_t s)
 1966|       |__attribute__((__malloc__, __alloc_size__(1, 2)));
 1967|       |__inline static void *xnmalloc(size_t n, size_t s)
 1968|       |__attribute__((__malloc__, __alloc_size__(1, 2)));
 1969|       |__inline static void *xnmalloc(size_t n, size_t s)
 1970|      0|{
 1971|      0|    int tmp;
 1972|      0|    void *tmp___0;
 1973|      0|
 1974|      0|    {
 1975|      0|        if (sizeof(ptrdiff_t) <= sizeof(size_t)) {
 1976|      0|            tmp = -1;
 1977|      0|        }
 1978|      0|        else {
 1979|      0|            tmp = -2;
 1980|      0|        }
 1981|      0|        if ((size_t)tmp / s < n) {
 1982|      0|            {
 1983|      0|                xalloc_die();
 1984|      0|            }
 1985|      0|        }
 1986|      0|        {
 1987|      0|            tmp___0 = xmalloc(n * s);
 1988|      0|        }
 1989|      0|        return (tmp___0);
 1990|      0|    }
 1991|      0|}
 1992|       |extern __attribute__((__nothrow__)) unsigned short const **(
 1993|       |    __attribute__((__leaf__)) __ctype_b_loc)(void)__attribute__((__const__));
 1994|       |extern __attribute__((__nothrow__))
 1995|       |uintmax_t(__attribute__((__leaf__)) strtoumax)(char const *__restrict __nptr,
 1996|       |        char **__restrict __endptr,
 1997|       |        int __base);
 1998|       |strtol_error xstrtoul(char const *s, char **ptr, int strtol_base,
 1999|       |                      unsigned long *val, char const *valid_suffixes);
 2000|       |extern __attribute__((__nothrow__)) unsigned long(__attribute__((
 2001|       |            __nonnull__(1), __leaf__)) strtoul)(char const *__restrict __nptr,
 2002|       |                    char **__restrict __endptr, int __base);
 2003|       |static strtol_error bkm_scale___0(unsigned long *x, int scale_factor)
 2004|      0|{
 2005|       |
 2006|      0|    {
 2007|      0|        if (0xffffffffffffffffUL / (unsigned long)scale_factor < *x) {
 2008|      0|            *x = 0xffffffffffffffffUL;
 2009|      0|            return ((strtol_error)1);
 2010|      0|        }
 2011|      0|        *x *= (unsigned long)scale_factor;
 2012|      0|        return ((strtol_error)0);
 2013|      0|    }
 2014|      0|}
 2015|       |static strtol_error bkm_scale_by_power___0(unsigned long *x, int base,
 2016|       |        int power)
 2017|      0|{
 2018|      0|    strtol_error err;
 2019|      0|    strtol_error tmp;
 2020|      0|    int tmp___0;
 2021|       |
 2022|      0|    {
 2023|      0|        err = (strtol_error)0;
 2024|      0|        {
 2025|      0|            while (1) {
 2026|      0|while_continue: /* CIL Label */
 2027|      0|                ;
 2028|      0|                tmp___0 = power;
 2029|      0|                power--;
 2030|      0|                if (!tmp___0) {
 2031|      0|                    goto while_break;
 2032|      0|                }
 2033|      0|                {
 2034|      0|                    tmp = bkm_scale___0(x, base);
 2035|      0|                    err = (strtol_error)((unsigned int)err | (unsigned int)tmp);
 2036|      0|                }
 2037|      0|            }
 2038|      0|while_break: /* CIL Label */
 2039|      0|            ;
 2040|      0|        }
 2041|      0|        return (err);
 2042|      0|    }
 2043|      0|}
 2044|       |strtol_error xstrtoul(char const *s, char **ptr, int strtol_base,
 2045|       |                      unsigned long *val, char const *valid_suffixes)
 2046|      0|{
 2047|      0|    char *t_ptr;
 2048|      0|    char **p;
 2049|      0|    unsigned long tmp;
 2050|      0|    strtol_error err;
 2051|      0|    char const *q;
 2052|      0|    unsigned char ch;
 2053|      0|    unsigned short const **tmp___0;
 2054|      0|    int *tmp___1;
 2055|      0|    char *tmp___2;
 2056|      0|    int *tmp___3;
 2057|      0|    int *tmp___4;
 2058|      0|    int base;
 2059|      0|    int suffixes;
 2060|      0|    strtol_error overflow;
 2061|      0|    char *tmp___5;
 2062|      0|    char *tmp___6;
 2063|       |
 2064|      0|    {
 2065|      0|        err = (strtol_error)0;
 2066|      0|        if (0 <= strtol_base) {
 2067|      0|            if (!(strtol_base <= 36)) {
 2068|      0|                {
 2069|      0|                    __assert_fail("0 <= strtol_base && strtol_base <= 36",
 2070|      0|                                  "/home/khheo/project/program-reduce/benchmark/"
 2071|      0|                                  "coreutils-8.16/lib/xstrtol.c",
 2072|      0|                                  96U, "xstrtoul");
 2073|      0|                }
 2074|      0|            }
 2075|      0|        }
 2076|      0|        else {
 2077|      0|            {
 2078|      0|                __assert_fail("0 <= strtol_base && strtol_base <= 36",
 2079|      0|                              "/home/khheo/project/program-reduce/benchmark/"
 2080|      0|                              "coreutils-8.16/lib/xstrtol.c",
 2081|      0|                              96U, "xstrtoul");
 2082|      0|            }
 2083|      0|        }
 2084|      0|        if (ptr) {
 2085|      0|            p = ptr;
 2086|      0|        }
 2087|      0|        else {
 2088|      0|            p = &t_ptr;
 2089|      0|        }
 2090|      0|        q = s;
 2091|      0|        ch = (unsigned char)*q;
 2092|      0|        {
 2093|      0|            while (1) {
 2094|      0|while_continue: /* CIL Label */
 2095|      0|                ;
 2096|      0|                {
 2097|      0|                    tmp___0 = __ctype_b_loc();
 2098|      0|                }
 2099|      0|                if (!((int const) * (*tmp___0 + (int)ch) & 8192)) {
 2100|      0|                    goto while_break;
 2101|      0|                }
 2102|      0|                q++;
 2103|      0|                ch = (unsigned char)*q;
 2104|      0|            }
 2105|      0|while_break: /* CIL Label */
 2106|      0|            ;
 2107|      0|        }
 2108|      0|        if ((int)ch == 45) {
 2109|      0|            return ((strtol_error)4);
 2110|      0|        }
 2111|      0|        {
 2112|      0|            tmp___1 = __errno_location();
 2113|      0|            *tmp___1 = 0;
 2114|      0|            tmp = strtoul((char const * /* __restrict  */)s,
 2115|      0|                          (char ** /* __restrict  */)p, strtol_base);
 2116|      0|        }
 2117|      0|        if ((unsigned long)*p == (unsigned long)s) {
 2118|      0|            if (valid_suffixes) {
 2119|      0|                if (*(*p)) {
 2120|      0|                    {
 2121|      0|                        tmp___2 = strchr(valid_suffixes, (int)*(*p));
 2122|      0|                    }
 2123|      0|                    if (tmp___2) {
 2124|      0|                        tmp = 1UL;
 2125|      0|                    }
 2126|      0|                    else {
 2127|      0|                        return ((strtol_error)4);
 2128|      0|                    }
 2129|      0|                }
 2130|      0|                else {
 2131|      0|                    return ((strtol_error)4);
 2132|      0|                }
 2133|      0|            }
 2134|      0|            else {
 2135|      0|                return ((strtol_error)4);
 2136|      0|            }
 2137|      0|        }
 2138|      0|        else {
 2139|      0|            {
 2140|      0|                tmp___4 = __errno_location();
 2141|      0|            }
 2142|      0|            if (*tmp___4 != 0) {
 2143|      0|                {
 2144|      0|                    tmp___3 = __errno_location();
 2145|      0|                }
 2146|      0|                if (*tmp___3 != 34) {
 2147|      0|                    return ((strtol_error)4);
 2148|      0|                }
 2149|      0|                err = (strtol_error)1;
 2150|      0|            }
 2151|      0|        }
 2152|      0|        if (!valid_suffixes) {
 2153|      0|            *val = tmp;
 2154|      0|            return (err);
 2155|      0|        }
 2156|      0|        if ((int)*(*p) != 0) {
 2157|      0|            {
 2158|      0|                base = 1024;
 2159|      0|                suffixes = 1;
 2160|      0|                tmp___5 = strchr(valid_suffixes, (int)*(*p));
 2161|      0|            }
 2162|      0|            if (!tmp___5) {
 2163|      0|                *val = tmp;
 2164|      0|                return ((strtol_error)((unsigned int)err | 2U));
 2165|      0|            }
 2166|      0|            {
 2167|      0|                tmp___6 = strchr(valid_suffixes, '0');
 2168|      0|            }
 2169|      0|            if (tmp___6) {
 2170|      0|                {
 2171|      0|                    if ((int)*(*(p + 0) + 1) == 105) {
 2172|      0|                        goto case_105;
 2173|      0|                    }
 2174|      0|                    if ((int)*(*(p + 0) + 1) == 66) {
 2175|      0|                        goto case_66;
 2176|      0|                    }
 2177|      0|                    if ((int)*(*(p + 0) + 1) == 68) {
 2178|      0|                        goto case_66;
 2179|      0|                    }
 2180|      0|                    goto switch_break;
 2181|      0|case_105: /* CIL Label */
 2182|      0|                    if ((int)*(*(p + 0) + 2) == 66) {
 2183|      0|                        suffixes += 2;
 2184|      0|                    }
 2185|      0|                    goto switch_break;
 2186|      0|case_66: /* CIL Label */
 2187|      0|case_68: /* CIL Label */
 2188|      0|                    base = 1000;
 2189|      0|                    suffixes++;
 2190|      0|                    goto switch_break;
 2191|      0|switch_break: /* CIL Label */
 2192|      0|                    ;
 2193|      0|                }
 2194|      0|            }
 2195|      0|            {
 2196|      0|                if ((int)*(*p) == 98) {
 2197|      0|                    goto case_98;
 2198|      0|                }
 2199|      0|                if ((int)*(*p) == 66) {
 2200|      0|                    goto case_66___0;
 2201|      0|                }
 2202|      0|                if ((int)*(*p) == 99) {
 2203|      0|                    goto case_99;
 2204|      0|                }
 2205|      0|                if ((int)*(*p) == 69) {
 2206|      0|                    goto case_69;
 2207|      0|                }
 2208|      0|                if ((int)*(*p) == 71) {
 2209|      0|                    goto case_71;
 2210|      0|                }
 2211|      0|                if ((int)*(*p) == 103) {
 2212|      0|                    goto case_71;
 2213|      0|                }
 2214|      0|                if ((int)*(*p) == 107) {
 2215|      0|                    goto case_107;
 2216|      0|                }
 2217|      0|                if ((int)*(*p) == 75) {
 2218|      0|                    goto case_107;
 2219|      0|                }
 2220|      0|                if ((int)*(*p) == 77) {
 2221|      0|                    goto case_77;
 2222|      0|                }
 2223|      0|                if ((int)*(*p) == 109) {
 2224|      0|                    goto case_77;
 2225|      0|                }
 2226|      0|                if ((int)*(*p) == 80) {
 2227|      0|                    goto case_80;
 2228|      0|                }
 2229|      0|                if ((int)*(*p) == 84) {
 2230|      0|                    goto case_84;
 2231|      0|                }
 2232|      0|                if ((int)*(*p) == 116) {
 2233|      0|                    goto case_84;
 2234|      0|                }
 2235|      0|                if ((int)*(*p) == 119) {
 2236|      0|                    goto case_119;
 2237|      0|                }
 2238|      0|                if ((int)*(*p) == 89) {
 2239|      0|                    goto case_89;
 2240|      0|                }
 2241|      0|                if ((int)*(*p) == 90) {
 2242|      0|                    goto case_90;
 2243|      0|                }
 2244|      0|                goto switch_default;
 2245|      0|case_98: { /* CIL Label */
 2246|      0|                    overflow = bkm_scale___0(&tmp, 512);
 2247|      0|                }
 2248|      0|                goto switch_break___0;
 2249|      0|case_66___0: { /* CIL Label */
 2250|      0|                    overflow = bkm_scale___0(&tmp, 1024);
 2251|      0|                }
 2252|      0|                goto switch_break___0;
 2253|      0|case_99: /* CIL Label */
 2254|      0|                overflow = (strtol_error)0;
 2255|      0|                goto switch_break___0;
 2256|      0|case_69: { /* CIL Label */
 2257|      0|                    overflow = bkm_scale_by_power___0(&tmp, base, 6);
 2258|      0|                }
 2259|      0|                goto switch_break___0;
 2260|      0|case_71:    /* CIL Label */
 2261|      0|case_103: { /* CIL Label */
 2262|      0|                    overflow = bkm_scale_by_power___0(&tmp, base, 3);
 2263|      0|                }
 2264|      0|                goto switch_break___0;
 2265|      0|case_107:  /* CIL Label */
 2266|      0|case_75: { /* CIL Label */
 2267|      0|                    overflow = bkm_scale_by_power___0(&tmp, base, 1);
 2268|      0|                }
 2269|      0|                goto switch_break___0;
 2270|      0|case_77:    /* CIL Label */
 2271|      0|case_109: { /* CIL Label */
 2272|      0|                    overflow = bkm_scale_by_power___0(&tmp, base, 2);
 2273|      0|                }
 2274|      0|                goto switch_break___0;
 2275|      0|case_80: { /* CIL Label */
 2276|      0|                    overflow = bkm_scale_by_power___0(&tmp, base, 5);
 2277|      0|                }
 2278|      0|                goto switch_break___0;
 2279|      0|case_84:    /* CIL Label */
 2280|      0|case_116: { /* CIL Label */
 2281|      0|                    overflow = bkm_scale_by_power___0(&tmp, base, 4);
 2282|      0|                }
 2283|      0|                goto switch_break___0;
 2284|      0|case_119: { /* CIL Label */
 2285|      0|                    overflow = bkm_scale___0(&tmp, 2);
 2286|      0|                }
 2287|      0|                goto switch_break___0;
 2288|      0|case_89: { /* CIL Label */
 2289|      0|                    overflow = bkm_scale_by_power___0(&tmp, base, 8);
 2290|      0|                }
 2291|      0|                goto switch_break___0;
 2292|      0|case_90: { /* CIL Label */
 2293|      0|                    overflow = bkm_scale_by_power___0(&tmp, base, 7);
 2294|      0|                }
 2295|      0|                goto switch_break___0;
 2296|      0|switch_default: /* CIL Label */
 2297|      0|                *val = tmp;
 2298|      0|                return ((strtol_error)((unsigned int)err | 2U));
 2299|      0|switch_break___0: /* CIL Label */
 2300|      0|                ;
 2301|      0|            }
 2302|      0|            err = (strtol_error)((unsigned int)err | (unsigned int)overflow);
 2303|      0|            *p += suffixes;
 2304|      0|            if (*(*p)) {
 2305|      0|                err = (strtol_error)((unsigned int)err | 2U);
 2306|      0|            }
 2307|      0|        }
 2308|      0|        *val = tmp;
 2309|      0|        return (err);
 2310|      0|    }
 2311|      0|}
 2312|       |extern __attribute__((__nothrow__)) long(__attribute__((
 2313|       |            __nonnull__(1), __leaf__)) strtol)(char const *__restrict __nptr,
 2314|       |                    char **__restrict __endptr, int __base);
 2315|       |extern __attribute__((__nothrow__))
 2316|       |intmax_t(__attribute__((__leaf__)) strtoimax)(char const *__restrict __nptr,
 2317|       |        char **__restrict __endptr,
 2318|       |        int __base);
 2319|       |extern __attribute__((__nothrow__)) char *(__attribute__((
 2320|       |            __nonnull__(1), __leaf__)) strndup)(char const *__string, size_t __n)
 2321|       |__attribute__((__malloc__));
 2322|       |extern __attribute__((__nothrow__)) int(__attribute__((__leaf__)) ferror)(
 2323|       |    FILE *__stream);
 2324|       |int memcoll(char *s1, size_t s1len, char *s2, size_t s2len);
 2325|       |char *quotearg_n_style_mem(int n, enum quoting_style s, char const *arg,
 2326|       |                           size_t argsize);
 2327|       |int xmemcoll(char *s1, size_t s1len, char *s2, size_t s2len);
 2328|       |static void collate_error(int collation_errno, char const *s1, size_t s1len,
 2329|       |                          char const *s2, size_t s2len)
 2330|      0|{
 2331|      0|    char *tmp;
 2332|      0|    char *tmp___0;
 2333|      0|    char *tmp___1;
 2334|      0|    char *tmp___2;
 2335|      0|    char *tmp___3;
 2336|      0|    char *__cil_tmp11;
 2337|      0|    char *__cil_tmp12;
 2338|      0|    char *__cil_tmp13;
 2339|       |
 2340|      0|    {
 2341|      0|        {
 2342|      0|            tmp = gettext("string comparison failed");
 2343|      0|            error(0, collation_errno, (char const *)tmp);
 2344|      0|            tmp___0 = gettext("Set LC_ALL=\'C\' to work around the problem.");
 2345|      0|            error(0, 0, (char const *)tmp___0);
 2346|      0|            tmp___1 = quotearg_n_style_mem(1, (enum quoting_style)6, s2, s2len);
 2347|      0|            tmp___2 = quotearg_n_style_mem(0, (enum quoting_style)6, s1, s1len);
 2348|      0|            tmp___3 = gettext("The strings compared were %s and %s.");
 2349|      0|            error((int)exit_failure, 0, (char const *)tmp___3, tmp___2, tmp___1);
 2350|      0|        }
 2351|      0|        return;
 2352|      0|    }
 2353|      0|}
 2354|       |int xmemcoll(char *s1, size_t s1len, char *s2, size_t s2len)
 2355|  8.69k|{
 2356|  8.69k|    int diff;
 2357|  8.69k|    int tmp;
 2358|  8.69k|    int collation_errno;
 2359|  8.69k|    int *tmp___0;
 2360|       |
 2361|  8.69k|    {
 2362|  8.69k|        {
 2363|  8.69k|            tmp = memcoll(s1, s1len, s2, s2len);
 2364|  8.69k|            diff = tmp;
 2365|  8.69k|            tmp___0 = __errno_location();
 2366|  8.69k|            collation_errno = *tmp___0;
 2367|  8.69k|        }
 2368|  8.69k|        if (collation_errno) {
 2369|      0|            {
 2370|      0|                collate_error(collation_errno, (char const *)s1, s1len,
 2371|      0|                              (char const *)s2, s2len);
 2372|      0|            }
 2373|      0|        }
 2374|  8.69k|        return (diff);
 2375|  8.69k|    }
 2376|  8.69k|}
 2377|       |void *x2realloc(void *p, size_t *pn);
 2378|       |__inline static void *x2nrealloc(void *p, size_t *pn, size_t s)
 2379|      4|{
 2380|      4|    size_t n;
 2381|      4|    void *tmp;
 2382|       |
 2383|      4|    {
 2384|      4|        n = *pn;
 2385|      4|        if (!p) {
 2386|      4|            if (!n) {
 2387|      4|                n = 128UL / s;
 2388|      4|                n += (size_t)(!n);
 2389|      4|            }
 2390|      4|        }
 2391|      0|        else {
 2392|      0|            if (0xaaaaaaaaaaaaaaaaUL / s <= n) {
 2393|      0|                {
 2394|      0|                    xalloc_die();
 2395|      0|                }
 2396|      0|            }
 2397|      0|            n += (n + 1UL) / 2UL;
 2398|      0|        }
 2399|      4|        {
 2400|      4|            *pn = n;
 2401|      4|            tmp = xrealloc(p, n * s);
 2402|      4|        }
 2403|      4|        return (tmp);
 2404|      4|    }
 2405|      4|}
 2406|       |extern __attribute__((__nothrow__)) void *(__attribute__((__leaf__)) calloc)(
 2407|       |    size_t __nmemb, size_t __size) __attribute__((__malloc__));
 2408|       |extern __attribute__((__nothrow__)) void *(__attribute__((
 2409|       |            __nonnull__(1), __leaf__)) memset)(void *__s, int __c, size_t __n);
 2410|       |void *xmalloc(size_t n) __attribute__((__malloc__, __alloc_size__(1)));
 2411|       |void *xmalloc(size_t n)
 2412|      0|{
 2413|      0|    void *p;
 2414|      0|    void *tmp;
 2415|       |
 2416|      0|    {
 2417|      0|        {
 2418|      0|            tmp = malloc(n);
 2419|      0|            p = tmp;
 2420|      0|        }
 2421|      0|        if (!p) {
 2422|      0|            if (n != 0UL) {
 2423|      0|                {
 2424|      0|                    xalloc_die();
 2425|      0|                }
 2426|      0|            }
 2427|      0|        }
 2428|      0|        return (p);
 2429|      0|    }
 2430|      0|}
 2431|       |void *xrealloc(void *p, size_t n) __attribute__((__alloc_size__(2)));
 2432|       |void *xrealloc(void *p, size_t n)
 2433|      4|{
 2434|       |
 2435|      4|    {
 2436|      4|        if (!n) {
 2437|      0|            if (p) {
 2438|      0|                {
 2439|      0|                    free(p);
 2440|      0|                }
 2441|      0|                return ((void *)0);
 2442|      0|            }
 2443|      0|        }
 2444|      4|        {
 2445|      4|            p = realloc(p, n);
 2446|      4|        }
 2447|      4|        if (!p) {
 2448|      0|            if (n) {
 2449|      0|                {
 2450|      0|                    xalloc_die();
 2451|      0|                }
 2452|      0|            }
 2453|      0|        }
 2454|      4|        return (p);
 2455|      4|    }
 2456|      4|}
 2457|       |void *x2realloc(void *p, size_t *pn)
 2458|      4|{
 2459|      4|    void *tmp;
 2460|       |
 2461|      4|    {
 2462|      4|        {
 2463|      4|            tmp = x2nrealloc(p, pn, (size_t)1);
 2464|      4|        }
 2465|      4|        return (tmp);
 2466|      4|    }
 2467|      4|}
 2468|       |extern __attribute__((__nothrow__)) int(__attribute__((
 2469|       |        __nonnull__(1), __leaf__)) gethostname)(char *__name, size_t __len);
 2470|       |extern __attribute__((__nothrow__)) char *(__attribute__((__leaf__)) getcwd)(
 2471|       |    char *__buf, size_t __size);
 2472|       |FILE *freopen_safer(char const *name, char const *mode, FILE *f);
 2473|       |__attribute__((__noreturn__)) void xalloc_die(void);
 2474|       |void xalloc_die(void)
 2475|      0|{
 2476|      0|    char *tmp;
 2477|      0|    char *__cil_tmp2;
 2478|       |
 2479|      0|    {
 2480|      0|        {
 2481|      0|            tmp = gettext("memory exhausted");
 2482|      0|            error((int)exit_failure, 0, "%s", tmp);
 2483|      0|            abort();
 2484|      0|        }
 2485|      0|    }
 2486|      0|}
 2487|       |extern __attribute__((__nothrow__))
 2488|       |__uid_t(__attribute__((__leaf__)) geteuid)(void);
 2489|       |static _Bool initialized;
 2490|       |static _Bool can_write;
 2491|       |extern __attribute__((__nothrow__)) int(__attribute__((
 2492|       |        __nonnull__(1, 2), __leaf__)) strcmp)(char const *__s1, char const *__s2)
 2493|       |__attribute__((__pure__));
 2494|       |static unsigned char const nonspacing_table_data[1728] = {
 2495|       |    (unsigned char const)255, (unsigned char const)255,
 2496|       |    (unsigned char const)255, (unsigned char const)255,
 2497|       |    (unsigned char const)0,   (unsigned char const)0,
 2498|       |    (unsigned char const)0,   (unsigned char const)0,
 2499|       |    (unsigned char const)0,   (unsigned char const)0,
 2500|       |    (unsigned char const)0,   (unsigned char const)0,
 2501|       |    (unsigned char const)0,   (unsigned char const)0,
 2502|       |    (unsigned char const)0,   (unsigned char const)128,
 2503|       |    (unsigned char const)255, (unsigned char const)255,
 2504|       |    (unsigned char const)255, (unsigned char const)255,
 2505|       |    (unsigned char const)0,   (unsigned char const)32,
 2506|       |    (unsigned char const)0,   (unsigned char const)0,
 2507|       |    (unsigned char const)0,   (unsigned char const)0,
 2508|       |    (unsigned char const)0,   (unsigned char const)0,
 2509|       |    (unsigned char const)0,   (unsigned char const)0,
 2510|       |    (unsigned char const)0,   (unsigned char const)0,
 2511|       |    (unsigned char const)0,   (unsigned char const)0,
 2512|       |    (unsigned char const)0,   (unsigned char const)0,
 2513|       |    (unsigned char const)0,   (unsigned char const)0,
 2514|       |    (unsigned char const)0,   (unsigned char const)0,
 2515|       |    (unsigned char const)0,   (unsigned char const)0,
 2516|       |    (unsigned char const)0,   (unsigned char const)0,
 2517|       |    (unsigned char const)0,   (unsigned char const)0,
 2518|       |    (unsigned char const)0,   (unsigned char const)0,
 2519|       |    (unsigned char const)0,   (unsigned char const)0,
 2520|       |    (unsigned char const)0,   (unsigned char const)0,
 2521|       |    (unsigned char const)0,   (unsigned char const)0,
 2522|       |    (unsigned char const)0,   (unsigned char const)0,
 2523|       |    (unsigned char const)0,   (unsigned char const)0,
 2524|       |    (unsigned char const)0,   (unsigned char const)0,
 2525|       |    (unsigned char const)0,   (unsigned char const)0,
 2526|       |    (unsigned char const)0,   (unsigned char const)0,
 2527|       |    (unsigned char const)0,   (unsigned char const)0,
 2528|       |    (unsigned char const)0,   (unsigned char const)0,
 2529|       |    (unsigned char const)0,   (unsigned char const)0,
 2530|       |    (unsigned char const)0,   (unsigned char const)0,
 2531|       |    (unsigned char const)0,   (unsigned char const)0,
 2532|       |    (unsigned char const)0,   (unsigned char const)0,
 2533|       |    (unsigned char const)0,   (unsigned char const)0,
 2534|       |    (unsigned char const)0,   (unsigned char const)0,
 2535|       |    (unsigned char const)0,   (unsigned char const)0,
 2536|       |    (unsigned char const)0,   (unsigned char const)0,
 2537|       |    (unsigned char const)0,   (unsigned char const)0,
 2538|       |    (unsigned char const)0,   (unsigned char const)0,
 2539|       |    (unsigned char const)0,   (unsigned char const)0,
 2540|       |    (unsigned char const)0,   (unsigned char const)0,
 2541|       |    (unsigned char const)0,   (unsigned char const)0,
 2542|       |    (unsigned char const)0,   (unsigned char const)0,
 2543|       |    (unsigned char const)255, (unsigned char const)255,
 2544|       |    (unsigned char const)255, (unsigned char const)255,
 2545|       |    (unsigned char const)255, (unsigned char const)255,
 2546|       |    (unsigned char const)255, (unsigned char const)255,
 2547|       |    (unsigned char const)255, (unsigned char const)255,
 2548|       |    (unsigned char const)255, (unsigned char const)255,
 2549|       |    (unsigned char const)255, (unsigned char const)255,
 2550|       |    (unsigned char const)0,   (unsigned char const)0,
 2551|       |    (unsigned char const)0,   (unsigned char const)0,
 2552|       |    (unsigned char const)0,   (unsigned char const)0,
 2553|       |    (unsigned char const)0,   (unsigned char const)0,
 2554|       |    (unsigned char const)0,   (unsigned char const)0,
 2555|       |    (unsigned char const)0,   (unsigned char const)0,
 2556|       |    (unsigned char const)0,   (unsigned char const)0,
 2557|       |    (unsigned char const)0,   (unsigned char const)0,
 2558|       |    (unsigned char const)0,   (unsigned char const)0,
 2559|       |    (unsigned char const)0,   (unsigned char const)0,
 2560|       |    (unsigned char const)0,   (unsigned char const)0,
 2561|       |    (unsigned char const)0,   (unsigned char const)0,
 2562|       |    (unsigned char const)0,   (unsigned char const)0,
 2563|       |    (unsigned char const)0,   (unsigned char const)0,
 2564|       |    (unsigned char const)0,   (unsigned char const)0,
 2565|       |    (unsigned char const)0,   (unsigned char const)0,
 2566|       |    (unsigned char const)0,   (unsigned char const)0,
 2567|       |    (unsigned char const)248, (unsigned char const)3,
 2568|       |    (unsigned char const)0,   (unsigned char const)0,
 2569|       |    (unsigned char const)0,   (unsigned char const)0,
 2570|       |    (unsigned char const)0,   (unsigned char const)0,
 2571|       |    (unsigned char const)0,   (unsigned char const)0,
 2572|       |    (unsigned char const)0,   (unsigned char const)0,
 2573|       |    (unsigned char const)0,   (unsigned char const)0,
 2574|       |    (unsigned char const)0,   (unsigned char const)0,
 2575|       |    (unsigned char const)0,   (unsigned char const)0,
 2576|       |    (unsigned char const)0,   (unsigned char const)0,
 2577|       |    (unsigned char const)0,   (unsigned char const)0,
 2578|       |    (unsigned char const)0,   (unsigned char const)0,
 2579|       |    (unsigned char const)0,   (unsigned char const)0,
 2580|       |    (unsigned char const)0,   (unsigned char const)0,
 2581|       |    (unsigned char const)0,   (unsigned char const)0,
 2582|       |    (unsigned char const)0,   (unsigned char const)0,
 2583|       |    (unsigned char const)0,   (unsigned char const)0,
 2584|       |    (unsigned char const)254, (unsigned char const)255,
 2585|       |    (unsigned char const)255, (unsigned char const)255,
 2586|       |    (unsigned char const)255, (unsigned char const)191,
 2587|       |    (unsigned char const)182, (unsigned char const)0,
 2588|       |    (unsigned char const)0,   (unsigned char const)0,
 2589|       |    (unsigned char const)0,   (unsigned char const)0,
 2590|       |    (unsigned char const)0,   (unsigned char const)0,
 2591|       |    (unsigned char const)15,  (unsigned char const)0,
 2592|       |    (unsigned char const)255, (unsigned char const)7,
 2593|       |    (unsigned char const)0,   (unsigned char const)0,
 2594|       |    (unsigned char const)0,   (unsigned char const)0,
 2595|       |    (unsigned char const)0,   (unsigned char const)248,
 2596|       |    (unsigned char const)255, (unsigned char const)255,
 2597|       |    (unsigned char const)0,   (unsigned char const)0,
 2598|       |    (unsigned char const)1,   (unsigned char const)0,
 2599|       |    (unsigned char const)0,   (unsigned char const)0,
 2600|       |    (unsigned char const)0,   (unsigned char const)0,
 2601|       |    (unsigned char const)0,   (unsigned char const)0,
 2602|       |    (unsigned char const)0,   (unsigned char const)0,
 2603|       |    (unsigned char const)0,   (unsigned char const)0,
 2604|       |    (unsigned char const)192, (unsigned char const)191,
 2605|       |    (unsigned char const)159, (unsigned char const)61,
 2606|       |    (unsigned char const)0,   (unsigned char const)0,
 2607|       |    (unsigned char const)0,   (unsigned char const)128,
 2608|       |    (unsigned char const)2,   (unsigned char const)0,
 2609|       |    (unsigned char const)0,   (unsigned char const)0,
 2610|       |    (unsigned char const)255, (unsigned char const)255,
 2611|       |    (unsigned char const)255, (unsigned char const)7,
 2612|       |    (unsigned char const)0,   (unsigned char const)0,
 2613|       |    (unsigned char const)0,   (unsigned char const)0,
 2614|       |    (unsigned char const)0,   (unsigned char const)0,
 2615|       |    (unsigned char const)0,   (unsigned char const)0,
 2616|       |    (unsigned char const)0,   (unsigned char const)0,
 2617|       |    (unsigned char const)192, (unsigned char const)255,
 2618|       |    (unsigned char const)1,   (unsigned char const)0,
 2619|       |    (unsigned char const)0,   (unsigned char const)0,
 2620|       |    (unsigned char const)0,   (unsigned char const)0,
 2621|       |    (unsigned char const)0,   (unsigned char const)248,
 2622|       |    (unsigned char const)15,  (unsigned char const)0,
 2623|       |    (unsigned char const)0,   (unsigned char const)0,
 2624|       |    (unsigned char const)192, (unsigned char const)251,
 2625|       |    (unsigned char const)239, (unsigned char const)62,
 2626|       |    (unsigned char const)0,   (unsigned char const)0,
 2627|       |    (unsigned char const)0,   (unsigned char const)0,
 2628|       |    (unsigned char const)0,   (unsigned char const)14,
 2629|       |    (unsigned char const)0,   (unsigned char const)0,
 2630|       |    (unsigned char const)0,   (unsigned char const)0,
 2631|       |    (unsigned char const)0,   (unsigned char const)0,
 2632|       |    (unsigned char const)0,   (unsigned char const)0,
 2633|       |    (unsigned char const)0,   (unsigned char const)0,
 2634|       |    (unsigned char const)0,   (unsigned char const)0,
 2635|       |    (unsigned char const)0,   (unsigned char const)0,
 2636|       |    (unsigned char const)0,   (unsigned char const)0,
 2637|       |    (unsigned char const)0,   (unsigned char const)0,
 2638|       |    (unsigned char const)0,   (unsigned char const)0,
 2639|       |    (unsigned char const)7,   (unsigned char const)0,
 2640|       |    (unsigned char const)0,   (unsigned char const)0,
 2641|       |    (unsigned char const)0,   (unsigned char const)0,
 2642|       |    (unsigned char const)0,   (unsigned char const)20,
 2643|       |    (unsigned char const)254, (unsigned char const)33,
 2644|       |    (unsigned char const)254, (unsigned char const)0,
 2645|       |    (unsigned char const)12,  (unsigned char const)0,
 2646|       |    (unsigned char const)0,   (unsigned char const)0,
 2647|       |    (unsigned char const)2,   (unsigned char const)0,
 2648|       |    (unsigned char const)0,   (unsigned char const)0,
 2649|       |    (unsigned char const)0,   (unsigned char const)0,
 2650|       |    (unsigned char const)0,   (unsigned char const)16,
 2651|       |    (unsigned char const)30,  (unsigned char const)32,
 2652|       |    (unsigned char const)0,   (unsigned char const)0,
 2653|       |    (unsigned char const)12,  (unsigned char const)0,
 2654|       |    (unsigned char const)0,   (unsigned char const)0,
 2655|       |    (unsigned char const)6,   (unsigned char const)0,
 2656|       |    (unsigned char const)0,   (unsigned char const)0,
 2657|       |    (unsigned char const)0,   (unsigned char const)0,
 2658|       |    (unsigned char const)0,   (unsigned char const)16,
 2659|       |    (unsigned char const)134, (unsigned char const)57,
 2660|       |    (unsigned char const)2,   (unsigned char const)0,
 2661|       |    (unsigned char const)0,   (unsigned char const)0,
 2662|       |    (unsigned char const)35,  (unsigned char const)0,
 2663|       |    (unsigned char const)6,   (unsigned char const)0,
 2664|       |    (unsigned char const)0,   (unsigned char const)0,
 2665|       |    (unsigned char const)0,   (unsigned char const)0,
 2666|       |    (unsigned char const)0,   (unsigned char const)16,
 2667|       |    (unsigned char const)190, (unsigned char const)33,
 2668|       |    (unsigned char const)0,   (unsigned char const)0,
 2669|       |    (unsigned char const)12,  (unsigned char const)0,
 2670|       |    (unsigned char const)0,   (unsigned char const)0,
 2671|       |    (unsigned char const)2,   (unsigned char const)0,
 2672|       |    (unsigned char const)0,   (unsigned char const)0,
 2673|       |    (unsigned char const)0,   (unsigned char const)0,
 2674|       |    (unsigned char const)0,   (unsigned char const)144,
 2675|       |    (unsigned char const)30,  (unsigned char const)32,
 2676|       |    (unsigned char const)64,  (unsigned char const)0,
 2677|       |    (unsigned char const)12,  (unsigned char const)0,
 2678|       |    (unsigned char const)0,   (unsigned char const)0,
 2679|       |    (unsigned char const)4,   (unsigned char const)0,
 2680|       |    (unsigned char const)0,   (unsigned char const)0,
 2681|       |    (unsigned char const)0,   (unsigned char const)0,
 2682|       |    (unsigned char const)0,   (unsigned char const)0,
 2683|       |    (unsigned char const)1,   (unsigned char const)32,
 2684|       |    (unsigned char const)0,   (unsigned char const)0,
 2685|       |    (unsigned char const)0,   (unsigned char const)0,
 2686|       |    (unsigned char const)0,   (unsigned char const)0,
 2687|       |    (unsigned char const)0,   (unsigned char const)0,
 2688|       |    (unsigned char const)0,   (unsigned char const)0,
 2689|       |    (unsigned char const)0,   (unsigned char const)0,
 2690|       |    (unsigned char const)0,   (unsigned char const)192,
 2691|       |    (unsigned char const)193, (unsigned char const)61,
 2692|       |    (unsigned char const)96,  (unsigned char const)0,
 2693|       |    (unsigned char const)12,  (unsigned char const)0,
 2694|       |    (unsigned char const)0,   (unsigned char const)0,
 2695|       |    (unsigned char const)0,   (unsigned char const)0,
 2696|       |    (unsigned char const)0,   (unsigned char const)0,
 2697|       |    (unsigned char const)0,   (unsigned char const)0,
 2698|       |    (unsigned char const)0,   (unsigned char const)16,
 2699|       |    (unsigned char const)0,   (unsigned char const)48,
 2700|       |    (unsigned char const)0,   (unsigned char const)0,
 2701|       |    (unsigned char const)12,  (unsigned char const)0,
 2702|       |    (unsigned char const)0,   (unsigned char const)0,
 2703|       |    (unsigned char const)0,   (unsigned char const)0,
 2704|       |    (unsigned char const)0,   (unsigned char const)0,
 2705|       |    (unsigned char const)0,   (unsigned char const)0,
 2706|       |    (unsigned char const)0,   (unsigned char const)0,
 2707|       |    (unsigned char const)30,  (unsigned char const)32,
 2708|       |    (unsigned char const)0,   (unsigned char const)0,
 2709|       |    (unsigned char const)12,  (unsigned char const)0,
 2710|       |    (unsigned char const)0,   (unsigned char const)0,
 2711|       |    (unsigned char const)0,   (unsigned char const)0,
 2712|       |    (unsigned char const)0,   (unsigned char const)0,
 2713|       |    (unsigned char const)0,   (unsigned char const)0,
 2714|       |    (unsigned char const)0,   (unsigned char const)0,
 2715|       |    (unsigned char const)0,   (unsigned char const)4,
 2716|       |    (unsigned char const)92,  (unsigned char const)0,
 2717|       |    (unsigned char const)0,   (unsigned char const)0,
 2718|       |    (unsigned char const)0,   (unsigned char const)0,
 2719|       |    (unsigned char const)0,   (unsigned char const)0,
 2720|       |    (unsigned char const)0,   (unsigned char const)0,
 2721|       |    (unsigned char const)0,   (unsigned char const)0,
 2722|       |    (unsigned char const)242, (unsigned char const)7,
 2723|       |    (unsigned char const)128, (unsigned char const)127,
 2724|       |    (unsigned char const)0,   (unsigned char const)0,
 2725|       |    (unsigned char const)0,   (unsigned char const)0,
 2726|       |    (unsigned char const)0,   (unsigned char const)0,
 2727|       |    (unsigned char const)0,   (unsigned char const)0,
 2728|       |    (unsigned char const)0,   (unsigned char const)0,
 2729|       |    (unsigned char const)0,   (unsigned char const)0,
 2730|       |    (unsigned char const)242, (unsigned char const)27,
 2731|       |    (unsigned char const)0,   (unsigned char const)63,
 2732|       |    (unsigned char const)0,   (unsigned char const)0,
 2733|       |    (unsigned char const)0,   (unsigned char const)0,
 2734|       |    (unsigned char const)0,   (unsigned char const)0,
 2735|       |    (unsigned char const)0,   (unsigned char const)0,
 2736|       |    (unsigned char const)0,   (unsigned char const)3,
 2737|       |    (unsigned char const)0,   (unsigned char const)0,
 2738|       |    (unsigned char const)160, (unsigned char const)2,
 2739|       |    (unsigned char const)0,   (unsigned char const)0,
 2740|       |    (unsigned char const)0,   (unsigned char const)0,
 2741|       |    (unsigned char const)0,   (unsigned char const)0,
 2742|       |    (unsigned char const)254, (unsigned char const)127,
 2743|       |    (unsigned char const)223, (unsigned char const)224,
 2744|       |    (unsigned char const)255, (unsigned char const)254,
 2745|       |    (unsigned char const)255, (unsigned char const)255,
 2746|       |    (unsigned char const)255, (unsigned char const)31,
 2747|       |    (unsigned char const)64,  (unsigned char const)0,
 2748|       |    (unsigned char const)0,   (unsigned char const)0,
 2749|       |    (unsigned char const)0,   (unsigned char const)0,
 2750|       |    (unsigned char const)0,   (unsigned char const)0,
 2751|       |    (unsigned char const)0,   (unsigned char const)0,
 2752|       |    (unsigned char const)0,   (unsigned char const)0,
 2753|       |    (unsigned char const)0,   (unsigned char const)224,
 2754|       |    (unsigned char const)253, (unsigned char const)102,
 2755|       |    (unsigned char const)0,   (unsigned char const)0,
 2756|       |    (unsigned char const)0,   (unsigned char const)195,
 2757|       |    (unsigned char const)1,   (unsigned char const)0,
 2758|       |    (unsigned char const)30,  (unsigned char const)0,
 2759|       |    (unsigned char const)100, (unsigned char const)32,
 2760|       |    (unsigned char const)0,   (unsigned char const)32,
 2761|       |    (unsigned char const)0,   (unsigned char const)0,
 2762|       |    (unsigned char const)0,   (unsigned char const)0,
 2763|       |    (unsigned char const)0,   (unsigned char const)0,
 2764|       |    (unsigned char const)0,   (unsigned char const)0,
 2765|       |    (unsigned char const)0,   (unsigned char const)0,
 2766|       |    (unsigned char const)0,   (unsigned char const)0,
 2767|       |    (unsigned char const)0,   (unsigned char const)0,
 2768|       |    (unsigned char const)0,   (unsigned char const)0,
 2769|       |    (unsigned char const)0,   (unsigned char const)0,
 2770|       |    (unsigned char const)0,   (unsigned char const)0,
 2771|       |    (unsigned char const)0,   (unsigned char const)0,
 2772|       |    (unsigned char const)0,   (unsigned char const)0,
 2773|       |    (unsigned char const)0,   (unsigned char const)0,
 2774|       |    (unsigned char const)0,   (unsigned char const)0,
 2775|       |    (unsigned char const)0,   (unsigned char const)0,
 2776|       |    (unsigned char const)0,   (unsigned char const)0,
 2777|       |    (unsigned char const)0,   (unsigned char const)0,
 2778|       |    (unsigned char const)0,   (unsigned char const)0,
 2779|       |    (unsigned char const)0,   (unsigned char const)0,
 2780|       |    (unsigned char const)0,   (unsigned char const)0,
 2781|       |    (unsigned char const)0,   (unsigned char const)0,
 2782|       |    (unsigned char const)0,   (unsigned char const)0,
 2783|       |    (unsigned char const)0,   (unsigned char const)0,
 2784|       |    (unsigned char const)0,   (unsigned char const)0,
 2785|       |    (unsigned char const)0,   (unsigned char const)0,
 2786|       |    (unsigned char const)0,   (unsigned char const)0,
 2787|       |    (unsigned char const)0,   (unsigned char const)0,
 2788|       |    (unsigned char const)0,   (unsigned char const)0,
 2789|       |    (unsigned char const)0,   (unsigned char const)0,
 2790|       |    (unsigned char const)0,   (unsigned char const)0,
 2791|       |    (unsigned char const)0,   (unsigned char const)0,
 2792|       |    (unsigned char const)0,   (unsigned char const)0,
 2793|       |    (unsigned char const)0,   (unsigned char const)0,
 2794|       |    (unsigned char const)0,   (unsigned char const)0,
 2795|       |    (unsigned char const)0,   (unsigned char const)0,
 2796|       |    (unsigned char const)0,   (unsigned char const)0,
 2797|       |    (unsigned char const)0,   (unsigned char const)0,
 2798|       |    (unsigned char const)0,   (unsigned char const)0,
 2799|       |    (unsigned char const)0,   (unsigned char const)0,
 2800|       |    (unsigned char const)0,   (unsigned char const)0,
 2801|       |    (unsigned char const)0,   (unsigned char const)0,
 2802|       |    (unsigned char const)0,   (unsigned char const)0,
 2803|       |    (unsigned char const)0,   (unsigned char const)0,
 2804|       |    (unsigned char const)0,   (unsigned char const)224,
 2805|       |    (unsigned char const)0,   (unsigned char const)0,
 2806|       |    (unsigned char const)0,   (unsigned char const)0,
 2807|       |    (unsigned char const)0,   (unsigned char const)0,
 2808|       |    (unsigned char const)0,   (unsigned char const)0,
 2809|       |    (unsigned char const)0,   (unsigned char const)0,
 2810|       |    (unsigned char const)0,   (unsigned char const)0,
 2811|       |    (unsigned char const)0,   (unsigned char const)0,
 2812|       |    (unsigned char const)0,   (unsigned char const)0,
 2813|       |    (unsigned char const)0,   (unsigned char const)0,
 2814|       |    (unsigned char const)0,   (unsigned char const)0,
 2815|       |    (unsigned char const)0,   (unsigned char const)0,
 2816|       |    (unsigned char const)0,   (unsigned char const)0,
 2817|       |    (unsigned char const)0,   (unsigned char const)0,
 2818|       |    (unsigned char const)0,   (unsigned char const)0,
 2819|       |    (unsigned char const)0,   (unsigned char const)0,
 2820|       |    (unsigned char const)0,   (unsigned char const)0,
 2821|       |    (unsigned char const)0,   (unsigned char const)0,
 2822|       |    (unsigned char const)0,   (unsigned char const)0,
 2823|       |    (unsigned char const)0,   (unsigned char const)0,
 2824|       |    (unsigned char const)0,   (unsigned char const)0,
 2825|       |    (unsigned char const)0,   (unsigned char const)0,
 2826|       |    (unsigned char const)0,   (unsigned char const)0,
 2827|       |    (unsigned char const)0,   (unsigned char const)0,
 2828|       |    (unsigned char const)0,   (unsigned char const)0,
 2829|       |    (unsigned char const)0,   (unsigned char const)0,
 2830|       |    (unsigned char const)0,   (unsigned char const)0,
 2831|       |    (unsigned char const)0,   (unsigned char const)0,
 2832|       |    (unsigned char const)28,  (unsigned char const)0,
 2833|       |    (unsigned char const)0,   (unsigned char const)0,
 2834|       |    (unsigned char const)28,  (unsigned char const)0,
 2835|       |    (unsigned char const)0,   (unsigned char const)0,
 2836|       |    (unsigned char const)12,  (unsigned char const)0,
 2837|       |    (unsigned char const)0,   (unsigned char const)0,
 2838|       |    (unsigned char const)12,  (unsigned char const)0,
 2839|       |    (unsigned char const)0,   (unsigned char const)0,
 2840|       |    (unsigned char const)0,   (unsigned char const)0,
 2841|       |    (unsigned char const)0,   (unsigned char const)0,
 2842|       |    (unsigned char const)176, (unsigned char const)63,
 2843|       |    (unsigned char const)64,  (unsigned char const)254,
 2844|       |    (unsigned char const)15,  (unsigned char const)32,
 2845|       |    (unsigned char const)0,   (unsigned char const)0,
 2846|       |    (unsigned char const)0,   (unsigned char const)0,
 2847|       |    (unsigned char const)0,   (unsigned char const)56,
 2848|       |    (unsigned char const)0,   (unsigned char const)0,
 2849|       |    (unsigned char const)0,   (unsigned char const)0,
 2850|       |    (unsigned char const)0,   (unsigned char const)0,
 2851|       |    (unsigned char const)0,   (unsigned char const)0,
 2852|       |    (unsigned char const)0,   (unsigned char const)0,
 2853|       |    (unsigned char const)0,   (unsigned char const)0,
 2854|       |    (unsigned char const)0,   (unsigned char const)0,
 2855|       |    (unsigned char const)0,   (unsigned char const)0,
 2856|       |    (unsigned char const)0,   (unsigned char const)0,
 2857|       |    (unsigned char const)0,   (unsigned char const)2,
 2858|       |    (unsigned char const)0,   (unsigned char const)0,
 2859|       |    (unsigned char const)0,   (unsigned char const)0,
 2860|       |    (unsigned char const)0,   (unsigned char const)0,
 2861|       |    (unsigned char const)0,   (unsigned char const)0,
 2862|       |    (unsigned char const)0,   (unsigned char const)0,
 2863|       |    (unsigned char const)0,   (unsigned char const)0,
 2864|       |    (unsigned char const)0,   (unsigned char const)0,
 2865|       |    (unsigned char const)135, (unsigned char const)1,
 2866|       |    (unsigned char const)4,   (unsigned char const)14,
 2867|       |    (unsigned char const)0,   (unsigned char const)0,
 2868|       |    (unsigned char const)0,   (unsigned char const)0,
 2869|       |    (unsigned char const)0,   (unsigned char const)0,
 2870|       |    (unsigned char const)0,   (unsigned char const)0,
 2871|       |    (unsigned char const)0,   (unsigned char const)0,
 2872|       |    (unsigned char const)0,   (unsigned char const)0,
 2873|       |    (unsigned char const)0,   (unsigned char const)0,
 2874|       |    (unsigned char const)0,   (unsigned char const)0,
 2875|       |    (unsigned char const)0,   (unsigned char const)0,
 2876|       |    (unsigned char const)0,   (unsigned char const)0,
 2877|       |    (unsigned char const)0,   (unsigned char const)0,
 2878|       |    (unsigned char const)0,   (unsigned char const)0,
 2879|       |    (unsigned char const)0,   (unsigned char const)0,
 2880|       |    (unsigned char const)128, (unsigned char const)1,
 2881|       |    (unsigned char const)0,   (unsigned char const)0,
 2882|       |    (unsigned char const)0,   (unsigned char const)0,
 2883|       |    (unsigned char const)0,   (unsigned char const)0,
 2884|       |    (unsigned char const)64,  (unsigned char const)127,
 2885|       |    (unsigned char const)229, (unsigned char const)31,
 2886|       |    (unsigned char const)248, (unsigned char const)159,
 2887|       |    (unsigned char const)0,   (unsigned char const)0,
 2888|       |    (unsigned char const)0,   (unsigned char const)0,
 2889|       |    (unsigned char const)0,   (unsigned char const)0,
 2890|       |    (unsigned char const)0,   (unsigned char const)0,
 2891|       |    (unsigned char const)0,   (unsigned char const)0,
 2892|       |    (unsigned char const)0,   (unsigned char const)0,
 2893|       |    (unsigned char const)0,   (unsigned char const)0,
 2894|       |    (unsigned char const)0,   (unsigned char const)0,
 2895|       |    (unsigned char const)15,  (unsigned char const)0,
 2896|       |    (unsigned char const)0,   (unsigned char const)0,
 2897|       |    (unsigned char const)0,   (unsigned char const)0,
 2898|       |    (unsigned char const)208, (unsigned char const)23,
 2899|       |    (unsigned char const)4,   (unsigned char const)0,
 2900|       |    (unsigned char const)0,   (unsigned char const)0,
 2901|       |    (unsigned char const)0,   (unsigned char const)248,
 2902|       |    (unsigned char const)15,  (unsigned char const)0,
 2903|       |    (unsigned char const)3,   (unsigned char const)0,
 2904|       |    (unsigned char const)0,   (unsigned char const)0,
 2905|       |    (unsigned char const)60,  (unsigned char const)3,
 2906|       |    (unsigned char const)0,   (unsigned char const)0,
 2907|       |    (unsigned char const)0,   (unsigned char const)0,
 2908|       |    (unsigned char const)0,   (unsigned char const)0,
 2909|       |    (unsigned char const)64,  (unsigned char const)163,
 2910|       |    (unsigned char const)3,   (unsigned char const)0,
 2911|       |    (unsigned char const)0,   (unsigned char const)0,
 2912|       |    (unsigned char const)0,   (unsigned char const)0,
 2913|       |    (unsigned char const)0,   (unsigned char const)240,
 2914|       |    (unsigned char const)207, (unsigned char const)0,
 2915|       |    (unsigned char const)0,   (unsigned char const)0,
 2916|       |    (unsigned char const)0,   (unsigned char const)0,
 2917|       |    (unsigned char const)0,   (unsigned char const)0,
 2918|       |    (unsigned char const)0,   (unsigned char const)0,
 2919|       |    (unsigned char const)0,   (unsigned char const)0,
 2920|       |    (unsigned char const)0,   (unsigned char const)0,
 2921|       |    (unsigned char const)0,   (unsigned char const)0,
 2922|       |    (unsigned char const)0,   (unsigned char const)0,
 2923|       |    (unsigned char const)0,   (unsigned char const)0,
 2924|       |    (unsigned char const)247, (unsigned char const)255,
 2925|       |    (unsigned char const)253, (unsigned char const)33,
 2926|       |    (unsigned char const)0,   (unsigned char const)0,
 2927|       |    (unsigned char const)0,   (unsigned char const)0,
 2928|       |    (unsigned char const)0,   (unsigned char const)0,
 2929|       |    (unsigned char const)0,   (unsigned char const)0,
 2930|       |    (unsigned char const)0,   (unsigned char const)0,
 2931|       |    (unsigned char const)0,   (unsigned char const)0,
 2932|       |    (unsigned char const)0,   (unsigned char const)0,
 2933|       |    (unsigned char const)0,   (unsigned char const)0,
 2934|       |    (unsigned char const)0,   (unsigned char const)0,
 2935|       |    (unsigned char const)0,   (unsigned char const)0,
 2936|       |    (unsigned char const)0,   (unsigned char const)0,
 2937|       |    (unsigned char const)0,   (unsigned char const)0,
 2938|       |    (unsigned char const)0,   (unsigned char const)0,
 2939|       |    (unsigned char const)255, (unsigned char const)255,
 2940|       |    (unsigned char const)255, (unsigned char const)255,
 2941|       |    (unsigned char const)127, (unsigned char const)0,
 2942|       |    (unsigned char const)0,   (unsigned char const)240,
 2943|       |    (unsigned char const)0,   (unsigned char const)248,
 2944|       |    (unsigned char const)0,   (unsigned char const)0,
 2945|       |    (unsigned char const)0,   (unsigned char const)124,
 2946|       |    (unsigned char const)0,   (unsigned char const)0,
 2947|       |    (unsigned char const)0,   (unsigned char const)0,
 2948|       |    (unsigned char const)0,   (unsigned char const)0,
 2949|       |    (unsigned char const)31,  (unsigned char const)252,
 2950|       |    (unsigned char const)0,   (unsigned char const)0,
 2951|       |    (unsigned char const)0,   (unsigned char const)0,
 2952|       |    (unsigned char const)0,   (unsigned char const)0,
 2953|       |    (unsigned char const)0,   (unsigned char const)0,
 2954|       |    (unsigned char const)0,   (unsigned char const)0,
 2955|       |    (unsigned char const)0,   (unsigned char const)0,
 2956|       |    (unsigned char const)255, (unsigned char const)255,
 2957|       |    (unsigned char const)255, (unsigned char const)255,
 2958|       |    (unsigned char const)1,   (unsigned char const)0,
 2959|       |    (unsigned char const)0,   (unsigned char const)0,
 2960|       |    (unsigned char const)0,   (unsigned char const)0,
 2961|       |    (unsigned char const)0,   (unsigned char const)0,
 2962|       |    (unsigned char const)0,   (unsigned char const)0,
 2963|       |    (unsigned char const)0,   (unsigned char const)0,
 2964|       |    (unsigned char const)0,   (unsigned char const)0,
 2965|       |    (unsigned char const)0,   (unsigned char const)0,
 2966|       |    (unsigned char const)0,   (unsigned char const)0,
 2967|       |    (unsigned char const)0,   (unsigned char const)0,
 2968|       |    (unsigned char const)0,   (unsigned char const)0,
 2969|       |    (unsigned char const)0,   (unsigned char const)0,
 2970|       |    (unsigned char const)0,   (unsigned char const)0,
 2971|       |    (unsigned char const)0,   (unsigned char const)0,
 2972|       |    (unsigned char const)0,   (unsigned char const)0,
 2973|       |    (unsigned char const)0,   (unsigned char const)0,
 2974|       |    (unsigned char const)0,   (unsigned char const)0,
 2975|       |    (unsigned char const)0,   (unsigned char const)0,
 2976|       |    (unsigned char const)0,   (unsigned char const)0,
 2977|       |    (unsigned char const)0,   (unsigned char const)0,
 2978|       |    (unsigned char const)0,   (unsigned char const)0,
 2979|       |    (unsigned char const)0,   (unsigned char const)0,
 2980|       |    (unsigned char const)0,   (unsigned char const)0,
 2981|       |    (unsigned char const)0,   (unsigned char const)0,
 2982|       |    (unsigned char const)0,   (unsigned char const)0,
 2983|       |    (unsigned char const)0,   (unsigned char const)0,
 2984|       |    (unsigned char const)0,   (unsigned char const)0,
 2985|       |    (unsigned char const)0,   (unsigned char const)0,
 2986|       |    (unsigned char const)0,   (unsigned char const)0,
 2987|       |    (unsigned char const)0,   (unsigned char const)0,
 2988|       |    (unsigned char const)0,   (unsigned char const)0,
 2989|       |    (unsigned char const)0,   (unsigned char const)128,
 2990|       |    (unsigned char const)3,   (unsigned char const)0,
 2991|       |    (unsigned char const)0,   (unsigned char const)0,
 2992|       |    (unsigned char const)0,   (unsigned char const)0,
 2993|       |    (unsigned char const)0,   (unsigned char const)0,
 2994|       |    (unsigned char const)0,   (unsigned char const)0,
 2995|       |    (unsigned char const)0,   (unsigned char const)0,
 2996|       |    (unsigned char const)0,   (unsigned char const)0,
 2997|       |    (unsigned char const)0,   (unsigned char const)0,
 2998|       |    (unsigned char const)0,   (unsigned char const)128,
 2999|       |    (unsigned char const)0,   (unsigned char const)0,
 3000|       |    (unsigned char const)0,   (unsigned char const)0,
 3001|       |    (unsigned char const)0,   (unsigned char const)0,
 3002|       |    (unsigned char const)0,   (unsigned char const)0,
 3003|       |    (unsigned char const)0,   (unsigned char const)0,
 3004|       |    (unsigned char const)0,   (unsigned char const)0,
 3005|       |    (unsigned char const)255, (unsigned char const)255,
 3006|       |    (unsigned char const)255, (unsigned char const)255,
 3007|       |    (unsigned char const)0,   (unsigned char const)0,
 3008|       |    (unsigned char const)0,   (unsigned char const)0,
 3009|       |    (unsigned char const)0,   (unsigned char const)252,
 3010|       |    (unsigned char const)0,   (unsigned char const)0,
 3011|       |    (unsigned char const)0,   (unsigned char const)0,
 3012|       |    (unsigned char const)0,   (unsigned char const)0,
 3013|       |    (unsigned char const)0,   (unsigned char const)0,
 3014|       |    (unsigned char const)0,   (unsigned char const)0,
 3015|       |    (unsigned char const)0,   (unsigned char const)0,
 3016|       |    (unsigned char const)0,   (unsigned char const)6,
 3017|       |    (unsigned char const)0,   (unsigned char const)0,
 3018|       |    (unsigned char const)0,   (unsigned char const)0,
 3019|       |    (unsigned char const)0,   (unsigned char const)0,
 3020|       |    (unsigned char const)0,   (unsigned char const)0,
 3021|       |    (unsigned char const)0,   (unsigned char const)0,
 3022|       |    (unsigned char const)0,   (unsigned char const)0,
 3023|       |    (unsigned char const)0,   (unsigned char const)0,
 3024|       |    (unsigned char const)0,   (unsigned char const)0,
 3025|       |    (unsigned char const)0,   (unsigned char const)0,
 3026|       |    (unsigned char const)0,   (unsigned char const)0,
 3027|       |    (unsigned char const)0,   (unsigned char const)0,
 3028|       |    (unsigned char const)0,   (unsigned char const)0,
 3029|       |    (unsigned char const)0,   (unsigned char const)0,
 3030|       |    (unsigned char const)0,   (unsigned char const)0,
 3031|       |    (unsigned char const)0,   (unsigned char const)0,
 3032|       |    (unsigned char const)0,   (unsigned char const)0,
 3033|       |    (unsigned char const)0,   (unsigned char const)0,
 3034|       |    (unsigned char const)0,   (unsigned char const)0,
 3035|       |    (unsigned char const)0,   (unsigned char const)0,
 3036|       |    (unsigned char const)0,   (unsigned char const)0,
 3037|       |    (unsigned char const)0,   (unsigned char const)0,
 3038|       |    (unsigned char const)0,   (unsigned char const)0,
 3039|       |    (unsigned char const)0,   (unsigned char const)0,
 3040|       |    (unsigned char const)0,   (unsigned char const)0,
 3041|       |    (unsigned char const)0,   (unsigned char const)0,
 3042|       |    (unsigned char const)0,   (unsigned char const)0,
 3043|       |    (unsigned char const)0,   (unsigned char const)0,
 3044|       |    (unsigned char const)0,   (unsigned char const)0,
 3045|       |    (unsigned char const)0,   (unsigned char const)128,
 3046|       |    (unsigned char const)7,   (unsigned char const)48,
 3047|       |    (unsigned char const)0,   (unsigned char const)0,
 3048|       |    (unsigned char const)0,   (unsigned char const)0,
 3049|       |    (unsigned char const)0,   (unsigned char const)0,
 3050|       |    (unsigned char const)0,   (unsigned char const)0,
 3051|       |    (unsigned char const)0,   (unsigned char const)0,
 3052|       |    (unsigned char const)0,   (unsigned char const)0,
 3053|       |    (unsigned char const)0,   (unsigned char const)0,
 3054|       |    (unsigned char const)3,   (unsigned char const)0,
 3055|       |    (unsigned char const)0,   (unsigned char const)0,
 3056|       |    (unsigned char const)0,   (unsigned char const)0,
 3057|       |    (unsigned char const)0,   (unsigned char const)0,
 3058|       |    (unsigned char const)0,   (unsigned char const)0,
 3059|       |    (unsigned char const)0,   (unsigned char const)0,
 3060|       |    (unsigned char const)0,   (unsigned char const)0,
 3061|       |    (unsigned char const)0,   (unsigned char const)0,
 3062|       |    (unsigned char const)0,   (unsigned char const)0,
 3063|       |    (unsigned char const)0,   (unsigned char const)0,
 3064|       |    (unsigned char const)0,   (unsigned char const)0,
 3065|       |    (unsigned char const)0,   (unsigned char const)0,
 3066|       |    (unsigned char const)0,   (unsigned char const)0,
 3067|       |    (unsigned char const)0,   (unsigned char const)0,
 3068|       |    (unsigned char const)0,   (unsigned char const)0,
 3069|       |    (unsigned char const)0,   (unsigned char const)0,
 3070|       |    (unsigned char const)0,   (unsigned char const)0,
 3071|       |    (unsigned char const)68,  (unsigned char const)8,
 3072|       |    (unsigned char const)0,   (unsigned char const)0,
 3073|       |    (unsigned char const)96,  (unsigned char const)0,
 3074|       |    (unsigned char const)0,   (unsigned char const)0,
 3075|       |    (unsigned char const)0,   (unsigned char const)0,
 3076|       |    (unsigned char const)0,   (unsigned char const)0,
 3077|       |    (unsigned char const)0,   (unsigned char const)0,
 3078|       |    (unsigned char const)0,   (unsigned char const)0,
 3079|       |    (unsigned char const)0,   (unsigned char const)0,
 3080|       |    (unsigned char const)0,   (unsigned char const)0,
 3081|       |    (unsigned char const)0,   (unsigned char const)0,
 3082|       |    (unsigned char const)0,   (unsigned char const)0,
 3083|       |    (unsigned char const)16,  (unsigned char const)0,
 3084|       |    (unsigned char const)0,   (unsigned char const)0,
 3085|       |    (unsigned char const)255, (unsigned char const)255,
 3086|       |    (unsigned char const)3,   (unsigned char const)0,
 3087|       |    (unsigned char const)0,   (unsigned char const)0,
 3088|       |    (unsigned char const)0,   (unsigned char const)0,
 3089|       |    (unsigned char const)192, (unsigned char const)63,
 3090|       |    (unsigned char const)0,   (unsigned char const)0,
 3091|       |    (unsigned char const)128, (unsigned char const)255,
 3092|       |    (unsigned char const)3,   (unsigned char const)0,
 3093|       |    (unsigned char const)0,   (unsigned char const)0,
 3094|       |    (unsigned char const)0,   (unsigned char const)0,
 3095|       |    (unsigned char const)7,   (unsigned char const)0,
 3096|       |    (unsigned char const)0,   (unsigned char const)0,
 3097|       |    (unsigned char const)0,   (unsigned char const)0,
 3098|       |    (unsigned char const)200, (unsigned char const)19,
 3099|       |    (unsigned char const)0,   (unsigned char const)0,
 3100|       |    (unsigned char const)0,   (unsigned char const)0,
 3101|       |    (unsigned char const)0,   (unsigned char const)0,
 3102|       |    (unsigned char const)0,   (unsigned char const)0,
 3103|       |    (unsigned char const)0,   (unsigned char const)0,
 3104|       |    (unsigned char const)0,   (unsigned char const)0,
 3105|       |    (unsigned char const)0,   (unsigned char const)126,
 3106|       |    (unsigned char const)102, (unsigned char const)0,
 3107|       |    (unsigned char const)8,   (unsigned char const)16,
 3108|       |    (unsigned char const)0,   (unsigned char const)0,
 3109|       |    (unsigned char const)0,   (unsigned char const)0,
 3110|       |    (unsigned char const)0,   (unsigned char const)0,
 3111|       |    (unsigned char const)0,   (unsigned char const)0,
 3112|       |    (unsigned char const)0,   (unsigned char const)0,
 3113|       |    (unsigned char const)0,   (unsigned char const)0,
 3114|       |    (unsigned char const)157, (unsigned char const)193,
 3115|       |    (unsigned char const)2,   (unsigned char const)0,
 3116|       |    (unsigned char const)0,   (unsigned char const)0,
 3117|       |    (unsigned char const)0,   (unsigned char const)0,
 3118|       |    (unsigned char const)0,   (unsigned char const)0,
 3119|       |    (unsigned char const)0,   (unsigned char const)0,
 3120|       |    (unsigned char const)0,   (unsigned char const)0,
 3121|       |    (unsigned char const)0,   (unsigned char const)0,
 3122|       |    (unsigned char const)0,   (unsigned char const)0,
 3123|       |    (unsigned char const)0,   (unsigned char const)0,
 3124|       |    (unsigned char const)0,   (unsigned char const)0,
 3125|       |    (unsigned char const)0,   (unsigned char const)0,
 3126|       |    (unsigned char const)0,   (unsigned char const)0,
 3127|       |    (unsigned char const)0,   (unsigned char const)0,
 3128|       |    (unsigned char const)0,   (unsigned char const)0,
 3129|       |    (unsigned char const)0,   (unsigned char const)0,
 3130|       |    (unsigned char const)0,   (unsigned char const)0,
 3131|       |    (unsigned char const)0,   (unsigned char const)0,
 3132|       |    (unsigned char const)0,   (unsigned char const)0,
 3133|       |    (unsigned char const)32,  (unsigned char const)33,
 3134|       |    (unsigned char const)0,   (unsigned char const)0,
 3135|       |    (unsigned char const)0,   (unsigned char const)0,
 3136|       |    (unsigned char const)0,   (unsigned char const)0,
 3137|       |    (unsigned char const)0,   (unsigned char const)0,
 3138|       |    (unsigned char const)0,   (unsigned char const)0,
 3139|       |    (unsigned char const)0,   (unsigned char const)0,
 3140|       |    (unsigned char const)0,   (unsigned char const)0,
 3141|       |    (unsigned char const)0,   (unsigned char const)0,
 3142|       |    (unsigned char const)0,   (unsigned char const)0,
 3143|       |    (unsigned char const)0,   (unsigned char const)0,
 3144|       |    (unsigned char const)0,   (unsigned char const)0,
 3145|       |    (unsigned char const)0,   (unsigned char const)0,
 3146|       |    (unsigned char const)0,   (unsigned char const)0,
 3147|       |    (unsigned char const)0,   (unsigned char const)0,
 3148|       |    (unsigned char const)0,   (unsigned char const)0,
 3149|       |    (unsigned char const)0,   (unsigned char const)0,
 3150|       |    (unsigned char const)0,   (unsigned char const)0,
 3151|       |    (unsigned char const)0,   (unsigned char const)0,
 3152|       |    (unsigned char const)0,   (unsigned char const)64,
 3153|       |    (unsigned char const)0,   (unsigned char const)0,
 3154|       |    (unsigned char const)0,   (unsigned char const)0,
 3155|       |    (unsigned char const)0,   (unsigned char const)0,
 3156|       |    (unsigned char const)0,   (unsigned char const)0,
 3157|       |    (unsigned char const)0,   (unsigned char const)0,
 3158|       |    (unsigned char const)0,   (unsigned char const)0,
 3159|       |    (unsigned char const)0,   (unsigned char const)0,
 3160|       |    (unsigned char const)0,   (unsigned char const)0,
 3161|       |    (unsigned char const)0,   (unsigned char const)0,
 3162|       |    (unsigned char const)0,   (unsigned char const)0,
 3163|       |    (unsigned char const)0,   (unsigned char const)0,
 3164|       |    (unsigned char const)0,   (unsigned char const)0,
 3165|       |    (unsigned char const)0,   (unsigned char const)0,
 3166|       |    (unsigned char const)0,   (unsigned char const)0,
 3167|       |    (unsigned char const)255, (unsigned char const)255,
 3168|       |    (unsigned char const)0,   (unsigned char const)0,
 3169|       |    (unsigned char const)127, (unsigned char const)0,
 3170|       |    (unsigned char const)0,   (unsigned char const)0,
 3171|       |    (unsigned char const)0,   (unsigned char const)0,
 3172|       |    (unsigned char const)0,   (unsigned char const)0,
 3173|       |    (unsigned char const)0,   (unsigned char const)0,
 3174|       |    (unsigned char const)0,   (unsigned char const)0,
 3175|       |    (unsigned char const)0,   (unsigned char const)0,
 3176|       |    (unsigned char const)0,   (unsigned char const)0,
 3177|       |    (unsigned char const)0,   (unsigned char const)0,
 3178|       |    (unsigned char const)0,   (unsigned char const)0,
 3179|       |    (unsigned char const)0,   (unsigned char const)0,
 3180|       |    (unsigned char const)0,   (unsigned char const)0,
 3181|       |    (unsigned char const)0,   (unsigned char const)0,
 3182|       |    (unsigned char const)0,   (unsigned char const)128,
 3183|       |    (unsigned char const)0,   (unsigned char const)0,
 3184|       |    (unsigned char const)0,   (unsigned char const)0,
 3185|       |    (unsigned char const)0,   (unsigned char const)0,
 3186|       |    (unsigned char const)0,   (unsigned char const)0,
 3187|       |    (unsigned char const)0,   (unsigned char const)0,
 3188|       |    (unsigned char const)0,   (unsigned char const)0,
 3189|       |    (unsigned char const)0,   (unsigned char const)0,
 3190|       |    (unsigned char const)0,   (unsigned char const)0,
 3191|       |    (unsigned char const)0,   (unsigned char const)0,
 3192|       |    (unsigned char const)0,   (unsigned char const)0,
 3193|       |    (unsigned char const)0,   (unsigned char const)0,
 3194|       |    (unsigned char const)0,   (unsigned char const)0,
 3195|       |    (unsigned char const)0,   (unsigned char const)0,
 3196|       |    (unsigned char const)0,   (unsigned char const)0,
 3197|       |    (unsigned char const)0,   (unsigned char const)0,
 3198|       |    (unsigned char const)0,   (unsigned char const)14,
 3199|       |    (unsigned char const)0,   (unsigned char const)0,
 3200|       |    (unsigned char const)0,   (unsigned char const)0,
 3201|       |    (unsigned char const)0,   (unsigned char const)0,
 3202|       |    (unsigned char const)0,   (unsigned char const)0,
 3203|       |    (unsigned char const)0,   (unsigned char const)0,
 3204|       |    (unsigned char const)0,   (unsigned char const)0,
 3205|       |    (unsigned char const)0,   (unsigned char const)0,
 3206|       |    (unsigned char const)0,   (unsigned char const)0,
 3207|       |    (unsigned char const)0,   (unsigned char const)0,
 3208|       |    (unsigned char const)0,   (unsigned char const)0,
 3209|       |    (unsigned char const)0,   (unsigned char const)0,
 3210|       |    (unsigned char const)0,   (unsigned char const)0,
 3211|       |    (unsigned char const)0,   (unsigned char const)0,
 3212|       |    (unsigned char const)0,   (unsigned char const)0,
 3213|       |    (unsigned char const)0,   (unsigned char const)0,
 3214|       |    (unsigned char const)0,   (unsigned char const)0,
 3215|       |    (unsigned char const)0,   (unsigned char const)0,
 3216|       |    (unsigned char const)0,   (unsigned char const)0,
 3217|       |    (unsigned char const)0,   (unsigned char const)0,
 3218|       |    (unsigned char const)0,   (unsigned char const)0,
 3219|       |    (unsigned char const)0,   (unsigned char const)0,
 3220|       |    (unsigned char const)0,   (unsigned char const)0,
 3221|       |    (unsigned char const)0,   (unsigned char const)0,
 3222|       |    (unsigned char const)0,   (unsigned char const)0,
 3223|       |    (unsigned char const)0,   (unsigned char const)0,
 3224|       |    (unsigned char const)0,   (unsigned char const)0,
 3225|       |    (unsigned char const)0,   (unsigned char const)0,
 3226|       |    (unsigned char const)0,   (unsigned char const)0,
 3227|       |    (unsigned char const)0,   (unsigned char const)0,
 3228|       |    (unsigned char const)0,   (unsigned char const)0,
 3229|       |    (unsigned char const)0,   (unsigned char const)0,
 3230|       |    (unsigned char const)0,   (unsigned char const)32,
 3231|       |    (unsigned char const)110, (unsigned char const)240,
 3232|       |    (unsigned char const)0,   (unsigned char const)0,
 3233|       |    (unsigned char const)0,   (unsigned char const)0,
 3234|       |    (unsigned char const)0,   (unsigned char const)135,
 3235|       |    (unsigned char const)0,   (unsigned char const)0,
 3236|       |    (unsigned char const)0,   (unsigned char const)0,
 3237|       |    (unsigned char const)0,   (unsigned char const)0,
 3238|       |    (unsigned char const)0,   (unsigned char const)0,
 3239|       |    (unsigned char const)0,   (unsigned char const)0,
 3240|       |    (unsigned char const)0,   (unsigned char const)0,
 3241|       |    (unsigned char const)0,   (unsigned char const)0,
 3242|       |    (unsigned char const)0,   (unsigned char const)0,
 3243|       |    (unsigned char const)0,   (unsigned char const)0,
 3244|       |    (unsigned char const)0,   (unsigned char const)0,
 3245|       |    (unsigned char const)0,   (unsigned char const)0,
 3246|       |    (unsigned char const)0,   (unsigned char const)0,
 3247|       |    (unsigned char const)0,   (unsigned char const)0,
 3248|       |    (unsigned char const)0,   (unsigned char const)0,
 3249|       |    (unsigned char const)0,   (unsigned char const)0,
 3250|       |    (unsigned char const)0,   (unsigned char const)0,
 3251|       |    (unsigned char const)0,   (unsigned char const)0,
 3252|       |    (unsigned char const)0,   (unsigned char const)0,
 3253|       |    (unsigned char const)0,   (unsigned char const)0,
 3254|       |    (unsigned char const)0,   (unsigned char const)0,
 3255|       |    (unsigned char const)0,   (unsigned char const)0,
 3256|       |    (unsigned char const)0,   (unsigned char const)0,
 3257|       |    (unsigned char const)0,   (unsigned char const)0,
 3258|       |    (unsigned char const)0,   (unsigned char const)0,
 3259|       |    (unsigned char const)0,   (unsigned char const)0,
 3260|       |    (unsigned char const)0,   (unsigned char const)0,
 3261|       |    (unsigned char const)0,   (unsigned char const)0,
 3262|       |    (unsigned char const)0,   (unsigned char const)0,
 3263|       |    (unsigned char const)2,   (unsigned char const)0,
 3264|       |    (unsigned char const)0,   (unsigned char const)0,
 3265|       |    (unsigned char const)0,   (unsigned char const)0,
 3266|       |    (unsigned char const)0,   (unsigned char const)255,
 3267|       |    (unsigned char const)127, (unsigned char const)0,
 3268|       |    (unsigned char const)0,   (unsigned char const)0,
 3269|       |    (unsigned char const)0,   (unsigned char const)0,
 3270|       |    (unsigned char const)0,   (unsigned char const)0,
 3271|       |    (unsigned char const)3,   (unsigned char const)0,
 3272|       |    (unsigned char const)0,   (unsigned char const)0,
 3273|       |    (unsigned char const)0,   (unsigned char const)0,
 3274|       |    (unsigned char const)120, (unsigned char const)38,
 3275|       |    (unsigned char const)0,   (unsigned char const)0,
 3276|       |    (unsigned char const)0,   (unsigned char const)0,
 3277|       |    (unsigned char const)0,   (unsigned char const)0,
 3278|       |    (unsigned char const)0,   (unsigned char const)0,
 3279|       |    (unsigned char const)0,   (unsigned char const)0,
 3280|       |    (unsigned char const)0,   (unsigned char const)0,
 3281|       |    (unsigned char const)0,   (unsigned char const)0,
 3282|       |    (unsigned char const)0,   (unsigned char const)0,
 3283|       |    (unsigned char const)0,   (unsigned char const)0,
 3284|       |    (unsigned char const)0,   (unsigned char const)0,
 3285|       |    (unsigned char const)0,   (unsigned char const)0,
 3286|       |    (unsigned char const)0,   (unsigned char const)0,
 3287|       |    (unsigned char const)0,   (unsigned char const)0,
 3288|       |    (unsigned char const)0,   (unsigned char const)0,
 3289|       |    (unsigned char const)0,   (unsigned char const)0,
 3290|       |    (unsigned char const)0,   (unsigned char const)0,
 3291|       |    (unsigned char const)0,   (unsigned char const)0,
 3292|       |    (unsigned char const)0,   (unsigned char const)0,
 3293|       |    (unsigned char const)0,   (unsigned char const)0,
 3294|       |    (unsigned char const)0,   (unsigned char const)0,
 3295|       |    (unsigned char const)0,   (unsigned char const)0,
 3296|       |    (unsigned char const)0,   (unsigned char const)0,
 3297|       |    (unsigned char const)0,   (unsigned char const)0,
 3298|       |    (unsigned char const)0,   (unsigned char const)0,
 3299|       |    (unsigned char const)0,   (unsigned char const)0,
 3300|       |    (unsigned char const)0,   (unsigned char const)0,
 3301|       |    (unsigned char const)0,   (unsigned char const)0,
 3302|       |    (unsigned char const)0,   (unsigned char const)0,
 3303|       |    (unsigned char const)0,   (unsigned char const)0,
 3304|       |    (unsigned char const)0,   (unsigned char const)0,
 3305|       |    (unsigned char const)0,   (unsigned char const)0,
 3306|       |    (unsigned char const)0,   (unsigned char const)0,
 3307|       |    (unsigned char const)0,   (unsigned char const)0,
 3308|       |    (unsigned char const)0,   (unsigned char const)0,
 3309|       |    (unsigned char const)0,   (unsigned char const)0,
 3310|       |    (unsigned char const)0,   (unsigned char const)0,
 3311|       |    (unsigned char const)0,   (unsigned char const)0,
 3312|       |    (unsigned char const)0,   (unsigned char const)0,
 3313|       |    (unsigned char const)0,   (unsigned char const)0,
 3314|       |    (unsigned char const)0,   (unsigned char const)0,
 3315|       |    (unsigned char const)0,   (unsigned char const)0,
 3316|       |    (unsigned char const)0,   (unsigned char const)0,
 3317|       |    (unsigned char const)128, (unsigned char const)3,
 3318|       |    (unsigned char const)248, (unsigned char const)255,
 3319|       |    (unsigned char const)231, (unsigned char const)15,
 3320|       |    (unsigned char const)0,   (unsigned char const)0,
 3321|       |    (unsigned char const)0,   (unsigned char const)60,
 3322|       |    (unsigned char const)0,   (unsigned char const)0,
 3323|       |    (unsigned char const)0,   (unsigned char const)0,
 3324|       |    (unsigned char const)0,   (unsigned char const)0,
 3325|       |    (unsigned char const)0,   (unsigned char const)0,
 3326|       |    (unsigned char const)0,   (unsigned char const)0,
 3327|       |    (unsigned char const)0,   (unsigned char const)0,
 3328|       |    (unsigned char const)0,   (unsigned char const)0,
 3329|       |    (unsigned char const)0,   (unsigned char const)0,
 3330|       |    (unsigned char const)0,   (unsigned char const)0,
 3331|       |    (unsigned char const)28,  (unsigned char const)0,
 3332|       |    (unsigned char const)0,   (unsigned char const)0,
 3333|       |    (unsigned char const)0,   (unsigned char const)0,
 3334|       |    (unsigned char const)0,   (unsigned char const)0,
 3335|       |    (unsigned char const)0,   (unsigned char const)0,
 3336|       |    (unsigned char const)0,   (unsigned char const)0,
 3337|       |    (unsigned char const)0,   (unsigned char const)0,
 3338|       |    (unsigned char const)0,   (unsigned char const)0,
 3339|       |    (unsigned char const)0,   (unsigned char const)0,
 3340|       |    (unsigned char const)0,   (unsigned char const)0,
 3341|       |    (unsigned char const)0,   (unsigned char const)0,
 3342|       |    (unsigned char const)0,   (unsigned char const)0,
 3343|       |    (unsigned char const)0,   (unsigned char const)0,
 3344|       |    (unsigned char const)0,   (unsigned char const)0,
 3345|       |    (unsigned char const)0,   (unsigned char const)0,
 3346|       |    (unsigned char const)0,   (unsigned char const)0,
 3347|       |    (unsigned char const)0,   (unsigned char const)0,
 3348|       |    (unsigned char const)0,   (unsigned char const)0,
 3349|       |    (unsigned char const)0,   (unsigned char const)0,
 3350|       |    (unsigned char const)0,   (unsigned char const)0,
 3351|       |    (unsigned char const)0,   (unsigned char const)0,
 3352|       |    (unsigned char const)0,   (unsigned char const)0,
 3353|       |    (unsigned char const)0,   (unsigned char const)0,
 3354|       |    (unsigned char const)0,   (unsigned char const)0,
 3355|       |    (unsigned char const)0,   (unsigned char const)0,
 3356|       |    (unsigned char const)0,   (unsigned char const)0,
 3357|       |    (unsigned char const)0,   (unsigned char const)0,
 3358|       |    (unsigned char const)0,   (unsigned char const)0
 3359|       |};
 3360|       |static signed char const nonspacing_table_ind[240] = {
 3361|       |    (signed char const)0,    (signed char const)1,    (signed char const)2,
 3362|       |    (signed char const)3,    (signed char const)4,    (signed char const)5,
 3363|       |    (signed char const)6,    (signed char const)7,    (signed char const)8,
 3364|       |    (signed char const)9,    (signed char const) - 1, (signed char const)10,
 3365|       |    (signed char const)11,   (signed char const)12,   (signed char const)13,
 3366|       |    (signed char const) - 1, (signed char const)14,   (signed char const) - 1,
 3367|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 3368|       |    (signed char const) - 1, (signed char const)15,   (signed char const) - 1,
 3369|       |    (signed char const)16,   (signed char const) - 1, (signed char const) - 1,
 3370|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 3371|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 3372|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 3373|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 3374|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 3375|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 3376|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 3377|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 3378|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 3379|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 3380|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 3381|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 3382|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 3383|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 3384|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 3385|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 3386|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 3387|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 3388|       |    (signed char const) - 1, (signed char const) - 1, (signed char const)17,
 3389|       |    (signed char const)18,   (signed char const)19,   (signed char const) - 1,
 3390|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 3391|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 3392|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 3393|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 3394|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 3395|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 3396|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 3397|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 3398|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 3399|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 3400|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 3401|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 3402|       |    (signed char const) - 1, (signed char const) - 1, (signed char const)20,
 3403|       |    (signed char const) - 1, (signed char const)21,   (signed char const)22,
 3404|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 3405|       |    (signed char const) - 1, (signed char const)23,   (signed char const) - 1,
 3406|       |    (signed char const) - 1, (signed char const)24,   (signed char const) - 1,
 3407|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 3408|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 3409|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 3410|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 3411|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 3412|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 3413|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 3414|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 3415|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 3416|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 3417|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 3418|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 3419|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 3420|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 3421|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 3422|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 3423|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 3424|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 3425|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 3426|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 3427|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 3428|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 3429|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 3430|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 3431|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 3432|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 3433|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 3434|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 3435|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 3436|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 3437|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 3438|       |    (signed char const) - 1, (signed char const)25,   (signed char const)26,
 3439|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1,
 3440|       |    (signed char const) - 1, (signed char const) - 1, (signed char const) - 1
 3441|       |};
 3442|       |extern __attribute__((__nothrow__)) int(
 3443|       |    __attribute__((__nonnull__(1), __leaf__)) atexit)(void (*__func)(void));
 3444|       |extern __attribute__((__nothrow__)) int(__attribute__((__leaf__)) kill)(
 3445|       |    __pid_t __pid, int __sig);
 3446|       |extern __pid_t waitpid(__pid_t __pid, int *__stat_loc, int __options);
 3447|       |static slaves_entry_t static_slaves[32];
 3448|       |static slaves_entry_t *volatile slaves =
 3449|       |    (slaves_entry_t * /* volatile  */)(static_slaves);
 3450|       |static int volatile slaves_count = (int volatile)0;
 3451|       |static size_t slaves_allocated =
 3452|       |    sizeof(static_slaves) / sizeof(static_slaves[0]);
 3453|       |static _Bool cleanup_slaves_registered = (_Bool)0;
 3454|       |extern size_t fwrite(void const *__restrict __ptr, size_t __size, size_t __n,
 3455|       |                     FILE *__restrict __s);
 3456|       |extern int printf(char const *__restrict __format, ...);
 3457|       |char const version_etc_copyright[47];
 3458|       |void version_etc_arn(FILE *stream, char const *command_name,
 3459|       |                     char const *package, char const *version,
 3460|       |                     char const *const *authors, size_t n_authors);
 3461|       |void version_etc_va(FILE *stream, char const *command_name, char const *package,
 3462|       |                    char const *version, va_list authors);
 3463|       |void version_etc(FILE *stream, char const *command_name, char const *package,
 3464|       |                 char const *version, ...) __attribute__((__sentinel__));
 3465|       |void version_etc_arn(FILE *stream, char const *command_name,
 3466|       |                     char const *package, char const *version,
 3467|       |                     char const *const *authors, size_t n_authors)
 3468|      0|{
 3469|      0|    char *tmp;
 3470|      0|    char *tmp___0;
 3471|      0|    char *tmp___1;
 3472|      0|    char *tmp___2;
 3473|      0|    char *tmp___3;
 3474|      0|    char *tmp___4;
 3475|      0|    char *tmp___5;
 3476|      0|    char *tmp___6;
 3477|      0|    char *tmp___7;
 3478|      0|    char *tmp___8;
 3479|      0|    char *tmp___9;
 3480|      0|    char *tmp___10;
 3481|      0|    char *__cil_tmp19;
 3482|      0|    char *__cil_tmp20;
 3483|      0|    char *__cil_tmp21;
 3484|      0|    char *__cil_tmp22;
 3485|      0|    char *__cil_tmp23;
 3486|      0|    char *__cil_tmp24;
 3487|      0|    char *__cil_tmp25;
 3488|      0|    char *__cil_tmp26;
 3489|      0|    char *__cil_tmp27;
 3490|      0|    char *__cil_tmp28;
 3491|      0|    char *__cil_tmp29;
 3492|      0|    char *__cil_tmp30;
 3493|       |
 3494|      0|    {
 3495|      0|        if (command_name) {
 3496|      0|            {
 3497|      0|                fprintf((FILE * /* __restrict  */)stream,
 3498|      0|                        (char const * /* __restrict  */) "%s (%s) %s\n", command_name,
 3499|      0|                        package, version);
 3500|      0|            }
 3501|      0|        }
 3502|      0|        else {
 3503|      0|            {
 3504|      0|                fprintf((FILE * /* __restrict  */)stream,
 3505|      0|                        (char const * /* __restrict  */) "%s %s\n", package, version);
 3506|      0|            }
 3507|      0|        }
 3508|      0|        {
 3509|      0|            tmp = gettext("(C)");
 3510|      0|            fprintf((FILE * /* __restrict  */)stream,
 3511|      0|                    (char const * /* __restrict  */)(version_etc_copyright), tmp,
 3512|      0|                    2012);
 3513|      0|            tmp___0 =
 3514|      0|                gettext("\nLicense GPLv3+: GNU GPL version 3 or later "
 3515|      0|                        "<http://gnu.org/licenses/gpl.html>.\nThis is free software: "
 3516|      0|                        "you are free to change and redistribute it.\nThere is NO "
 3517|      0|                        "WARRANTY, to the extent permitted by law.\n\n");
 3518|      0|            fputs_unlocked((char const * /* __restrict  */)tmp___0,
 3519|      0|                           (FILE * /* __restrict  */)stream);
 3520|      0|        }
 3521|      0|        {
 3522|      0|            if (n_authors == 0UL) {
 3523|      0|                goto case_0;
 3524|      0|            }
 3525|      0|            if (n_authors == 1UL) {
 3526|      0|                goto case_1;
 3527|      0|            }
 3528|      0|            if (n_authors == 2UL) {
 3529|      0|                goto case_2;
 3530|      0|            }
 3531|      0|            if (n_authors == 3UL) {
 3532|      0|                goto case_3;
 3533|      0|            }
 3534|      0|            if (n_authors == 4UL) {
 3535|      0|                goto case_4;
 3536|      0|            }
 3537|      0|            if (n_authors == 5UL) {
 3538|      0|                goto case_5;
 3539|      0|            }
 3540|      0|            if (n_authors == 6UL) {
 3541|      0|                goto case_6;
 3542|      0|            }
 3543|      0|            if (n_authors == 7UL) {
 3544|      0|                goto case_7;
 3545|      0|            }
 3546|      0|            if (n_authors == 8UL) {
 3547|      0|                goto case_8;
 3548|      0|            }
 3549|      0|            if (n_authors == 9UL) {
 3550|      0|                goto case_9;
 3551|      0|            }
 3552|      0|            goto switch_default;
 3553|      0|case_0: { /* CIL Label */
 3554|      0|                abort();
 3555|      0|            }
 3556|      0|case_1: { /* CIL Label */
 3557|      0|                tmp___1 = gettext("Written by %s.\n");
 3558|      0|                fprintf((FILE * /* __restrict  */)stream,
 3559|      0|                        (char const * /* __restrict  */)tmp___1, *(authors + 0));
 3560|      0|            }
 3561|      0|            goto switch_break;
 3562|      0|case_2: { /* CIL Label */
 3563|      0|                tmp___2 = gettext("Written by %s and %s.\n");
 3564|      0|                fprintf((FILE * /* __restrict  */)stream,
 3565|      0|                        (char const * /* __restrict  */)tmp___2, *(authors + 0),
 3566|      0|                        *(authors + 1));
 3567|      0|            }
 3568|      0|            goto switch_break;
 3569|      0|case_3: { /* CIL Label */
 3570|      0|                tmp___3 = gettext("Written by %s, %s, and %s.\n");
 3571|      0|                fprintf((FILE * /* __restrict  */)stream,
 3572|      0|                        (char const * /* __restrict  */)tmp___3, *(authors + 0),
 3573|      0|                        *(authors + 1), *(authors + 2));
 3574|      0|            }
 3575|      0|            goto switch_break;
 3576|      0|case_4: { /* CIL Label */
 3577|      0|                tmp___4 = gettext("Written by %s, %s, %s,\nand %s.\n");
 3578|      0|                fprintf((FILE * /* __restrict  */)stream,
 3579|      0|                        (char const * /* __restrict  */)tmp___4, *(authors + 0),
 3580|      0|                        *(authors + 1), *(authors + 2), *(authors + 3));
 3581|      0|            }
 3582|      0|            goto switch_break;
 3583|      0|case_5: { /* CIL Label */
 3584|      0|                tmp___5 = gettext("Written by %s, %s, %s,\n%s, and %s.\n");
 3585|      0|                fprintf((FILE * /* __restrict  */)stream,
 3586|      0|                        (char const * /* __restrict  */)tmp___5, *(authors + 0),
 3587|      0|                        *(authors + 1), *(authors + 2), *(authors + 3), *(authors + 4));
 3588|      0|            }
 3589|      0|            goto switch_break;
 3590|      0|case_6: { /* CIL Label */
 3591|      0|                tmp___6 = gettext("Written by %s, %s, %s,\n%s, %s, and %s.\n");
 3592|      0|                fprintf((FILE * /* __restrict  */)stream,
 3593|      0|                        (char const * /* __restrict  */)tmp___6, *(authors + 0),
 3594|      0|                        *(authors + 1), *(authors + 2), *(authors + 3), *(authors + 4),
 3595|      0|                        *(authors + 5));
 3596|      0|            }
 3597|      0|            goto switch_break;
 3598|      0|case_7: { /* CIL Label */
 3599|      0|                tmp___7 = gettext("Written by %s, %s, %s,\n%s, %s, %s, and %s.\n");
 3600|      0|                fprintf((FILE * /* __restrict  */)stream,
 3601|      0|                        (char const * /* __restrict  */)tmp___7, *(authors + 0),
 3602|      0|                        *(authors + 1), *(authors + 2), *(authors + 3), *(authors + 4),
 3603|      0|                        *(authors + 5), *(authors + 6));
 3604|      0|            }
 3605|      0|            goto switch_break;
 3606|      0|case_8: { /* CIL Label */
 3607|      0|                tmp___8 = gettext("Written by %s, %s, %s,\n%s, %s, %s, %s,\nand %s.\n");
 3608|      0|                fprintf((FILE * /* __restrict  */)stream,
 3609|      0|                        (char const * /* __restrict  */)tmp___8, *(authors + 0),
 3610|      0|                        *(authors + 1), *(authors + 2), *(authors + 3), *(authors + 4),
 3611|      0|                        *(authors + 5), *(authors + 6), *(authors + 7));
 3612|      0|            }
 3613|      0|            goto switch_break;
 3614|      0|case_9: { /* CIL Label */
 3615|      0|                tmp___9 =
 3616|      0|                    gettext("Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, and %s.\n");
 3617|      0|                fprintf((FILE * /* __restrict  */)stream,
 3618|      0|                        (char const * /* __restrict  */)tmp___9, *(authors + 0),
 3619|      0|                        *(authors + 1), *(authors + 2), *(authors + 3), *(authors + 4),
 3620|      0|                        *(authors + 5), *(authors + 6), *(authors + 7), *(authors + 8));
 3621|      0|            }
 3622|      0|            goto switch_break;
 3623|      0|switch_default: { /* CIL Label */
 3624|      0|                tmp___10 = gettext(
 3625|      0|                               "Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, %s, and others.\n");
 3626|      0|                fprintf((FILE * /* __restrict  */)stream,
 3627|      0|                        (char const * /* __restrict  */)tmp___10, *(authors + 0),
 3628|      0|                        *(authors + 1), *(authors + 2), *(authors + 3), *(authors + 4),
 3629|      0|                        *(authors + 5), *(authors + 6), *(authors + 7), *(authors + 8));
 3630|      0|            }
 3631|      0|            goto switch_break;
 3632|      0|switch_break: /* CIL Label */
 3633|      0|            ;
 3634|      0|        }
 3635|      0|        return;
 3636|      0|    }
 3637|      0|}
 3638|       |void version_etc_va(FILE *stream, char const *command_name, char const *package,
 3639|       |                    char const *version, va_list authors)
 3640|      0|{
 3641|      0|    size_t n_authors;
 3642|      0|    char const *authtab[10];
 3643|      0|    char const *tmp;
 3644|      0|    void *__cil_tmp9;
 3645|       |
 3646|      0|    {
 3647|      0|        n_authors = (size_t)0;
 3648|      0|        {
 3649|      0|            while (1) {
 3650|      0|while_continue: /* CIL Label */
 3651|      0|                ;
 3652|      0|                if (n_authors < 10UL) {
 3653|      0|                    {
 3654|      0|                        tmp = __builtin_va_arg(authors, char const *);
 3655|      0|                        authtab[n_authors] = tmp;
 3656|      0|                    }
 3657|      0|                    if (!((unsigned long)tmp != (unsigned long)((void *)0))) {
 3658|      0|                        goto while_break;
 3659|      0|                    }
 3660|      0|                }
 3661|      0|                else {
 3662|      0|                    goto while_break;
 3663|      0|                }
 3664|      0|                n_authors++;
 3665|      0|            }
 3666|      0|while_break: /* CIL Label */
 3667|      0|            ;
 3668|      0|        }
 3669|      0|        {
 3670|      0|            version_etc_arn(stream, command_name, package, version,
 3671|      0|                            (char const *const *)(authtab), n_authors);
 3672|      0|        }
 3673|      0|        return;
 3674|      0|    }
 3675|      0|}
 3676|       |void version_etc(FILE *stream, char const *command_name, char const *package,
 3677|       |                 char const *version, ...) __attribute__((__sentinel__));
 3678|       |void version_etc(FILE *stream, char const *command_name, char const *package,
 3679|       |                 char const *version, ...)
 3680|      0|{
 3681|      0|    va_list authors;
 3682|       |
 3683|      0|    {
 3684|      0|        {
 3685|      0|            __builtin_va_start(authors, version);
 3686|      0|            version_etc_va(stream, command_name, package, version, authors);
 3687|      0|            __builtin_va_end(authors);
 3688|      0|        }
 3689|      0|        return;
 3690|      0|    }
 3691|      0|}
 3692|       |char const version_etc_copyright[47] = {
 3693|       |    (char const)'C', (char const)'o', (char const)'p',   (char const)'y',
 3694|       |    (char const)'r', (char const)'i', (char const)'g',   (char const)'h',
 3695|       |    (char const)'t', (char const)' ', (char const)'%',   (char const)'s',
 3696|       |    (char const)' ', (char const)'%', (char const)'d',   (char const)' ',
 3697|       |    (char const)'F', (char const)'r', (char const)'e',   (char const)'e',
 3698|       |    (char const)' ', (char const)'S', (char const)'o',   (char const)'f',
 3699|       |    (char const)'t', (char const)'w', (char const)'a',   (char const)'r',
 3700|       |    (char const)'e', (char const)' ', (char const)'F',   (char const)'o',
 3701|       |    (char const)'u', (char const)'n', (char const)'d',   (char const)'a',
 3702|       |    (char const)'t', (char const)'i', (char const)'o',   (char const)'n',
 3703|       |    (char const)',', (char const)' ', (char const)'I',   (char const)'n',
 3704|       |    (char const)'c', (char const)'.', (char const)'\000'
 3705|       |};
 3706|       |extern void error_at_line(int __status, int __errnum, char const *__fname,
 3707|       |                          unsigned int __lineno, char const *__format, ...);
 3708|       |extern __attribute__((__nothrow__)) char *(
 3709|       |    __attribute__((__leaf__)) nl_langinfo)(nl_item __item);
 3710|       |extern __attribute__((__nothrow__)) int(__attribute__((__nonnull__(2, 3),
 3711|       |                                        __leaf__)) fstatat)(
 3712|       |                                                int __fd, char const *__restrict __file, struct stat *__restrict __buf,
 3713|       |                                                int __flag);
 3714|       |extern __attribute__((__nothrow__)) int(__attribute__((__nonnull__(2),
 3715|       |                                        __leaf__)) utimensat)(
 3716|       |                                                int __fd, char const *__path, struct timespec const *__times, int __flags);
 3717|       |static int utimensat_works_really;
 3718|       |extern __attribute__((__nothrow__)) int(__attribute__((__leaf__)) futimens)(
 3719|       |    int __fd, struct timespec const *__times);
 3720|       |extern __attribute__((__nothrow__)) int(__attribute__((
 3721|       |        __nonnull__(1), __leaf__)) utimes)(char const *__file,
 3722|       |                struct timeval const *__tvp);
 3723|       |extern __attribute__((__nothrow__)) int(__attribute__((__leaf__)) futimesat)(
 3724|       |    int __fd, char const *__file, struct timeval const *__tvp);
 3725|       |static int utimensat_works_really___0;
 3726|       |static int lutimensat_works_really;
 3727|       |static Hash_table *ht;
 3728|       |static struct fs_res *new_dst_res;
 3729|       |extern void endpwent(void);
 3730|       |extern struct passwd *getpwnam(char const *__name);
 3731|       |extern void endgrent(void);
 3732|       |extern struct group *getgrgid(__gid_t __gid);
 3733|       |extern struct group *getgrnam(char const *__name);
 3734|       |static char const *E_invalid_user = "invalid user";
 3735|       |static char const *E_invalid_group = "invalid group";
 3736|       |static char const *E_bad_spec = "invalid spec";
 3737|       |extern iconv_t iconv_open(char const *__tocode, char const *__fromcode);
 3738|       |extern size_t iconv(iconv_t __cd, char **__restrict __inbuf,
 3739|       |                    size_t *__restrict __inbytesleft,
 3740|       |                    char **__restrict __outbuf,
 3741|       |                    size_t *__restrict __outbytesleft);
 3742|       |char const *locale_charset(void);
 3743|       |static int initialized___0;
 3744|       |static int is_utf8;
 3745|       |static iconv_t utf8_to_local;
 3746|       |#pragma GCC diagnostic ignored "-Wtype-limits"
 3747|       |#pragma GCC diagnostic ignored "-Wtype-limits"
 3748|       |extern __attribute__((__nothrow__))
 3749|       |size_t(__attribute__((__leaf__)) __ctype_get_mb_cur_max)(void);
 3750|       |extern __attribute__((__nothrow__)) int(__attribute__((__leaf__)) mbsinit)(
 3751|       |    mbstate_t const *__ps) __attribute__((__pure__));
 3752|       |extern __attribute__((__nothrow__)) size_t(__attribute__((__leaf__)) mbrtowc)(
 3753|       |    wchar_t *__restrict __pwc, char const *__restrict __s, size_t __n,
 3754|       |    mbstate_t *__restrict __p);
 3755|       |extern __attribute__((__nothrow__)) int(__attribute__((__leaf__)) iswspace)(
 3756|       |    wint_t __wc);
 3757|       |unsigned int const is_basic_table[8];
 3758|       |#pragma weak pthread_key_create
 3759|       |#pragma weak pthread_getspecific
 3760|       |#pragma weak pthread_setspecific
 3761|       |#pragma weak pthread_key_delete
 3762|       |#pragma weak pthread_self
 3763|       |#pragma weak pthread_cancel
 3764|       |extern int(__attribute__((__nonnull__(1))) open)(char const *__file,
 3765|       |        int __oflag, ...);
 3766|       |extern __attribute__((__nothrow__)) int(__attribute__((
 3767|       |        __nonnull__(1), __leaf__)) mkdir)(char const *__path, __mode_t __mode);
 3768|       |static char const letters[63] = {
 3769|       |    (char const)'a', (char const)'b', (char const)'c',   (char const)'d',
 3770|       |    (char const)'e', (char const)'f', (char const)'g',   (char const)'h',
 3771|       |    (char const)'i', (char const)'j', (char const)'k',   (char const)'l',
 3772|       |    (char const)'m', (char const)'n', (char const)'o',   (char const)'p',
 3773|       |    (char const)'q', (char const)'r', (char const)'s',   (char const)'t',
 3774|       |    (char const)'u', (char const)'v', (char const)'w',   (char const)'x',
 3775|       |    (char const)'y', (char const)'z', (char const)'A',   (char const)'B',
 3776|       |    (char const)'C', (char const)'D', (char const)'E',   (char const)'F',
 3777|       |    (char const)'G', (char const)'H', (char const)'I',   (char const)'J',
 3778|       |    (char const)'K', (char const)'L', (char const)'M',   (char const)'N',
 3779|       |    (char const)'O', (char const)'P', (char const)'Q',   (char const)'R',
 3780|       |    (char const)'S', (char const)'T', (char const)'U',   (char const)'V',
 3781|       |    (char const)'W', (char const)'X', (char const)'Y',   (char const)'Z',
 3782|       |    (char const)'0', (char const)'1', (char const)'2',   (char const)'3',
 3783|       |    (char const)'4', (char const)'5', (char const)'6',   (char const)'7',
 3784|       |    (char const)'8', (char const)'9', (char const)'\000'
 3785|       |};
 3786|       |extern int iconv_close(iconv_t __cd);
 3787|       |extern __attribute__((__nothrow__))
 3788|       |time_t(__attribute__((__leaf__)) mktime)(struct tm *__tp);
 3789|       |extern __attribute__((__nothrow__)) size_t(__attribute__((__leaf__)) strftime)(
 3790|       |    char *__restrict __s, size_t __maxsize, char const *__restrict __format,
 3791|       |    struct tm const *__restrict __tp);
 3792|       |extern __attribute__((__nothrow__)) int(__attribute__((__leaf__)) tolower)(
 3793|       |    int __c);
 3794|       |extern __attribute__((__nothrow__)) int(__attribute__((__leaf__)) toupper)(
 3795|       |    int __c);
 3796|       |extern char **environ;
 3797|       |extern __attribute__((__nothrow__)) int(__attribute__((__leaf__)) sigprocmask)(
 3798|       |    int __how, sigset_t const *__restrict __set, sigset_t *__restrict __oset);
 3799|       |extern int posix_spawnp(pid_t *__pid, char const *__file,
 3800|       |                        posix_spawn_file_actions_t const *__file_actions,
 3801|       |                        posix_spawnattr_t const *__attrp, char *const *__argv,
 3802|       |                        char *const *__envp);
 3803|       |extern __attribute__((__nothrow__)) int(
 3804|       |    __attribute__((__leaf__)) posix_spawnattr_init)(posix_spawnattr_t *__attr);
 3805|       |extern __attribute__((__nothrow__)) int(__attribute__((
 3806|       |        __leaf__)) posix_spawnattr_destroy)(posix_spawnattr_t *__attr);
 3807|       |extern __attribute__((__nothrow__)) int(
 3808|       |    __attribute__((__leaf__)) posix_spawnattr_setsigmask)(
 3809|       |        posix_spawnattr_t *__restrict __attr, sigset_t const *__restrict __sigmask);
 3810|       |extern __attribute__((__nothrow__)) int(__attribute__((
 3811|       |        __leaf__)) posix_spawnattr_setflags)(posix_spawnattr_t *_attr,
 3812|       |                short __flags);
 3813|       |extern __attribute__((__nothrow__)) int(
 3814|       |    __attribute__((__leaf__)) posix_spawn_file_actions_init)(
 3815|       |        posix_spawn_file_actions_t *__file_actions);
 3816|       |extern __attribute__((__nothrow__)) int(
 3817|       |    __attribute__((__leaf__)) posix_spawn_file_actions_destroy)(
 3818|       |        posix_spawn_file_actions_t *__file_actions);
 3819|       |extern __attribute__((__nothrow__)) int(
 3820|       |    __attribute__((__leaf__)) posix_spawn_file_actions_addopen)(
 3821|       |        posix_spawn_file_actions_t *__restrict __file_actions, int __fd,
 3822|       |        char const *__restrict __path, int __oflag, mode_t __mode);
 3823|       |extern __attribute__((__nothrow__)) int(
 3824|       |    __attribute__((__leaf__)) posix_spawn_file_actions_addclose)(
 3825|       |        posix_spawn_file_actions_t *__file_actions, int __fd);
 3826|       |extern __attribute__((__nothrow__)) int(
 3827|       |    __attribute__((__leaf__)) posix_spawn_file_actions_adddup2)(
 3828|       |        posix_spawn_file_actions_t *__file_actions, int __fd, int __newfd);
 3829|       |extern __attribute__((__nothrow__)) int(
 3830|       |    __attribute__((__leaf__)) __libc_current_sigrtmin)(void);
 3831|       |extern __attribute__((__nothrow__)) int(
 3832|       |    __attribute__((__leaf__)) __libc_current_sigrtmax)(void);
 3833|       |extern __attribute__((__nothrow__)) int
 3834|       |sprintf(char *__restrict __s, char const *__restrict __format, ...);
 3835|       |static struct numname numname_table[35] = {
 3836|       |    {
 3837|       |        1,
 3838|       |        {(char const)'H', (char const)'U', (char const)'P', (char const)'\000'}
 3839|       |    },
 3840|       |    {
 3841|       |        2,
 3842|       |        {(char const)'I', (char const)'N', (char const)'T', (char const)'\000'}
 3843|       |    },
 3844|       |    {
 3845|       |        3,
 3846|       |        {
 3847|       |            (char const)'Q', (char const)'U', (char const)'I', (char const)'T',
 3848|       |            (char const)'\000'
 3849|       |        }
 3850|       |    },
 3851|       |    {
 3852|       |        4,
 3853|       |        {(char const)'I', (char const)'L', (char const)'L', (char const)'\000'}
 3854|       |    },
 3855|       |    {
 3856|       |        5,
 3857|       |        {
 3858|       |            (char const)'T', (char const)'R', (char const)'A', (char const)'P',
 3859|       |            (char const)'\000'
 3860|       |        }
 3861|       |    },
 3862|       |    {
 3863|       |        6,
 3864|       |        {
 3865|       |            (char const)'A', (char const)'B', (char const)'R', (char const)'T',
 3866|       |            (char const)'\000'
 3867|       |        }
 3868|       |    },
 3869|       |    {
 3870|       |        8,
 3871|       |        {(char const)'F', (char const)'P', (char const)'E', (char const)'\000'}
 3872|       |    },
 3873|       |    {
 3874|       |        9,
 3875|       |        {
 3876|       |            (char const)'K', (char const)'I', (char const)'L', (char const)'L',
 3877|       |            (char const)'\000'
 3878|       |        }
 3879|       |    },
 3880|       |    {
 3881|       |        11,
 3882|       |        {
 3883|       |            (char const)'S', (char const)'E', (char const)'G', (char const)'V',
 3884|       |            (char const)'\000'
 3885|       |        }
 3886|       |    },
 3887|       |    {
 3888|       |        7,
 3889|       |        {(char const)'B', (char const)'U', (char const)'S', (char const)'\000'}
 3890|       |    },
 3891|       |    {
 3892|       |        13,
 3893|       |        {
 3894|       |            (char const)'P', (char const)'I', (char const)'P', (char const)'E',
 3895|       |            (char const)'\000'
 3896|       |        }
 3897|       |    },
 3898|       |    {
 3899|       |        14,
 3900|       |        {
 3901|       |            (char const)'A', (char const)'L', (char const)'R', (char const)'M',
 3902|       |            (char const)'\000'
 3903|       |        }
 3904|       |    },
 3905|       |    {
 3906|       |        15,
 3907|       |        {
 3908|       |            (char const)'T', (char const)'E', (char const)'R', (char const)'M',
 3909|       |            (char const)'\000'
 3910|       |        }
 3911|       |    },
 3912|       |    {
 3913|       |        10,
 3914|       |        {
 3915|       |            (char const)'U', (char const)'S', (char const)'R', (char const)'1',
 3916|       |            (char const)'\000'
 3917|       |        }
 3918|       |    },
 3919|       |    {
 3920|       |        12,
 3921|       |        {
 3922|       |            (char const)'U', (char const)'S', (char const)'R', (char const)'2',
 3923|       |            (char const)'\000'
 3924|       |        }
 3925|       |    },
 3926|       |    {
 3927|       |        17,
 3928|       |        {
 3929|       |            (char const)'C', (char const)'H', (char const)'L', (char const)'D',
 3930|       |            (char const)'\000'
 3931|       |        }
 3932|       |    },
 3933|       |    {
 3934|       |        23,
 3935|       |        {(char const)'U', (char const)'R', (char const)'G', (char const)'\000'}
 3936|       |    },
 3937|       |    {
 3938|       |        19,
 3939|       |        {
 3940|       |            (char const)'S', (char const)'T', (char const)'O', (char const)'P',
 3941|       |            (char const)'\000'
 3942|       |        }
 3943|       |    },
 3944|       |    {
 3945|       |        20,
 3946|       |        {
 3947|       |            (char const)'T', (char const)'S', (char const)'T', (char const)'P',
 3948|       |            (char const)'\000'
 3949|       |        }
 3950|       |    },
 3951|       |    {
 3952|       |        18,
 3953|       |        {
 3954|       |            (char const)'C', (char const)'O', (char const)'N', (char const)'T',
 3955|       |            (char const)'\000'
 3956|       |        }
 3957|       |    },
 3958|       |    {
 3959|       |        21,
 3960|       |        {
 3961|       |            (char const)'T', (char const)'T', (char const)'I', (char const)'N',
 3962|       |            (char const)'\000'
 3963|       |        }
 3964|       |    },
 3965|       |    {
 3966|       |        22,
 3967|       |        {
 3968|       |            (char const)'T', (char const)'T', (char const)'O', (char const)'U',
 3969|       |            (char const)'\000'
 3970|       |        }
 3971|       |    },
 3972|       |    {
 3973|       |        31,
 3974|       |        {(char const)'S', (char const)'Y', (char const)'S', (char const)'\000'}
 3975|       |    },
 3976|       |    {
 3977|       |        29,
 3978|       |        {
 3979|       |            (char const)'P', (char const)'O', (char const)'L', (char const)'L',
 3980|       |            (char const)'\000'
 3981|       |        }
 3982|       |    },
 3983|       |    {
 3984|       |        26,
 3985|       |        {
 3986|       |            (char const)'V', (char const)'T', (char const)'A', (char const)'L',
 3987|       |            (char const)'R', (char const)'M', (char const)'\000'
 3988|       |        }
 3989|       |    },
 3990|       |    {
 3991|       |        27,
 3992|       |        {
 3993|       |            (char const)'P', (char const)'R', (char const)'O', (char const)'F',
 3994|       |            (char const)'\000'
 3995|       |        }
 3996|       |    },
 3997|       |    {
 3998|       |        24,
 3999|       |        {
 4000|       |            (char const)'X', (char const)'C', (char const)'P', (char const)'U',
 4001|       |            (char const)'\000'
 4002|       |        }
 4003|       |    },
 4004|       |    {
 4005|       |        25,
 4006|       |        {
 4007|       |            (char const)'X', (char const)'F', (char const)'S', (char const)'Z',
 4008|       |            (char const)'\000'
 4009|       |        }
 4010|       |    },
 4011|       |    {
 4012|       |        6,
 4013|       |        {(char const)'I', (char const)'O', (char const)'T', (char const)'\000'}
 4014|       |    },
 4015|       |    {
 4016|       |        17,
 4017|       |        {(char const)'C', (char const)'L', (char const)'D', (char const)'\000'}
 4018|       |    },
 4019|       |    {
 4020|       |        30,
 4021|       |        {(char const)'P', (char const)'W', (char const)'R', (char const)'\000'}
 4022|       |    },
 4023|       |    {
 4024|       |        28,
 4025|       |        {
 4026|       |            (char const)'W', (char const)'I', (char const)'N', (char const)'C',
 4027|       |            (char const)'H', (char const)'\000'
 4028|       |        }
 4029|       |    },
 4030|       |    {29, {(char const)'I', (char const)'O', (char const)'\000'}},
 4031|       |    {
 4032|       |        16,
 4033|       |        {
 4034|       |            (char const)'S', (char const)'T', (char const)'K', (char const)'F',
 4035|       |            (char const)'L', (char const)'T', (char const)'\000'
 4036|       |        }
 4037|       |    },
 4038|       |    {
 4039|       |        0,
 4040|       |        {
 4041|       |            (char const)'E', (char const)'X', (char const)'I', (char const)'T',
 4042|       |            (char const)'\000'
 4043|       |        }
 4044|       |    }
 4045|       |};
 4046|       |extern size_t fread_unlocked(void *__restrict __ptr, size_t __size, size_t __n,
 4047|       |                             FILE *__restrict __stream);
 4048|       |extern __attribute__((__nothrow__)) int(
 4049|       |    __attribute__((__leaf__)) feof_unlocked)(FILE *__stream);
 4050|       |static unsigned char const fillbuf[128] = {(unsigned char const)128,
 4051|       |                                           (unsigned char const)0
 4052|       |                                          };
 4053|       |static u64 const sha512_round_constants[80] = {
 4054|       |    (u64 const)((1116352408UL << 32) + 3609767458UL),
 4055|       |    (u64 const)((1899447441UL << 32) + 602891725UL),
 4056|       |    (u64 const)((3049323471UL << 32) + 3964484399UL),
 4057|       |    (u64 const)((3921009573UL << 32) + 2173295548UL),
 4058|       |    (u64 const)((961987163UL << 32) + 4081628472UL),
 4059|       |    (u64 const)((1508970993UL << 32) + 3053834265UL),
 4060|       |    (u64 const)((2453635748UL << 32) + 2937671579UL),
 4061|       |    (u64 const)((2870763221UL << 32) + 3664609560UL),
 4062|       |    (u64 const)((3624381080UL << 32) + 2734883394UL),
 4063|       |    (u64 const)((310598401UL << 32) + 1164996542UL),
 4064|       |    (u64 const)((607225278UL << 32) + 1323610764UL),
 4065|       |    (u64 const)((1426881987UL << 32) + 3590304994UL),
 4066|       |    (u64 const)((1925078388UL << 32) + 4068182383UL),
 4067|       |    (u64 const)((2162078206UL << 32) + 991336113UL),
 4068|       |    (u64 const)((2614888103UL << 32) + 633803317UL),
 4069|       |    (u64 const)((3248222580UL << 32) + 3479774868UL),
 4070|       |    (u64 const)((3835390401UL << 32) + 2666613458UL),
 4071|       |    (u64 const)((4022224774UL << 32) + 944711139UL),
 4072|       |    (u64 const)((264347078UL << 32) + 2341262773UL),
 4073|       |    (u64 const)((604807628UL << 32) + 2007800933UL),
 4074|       |    (u64 const)((770255983UL << 32) + 1495990901UL),
 4075|       |    (u64 const)((1249150122UL << 32) + 1856431235UL),
 4076|       |    (u64 const)((1555081692UL << 32) + 3175218132UL),
 4077|       |    (u64 const)((1996064986UL << 32) + 2198950837UL),
 4078|       |    (u64 const)((2554220882UL << 32) + 3999719339UL),
 4079|       |    (u64 const)((2821834349UL << 32) + 766784016UL),
 4080|       |    (u64 const)((2952996808UL << 32) + 2566594879UL),
 4081|       |    (u64 const)((3210313671UL << 32) + 3203337956UL),
 4082|       |    (u64 const)((3336571891UL << 32) + 1034457026UL),
 4083|       |    (u64 const)((3584528711UL << 32) + 2466948901UL),
 4084|       |    (u64 const)((113926993UL << 32) + 3758326383UL),
 4085|       |    (u64 const)((338241895UL << 32) + 168717936UL),
 4086|       |    (u64 const)((666307205UL << 32) + 1188179964UL),
 4087|       |    (u64 const)((773529912UL << 32) + 1546045734UL),
 4088|       |    (u64 const)((1294757372UL << 32) + 1522805485UL),
 4089|       |    (u64 const)((1396182291UL << 32) + 2643833823UL),
 4090|       |    (u64 const)((1695183700UL << 32) + 2343527390UL),
 4091|       |    (u64 const)((1986661051UL << 32) + 1014477480UL),
 4092|       |    (u64 const)((2177026350UL << 32) + 1206759142UL),
 4093|       |    (u64 const)((2456956037UL << 32) + 344077627UL),
 4094|       |    (u64 const)((2730485921UL << 32) + 1290863460UL),
 4095|       |    (u64 const)((2820302411UL << 32) + 3158454273UL),
 4096|       |    (u64 const)((3259730800UL << 32) + 3505952657UL),
 4097|       |    (u64 const)((3345764771UL << 32) + 106217008UL),
 4098|       |    (u64 const)((3516065817UL << 32) + 3606008344UL),
 4099|       |    (u64 const)((3600352804UL << 32) + 1432725776UL),
 4100|       |    (u64 const)((4094571909UL << 32) + 1467031594UL),
 4101|       |    (u64 const)((275423344UL << 32) + 851169720UL),
 4102|       |    (u64 const)((430227734UL << 32) + 3100823752UL),
 4103|       |    (u64 const)((506948616UL << 32) + 1363258195UL),
 4104|       |    (u64 const)((659060556UL << 32) + 3750685593UL),
 4105|       |    (u64 const)((883997877UL << 32) + 3785050280UL),
 4106|       |    (u64 const)((958139571UL << 32) + 3318307427UL),
 4107|       |    (u64 const)((1322822218UL << 32) + 3812723403UL),
 4108|       |    (u64 const)((1537002063UL << 32) + 2003034995UL),
 4109|       |    (u64 const)((1747873779UL << 32) + 3602036899UL),
 4110|       |    (u64 const)((1955562222UL << 32) + 1575990012UL),
 4111|       |    (u64 const)((2024104815UL << 32) + 1125592928UL),
 4112|       |    (u64 const)((2227730452UL << 32) + 2716904306UL),
 4113|       |    (u64 const)((2361852424UL << 32) + 442776044UL),
 4114|       |    (u64 const)((2428436474UL << 32) + 593698344UL),
 4115|       |    (u64 const)((2756734187UL << 32) + 3733110249UL),
 4116|       |    (u64 const)((3204031479UL << 32) + 2999351573UL),
 4117|       |    (u64 const)((3329325298UL << 32) + 3815920427UL),
 4118|       |    (u64 const)((3391569614UL << 32) + 3928383900UL),
 4119|       |    (u64 const)((3515267271UL << 32) + 566280711UL),
 4120|       |    (u64 const)((3940187606UL << 32) + 3454069534UL),
 4121|       |    (u64 const)((4118630271UL << 32) + 4000239992UL),
 4122|       |    (u64 const)((116418474UL << 32) + 1914138554UL),
 4123|       |    (u64 const)((174292421UL << 32) + 2731055270UL),
 4124|       |    (u64 const)((289380356UL << 32) + 3203993006UL),
 4125|       |    (u64 const)((460393269UL << 32) + 320620315UL),
 4126|       |    (u64 const)((685471733UL << 32) + 587496836UL),
 4127|       |    (u64 const)((852142971UL << 32) + 1086792851UL),
 4128|       |    (u64 const)((1017036298UL << 32) + 365543100UL),
 4129|       |    (u64 const)((1126000580UL << 32) + 2618297676UL),
 4130|       |    (u64 const)((1288033470UL << 32) + 3409855158UL),
 4131|       |    (u64 const)((1501505948UL << 32) + 4234509866UL),
 4132|       |    (u64 const)((1607167915UL << 32) + 987167468UL),
 4133|       |    (u64 const)((1816402316UL << 32) + 1246189591UL)
 4134|       |};
 4135|       |static unsigned char const fillbuf___0[64] = {(unsigned char const)128,
 4136|       |                                              (unsigned char const)0
 4137|       |                                             };
 4138|       |static uint32_t const sha256_round_constants[64] = {
 4139|       |    (uint32_t const)1116352408UL, (uint32_t const)1899447441UL,
 4140|       |    (uint32_t const)3049323471UL, (uint32_t const)3921009573UL,
 4141|       |    (uint32_t const)961987163UL,  (uint32_t const)1508970993UL,
 4142|       |    (uint32_t const)2453635748UL, (uint32_t const)2870763221UL,
 4143|       |    (uint32_t const)3624381080UL, (uint32_t const)310598401UL,
 4144|       |    (uint32_t const)607225278UL,  (uint32_t const)1426881987UL,
 4145|       |    (uint32_t const)1925078388UL, (uint32_t const)2162078206UL,
 4146|       |    (uint32_t const)2614888103UL, (uint32_t const)3248222580UL,
 4147|       |    (uint32_t const)3835390401UL, (uint32_t const)4022224774UL,
 4148|       |    (uint32_t const)264347078UL,  (uint32_t const)604807628UL,
 4149|       |    (uint32_t const)770255983UL,  (uint32_t const)1249150122UL,
 4150|       |    (uint32_t const)1555081692UL, (uint32_t const)1996064986UL,
 4151|       |    (uint32_t const)2554220882UL, (uint32_t const)2821834349UL,
 4152|       |    (uint32_t const)2952996808UL, (uint32_t const)3210313671UL,
 4153|       |    (uint32_t const)3336571891UL, (uint32_t const)3584528711UL,
 4154|       |    (uint32_t const)113926993UL,  (uint32_t const)338241895UL,
 4155|       |    (uint32_t const)666307205UL,  (uint32_t const)773529912UL,
 4156|       |    (uint32_t const)1294757372UL, (uint32_t const)1396182291UL,
 4157|       |    (uint32_t const)1695183700UL, (uint32_t const)1986661051UL,
 4158|       |    (uint32_t const)2177026350UL, (uint32_t const)2456956037UL,
 4159|       |    (uint32_t const)2730485921UL, (uint32_t const)2820302411UL,
 4160|       |    (uint32_t const)3259730800UL, (uint32_t const)3345764771UL,
 4161|       |    (uint32_t const)3516065817UL, (uint32_t const)3600352804UL,
 4162|       |    (uint32_t const)4094571909UL, (uint32_t const)275423344UL,
 4163|       |    (uint32_t const)430227734UL,  (uint32_t const)506948616UL,
 4164|       |    (uint32_t const)659060556UL,  (uint32_t const)883997877UL,
 4165|       |    (uint32_t const)958139571UL,  (uint32_t const)1322822218UL,
 4166|       |    (uint32_t const)1537002063UL, (uint32_t const)1747873779UL,
 4167|       |    (uint32_t const)1955562222UL, (uint32_t const)2024104815UL,
 4168|       |    (uint32_t const)2227730452UL, (uint32_t const)2361852424UL,
 4169|       |    (uint32_t const)2428436474UL, (uint32_t const)2756734187UL,
 4170|       |    (uint32_t const)3204031479UL, (uint32_t const)3329325298UL
 4171|       |};
 4172|       |static unsigned char const fillbuf___1[64] = {(unsigned char const)128,
 4173|       |                                              (unsigned char const)0
 4174|       |                                             };
 4175|       |extern
 4176|       |__attribute__((__nothrow__)) int(__attribute__((__leaf__)) clock_settime)(
 4177|       |    clockid_t __clock_id, struct timespec const *__tp);
 4178|       |extern __attribute__((__nothrow__)) int(__attribute__((__leaf__)) settimeofday)(
 4179|       |    struct timeval const *__tv, struct timezone const *__tz);
 4180|       |extern __attribute__((__nothrow__)) int(__attribute__((__leaf__)) raise)(
 4181|       |    int __sig);
 4182|       |extern __attribute__((__nothrow__)) __pid_t fork(void);
 4183|       |extern DIR *fdopendir(int __fd);
 4184|       |extern ssize_t write(int __fd, void const *__buf, size_t __n);
 4185|       |extern ssize_t read(int __fd, void *__buf, size_t __nbytes);
 4186|       |extern __attribute__((__nothrow__)) int(
 4187|       |    __attribute__((__nonnull__(1), __leaf__)) unlink)(char const *__name);
 4188|       |extern __attribute__((__nothrow__)) int(
 4189|       |    __attribute__((__nonnull__(1), __leaf__)) rmdir)(char const *__path);
 4190|       |extern void setutxent(void);
 4191|       |extern void endutxent(void);
 4192|       |extern struct utmpx *getutxent(void);
 4193|       |extern int utmpxname(char const *__file);
 4194|       |extern __attribute__((__nothrow__)) char *(__attribute__((__nonnull__(1, 2),
 4195|       |        __leaf__)) strncpy)(
 4196|       |            char *__restrict __dest, char const *__restrict __src, size_t __n);
 4197|       |extern int fgetc(FILE *__stream);
 4198|       |extern void _obstack_newchunk(struct obstack *, int);
 4199|       |extern int _obstack_begin(struct obstack *, int, int, void *(*)(long),
 4200|       |                          void (*)(void *));
 4201|       |extern void obstack_free(struct obstack *obstack, void *block);
 4202|       |extern int getc_unlocked(FILE *__stream);
 4203|       |extern FILE *fopen(char const *__restrict __filename,
 4204|       |                   char const *__restrict __modes);
 4205|       |extern size_t fread(void *__restrict __ptr, size_t __size, size_t __n,
 4206|       |                    FILE *__restrict __stream);
 4207|       |extern __off_t ftello(FILE *__stream);
 4208|       |extern __attribute__((__nothrow__)) int(__attribute__((__leaf__)) fileno)(
 4209|       |    FILE *__stream);
 4210|       |extern __attribute__((__nothrow__)) int(__attribute__((__leaf__)) setvbuf)(
 4211|       |    FILE *__restrict __stream, char *__restrict __buf, int __modes, size_t __n);
 4212|       |extern __attribute__((__nothrow__)) int(__attribute__((
 4213|       |        __nonnull__(1), __leaf__)) gettimeofday)(struct timeval *__restrict __tv,
 4214|       |                __timezone_ptr_t __tz);
 4215|       |extern __attribute__((__nothrow__))
 4216|       |__pid_t(__attribute__((__leaf__)) getpid)(void);
 4217|       |extern __attribute__((__nothrow__))
 4218|       |__pid_t(__attribute__((__leaf__)) getppid)(void);
 4219|       |extern __attribute__((__nothrow__))
 4220|       |__uid_t(__attribute__((__leaf__)) getuid)(void);
 4221|       |extern __attribute__((__nothrow__))
 4222|       |__gid_t(__attribute__((__leaf__)) getgid)(void);
 4223|       |#pragma GCC diagnostic ignored "-Wsuggest-attribute=pure"
 4224|       |char const *const quoting_style_args[9];
 4225|       |enum quoting_style const quoting_style_vals[8];
 4226|       |int set_char_quoting(struct quoting_options *o, char c, int i);
 4227|       |char *quotearg_char(char const *arg, char ch);
 4228|       |char *quotearg_char_mem(char const *arg, size_t argsize, char ch);
 4229|       |struct quoting_options quote_quoting_options;
 4230|       |__inline static char *xcharalloc(size_t n)
 4231|       |__attribute__((__malloc__, __alloc_size__(1)));
 4232|       |__inline static char *xcharalloc(size_t n)
 4233|       |__attribute__((__malloc__, __alloc_size__(1)));
 4234|       |__inline static char *xcharalloc(size_t n)
 4235|      0|{
 4236|      0|    void *tmp;
 4237|      0|    void *tmp___0;
 4238|      0|    void *tmp___1;
 4239|       |
 4240|      0|    {
 4241|      0|        if (sizeof(char) == 1UL) {
 4242|      0|            {
 4243|      0|                tmp = xmalloc(n);
 4244|      0|                tmp___1 = tmp;
 4245|      0|            }
 4246|      0|        }
 4247|      0|        else {
 4248|      0|            {
 4249|      0|                tmp___0 = xnmalloc(n, sizeof(char));
 4250|      0|                tmp___1 = tmp___0;
 4251|      0|            }
 4252|      0|        }
 4253|      0|        return ((char *)tmp___1);
 4254|      0|    }
 4255|      0|}
 4256|       |extern __attribute__((__nothrow__)) int(__attribute__((__leaf__)) iswprint)(
 4257|       |    wint_t __wc);
 4258|       |char const *const quoting_style_args[9] = {
 4259|       |    (char const * /* const  */) "literal",
 4260|       |    (char const * /* const  */) "shell",
 4261|       |    (char const * /* const  */) "shell-always",
 4262|       |    (char const * /* const  */) "c",
 4263|       |    (char const * /* const  */) "c-maybe",
 4264|       |    (char const * /* const  */) "escape",
 4265|       |    (char const * /* const  */) "locale",
 4266|       |    (char const * /* const  */) "clocale",
 4267|       |    (char const * /* const  */)0
 4268|       |};
 4269|       |enum quoting_style const quoting_style_vals[8] = {
 4270|       |    (enum quoting_style const)0, (enum quoting_style const)1,
 4271|       |    (enum quoting_style const)2, (enum quoting_style const)3,
 4272|       |    (enum quoting_style const)4, (enum quoting_style const)5,
 4273|       |    (enum quoting_style const)6, (enum quoting_style const)7
 4274|       |};
 4275|       |static struct quoting_options default_quoting_options;
 4276|       |int set_char_quoting(struct quoting_options *o, char c, int i)
 4277|      0|{
 4278|      0|    unsigned char uc;
 4279|      0|    unsigned int *p;
 4280|      0|    struct quoting_options *tmp;
 4281|      0|    int shift;
 4282|      0|    int r;
 4283|       |
 4284|      0|    {
 4285|      0|        uc = (unsigned char)c;
 4286|      0|        if (o) {
 4287|      0|            tmp = o;
 4288|      0|        }
 4289|      0|        else {
 4290|      0|            tmp = &default_quoting_options;
 4291|      0|        }
 4292|      0|        p = tmp->quote_these_too + (unsigned long)uc / (sizeof(int) * 8UL);
 4293|      0|        shift = (int)((unsigned long)uc % (sizeof(int) * 8UL));
 4294|      0|        r = (int)((*p >> shift) & 1U);
 4295|      0|        *p ^= (unsigned int)(((i & 1) ^ r) << shift);
 4296|      0|        return (r);
 4297|      0|    }
 4298|      0|}
 4299|       |static struct quoting_options
 4300|       |quoting_options_from_style(enum quoting_style style)
 4301|      0|{
 4302|      0|    struct quoting_options o;
 4303|      0|    unsigned int tmp;
 4304|      0|    void *__cil_tmp4;
 4305|       |
 4306|      0|    {
 4307|      0|        o.style = (enum quoting_style)0;
 4308|      0|        o.flags = 0;
 4309|      0|        o.quote_these_too[0] = 0U;
 4310|      0|        tmp = 1U;
 4311|      0|        {
 4312|      0|            while (1) {
 4313|      0|while_continue: /* CIL Label */
 4314|      0|                ;
 4315|      0|                if (!(!(tmp >= 8U))) {
 4316|      0|                    goto while_break;
 4317|      0|                }
 4318|      0|                o.quote_these_too[tmp] = 0U;
 4319|      0|                tmp++;
 4320|      0|            }
 4321|      0|while_break: /* CIL Label */
 4322|      0|            ;
 4323|      0|        }
 4324|      0|        o.left_quote = (char const *)((void *)0);
 4325|      0|        o.right_quote = (char const *)((void *)0);
 4326|      0|        if ((unsigned int)style == 8U) {
 4327|      0|            {
 4328|      0|                abort();
 4329|      0|            }
 4330|      0|        }
 4331|      0|        o.style = style;
 4332|      0|        return (o);
 4333|      0|    }
 4334|      0|}
 4335|       |static char const *gettext_quote(char const *msgid, enum quoting_style s)
 4336|      0|{
 4337|      0|    char const *translation;
 4338|      0|    char const *tmp;
 4339|      0|    char const *locale_code;
 4340|      0|    char const *tmp___0;
 4341|      0|    int tmp___1;
 4342|      0|    char const *tmp___2;
 4343|      0|    int tmp___3;
 4344|      0|    char const *tmp___4;
 4345|      0|    char *__cil_tmp12;
 4346|      0|    char *__cil_tmp13;
 4347|      0|    char *__cil_tmp14;
 4348|      0|    char *__cil_tmp15;
 4349|      0|    char *__cil_tmp16;
 4350|      0|    char *__cil_tmp17;
 4351|      0|    char *__cil_tmp18;
 4352|      0|    char *__cil_tmp19;
 4353|       |
 4354|      0|    {
 4355|      0|        {
 4356|      0|            tmp = (char const *)gettext(msgid);
 4357|      0|            translation = tmp;
 4358|      0|        }
 4359|      0|        if ((unsigned long)translation != (unsigned long)msgid) {
 4360|      0|            return (translation);
 4361|      0|        }
 4362|      0|        {
 4363|      0|            locale_code = locale_charset();
 4364|      0|            tmp___1 = c_strcasecmp(locale_code, "UTF-8");
 4365|      0|        }
 4366|      0|        if (tmp___1 == 0) {
 4367|      0|            if ((int const) * (msgid + 0) == 96) {
 4368|      0|                tmp___0 = "\342\200\230";
 4369|      0|            }
 4370|      0|            else {
 4371|      0|                tmp___0 = "\342\200\231";
 4372|      0|            }
 4373|      0|            return (tmp___0);
 4374|      0|        }
 4375|      0|        {
 4376|      0|            tmp___3 = c_strcasecmp(locale_code, "GB18030");
 4377|      0|        }
 4378|      0|        if (tmp___3 == 0) {
 4379|      0|            if ((int const) * (msgid + 0) == 96) {
 4380|      0|                tmp___2 = "\241\ae";
 4381|      0|            }
 4382|      0|            else {
 4383|      0|                tmp___2 = "\241\257";
 4384|      0|            }
 4385|      0|            return (tmp___2);
 4386|      0|        }
 4387|      0|        if ((unsigned int)s == 7U) {
 4388|      0|            tmp___4 = "\"";
 4389|      0|        }
 4390|      0|        else {
 4391|      0|            tmp___4 = "\'";
 4392|      0|        }
 4393|      0|        return (tmp___4);
 4394|      0|    }
 4395|      0|}
 4396|       |static size_t
 4397|       |quotearg_buffer_restyled(char *buffer, size_t buffersize, char const *arg,
 4398|       |                         size_t argsize, enum quoting_style quoting_style,
 4399|       |                         int flags, unsigned int const *quote_these_too,
 4400|       |                         char const *left_quote, char const *right_quote)
 4401|      0|{
 4402|      0|    size_t i;
 4403|      0|    size_t len;
 4404|      0|    char const *quote_string;
 4405|      0|    size_t quote_string_len;
 4406|      0|    _Bool backslash_escapes;
 4407|      0|    _Bool unibyte_locale;
 4408|      0|    size_t tmp;
 4409|      0|    _Bool elide_outer_quotes;
 4410|      0|    unsigned char c;
 4411|      0|    unsigned char esc;
 4412|      0|    _Bool is_right_quote;
 4413|      0|    int tmp___0;
 4414|      0|    int tmp___1;
 4415|      0|    size_t m;
 4416|      0|    _Bool printable;
 4417|      0|    unsigned short const **tmp___2;
 4418|      0|    mbstate_t mbstate;
 4419|      0|    wchar_t w;
 4420|      0|    size_t bytes;
 4421|      0|    size_t tmp___3;
 4422|      0|    size_t j;
 4423|      0|    int tmp___4;
 4424|      0|    int tmp___5;
 4425|      0|    size_t ilim;
 4426|      0|    int tmp___6;
 4427|      0|    size_t tmp___7;
 4428|      0|    void *__cil_tmp36;
 4429|      0|    char *__cil_tmp37;
 4430|      0|    char *__cil_tmp38;
 4431|      0|    char *__cil_tmp39;
 4432|      0|    char *__cil_tmp40;
 4433|       |
 4434|      0|    {
 4435|      0|        {
 4436|      0|            len = (size_t)0;
 4437|      0|            quote_string = (char const *)0;
 4438|      0|            quote_string_len = (size_t)0;
 4439|      0|            backslash_escapes = (_Bool)0;
 4440|      0|            tmp = __ctype_get_mb_cur_max();
 4441|      0|            unibyte_locale = (_Bool)(tmp == 1UL);
 4442|      0|            elide_outer_quotes = (_Bool)((flags & 2) != 0);
 4443|      0|        }
 4444|      0|        {
 4445|      0|            if ((unsigned int)quoting_style == 4U) {
 4446|      0|                goto case_4;
 4447|      0|            }
 4448|      0|            if ((unsigned int)quoting_style == 3U) {
 4449|      0|                goto case_3;
 4450|      0|            }
 4451|      0|            if ((unsigned int)quoting_style == 5U) {
 4452|      0|                goto case_5;
 4453|      0|            }
 4454|      0|            if ((unsigned int)quoting_style == 6U) {
 4455|      0|                goto case_6;
 4456|      0|            }
 4457|      0|            if ((unsigned int)quoting_style == 7U) {
 4458|      0|                goto case_6;
 4459|      0|            }
 4460|      0|            if ((unsigned int)quoting_style == 8U) {
 4461|      0|                goto case_6;
 4462|      0|            }
 4463|      0|            if ((unsigned int)quoting_style == 1U) {
 4464|      0|                goto case_1;
 4465|      0|            }
 4466|      0|            if ((unsigned int)quoting_style == 2U) {
 4467|      0|                goto case_2;
 4468|      0|            }
 4469|      0|            if ((unsigned int)quoting_style == 0U) {
 4470|      0|                goto case_0;
 4471|      0|            }
 4472|      0|            goto switch_default;
 4473|      0|case_4: /* CIL Label */
 4474|      0|            quoting_style = (enum quoting_style)3;
 4475|      0|            elide_outer_quotes = (_Bool)1;
 4476|      0|case_3: /* CIL Label */
 4477|      0|            if (!elide_outer_quotes) {
 4478|      0|                {
 4479|      0|                    while (1) {
 4480|      0|while_continue: /* CIL Label */
 4481|      0|                        ;
 4482|      0|                        if (len < buffersize) {
 4483|      0|                            *(buffer + len) = (char)'\"';
 4484|      0|                        }
 4485|      0|                        len++;
 4486|      0|                        goto while_break;
 4487|      0|                    }
 4488|      0|while_break: /* CIL Label */
 4489|      0|                    ;
 4490|      0|                }
 4491|      0|            }
 4492|      0|            backslash_escapes = (_Bool)1;
 4493|      0|            quote_string = "\"";
 4494|      0|            quote_string_len = (size_t)1;
 4495|      0|            goto switch_break;
 4496|      0|case_5: /* CIL Label */
 4497|      0|            backslash_escapes = (_Bool)1;
 4498|      0|            elide_outer_quotes = (_Bool)0;
 4499|      0|            goto switch_break;
 4500|      0|case_6: /* CIL Label */
 4501|      0|case_7: /* CIL Label */
 4502|      0|case_8: /* CIL Label */
 4503|      0|            if ((unsigned int)quoting_style != 8U) {
 4504|      0|                {
 4505|      0|                    left_quote = gettext_quote("`", quoting_style);
 4506|      0|                    right_quote = gettext_quote("\'", quoting_style);
 4507|      0|                }
 4508|      0|            }
 4509|      0|            if (!elide_outer_quotes) {
 4510|      0|                quote_string = left_quote;
 4511|      0|                {
 4512|      0|                    while (1) {
 4513|      0|while_continue___0: /* CIL Label */
 4514|      0|                        ;
 4515|      0|                        if (!*quote_string) {
 4516|      0|                            goto while_break___0;
 4517|      0|                        }
 4518|      0|                        {
 4519|      0|                            while (1) {
 4520|      0|while_continue___1: /* CIL Label */
 4521|      0|                                ;
 4522|      0|                                if (len < buffersize) {
 4523|      0|                                    *(buffer + len) = (char)*quote_string;
 4524|      0|                                }
 4525|      0|                                len++;
 4526|      0|                                goto while_break___1;
 4527|      0|                            }
 4528|      0|while_break___1: /* CIL Label */
 4529|      0|                            ;
 4530|      0|                        }
 4531|      0|                        quote_string++;
 4532|      0|                    }
 4533|      0|while_break___0: /* CIL Label */
 4534|      0|                    ;
 4535|      0|                }
 4536|      0|            }
 4537|      0|            {
 4538|      0|                backslash_escapes = (_Bool)1;
 4539|      0|                quote_string = right_quote;
 4540|      0|                quote_string_len = strlen(quote_string);
 4541|      0|            }
 4542|      0|            goto switch_break;
 4543|      0|case_1: /* CIL Label */
 4544|      0|            quoting_style = (enum quoting_style)2;
 4545|      0|            elide_outer_quotes = (_Bool)1;
 4546|      0|case_2: /* CIL Label */
 4547|      0|            if (!elide_outer_quotes) {
 4548|      0|                {
 4549|      0|                    while (1) {
 4550|      0|while_continue___2: /* CIL Label */
 4551|      0|                        ;
 4552|      0|                        if (len < buffersize) {
 4553|      0|                            *(buffer + len) = (char)'\'';
 4554|      0|                        }
 4555|      0|                        len++;
 4556|      0|                        goto while_break___2;
 4557|      0|                    }
 4558|      0|while_break___2: /* CIL Label */
 4559|      0|                    ;
 4560|      0|                }
 4561|      0|            }
 4562|      0|            quote_string = "\'";
 4563|      0|            quote_string_len = (size_t)1;
 4564|      0|            goto switch_break;
 4565|      0|case_0: /* CIL Label */
 4566|      0|            elide_outer_quotes = (_Bool)0;
 4567|      0|            goto switch_break;
 4568|      0|switch_default: { /* CIL Label */
 4569|      0|                abort();
 4570|      0|            }
 4571|      0|switch_break: /* CIL Label */
 4572|      0|            ;
 4573|      0|        }
 4574|      0|        i = (size_t)0;
 4575|      0|        {
 4576|      0|            while (1) {
 4577|      0|while_continue___3: /* CIL Label */
 4578|      0|                ;
 4579|      0|                if (argsize == 0xffffffffffffffffUL) {
 4580|      0|                    tmp___6 = (int const) * (arg + i) == 0;
 4581|      0|                }
 4582|      0|                else {
 4583|      0|                    tmp___6 = i == argsize;
 4584|      0|                }
 4585|      0|                if (tmp___6) {
 4586|      0|                    goto while_break___3;
 4587|      0|                }
 4588|      0|                is_right_quote = (_Bool)0;
 4589|      0|                if (backslash_escapes) {
 4590|      0|                    if (quote_string_len) {
 4591|      0|                        if (i + quote_string_len <= argsize) {
 4592|      0|                            {
 4593|      0|                                tmp___0 = memcmp((void const *)(arg + i),
 4594|      0|                                                 (void const *)quote_string, quote_string_len);
 4595|      0|                            }
 4596|      0|                            if (tmp___0 == 0) {
 4597|      0|                                if (elide_outer_quotes) {
 4598|      0|                                    goto force_outer_quoting_style;
 4599|      0|                                }
 4600|      0|                                is_right_quote = (_Bool)1;
 4601|      0|                            }
 4602|      0|                        }
 4603|      0|                    }
 4604|      0|                }
 4605|      0|                c = (unsigned char)*(arg + i);
 4606|      0|                {
 4607|      0|                    if ((int)c == 0) {
 4608|      0|                        goto case_0___0;
 4609|      0|                    }
 4610|      0|                    if ((int)c == 63) {
 4611|      0|                        goto case_63;
 4612|      0|                    }
 4613|      0|                    if ((int)c == 7) {
 4614|      0|                        goto case_7___0;
 4615|      0|                    }
 4616|      0|                    if ((int)c == 8) {
 4617|      0|                        goto case_8___0;
 4618|      0|                    }
 4619|      0|                    if ((int)c == 12) {
 4620|      0|                        goto case_12;
 4621|      0|                    }
 4622|      0|                    if ((int)c == 10) {
 4623|      0|                        goto case_10;
 4624|      0|                    }
 4625|      0|                    if ((int)c == 13) {
 4626|      0|                        goto case_13;
 4627|      0|                    }
 4628|      0|                    if ((int)c == 9) {
 4629|      0|                        goto case_9;
 4630|      0|                    }
 4631|      0|                    if ((int)c == 11) {
 4632|      0|                        goto case_11;
 4633|      0|                    }
 4634|      0|                    if ((int)c == 92) {
 4635|      0|                        goto case_92;
 4636|      0|                    }
 4637|      0|                    if ((int)c == 123) {
 4638|      0|                        goto case_123;
 4639|      0|                    }
 4640|      0|                    if ((int)c == 125) {
 4641|      0|                        goto case_123;
 4642|      0|                    }
 4643|      0|                    if ((int)c == 35) {
 4644|      0|                        goto case_35;
 4645|      0|                    }
 4646|      0|                    if ((int)c == 126) {
 4647|      0|                        goto case_35;
 4648|      0|                    }
 4649|      0|                    if ((int)c == 32) {
 4650|      0|                        goto case_32;
 4651|      0|                    }
 4652|      0|                    if ((int)c == 33) {
 4653|      0|                        goto case_32;
 4654|      0|                    }
 4655|      0|                    if ((int)c == 34) {
 4656|      0|                        goto case_32;
 4657|      0|                    }
 4658|      0|                    if ((int)c == 36) {
 4659|      0|                        goto case_32;
 4660|      0|                    }
 4661|      0|                    if ((int)c == 38) {
 4662|      0|                        goto case_32;
 4663|      0|                    }
 4664|      0|                    if ((int)c == 40) {
 4665|      0|                        goto case_32;
 4666|      0|                    }
 4667|      0|                    if ((int)c == 41) {
 4668|      0|                        goto case_32;
 4669|      0|                    }
 4670|      0|                    if ((int)c == 42) {
 4671|      0|                        goto case_32;
 4672|      0|                    }
 4673|      0|                    if ((int)c == 59) {
 4674|      0|                        goto case_32;
 4675|      0|                    }
 4676|      0|                    if ((int)c == 60) {
 4677|      0|                        goto case_32;
 4678|      0|                    }
 4679|      0|                    if ((int)c == 61) {
 4680|      0|                        goto case_32;
 4681|      0|                    }
 4682|      0|                    if ((int)c == 62) {
 4683|      0|                        goto case_32;
 4684|      0|                    }
 4685|      0|                    if ((int)c == 91) {
 4686|      0|                        goto case_32;
 4687|      0|                    }
 4688|      0|                    if ((int)c == 94) {
 4689|      0|                        goto case_32;
 4690|      0|                    }
 4691|      0|                    if ((int)c == 96) {
 4692|      0|                        goto case_32;
 4693|      0|                    }
 4694|      0|                    if ((int)c == 124) {
 4695|      0|                        goto case_32;
 4696|      0|                    }
 4697|      0|                    if ((int)c == 39) {
 4698|      0|                        goto case_39___0;
 4699|      0|                    }
 4700|      0|                    if ((int)c == 37) {
 4701|      0|                        goto case_37;
 4702|      0|                    }
 4703|      0|                    if ((int)c == 43) {
 4704|      0|                        goto case_37;
 4705|      0|                    }
 4706|      0|                    if ((int)c == 44) {
 4707|      0|                        goto case_37;
 4708|      0|                    }
 4709|      0|                    if ((int)c == 45) {
 4710|      0|                        goto case_37;
 4711|      0|                    }
 4712|      0|                    if ((int)c == 46) {
 4713|      0|                        goto case_37;
 4714|      0|                    }
 4715|      0|                    if ((int)c == 47) {
 4716|      0|                        goto case_37;
 4717|      0|                    }
 4718|      0|                    if ((int)c == 48) {
 4719|      0|                        goto case_37;
 4720|      0|                    }
 4721|      0|                    if ((int)c == 49) {
 4722|      0|                        goto case_37;
 4723|      0|                    }
 4724|      0|                    if ((int)c == 50) {
 4725|      0|                        goto case_37;
 4726|      0|                    }
 4727|      0|                    if ((int)c == 51) {
 4728|      0|                        goto case_37;
 4729|      0|                    }
 4730|      0|                    if ((int)c == 52) {
 4731|      0|                        goto case_37;
 4732|      0|                    }
 4733|      0|                    if ((int)c == 53) {
 4734|      0|                        goto case_37;
 4735|      0|                    }
 4736|      0|                    if ((int)c == 54) {
 4737|      0|                        goto case_37;
 4738|      0|                    }
 4739|      0|                    if ((int)c == 55) {
 4740|      0|                        goto case_37;
 4741|      0|                    }
 4742|      0|                    if ((int)c == 56) {
 4743|      0|                        goto case_37;
 4744|      0|                    }
 4745|      0|                    if ((int)c == 57) {
 4746|      0|                        goto case_37;
 4747|      0|                    }
 4748|      0|                    if ((int)c == 58) {
 4749|      0|                        goto case_37;
 4750|      0|                    }
 4751|      0|                    if ((int)c == 65) {
 4752|      0|                        goto case_37;
 4753|      0|                    }
 4754|      0|                    if ((int)c == 66) {
 4755|      0|                        goto case_37;
 4756|      0|                    }
 4757|      0|                    if ((int)c == 67) {
 4758|      0|                        goto case_37;
 4759|      0|                    }
 4760|      0|                    if ((int)c == 68) {
 4761|      0|                        goto case_37;
 4762|      0|                    }
 4763|      0|                    if ((int)c == 69) {
 4764|      0|                        goto case_37;
 4765|      0|                    }
 4766|      0|                    if ((int)c == 70) {
 4767|      0|                        goto case_37;
 4768|      0|                    }
 4769|      0|                    if ((int)c == 71) {
 4770|      0|                        goto case_37;
 4771|      0|                    }
 4772|      0|                    if ((int)c == 72) {
 4773|      0|                        goto case_37;
 4774|      0|                    }
 4775|      0|                    if ((int)c == 73) {
 4776|      0|                        goto case_37;
 4777|      0|                    }
 4778|      0|                    if ((int)c == 74) {
 4779|      0|                        goto case_37;
 4780|      0|                    }
 4781|      0|                    if ((int)c == 75) {
 4782|      0|                        goto case_37;
 4783|      0|                    }
 4784|      0|                    if ((int)c == 76) {
 4785|      0|                        goto case_37;
 4786|      0|                    }
 4787|      0|                    if ((int)c == 77) {
 4788|      0|                        goto case_37;
 4789|      0|                    }
 4790|      0|                    if ((int)c == 78) {
 4791|      0|                        goto case_37;
 4792|      0|                    }
 4793|      0|                    if ((int)c == 79) {
 4794|      0|                        goto case_37;
 4795|      0|                    }
 4796|      0|                    if ((int)c == 80) {
 4797|      0|                        goto case_37;
 4798|      0|                    }
 4799|      0|                    if ((int)c == 81) {
 4800|      0|                        goto case_37;
 4801|      0|                    }
 4802|      0|                    if ((int)c == 82) {
 4803|      0|                        goto case_37;
 4804|      0|                    }
 4805|      0|                    if ((int)c == 83) {
 4806|      0|                        goto case_37;
 4807|      0|                    }
 4808|      0|                    if ((int)c == 84) {
 4809|      0|                        goto case_37;
 4810|      0|                    }
 4811|      0|                    if ((int)c == 85) {
 4812|      0|                        goto case_37;
 4813|      0|                    }
 4814|      0|                    if ((int)c == 86) {
 4815|      0|                        goto case_37;
 4816|      0|                    }
 4817|      0|                    if ((int)c == 87) {
 4818|      0|                        goto case_37;
 4819|      0|                    }
 4820|      0|                    if ((int)c == 88) {
 4821|      0|                        goto case_37;
 4822|      0|                    }
 4823|      0|                    if ((int)c == 89) {
 4824|      0|                        goto case_37;
 4825|      0|                    }
 4826|      0|                    if ((int)c == 90) {
 4827|      0|                        goto case_37;
 4828|      0|                    }
 4829|      0|                    if ((int)c == 93) {
 4830|      0|                        goto case_37;
 4831|      0|                    }
 4832|      0|                    if ((int)c == 95) {
 4833|      0|                        goto case_37;
 4834|      0|                    }
 4835|      0|                    if ((int)c == 97) {
 4836|      0|                        goto case_37;
 4837|      0|                    }
 4838|      0|                    if ((int)c == 98) {
 4839|      0|                        goto case_37;
 4840|      0|                    }
 4841|      0|                    if ((int)c == 99) {
 4842|      0|                        goto case_37;
 4843|      0|                    }
 4844|      0|                    if ((int)c == 100) {
 4845|      0|                        goto case_37;
 4846|      0|                    }
 4847|      0|                    if ((int)c == 101) {
 4848|      0|                        goto case_37;
 4849|      0|                    }
 4850|      0|                    if ((int)c == 102) {
 4851|      0|                        goto case_37;
 4852|      0|                    }
 4853|      0|                    if ((int)c == 103) {
 4854|      0|                        goto case_37;
 4855|      0|                    }
 4856|      0|                    if ((int)c == 104) {
 4857|      0|                        goto case_37;
 4858|      0|                    }
 4859|      0|                    if ((int)c == 105) {
 4860|      0|                        goto case_37;
 4861|      0|                    }
 4862|      0|                    if ((int)c == 106) {
 4863|      0|                        goto case_37;
 4864|      0|                    }
 4865|      0|                    if ((int)c == 107) {
 4866|      0|                        goto case_37;
 4867|      0|                    }
 4868|      0|                    if ((int)c == 108) {
 4869|      0|                        goto case_37;
 4870|      0|                    }
 4871|      0|                    if ((int)c == 109) {
 4872|      0|                        goto case_37;
 4873|      0|                    }
 4874|      0|                    if ((int)c == 110) {
 4875|      0|                        goto case_37;
 4876|      0|                    }
 4877|      0|                    if ((int)c == 111) {
 4878|      0|                        goto case_37;
 4879|      0|                    }
 4880|      0|                    if ((int)c == 112) {
 4881|      0|                        goto case_37;
 4882|      0|                    }
 4883|      0|                    if ((int)c == 113) {
 4884|      0|                        goto case_37;
 4885|      0|                    }
 4886|      0|                    if ((int)c == 114) {
 4887|      0|                        goto case_37;
 4888|      0|                    }
 4889|      0|                    if ((int)c == 115) {
 4890|      0|                        goto case_37;
 4891|      0|                    }
 4892|      0|                    if ((int)c == 116) {
 4893|      0|                        goto case_37;
 4894|      0|                    }
 4895|      0|                    if ((int)c == 117) {
 4896|      0|                        goto case_37;
 4897|      0|                    }
 4898|      0|                    if ((int)c == 118) {
 4899|      0|                        goto case_37;
 4900|      0|                    }
 4901|      0|                    if ((int)c == 119) {
 4902|      0|                        goto case_37;
 4903|      0|                    }
 4904|      0|                    if ((int)c == 120) {
 4905|      0|                        goto case_37;
 4906|      0|                    }
 4907|      0|                    if ((int)c == 121) {
 4908|      0|                        goto case_37;
 4909|      0|                    }
 4910|      0|                    if ((int)c == 122) {
 4911|      0|                        goto case_37;
 4912|      0|                    }
 4913|      0|                    goto switch_default___2;
 4914|      0|case_0___0: /* CIL Label */
 4915|      0|                    if (backslash_escapes) {
 4916|      0|                        if (elide_outer_quotes) {
 4917|      0|                            goto force_outer_quoting_style;
 4918|      0|                        }
 4919|      0|                        {
 4920|      0|                            while (1) {
 4921|      0|while_continue___4: /* CIL Label */
 4922|      0|                                ;
 4923|      0|                                if (len < buffersize) {
 4924|      0|                                    *(buffer + len) = (char)'\\';
 4925|      0|                                }
 4926|      0|                                len++;
 4927|      0|                                goto while_break___4;
 4928|      0|                            }
 4929|      0|while_break___4: /* CIL Label */
 4930|      0|                            ;
 4931|      0|                        }
 4932|      0|                        if (i + 1UL < argsize) {
 4933|      0|                            if (48 <= (int)*(arg + (i + 1UL))) {
 4934|      0|                                if ((int const) * (arg + (i + 1UL)) <= 57) {
 4935|      0|                                    {
 4936|      0|                                        while (1) {
 4937|      0|while_continue___5: /* CIL Label */
 4938|      0|                                            ;
 4939|      0|                                            if (len < buffersize) {
 4940|      0|                                                *(buffer + len) = (char)'0';
 4941|      0|                                            }
 4942|      0|                                            len++;
 4943|      0|                                            goto while_break___5;
 4944|      0|                                        }
 4945|      0|while_break___5: /* CIL Label */
 4946|      0|                                        ;
 4947|      0|                                    }
 4948|      0|                                    {
 4949|      0|                                        while (1) {
 4950|      0|while_continue___6: /* CIL Label */
 4951|      0|                                            ;
 4952|      0|                                            if (len < buffersize) {
 4953|      0|                                                *(buffer + len) = (char)'0';
 4954|      0|                                            }
 4955|      0|                                            len++;
 4956|      0|                                            goto while_break___6;
 4957|      0|                                        }
 4958|      0|while_break___6: /* CIL Label */
 4959|      0|                                        ;
 4960|      0|                                    }
 4961|      0|                                }
 4962|      0|                            }
 4963|      0|                        }
 4964|      0|                        c = (unsigned char)'0';
 4965|      0|                    }
 4966|      0|                    else {
 4967|      0|                        if (flags & 1) {
 4968|      0|                            goto __Cont;
 4969|      0|                        }
 4970|      0|                    }
 4971|      0|                    goto switch_break___0;
 4972|      0|case_63: { /* CIL Label */
 4973|      0|                        if ((unsigned int)quoting_style == 2U) {
 4974|      0|                            goto case_2___0;
 4975|      0|                        }
 4976|      0|                        if ((unsigned int)quoting_style == 3U) {
 4977|      0|                            goto case_3___0;
 4978|      0|                        }
 4979|      0|                        goto switch_default___1;
 4980|      0|case_2___0: /* CIL Label */
 4981|      0|                        if (elide_outer_quotes) {
 4982|      0|                            goto force_outer_quoting_style;
 4983|      0|                        }
 4984|      0|                        goto switch_break___1;
 4985|      0|case_3___0: /* CIL Label */
 4986|      0|                        if (flags & 4) {
 4987|      0|                            if (i + 2UL < argsize) {
 4988|      0|                                if ((int const) * (arg + (i + 1UL)) == 63) {
 4989|      0|                                    {
 4990|      0|                                        if ((int const) * (arg + (i + 2UL)) == 33) {
 4991|      0|                                            goto case_33;
 4992|      0|                                        }
 4993|      0|                                        if ((int const) * (arg + (i + 2UL)) == 39) {
 4994|      0|                                            goto case_33;
 4995|      0|                                        }
 4996|      0|                                        if ((int const) * (arg + (i + 2UL)) == 40) {
 4997|      0|                                            goto case_33;
 4998|      0|                                        }
 4999|      0|                                        if ((int const) * (arg + (i + 2UL)) == 41) {
 5000|      0|                                            goto case_33;
 5001|      0|                                        }
 5002|      0|                                        if ((int const) * (arg + (i + 2UL)) == 45) {
 5003|      0|                                            goto case_33;
 5004|      0|                                        }
 5005|      0|                                        if ((int const) * (arg + (i + 2UL)) == 47) {
 5006|      0|                                            goto case_33;
 5007|      0|                                        }
 5008|      0|                                        if ((int const) * (arg + (i + 2UL)) == 60) {
 5009|      0|                                            goto case_33;
 5010|      0|                                        }
 5011|      0|                                        if ((int const) * (arg + (i + 2UL)) == 61) {
 5012|      0|                                            goto case_33;
 5013|      0|                                        }
 5014|      0|                                        if ((int const) * (arg + (i + 2UL)) == 62) {
 5015|      0|                                            goto case_33;
 5016|      0|                                        }
 5017|      0|                                        goto switch_default___0;
 5018|      0|case_33: /* CIL Label */
 5019|      0|case_39: /* CIL Label */
 5020|      0|case_40: /* CIL Label */
 5021|      0|case_41: /* CIL Label */
 5022|      0|case_45: /* CIL Label */
 5023|      0|case_47: /* CIL Label */
 5024|      0|case_60: /* CIL Label */
 5025|      0|case_61: /* CIL Label */
 5026|      0|case_62: /* CIL Label */
 5027|      0|                                        if (elide_outer_quotes) {
 5028|      0|                                            goto force_outer_quoting_style;
 5029|      0|                                        }
 5030|      0|                                        c = (unsigned char)*(arg + (i + 2UL));
 5031|      0|                                        i += 2UL;
 5032|      0|                                        {
 5033|      0|                                            while (1) {
 5034|      0|while_continue___7: /* CIL Label */
 5035|      0|                                                ;
 5036|      0|                                                if (len < buffersize) {
 5037|      0|                                                    *(buffer + len) = (char)'?';
 5038|      0|                                                }
 5039|      0|                                                len++;
 5040|      0|                                                goto while_break___7;
 5041|      0|                                            }
 5042|      0|while_break___7: /* CIL Label */
 5043|      0|                                            ;
 5044|      0|                                        }
 5045|      0|                                        {
 5046|      0|                                            while (1) {
 5047|      0|while_continue___8: /* CIL Label */
 5048|      0|                                                ;
 5049|      0|                                                if (len < buffersize) {
 5050|      0|                                                    *(buffer + len) = (char)'\"';
 5051|      0|                                                }
 5052|      0|                                                len++;
 5053|      0|                                                goto while_break___8;
 5054|      0|                                            }
 5055|      0|while_break___8: /* CIL Label */
 5056|      0|                                            ;
 5057|      0|                                        }
 5058|      0|                                        {
 5059|      0|                                            while (1) {
 5060|      0|while_continue___9: /* CIL Label */
 5061|      0|                                                ;
 5062|      0|                                                if (len < buffersize) {
 5063|      0|                                                    *(buffer + len) = (char)'\"';
 5064|      0|                                                }
 5065|      0|                                                len++;
 5066|      0|                                                goto while_break___9;
 5067|      0|                                            }
 5068|      0|while_break___9: /* CIL Label */
 5069|      0|                                            ;
 5070|      0|                                        }
 5071|      0|                                        {
 5072|      0|                                            while (1) {
 5073|      0|while_continue___10: /* CIL Label */
 5074|      0|                                                ;
 5075|      0|                                                if (len < buffersize) {
 5076|      0|                                                    *(buffer + len) = (char)'?';
 5077|      0|                                                }
 5078|      0|                                                len++;
 5079|      0|                                                goto while_break___10;
 5080|      0|                                            }
 5081|      0|while_break___10: /* CIL Label */
 5082|      0|                                            ;
 5083|      0|                                        }
 5084|      0|                                        goto switch_break___2;
 5085|      0|switch_default___0: /* CIL Label */
 5086|      0|                                        goto switch_break___2;
 5087|      0|switch_break___2: /* CIL Label */
 5088|      0|                                        ;
 5089|      0|                                    }
 5090|      0|                                }
 5091|      0|                            }
 5092|      0|                        }
 5093|      0|                        goto switch_break___1;
 5094|      0|switch_default___1: /* CIL Label */
 5095|      0|                        goto switch_break___1;
 5096|      0|switch_break___1: /* CIL Label */
 5097|      0|                        ;
 5098|      0|                    }
 5099|      0|                    goto switch_break___0;
 5100|      0|case_7___0: /* CIL Label */
 5101|      0|                    esc = (unsigned char)'a';
 5102|      0|                    goto c_escape;
 5103|      0|case_8___0: /* CIL Label */
 5104|      0|                    esc = (unsigned char)'b';
 5105|      0|                    goto c_escape;
 5106|      0|case_12: /* CIL Label */
 5107|      0|                    esc = (unsigned char)'f';
 5108|      0|                    goto c_escape;
 5109|      0|case_10: /* CIL Label */
 5110|      0|                    esc = (unsigned char)'n';
 5111|      0|                    goto c_and_shell_escape;
 5112|      0|case_13: /* CIL Label */
 5113|      0|                    esc = (unsigned char)'r';
 5114|      0|                    goto c_and_shell_escape;
 5115|      0|case_9: /* CIL Label */
 5116|      0|                    esc = (unsigned char)'t';
 5117|      0|                    goto c_and_shell_escape;
 5118|      0|case_11: /* CIL Label */
 5119|      0|                    esc = (unsigned char)'v';
 5120|      0|                    goto c_escape;
 5121|      0|case_92: /* CIL Label */
 5122|      0|                    esc = c;
 5123|      0|                    if (backslash_escapes) {
 5124|      0|                        if (elide_outer_quotes) {
 5125|      0|                            if (quote_string_len) {
 5126|      0|                                goto store_c;
 5127|      0|                            }
 5128|      0|                        }
 5129|      0|                    }
 5130|      0|c_and_shell_escape:
 5131|      0|                    if ((unsigned int)quoting_style == 2U) {
 5132|      0|                        if (elide_outer_quotes) {
 5133|      0|                            goto force_outer_quoting_style;
 5134|      0|                        }
 5135|      0|                    }
 5136|      0|c_escape:
 5137|      0|                    if (backslash_escapes) {
 5138|      0|                        c = esc;
 5139|      0|                        goto store_escape;
 5140|      0|                    }
 5141|      0|                    goto switch_break___0;
 5142|      0|case_123: /* CIL Label */
 5143|      0|case_125: /* CIL Label */
 5144|      0|                    if (argsize == 0xffffffffffffffffUL) {
 5145|      0|                        tmp___1 = (int const) * (arg + 1) == 0;
 5146|      0|                    }
 5147|      0|                    else {
 5148|      0|                        tmp___1 = argsize == 1UL;
 5149|      0|                    }
 5150|      0|                    if (!tmp___1) {
 5151|      0|                        goto switch_break___0;
 5152|      0|                    }
 5153|      0|case_35:  /* CIL Label */
 5154|      0|case_126: /* CIL Label */
 5155|      0|                    if (i != 0UL) {
 5156|      0|                        goto switch_break___0;
 5157|      0|                    }
 5158|      0|case_32:     /* CIL Label */
 5159|      0|case_33___0: /* CIL Label */
 5160|      0|case_34:     /* CIL Label */
 5161|      0|case_36:     /* CIL Label */
 5162|      0|case_38:     /* CIL Label */
 5163|      0|case_40___0: /* CIL Label */
 5164|      0|case_41___0: /* CIL Label */
 5165|      0|case_42:     /* CIL Label */
 5166|      0|case_59:     /* CIL Label */
 5167|      0|case_60___0: /* CIL Label */
 5168|      0|case_61___0: /* CIL Label */
 5169|      0|case_62___0: /* CIL Label */
 5170|      0|case_91:     /* CIL Label */
 5171|      0|case_94:     /* CIL Label */
 5172|      0|case_96:     /* CIL Label */
 5173|      0|case_124:    /* CIL Label */
 5174|      0|                    if ((unsigned int)quoting_style == 2U) {
 5175|      0|                        if (elide_outer_quotes) {
 5176|      0|                            goto force_outer_quoting_style;
 5177|      0|                        }
 5178|      0|                    }
 5179|      0|                    goto switch_break___0;
 5180|      0|case_39___0: /* CIL Label */
 5181|      0|                    if ((unsigned int)quoting_style == 2U) {
 5182|      0|                        if (elide_outer_quotes) {
 5183|      0|                            goto force_outer_quoting_style;
 5184|      0|                        }
 5185|      0|                        {
 5186|      0|                            while (1) {
 5187|      0|while_continue___11: /* CIL Label */
 5188|      0|                                ;
 5189|      0|                                if (len < buffersize) {
 5190|      0|                                    *(buffer + len) = (char)'\'';
 5191|      0|                                }
 5192|      0|                                len++;
 5193|      0|                                goto while_break___11;
 5194|      0|                            }
 5195|      0|while_break___11: /* CIL Label */
 5196|      0|                            ;
 5197|      0|                        }
 5198|      0|                        {
 5199|      0|                            while (1) {
 5200|      0|while_continue___12: /* CIL Label */
 5201|      0|                                ;
 5202|      0|                                if (len < buffersize) {
 5203|      0|                                    *(buffer + len) = (char)'\\';
 5204|      0|                                }
 5205|      0|                                len++;
 5206|      0|                                goto while_break___12;
 5207|      0|                            }
 5208|      0|while_break___12: /* CIL Label */
 5209|      0|                            ;
 5210|      0|                        }
 5211|      0|                        {
 5212|      0|                            while (1) {
 5213|      0|while_continue___13: /* CIL Label */
 5214|      0|                                ;
 5215|      0|                                if (len < buffersize) {
 5216|      0|                                    *(buffer + len) = (char)'\'';
 5217|      0|                                }
 5218|      0|                                len++;
 5219|      0|                                goto while_break___13;
 5220|      0|                            }
 5221|      0|while_break___13: /* CIL Label */
 5222|      0|                            ;
 5223|      0|                        }
 5224|      0|                    }
 5225|      0|                    goto switch_break___0;
 5226|      0|case_37:     /* CIL Label */
 5227|      0|case_43:     /* CIL Label */
 5228|      0|case_44:     /* CIL Label */
 5229|      0|case_45___0: /* CIL Label */
 5230|      0|case_46:     /* CIL Label */
 5231|      0|case_47___0: /* CIL Label */
 5232|      0|case_48:     /* CIL Label */
 5233|      0|case_49:     /* CIL Label */
 5234|      0|case_50:     /* CIL Label */
 5235|      0|case_51:     /* CIL Label */
 5236|      0|case_52:     /* CIL Label */
 5237|      0|case_53:     /* CIL Label */
 5238|      0|case_54:     /* CIL Label */
 5239|      0|case_55:     /* CIL Label */
 5240|      0|case_56:     /* CIL Label */
 5241|      0|case_57:     /* CIL Label */
 5242|      0|case_58:     /* CIL Label */
 5243|      0|case_65:     /* CIL Label */
 5244|      0|case_66:     /* CIL Label */
 5245|      0|case_67:     /* CIL Label */
 5246|      0|case_68:     /* CIL Label */
 5247|      0|case_69:     /* CIL Label */
 5248|      0|case_70:     /* CIL Label */
 5249|      0|case_71:     /* CIL Label */
 5250|      0|case_72:     /* CIL Label */
 5251|      0|case_73:     /* CIL Label */
 5252|      0|case_74:     /* CIL Label */
 5253|      0|case_75:     /* CIL Label */
 5254|      0|case_76:     /* CIL Label */
 5255|      0|case_77:     /* CIL Label */
 5256|      0|case_78:     /* CIL Label */
 5257|      0|case_79:     /* CIL Label */
 5258|      0|case_80:     /* CIL Label */
 5259|      0|case_81:     /* CIL Label */
 5260|      0|case_82:     /* CIL Label */
 5261|      0|case_83:     /* CIL Label */
 5262|      0|case_84:     /* CIL Label */
 5263|      0|case_85:     /* CIL Label */
 5264|      0|case_86:     /* CIL Label */
 5265|      0|case_87:     /* CIL Label */
 5266|      0|case_88:     /* CIL Label */
 5267|      0|case_89:     /* CIL Label */
 5268|      0|case_90:     /* CIL Label */
 5269|      0|case_93:     /* CIL Label */
 5270|      0|case_95:     /* CIL Label */
 5271|      0|case_97:     /* CIL Label */
 5272|      0|case_98:     /* CIL Label */
 5273|      0|case_99:     /* CIL Label */
 5274|      0|case_100:    /* CIL Label */
 5275|      0|case_101:    /* CIL Label */
 5276|      0|case_102:    /* CIL Label */
 5277|      0|case_103:    /* CIL Label */
 5278|      0|case_104:    /* CIL Label */
 5279|      0|case_105:    /* CIL Label */
 5280|      0|case_106:    /* CIL Label */
 5281|      0|case_107:    /* CIL Label */
 5282|      0|case_108:    /* CIL Label */
 5283|      0|case_109:    /* CIL Label */
 5284|      0|case_110:    /* CIL Label */
 5285|      0|case_111:    /* CIL Label */
 5286|      0|case_112:    /* CIL Label */
 5287|      0|case_113:    /* CIL Label */
 5288|      0|case_114:    /* CIL Label */
 5289|      0|case_115:    /* CIL Label */
 5290|      0|case_116:    /* CIL Label */
 5291|      0|case_117:    /* CIL Label */
 5292|      0|case_118:    /* CIL Label */
 5293|      0|case_119:    /* CIL Label */
 5294|      0|case_120:    /* CIL Label */
 5295|      0|case_121:    /* CIL Label */
 5296|      0|case_122:    /* CIL Label */
 5297|      0|                    goto switch_break___0;
 5298|      0|switch_default___2: /* CIL Label */
 5299|      0|                    if (unibyte_locale) {
 5300|      0|                        {
 5301|      0|                            m = (size_t)1;
 5302|      0|                            tmp___2 = __ctype_b_loc();
 5303|      0|                            printable =
 5304|      0|                                (_Bool)(((int const) * (*tmp___2 + (int)c) & 16384) != 0);
 5305|      0|                        }
 5306|      0|                    }
 5307|      0|                    else {
 5308|      0|                        {
 5309|      0|                            memset((void *)(&mbstate), 0, sizeof(mbstate));
 5310|      0|                            m = (size_t)0;
 5311|      0|                            printable = (_Bool)1;
 5312|      0|                        }
 5313|      0|                        if (argsize == 0xffffffffffffffffUL) {
 5314|      0|                            {
 5315|      0|                                argsize = strlen(arg);
 5316|      0|                            }
 5317|      0|                        }
 5318|      0|                        {
 5319|      0|                            while (1) {
 5320|      0|while_continue___14: /* CIL Label */
 5321|      0|                                ;
 5322|      0|                                {
 5323|      0|                                    tmp___3 =
 5324|      0|                                        mbrtowc((wchar_t * /* __restrict  */)(&w),
 5325|      0|                                                (char const * /* __restrict  */)(arg + (i + m)),
 5326|      0|                                                argsize - (i + m),
 5327|      0|                                                (mbstate_t * /* __restrict  */)(&mbstate));
 5328|      0|                                    bytes = tmp___3;
 5329|      0|                                }
 5330|      0|                                if (bytes == 0UL) {
 5331|      0|                                    goto while_break___14;
 5332|      0|                                }
 5333|      0|                                else {
 5334|      0|                                    if (bytes == 0xffffffffffffffffUL) {
 5335|      0|                                        printable = (_Bool)0;
 5336|      0|                                        goto while_break___14;
 5337|      0|                                    }
 5338|      0|                                    else {
 5339|      0|                                        if (bytes == 0xfffffffffffffffeUL) {
 5340|      0|                                            printable = (_Bool)0;
 5341|      0|                                            {
 5342|      0|                                                while (1) {
 5343|      0|while_continue___15: /* CIL Label */
 5344|      0|                                                    ;
 5345|      0|                                                    if (i + m < argsize) {
 5346|      0|                                                        if (!*(arg + (i + m))) {
 5347|      0|                                                            goto while_break___15;
 5348|      0|                                                        }
 5349|      0|                                                    }
 5350|      0|                                                    else {
 5351|      0|                                                        goto while_break___15;
 5352|      0|                                                    }
 5353|      0|                                                    m++;
 5354|      0|                                                }
 5355|      0|while_break___15: /* CIL Label */
 5356|      0|                                                ;
 5357|      0|                                            }
 5358|      0|                                            goto while_break___14;
 5359|      0|                                        }
 5360|      0|                                        else {
 5361|      0|                                            if (elide_outer_quotes) {
 5362|      0|                                                if ((unsigned int)quoting_style == 2U) {
 5363|      0|                                                    j = (size_t)1;
 5364|      0|                                                    {
 5365|      0|                                                        while (1) {
 5366|      0|while_continue___16: /* CIL Label */
 5367|      0|                                                            ;
 5368|      0|                                                            if (!(j < bytes)) {
 5369|      0|                                                                goto while_break___16;
 5370|      0|                                                            }
 5371|      0|                                                            {
 5372|      0|                                                                if ((int const) * (arg + ((i + m) + j)) == 91) {
 5373|      0|                                                                    goto case_91___0;
 5374|      0|                                                                }
 5375|      0|                                                                if ((int const) * (arg + ((i + m) + j)) == 92) {
 5376|      0|                                                                    goto case_91___0;
 5377|      0|                                                                }
 5378|      0|                                                                if ((int const) * (arg + ((i + m) + j)) == 94) {
 5379|      0|                                                                    goto case_91___0;
 5380|      0|                                                                }
 5381|      0|                                                                if ((int const) * (arg + ((i + m) + j)) == 96) {
 5382|      0|                                                                    goto case_91___0;
 5383|      0|                                                                }
 5384|      0|                                                                if ((int const) * (arg + ((i + m) + j)) ==
 5385|      0|                                                                        124) {
 5386|      0|                                                                    goto case_91___0;
 5387|      0|                                                                }
 5388|      0|                                                                goto switch_default___3;
 5389|      0|case_91___0:  /* CIL Label */
 5390|      0|case_92___0:  /* CIL Label */
 5391|      0|case_94___0:  /* CIL Label */
 5392|      0|case_96___0:  /* CIL Label */
 5393|      0|case_124___0: /* CIL Label */
 5394|      0|                                                                goto force_outer_quoting_style;
 5395|      0|switch_default___3: /* CIL Label */
 5396|      0|                                                                goto switch_break___3;
 5397|      0|switch_break___3: /* CIL Label */
 5398|      0|                                                                ;
 5399|      0|                                                            }
 5400|      0|                                                            j++;
 5401|      0|                                                        }
 5402|      0|while_break___16: /* CIL Label */
 5403|      0|                                                        ;
 5404|      0|                                                    }
 5405|      0|                                                }
 5406|      0|                                            }
 5407|      0|                                            {
 5408|      0|                                                tmp___4 = iswprint((wint_t)w);
 5409|      0|                                            }
 5410|      0|                                            if (!tmp___4) {
 5411|      0|                                                printable = (_Bool)0;
 5412|      0|                                            }
 5413|      0|                                            m += bytes;
 5414|      0|                                        }
 5415|      0|                                    }
 5416|      0|                                }
 5417|      0|                                {
 5418|      0|                                    tmp___5 = mbsinit((mbstate_t const *)(&mbstate));
 5419|      0|                                }
 5420|      0|                                if (tmp___5) {
 5421|      0|                                    goto while_break___14;
 5422|      0|                                }
 5423|      0|                            }
 5424|      0|while_break___14: /* CIL Label */
 5425|      0|                            ;
 5426|      0|                        }
 5427|      0|                    }
 5428|      0|                    if (1UL < m) {
 5429|      0|                        goto _L___0;
 5430|      0|                    }
 5431|      0|                    else {
 5432|      0|                        if (backslash_escapes) {
 5433|      0|                            if (!printable) {
 5434|      0|_L___0:
 5435|      0|                                ilim = i + m;
 5436|      0|                                {
 5437|      0|                                    while (1) {
 5438|      0|while_continue___17: /* CIL Label */
 5439|      0|                                        ;
 5440|      0|                                        if (backslash_escapes) {
 5441|      0|                                            if (!printable) {
 5442|      0|                                                if (elide_outer_quotes) {
 5443|      0|                                                    goto force_outer_quoting_style;
 5444|      0|                                                }
 5445|      0|                                                {
 5446|      0|                                                    while (1) {
 5447|      0|while_continue___18: /* CIL Label */
 5448|      0|                                                        ;
 5449|      0|                                                        if (len < buffersize) {
 5450|      0|                                                            *(buffer + len) = (char)'\\';
 5451|      0|                                                        }
 5452|      0|                                                        len++;
 5453|      0|                                                        goto while_break___18;
 5454|      0|                                                    }
 5455|      0|while_break___18: /* CIL Label */
 5456|      0|                                                    ;
 5457|      0|                                                }
 5458|      0|                                                {
 5459|      0|                                                    while (1) {
 5460|      0|while_continue___19: /* CIL Label */
 5461|      0|                                                        ;
 5462|      0|                                                        if (len < buffersize) {
 5463|      0|                                                            *(buffer + len) = (char)(48 + ((int)c >> 6));
 5464|      0|                                                        }
 5465|      0|                                                        len++;
 5466|      0|                                                        goto while_break___19;
 5467|      0|                                                    }
 5468|      0|while_break___19: /* CIL Label */
 5469|      0|                                                    ;
 5470|      0|                                                }
 5471|      0|                                                {
 5472|      0|                                                    while (1) {
 5473|      0|while_continue___20: /* CIL Label */
 5474|      0|                                                        ;
 5475|      0|                                                        if (len < buffersize) {
 5476|      0|                                                            *(buffer + len) =
 5477|      0|                                                                (char)(48 + (((int)c >> 3) & 7));
 5478|      0|                                                        }
 5479|      0|                                                        len++;
 5480|      0|                                                        goto while_break___20;
 5481|      0|                                                    }
 5482|      0|while_break___20: /* CIL Label */
 5483|      0|                                                    ;
 5484|      0|                                                }
 5485|      0|                                                c = (unsigned char)(48 + ((int)c & 7));
 5486|      0|                                            }
 5487|      0|                                            else {
 5488|      0|                                                goto _L;
 5489|      0|                                            }
 5490|      0|                                        }
 5491|      0|                                        else {
 5492|      0|_L:
 5493|      0|                                            if (is_right_quote) {
 5494|      0|                                                {
 5495|      0|                                                    while (1) {
 5496|      0|while_continue___21: /* CIL Label */
 5497|      0|                                                        ;
 5498|      0|                                                        if (len < buffersize) {
 5499|      0|                                                            *(buffer + len) = (char)'\\';
 5500|      0|                                                        }
 5501|      0|                                                        len++;
 5502|      0|                                                        goto while_break___21;
 5503|      0|                                                    }
 5504|      0|while_break___21: /* CIL Label */
 5505|      0|                                                    ;
 5506|      0|                                                }
 5507|      0|                                                is_right_quote = (_Bool)0;
 5508|      0|                                            }
 5509|      0|                                        }
 5510|      0|                                        if (ilim <= i + 1UL) {
 5511|      0|                                            goto while_break___17;
 5512|      0|                                        }
 5513|      0|                                        {
 5514|      0|                                            while (1) {
 5515|      0|while_continue___22: /* CIL Label */
 5516|      0|                                                ;
 5517|      0|                                                if (len < buffersize) {
 5518|      0|                                                    *(buffer + len) = (char)c;
 5519|      0|                                                }
 5520|      0|                                                len++;
 5521|      0|                                                goto while_break___22;
 5522|      0|                                            }
 5523|      0|while_break___22: /* CIL Label */
 5524|      0|                                            ;
 5525|      0|                                        }
 5526|      0|                                        i++;
 5527|      0|                                        c = (unsigned char)*(arg + i);
 5528|      0|                                    }
 5529|      0|while_break___17: /* CIL Label */
 5530|      0|                                    ;
 5531|      0|                                }
 5532|      0|                                goto store_c;
 5533|      0|                            }
 5534|      0|                        }
 5535|      0|                    }
 5536|      0|switch_break___0: /* CIL Label */
 5537|      0|                    ;
 5538|      0|                }
 5539|      0|                if (backslash_escapes) {
 5540|      0|                    goto _L___3;
 5541|      0|                }
 5542|      0|                else {
 5543|      0|                    if (elide_outer_quotes) {
 5544|      0|_L___3:
 5545|      0|                        if (quote_these_too) {
 5546|      0|                            if (!(*(quote_these_too +
 5547|      0|                                    (unsigned long)c / (sizeof(int) * 8UL)) &
 5548|      0|                                    (unsigned int const)(1 << (unsigned long)c %
 5549|      0|                                                         (sizeof(int) * 8UL)))) {
 5550|      0|                                goto _L___2;
 5551|      0|                            }
 5552|      0|                        }
 5553|      0|                        else {
 5554|      0|                            goto _L___2;
 5555|      0|                        }
 5556|      0|                    }
 5557|      0|                    else {
 5558|      0|_L___2:
 5559|      0|                        if (!is_right_quote) {
 5560|      0|                            goto store_c;
 5561|      0|                        }
 5562|      0|                    }
 5563|      0|                }
 5564|      0|store_escape:
 5565|      0|                if (elide_outer_quotes) {
 5566|      0|                    goto force_outer_quoting_style;
 5567|      0|                }
 5568|      0|                {
 5569|      0|                    while (1) {
 5570|      0|while_continue___23: /* CIL Label */
 5571|      0|                        ;
 5572|      0|                        if (len < buffersize) {
 5573|      0|                            *(buffer + len) = (char)'\\';
 5574|      0|                        }
 5575|      0|                        len++;
 5576|      0|                        goto while_break___23;
 5577|      0|                    }
 5578|      0|while_break___23: /* CIL Label */
 5579|      0|                    ;
 5580|      0|                }
 5581|      0|store_c: {
 5582|      0|                    while (1) {
 5583|      0|while_continue___24: /* CIL Label */
 5584|      0|                        ;
 5585|      0|                        if (len < buffersize) {
 5586|      0|                            *(buffer + len) = (char)c;
 5587|      0|                        }
 5588|      0|                        len++;
 5589|      0|                        goto while_break___24;
 5590|      0|                    }
 5591|      0|while_break___24: /* CIL Label */
 5592|      0|                    ;
 5593|      0|                }
 5594|      0|__Cont:
 5595|      0|                i++;
 5596|      0|            }
 5597|      0|while_break___3: /* CIL Label */
 5598|      0|            ;
 5599|      0|        }
 5600|      0|        if (len == 0UL) {
 5601|      0|            if ((unsigned int)quoting_style == 2U) {
 5602|      0|                if (elide_outer_quotes) {
 5603|      0|                    goto force_outer_quoting_style;
 5604|      0|                }
 5605|      0|            }
 5606|      0|        }
 5607|      0|        if (quote_string) {
 5608|      0|            if (!elide_outer_quotes) {
 5609|      0|                {
 5610|      0|                    while (1) {
 5611|      0|while_continue___25: /* CIL Label */
 5612|      0|                        ;
 5613|      0|                        if (!*quote_string) {
 5614|      0|                            goto while_break___25;
 5615|      0|                        }
 5616|      0|                        {
 5617|      0|                            while (1) {
 5618|      0|while_continue___26: /* CIL Label */
 5619|      0|                                ;
 5620|      0|                                if (len < buffersize) {
 5621|      0|                                    *(buffer + len) = (char)*quote_string;
 5622|      0|                                }
 5623|      0|                                len++;
 5624|      0|                                goto while_break___26;
 5625|      0|                            }
 5626|      0|while_break___26: /* CIL Label */
 5627|      0|                            ;
 5628|      0|                        }
 5629|      0|                        quote_string++;
 5630|      0|                    }
 5631|      0|while_break___25: /* CIL Label */
 5632|      0|                    ;
 5633|      0|                }
 5634|      0|            }
 5635|      0|        }
 5636|      0|        if (len < buffersize) {
 5637|      0|            *(buffer + len) = (char)'\000';
 5638|      0|        }
 5639|      0|        return (len);
 5640|      0|force_outer_quoting_style: {
 5641|      0|            tmp___7 = quotearg_buffer_restyled(
 5642|      0|                          buffer, buffersize, arg, argsize, quoting_style, flags & -3,
 5643|      0|                          (unsigned int const *)((void *)0), left_quote, right_quote);
 5644|      0|        }
 5645|      0|        return (tmp___7);
 5646|      0|    }
 5647|      0|}
 5648|       |static char slot0[256];
 5649|       |static unsigned int nslots = 1U;
 5650|       |static struct slotvec slotvec0 = {sizeof(slot0), slot0};
 5651|       |static struct slotvec *slotvec = &slotvec0;
 5652|       |static char *quotearg_n_options(int n, char const *arg, size_t argsize,
 5653|       |                                struct quoting_options const *options)
 5654|      0|{
 5655|      0|    int e;
 5656|      0|    int *tmp;
 5657|      0|    unsigned int n0;
 5658|      0|    struct slotvec *sv;
 5659|      0|    size_t n1;
 5660|      0|    _Bool preallocated;
 5661|      0|    int tmp___0;
 5662|      0|    struct slotvec *tmp___1;
 5663|      0|    size_t size;
 5664|      0|    char *val;
 5665|      0|    int flags;
 5666|      0|    size_t qsize;
 5667|      0|    size_t tmp___2;
 5668|      0|    int *tmp___3;
 5669|       |
 5670|      0|    {
 5671|      0|        {
 5672|      0|            tmp = __errno_location();
 5673|      0|            e = *tmp;
 5674|      0|            n0 = (unsigned int)n;
 5675|      0|            sv = slotvec;
 5676|      0|        }
 5677|      0|        if (n < 0) {
 5678|      0|            {
 5679|      0|                abort();
 5680|      0|            }
 5681|      0|        }
 5682|      0|        if (nslots <= n0) {
 5683|      0|            n1 = (size_t)(n0 + 1U);
 5684|      0|            preallocated = (_Bool)((unsigned long)sv == (unsigned long)(&slotvec0));
 5685|      0|            if (sizeof(ptrdiff_t) <= sizeof(size_t)) {
 5686|      0|                tmp___0 = -1;
 5687|      0|            }
 5688|      0|            else {
 5689|      0|                tmp___0 = -2;
 5690|      0|            }
 5691|      0|            if ((size_t)tmp___0 / sizeof(*sv) < n1) {
 5692|      0|                {
 5693|      0|                    xalloc_die();
 5694|      0|                }
 5695|      0|            }
 5696|      0|            if (preallocated) {
 5697|      0|                tmp___1 = (struct slotvec *)((void *)0);
 5698|      0|            }
 5699|      0|            else {
 5700|      0|                tmp___1 = sv;
 5701|      0|            }
 5702|      0|            {
 5703|      0|                sv = (struct slotvec *)xrealloc((void *)tmp___1, n1 * sizeof(*sv));
 5704|      0|                slotvec = sv;
 5705|      0|            }
 5706|      0|            if (preallocated) {
 5707|      0|                *sv = slotvec0;
 5708|      0|            }
 5709|      0|            {
 5710|      0|                memset((void *)(sv + nslots), 0, (n1 - (size_t)nslots) * sizeof(*sv));
 5711|      0|                nslots = (unsigned int)n1;
 5712|      0|            }
 5713|      0|        }
 5714|      0|        {
 5715|      0|            size = (sv + n)->size;
 5716|      0|            val = (sv + n)->val;
 5717|      0|            flags = (int)(options->flags | 1);
 5718|      0|            tmp___2 = quotearg_buffer_restyled(
 5719|      0|                          val, size, arg, argsize, (enum quoting_style)options->style, flags,
 5720|      0|                          (unsigned int const *)(options->quote_these_too),
 5721|      0|                          (char const *)options->left_quote,
 5722|      0|                          (char const *)options->right_quote);
 5723|      0|            qsize = tmp___2;
 5724|      0|        }
 5725|      0|        if (size <= qsize) {
 5726|      0|            size = qsize + 1UL;
 5727|      0|            (sv + n)->size = size;
 5728|      0|            if ((unsigned long)val != (unsigned long)(slot0)) {
 5729|      0|                {
 5730|      0|                    free((void *)val);
 5731|      0|                }
 5732|      0|            }
 5733|      0|            {
 5734|      0|                val = xcharalloc(size);
 5735|      0|                (sv + n)->val = val;
 5736|      0|                quotearg_buffer_restyled(
 5737|      0|                    val, size, arg, argsize, (enum quoting_style)options->style, flags,
 5738|      0|                    (unsigned int const *)(options->quote_these_too),
 5739|      0|                    (char const *)options->left_quote,
 5740|      0|                    (char const *)options->right_quote);
 5741|      0|            }
 5742|      0|        }
 5743|      0|        {
 5744|      0|            tmp___3 = __errno_location();
 5745|      0|            *tmp___3 = e;
 5746|      0|        }
 5747|      0|        return (val);
 5748|      0|    }
 5749|      0|}
 5750|       |char *quotearg_n_style(int n, enum quoting_style s, char const *arg)
 5751|      0|{
 5752|      0|    struct quoting_options o;
 5753|      0|    struct quoting_options tmp;
 5754|      0|    char *tmp___0;
 5755|      0|    void *__cil_tmp7;
 5756|      0|    void *__cil_tmp8;
 5757|       |
 5758|      0|    {
 5759|      0|        {
 5760|      0|            tmp = quoting_options_from_style(s);
 5761|      0|            o = tmp;
 5762|      0|            tmp___0 = quotearg_n_options(n, arg, (size_t)-1,
 5763|      0|                                         (struct quoting_options const *)(&o));
 5764|      0|        }
 5765|      0|        return (tmp___0);
 5766|      0|    }
 5767|      0|}
 5768|       |char *quotearg_n_style_mem(int n, enum quoting_style s, char const *arg,
 5769|       |                           size_t argsize)
 5770|      0|{
 5771|      0|    struct quoting_options o;
 5772|      0|    struct quoting_options tmp;
 5773|      0|    char *tmp___0;
 5774|      0|    void *__cil_tmp8;
 5775|      0|    void *__cil_tmp9;
 5776|       |
 5777|      0|    {
 5778|      0|        {
 5779|      0|            tmp = quoting_options_from_style(s);
 5780|      0|            o = tmp;
 5781|      0|            tmp___0 = quotearg_n_options(n, arg, argsize,
 5782|      0|                                         (struct quoting_options const *)(&o));
 5783|      0|        }
 5784|      0|        return (tmp___0);
 5785|      0|    }
 5786|      0|}
 5787|       |char *quotearg_char_mem(char const *arg, size_t argsize, char ch)
 5788|      0|{
 5789|      0|    struct quoting_options options;
 5790|      0|    char *tmp;
 5791|      0|    void *__cil_tmp6;
 5792|       |
 5793|      0|    {
 5794|      0|        {
 5795|      0|            options = default_quoting_options;
 5796|      0|            set_char_quoting(&options, ch, 1);
 5797|      0|            tmp = quotearg_n_options(0, arg, argsize,
 5798|      0|                                     (struct quoting_options const *)(&options));
 5799|      0|        }
 5800|      0|        return (tmp);
 5801|      0|    }
 5802|      0|}
 5803|       |char *quotearg_char(char const *arg, char ch)
 5804|      0|{
 5805|      0|    char *tmp;
 5806|       |
 5807|      0|    {
 5808|      0|        {
 5809|      0|            tmp = quotearg_char_mem(arg, (size_t)-1, ch);
 5810|      0|        }
 5811|      0|        return (tmp);
 5812|      0|    }
 5813|      0|}
 5814|       |char *quotearg_colon(char const *arg)
 5815|      0|{
 5816|      0|    char *tmp;
 5817|       |
 5818|      0|    {
 5819|      0|        {
 5820|      0|            tmp = quotearg_char(arg, (char)':');
 5821|      0|        }
 5822|      0|        return (tmp);
 5823|      0|    }
 5824|      0|}
 5825|       |struct quoting_options quote_quoting_options = {(enum quoting_style)6,
 5826|       |           0,
 5827|       |    {0U},
 5828|       |    (char const *)((void *)0),
 5829|       |    (char const *)((void *)0)
 5830|       |};
 5831|       |char const *quote_n(int n, char const *name)
 5832|      0|{
 5833|      0|    char const *tmp;
 5834|       |
 5835|      0|    {
 5836|      0|        {
 5837|      0|            tmp = (char const *)quotearg_n_options(
 5838|      0|                      n, name, (size_t)-1,
 5839|      0|                      (struct quoting_options const *)(&quote_quoting_options));
 5840|      0|        }
 5841|      0|        return (tmp);
 5842|      0|    }
 5843|      0|}
 5844|       |char const *quote(char const *name)
 5845|      0|{
 5846|      0|    char const *tmp;
 5847|       |
 5848|      0|    {
 5849|      0|        {
 5850|      0|            tmp = quote_n(0, name);
 5851|      0|        }
 5852|      0|        return (tmp);
 5853|      0|    }
 5854|      0|}
 5855|       |#pragma GCC diagnostic ignored "-Wsuggest-attribute=const"
 5856|       |extern __attribute__((__nothrow__)) int(__attribute__((__leaf__)) iswalnum)(
 5857|       |    wint_t __wc);
 5858|       |char const *program_name;
 5859|       |void set_program_name(char const *argv0);
 5860|       |extern char *program_invocation_name;
 5861|       |extern char *program_invocation_short_name;
 5862|       |extern int fputs(char const *__restrict __s, FILE *__restrict __stream);
 5863|       |extern __attribute__((__nothrow__)) char *(
 5864|       |    __attribute__((__nonnull__(1), __leaf__)) strrchr)(char const *__s, int __c)
 5865|       |__attribute__((__pure__));
 5866|       |char const *program_name = (char const *)((void *)0);
 5867|       |void set_program_name(char const *argv0)
 5868|      2|{
 5869|      2|    char const *slash;
 5870|      2|    char const *base;
 5871|      2|    int tmp;
 5872|      2|    int tmp___0;
 5873|       |
 5874|      2|    {
 5875|      2|        if ((unsigned long)argv0 == (unsigned long)((void *)0)) {
 5876|      0|            {
 5877|      0|                fputs((char const * /* __restrict  */) "A NULL argv[0] was passed "
 5878|      0|                      "through an exec system call.\n",
 5879|      0|                      (FILE * /* __restrict  */)stderr);
 5880|      0|                abort();
 5881|      0|            }
 5882|      0|        }
 5883|      2|        {
 5884|      2|            slash = (char const *)strrchr(argv0, '/');
 5885|      2|        }
 5886|      2|        if ((unsigned long)slash != (unsigned long)((void *)0)) {
 5887|      2|            base = slash + 1;
 5888|      2|        }
 5889|      0|        else {
 5890|      0|            base = argv0;
 5891|      0|        }
 5892|      2|        if (base - argv0 >= 7L) {
 5893|      2|            {
 5894|      2|                tmp___0 = strncmp(base - 7, "/.libs/", (size_t)7);
 5895|      2|            }
 5896|      2|            if (tmp___0 == 0) {
 5897|      0|                {
 5898|      0|                    argv0 = base;
 5899|      0|                    tmp = strncmp(base, "lt-", (size_t)3);
 5900|      0|                }
 5901|      0|                if (tmp == 0) {
 5902|      0|                    argv0 = base + 3;
 5903|      0|                    program_invocation_short_name = (char *)argv0;
 5904|      0|                }
 5905|      0|            }
 5906|      2|        }
 5907|      2|        program_name = argv0;
 5908|      2|        program_invocation_name = (char *)argv0;
 5909|      2|        return;
 5910|      2|    }
 5911|      2|}
 5912|       |extern __attribute__((__nothrow__)) long double(
 5913|       |    __attribute__((__leaf__)) frexpl)(long double __x, int *__exponent);
 5914|       |extern __attribute__((__nothrow__)) long double(
 5915|       |    __attribute__((__leaf__)) ldexpl)(long double __x, int __exponent);
 5916|       |extern __attribute__((__nothrow__)) double(__attribute__((__leaf__)) frexp)(
 5917|       |    double __x, int *__exponent);
 5918|       |extern __attribute__((__nothrow__)) double(__attribute__((__leaf__)) ldexp)(
 5919|       |    double __x, int __exponent);
 5920|       |static wchar_t const wide_null_string[7] = {
 5921|       |    (wchar_t const)'(', (wchar_t const)'N', (wchar_t const)'U',
 5922|       |    (wchar_t const)'L', (wchar_t const)'L', (wchar_t const)')',
 5923|       |    (wchar_t const)0
 5924|       |};
 5925|       |int posix2_version(void);
 5926|       |int posix2_version(void)
 5927|      0|{
 5928|      0|    long v;
 5929|      0|    char const *s;
 5930|      0|    char const *tmp;
 5931|      0|    char *e;
 5932|      0|    long i;
 5933|      0|    long tmp___0;
 5934|      0|    long tmp___1;
 5935|      0|    long tmp___2;
 5936|      0|    char *__cil_tmp10;
 5937|       |
 5938|      0|    {
 5939|      0|        {
 5940|      0|            v = 200809L;
 5941|      0|            tmp = (char const *)getenv("_POSIX2_VERSION");
 5942|      0|            s = tmp;
 5943|      0|        }
 5944|      0|        if (s) {
 5945|      0|            if (*s) {
 5946|      0|                {
 5947|      0|                    tmp___0 = strtol((char const * /* __restrict  */)s,
 5948|      0|                                     (char ** /* __restrict  */)(&e), 10);
 5949|      0|                    i = tmp___0;
 5950|      0|                }
 5951|      0|                if (!*e) {
 5952|      0|                    v = i;
 5953|      0|                }
 5954|      0|            }
 5955|      0|        }
 5956|      0|        if (v < (-0x7FFFFFFF - 1)) {
 5957|      0|            tmp___2 = (-0x7FFFFFFF - 1);
 5958|      0|        }
 5959|      0|        else {
 5960|      0|            if (v < 2147483647L) {
 5961|      0|                tmp___1 = v;
 5962|      0|            }
 5963|      0|            else {
 5964|      0|                tmp___1 = 2147483647L;
 5965|      0|            }
 5966|      0|            tmp___2 = tmp___1;
 5967|      0|        }
 5968|      0|        return ((int)tmp___2);
 5969|      0|    }
 5970|      0|}
 5971|       |extern __attribute__((__nothrow__))
 5972|       |time_t(__attribute__((__leaf__)) time)(time_t *__timer);
 5973|       |extern __attribute__((__nothrow__)) struct tm *(
 5974|       |    __attribute__((__leaf__)) localtime)(time_t const *__timer);
 5975|       |extern __attribute__((__nothrow__)) char *(__attribute__((
 5976|       |            __nonnull__(1, 2), __leaf__)) stpcpy)(char *__restrict __dest,
 5977|       |                    char const *__restrict __src);
 5978|       |extern __attribute__((__nothrow__)) int(__attribute__((__leaf__)) pipe)(
 5979|       |    int *__pipedes);
 5980|       |extern __attribute__((__nothrow__)) int(__attribute__((__leaf__)) pipe2)(
 5981|       |    int *__pipedes, int __flags);
 5982|       |static int have_pipe2_really;
 5983|       |extern __attribute__((__nothrow__)) long(__attribute__((__leaf__)) sysconf)(
 5984|       |    int __name);
 5985|       |extern __attribute__((__nothrow__)) int(__attribute__((
 5986|       |        __nonnull__(2), __leaf__)) setenv)(char const *__name, char const *__value,
 5987|       |                int __replace);
 5988|       |extern __attribute__((__nothrow__)) int(
 5989|       |    __attribute__((__nonnull__(1), __leaf__)) unsetenv)(char const *__name);
 5990|       |extern __attribute__((__nothrow__)) int(__attribute__((__leaf__)) abs)(int __x)
 5991|       |__attribute__((__const__));
 5992|       |static yytype_uint8 const yytranslate[278] = {
 5993|       |    (yytype_uint8 const)0,  (yytype_uint8 const)2,  (yytype_uint8 const)2,
 5994|       |    (yytype_uint8 const)2,  (yytype_uint8 const)2,  (yytype_uint8 const)2,
 5995|       |    (yytype_uint8 const)2,  (yytype_uint8 const)2,  (yytype_uint8 const)2,
 5996|       |    (yytype_uint8 const)2,  (yytype_uint8 const)2,  (yytype_uint8 const)2,
 5997|       |    (yytype_uint8 const)2,  (yytype_uint8 const)2,  (yytype_uint8 const)2,
 5998|       |    (yytype_uint8 const)2,  (yytype_uint8 const)2,  (yytype_uint8 const)2,
 5999|       |    (yytype_uint8 const)2,  (yytype_uint8 const)2,  (yytype_uint8 const)2,
 6000|       |    (yytype_uint8 const)2,  (yytype_uint8 const)2,  (yytype_uint8 const)2,
 6001|       |    (yytype_uint8 const)2,  (yytype_uint8 const)2,  (yytype_uint8 const)2,
 6002|       |    (yytype_uint8 const)2,  (yytype_uint8 const)2,  (yytype_uint8 const)2,
 6003|       |    (yytype_uint8 const)2,  (yytype_uint8 const)2,  (yytype_uint8 const)2,
 6004|       |    (yytype_uint8 const)2,  (yytype_uint8 const)2,  (yytype_uint8 const)2,
 6005|       |    (yytype_uint8 const)2,  (yytype_uint8 const)2,  (yytype_uint8 const)2,
 6006|       |    (yytype_uint8 const)2,  (yytype_uint8 const)2,  (yytype_uint8 const)2,
 6007|       |    (yytype_uint8 const)2,  (yytype_uint8 const)2,  (yytype_uint8 const)26,
 6008|       |    (yytype_uint8 const)2,  (yytype_uint8 const)2,  (yytype_uint8 const)27,
 6009|       |    (yytype_uint8 const)2,  (yytype_uint8 const)2,  (yytype_uint8 const)2,
 6010|       |    (yytype_uint8 const)2,  (yytype_uint8 const)2,  (yytype_uint8 const)2,
 6011|       |    (yytype_uint8 const)2,  (yytype_uint8 const)2,  (yytype_uint8 const)2,
 6012|       |    (yytype_uint8 const)2,  (yytype_uint8 const)25, (yytype_uint8 const)2,
 6013|       |    (yytype_uint8 const)2,  (yytype_uint8 const)2,  (yytype_uint8 const)2,
 6014|       |    (yytype_uint8 const)2,  (yytype_uint8 const)23, (yytype_uint8 const)2,
 6015|       |    (yytype_uint8 const)2,  (yytype_uint8 const)2,  (yytype_uint8 const)2,
 6016|       |    (yytype_uint8 const)2,  (yytype_uint8 const)2,  (yytype_uint8 const)2,
 6017|       |    (yytype_uint8 const)2,  (yytype_uint8 const)2,  (yytype_uint8 const)2,
 6018|       |    (yytype_uint8 const)2,  (yytype_uint8 const)2,  (yytype_uint8 const)2,
 6019|       |    (yytype_uint8 const)2,  (yytype_uint8 const)2,  (yytype_uint8 const)2,
 6020|       |    (yytype_uint8 const)2,  (yytype_uint8 const)2,  (yytype_uint8 const)2,
 6021|       |    (yytype_uint8 const)24, (yytype_uint8 const)2,  (yytype_uint8 const)2,
 6022|       |    (yytype_uint8 const)2,  (yytype_uint8 const)2,  (yytype_uint8 const)2,
 6023|       |    (yytype_uint8 const)2,  (yytype_uint8 const)2,  (yytype_uint8 const)2,
 6024|       |    (yytype_uint8 const)2,  (yytype_uint8 const)2,  (yytype_uint8 const)2,
 6025|       |    (yytype_uint8 const)2,  (yytype_uint8 const)2,  (yytype_uint8 const)2,
 6026|       |    (yytype_uint8 const)2,  (yytype_uint8 const)2,  (yytype_uint8 const)2,
 6027|       |    (yytype_uint8 const)2,  (yytype_uint8 const)2,  (yytype_uint8 const)2,
 6028|       |    (yytype_uint8 const)2,  (yytype_uint8 const)2,  (yytype_uint8 const)2,
 6029|       |    (yytype_uint8 const)2,  (yytype_uint8 const)2,  (yytype_uint8 const)2,
 6030|       |    (yytype_uint8 const)2,  (yytype_uint8 const)2,  (yytype_uint8 const)2,
 6031|       |    (yytype_uint8 const)2,  (yytype_uint8 const)2,  (yytype_uint8 const)2,
 6032|       |    (yytype_uint8 const)2,  (yytype_uint8 const)2,  (yytype_uint8 const)2,
 6033|       |    (yytype_uint8 const)2,  (yytype_uint8 const)2,  (yytype_uint8 const)2,
 6034|       |    (yytype_uint8 const)2,  (yytype_uint8 const)2,  (yytype_uint8 const)2,
 6035|       |    (yytype_uint8 const)2,  (yytype_uint8 const)2,  (yytype_uint8 const)2,
 6036|       |    (yytype_uint8 const)2,  (yytype_uint8 const)2,  (yytype_uint8 const)2,
 6037|       |    (yytype_uint8 const)2,  (yytype_uint8 const)2,  (yytype_uint8 const)2,
 6038|       |    (yytype_uint8 const)2,  (yytype_uint8 const)2,  (yytype_uint8 const)2,
 6039|       |    (yytype_uint8 const)2,  (yytype_uint8 const)2,  (yytype_uint8 const)2,
 6040|       |    (yytype_uint8 const)2,  (yytype_uint8 const)2,  (yytype_uint8 const)2,
 6041|       |    (yytype_uint8 const)2,  (yytype_uint8 const)2,  (yytype_uint8 const)2,
 6042|       |    (yytype_uint8 const)2,  (yytype_uint8 const)2,  (yytype_uint8 const)2,
 6043|       |    (yytype_uint8 const)2,  (yytype_uint8 const)2,  (yytype_uint8 const)2,
 6044|       |    (yytype_uint8 const)2,  (yytype_uint8 const)2,  (yytype_uint8 const)2,
 6045|       |    (yytype_uint8 const)2,  (yytype_uint8 const)2,  (yytype_uint8 const)2,
 6046|       |    (yytype_uint8 const)2,  (yytype_uint8 const)2,  (yytype_uint8 const)2,
 6047|       |    (yytype_uint8 const)2,  (yytype_uint8 const)2,  (yytype_uint8 const)2,
 6048|       |    (yytype_uint8 const)2,  (yytype_uint8 const)2,  (yytype_uint8 const)2,
 6049|       |    (yytype_uint8 const)2,  (yytype_uint8 const)2,  (yytype_uint8 const)2,
 6050|       |    (yytype_uint8 const)2,  (yytype_uint8 const)2,  (yytype_uint8 const)2,
 6051|       |    (yytype_uint8 const)2,  (yytype_uint8 const)2,  (yytype_uint8 const)2,
 6052|       |    (yytype_uint8 const)2,  (yytype_uint8 const)2,  (yytype_uint8 const)2,
 6053|       |    (yytype_uint8 const)2,  (yytype_uint8 const)2,  (yytype_uint8 const)2,
 6054|       |    (yytype_uint8 const)2,  (yytype_uint8 const)2,  (yytype_uint8 const)2,
 6055|       |    (yytype_uint8 const)2,  (yytype_uint8 const)2,  (yytype_uint8 const)2,
 6056|       |    (yytype_uint8 const)2,  (yytype_uint8 const)2,  (yytype_uint8 const)2,
 6057|       |    (yytype_uint8 const)2,  (yytype_uint8 const)2,  (yytype_uint8 const)2,
 6058|       |    (yytype_uint8 const)2,  (yytype_uint8 const)2,  (yytype_uint8 const)2,
 6059|       |    (yytype_uint8 const)2,  (yytype_uint8 const)2,  (yytype_uint8 const)2,
 6060|       |    (yytype_uint8 const)2,  (yytype_uint8 const)2,  (yytype_uint8 const)2,
 6061|       |    (yytype_uint8 const)2,  (yytype_uint8 const)2,  (yytype_uint8 const)2,
 6062|       |    (yytype_uint8 const)2,  (yytype_uint8 const)2,  (yytype_uint8 const)2,
 6063|       |    (yytype_uint8 const)2,  (yytype_uint8 const)2,  (yytype_uint8 const)2,
 6064|       |    (yytype_uint8 const)2,  (yytype_uint8 const)2,  (yytype_uint8 const)2,
 6065|       |    (yytype_uint8 const)2,  (yytype_uint8 const)2,  (yytype_uint8 const)2,
 6066|       |    (yytype_uint8 const)2,  (yytype_uint8 const)2,  (yytype_uint8 const)2,
 6067|       |    (yytype_uint8 const)2,  (yytype_uint8 const)2,  (yytype_uint8 const)2,
 6068|       |    (yytype_uint8 const)2,  (yytype_uint8 const)2,  (yytype_uint8 const)2,
 6069|       |    (yytype_uint8 const)2,  (yytype_uint8 const)2,  (yytype_uint8 const)2,
 6070|       |    (yytype_uint8 const)2,  (yytype_uint8 const)2,  (yytype_uint8 const)2,
 6071|       |    (yytype_uint8 const)2,  (yytype_uint8 const)2,  (yytype_uint8 const)2,
 6072|       |    (yytype_uint8 const)2,  (yytype_uint8 const)2,  (yytype_uint8 const)2,
 6073|       |    (yytype_uint8 const)2,  (yytype_uint8 const)2,  (yytype_uint8 const)2,
 6074|       |    (yytype_uint8 const)2,  (yytype_uint8 const)2,  (yytype_uint8 const)2,
 6075|       |    (yytype_uint8 const)2,  (yytype_uint8 const)2,  (yytype_uint8 const)2,
 6076|       |    (yytype_uint8 const)2,  (yytype_uint8 const)2,  (yytype_uint8 const)2,
 6077|       |    (yytype_uint8 const)2,  (yytype_uint8 const)2,  (yytype_uint8 const)2,
 6078|       |    (yytype_uint8 const)2,  (yytype_uint8 const)1,  (yytype_uint8 const)2,
 6079|       |    (yytype_uint8 const)3,  (yytype_uint8 const)4,  (yytype_uint8 const)5,
 6080|       |    (yytype_uint8 const)6,  (yytype_uint8 const)7,  (yytype_uint8 const)8,
 6081|       |    (yytype_uint8 const)9,  (yytype_uint8 const)10, (yytype_uint8 const)11,
 6082|       |    (yytype_uint8 const)12, (yytype_uint8 const)13, (yytype_uint8 const)14,
 6083|       |    (yytype_uint8 const)15, (yytype_uint8 const)16, (yytype_uint8 const)17,
 6084|       |    (yytype_uint8 const)18, (yytype_uint8 const)19, (yytype_uint8 const)20,
 6085|       |    (yytype_uint8 const)21, (yytype_uint8 const)22
 6086|       |};
 6087|       |static yytype_int8 const yypact[114] = {
 6088|       |    (yytype_int8 const)38,  (yytype_int8 const)27,  (yytype_int8 const)77,
 6089|       |    (yytype_int8 const)-93, (yytype_int8 const)46,  (yytype_int8 const)-93,
 6090|       |    (yytype_int8 const)-93, (yytype_int8 const)-93, (yytype_int8 const)-93,
 6091|       |    (yytype_int8 const)-93, (yytype_int8 const)-93, (yytype_int8 const)-93,
 6092|       |    (yytype_int8 const)-93, (yytype_int8 const)-93, (yytype_int8 const)-93,
 6093|       |    (yytype_int8 const)-93, (yytype_int8 const)-93, (yytype_int8 const)-93,
 6094|       |    (yytype_int8 const)-93, (yytype_int8 const)-93, (yytype_int8 const)62,
 6095|       |    (yytype_int8 const)-93, (yytype_int8 const)82,  (yytype_int8 const)-3,
 6096|       |    (yytype_int8 const)66,  (yytype_int8 const)3,   (yytype_int8 const)74,
 6097|       |    (yytype_int8 const)-4,  (yytype_int8 const)83,  (yytype_int8 const)84,
 6098|       |    (yytype_int8 const)75,  (yytype_int8 const)-93, (yytype_int8 const)-93,
 6099|       |    (yytype_int8 const)-93, (yytype_int8 const)-93, (yytype_int8 const)-93,
 6100|       |    (yytype_int8 const)-93, (yytype_int8 const)-93, (yytype_int8 const)-93,
 6101|       |    (yytype_int8 const)-93, (yytype_int8 const)71,  (yytype_int8 const)-93,
 6102|       |    (yytype_int8 const)93,  (yytype_int8 const)-93, (yytype_int8 const)-93,
 6103|       |    (yytype_int8 const)-93, (yytype_int8 const)-93, (yytype_int8 const)-93,
 6104|       |    (yytype_int8 const)-93, (yytype_int8 const)78,  (yytype_int8 const)72,
 6105|       |    (yytype_int8 const)-93, (yytype_int8 const)-93, (yytype_int8 const)-93,
 6106|       |    (yytype_int8 const)-93, (yytype_int8 const)-93, (yytype_int8 const)-93,
 6107|       |    (yytype_int8 const)-93, (yytype_int8 const)-93, (yytype_int8 const)25,
 6108|       |    (yytype_int8 const)-93, (yytype_int8 const)-93, (yytype_int8 const)-93,
 6109|       |    (yytype_int8 const)-93, (yytype_int8 const)-93, (yytype_int8 const)-93,
 6110|       |    (yytype_int8 const)-93, (yytype_int8 const)-93, (yytype_int8 const)-93,
 6111|       |    (yytype_int8 const)-93, (yytype_int8 const)-93, (yytype_int8 const)-93,
 6112|       |    (yytype_int8 const)-93, (yytype_int8 const)-93, (yytype_int8 const)-93,
 6113|       |    (yytype_int8 const)21,  (yytype_int8 const)19,  (yytype_int8 const)79,
 6114|       |    (yytype_int8 const)80,  (yytype_int8 const)-93, (yytype_int8 const)-93,
 6115|       |    (yytype_int8 const)-93, (yytype_int8 const)-93, (yytype_int8 const)-93,
 6116|       |    (yytype_int8 const)81,  (yytype_int8 const)-93, (yytype_int8 const)-93,
 6117|       |    (yytype_int8 const)85,  (yytype_int8 const)86,  (yytype_int8 const)-93,
 6118|       |    (yytype_int8 const)-93, (yytype_int8 const)-93, (yytype_int8 const)-93,
 6119|       |    (yytype_int8 const)-93, (yytype_int8 const)-6,  (yytype_int8 const)76,
 6120|       |    (yytype_int8 const)17,  (yytype_int8 const)-93, (yytype_int8 const)-93,
 6121|       |    (yytype_int8 const)-93, (yytype_int8 const)-93, (yytype_int8 const)87,
 6122|       |    (yytype_int8 const)69,  (yytype_int8 const)-93, (yytype_int8 const)-93,
 6123|       |    (yytype_int8 const)88,  (yytype_int8 const)89,  (yytype_int8 const)-1,
 6124|       |    (yytype_int8 const)-93, (yytype_int8 const)18,  (yytype_int8 const)-93,
 6125|       |    (yytype_int8 const)-93, (yytype_int8 const)69,  (yytype_int8 const)91
 6126|       |};
 6127|       |static yytype_uint8 const yydefact[114] = {
 6128|       |    (yytype_uint8 const)5,  (yytype_uint8 const)0,  (yytype_uint8 const)0,
 6129|       |    (yytype_uint8 const)2,  (yytype_uint8 const)3,  (yytype_uint8 const)85,
 6130|       |    (yytype_uint8 const)87, (yytype_uint8 const)84, (yytype_uint8 const)86,
 6131|       |    (yytype_uint8 const)4,  (yytype_uint8 const)82, (yytype_uint8 const)83,
 6132|       |    (yytype_uint8 const)1,  (yytype_uint8 const)56, (yytype_uint8 const)59,
 6133|       |    (yytype_uint8 const)65, (yytype_uint8 const)68, (yytype_uint8 const)73,
 6134|       |    (yytype_uint8 const)62, (yytype_uint8 const)81, (yytype_uint8 const)37,
 6135|       |    (yytype_uint8 const)35, (yytype_uint8 const)28, (yytype_uint8 const)0,
 6136|       |    (yytype_uint8 const)0,  (yytype_uint8 const)30, (yytype_uint8 const)0,
 6137|       |    (yytype_uint8 const)88, (yytype_uint8 const)0,  (yytype_uint8 const)0,
 6138|       |    (yytype_uint8 const)31, (yytype_uint8 const)6,  (yytype_uint8 const)7,
 6139|       |    (yytype_uint8 const)16, (yytype_uint8 const)8,  (yytype_uint8 const)21,
 6140|       |    (yytype_uint8 const)9,  (yytype_uint8 const)10, (yytype_uint8 const)12,
 6141|       |    (yytype_uint8 const)11, (yytype_uint8 const)49, (yytype_uint8 const)13,
 6142|       |    (yytype_uint8 const)52, (yytype_uint8 const)74, (yytype_uint8 const)53,
 6143|       |    (yytype_uint8 const)14, (yytype_uint8 const)15, (yytype_uint8 const)38,
 6144|       |    (yytype_uint8 const)29, (yytype_uint8 const)0,  (yytype_uint8 const)45,
 6145|       |    (yytype_uint8 const)54, (yytype_uint8 const)57, (yytype_uint8 const)63,
 6146|       |    (yytype_uint8 const)66, (yytype_uint8 const)69, (yytype_uint8 const)60,
 6147|       |    (yytype_uint8 const)39, (yytype_uint8 const)36, (yytype_uint8 const)90,
 6148|       |    (yytype_uint8 const)32, (yytype_uint8 const)75, (yytype_uint8 const)76,
 6149|       |    (yytype_uint8 const)78, (yytype_uint8 const)79, (yytype_uint8 const)80,
 6150|       |    (yytype_uint8 const)77, (yytype_uint8 const)55, (yytype_uint8 const)58,
 6151|       |    (yytype_uint8 const)64, (yytype_uint8 const)67, (yytype_uint8 const)70,
 6152|       |    (yytype_uint8 const)61, (yytype_uint8 const)40, (yytype_uint8 const)18,
 6153|       |    (yytype_uint8 const)47, (yytype_uint8 const)90, (yytype_uint8 const)0,
 6154|       |    (yytype_uint8 const)0,  (yytype_uint8 const)22, (yytype_uint8 const)89,
 6155|       |    (yytype_uint8 const)71, (yytype_uint8 const)72, (yytype_uint8 const)33,
 6156|       |    (yytype_uint8 const)0,  (yytype_uint8 const)51, (yytype_uint8 const)44,
 6157|       |    (yytype_uint8 const)0,  (yytype_uint8 const)0,  (yytype_uint8 const)34,
 6158|       |    (yytype_uint8 const)43, (yytype_uint8 const)48, (yytype_uint8 const)50,
 6159|       |    (yytype_uint8 const)27, (yytype_uint8 const)25, (yytype_uint8 const)41,
 6160|       |    (yytype_uint8 const)0,  (yytype_uint8 const)17, (yytype_uint8 const)46,
 6161|       |    (yytype_uint8 const)91, (yytype_uint8 const)19, (yytype_uint8 const)90,
 6162|       |    (yytype_uint8 const)0,  (yytype_uint8 const)23, (yytype_uint8 const)26,
 6163|       |    (yytype_uint8 const)0,  (yytype_uint8 const)0,  (yytype_uint8 const)25,
 6164|       |    (yytype_uint8 const)42, (yytype_uint8 const)25, (yytype_uint8 const)20,
 6165|       |    (yytype_uint8 const)24, (yytype_uint8 const)0,  (yytype_uint8 const)25
 6166|       |};
 6167|       |static yytype_int8 const yypgoto[26] = {
 6168|       |    (yytype_int8 const)-93, (yytype_int8 const)-93, (yytype_int8 const)-93,
 6169|       |    (yytype_int8 const)-93, (yytype_int8 const)-93, (yytype_int8 const)-93,
 6170|       |    (yytype_int8 const)-93, (yytype_int8 const)-93, (yytype_int8 const)20,
 6171|       |    (yytype_int8 const)-68, (yytype_int8 const)-27, (yytype_int8 const)-93,
 6172|       |    (yytype_int8 const)-93, (yytype_int8 const)-93, (yytype_int8 const)-93,
 6173|       |    (yytype_int8 const)-93, (yytype_int8 const)-93, (yytype_int8 const)-93,
 6174|       |    (yytype_int8 const)60,  (yytype_int8 const)-93, (yytype_int8 const)-93,
 6175|       |    (yytype_int8 const)-93, (yytype_int8 const)-92, (yytype_int8 const)-93,
 6176|       |    (yytype_int8 const)-93, (yytype_int8 const)43
 6177|       |};
 6178|       |static yytype_int8 const yydefgoto[26] = {
 6179|       |    (yytype_int8 const)-1,  (yytype_int8 const)2,   (yytype_int8 const)3,
 6180|       |    (yytype_int8 const)4,   (yytype_int8 const)31,  (yytype_int8 const)32,
 6181|       |    (yytype_int8 const)33,  (yytype_int8 const)34,  (yytype_int8 const)35,
 6182|       |    (yytype_int8 const)103, (yytype_int8 const)104, (yytype_int8 const)36,
 6183|       |    (yytype_int8 const)37,  (yytype_int8 const)38,  (yytype_int8 const)39,
 6184|       |    (yytype_int8 const)40,  (yytype_int8 const)41,  (yytype_int8 const)42,
 6185|       |    (yytype_int8 const)43,  (yytype_int8 const)44,  (yytype_int8 const)9,
 6186|       |    (yytype_int8 const)10,  (yytype_int8 const)11,  (yytype_int8 const)45,
 6187|       |    (yytype_int8 const)46,  (yytype_int8 const)93
 6188|       |};
 6189|       |static yytype_uint8 const yytable[113] = {
 6190|       |    (yytype_uint8 const)79,  (yytype_uint8 const)67,  (yytype_uint8 const)68,
 6191|       |    (yytype_uint8 const)69,  (yytype_uint8 const)70,  (yytype_uint8 const)71,
 6192|       |    (yytype_uint8 const)72,  (yytype_uint8 const)58,  (yytype_uint8 const)73,
 6193|       |    (yytype_uint8 const)100, (yytype_uint8 const)107, (yytype_uint8 const)74,
 6194|       |    (yytype_uint8 const)75,  (yytype_uint8 const)101, (yytype_uint8 const)110,
 6195|       |    (yytype_uint8 const)76,  (yytype_uint8 const)49,  (yytype_uint8 const)50,
 6196|       |    (yytype_uint8 const)101, (yytype_uint8 const)102, (yytype_uint8 const)113,
 6197|       |    (yytype_uint8 const)77,  (yytype_uint8 const)59,  (yytype_uint8 const)78,
 6198|       |    (yytype_uint8 const)61,  (yytype_uint8 const)62,  (yytype_uint8 const)63,
 6199|       |    (yytype_uint8 const)64,  (yytype_uint8 const)65,  (yytype_uint8 const)66,
 6200|       |    (yytype_uint8 const)61,  (yytype_uint8 const)62,  (yytype_uint8 const)63,
 6201|       |    (yytype_uint8 const)64,  (yytype_uint8 const)65,  (yytype_uint8 const)66,
 6202|       |    (yytype_uint8 const)101, (yytype_uint8 const)101, (yytype_uint8 const)92,
 6203|       |    (yytype_uint8 const)111, (yytype_uint8 const)90,  (yytype_uint8 const)91,
 6204|       |    (yytype_uint8 const)106, (yytype_uint8 const)112, (yytype_uint8 const)88,
 6205|       |    (yytype_uint8 const)111, (yytype_uint8 const)5,   (yytype_uint8 const)6,
 6206|       |    (yytype_uint8 const)7,   (yytype_uint8 const)8,   (yytype_uint8 const)88,
 6207|       |    (yytype_uint8 const)13,  (yytype_uint8 const)14,  (yytype_uint8 const)15,
 6208|       |    (yytype_uint8 const)16,  (yytype_uint8 const)17,  (yytype_uint8 const)18,
 6209|       |    (yytype_uint8 const)19,  (yytype_uint8 const)20,  (yytype_uint8 const)21,
 6210|       |    (yytype_uint8 const)22,  (yytype_uint8 const)1,   (yytype_uint8 const)23,
 6211|       |    (yytype_uint8 const)24,  (yytype_uint8 const)25,  (yytype_uint8 const)26,
 6212|       |    (yytype_uint8 const)27,  (yytype_uint8 const)28,  (yytype_uint8 const)29,
 6213|       |    (yytype_uint8 const)79,  (yytype_uint8 const)30,  (yytype_uint8 const)51,
 6214|       |    (yytype_uint8 const)52,  (yytype_uint8 const)53,  (yytype_uint8 const)54,
 6215|       |    (yytype_uint8 const)55,  (yytype_uint8 const)56,  (yytype_uint8 const)12,
 6216|       |    (yytype_uint8 const)57,  (yytype_uint8 const)61,  (yytype_uint8 const)62,
 6217|       |    (yytype_uint8 const)63,  (yytype_uint8 const)64,  (yytype_uint8 const)65,
 6218|       |    (yytype_uint8 const)66,  (yytype_uint8 const)60,  (yytype_uint8 const)48,
 6219|       |    (yytype_uint8 const)80,  (yytype_uint8 const)47,  (yytype_uint8 const)6,
 6220|       |    (yytype_uint8 const)83,  (yytype_uint8 const)8,   (yytype_uint8 const)81,
 6221|       |    (yytype_uint8 const)82,  (yytype_uint8 const)26,  (yytype_uint8 const)84,
 6222|       |    (yytype_uint8 const)85,  (yytype_uint8 const)86,  (yytype_uint8 const)87,
 6223|       |    (yytype_uint8 const)94,  (yytype_uint8 const)95,  (yytype_uint8 const)96,
 6224|       |    (yytype_uint8 const)89,  (yytype_uint8 const)105, (yytype_uint8 const)97,
 6225|       |    (yytype_uint8 const)98,  (yytype_uint8 const)99,  (yytype_uint8 const)0,
 6226|       |    (yytype_uint8 const)108, (yytype_uint8 const)109, (yytype_uint8 const)101,
 6227|       |    (yytype_uint8 const)0,   (yytype_uint8 const)88
 6228|       |};
 6229|       |static yytype_int8 const yycheck[113] = {
 6230|       |    (yytype_int8 const)27,  (yytype_int8 const)5,   (yytype_int8 const)6,
 6231|       |    (yytype_int8 const)7,   (yytype_int8 const)8,   (yytype_int8 const)9,
 6232|       |    (yytype_int8 const)10,  (yytype_int8 const)4,   (yytype_int8 const)12,
 6233|       |    (yytype_int8 const)15,  (yytype_int8 const)102, (yytype_int8 const)15,
 6234|       |    (yytype_int8 const)16,  (yytype_int8 const)19,  (yytype_int8 const)15,
 6235|       |    (yytype_int8 const)19,  (yytype_int8 const)19,  (yytype_int8 const)20,
 6236|       |    (yytype_int8 const)19,  (yytype_int8 const)25,  (yytype_int8 const)112,
 6237|       |    (yytype_int8 const)25,  (yytype_int8 const)19,  (yytype_int8 const)27,
 6238|       |    (yytype_int8 const)5,   (yytype_int8 const)6,   (yytype_int8 const)7,
 6239|       |    (yytype_int8 const)8,   (yytype_int8 const)9,   (yytype_int8 const)10,
 6240|       |    (yytype_int8 const)5,   (yytype_int8 const)6,   (yytype_int8 const)7,
 6241|       |    (yytype_int8 const)8,   (yytype_int8 const)9,   (yytype_int8 const)10,
 6242|       |    (yytype_int8 const)19,  (yytype_int8 const)19,  (yytype_int8 const)19,
 6243|       |    (yytype_int8 const)107, (yytype_int8 const)19,  (yytype_int8 const)20,
 6244|       |    (yytype_int8 const)25,  (yytype_int8 const)25,  (yytype_int8 const)25,
 6245|       |    (yytype_int8 const)113, (yytype_int8 const)19,  (yytype_int8 const)20,
 6246|       |    (yytype_int8 const)21,  (yytype_int8 const)22,  (yytype_int8 const)25,
 6247|       |    (yytype_int8 const)5,   (yytype_int8 const)6,   (yytype_int8 const)7,
 6248|       |    (yytype_int8 const)8,   (yytype_int8 const)9,   (yytype_int8 const)10,
 6249|       |    (yytype_int8 const)11,  (yytype_int8 const)12,  (yytype_int8 const)13,
 6250|       |    (yytype_int8 const)14,  (yytype_int8 const)23,  (yytype_int8 const)16,
 6251|       |    (yytype_int8 const)17,  (yytype_int8 const)18,  (yytype_int8 const)19,
 6252|       |    (yytype_int8 const)20,  (yytype_int8 const)21,  (yytype_int8 const)22,
 6253|       |    (yytype_int8 const)96,  (yytype_int8 const)24,  (yytype_int8 const)5,
 6254|       |    (yytype_int8 const)6,   (yytype_int8 const)7,   (yytype_int8 const)8,
 6255|       |    (yytype_int8 const)9,   (yytype_int8 const)10,  (yytype_int8 const)0,
 6256|       |    (yytype_int8 const)12,  (yytype_int8 const)5,   (yytype_int8 const)6,
 6257|       |    (yytype_int8 const)7,   (yytype_int8 const)8,   (yytype_int8 const)9,
 6258|       |    (yytype_int8 const)10,  (yytype_int8 const)25,  (yytype_int8 const)4,
 6259|       |    (yytype_int8 const)27,  (yytype_int8 const)26,  (yytype_int8 const)20,
 6260|       |    (yytype_int8 const)30,  (yytype_int8 const)22,  (yytype_int8 const)9,
 6261|       |    (yytype_int8 const)9,   (yytype_int8 const)19,  (yytype_int8 const)24,
 6262|       |    (yytype_int8 const)3,   (yytype_int8 const)19,  (yytype_int8 const)26,
 6263|       |    (yytype_int8 const)20,  (yytype_int8 const)20,  (yytype_int8 const)20,
 6264|       |    (yytype_int8 const)59,  (yytype_int8 const)27,  (yytype_int8 const)84,
 6265|       |    (yytype_int8 const)20,  (yytype_int8 const)20,  (yytype_int8 const)-1,
 6266|       |    (yytype_int8 const)20,  (yytype_int8 const)20,  (yytype_int8 const)19,
 6267|       |    (yytype_int8 const)-1,  (yytype_int8 const)25
 6268|       |};
 6269|       |static yytype_uint8 const yystos[114] = {
 6270|       |    (yytype_uint8 const)0,  (yytype_uint8 const)23, (yytype_uint8 const)29,
 6271|       |    (yytype_uint8 const)30, (yytype_uint8 const)31, (yytype_uint8 const)19,
 6272|       |    (yytype_uint8 const)20, (yytype_uint8 const)21, (yytype_uint8 const)22,
 6273|       |    (yytype_uint8 const)48, (yytype_uint8 const)49, (yytype_uint8 const)50,
 6274|       |    (yytype_uint8 const)0,  (yytype_uint8 const)5,  (yytype_uint8 const)6,
 6275|       |    (yytype_uint8 const)7,  (yytype_uint8 const)8,  (yytype_uint8 const)9,
 6276|       |    (yytype_uint8 const)10, (yytype_uint8 const)11, (yytype_uint8 const)12,
 6277|       |    (yytype_uint8 const)13, (yytype_uint8 const)14, (yytype_uint8 const)16,
 6278|       |    (yytype_uint8 const)17, (yytype_uint8 const)18, (yytype_uint8 const)19,
 6279|       |    (yytype_uint8 const)20, (yytype_uint8 const)21, (yytype_uint8 const)22,
 6280|       |    (yytype_uint8 const)24, (yytype_uint8 const)32, (yytype_uint8 const)33,
 6281|       |    (yytype_uint8 const)34, (yytype_uint8 const)35, (yytype_uint8 const)36,
 6282|       |    (yytype_uint8 const)39, (yytype_uint8 const)40, (yytype_uint8 const)41,
 6283|       |    (yytype_uint8 const)42, (yytype_uint8 const)43, (yytype_uint8 const)44,
 6284|       |    (yytype_uint8 const)45, (yytype_uint8 const)46, (yytype_uint8 const)47,
 6285|       |    (yytype_uint8 const)51, (yytype_uint8 const)52, (yytype_uint8 const)26,
 6286|       |    (yytype_uint8 const)4,  (yytype_uint8 const)19, (yytype_uint8 const)20,
 6287|       |    (yytype_uint8 const)5,  (yytype_uint8 const)6,  (yytype_uint8 const)7,
 6288|       |    (yytype_uint8 const)8,  (yytype_uint8 const)9,  (yytype_uint8 const)10,
 6289|       |    (yytype_uint8 const)12, (yytype_uint8 const)4,  (yytype_uint8 const)19,
 6290|       |    (yytype_uint8 const)46, (yytype_uint8 const)5,  (yytype_uint8 const)6,
 6291|       |    (yytype_uint8 const)7,  (yytype_uint8 const)8,  (yytype_uint8 const)9,
 6292|       |    (yytype_uint8 const)10, (yytype_uint8 const)5,  (yytype_uint8 const)6,
 6293|       |    (yytype_uint8 const)7,  (yytype_uint8 const)8,  (yytype_uint8 const)9,
 6294|       |    (yytype_uint8 const)10, (yytype_uint8 const)12, (yytype_uint8 const)15,
 6295|       |    (yytype_uint8 const)16, (yytype_uint8 const)19, (yytype_uint8 const)25,
 6296|       |    (yytype_uint8 const)27, (yytype_uint8 const)38, (yytype_uint8 const)46,
 6297|       |    (yytype_uint8 const)9,  (yytype_uint8 const)9,  (yytype_uint8 const)46,
 6298|       |    (yytype_uint8 const)24, (yytype_uint8 const)3,  (yytype_uint8 const)19,
 6299|       |    (yytype_uint8 const)26, (yytype_uint8 const)25, (yytype_uint8 const)53,
 6300|       |    (yytype_uint8 const)19, (yytype_uint8 const)20, (yytype_uint8 const)19,
 6301|       |    (yytype_uint8 const)53, (yytype_uint8 const)20, (yytype_uint8 const)20,
 6302|       |    (yytype_uint8 const)20, (yytype_uint8 const)36, (yytype_uint8 const)20,
 6303|       |    (yytype_uint8 const)20, (yytype_uint8 const)15, (yytype_uint8 const)19,
 6304|       |    (yytype_uint8 const)25, (yytype_uint8 const)37, (yytype_uint8 const)38,
 6305|       |    (yytype_uint8 const)27, (yytype_uint8 const)25, (yytype_uint8 const)50,
 6306|       |    (yytype_uint8 const)20, (yytype_uint8 const)20, (yytype_uint8 const)15,
 6307|       |    (yytype_uint8 const)37, (yytype_uint8 const)25, (yytype_uint8 const)50
 6308|       |};
 6309|       |static yytype_uint8 const yyr1[92] = {
 6310|       |    (yytype_uint8 const)0,  (yytype_uint8 const)28, (yytype_uint8 const)29,
 6311|       |    (yytype_uint8 const)29, (yytype_uint8 const)30, (yytype_uint8 const)31,
 6312|       |    (yytype_uint8 const)31, (yytype_uint8 const)32, (yytype_uint8 const)32,
 6313|       |    (yytype_uint8 const)32, (yytype_uint8 const)32, (yytype_uint8 const)32,
 6314|       |    (yytype_uint8 const)32, (yytype_uint8 const)32, (yytype_uint8 const)32,
 6315|       |    (yytype_uint8 const)32, (yytype_uint8 const)33, (yytype_uint8 const)34,
 6316|       |    (yytype_uint8 const)35, (yytype_uint8 const)35, (yytype_uint8 const)35,
 6317|       |    (yytype_uint8 const)35, (yytype_uint8 const)36, (yytype_uint8 const)36,
 6318|       |    (yytype_uint8 const)36, (yytype_uint8 const)37, (yytype_uint8 const)37,
 6319|       |    (yytype_uint8 const)38, (yytype_uint8 const)39, (yytype_uint8 const)39,
 6320|       |    (yytype_uint8 const)40, (yytype_uint8 const)40, (yytype_uint8 const)40,
 6321|       |    (yytype_uint8 const)40, (yytype_uint8 const)40, (yytype_uint8 const)40,
 6322|       |    (yytype_uint8 const)40, (yytype_uint8 const)41, (yytype_uint8 const)41,
 6323|       |    (yytype_uint8 const)41, (yytype_uint8 const)41, (yytype_uint8 const)42,
 6324|       |    (yytype_uint8 const)42, (yytype_uint8 const)42, (yytype_uint8 const)42,
 6325|       |    (yytype_uint8 const)42, (yytype_uint8 const)42, (yytype_uint8 const)42,
 6326|       |    (yytype_uint8 const)42, (yytype_uint8 const)42, (yytype_uint8 const)43,
 6327|       |    (yytype_uint8 const)44, (yytype_uint8 const)44, (yytype_uint8 const)44,
 6328|       |    (yytype_uint8 const)45, (yytype_uint8 const)45, (yytype_uint8 const)45,
 6329|       |    (yytype_uint8 const)45, (yytype_uint8 const)45, (yytype_uint8 const)45,
 6330|       |    (yytype_uint8 const)45, (yytype_uint8 const)45, (yytype_uint8 const)45,
 6331|       |    (yytype_uint8 const)45, (yytype_uint8 const)45, (yytype_uint8 const)45,
 6332|       |    (yytype_uint8 const)45, (yytype_uint8 const)45, (yytype_uint8 const)45,
 6333|       |    (yytype_uint8 const)45, (yytype_uint8 const)45, (yytype_uint8 const)45,
 6334|       |    (yytype_uint8 const)45, (yytype_uint8 const)45, (yytype_uint8 const)45,
 6335|       |    (yytype_uint8 const)46, (yytype_uint8 const)46, (yytype_uint8 const)46,
 6336|       |    (yytype_uint8 const)46, (yytype_uint8 const)46, (yytype_uint8 const)46,
 6337|       |    (yytype_uint8 const)47, (yytype_uint8 const)48, (yytype_uint8 const)48,
 6338|       |    (yytype_uint8 const)49, (yytype_uint8 const)49, (yytype_uint8 const)50,
 6339|       |    (yytype_uint8 const)50, (yytype_uint8 const)51, (yytype_uint8 const)52,
 6340|       |    (yytype_uint8 const)53, (yytype_uint8 const)53
 6341|       |};
 6342|       |static yytype_uint8 const yyr2[92] = {
 6343|       |    (yytype_uint8 const)0, (yytype_uint8 const)2, (yytype_uint8 const)1,
 6344|       |    (yytype_uint8 const)1, (yytype_uint8 const)2, (yytype_uint8 const)0,
 6345|       |    (yytype_uint8 const)2, (yytype_uint8 const)1, (yytype_uint8 const)1,
 6346|       |    (yytype_uint8 const)1, (yytype_uint8 const)1, (yytype_uint8 const)1,
 6347|       |    (yytype_uint8 const)1, (yytype_uint8 const)1, (yytype_uint8 const)1,
 6348|       |    (yytype_uint8 const)1, (yytype_uint8 const)1, (yytype_uint8 const)3,
 6349|       |    (yytype_uint8 const)2, (yytype_uint8 const)4, (yytype_uint8 const)6,
 6350|       |    (yytype_uint8 const)1, (yytype_uint8 const)2, (yytype_uint8 const)4,
 6351|       |    (yytype_uint8 const)6, (yytype_uint8 const)0, (yytype_uint8 const)1,
 6352|       |    (yytype_uint8 const)2, (yytype_uint8 const)1, (yytype_uint8 const)2,
 6353|       |    (yytype_uint8 const)1, (yytype_uint8 const)1, (yytype_uint8 const)2,
 6354|       |    (yytype_uint8 const)2, (yytype_uint8 const)3, (yytype_uint8 const)1,
 6355|       |    (yytype_uint8 const)2, (yytype_uint8 const)1, (yytype_uint8 const)2,
 6356|       |    (yytype_uint8 const)2, (yytype_uint8 const)2, (yytype_uint8 const)3,
 6357|       |    (yytype_uint8 const)5, (yytype_uint8 const)3, (yytype_uint8 const)3,
 6358|       |    (yytype_uint8 const)2, (yytype_uint8 const)4, (yytype_uint8 const)2,
 6359|       |    (yytype_uint8 const)3, (yytype_uint8 const)1, (yytype_uint8 const)3,
 6360|       |    (yytype_uint8 const)2, (yytype_uint8 const)1, (yytype_uint8 const)1,
 6361|       |    (yytype_uint8 const)2, (yytype_uint8 const)2, (yytype_uint8 const)1,
 6362|       |    (yytype_uint8 const)2, (yytype_uint8 const)2, (yytype_uint8 const)1,
 6363|       |    (yytype_uint8 const)2, (yytype_uint8 const)2, (yytype_uint8 const)1,
 6364|       |    (yytype_uint8 const)2, (yytype_uint8 const)2, (yytype_uint8 const)1,
 6365|       |    (yytype_uint8 const)2, (yytype_uint8 const)2, (yytype_uint8 const)1,
 6366|       |    (yytype_uint8 const)2, (yytype_uint8 const)2, (yytype_uint8 const)2,
 6367|       |    (yytype_uint8 const)2, (yytype_uint8 const)1, (yytype_uint8 const)1,
 6368|       |    (yytype_uint8 const)2, (yytype_uint8 const)2, (yytype_uint8 const)2,
 6369|       |    (yytype_uint8 const)2, (yytype_uint8 const)2, (yytype_uint8 const)2,
 6370|       |    (yytype_uint8 const)1, (yytype_uint8 const)1, (yytype_uint8 const)1,
 6371|       |    (yytype_uint8 const)1, (yytype_uint8 const)1, (yytype_uint8 const)1,
 6372|       |    (yytype_uint8 const)1, (yytype_uint8 const)1, (yytype_uint8 const)2,
 6373|       |    (yytype_uint8 const)0, (yytype_uint8 const)2
 6374|       |};
 6375|       |static table const meridian_table[5] = {{"AM", 270, 0},
 6376|       |    {"A.M.", 270, 0},
 6377|       |    {"PM", 270, 1},
 6378|       |    {"P.M.", 270, 1},
 6379|       |    {(char const *)((void *)0), 0, 0}
 6380|       |};
 6381|       |static table const dst_table[1] = {{"DST", 259, 0}};
 6382|       |static table const month_and_day_table[25] = {
 6383|       |    {"JANUARY", 271, 1},
 6384|       |    {"FEBRUARY", 271, 2},
 6385|       |    {"MARCH", 271, 3},
 6386|       |    {"APRIL", 271, 4},
 6387|       |    {"MAY", 271, 5},
 6388|       |    {"JUNE", 271, 6},
 6389|       |    {"JULY", 271, 7},
 6390|       |    {"AUGUST", 271, 8},
 6391|       |    {"SEPTEMBER", 271, 9},
 6392|       |    {"SEPT", 271, 9},
 6393|       |    {"OCTOBER", 271, 10},
 6394|       |    {"NOVEMBER", 271, 11},
 6395|       |    {"DECEMBER", 271, 12},
 6396|       |    {"SUNDAY", 267, 0},
 6397|       |    {"MONDAY", 267, 1},
 6398|       |    {"TUESDAY", 267, 2},
 6399|       |    {"TUES", 267, 2},
 6400|       |    {"WEDNESDAY", 267, 3},
 6401|       |    {"WEDNES", 267, 3},
 6402|       |    {"THURSDAY", 267, 4},
 6403|       |    {"THUR", 267, 4},
 6404|       |    {"THURS", 267, 4},
 6405|       |    {"FRIDAY", 267, 5},
 6406|       |    {"SATURDAY", 267, 6},
 6407|       |    {(char const *)((void *)0), 0, 0}
 6408|       |};
 6409|       |static table const time_units_table[11] = {{"YEAR", 260, 1},
 6410|       |    {"MONTH", 261, 1},
 6411|       |    {"FORTNIGHT", 265, 14},
 6412|       |    {"WEEK", 265, 7},
 6413|       |    {"DAY", 265, 1},
 6414|       |    {"HOUR", 262, 1},
 6415|       |    {"MINUTE", 263, 1},
 6416|       |    {"MIN", 263, 1},
 6417|       |    {"SECOND", 264, 1},
 6418|       |    {"SEC", 264, 1},
 6419|       |    {(char const *)((void *)0), 0, 0}
 6420|       |};
 6421|       |static table const relative_time_table[21] = {
 6422|       |    {"TOMORROW", 266, 1},
 6423|       |    {"YESTERDAY", 266, -1},
 6424|       |    {"TODAY", 266, 0},
 6425|       |    {"NOW", 266, 0},
 6426|       |    {"LAST", 272, -1},
 6427|       |    {"THIS", 272, 0},
 6428|       |    {"NEXT", 272, 1},
 6429|       |    {"FIRST", 272, 1},
 6430|       |    {"THIRD", 272, 3},
 6431|       |    {"FOURTH", 272, 4},
 6432|       |    {"FIFTH", 272, 5},
 6433|       |    {"SIXTH", 272, 6},
 6434|       |    {"SEVENTH", 272, 7},
 6435|       |    {"EIGHTH", 272, 8},
 6436|       |    {"NINTH", 272, 9},
 6437|       |    {"TENTH", 272, 10},
 6438|       |    {"ELEVENTH", 272, 11},
 6439|       |    {"TWELFTH", 272, 12},
 6440|       |    {"AGO", 258, -1},
 6441|       |    {"HENCE", 258, 1},
 6442|       |    {(char const *)((void *)0), 0, 0}
 6443|       |};
 6444|       |static table const universal_time_zone_table[4] = {
 6445|       |    {"GMT", 273, 0},
 6446|       |    {"UT", 273, 0},
 6447|       |    {"UTC", 273, 0},
 6448|       |    {(char const *)((void *)0), 0, 0}
 6449|       |};
 6450|       |static table const time_zone_table[48] = {
 6451|       |    {"WET", 273, 0},     {"WEST", 268, 0},   {"BST", 268, 0},
 6452|       |    {"ART", 273, -180},  {"BRT", 273, -180}, {"BRST", 268, -180},
 6453|       |    {"NST", 273, -210},  {"NDT", 268, -210}, {"AST", 273, -240},
 6454|       |    {"ADT", 268, -240},  {"CLT", 273, -240}, {"CLST", 268, -240},
 6455|       |    {"EST", 273, -300},  {"EDT", 268, -300}, {"CST", 273, -360},
 6456|       |    {"CDT", 268, -360},  {"MST", 273, -420}, {"MDT", 268, -420},
 6457|       |    {"PST", 273, -480},  {"PDT", 268, -480}, {"AKST", 273, -540},
 6458|       |    {"AKDT", 268, -540}, {"HST", 273, -600}, {"HAST", 273, -600},
 6459|       |    {"HADT", 268, -600}, {"SST", 273, -720}, {"WAT", 273, 60},
 6460|       |    {"CET", 273, 60},    {"CEST", 268, 60},  {"MET", 273, 60},
 6461|       |    {"MEZ", 273, 60},    {"MEST", 268, 60},  {"MESZ", 268, 60},
 6462|       |    {"EET", 273, 120},   {"EEST", 268, 120}, {"CAT", 273, 120},
 6463|       |    {"SAST", 273, 120},  {"EAT", 273, 180},  {"MSK", 273, 180},
 6464|       |    {"MSD", 268, 180},   {"IST", 273, 330},  {"SGT", 273, 480},
 6465|       |    {"KST", 273, 540},   {"JST", 273, 540},  {"GST", 273, 600},
 6466|       |    {"NZST", 273, 720},  {"NZDT", 268, 720}, {(char const *)((void *)0), 0, 0}
 6467|       |};
 6468|       |static table const military_table[26] = {
 6469|       |    {"A", 273, -60},  {"B", 273, -120},
 6470|       |    {"C", 273, -180}, {"D", 273, -240},
 6471|       |    {"E", 273, -300}, {"F", 273, -360},
 6472|       |    {"G", 273, -420}, {"H", 273, -480},
 6473|       |    {"I", 273, -540}, {"K", 273, -600},
 6474|       |    {"L", 273, -660}, {"M", 273, -720},
 6475|       |    {"N", 273, 60},   {"O", 273, 120},
 6476|       |    {"P", 273, 180},  {"Q", 273, 240},
 6477|       |    {"R", 273, 300},  {"S", 273, 360},
 6478|       |    {"T", 'T', 0},    {"U", 273, 480},
 6479|       |    {"V", 273, 540},  {"W", 273, 600},
 6480|       |    {"X", 273, 660},  {"Y", 273, 720},
 6481|       |    {"Z", 273, 0},    {(char const *)((void *)0), 0, 0}
 6482|       |};
 6483|       |extern DIR *(__attribute__((__nonnull__(1))) opendir)(char const *__name);
 6484|       |extern __attribute__((__nothrow__)) int(
 6485|       |    __attribute__((__nonnull__(1), __leaf__)) dirfd)(DIR *__dirp);
 6486|       |extern __attribute__((__nothrow__)) int(__attribute__((
 6487|       |        __nonnull__(1), __leaf__)) access)(char const *__name, int __type);
 6488|       |static int proc_status = 0;
 6489|       |#pragma GCC diagnostic ignored "-Wtype-limits"
 6490|       |extern __attribute__((__nothrow__)) int(__attribute__((
 6491|       |        __leaf__)) __sched_cpucount)(size_t __setsize, cpu_set_t const *__setp);
 6492|       |extern __attribute__((__nothrow__)) int(__attribute__((
 6493|       |        __leaf__)) sched_getaffinity)(__pid_t __pid, size_t __cpusetsize,
 6494|       |                                      cpu_set_t *__cpuset);
 6495|       |extern int nanosleep(struct timespec const *__requested_time,
 6496|       |                     struct timespec *__remaining);
 6497|       |extern __attribute__((__nothrow__))
 6498|       |FILE *(__attribute__((__leaf__)) setmntent)(char const *__file,
 6499|       |        char const *__mode);
 6500|       |extern __attribute__((__nothrow__)) struct mntent *(
 6501|       |    __attribute__((__leaf__)) getmntent)(FILE *__stream);
 6502|       |extern __attribute__((__nothrow__)) int(__attribute__((__leaf__)) endmntent)(
 6503|       |    FILE *__stream);
 6504|       |extern int(__attribute__((__nonnull__(1))) mkstemp)(char *__template);
 6505|       |extern __attribute__((__nothrow__)) int(__attribute__((__leaf__)) getgroups)(
 6506|       |    int __size, __gid_t *__list);
 6507|       |extern int getgrouplist(char const *__user, __gid_t __group, __gid_t *__groups,
 6508|       |                        int *__ngroups);
 6509|       |extern __attribute__((__nothrow__)) int(__attribute__((
 6510|       |        __nonnull__(1, 2), __leaf__)) strcoll)(char const *__s1, char const *__s2)
 6511|       |__attribute__((__pure__));
 6512|       |__inline static int strcoll_loop(char const *s1, size_t s1size, char const *s2,
 6513|       |                                 size_t s2size)
 6514|  7.78k|{
 6515|  7.78k|    int diff;
 6516|  7.78k|    size_t size1;
 6517|  7.78k|    size_t tmp;
 6518|  7.78k|    size_t size2;
 6519|  7.78k|    size_t tmp___0;
 6520|  7.78k|    int *tmp___1;
 6521|  7.78k|    int *tmp___2;
 6522|  7.78k|    int tmp___3;
 6523|       |
 6524|  7.78k|    {
 6525|  7.78k|        {
 6526|  7.78k|            while (1) {
 6527|  7.78k|while_continue: /* CIL Label */
 6528|  7.78k|                ;
 6529|  7.78k|                {
 6530|  7.78k|                    tmp___1 = __errno_location();
 6531|  7.78k|                    *tmp___1 = 0;
 6532|  7.78k|                    diff = strcoll(s1, s2);
 6533|  7.78k|                }
 6534|  7.78k|                if (diff) {
 6535|  7.78k|                    tmp___3 = 1;
 6536|  7.78k|                }
 6537|      0|                else {
 6538|      0|                    {
 6539|      0|                        tmp___2 = __errno_location();
 6540|      0|                    }
 6541|      0|                    if (*tmp___2) {
 6542|      0|                        tmp___3 = 1;
 6543|      0|                    }
 6544|      0|                    else {
 6545|      0|                        tmp___3 = 0;
 6546|      0|                    }
 6547|      0|                }
 6548|  7.78k|                if (tmp___3) {
 6549|  7.78k|                    goto while_break;
 6550|  7.78k|                }
 6551|      0|                {
 6552|      0|                    tmp = strlen(s1);
 6553|      0|                    size1 = tmp + 1UL;
 6554|      0|                    tmp___0 = strlen(s2);
 6555|      0|                    size2 = tmp___0 + 1UL;
 6556|      0|                    s1 += size1;
 6557|      0|                    s2 += size2;
 6558|      0|                    s1size -= size1;
 6559|      0|                    s2size -= size2;
 6560|      0|                }
 6561|      0|                if (s1size == 0UL) {
 6562|      0|                    return (-(s2size != 0UL));
 6563|      0|                }
 6564|      0|                if (s2size == 0UL) {
 6565|      0|                    return (1);
 6566|      0|                }
 6567|      0|            }
 6568|  7.78k|while_break: /* CIL Label */
 6569|  7.78k|            ;
 6570|  7.78k|        }
 6571|      0|        return (diff);
 6572|  7.78k|    }
 6573|  7.78k|}
 6574|       |int memcoll(char *s1, size_t s1len, char *s2, size_t s2len)
 6575|  8.69k|{
 6576|  8.69k|    int diff;
 6577|  8.69k|    int *tmp;
 6578|  8.69k|    char n1;
 6579|  8.69k|    char n2;
 6580|  8.69k|    int tmp___0;
 6581|       |
 6582|  8.69k|    {
 6583|  8.69k|        if (s1len == s2len) {
 6584|  1.97k|            {
 6585|  1.97k|                tmp___0 = memcmp((void const *)s1, (void const *)s2, s1len);
 6586|  1.97k|            }
 6587|  1.97k|            if (tmp___0 == 0) {
 6588|    908|                {
 6589|    908|                    tmp = __errno_location();
 6590|    908|                    *tmp = 0;
 6591|    908|                    diff = 0;
 6592|    908|                }
 6593|    908|            }
 6594|  1.06k|            else {
 6595|  1.06k|                goto _L;
 6596|  1.06k|            }
 6597|  1.97k|        }
 6598|  6.72k|        else {
 6599|  7.78k|_L: {
 6600|  7.78k|                n1 = *(s1 + s1len);
 6601|  7.78k|                n2 = *(s2 + s2len);
 6602|  7.78k|                *(s1 + s1len) = (char)'\000';
 6603|  7.78k|                *(s2 + s2len) = (char)'\000';
 6604|  7.78k|                diff = strcoll_loop((char const *)s1, s1len + 1UL, (char const *)s2,
 6605|  7.78k|                                    s2len + 1UL);
 6606|  7.78k|                *(s1 + s1len) = n1;
 6607|  7.78k|                *(s2 + s2len) = n2;
 6608|  7.78k|            }
 6609|  7.78k|        }
 6610|  8.69k|        return (diff);
 6611|  8.69k|    }
 6612|  8.69k|}
 6613|       |int memcasecmp(void const *vs1, void const *vs2, size_t n)
 6614|       |__attribute__((__pure__));
 6615|       |int memcasecmp(void const *vs1, void const *vs2, size_t n)
 6616|       |__attribute__((__pure__));
 6617|       |int memcasecmp(void const *vs1, void const *vs2, size_t n)
 6618|      0|{
 6619|      0|    size_t i;
 6620|      0|    char const *s1;
 6621|      0|    char const *s2;
 6622|      0|    unsigned char u1;
 6623|      0|    unsigned char u2;
 6624|      0|    int U1;
 6625|      0|    int tmp;
 6626|      0|    int U2;
 6627|      0|    int tmp___0;
 6628|      0|    int diff;
 6629|       |
 6630|      0|    {
 6631|      0|        s1 = (char const *)vs1;
 6632|      0|        s2 = (char const *)vs2;
 6633|      0|        i = (size_t)0;
 6634|      0|        {
 6635|      0|            while (1) {
 6636|      0|while_continue: /* CIL Label */
 6637|      0|                ;
 6638|      0|                if (!(i < n)) {
 6639|      0|                    goto while_break;
 6640|      0|                }
 6641|      0|                {
 6642|      0|                    u1 = (unsigned char)*(s1 + i);
 6643|      0|                    u2 = (unsigned char)*(s2 + i);
 6644|      0|                    tmp = toupper((int)u1);
 6645|      0|                    U1 = tmp;
 6646|      0|                    tmp___0 = toupper((int)u2);
 6647|      0|                    U2 = tmp___0;
 6648|      0|                    diff = U1 - U2;
 6649|      0|                }
 6650|      0|                if (diff) {
 6651|      0|                    return (diff);
 6652|      0|                }
 6653|      0|                i++;
 6654|      0|            }
 6655|      0|while_break: /* CIL Label */
 6656|      0|            ;
 6657|      0|        }
 6658|      0|        return (0);
 6659|      0|    }
 6660|      0|}
 6661|       |static unsigned char const fillbuf___2[64] = {(unsigned char const)128,
 6662|       |                                              (unsigned char const)0
 6663|       |                                             };
 6664|       |extern __attribute__((__nothrow__)) int(__attribute__((__leaf__)) wcwidth)(
 6665|       |    wchar_t __c);
 6666|       |extern __attribute__((__nothrow__)) int(__attribute__((__leaf__)) iswcntrl)(
 6667|       |    wint_t __wc);
 6668|       |extern __attribute__((__nothrow__))
 6669|       |size_t(__attribute__((__nonnull__(1), __leaf__)) strnlen)(char const *__string,
 6670|       |        size_t __maxlen)
 6671|       |__attribute__((__pure__));
 6672|       |extern __attribute__((__nothrow__))
 6673|       |wint_t(__attribute__((__leaf__)) towlower)(wint_t __wc);
 6674|       |extern __attribute__((__nothrow__)) size_t(__attribute__((__leaf__)) mbstowcs)(
 6675|       |    wchar_t *__restrict __pwcs, char const *__restrict __s, size_t __n);
 6676|       |extern __attribute__((__nothrow__)) size_t(__attribute__((__leaf__)) wcstombs)(
 6677|       |    char *__restrict __s, wchar_t const *__restrict __pwcs, size_t __n);
 6678|       |extern __attribute__((__nothrow__)) void *(__attribute__((__nonnull__(1, 2),
 6679|       |        __leaf__)) mempcpy)(
 6680|       |            void *__restrict __dest, void const *__restrict __src, size_t __n);
 6681|       |extern __attribute__((__nothrow__)) int(__attribute__((__leaf__)) wcswidth)(
 6682|       |    wchar_t const *__s, size_t __n);
 6683|       |unsigned int const is_basic_table[8] = {
 6684|       |    (unsigned int const)6656, (unsigned int const)4294967279U,
 6685|       |    (unsigned int const)4294967294U, (unsigned int const)2147483646
 6686|       |};
 6687|       |static void *mmalloca_results[257];
 6688|       |extern __attribute__((__nothrow__, __noreturn__)) void(
 6689|       |    __attribute__((__leaf__)) exit)(int __status);
 6690|       |extern int optind;
 6691|       |extern int opterr;
 6692|       |extern __attribute__((__nothrow__)) int(__attribute__((__leaf__)) getopt_long)(
 6693|       |    int ___argc, char *const *___argv, char const *__shortopts,
 6694|       |    struct option const *__longopts, int *__longind);
 6695|       |static struct option const long_options[3] = {
 6696|       |    {"help", 0, (int *)((void *)0), 'h'},
 6697|       |    {"version", 0, (int *)((void *)0), 'v'},
 6698|       |    {(char const *)((void *)0), 0, (int *)((void *)0), 0}
 6699|       |};
 6700|       |extern __attribute__((__nothrow__)) int(
 6701|       |    __attribute__((__nonnull__(1), __leaf__)) pthread_mutex_init)(
 6702|       |        pthread_mutex_t *__mutex, pthread_mutexattr_t const *__mutexattr);
 6703|       |extern __attribute__((__nothrow__)) int(__attribute__((
 6704|       |        __nonnull__(1),
 6705|       |        __leaf__)) pthread_mutexattr_init)(pthread_mutexattr_t *__attr);
 6706|       |extern __attribute__((__nothrow__)) int(__attribute__((
 6707|       |        __nonnull__(1),
 6708|       |        __leaf__)) pthread_mutexattr_destroy)(pthread_mutexattr_t *__attr);
 6709|       |extern __attribute__((__nothrow__)) int(
 6710|       |    __attribute__((__nonnull__(1), __leaf__)) pthread_mutexattr_settype)(
 6711|       |        pthread_mutexattr_t *__attr, int __kind);
 6712|       |#pragma weak pthread_mutex_init
 6713|       |#pragma weak pthread_mutex_lock
 6714|       |#pragma weak pthread_mutex_unlock
 6715|       |#pragma weak pthread_mutex_destroy
 6716|       |#pragma weak pthread_rwlock_init
 6717|       |#pragma weak pthread_rwlock_rdlock
 6718|       |#pragma weak pthread_rwlock_wrlock
 6719|       |#pragma weak pthread_rwlock_unlock
 6720|       |#pragma weak pthread_rwlock_destroy
 6721|       |#pragma weak pthread_once
 6722|       |#pragma weak pthread_cond_init
 6723|       |#pragma weak pthread_cond_wait
 6724|       |#pragma weak pthread_cond_signal
 6725|       |#pragma weak pthread_cond_broadcast
 6726|       |#pragma weak pthread_cond_destroy
 6727|       |#pragma weak pthread_mutexattr_init
 6728|       |#pragma weak pthread_mutexattr_settype
 6729|       |#pragma weak pthread_mutexattr_destroy
 6730|       |#pragma weak pthread_self
 6731|       |#pragma weak pthread_cancel
 6732|       |static int const fresh_once = (int const)0;
 6733|       |extern __attribute__((__nothrow__))
 6734|       |FILE *(__attribute__((__leaf__)) fdopen)(int __fd, char const *__modes);
 6735|       |extern int fscanf(FILE *__restrict __stream, char const *__restrict __format,
 6736|       |                  ...);
 6737|       |extern int ungetc(int __c, FILE *__stream);
 6738|       |static char const *volatile charset_aliases;
 6739|       |static char const *get_charset_aliases(void)
 6740|      0|{
 6741|      0|    char const *cp;
 6742|      0|    char const *dir;
 6743|      0|    char const *base;
 6744|      0|    char *file_name___3;
 6745|      0|    size_t dir_len___0;
 6746|      0|    size_t tmp;
 6747|      0|    size_t base_len___0;
 6748|      0|    size_t tmp___0;
 6749|      0|    int add_slash;
 6750|      0|    int tmp___1;
 6751|      0|    int fd;
 6752|      0|    FILE *fp;
 6753|      0|    char *res_ptr;
 6754|      0|    size_t res_size;
 6755|      0|    int c;
 6756|      0|    char buf1[51];
 6757|      0|    char buf2[51];
 6758|      0|    size_t l1;
 6759|      0|    size_t l2;
 6760|      0|    char *old_res_ptr;
 6761|      0|    int tmp___3;
 6762|      0|    void *__cil_tmp26;
 6763|      0|    void *__cil_tmp27;
 6764|      0|    char *__cil_tmp28;
 6765|      0|    char *__cil_tmp29;
 6766|      0|    char *__cil_tmp30;
 6767|      0|    char *__cil_tmp31;
 6768|      0|    char *__cil_tmp32;
 6769|      0|    char *__cil_tmp33;
 6770|      0|    char *__cil_tmp34;
 6771|      0|    char *__cil_tmp35;
 6772|       |
 6773|      0|    {
 6774|      0|        cp = (char const *)charset_aliases;
 6775|      0|        if ((unsigned long)cp == (unsigned long)((void *)0)) {
 6776|      0|            {
 6777|      0|                base = "charset.alias";
 6778|      0|                dir = (char const *)getenv("CHARSETALIASDIR");
 6779|      0|            }
 6780|      0|            if ((unsigned long)dir == (unsigned long)((void *)0)) {
 6781|      0|                dir = "/usr/local/lib";
 6782|      0|            }
 6783|      0|            else {
 6784|      0|                if ((int const) * (dir + 0) == 0) {
 6785|      0|                    dir = "/usr/local/lib";
 6786|      0|                }
 6787|      0|            }
 6788|      0|            {
 6789|      0|                tmp = strlen(dir);
 6790|      0|                dir_len___0 = tmp;
 6791|      0|                tmp___0 = strlen(base);
 6792|      0|                base_len___0 = tmp___0;
 6793|      0|            }
 6794|      0|            if (dir_len___0 > 0UL) {
 6795|      0|                if (!((int const) * (dir + (dir_len___0 - 1UL)) == 47)) {
 6796|      0|                    tmp___1 = 1;
 6797|      0|                }
 6798|      0|                else {
 6799|      0|                    tmp___1 = 0;
 6800|      0|                }
 6801|      0|            }
 6802|      0|            else {
 6803|      0|                tmp___1 = 0;
 6804|      0|            }
 6805|      0|            {
 6806|      0|                add_slash = tmp___1;
 6807|      0|                file_name___3 = (char *)malloc(
 6808|      0|                                    ((dir_len___0 + (size_t)add_slash) + base_len___0) + 1UL);
 6809|      0|            }
 6810|      0|            if ((unsigned long)file_name___3 != (unsigned long)((void *)0)) {
 6811|      0|                {
 6812|      0|                    memcpy((void * /* __restrict  */)file_name___3,
 6813|      0|                           (void const * /* __restrict  */)dir, dir_len___0);
 6814|      0|                }
 6815|      0|                if (add_slash) {
 6816|      0|                    *(file_name___3 + dir_len___0) = (char)'/';
 6817|      0|                }
 6818|      0|                {
 6819|      0|                    memcpy((void * /* __restrict  */)((file_name___3 + dir_len___0) +
 6820|      0|                                                      add_slash),
 6821|      0|                           (void const * /* __restrict  */)base, base_len___0 + 1UL);
 6822|      0|                }
 6823|      0|            }
 6824|      0|            if ((unsigned long)file_name___3 == (unsigned long)((void *)0)) {
 6825|      0|                cp = "";
 6826|      0|            }
 6827|      0|            else {
 6828|      0|                {
 6829|      0|                    fd = open((char const *)file_name___3, 131072);
 6830|      0|                }
 6831|      0|                if (fd < 0) {
 6832|      0|                    cp = "";
 6833|      0|                }
 6834|      0|                else {
 6835|      0|                    {
 6836|      0|                        fp = fdopen(fd, "r");
 6837|      0|                    }
 6838|      0|                    if ((unsigned long)fp == (unsigned long)((void *)0)) {
 6839|      0|                        {
 6840|      0|                            close(fd);
 6841|      0|                            cp = "";
 6842|      0|                        }
 6843|      0|                    }
 6844|      0|                    else {
 6845|      0|                        res_ptr = (char *)((void *)0);
 6846|      0|                        res_size = (size_t)0;
 6847|      0|                        {
 6848|      0|                            while (1) {
 6849|      0|while_continue: /* CIL Label */
 6850|      0|                                ;
 6851|      0|                                {
 6852|      0|                                    c = getc_unlocked(fp);
 6853|      0|                                }
 6854|      0|                                if (c == -1) {
 6855|      0|                                    goto while_break;
 6856|      0|                                }
 6857|      0|                                if (c == 10) {
 6858|      0|                                    goto __Cont;
 6859|      0|                                }
 6860|      0|                                else {
 6861|      0|                                    if (c == 32) {
 6862|      0|                                        goto __Cont;
 6863|      0|                                    }
 6864|      0|                                    else {
 6865|      0|                                        if (c == 9) {
 6866|      0|                                            goto __Cont;
 6867|      0|                                        }
 6868|      0|                                    }
 6869|      0|                                }
 6870|      0|                                if (c == 35) {
 6871|      0|                                    {
 6872|      0|                                        while (1) {
 6873|      0|while_continue___0: /* CIL Label */
 6874|      0|                                            ;
 6875|      0|                                            {
 6876|      0|                                                c = getc_unlocked(fp);
 6877|      0|                                            }
 6878|      0|                                            if (c == -1) {
 6879|      0|                                                goto while_break___0;
 6880|      0|                                            }
 6881|      0|                                            else {
 6882|      0|                                                if (c == 10) {
 6883|      0|                                                    goto while_break___0;
 6884|      0|                                                }
 6885|      0|                                            }
 6886|      0|                                        }
 6887|      0|while_break___0: /* CIL Label */
 6888|      0|                                        ;
 6889|      0|                                    }
 6890|      0|                                    if (c == -1) {
 6891|      0|                                        goto while_break;
 6892|      0|                                    }
 6893|      0|                                    goto __Cont;
 6894|      0|                                }
 6895|      0|                                {
 6896|      0|                                    ungetc(c, fp);
 6897|      0|                                    tmp___3 = fscanf((FILE * /* __restrict  */)fp,
 6898|      0|                                                     (char const * /* __restrict  */) "%50s %50s",
 6899|      0|                                                     buf1, buf2);
 6900|      0|                                }
 6901|      0|                                if (tmp___3 < 2) {
 6902|      0|                                    goto while_break;
 6903|      0|                                }
 6904|      0|                                {
 6905|      0|                                    l1 = strlen((char const *)(buf1));
 6906|      0|                                    l2 = strlen((char const *)(buf2));
 6907|      0|                                    old_res_ptr = res_ptr;
 6908|      0|                                }
 6909|      0|                                if (res_size == 0UL) {
 6910|      0|                                    {
 6911|      0|                                        res_size = ((l1 + 1UL) + l2) + 1UL;
 6912|      0|                                        res_ptr = (char *)malloc(res_size + 1UL);
 6913|      0|                                    }
 6914|      0|                                }
 6915|      0|                                else {
 6916|      0|                                    {
 6917|      0|                                        res_size += ((l1 + 1UL) + l2) + 1UL;
 6918|      0|                                        res_ptr = (char *)realloc((void *)res_ptr, res_size + 1UL);
 6919|      0|                                    }
 6920|      0|                                }
 6921|      0|                                if ((unsigned long)res_ptr == (unsigned long)((void *)0)) {
 6922|      0|                                    {
 6923|      0|                                        res_size = (size_t)0;
 6924|      0|                                        free((void *)old_res_ptr);
 6925|      0|                                    }
 6926|      0|                                    goto while_break;
 6927|      0|                                }
 6928|      0|                                {
 6929|      0|                                    strcpy((char * /* __restrict  */)(
 6930|      0|                                               ((res_ptr + res_size) - (l2 + 1UL)) - (l1 + 1UL)),
 6931|      0|                                           (char const * /* __restrict  */)(buf1));
 6932|      0|                                    strcpy((char * /* __restrict  */)((res_ptr + res_size) -
 6933|      0|                                                                      (l2 + 1UL)),
 6934|      0|                                           (char const * /* __restrict  */)(buf2));
 6935|      0|                                }
 6936|      0|__Cont:
 6937|      0|                                ;
 6938|      0|                            }
 6939|      0|while_break: /* CIL Label */
 6940|      0|                            ;
 6941|      0|                        }
 6942|      0|                        {
 6943|      0|                            rpl_fclose(fp);
 6944|      0|                        }
 6945|      0|                        if (res_size == 0UL) {
 6946|      0|                            cp = "";
 6947|      0|                        }
 6948|      0|                        else {
 6949|      0|                            *(res_ptr + res_size) = (char)'\000';
 6950|      0|                            cp = (char const *)res_ptr;
 6951|      0|                        }
 6952|      0|                    }
 6953|      0|                }
 6954|      0|                {
 6955|      0|                    free((void *)file_name___3);
 6956|      0|                }
 6957|      0|            }
 6958|      0|            charset_aliases = (char const * /* volatile  */)cp;
 6959|      0|        }
 6960|      0|        return (cp);
 6961|      0|    }
 6962|      0|}
 6963|       |char const *locale_charset(void)
 6964|      0|{
 6965|      0|    char const *codeset;
 6966|      0|    char const *aliases;
 6967|      0|    size_t tmp;
 6968|      0|    size_t tmp___0;
 6969|      0|    size_t tmp___1;
 6970|      0|    int tmp___2;
 6971|      0|    char *__cil_tmp8;
 6972|      0|    char *__cil_tmp9;
 6973|       |
 6974|      0|    {
 6975|      0|        {
 6976|      0|            codeset = (char const *)nl_langinfo(14);
 6977|      0|        }
 6978|      0|        if ((unsigned long)codeset == (unsigned long)((void *)0)) {
 6979|      0|            codeset = "";
 6980|      0|        }
 6981|      0|        {
 6982|      0|            aliases = get_charset_aliases();
 6983|      0|        }
 6984|      0|        {
 6985|      0|            while (1) {
 6986|      0|while_continue: /* CIL Label */
 6987|      0|                ;
 6988|      0|                if (!((int const) * aliases != 0)) {
 6989|      0|                    goto while_break;
 6990|      0|                }
 6991|      0|                {
 6992|      0|                    tmp___2 = strcmp(codeset, aliases);
 6993|      0|                }
 6994|      0|                if (tmp___2 == 0) {
 6995|      0|                    {
 6996|      0|                        tmp___1 = strlen(aliases);
 6997|      0|                        codeset = (aliases + tmp___1) + 1;
 6998|      0|                    }
 6999|      0|                    goto while_break;
 7000|      0|                }
 7001|      0|                else {
 7002|      0|                    if ((int const) * (aliases + 0) == 42) {
 7003|      0|                        if ((int const) * (aliases + 1) == 0) {
 7004|      0|                            {
 7005|      0|                                tmp___1 = strlen(aliases);
 7006|      0|                                codeset = (aliases + tmp___1) + 1;
 7007|      0|                            }
 7008|      0|                            goto while_break;
 7009|      0|                        }
 7010|      0|                    }
 7011|      0|                }
 7012|      0|                {
 7013|      0|                    tmp = strlen(aliases);
 7014|      0|                    aliases += tmp + 1UL;
 7015|      0|                    tmp___0 = strlen(aliases);
 7016|      0|                    aliases += tmp___0 + 1UL;
 7017|      0|                }
 7018|      0|            }
 7019|      0|while_break: /* CIL Label */
 7020|      0|            ;
 7021|      0|        }
 7022|      0|        if ((int const) * (codeset + 0) == 0) {
 7023|      0|            codeset = "ASCII";
 7024|      0|        }
 7025|      0|        return (codeset);
 7026|      0|    }
 7027|      0|}
 7028|       |extern __attribute__((__nothrow__)) int(__attribute__((
 7029|       |        __nonnull__(2, 4), __leaf__)) linkat)(int __fromfd, char const *__from,
 7030|       |                int __tofd, char const *__to,
 7031|       |                int __flags);
 7032|       |static int have_follow_really;
 7033|       |void initbuffer(struct linebuffer *linebuffer);
 7034|       |struct linebuffer *readlinebuffer_delim(struct linebuffer *linebuffer,
 7035|       |                                        FILE *stream, char delimiter);
 7036|       |void initbuffer(struct linebuffer *linebuffer)
 7037|      4|{
 7038|       |
 7039|      4|    {
 7040|      4|        {
 7041|      4|            memset((void *)linebuffer, 0, sizeof(*linebuffer));
 7042|      4|        }
 7043|      4|        return;
 7044|      4|    }
 7045|      4|}
 7046|       |struct linebuffer *readlinebuffer_delim(struct linebuffer *linebuffer,
 7047|       |                                        FILE *stream, char delimiter)
 7048|  8.70k|{
 7049|  8.70k|    int c;
 7050|  8.70k|    char *buffer;
 7051|  8.70k|    char *p;
 7052|  8.70k|    char *end;
 7053|  8.70k|    int tmp;
 7054|  8.70k|    int tmp___0;
 7055|  8.70k|    size_t oldsize;
 7056|  8.70k|    char *tmp___1;
 7057|       |
 7058|  8.70k|    {
 7059|  8.70k|        {
 7060|  8.70k|            buffer = linebuffer->buffer;
 7061|  8.70k|            p = linebuffer->buffer;
 7062|  8.70k|            end = buffer + linebuffer->size;
 7063|  8.70k|            tmp = feof_unlocked(stream);
 7064|  8.70k|        }
 7065|  8.70k|        if (tmp) {
 7066|      0|            return ((struct linebuffer *)((void *)0));
 7067|      0|        }
 7068|  8.70k|        {
 7069|   338k|            while (1) {
 7070|   338k|while_continue: /* CIL Label */
 7071|   338k|                ;
 7072|   338k|                {
 7073|   338k|                    c = getc_unlocked(stream);
 7074|   338k|                }
 7075|   338k|                if (c == -1) {
 7076|      2|                    if ((unsigned long)p == (unsigned long)buffer) {
 7077|      2|                        return ((struct linebuffer *)((void *)0));
 7078|      2|                    }
 7079|      0|                    else {
 7080|      0|                        {
 7081|      0|                            tmp___0 = ferror_unlocked(stream);
 7082|      0|                        }
 7083|      0|                        if (tmp___0) {
 7084|      0|                            return ((struct linebuffer *)((void *)0));
 7085|      0|                        }
 7086|      0|                    }
 7087|      0|                    if ((int)*(p + -1) == (int)delimiter) {
 7088|      0|                        goto while_break;
 7089|      0|                    }
 7090|      0|                    c = (int)delimiter;
 7091|      0|                }
 7092|   338k|                if ((unsigned long)p == (unsigned long)end) {
 7093|      4|                    {
 7094|      4|                        oldsize = linebuffer->size;
 7095|      4|                        buffer = (char *)x2realloc((void *)buffer, &linebuffer->size);
 7096|      4|                        p = buffer + oldsize;
 7097|      4|                        linebuffer->buffer = buffer;
 7098|      4|                        end = buffer + linebuffer->size;
 7099|      4|                    }
 7100|      4|                }
 7101|   338k|                tmp___1 = p;
 7102|   338k|                p++;
 7103|   338k|                *tmp___1 = (char)c;
 7104|   338k|                if (!(c != (int)delimiter)) {
 7105|  8.69k|                    goto while_break;
 7106|  8.69k|                }
 7107|   338k|            }
 7108|  8.69k|while_break: /* CIL Label */
 7109|  8.69k|            ;
 7110|  8.69k|        }
 7111|      0|        linebuffer->length = (size_t)(p - buffer);
 7112|  8.69k|        return (linebuffer);
 7113|  8.70k|    }
 7114|  8.70k|}
 7115|       |extern __attribute__((__nothrow__)) long double(__attribute__((
 7116|       |            __nonnull__(1), __leaf__)) strtold)(char const *__restrict __nptr,
 7117|       |                    char **__restrict __endptr);
 7118|       |#pragma GCC diagnostic ignored "-Wtype-limits"
 7119|       |#pragma GCC diagnostic ignored "-Wtype-limits"
 7120|       |extern struct passwd *getpwuid(__uid_t __uid);
 7121|       |static struct userid *user_alist;
 7122|       |static struct userid *nouser_alist;
 7123|       |static struct userid *group_alist;
 7124|       |static struct userid *nogroup_alist;
 7125|       |extern __attribute__((__nothrow__)) struct lconv *(
 7126|       |    __attribute__((__leaf__)) localeconv)(void);
 7127|       |static char const power_letter[9] = {
 7128|       |    (char const)0,   (char const)'K', (char const)'M',
 7129|       |    (char const)'G', (char const)'T', (char const)'P',
 7130|       |    (char const)'E', (char const)'Z', (char const)'Y'
 7131|       |};
 7132|       |static char const *const block_size_args[3] = {
 7133|       |    (char const * /* const  */) "human-readable",
 7134|       |    (char const * /* const  */) "si", (char const * /* const  */)0
 7135|       |};
 7136|       |static int const block_size_opts[2] = {(int const)176, (int const)144};
 7137|       |static struct hash_tuning const default_tuning = {0.0f, 1.0f, 0.8f, 1.414f,
 7138|       |           (_Bool)0
 7139|       |};
 7140|       |_Bool hard_locale(int category);
 7141|       |extern __attribute__((__nothrow__)) char *(__attribute__((__leaf__)) setlocale)(
 7142|       |    int __category, char const *__locale);
 7143|       |_Bool hard_locale(int category)
 7144|      2|{
 7145|      2|    _Bool hard;
 7146|      2|    char const *p;
 7147|      2|    char const *tmp;
 7148|      2|    int tmp___0;
 7149|      2|    int tmp___1;
 7150|      2|    char *locale;
 7151|      2|    char *tmp___2;
 7152|      2|    int tmp___3;
 7153|      2|    int tmp___4;
 7154|       |
 7155|      2|    {
 7156|      2|        {
 7157|      2|            hard = (_Bool)1;
 7158|      2|            tmp = (char const *)setlocale(category, (char const *)((void *)0));
 7159|      2|            p = tmp;
 7160|      2|        }
 7161|      2|        if (p) {
 7162|      2|            if (1) {
 7163|      2|                {
 7164|      2|                    tmp___0 = strcmp(p, "C");
 7165|      2|                }
 7166|      2|                if (tmp___0 == 0) {
 7167|      0|                    hard = (_Bool)0;
 7168|      0|                }
 7169|      2|                else {
 7170|      2|                    {
 7171|      2|                        tmp___1 = strcmp(p, "POSIX");
 7172|      2|                    }
 7173|      2|                    if (tmp___1 == 0) {
 7174|      0|                        hard = (_Bool)0;
 7175|      0|                    }
 7176|      2|                }
 7177|      2|            }
 7178|      0|            else {
 7179|      0|                {
 7180|      0|                    tmp___2 = strdup(p);
 7181|      0|                    locale = tmp___2;
 7182|      0|                }
 7183|      0|                if (locale) {
 7184|      0|                    {
 7185|      0|                        p = (char const *)setlocale(category, "C");
 7186|      0|                    }
 7187|      0|                    if (p) {
 7188|      0|                        {
 7189|      0|                            tmp___3 = strcmp(p, (char const *)locale);
 7190|      0|                        }
 7191|      0|                        if (tmp___3 == 0) {
 7192|      0|                            hard = (_Bool)0;
 7193|      0|                        }
 7194|      0|                        else {
 7195|      0|                            goto _L;
 7196|      0|                        }
 7197|      0|                    }
 7198|      0|                    else {
 7199|      0|_L: {
 7200|      0|                            p = (char const *)setlocale(category, "POSIX");
 7201|      0|                        }
 7202|      0|                        if (p) {
 7203|      0|                            {
 7204|      0|                                tmp___4 = strcmp(p, (char const *)locale);
 7205|      0|                            }
 7206|      0|                            if (tmp___4 == 0) {
 7207|      0|                                hard = (_Bool)0;
 7208|      0|                            }
 7209|      0|                        }
 7210|      0|                    }
 7211|      0|                    {
 7212|      0|                        setlocale(category, (char const *)locale);
 7213|      0|                        free((void *)locale);
 7214|      0|                    }
 7215|      0|                }
 7216|      0|            }
 7217|      2|        }
 7218|      2|        return (hard);
 7219|      2|    }
 7220|      2|}
 7221|       |extern void setgrent(void);
 7222|       |extern struct group *getgrent(void);
 7223|       |extern
 7224|       |__attribute__((__nothrow__)) int(__attribute__((__leaf__)) clock_gettime)(
 7225|       |    clockid_t __clock_id, struct timespec *__tp);
 7226|       |extern int fflush_unlocked(FILE *__stream);
 7227|       |extern __attribute__((__nothrow__)) int(
 7228|       |    __attribute__((__leaf__)) __fsetlocking)(FILE *__fp, int __type);
 7229|       |extern __attribute__((__nothrow__)) int(__attribute__((__leaf__)) tcgetattr)(
 7230|       |    int __fd, struct termios *__termios_p);
 7231|       |extern __attribute__((__nothrow__)) int(__attribute__((__leaf__)) tcsetattr)(
 7232|       |    int __fd, int __optional_actions, struct termios const *__termios_p);
 7233|       |static char *buf;
 7234|       |static size_t bufsize;
 7235|       |extern void(__attribute__((__nonnull__(1, 4))) qsort)(
 7236|       |    void *__base, size_t __nmemb, size_t __size,
 7237|       |    int (*__compar)(void const *, void const *));
 7238|       |extern __attribute__((__nothrow__)) int(__attribute__((
 7239|       |        __nonnull__(2), __leaf__)) fstatfs)(int __fildes, struct statfs *__buf);
 7240|       |extern __attribute__((__nothrow__)) float(__attribute__((
 7241|       |            __nonnull__(1), __leaf__)) strtof)(char const *__restrict __nptr,
 7242|       |                    char **__restrict __endptr);
 7243|       |extern __attribute__((__nothrow__)) int(
 7244|       |    __attribute__((__nonnull__(1, 2), __leaf__)) statfs)(char const *__file,
 7245|       |            struct statfs *__buf);
 7246|       |extern int fseeko(FILE *__stream, __off_t __off, int __whence);
 7247|       |extern __attribute__((__nothrow__))
 7248|       |__off_t(__attribute__((__leaf__)) lseek)(int __fd, __off_t __offset,
 7249|       |        int __whence);
 7250|       |int(__attribute__((__nonnull__(1))) rpl_fseeko)(FILE *fp, off_t offset,
 7251|       |        int whence)
 7252|      0|{
 7253|      0|    off_t pos;
 7254|      0|    int tmp;
 7255|      0|    off_t tmp___0;
 7256|      0|    int tmp___1;
 7257|       |
 7258|      0|    {
 7259|      0|        if ((unsigned long)fp->_IO_read_end == (unsigned long)fp->_IO_read_ptr) {
 7260|      0|            if ((unsigned long)fp->_IO_write_ptr ==
 7261|      0|                    (unsigned long)fp->_IO_write_base) {
 7262|      0|                if ((unsigned long)fp->_IO_save_base == (unsigned long)((void *)0)) {
 7263|      0|                    {
 7264|      0|                        tmp = fileno(fp);
 7265|      0|                        tmp___0 = lseek(tmp, offset, whence);
 7266|      0|                        pos = tmp___0;
 7267|      0|                    }
 7268|      0|                    if (pos == -1L) {
 7269|      0|                        return (-1);
 7270|      0|                    }
 7271|      0|                    fp->_flags &= -17;
 7272|      0|                    fp->_offset = pos;
 7273|      0|                    return (0);
 7274|      0|                }
 7275|      0|            }
 7276|      0|        }
 7277|      0|        {
 7278|      0|            tmp___1 = fseeko(fp, offset, whence);
 7279|      0|        }
 7280|      0|        return (tmp___1);
 7281|      0|    }
 7282|      0|}
 7283|       |extern FILE *freopen(char const *__restrict __filename,
 7284|       |                     char const *__restrict __modes, FILE *__restrict __stream);
 7285|       |extern
 7286|       |__attribute__((__nothrow__)) int(__attribute__((__leaf__)) dup2)(int __fd,
 7287|       |        int __fd2);
 7288|       |static _Bool protect_fd(int fd)
 7289|      0|{
 7290|      0|    int value;
 7291|      0|    int tmp;
 7292|      0|    int *tmp___0;
 7293|       |
 7294|      0|    {
 7295|      0|        {
 7296|      0|            tmp = open("/dev/null", 0);
 7297|      0|            value = tmp;
 7298|      0|        }
 7299|      0|        if (value != fd) {
 7300|      0|            if (0 <= value) {
 7301|      0|                {
 7302|      0|                    close(value);
 7303|      0|                    tmp___0 = __errno_location();
 7304|      0|                    *tmp___0 = 9;
 7305|      0|                }
 7306|      0|            }
 7307|      0|            return ((_Bool)0);
 7308|      0|        }
 7309|      0|        return ((_Bool)1);
 7310|      0|    }
 7311|      0|}
 7312|       |FILE *freopen_safer(char const *name, char const *mode, FILE *f)
 7313|      2|{
 7314|      2|    _Bool protect_in;
 7315|      2|    _Bool protect_out;
 7316|      2|    _Bool protect_err;
 7317|      2|    int saved_errno;
 7318|      2|    int tmp;
 7319|      2|    int tmp___0;
 7320|      2|    int tmp___1;
 7321|      2|    int tmp___2;
 7322|      2|    _Bool tmp___3;
 7323|      2|    _Bool tmp___4;
 7324|      2|    _Bool tmp___5;
 7325|      2|    int *tmp___6;
 7326|      2|    int *tmp___7;
 7327|       |
 7328|      2|    {
 7329|      2|        {
 7330|      2|            protect_in = (_Bool)0;
 7331|      2|            protect_out = (_Bool)0;
 7332|      2|            protect_err = (_Bool)0;
 7333|      2|            tmp = fileno(f);
 7334|      2|        }
 7335|      2|        {
 7336|      2|            if (tmp == 2) {
 7337|      0|                goto case_2;
 7338|      0|            }
 7339|      2|            if (tmp == 1) {
 7340|      0|                goto case_1;
 7341|      0|            }
 7342|      2|            if (tmp == 0) {
 7343|      2|                goto case_0;
 7344|      2|            }
 7345|      0|            goto switch_default;
 7346|      0|switch_default: { /* CIL Label */
 7347|      0|                tmp___0 = dup2(2, 2);
 7348|      0|            }
 7349|      0|            if (tmp___0 != 2) {
 7350|      0|                protect_err = (_Bool)1;
 7351|      0|            }
 7352|      0|case_2: { /* CIL Label */
 7353|      0|                tmp___1 = dup2(1, 1);
 7354|      0|            }
 7355|      0|            if (tmp___1 != 1) {
 7356|      0|                protect_out = (_Bool)1;
 7357|      0|            }
 7358|      0|case_1: { /* CIL Label */
 7359|      0|                tmp___2 = dup2(0, 0);
 7360|      0|            }
 7361|      0|            if (tmp___2 != 0) {
 7362|      0|                protect_in = (_Bool)1;
 7363|      0|            }
 7364|      2|case_0: /* CIL Label */
 7365|      2|            goto switch_break;
 7366|      2|switch_break: /* CIL Label */
 7367|      2|            ;
 7368|      2|        }
 7369|      2|        if (protect_in) {
 7370|      0|            {
 7371|      0|                tmp___5 = protect_fd(0);
 7372|      0|            }
 7373|      0|            if (tmp___5) {
 7374|      0|                goto _L___0;
 7375|      0|            }
 7376|      0|            else {
 7377|      0|                f = (FILE *)((void *)0);
 7378|      0|            }
 7379|      0|        }
 7380|      2|        else {
 7381|      2|_L___0:
 7382|      2|            if (protect_out) {
 7383|      0|                {
 7384|      0|                    tmp___4 = protect_fd(1);
 7385|      0|                }
 7386|      0|                if (tmp___4) {
 7387|      0|                    goto _L;
 7388|      0|                }
 7389|      0|                else {
 7390|      0|                    f = (FILE *)((void *)0);
 7391|      0|                }
 7392|      0|            }
 7393|      2|            else {
 7394|      2|_L:
 7395|      2|                if (protect_err) {
 7396|      0|                    {
 7397|      0|                        tmp___3 = protect_fd(2);
 7398|      0|                    }
 7399|      0|                    if (tmp___3) {
 7400|      0|                        {
 7401|      0|                            f = freopen((char const * /* __restrict  */)name,
 7402|      0|                                        (char const * /* __restrict  */)mode,
 7403|      0|                                        (FILE * /* __restrict  */)f);
 7404|      0|                        }
 7405|      0|                    }
 7406|      0|                    else {
 7407|      0|                        f = (FILE *)((void *)0);
 7408|      0|                    }
 7409|      0|                }
 7410|      2|                else {
 7411|      2|                    {
 7412|      2|                        f = freopen((char const * /* __restrict  */)name,
 7413|      2|                                    (char const * /* __restrict  */)mode,
 7414|      2|                                    (FILE * /* __restrict  */)f);
 7415|      2|                    }
 7416|      2|                }
 7417|      2|            }
 7418|      2|        }
 7419|      2|        {
 7420|      2|            tmp___6 = __errno_location();
 7421|      2|            saved_errno = *tmp___6;
 7422|      2|        }
 7423|      2|        if (protect_err) {
 7424|      0|            {
 7425|      0|                close(2);
 7426|      0|            }
 7427|      0|        }
 7428|      2|        if (protect_out) {
 7429|      0|            {
 7430|      0|                close(1);
 7431|      0|            }
 7432|      0|        }
 7433|      2|        if (protect_in) {
 7434|      0|            {
 7435|      0|                close(0);
 7436|      0|            }
 7437|      0|        }
 7438|      2|        if (!f) {
 7439|      0|            {
 7440|      0|                tmp___7 = __errno_location();
 7441|      0|                *tmp___7 = saved_errno;
 7442|      0|            }
 7443|      0|        }
 7444|      2|        return (f);
 7445|      2|    }
 7446|      2|}
 7447|       |extern __attribute__((__nothrow__)) void(__attribute__((__leaf__)) __fpurge)(
 7448|       |    FILE *__fp);
 7449|       |extern int fputc(int __c, FILE *__stream);
 7450|       |#pragma GCC diagnostic ignored "-Wsuggest-attribute=const"
 7451|       |extern int fflush(FILE *__stream);
 7452|       |extern __attribute__((__nothrow__)) int(__attribute__((__leaf__)) __freading)(
 7453|       |    FILE *__fp);
 7454|       |__inline static void clear_ungetc_buffer_preserving_position(FILE *fp)
 7455|      2|{
 7456|       |
 7457|      2|    {
 7458|      2|        if (fp->_flags & 256) {
 7459|      0|            {
 7460|      0|                rpl_fseeko(fp, (off_t)0, 1);
 7461|      0|            }
 7462|      0|        }
 7463|      2|        return;
 7464|      2|    }
 7465|      2|}
 7466|       |int rpl_fflush(FILE *stream)
 7467|      6|{
 7468|      6|    int tmp;
 7469|      6|    int tmp___0;
 7470|      6|    int tmp___1;
 7471|       |
 7472|      6|    {
 7473|      6|        if ((unsigned long)stream == (unsigned long)((void *)0)) {
 7474|      0|            {
 7475|      0|                tmp = fflush(stream);
 7476|      0|            }
 7477|      0|            return (tmp);
 7478|      0|        }
 7479|      6|        else {
 7480|      6|            {
 7481|      6|                tmp___0 = __freading(stream);
 7482|      6|            }
 7483|      6|            if (!(tmp___0 != 0)) {
 7484|      4|                {
 7485|      4|                    tmp = fflush(stream);
 7486|      4|                }
 7487|      4|                return (tmp);
 7488|      4|            }
 7489|      6|        }
 7490|      2|        {
 7491|      2|            clear_ungetc_buffer_preserving_position(stream);
 7492|      2|            tmp___1 = fflush(stream);
 7493|      2|        }
 7494|      2|        return (tmp___1);
 7495|      6|    }
 7496|      6|}
 7497|       |extern int fcntl(int __fd, int __cmd, ...);
 7498|       |static int have_dupfd_cloexec = 0;
 7499|       |extern int fclose(FILE *__stream);
 7500|       |int(__attribute__((__nonnull__(1))) rpl_fclose)(FILE *fp)
 7501|      6|{
 7502|      6|    int saved_errno;
 7503|      6|    int fd;
 7504|      6|    int result;
 7505|      6|    int tmp;
 7506|      6|    int *tmp___0;
 7507|      6|    int tmp___1;
 7508|      6|    int tmp___2;
 7509|      6|    __off_t tmp___3;
 7510|      6|    int tmp___4;
 7511|      6|    int *tmp___5;
 7512|       |
 7513|      6|    {
 7514|      6|        {
 7515|      6|            saved_errno = 0;
 7516|      6|            result = 0;
 7517|      6|            fd = fileno(fp);
 7518|      6|        }
 7519|      6|        if (fd < 0) {
 7520|      0|            {
 7521|      0|                tmp = fclose(fp);
 7522|      0|            }
 7523|      0|            return (tmp);
 7524|      0|        }
 7525|      6|        {
 7526|      6|            tmp___1 = __freading(fp);
 7527|      6|        }
 7528|      6|        if (tmp___1 != 0) {
 7529|      2|            {
 7530|      2|                tmp___2 = fileno(fp);
 7531|      2|                tmp___3 = lseek(tmp___2, (__off_t)0, 1);
 7532|      2|            }
 7533|      2|            if (tmp___3 != -1L) {
 7534|      6|_L: {
 7535|      6|                    tmp___4 = rpl_fflush(fp);
 7536|      6|                }
 7537|      6|                if (tmp___4) {
 7538|      0|                    {
 7539|      0|                        tmp___0 = __errno_location();
 7540|      0|                        saved_errno = *tmp___0;
 7541|      0|                    }
 7542|      0|                }
 7543|      6|            }
 7544|      2|        }
 7545|      4|        else {
 7546|      4|            goto _L;
 7547|      4|        }
 7548|      6|        {
 7549|      6|            result = fclose(fp);
 7550|      6|        }
 7551|      6|        if (saved_errno != 0) {
 7552|      0|            {
 7553|      0|                tmp___5 = __errno_location();
 7554|      0|                *tmp___5 = saved_errno;
 7555|      0|                result = -1;
 7556|      0|            }
 7557|      0|        }
 7558|      6|        return (result);
 7559|      6|    }
 7560|      6|}
 7561|       |extern __attribute__((__nothrow__)) int(
 7562|       |    __attribute__((__nonnull__(1), __leaf__)) sigemptyset)(sigset_t *__set);
 7563|       |extern __attribute__((__nothrow__)) int(__attribute__((
 7564|       |        __nonnull__(1), __leaf__)) sigaddset)(sigset_t *__set, int __signo);
 7565|       |extern __attribute__((__nothrow__)) int(__attribute__((__leaf__)) sigaction)(
 7566|       |    int __sig, struct sigaction const *__restrict __act,
 7567|       |    struct sigaction *__restrict __oact);
 7568|       |static int fatal_signals[7] = {2, 15, 1, 13, 24, 25, 0};
 7569|       |static _Bool fatal_signals_initialized = (_Bool)0;
 7570|       |static actions_entry_t static_actions[32];
 7571|       |static actions_entry_t *volatile actions =
 7572|       |    (actions_entry_t * /* volatile  */)(static_actions);
 7573|       |static int volatile actions_count = (int volatile)0;
 7574|       |static size_t actions_allocated =
 7575|       |    sizeof(static_actions) / sizeof(static_actions[0]);
 7576|       |static struct sigaction saved_sigactions[64];
 7577|       |static _Bool cleanup_initialized = (_Bool)0;
 7578|       |static sigset_t fatal_signal_set;
 7579|       |static _Bool fatal_signal_set_initialized = (_Bool)0;
 7580|       |extern
 7581|       |__attribute__((__nothrow__)) int(__attribute__((__leaf__)) posix_fadvise)(
 7582|       |    int __fd, off_t __offset, off_t __len, int __advise);
 7583|       |void fdadvise(int fd, off_t offset, off_t len, fadvice_t advice);
 7584|       |void fadvise(FILE *fp, fadvice_t advice);
 7585|       |void fdadvise(int fd, off_t offset, off_t len, fadvice_t advice)
 7586|      2|{
 7587|      2|    int __x;
 7588|      2|    int tmp;
 7589|       |
 7590|      2|    {
 7591|      2|        {
 7592|      2|            tmp = posix_fadvise(fd, offset, len, (int)advice);
 7593|      2|            __x = tmp;
 7594|      2|        }
 7595|      2|        return;
 7596|      2|    }
 7597|      2|}
 7598|       |void fadvise(FILE *fp, fadvice_t advice)
 7599|      2|{
 7600|      2|    int tmp;
 7601|       |
 7602|      2|    {
 7603|      2|        if (fp) {
 7604|      2|            {
 7605|      2|                tmp = fileno(fp);
 7606|      2|                fdadvise(tmp, (off_t)0, (off_t)0, advice);
 7607|      2|            }
 7608|      2|        }
 7609|      2|        return;
 7610|      2|    }
 7611|      2|}
 7612|       |int volatile exit_failure = (int volatile)1;
 7613|       |extern __attribute__((__nothrow__))
 7614|       |size_t(__attribute__((__nonnull__(1, 2),
 7615|       |                      __leaf__)) strcspn)(char const *__s, char const *__reject)
 7616|       |__attribute__((__pure__));
 7617|       |extern int fnmatch(char const *__pattern, char const *__name, int __flags);
 7618|       |#pragma GCC diagnostic ignored "-Wtype-limits"
 7619|       |#pragma GCC diagnostic ignored "-Wtype-limits"
 7620|       |#pragma weak pthread_key_create
 7621|       |#pragma weak pthread_getspecific
 7622|       |#pragma weak pthread_setspecific
 7623|       |#pragma weak pthread_key_delete
 7624|       |#pragma weak pthread_self
 7625|       |#pragma weak pthread_cancel
 7626|       |#pragma GCC diagnostic ignored "-Wsuggest-attribute=pure"
 7627|       |#pragma GCC diagnostic ignored "-Wsuggest-attribute=const"
 7628|       |#pragma GCC diagnostic ignored "-Wtype-limits"
 7629|       |#pragma weak pthread_mutex_init
 7630|       |#pragma weak pthread_mutex_lock
 7631|       |#pragma weak pthread_mutex_unlock
 7632|       |#pragma weak pthread_mutex_destroy
 7633|       |#pragma weak pthread_rwlock_init
 7634|       |#pragma weak pthread_rwlock_rdlock
 7635|       |#pragma weak pthread_rwlock_wrlock
 7636|       |#pragma weak pthread_rwlock_unlock
 7637|       |#pragma weak pthread_rwlock_destroy
 7638|       |#pragma weak pthread_once
 7639|       |#pragma weak pthread_cond_init
 7640|       |#pragma weak pthread_cond_wait
 7641|       |#pragma weak pthread_cond_signal
 7642|       |#pragma weak pthread_cond_broadcast
 7643|       |#pragma weak pthread_cond_destroy
 7644|       |#pragma weak pthread_mutexattr_init
 7645|       |#pragma weak pthread_mutexattr_settype
 7646|       |#pragma weak pthread_mutexattr_destroy
 7647|       |#pragma weak pthread_self
 7648|       |#pragma weak pthread_cancel
 7649|       |#pragma GCC diagnostic ignored "-Wtype-limits"
 7650|       |#pragma GCC diagnostic ignored "-Wtype-limits"
 7651|       |#pragma GCC diagnostic ignored "-Wsuggest-attribute=const"
 7652|       |char const *Version = "8.16";
 7653|       |extern char *optarg;
 7654|       |extern __attribute__((__nothrow__)) char *(
 7655|       |    __attribute__((__leaf__)) textdomain)(char const *__domainname);
 7656|       |extern __attribute__((__nothrow__)) char *(__attribute__((
 7657|       |            __leaf__)) bindtextdomain)(char const *__domainname, char const *__dirname);
 7658|       |extern int putchar_unlocked(int __c);
 7659|       |extern size_t fwrite_unlocked(void const *__restrict __ptr, size_t __size,
 7660|       |                              size_t __n, FILE *__restrict __stream);
 7661|       |__inline static void emit_ancillary_info(void)
 7662|      0|{
 7663|      0|    char *tmp;
 7664|      0|    char *tmp___0;
 7665|      0|    char *tmp___1;
 7666|      0|    char *tmp___2;
 7667|      0|    char const *lc_messages;
 7668|      0|    char const *tmp___3;
 7669|      0|    char *tmp___4;
 7670|      0|    char *tmp___5;
 7671|      0|    int tmp___6;
 7672|      0|    char *tmp___7;
 7673|      0|    char *tmp___8;
 7674|      0|    char *__cil_tmp13;
 7675|      0|    char *__cil_tmp14;
 7676|      0|    char *__cil_tmp15;
 7677|      0|    char *__cil_tmp16;
 7678|      0|    char *__cil_tmp17;
 7679|       |
 7680|      0|    {
 7681|      0|        {
 7682|      0|            tmp = last_component(program_name);
 7683|      0|            tmp___0 = gettext("\nReport %s bugs to %s\n");
 7684|      0|            printf((char const * /* __restrict  */)tmp___0, tmp,
 7685|      0|                   "bug-coreutils@gnu.org");
 7686|      0|            tmp___1 = gettext("%s home page: <%s>\n");
 7687|      0|            printf((char const * /* __restrict  */)tmp___1, "GNU coreutils",
 7688|      0|                   "http://www.gnu.org/software/coreutils/");
 7689|      0|            tmp___2 = gettext(
 7690|      0|                          "General help using GNU software: <http://www.gnu.org/gethelp/>\n");
 7691|      0|            fputs_unlocked((char const * /* __restrict  */)tmp___2,
 7692|      0|                           (FILE * /* __restrict  */)stdout);
 7693|      0|            tmp___3 = (char const *)setlocale(5, (char const *)((void *)0));
 7694|      0|            lc_messages = tmp___3;
 7695|      0|        }
 7696|      0|        if (lc_messages) {
 7697|      0|            {
 7698|      0|                tmp___6 = strncmp(lc_messages, "en_", sizeof("en_") - 1UL);
 7699|      0|            }
 7700|      0|            if (tmp___6) {
 7701|      0|                {
 7702|      0|                    tmp___4 = last_component(program_name);
 7703|      0|                    tmp___5 = gettext("Report %s translation bugs to "
 7704|      0|                                      "<http://translationproject.org/team/>\n");
 7705|      0|                    printf((char const * /* __restrict  */)tmp___5, tmp___4);
 7706|      0|                }
 7707|      0|            }
 7708|      0|        }
 7709|      0|        {
 7710|      0|            tmp___7 = last_component(program_name);
 7711|      0|            tmp___8 = gettext("For complete documentation, run: info coreutils \'%s "
 7712|      0|                              "invocation\'\n");
 7713|      0|            printf((char const * /* __restrict  */)tmp___8, tmp___7);
 7714|      0|        }
 7715|      0|        return;
 7716|      0|    }
 7717|      0|}
 7718|       |__inline static void emit_try_help(void)
 7719|      0|{
 7720|      0|    char *tmp;
 7721|      0|    char *__cil_tmp2;
 7722|       |
 7723|      0|    {
 7724|      0|        {
 7725|      0|            tmp = gettext("Try \'%s --help\' for more information.\n");
 7726|      0|            fprintf((FILE * /* __restrict  */)stderr,
 7727|      0|                    (char const * /* __restrict  */)tmp, program_name);
 7728|      0|        }
 7729|      0|        return;
 7730|      0|    }
 7731|      0|}
 7732|       |static _Bool hard_LC_COLLATE;
 7733|       |static size_t skip_fields;
 7734|       |static size_t skip_chars;
 7735|       |static size_t check_chars;
 7736|       |static enum countmode countmode;
 7737|       |static _Bool output_unique;
 7738|       |static _Bool output_first_repeated;
 7739|       |static _Bool output_later_repeated;
 7740|       |static _Bool ignore_case;
 7741|       |static char const *const delimit_method_string[4] = {
 7742|       |    (char const * /* const  */) "none", (char const * /* const  */) "prepend",
 7743|       |    (char const * /* const  */) "separate",
 7744|       |    (char const * /* const  */)((void *)0)
 7745|       |};
 7746|       |static enum delimit_method const delimit_method_map[3] = {
 7747|       |    (enum delimit_method const)0, (enum delimit_method const)1,
 7748|       |    (enum delimit_method const)2
 7749|       |};
 7750|       |static enum delimit_method delimit_groups;
 7751|       |static struct option const longopts[12] = {
 7752|       |    {"count", 0, (int *)((void *)0), 'c'},
 7753|       |    {"repeated", 0, (int *)((void *)0), 'd'},
 7754|       |    {"all-repeated", 2, (int *)((void *)0), 'D'},
 7755|       |    {"ignore-case", 0, (int *)((void *)0), 'i'},
 7756|       |    {"unique", 0, (int *)((void *)0), 'u'},
 7757|       |    {"skip-fields", 1, (int *)((void *)0), 'f'},
 7758|       |    {"skip-chars", 1, (int *)((void *)0), 's'},
 7759|       |    {"check-chars", 1, (int *)((void *)0), 'w'},
 7760|       |    {"zero-terminated", 0, (int *)((void *)0), 'z'},
 7761|       |    {"help", 0, (int *)((void *)0), -130},
 7762|       |    {"version", 0, (int *)((void *)0), -131},
 7763|       |    {(char const *)((void *)0), 0, (int *)((void *)0), 0}
 7764|       |};
 7765|       |__attribute__((__noreturn__)) void usage(int status);
 7766|       |void usage(int status)
 7767|      0|{
 7768|      0|    char *tmp;
 7769|      0|    char *tmp___0;
 7770|      0|    char *tmp___1;
 7771|      0|    char *tmp___2;
 7772|      0|    char *tmp___3;
 7773|      0|    char *tmp___4;
 7774|      0|    char *tmp___5;
 7775|      0|    char *tmp___6;
 7776|      0|    char *tmp___7;
 7777|      0|    char *tmp___8;
 7778|      0|    char *__cil_tmp12;
 7779|      0|    char *__cil_tmp13;
 7780|      0|    char *__cil_tmp14;
 7781|      0|    char *__cil_tmp15;
 7782|      0|    char *__cil_tmp16;
 7783|      0|    char *__cil_tmp17;
 7784|      0|    char *__cil_tmp18;
 7785|      0|    char *__cil_tmp19;
 7786|      0|    char *__cil_tmp20;
 7787|      0|    char *__cil_tmp21;
 7788|       |
 7789|      0|    {
 7790|      0|        if (status != 0) {
 7791|      0|            {
 7792|      0|                emit_try_help();
 7793|      0|            }
 7794|      0|        }
 7795|      0|        else {
 7796|      0|            {
 7797|      0|                tmp = gettext("Usage: %s [OPTION]... [INPUT [OUTPUT]]\n");
 7798|      0|                printf((char const * /* __restrict  */)tmp, program_name);
 7799|      0|                tmp___0 = gettext(
 7800|      0|                              "Filter adjacent matching lines from INPUT (or standard "
 7801|      0|                              "input),\nwriting to OUTPUT (or standard output).\n\nWith no "
 7802|      0|                              "options, matching lines are merged to the first occurrence.\n\n");
 7803|      0|                fputs_unlocked((char const * /* __restrict  */)tmp___0,
 7804|      0|                               (FILE * /* __restrict  */)stdout);
 7805|      0|                tmp___1 = gettext("Mandatory arguments to long options are mandatory "
 7806|      0|                                  "for short options too.\n");
 7807|      0|                fputs_unlocked((char const * /* __restrict  */)tmp___1,
 7808|      0|                               (FILE * /* __restrict  */)stdout);
 7809|      0|                tmp___2 = gettext("  -c, --count           prefix lines by the number "
 7810|      0|                                  "of occurrences\n  -d, --repeated        only print "
 7811|      0|                                  "duplicate lines\n");
 7812|      0|                fputs_unlocked((char const * /* __restrict  */)tmp___2,
 7813|      0|                               (FILE * /* __restrict  */)stdout);
 7814|      0|                tmp___3 = gettext(
 7815|      0|                              "  -D, --all-repeated[=delimit-method]  print all duplicate "
 7816|      0|                              "lines\n                        "
 7817|      0|                              "delimit-method={none(default),prepend,separate}\n                 "
 7818|      0|                              "       Delimiting is done with blank lines\n  -f, --skip-fields=N "
 7819|      0|                              "  avoid comparing the first N fields\n  -i, --ignore-case     "
 7820|      0|                              "ignore differences in case when comparing\n  -s, --skip-chars=N   "
 7821|      0|                              " avoid comparing the first N characters\n  -u, --unique          "
 7822|      0|                              "only print unique lines\n  -z, --zero-terminated  end lines with "
 7823|      0|                              "0 byte, not newline\n");
 7824|      0|                fputs_unlocked((char const * /* __restrict  */)tmp___3,
 7825|      0|                               (FILE * /* __restrict  */)stdout);
 7826|      0|                tmp___4 = gettext("  -w, --check-chars=N   compare no more than N "
 7827|      0|                                  "characters in lines\n");
 7828|      0|                fputs_unlocked((char const * /* __restrict  */)tmp___4,
 7829|      0|                               (FILE * /* __restrict  */)stdout);
 7830|      0|                tmp___5 = gettext("      --help     display this help and exit\n");
 7831|      0|                fputs_unlocked((char const * /* __restrict  */)tmp___5,
 7832|      0|                               (FILE * /* __restrict  */)stdout);
 7833|      0|                tmp___6 =
 7834|      0|                    gettext("      --version  output version information and exit\n");
 7835|      0|                fputs_unlocked((char const * /* __restrict  */)tmp___6,
 7836|      0|                               (FILE * /* __restrict  */)stdout);
 7837|      0|                tmp___7 = gettext(
 7838|      0|                              "\nA field is a run of blanks (usually spaces and/or TABs), then "
 7839|      0|                              "non-blank\ncharacters.  Fields are skipped before chars.\n");
 7840|      0|                fputs_unlocked((char const * /* __restrict  */)tmp___7,
 7841|      0|                               (FILE * /* __restrict  */)stdout);
 7842|      0|                tmp___8 =
 7843|      0|                    gettext("\nNote: \'uniq\' does not detect repeated lines unless "
 7844|      0|                            "they are adjacent.\nYou may want to sort the input first, "
 7845|      0|                            "or use \'sort -u\' without \'uniq\'.\nAlso, comparisons "
 7846|      0|                            "honor the rules specified by \'LC_COLLATE\'.\n");
 7847|      0|                fputs_unlocked((char const * /* __restrict  */)tmp___8,
 7848|      0|                               (FILE * /* __restrict  */)stdout);
 7849|      0|                emit_ancillary_info();
 7850|      0|            }
 7851|      0|        }
 7852|      0|        {
 7853|      0|            exit(status);
 7854|      0|        }
 7855|      0|    }
 7856|      0|}
 7857|       |static size_t size_opt(char const *opt, char const *msgid)
 7858|      0|{
 7859|      0|    unsigned long size;
 7860|      0|    strtol_error tmp;
 7861|      0|    char *tmp___0;
 7862|      0|    unsigned long tmp___1;
 7863|      0|    char *__cil_tmp7;
 7864|       |
 7865|      0|    {
 7866|      0|        {
 7867|      0|            tmp = xstrtoul(opt, (char **)((void *)0), 10, &size, "");
 7868|      0|        }
 7869|      0|        {
 7870|      0|            if ((unsigned int)tmp == 0U) {
 7871|      0|                goto case_0;
 7872|      0|            }
 7873|      0|            if ((unsigned int)tmp == 1U) {
 7874|      0|                goto case_0;
 7875|      0|            }
 7876|      0|            goto switch_default;
 7877|      0|case_0: /* CIL Label */
 7878|      0|case_1: /* CIL Label */
 7879|      0|            goto switch_break;
 7880|      0|switch_default: { /* CIL Label */
 7881|      0|                tmp___0 = gettext(msgid);
 7882|      0|                error(1, 0, "%s: %s", opt, tmp___0);
 7883|      0|            }
 7884|      0|switch_break: /* CIL Label */
 7885|      0|            ;
 7886|      0|        }
 7887|      0|        if (size < 0xffffffffffffffffUL) {
 7888|      0|            tmp___1 = size;
 7889|      0|        }
 7890|      0|        else {
 7891|      0|            tmp___1 = 0xffffffffffffffffUL;
 7892|      0|        }
 7893|      0|        return (tmp___1);
 7894|      0|    }
 7895|      0|}
 7896|       |static char *__attribute__((__pure__))
 7897|       |find_field(struct linebuffer const *line)
 7898|  8.69k|{
 7899|  8.69k|    size_t count;
 7900|  8.69k|    char const *lp;
 7901|  8.69k|    size_t size;
 7902|  8.69k|    size_t i;
 7903|  8.69k|    unsigned short const **tmp;
 7904|  8.69k|    unsigned char tmp___0;
 7905|  8.69k|    unsigned short const **tmp___1;
 7906|  8.69k|    unsigned char tmp___2;
 7907|  8.69k|    size_t tmp___3;
 7908|       |
 7909|  8.69k|    {
 7910|  8.69k|        lp = (char const *)line->buffer;
 7911|  8.69k|        size = (size_t)(line->length - 1UL);
 7912|  8.69k|        i = (size_t)0;
 7913|  8.69k|        count = (size_t)0;
 7914|  8.69k|        {
 7915|  8.69k|            while (1) {
 7916|  8.69k|while_continue: /* CIL Label */
 7917|  8.69k|                ;
 7918|  8.69k|                if (count < skip_fields) {
 7919|      0|                    if (!(i < size)) {
 7920|      0|                        goto while_break;
 7921|      0|                    }
 7922|      0|                }
 7923|  8.69k|                else {
 7924|  8.69k|                    goto while_break;
 7925|  8.69k|                }
 7926|      0|                {
 7927|      0|                    while (1) {
 7928|      0|while_continue___0: /* CIL Label */
 7929|      0|                        ;
 7930|      0|                        if (i < size) {
 7931|      0|                            {
 7932|      0|                                tmp = __ctype_b_loc();
 7933|      0|                                tmp___0 = to_uchar((char)*(lp + i));
 7934|      0|                            }
 7935|      0|                            if (!((int const) * (*tmp + (int)tmp___0) & 1)) {
 7936|      0|                                goto while_break___0;
 7937|      0|                            }
 7938|      0|                        }
 7939|      0|                        else {
 7940|      0|                            goto while_break___0;
 7941|      0|                        }
 7942|      0|                        i++;
 7943|      0|                    }
 7944|      0|while_break___0: /* CIL Label */
 7945|      0|                    ;
 7946|      0|                }
 7947|      0|                {
 7948|      0|                    while (1) {
 7949|      0|while_continue___1: /* CIL Label */
 7950|      0|                        ;
 7951|      0|                        if (i < size) {
 7952|      0|                            {
 7953|      0|                                tmp___1 = __ctype_b_loc();
 7954|      0|                                tmp___2 = to_uchar((char)*(lp + i));
 7955|      0|                            }
 7956|      0|                            if ((int const) * (*tmp___1 + (int)tmp___2) & 1) {
 7957|      0|                                goto while_break___1;
 7958|      0|                            }
 7959|      0|                        }
 7960|      0|                        else {
 7961|      0|                            goto while_break___1;
 7962|      0|                        }
 7963|      0|                        i++;
 7964|      0|                    }
 7965|      0|while_break___1: /* CIL Label */
 7966|      0|                    ;
 7967|      0|                }
 7968|      0|                count++;
 7969|      0|            }
 7970|  8.69k|while_break: /* CIL Label */
 7971|  8.69k|            ;
 7972|  8.69k|        }
 7973|  8.69k|        if (skip_chars < size - i) {
 7974|  8.63k|            tmp___3 = skip_chars;
 7975|  8.63k|        }
 7976|     65|        else {
 7977|     65|            tmp___3 = size - i;
 7978|     65|        }
 7979|  8.69k|        i += tmp___3;
 7980|  8.69k|        return ((char * /* __attribute__((__pure__)) */)(line->buffer + i));
 7981|  8.69k|    }
 7982|  8.69k|}
 7983|       |static _Bool different(char *old, char *new, size_t oldlen, size_t newlen)
 7984|  8.69k|{
 7985|  8.69k|    int tmp;
 7986|  8.69k|    int tmp___0;
 7987|  8.69k|    int tmp___1;
 7988|  8.69k|    int tmp___2;
 7989|  8.69k|    int tmp___3;
 7990|       |
 7991|  8.69k|    {
 7992|  8.69k|        if (check_chars < oldlen) {
 7993|      0|            oldlen = check_chars;
 7994|      0|        }
 7995|  8.69k|        if (check_chars < newlen) {
 7996|      0|            newlen = check_chars;
 7997|      0|        }
 7998|  8.69k|        if (ignore_case) {
 7999|      0|            if (oldlen != newlen) {
 8000|      0|                tmp___0 = 1;
 8001|      0|            }
 8002|      0|            else {
 8003|      0|                {
 8004|      0|                    tmp = memcasecmp((void const *)old, (void const *)new, oldlen);
 8005|      0|                }
 8006|      0|                if (tmp) {
 8007|      0|                    tmp___0 = 1;
 8008|      0|                }
 8009|      0|                else {
 8010|      0|                    tmp___0 = 0;
 8011|      0|                }
 8012|      0|            }
 8013|      0|            return ((_Bool)tmp___0);
 8014|      0|        }
 8015|  8.69k|        else {
 8016|  8.69k|            if (hard_LC_COLLATE) {
 8017|  8.69k|                {
 8018|  8.69k|                    tmp___1 = xmemcoll(old, oldlen, new, newlen);
 8019|  8.69k|                }
 8020|  8.69k|                return ((_Bool)(tmp___1 != 0));
 8021|  8.69k|            }
 8022|      0|            else {
 8023|      0|                if (oldlen != newlen) {
 8024|      0|                    tmp___3 = 1;
 8025|      0|                }
 8026|      0|                else {
 8027|      0|                    {
 8028|      0|                        tmp___2 = memcmp((void const *)old, (void const *)new, oldlen);
 8029|      0|                    }
 8030|      0|                    if (tmp___2) {
 8031|      0|                        tmp___3 = 1;
 8032|      0|                    }
 8033|      0|                    else {
 8034|      0|                        tmp___3 = 0;
 8035|      0|                    }
 8036|      0|                }
 8037|      0|                return ((_Bool)tmp___3);
 8038|      0|            }
 8039|  8.69k|        }
 8040|  8.69k|    }
 8041|  8.69k|}
 8042|       |static void writeline(struct linebuffer const *line, _Bool match,
 8043|       |                      uintmax_t linecount)
 8044|      0|{
 8045|      0|    int tmp;
 8046|      0|    int tmp___0;
 8047|       |
 8048|      0|    {
 8049|      0|        if (linecount == 0UL) {
 8050|      0|            tmp___0 = (int)output_unique;
 8051|      0|        }
 8052|      0|        else {
 8053|      0|            if (!match) {
 8054|      0|                tmp = (int)output_first_repeated;
 8055|      0|            }
 8056|      0|            else {
 8057|      0|                tmp = (int)output_later_repeated;
 8058|      0|            }
 8059|      0|            tmp___0 = tmp;
 8060|      0|        }
 8061|      0|        if (!tmp___0) {
 8062|      0|            return;
 8063|      0|        }
 8064|      0|        if ((unsigned int)countmode == 0U) {
 8065|      0|            {
 8066|      0|                printf((char const * /* __restrict  */) "%7lu ", linecount + 1UL);
 8067|      0|            }
 8068|      0|        }
 8069|      0|        {
 8070|      0|            fwrite_unlocked((void const * /* __restrict  */)line->buffer,
 8071|      0|                            sizeof(char), (size_t)line->length,
 8072|      0|                            (FILE * /* __restrict  */)stdout);
 8073|      0|        }
 8074|      0|        return;
 8075|      0|    }
 8076|      0|}
 8077|       |static void check_file(char const *infile, char const *outfile,
 8078|       |                       char delimiter)
 8079|      2|{
 8080|      2|    struct linebuffer lb1;
 8081|      2|    struct linebuffer lb2;
 8082|      2|    struct linebuffer *thisline;
 8083|      2|    struct linebuffer *prevline;
 8084|      2|    int *tmp;
 8085|      2|    int tmp___0;
 8086|      2|    FILE *tmp___1;
 8087|      2|    int *tmp___2;
 8088|      2|    int tmp___3;
 8089|      2|    FILE *tmp___4;
 8090|      2|    char *prevfield;
 8091|      2|    size_t prevlen;
 8092|      2|    char *thisfield;
 8093|      2|    size_t thislen;
 8094|      2|    struct linebuffer *tmp___5;
 8095|      2|    struct linebuffer *_tmp;
 8096|      2|    _Bool tmp___6;
 8097|      2|    int tmp___7;
 8098|      2|    char *prevfield___0;
 8099|      2|    size_t prevlen___0;
 8100|      2|    uintmax_t match_count;
 8101|      2|    _Bool first_delimiter;
 8102|      2|    struct linebuffer *tmp___8;
 8103|      2|    _Bool match;
 8104|      2|    char *thisfield___0;
 8105|      2|    size_t thislen___0;
 8106|      2|    int tmp___9;
 8107|      2|    struct linebuffer *tmp___10;
 8108|      2|    _Bool tmp___11;
 8109|      2|    int tmp___12;
 8110|      2|    struct linebuffer *_tmp___0;
 8111|      2|    int tmp___14;
 8112|      2|    char *tmp___15;
 8113|      2|    int tmp___16;
 8114|      2|    int tmp___17;
 8115|      2|    char *__cil_tmp42;
 8116|      2|    char *__cil_tmp43;
 8117|      2|    char *__cil_tmp44;
 8118|      2|    char *__cil_tmp45;
 8119|       |
 8120|      2|    {
 8121|      2|        {
 8122|      2|            tmp___0 = strcmp(infile, "-");
 8123|      2|        }
 8124|      2|        if (!(tmp___0 == 0)) {
 8125|      2|            {
 8126|      2|                tmp___1 = freopen_safer(infile, "r", stdin);
 8127|      2|            }
 8128|      2|            if (!tmp___1) {
 8129|      0|                {
 8130|      0|                    tmp = __errno_location();
 8131|      0|                    error(1, *tmp, "%s", infile);
 8132|      0|                }
 8133|      0|            }
 8134|      2|        }
 8135|      2|        {
 8136|      2|            tmp___3 = strcmp(outfile, "-");
 8137|      2|        }
 8138|      2|        if (!(tmp___3 == 0)) {
 8139|      0|            {
 8140|      0|                tmp___4 = freopen_safer(outfile, "w", stdout);
 8141|      0|            }
 8142|      0|            if (!tmp___4) {
 8143|      0|                {
 8144|      0|                    tmp___2 = __errno_location();
 8145|      0|                    error(1, *tmp___2, "%s", outfile);
 8146|      0|                }
 8147|      0|            }
 8148|      0|        }
 8149|      2|        {
 8150|      2|            fadvise(stdin, (fadvice_t)2);
 8151|      2|            thisline = &lb1;
 8152|      2|            prevline = &lb2;
 8153|      2|            initbuffer(thisline);
 8154|      2|            initbuffer(prevline);
 8155|      2|        }
 8156|      2|        if (output_unique) {
 8157|      2|            if (output_first_repeated) {
 8158|      2|                if ((unsigned int)countmode == 1U) {
 8159|      2|                    {
 8160|  8.70k|                        while (1) {
 8161|  8.70k|while_continue: /* CIL Label */
 8162|  8.70k|                            ;
 8163|  8.70k|                            {
 8164|  8.70k|                                tmp___7 = feof_unlocked(stdin);
 8165|  8.70k|                            }
 8166|  8.70k|                            if (tmp___7) {
 8167|      0|                                goto while_break;
 8168|      0|                            }
 8169|  8.70k|                            {
 8170|  8.70k|                                tmp___5 = readlinebuffer_delim(thisline, stdin, delimiter);
 8171|  8.70k|                            }
 8172|  8.70k|                            if ((unsigned long)tmp___5 ==
 8173|  8.70k|                                    (unsigned long)((struct linebuffer *)0)) {
 8174|      2|                                goto while_break;
 8175|      2|                            }
 8176|  8.69k|                            {
 8177|  8.69k|                                thisfield =
 8178|  8.69k|                                    (char *)find_field((struct linebuffer const *)thisline);
 8179|  8.69k|                                thislen = (thisline->length - 1UL) -
 8180|  8.69k|                                          (size_t)(thisfield - thisline->buffer);
 8181|  8.69k|                            }
 8182|  8.69k|                            if (prevline->length == 0UL) {
 8183|      2|                                goto _L;
 8184|      2|                            }
 8185|  8.69k|                            else {
 8186|  8.69k|                                {
 8187|  8.69k|                                    tmp___6 = different(thisfield, prevfield, thislen, prevlen);
 8188|  8.69k|                                }
 8189|  8.69k|                                if (tmp___6) {
 8190|  7.79k|_L: {
 8191|  7.79k|                                        fwrite_unlocked(
 8192|  7.79k|                                            (void const * /* __restrict  */)thisline->buffer,
 8193|  7.79k|                                            sizeof(char), thisline->length,
 8194|  7.79k|                                            (FILE * /* __restrict  */)stdout);
 8195|  7.79k|                                    }
 8196|  7.79k|                                    {
 8197|  7.79k|                                        while (1) {
 8198|  7.79k|while_continue___0: /* CIL Label */
 8199|  7.79k|                                            ;
 8200|  7.79k|                                            _tmp = prevline;
 8201|  7.79k|                                            prevline = thisline;
 8202|  7.79k|                                            thisline = _tmp;
 8203|  7.79k|                                            goto while_break___0;
 8204|  7.79k|                                        }
 8205|  7.79k|while_break___0: /* CIL Label */
 8206|  7.79k|                                        ;
 8207|  7.79k|                                    }
 8208|      0|                                    prevfield = thisfield;
 8209|  7.79k|                                    prevlen = thislen;
 8210|  7.79k|                                }
 8211|  8.69k|                            }
 8212|  8.69k|                        }
 8213|      2|while_break: /* CIL Label */
 8214|      2|                        ;
 8215|      2|                    }
 8216|      2|                }
 8217|      0|                else {
 8218|      0|                    goto _L___2;
 8219|      0|                }
 8220|      2|            }
 8221|      0|            else {
 8222|      0|                goto _L___2;
 8223|      0|            }
 8224|      2|        }
 8225|      0|        else {
 8226|      0|_L___2: {
 8227|      0|                match_count = (uintmax_t)0;
 8228|      0|                first_delimiter = (_Bool)1;
 8229|      0|                tmp___8 = readlinebuffer_delim(prevline, stdin, delimiter);
 8230|      0|            }
 8231|      0|            if ((unsigned long)tmp___8 == (unsigned long)((struct linebuffer *)0)) {
 8232|      0|                goto closefiles;
 8233|      0|            }
 8234|      0|            {
 8235|      0|                prevfield___0 = (char *)find_field((struct linebuffer const *)prevline);
 8236|      0|                prevlen___0 = (prevline->length - 1UL) -
 8237|      0|                              (size_t)(prevfield___0 - prevline->buffer);
 8238|      0|            }
 8239|      0|            {
 8240|      0|                while (1) {
 8241|      0|while_continue___1: /* CIL Label */
 8242|      0|                    ;
 8243|      0|                    {
 8244|      0|                        tmp___14 = feof_unlocked(stdin);
 8245|      0|                    }
 8246|      0|                    if (tmp___14) {
 8247|      0|                        goto while_break___1;
 8248|      0|                    }
 8249|      0|                    {
 8250|      0|                        tmp___10 = readlinebuffer_delim(thisline, stdin, delimiter);
 8251|      0|                    }
 8252|      0|                    if ((unsigned long)tmp___10 ==
 8253|      0|                            (unsigned long)((struct linebuffer *)0)) {
 8254|      0|                        {
 8255|      0|                            tmp___9 = ferror_unlocked(stdin);
 8256|      0|                        }
 8257|      0|                        if (tmp___9) {
 8258|      0|                            goto closefiles;
 8259|      0|                        }
 8260|      0|                        goto while_break___1;
 8261|      0|                    }
 8262|      0|                    {
 8263|      0|                        thisfield___0 =
 8264|      0|                            (char *)find_field((struct linebuffer const *)thisline);
 8265|      0|                        thislen___0 = (thisline->length - 1UL) -
 8266|      0|                                      (size_t)(thisfield___0 - thisline->buffer);
 8267|      0|                        tmp___11 = different(thisfield___0, prevfield___0, thislen___0,
 8268|      0|                                             prevlen___0);
 8269|      0|                    }
 8270|      0|                    if (tmp___11) {
 8271|      0|                        tmp___12 = 0;
 8272|      0|                    }
 8273|      0|                    else {
 8274|      0|                        tmp___12 = 1;
 8275|      0|                    }
 8276|      0|                    match = (_Bool)tmp___12;
 8277|      0|                    match_count += (uintmax_t)match;
 8278|      0|                    if (match_count == 0xffffffffffffffffUL) {
 8279|      0|                        match_count--;
 8280|      0|                    }
 8281|      0|                    if ((unsigned int)delimit_groups != 0U) {
 8282|      0|                        if (!match) {
 8283|      0|                            if (match_count) {
 8284|      0|                                first_delimiter = (_Bool)0;
 8285|      0|                            }
 8286|      0|                        }
 8287|      0|                        else {
 8288|      0|                            if (match_count == 1UL) {
 8289|      0|                                if ((unsigned int)delimit_groups == 1U) {
 8290|      0|                                    {
 8291|      0|                                        putchar_unlocked((int)delimiter);
 8292|      0|                                    }
 8293|      0|                                }
 8294|      0|                                else {
 8295|      0|                                    if ((unsigned int)delimit_groups == 2U) {
 8296|      0|                                        if (!first_delimiter) {
 8297|      0|                                            {
 8298|      0|                                                putchar_unlocked((int)delimiter);
 8299|      0|                                            }
 8300|      0|                                        }
 8301|      0|                                    }
 8302|      0|                                }
 8303|      0|                            }
 8304|      0|                        }
 8305|      0|                    }
 8306|      0|                    if (!match) {
 8307|      0|                        goto _L___0;
 8308|      0|                    }
 8309|      0|                    else {
 8310|      0|                        if (output_later_repeated) {
 8311|      0|_L___0: {
 8312|      0|                                writeline((struct linebuffer const *)prevline, match,
 8313|      0|                                          match_count);
 8314|      0|                            }
 8315|      0|                            {
 8316|      0|                                while (1) {
 8317|      0|while_continue___2: /* CIL Label */
 8318|      0|                                    ;
 8319|      0|                                    _tmp___0 = prevline;
 8320|      0|                                    prevline = thisline;
 8321|      0|                                    thisline = _tmp___0;
 8322|      0|                                    goto while_break___2;
 8323|      0|                                }
 8324|      0|while_break___2: /* CIL Label */
 8325|      0|                                ;
 8326|      0|                            }
 8327|      0|                            prevfield___0 = thisfield___0;
 8328|      0|                            prevlen___0 = thislen___0;
 8329|      0|                            if (!match) {
 8330|      0|                                match_count = (uintmax_t)0;
 8331|      0|                            }
 8332|      0|                        }
 8333|      0|                    }
 8334|      0|                }
 8335|      0|while_break___1: /* CIL Label */
 8336|      0|                ;
 8337|      0|            }
 8338|      0|            {
 8339|      0|                writeline((struct linebuffer const *)prevline, (_Bool)0, match_count);
 8340|      0|            }
 8341|      0|        }
 8342|      2|closefiles: {
 8343|      2|            tmp___16 = ferror_unlocked(stdin);
 8344|      2|        }
 8345|      2|        if (tmp___16) {
 8346|      0|            {
 8347|      0|                tmp___15 = gettext("error reading %s");
 8348|      0|                error(1, 0, (char const *)tmp___15, infile);
 8349|      0|            }
 8350|      0|        }
 8351|      2|        else {
 8352|      2|            {
 8353|      2|                tmp___17 = rpl_fclose(stdin);
 8354|      2|            }
 8355|      2|            if (tmp___17 != 0) {
 8356|      0|                {
 8357|      0|                    tmp___15 = gettext("error reading %s");
 8358|      0|                    error(1, 0, (char const *)tmp___15, infile);
 8359|      0|                }
 8360|      0|            }
 8361|      2|        }
 8362|      2|        {
 8363|      2|            free((void *)lb1.buffer);
 8364|      2|            free((void *)lb2.buffer);
 8365|      2|        }
 8366|      2|        return;
 8367|      2|    }
 8368|      2|}
 8369|       |int main(int argc, char **argv)
 8370|      2|{
 8371|      2|    int optc;
 8372|      2|    _Bool posixly_correct;
 8373|      2|    char *tmp;
 8374|      2|    enum Skip_field_option_type skip_field_option_type;
 8375|      2|    int nfiles;
 8376|      2|    char const *file[2];
 8377|      2|    char delimiter;
 8378|      2|    char const *tmp___0;
 8379|      2|    char *tmp___1;
 8380|      2|    int tmp___2;
 8381|      2|    int tmp___3;
 8382|      2|    unsigned long size;
 8383|      2|    char const *tmp___4;
 8384|      2|    char *tmp___5;
 8385|      2|    int tmp___6;
 8386|      2|    int tmp___7;
 8387|      2|    strtol_error tmp___8;
 8388|      2|    ptrdiff_t tmp___9;
 8389|      2|    char *tmp___10;
 8390|      2|    void *__cil_tmp22;
 8391|      2|    char *__cil_tmp23;
 8392|      2|    char *__cil_tmp24;
 8393|      2|    char *__cil_tmp25;
 8394|      2|    char *__cil_tmp26;
 8395|      2|    char *__cil_tmp27;
 8396|      2|    char *__cil_tmp28;
 8397|      2|    char *__cil_tmp29;
 8398|      2|    char *__cil_tmp30;
 8399|      2|    char *__cil_tmp31;
 8400|      2|    char *__cil_tmp32;
 8401|      2|    char *__cil_tmp33;
 8402|      2|    char *__cil_tmp34;
 8403|      2|    char *__cil_tmp35;
 8404|      2|    char *__cil_tmp36;
 8405|       |
 8406|      2|    {
 8407|      2|        {
 8408|      2|            optc = 0;
 8409|      2|            tmp = getenv("POSIXLY_CORRECT");
 8410|      2|            posixly_correct =
 8411|      2|                (_Bool)((unsigned long)tmp != (unsigned long)((void *)0));
 8412|      2|            skip_field_option_type = (enum Skip_field_option_type)0;
 8413|      2|            nfiles = 0;
 8414|      2|            delimiter = (char)'\n';
 8415|      2|            file[1] = "-";
 8416|      2|            file[0] = file[1];
 8417|      2|            set_program_name((char const *)*(argv + 0));
 8418|      2|            setlocale(6, "");
 8419|      2|            bindtextdomain("coreutils", "/usr/local/share/locale");
 8420|      2|            textdomain("coreutils");
 8421|      2|            hard_LC_COLLATE = hard_locale(3);
 8422|      2|            atexit(&close_stdout);
 8423|      2|            skip_chars = (size_t)0;
 8424|      2|            skip_fields = (size_t)0;
 8425|      2|            check_chars = 0xffffffffffffffffUL;
 8426|      2|            output_first_repeated = (_Bool)1;
 8427|      2|            output_unique = output_first_repeated;
 8428|      2|            output_later_repeated = (_Bool)0;
 8429|      2|            countmode = (enum countmode)1;
 8430|      2|            delimit_groups = (enum delimit_method)0;
 8431|      2|        }
 8432|      2|        {
 8433|      4|            while (1) {
 8434|      4|while_continue: /* CIL Label */
 8435|      4|                ;
 8436|      4|                if (optc == -1) {
 8437|      0|                    goto _L___2;
 8438|      0|                }
 8439|      4|                else {
 8440|      4|                    if (posixly_correct) {
 8441|      0|                        if (nfiles != 0) {
 8442|      0|                            goto _L___2;
 8443|      0|                        }
 8444|      0|                        else {
 8445|      0|                            goto _L___3;
 8446|      0|                        }
 8447|      0|                    }
 8448|      4|                    else {
 8449|      4|_L___3: {
 8450|      4|                            optc = getopt_long(argc, (char *const *)argv,
 8451|      4|                                               "-0123456789Dcdf:is:uw:z", longopts,
 8452|      4|                                               (int *)((void *)0));
 8453|      4|                        }
 8454|      4|                        if (optc == -1) {
 8455|      2|_L___2:
 8456|      2|                            if (argc <= optind) {
 8457|      2|                                goto while_break;
 8458|      2|                            }
 8459|      0|                            if (nfiles == 2) {
 8460|      0|                                {
 8461|      0|                                    tmp___0 = quote((char const *)*(argv + optind));
 8462|      0|                                    tmp___1 = gettext("extra operand %s");
 8463|      0|                                    error(0, 0, (char const *)tmp___1, tmp___0);
 8464|      0|                                    usage(1);
 8465|      0|                                }
 8466|      0|                            }
 8467|      0|                            tmp___2 = nfiles;
 8468|      0|                            nfiles++;
 8469|      0|                            tmp___3 = optind;
 8470|      0|                            optind++;
 8471|      0|                            file[tmp___2] = (char const *)*(argv + tmp___3);
 8472|      0|                        }
 8473|      2|                        else {
 8474|      2|                            {
 8475|      2|                                if (optc == 1) {
 8476|      2|                                    goto case_1;
 8477|      2|                                }
 8478|      0|                                if (optc == 48) {
 8479|      0|                                    goto case_48;
 8480|      0|                                }
 8481|      0|                                if (optc == 49) {
 8482|      0|                                    goto case_48;
 8483|      0|                                }
 8484|      0|                                if (optc == 50) {
 8485|      0|                                    goto case_48;
 8486|      0|                                }
 8487|      0|                                if (optc == 51) {
 8488|      0|                                    goto case_48;
 8489|      0|                                }
 8490|      0|                                if (optc == 52) {
 8491|      0|                                    goto case_48;
 8492|      0|                                }
 8493|      0|                                if (optc == 53) {
 8494|      0|                                    goto case_48;
 8495|      0|                                }
 8496|      0|                                if (optc == 54) {
 8497|      0|                                    goto case_48;
 8498|      0|                                }
 8499|      0|                                if (optc == 55) {
 8500|      0|                                    goto case_48;
 8501|      0|                                }
 8502|      0|                                if (optc == 56) {
 8503|      0|                                    goto case_48;
 8504|      0|                                }
 8505|      0|                                if (optc == 57) {
 8506|      0|                                    goto case_48;
 8507|      0|                                }
 8508|      0|                                if (optc == 99) {
 8509|      0|                                    goto case_99;
 8510|      0|                                }
 8511|      0|                                if (optc == 100) {
 8512|      0|                                    goto case_100;
 8513|      0|                                }
 8514|      0|                                if (optc == 68) {
 8515|      0|                                    goto case_68;
 8516|      0|                                }
 8517|      0|                                if (optc == 102) {
 8518|      0|                                    goto case_102;
 8519|      0|                                }
 8520|      0|                                if (optc == 105) {
 8521|      0|                                    goto case_105;
 8522|      0|                                }
 8523|      0|                                if (optc == 115) {
 8524|      0|                                    goto case_115;
 8525|      0|                                }
 8526|      0|                                if (optc == 117) {
 8527|      0|                                    goto case_117;
 8528|      0|                                }
 8529|      0|                                if (optc == 119) {
 8530|      0|                                    goto case_119;
 8531|      0|                                }
 8532|      0|                                if (optc == 122) {
 8533|      0|                                    goto case_122;
 8534|      0|                                }
 8535|      0|                                if (optc == -130) {
 8536|      0|                                    goto case_neg_130;
 8537|      0|                                }
 8538|      0|                                if (optc == -131) {
 8539|      0|                                    goto case_neg_131;
 8540|      0|                                }
 8541|      0|                                goto switch_default;
 8542|      2|case_1: /* CIL Label */
 8543|      2|                                if ((int)*(optarg + 0) == 43) {
 8544|      0|                                    {
 8545|      0|                                        tmp___7 = posix2_version();
 8546|      0|                                    }
 8547|      0|                                    if (tmp___7 < 200112) {
 8548|      0|                                        {
 8549|      0|                                            tmp___8 = xstrtoul((char const *)optarg,
 8550|      0|                                                               (char **)((void *)0), 10, &size, "");
 8551|      0|                                        }
 8552|      0|                                        if ((unsigned int)tmp___8 == 0U) {
 8553|      0|                                            if (size <= 0xffffffffffffffffUL) {
 8554|      0|                                                skip_chars = size;
 8555|      0|                                            }
 8556|      0|                                            else {
 8557|      0|                                                goto _L___1;
 8558|      0|                                            }
 8559|      0|                                        }
 8560|      0|                                        else {
 8561|      0|                                            goto _L___1;
 8562|      0|                                        }
 8563|      0|                                    }
 8564|      0|                                    else {
 8565|      0|                                        goto _L___1;
 8566|      0|                                    }
 8567|      0|                                }
 8568|      2|                                else {
 8569|      2|_L___1:
 8570|      2|                                    if (nfiles == 2) {
 8571|      0|                                        {
 8572|      0|                                            tmp___4 = quote((char const *)optarg);
 8573|      0|                                            tmp___5 = gettext("extra operand %s");
 8574|      0|                                            error(0, 0, (char const *)tmp___5, tmp___4);
 8575|      0|                                            usage(1);
 8576|      0|                                        }
 8577|      0|                                    }
 8578|      2|                                    else {
 8579|      2|                                        tmp___6 = nfiles;
 8580|      2|                                        nfiles++;
 8581|      2|                                        file[tmp___6] = (char const *)optarg;
 8582|      2|                                    }
 8583|      2|                                }
 8584|      2|                                goto switch_break;
 8585|      2|case_48: /* CIL Label */
 8586|      0|case_49: /* CIL Label */
 8587|      0|case_50: /* CIL Label */
 8588|      0|case_51: /* CIL Label */
 8589|      0|case_52: /* CIL Label */
 8590|      0|case_53: /* CIL Label */
 8591|      0|case_54: /* CIL Label */
 8592|      0|case_55: /* CIL Label */
 8593|      0|case_56: /* CIL Label */
 8594|      0|case_57: /* CIL Label */
 8595|      0|                                if ((unsigned int)skip_field_option_type == 2U) {
 8596|      0|                                    skip_fields = (size_t)0;
 8597|      0|                                }
 8598|      0|                                skip_field_option_type = (enum Skip_field_option_type)1;
 8599|      0|                                goto switch_break;
 8600|      0|case_99: /* CIL Label */
 8601|      0|                                countmode = (enum countmode)0;
 8602|      0|                                goto switch_break;
 8603|      0|case_100: /* CIL Label */
 8604|      0|                                output_unique = (_Bool)0;
 8605|      0|                                goto switch_break;
 8606|      0|case_68: /* CIL Label */
 8607|      0|                                output_unique = (_Bool)0;
 8608|      0|                                output_later_repeated = (_Bool)1;
 8609|      0|                                if ((unsigned long)optarg == (unsigned long)((void *)0)) {
 8610|      0|                                    delimit_groups = (enum delimit_method)0;
 8611|      0|                                }
 8612|      0|                                else {
 8613|      0|                                    {
 8614|      0|                                        tmp___9 = __xargmatch_internal(
 8615|      0|                                                      "--all-repeated", (char const *)optarg,
 8616|      0|                                                      delimit_method_string,
 8617|      0|                                                      (char const *)(delimit_method_map),
 8618|      0|                                                      sizeof(delimit_method_map[0]), argmatch_die);
 8619|      0|                                        delimit_groups =
 8620|      0|                                            (enum delimit_method)delimit_method_map[tmp___9];
 8621|      0|                                    }
 8622|      0|                                }
 8623|      0|                                goto switch_break;
 8624|      0|case_102: { /* CIL Label */
 8625|      0|                                    skip_field_option_type = (enum Skip_field_option_type)2;
 8626|      0|                                    skip_fields = size_opt((char const *)optarg,
 8627|      0|                                                           "invalid number of fields to skip");
 8628|      0|                                }
 8629|      0|                                goto switch_break;
 8630|      0|case_105: /* CIL Label */
 8631|      0|                                ignore_case = (_Bool)1;
 8632|      0|                                goto switch_break;
 8633|      0|case_115: { /* CIL Label */
 8634|      0|                                    skip_chars = size_opt((char const *)optarg,
 8635|      0|                                                          "invalid number of bytes to skip");
 8636|      0|                                }
 8637|      0|                                goto switch_break;
 8638|      0|case_117: /* CIL Label */
 8639|      0|                                output_first_repeated = (_Bool)0;
 8640|      0|                                goto switch_break;
 8641|      0|case_119: { /* CIL Label */
 8642|      0|                                    check_chars = size_opt((char const *)optarg,
 8643|      0|                                                           "invalid number of bytes to compare");
 8644|      0|                                }
 8645|      0|                                goto switch_break;
 8646|      0|case_122: /* CIL Label */
 8647|      0|                                delimiter = (char)'\000';
 8648|      0|                                goto switch_break;
 8649|      0|case_neg_130: { /* CIL Label */
 8650|      0|                                    usage(0);
 8651|      0|                                }
 8652|      0|                                goto switch_break;
 8653|      0|case_neg_131: { /* CIL Label */
 8654|      0|                                    version_etc(stdout, "uniq", "GNU coreutils", Version,
 8655|      0|                                                "Richard M. Stallman", "David MacKenzie",
 8656|      0|                                                (char *)((void *)0));
 8657|      0|                                    exit(0);
 8658|      0|                                }
 8659|      0|                                goto switch_break;
 8660|      0|switch_default: { /* CIL Label */
 8661|      0|                                    usage(1);
 8662|      0|                                }
 8663|      2|switch_break: /* CIL Label */
 8664|      2|                                ;
 8665|      2|                            }
 8666|      2|                        }
 8667|      4|                    }
 8668|      4|                }
 8669|      4|            }
 8670|      2|while_break: /* CIL Label */
 8671|      2|            ;
 8672|      2|        }
 8673|      2|        if ((unsigned int)countmode == 0U) {
 8674|      0|            if (output_later_repeated) {
 8675|      0|                {
 8676|      0|                    tmp___10 = gettext(
 8677|      0|                                   "printing all duplicated lines and repeat counts is meaningless");
 8678|      0|                    error(0, 0, (char const *)tmp___10);
 8679|      0|                    usage(1);
 8680|      0|                }
 8681|      0|            }
 8682|      0|        }
 8683|      2|        {
 8684|      2|            check_file(file[0], file[1], delimiter);
 8685|      2|            exit(0);
 8686|      2|        }
 8687|      2|    }
 8688|      2|}
