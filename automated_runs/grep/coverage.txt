    1|       |enum strtol_error {
    2|       |    LONGINT_OK = 0,
    3|       |    LONGINT_OVERFLOW = 1,
    4|       |    LONGINT_INVALID_SUFFIX_CHAR = 2,
    5|       |    LONGINT_INVALID_SUFFIX_CHAR_WITH_OVERFLOW = 3,
    6|       |    LONGINT_INVALID = 4
    7|       |};
    8|       |typedef enum strtol_error strtol_error;
    9|       |struct option {
   10|       |    char const *name;
   11|       |    int has_arg;
   12|       |    int *flag;
   13|       |    int val;
   14|       |};
   15|       |typedef long intmax_t;
   16|       |typedef long ptrdiff_t;
   17|       |typedef unsigned long size_t;
   18|       |typedef __builtin_va_list __gnuc_va_list;
   19|       |typedef __gnuc_va_list va_list;
   20|       |typedef long __off_t;
   21|       |typedef long __off64_t;
   22|       |struct _IO_FILE;
   23|       |struct _IO_FILE;
   24|       |struct _IO_FILE;
   25|       |typedef struct _IO_FILE FILE;
   26|       |typedef void _IO_lock_t;
   27|       |struct _IO_marker {
   28|       |    struct _IO_marker *_next;
   29|       |    struct _IO_FILE *_sbuf;
   30|       |    int _pos;
   31|       |};
   32|       |struct _IO_FILE {
   33|       |    int _flags;
   34|       |    char *_IO_read_ptr;
   35|       |    char *_IO_read_end;
   36|       |    char *_IO_read_base;
   37|       |    char *_IO_write_base;
   38|       |    char *_IO_write_ptr;
   39|       |    char *_IO_write_end;
   40|       |    char *_IO_buf_base;
   41|       |    char *_IO_buf_end;
   42|       |    char *_IO_save_base;
   43|       |    char *_IO_backup_base;
   44|       |    char *_IO_save_end;
   45|       |    struct _IO_marker *_markers;
   46|       |    struct _IO_FILE *_chain;
   47|       |    int _fileno;
   48|       |    int _flags2;
   49|       |    __off_t _old_offset;
   50|       |    unsigned short _cur_column;
   51|       |    signed char _vtable_offset;
   52|       |    char _shortbuf[1];
   53|       |    _IO_lock_t *_lock;
   54|       |    __off64_t _offset;
   55|       |    void *__pad1;
   56|       |    void *__pad2;
   57|       |    void *__pad3;
   58|       |    void *__pad4;
   59|       |    size_t __pad5;
   60|       |    int _mode;
   61|       |    char _unused2[(15UL * sizeof(int) - 4UL * sizeof(void *)) - sizeof(size_t)];
   62|       |};
   63|       |typedef int wchar_t;
   64|       |union __anonunion___value_23 {
   65|       |    unsigned int __wch;
   66|       |    char __wchb[4];
   67|       |};
   68|       |struct __anonstruct___mbstate_t_22 {
   69|       |    int __count;
   70|       |    union __anonunion___value_23 __value;
   71|       |};
   72|       |typedef struct __anonstruct___mbstate_t_22 __mbstate_t;
   73|       |typedef unsigned int wint_t;
   74|       |typedef __mbstate_t mbstate_t;
   75|       |struct mbchar {
   76|       |    char const *ptr;
   77|       |    size_t bytes;
   78|       |    _Bool wc_valid;
   79|       |    wchar_t wc;
   80|       |    char buf[24];
   81|       |};
   82|       |typedef struct mbchar mbchar_t;
   83|       |struct mbiter_multi {
   84|       |    char const *limit;
   85|       |    _Bool in_shift;
   86|       |    mbstate_t state;
   87|       |    _Bool next_done;
   88|       |    struct mbchar cur;
   89|       |};
   90|       |typedef struct mbiter_multi mbi_iterator_t;
   91|       |typedef long __ssize_t;
   92|       |typedef __ssize_t ssize_t;
   93|       |enum quoting_style {
   94|       |    literal_quoting_style = 0,
   95|       |    shell_quoting_style = 1,
   96|       |    shell_always_quoting_style = 2,
   97|       |    c_quoting_style = 3,
   98|       |    c_maybe_quoting_style = 4,
   99|       |    escape_quoting_style = 5,
  100|       |    locale_quoting_style = 6,
  101|       |    clocale_quoting_style = 7,
  102|       |    custom_quoting_style = 8
  103|       |};
  104|       |struct quoting_options;
  105|       |struct quoting_options;
  106|       |struct quoting_options;
  107|       |struct quoting_options {
  108|       |    enum quoting_style style;
  109|       |    int flags;
  110|       |    unsigned int quote_these_too[255UL / (sizeof(int) * 8UL) + 1UL];
  111|       |    char const *left_quote;
  112|       |    char const *right_quote;
  113|       |};
  114|       |struct slotvec {
  115|       |    size_t size;
  116|       |    char *val;
  117|       |};
  118|       |struct mbuiter_multi {
  119|       |    _Bool in_shift;
  120|       |    mbstate_t state;
  121|       |    _Bool next_done;
  122|       |    struct mbchar cur;
  123|       |};
  124|       |typedef struct mbuiter_multi mbui_iterator_t;
  125|       |struct __dirstream;
  126|       |struct __dirstream;
  127|       |struct __dirstream;
  128|       |typedef struct __dirstream DIR;
  129|       |typedef unsigned int __mode_t;
  130|       |typedef __mode_t mode_t;
  131|       |typedef unsigned long uintptr_t;
  132|       |typedef unsigned long longword;
  133|       |struct preliminary_header {
  134|       |    void *next;
  135|       |    int magic;
  136|       |};
  137|       |struct __anonstruct_magic_22 {
  138|       |    char room[(((sizeof(struct preliminary_header) + 16UL) - 1UL) / 16UL) * 16UL - sizeof(int)];
  139|       |    int word;
  140|       |};
  141|       |union header {
  142|       |    void *next;
  143|       |    struct __anonstruct_magic_22 magic;
  144|       |};
  145|       |typedef int nl_item;
  146|       |struct I_ring {
  147|       |    int ir_data[4];
  148|       |    int ir_default_val;
  149|       |    unsigned int ir_front;
  150|       |    unsigned int ir_back;
  151|       |    _Bool ir_empty;
  152|       |};
  153|       |typedef struct I_ring I_ring;
  154|       |struct hash_tuning {
  155|       |    float shrink_threshold;
  156|       |    float shrink_factor;
  157|       |    float growth_threshold;
  158|       |    float growth_factor;
  159|       |    _Bool is_n_buckets;
  160|       |};
  161|       |typedef struct hash_tuning Hash_tuning;
  162|       |struct hash_table;
  163|       |struct hash_table;
  164|       |struct hash_table;
  165|       |typedef struct hash_table Hash_table;
  166|       |struct hash_entry {
  167|       |    void *data;
  168|       |    struct hash_entry *next;
  169|       |};
  170|       |struct hash_table {
  171|       |    struct hash_entry *bucket;
  172|       |    struct hash_entry const *bucket_limit;
  173|       |    size_t n_buckets;
  174|       |    size_t n_buckets_used;
  175|       |    size_t n_entries;
  176|       |    Hash_tuning const *tuning;
  177|       |    size_t (*hasher)(void const *, size_t);
  178|       |    _Bool (*comparator)(void const *, void const *);
  179|       |    void (*data_freer)(void *);
  180|       |    struct hash_entry *free_entry_list;
  181|       |};
  182|       |typedef unsigned long __dev_t;
  183|       |typedef unsigned int __uid_t;
  184|       |typedef unsigned int __gid_t;
  185|       |typedef unsigned long __ino_t;
  186|       |typedef unsigned long __nlink_t;
  187|       |struct __anonstruct___fsid_t_1 {
  188|       |    int __val[2];
  189|       |};
  190|       |typedef struct __anonstruct___fsid_t_1 __fsid_t;
  191|       |typedef long __time_t;
  192|       |typedef long __blksize_t;
  193|       |typedef long __blkcnt_t;
  194|       |typedef unsigned long __fsblkcnt_t;
  195|       |typedef unsigned long __fsfilcnt_t;
  196|       |typedef long __fsword_t;
  197|       |typedef long __syscall_slong_t;
  198|       |typedef __ino_t ino_t;
  199|       |typedef __dev_t dev_t;
  200|       |typedef __nlink_t nlink_t;
  201|       |struct timespec {
  202|       |    __time_t tv_sec;
  203|       |    __syscall_slong_t tv_nsec;
  204|       |};
  205|       |struct dirent {
  206|       |    __ino_t d_ino;
  207|       |    __off_t d_off;
  208|       |    unsigned short d_reclen;
  209|       |    unsigned char d_type;
  210|       |    char d_name[256];
  211|       |};
  212|       |struct stat {
  213|       |    __dev_t st_dev;
  214|       |    __ino_t st_ino;
  215|       |    __nlink_t st_nlink;
  216|       |    __mode_t st_mode;
  217|       |    __uid_t st_uid;
  218|       |    __gid_t st_gid;
  219|       |    int __pad0;
  220|       |    __dev_t st_rdev;
  221|       |    __off_t st_size;
  222|       |    __blksize_t st_blksize;
  223|       |    __blkcnt_t st_blocks;
  224|       |    struct timespec st_atim;
  225|       |    struct timespec st_mtim;
  226|       |    struct timespec st_ctim;
  227|       |    __syscall_slong_t __glibc_reserved[3];
  228|       |};
  229|       |struct _ftsent;
  230|       |struct _ftsent;
  231|       |struct _ftsent;
  232|       |struct cycle_check_state;
  233|       |struct cycle_check_state;
  234|       |struct cycle_check_state;
  235|       |union __anonunion_fts_cycle_19 {
  236|       |    struct hash_table *ht;
  237|       |    struct cycle_check_state *state;
  238|       |};
  239|       |struct __anonstruct_FTS_18 {
  240|       |    struct _ftsent *fts_cur;
  241|       |    struct _ftsent *fts_child;
  242|       |    struct _ftsent **fts_array;
  243|       |    dev_t fts_dev;
  244|       |    char *fts_path;
  245|       |    int fts_rfd;
  246|       |    int fts_cwd_fd;
  247|       |    size_t fts_pathlen;
  248|       |    size_t fts_nitems;
  249|       |    int (*fts_compar)(struct _ftsent const **, struct _ftsent const **);
  250|       |    int fts_options;
  251|       |    struct hash_table *fts_leaf_optimization_works_ht;
  252|       |    union __anonunion_fts_cycle_19 fts_cycle;
  253|       |    I_ring fts_fd_ring;
  254|       |};
  255|       |typedef struct __anonstruct_FTS_18 FTS;
  256|       |struct _ftsent {
  257|       |    struct _ftsent *fts_cycle;
  258|       |    struct _ftsent *fts_parent;
  259|       |    struct _ftsent *fts_link;
  260|       |    DIR *fts_dirp;
  261|       |    long fts_number;
  262|       |    void *fts_pointer;
  263|       |    char *fts_accpath;
  264|       |    char *fts_path;
  265|       |    int fts_errno;
  266|       |    int fts_symfd;
  267|       |    size_t fts_pathlen;
  268|       |    FTS *fts_fts;
  269|       |    ptrdiff_t fts_level;
  270|       |    size_t fts_namelen;
  271|       |    nlink_t fts_n_dirs_remaining;
  272|       |    unsigned short fts_info;
  273|       |    unsigned short fts_flags;
  274|       |    unsigned short fts_instr;
  275|       |    struct stat fts_statp[1];
  276|       |    char fts_name[1];
  277|       |};
  278|       |typedef struct _ftsent FTSENT;
  279|       |typedef unsigned long uintmax_t;
  280|       |struct dev_ino {
  281|       |    ino_t st_ino;
  282|       |    dev_t st_dev;
  283|       |};
  284|       |struct cycle_check_state {
  285|       |    struct dev_ino dev_ino;
  286|       |    uintmax_t chdir_counter;
  287|       |    int magic;
  288|       |};
  289|       |struct Active_dir {
  290|       |    dev_t dev;
  291|       |    ino_t ino;
  292|       |    FTSENT *fts_ent;
  293|       |};
  294|       |struct statfs {
  295|       |    __fsword_t f_type;
  296|       |    __fsword_t f_bsize;
  297|       |    __fsblkcnt_t f_blocks;
  298|       |    __fsblkcnt_t f_bfree;
  299|       |    __fsblkcnt_t f_bavail;
  300|       |    __fsfilcnt_t f_files;
  301|       |    __fsfilcnt_t f_ffree;
  302|       |    __fsid_t f_fsid;
  303|       |    __fsword_t f_namelen;
  304|       |    __fsword_t f_frsize;
  305|       |    __fsword_t f_flags;
  306|       |    __fsword_t f_spare[4];
  307|       |};
  308|       |struct LCO_ent {
  309|       |    dev_t st_dev;
  310|       |    _Bool opt_ok;
  311|       |};
  312|       |typedef unsigned long __re_long_size_t;
  313|       |typedef unsigned long reg_syntax_t;
  314|       |struct re_dfa_t;
  315|       |struct re_dfa_t;
  316|       |struct re_dfa_t;
  317|       |struct re_pattern_buffer {
  318|       |    struct re_dfa_t *buffer;
  319|       |    __re_long_size_t allocated;
  320|       |    __re_long_size_t used;
  321|       |    reg_syntax_t syntax;
  322|       |    char *fastmap;
  323|       |    unsigned char *translate;
  324|       |    size_t re_nsub;
  325|       |    unsigned int can_be_null : 1;
  326|       |    unsigned int regs_allocated : 2;
  327|       |    unsigned int fastmap_accurate : 1;
  328|       |    unsigned int no_sub : 1;
  329|       |    unsigned int not_bol : 1;
  330|       |    unsigned int not_eol : 1;
  331|       |    unsigned int newline_anchor : 1;
  332|       |};
  333|       |typedef struct re_pattern_buffer regex_t;
  334|       |typedef int regoff_t;
  335|       |struct __anonstruct_regmatch_t_29 {
  336|       |    regoff_t rm_so;
  337|       |    regoff_t rm_eo;
  338|       |};
  339|       |typedef struct __anonstruct_regmatch_t_29 regmatch_t;
  340|       |struct exclude;
  341|       |struct exclude;
  342|       |struct exclude;
  343|       |union __anonunion_v_33 {
  344|       |    char const *pattern;
  345|       |    regex_t re;
  346|       |};
  347|       |struct patopts {
  348|       |    int options;
  349|       |    union __anonunion_v_33 v;
  350|       |};
  351|       |struct exclude_pattern {
  352|       |    struct patopts *exclude;
  353|       |    size_t exclude_alloc;
  354|       |    size_t exclude_count;
  355|       |};
  356|       |enum exclude_type {
  357|       |    exclude_hash = 0,
  358|       |    exclude_pattern = 1
  359|       |};
  360|       |union __anonunion_v_34 {
  361|       |    Hash_table *table;
  362|       |    struct exclude_pattern pat;
  363|       |};
  364|       |struct exclude_segment {
  365|       |    struct exclude_segment *next;
  366|       |    enum exclude_type type;
  367|       |    int options;
  368|       |    union __anonunion_v_34 v;
  369|       |};
  370|       |struct pattern_buffer {
  371|       |    struct pattern_buffer *next;
  372|       |    char *base;
  373|       |};
  374|       |struct exclude {
  375|       |    struct exclude_segment *head;
  376|       |    struct pattern_buffer *patbuf;
  377|       |};
  378|       |struct real_pcre;
  379|       |struct real_pcre;
  380|       |struct real_pcre;
  381|       |typedef struct real_pcre pcre;
  382|       |struct real_pcre_jit_stack;
  383|       |struct real_pcre_jit_stack;
  384|       |struct real_pcre_jit_stack;
  385|       |typedef struct real_pcre_jit_stack pcre_jit_stack;
  386|       |struct pcre_extra {
  387|       |    unsigned long flags;
  388|       |    void *study_data;
  389|       |    unsigned long match_limit;
  390|       |    void *callout_data;
  391|       |    unsigned char const *tables;
  392|       |    unsigned long match_limit_recursion;
  393|       |    unsigned char **mark;
  394|       |    void *executable_jit;
  395|       |};
  396|       |typedef struct pcre_extra pcre_extra;
  397|       |struct kwsmatch {
  398|       |    size_t index;
  399|       |    size_t offset[1];
  400|       |    size_t size[1];
  401|       |};
  402|       |struct kwset;
  403|       |struct kwset;
  404|       |struct kwset;
  405|       |typedef struct kwset *kwset_t;
  406|       |typedef signed char mb_len_map_t;
  407|       |struct obstack;
  408|       |struct obstack;
  409|       |struct obstack;
  410|       |struct _obstack_chunk {
  411|       |    char *limit;
  412|       |    struct _obstack_chunk *prev;
  413|       |    char contents[4];
  414|       |};
  415|       |union __anonunion_temp_56 {
  416|       |    long tempint;
  417|       |    void *tempptr;
  418|       |};
  419|       |struct obstack {
  420|       |    long chunk_size;
  421|       |    struct _obstack_chunk *chunk;
  422|       |    char *object_base;
  423|       |    char *next_free;
  424|       |    char *chunk_limit;
  425|       |    union __anonunion_temp_56 temp;
  426|       |    int alignment_mask;
  427|       |    struct _obstack_chunk *(*chunkfun)(void *, long);
  428|       |    void (*freefun)(void *, struct _obstack_chunk *);
  429|       |    void *extra_arg;
  430|       |    unsigned int use_extra_arg : 1;
  431|       |    unsigned int maybe_empty_object : 1;
  432|       |    unsigned int alloc_failed : 1;
  433|       |};
  434|       |struct trie;
  435|       |struct trie;
  436|       |struct trie;
  437|       |struct tree {
  438|       |    struct tree *llink;
  439|       |    struct tree *rlink;
  440|       |    struct trie *trie;
  441|       |    unsigned char label;
  442|       |    char balance;
  443|       |};
  444|       |struct trie {
  445|       |    size_t accepting;
  446|       |    struct tree *links;
  447|       |    struct trie *parent;
  448|       |    struct trie *next;
  449|       |    struct trie *fail;
  450|       |    int depth;
  451|       |    int shift;
  452|       |    int maxshift;
  453|       |};
  454|       |struct kwset {
  455|       |    struct obstack obstack;
  456|       |    ptrdiff_t words;
  457|       |    struct trie *trie;
  458|       |    int mind;
  459|       |    int maxd;
  460|       |    unsigned char delta[256];
  461|       |    struct trie *next[256];
  462|       |    char *target;
  463|       |    int *shift;
  464|       |    char const *trans;
  465|       |    char gc1;
  466|       |    char gc2;
  467|       |    int gc1help;
  468|       |};
  469|       |enum __anonenum_dirs_58 {
  470|       |    L = 0,
  471|       |    R = 1
  472|       |};
  473|       |typedef int __re_idx_t;
  474|       |typedef unsigned int __re_size_t;
  475|       |struct re_registers {
  476|       |    __re_size_t num_regs;
  477|       |    regoff_t *start;
  478|       |    regoff_t *end;
  479|       |};
  480|       |struct dfamust {
  481|       |    _Bool exact;
  482|       |    _Bool begline;
  483|       |    _Bool endline;
  484|       |    char *must;
  485|       |    struct dfamust *next;
  486|       |};
  487|       |struct dfa;
  488|       |struct dfa;
  489|       |struct dfa;
  490|       |struct patterns {
  491|       |    struct re_pattern_buffer regexbuf;
  492|       |    struct re_registers regs;
  493|       |};
  494|       |enum __anonenum_mode_60 {
  495|       |    DW_NONE = 0,
  496|       |    DW_POSIX = 1,
  497|       |    DW_GNU = 2
  498|       |};
  499|       |typedef unsigned long wctype_t;
  500|       |typedef unsigned int charclass_word;
  501|       |typedef charclass_word charclass[8];
  502|       |typedef ptrdiff_t token;
  503|       |struct __anonstruct_position_35 {
  504|       |    size_t index;
  505|       |    unsigned int constraint;
  506|       |};
  507|       |typedef struct __anonstruct_position_35 position;
  508|       |struct __anonstruct_position_set_36 {
  509|       |    position *elems;
  510|       |    size_t nelem;
  511|       |    size_t alloc;
  512|       |};
  513|       |typedef struct __anonstruct_position_set_36 position_set;
  514|       |struct __anonstruct_leaf_set_37 {
  515|       |    size_t *elems;
  516|       |    size_t nelem;
  517|       |};
  518|       |typedef struct __anonstruct_leaf_set_37 leaf_set;
  519|       |struct __anonstruct_dfa_state_38 {
  520|       |    size_t hash;
  521|       |    position_set elems;
  522|       |    unsigned char context;
  523|       |    _Bool has_backref;
  524|       |    _Bool has_mbcset;
  525|       |    unsigned short constraint;
  526|       |    token first_end;
  527|       |    position_set mbps;
  528|       |};
  529|       |typedef struct __anonstruct_dfa_state_38 dfa_state;
  530|       |typedef ptrdiff_t state_num;
  531|       |struct __anonstruct_ranges_39 {
  532|       |    wchar_t beg;
  533|       |    wchar_t end;
  534|       |};
  535|       |struct mb_char_classes {
  536|       |    ptrdiff_t cset;
  537|       |    _Bool invert;
  538|       |    wchar_t *chars;
  539|       |    size_t nchars;
  540|       |    wctype_t *ch_classes;
  541|       |    size_t nch_classes;
  542|       |    struct __anonstruct_ranges_39 *ranges;
  543|       |    size_t nranges;
  544|       |    char **equivs;
  545|       |    size_t nequivs;
  546|       |    char **coll_elems;
  547|       |    size_t ncoll_elems;
  548|       |};
  549|       |struct dfa {
  550|       |    charclass *charclasses;
  551|       |    size_t cindex;
  552|       |    size_t calloc;
  553|       |    token *tokens;
  554|       |    size_t tindex;
  555|       |    size_t talloc;
  556|       |    size_t depth;
  557|       |    size_t nleaves;
  558|       |    size_t nregexps;
  559|       |    _Bool fast;
  560|       |    _Bool multibyte;
  561|       |    token utf8_anychar_classes[5];
  562|       |    mbstate_t mbs;
  563|       |    int *multibyte_prop;
  564|       |    wint_t mbrtowc_cache[256];
  565|       |    struct mb_char_classes *mbcsets;
  566|       |    size_t nmbcsets;
  567|       |    size_t mbcsets_alloc;
  568|       |    struct dfa *superset;
  569|       |    dfa_state *states;
  570|       |    state_num sindex;
  571|       |    size_t salloc;
  572|       |    position_set *follows;
  573|       |    _Bool searchflag;
  574|       |    state_num tralloc;
  575|       |    int trcount;
  576|       |    state_num **trans;
  577|       |    state_num **fails;
  578|       |    int *success;
  579|       |    state_num *newlines;
  580|       |    struct dfamust *musts;
  581|       |    position_set mb_follows;
  582|       |    int *mb_match_lens;
  583|       |};
  584|       |typedef int predicate(int);
  585|       |struct dfa_ctype {
  586|       |    char const *name;
  587|       |    predicate *func;
  588|       |    _Bool single_byte_only;
  589|       |};
  590|       |struct __anonstruct_stkalloc_43 {
  591|       |    _Bool nullable;
  592|       |    size_t nfirstpos;
  593|       |    size_t nlastpos;
  594|       |};
  595|       |enum __anonenum_status_transit_state_44 {
  596|       |    TRANSIT_STATE_IN_PROGRESS = 0,
  597|       |    TRANSIT_STATE_DONE = 1,
  598|       |    TRANSIT_STATE_END_BUFFER = 2
  599|       |};
  600|       |typedef enum __anonenum_status_transit_state_44 status_transit_state;
  601|       |struct must;
  602|       |struct must;
  603|       |struct must;
  604|       |typedef struct must must;
  605|       |struct must {
  606|       |    char **in;
  607|       |    char *left;
  608|       |    char *right;
  609|       |    char *is;
  610|       |    _Bool begline;
  611|       |    _Bool endline;
  612|       |    must *prev;
  613|       |};
  614|       |typedef __off_t off_t;
  615|       |struct color_cap {
  616|       |    char const *name;
  617|       |    char const **var;
  618|       |    void (*fct)(void);
  619|       |};
  620|       |enum directories_type {
  621|       |    READ_DIRECTORIES = 2,
  622|       |    RECURSE_DIRECTORIES = 3,
  623|       |    SKIP_DIRECTORIES = 4
  624|       |};
  625|       |enum __anonenum_devices_71 {
  626|       |    READ_COMMAND_LINE_DEVICES = 0,
  627|       |    READ_DEVICES = 1,
  628|       |    SKIP_DEVICES = 2
  629|       |};
  630|       |enum __anonenum_binary_files_72 {
  631|       |    BINARY_BINARY_FILES = 0,
  632|       |    TEXT_BINARY_FILES = 1,
  633|       |    WITHOUT_MATCH_BINARY_FILES = 2
  634|       |};
  635|       |enum __anonenum_File_type_73 {
  636|       |    UNKNOWN = 0,
  637|       |    DOS_BINARY = 1,
  638|       |    DOS_TEXT = 2,
  639|       |    UNIX_TEXT = 3
  640|       |};
  641|       |typedef enum __anonenum_File_type_73 File_type;
  642|       |struct dos_map {
  643|       |    off_t pos;
  644|       |    off_t add;
  645|       |};
  646|       |struct matcher {
  647|       |    char const name[16];
  648|       |    void (*compile)(char const *, size_t);
  649|       |    size_t (*execute)(char const *, size_t, size_t *, char const *);
  650|       |};
  651|       |extern __attribute__((__nothrow__)) unsigned short const **__ctype_b_loc(void) __attribute__((__const__));
  652|       |extern __attribute__((__nothrow__, __noreturn__)) void __assert_fail(char const *__assertion,
  653|       |        char const *__file,
  654|       |        unsigned int __line,
  655|       |        char const *__function);
  656|       |extern __attribute__((__nothrow__)) int *__errno_location(void) __attribute__((__const__));
  657|       |extern __attribute__((__nothrow__)) char *(__attribute__((__nonnull__(1))) strchr)(char const *__s,
  658|       |        int __c) __attribute__((__pure__));
  659|       |extern __attribute__((__nothrow__, __noreturn__)) void abort(void);
  660|       |extern void error(int __status, int __errnum, char const *__format, ...);
  661|       |int volatile exit_failure;
  662|       |extern __attribute__((__nothrow__)) char *gettext(char const *__msgid) __attribute__((__format_arg__(1)));
  663|       |extern __attribute__((__nothrow__)) intmax_t strtoimax(char const *__restrict __nptr,
  664|       |        char **__restrict __endptr,
  665|       |        int __base);
  666|       |strtol_error xstrtoimax(char const *s, char **ptr, int strtol_base, intmax_t *val,
  667|       |                        char const *valid_suffixes);
  668|       |static strtol_error bkm_scale___1(intmax_t *x, int scale_factor)
  669|      0|{
  670|       |
  671|      0|    {
  672|      0|        if (*x < (-0x7FFFFFFFFFFFFFFF - 1) / (long)scale_factor) {
  673|      0|            *x = (-0x7FFFFFFFFFFFFFFF - 1);
  674|      0|            return ((strtol_error)1);
  675|      0|        }
  676|      0|        if (9223372036854775807L / (long)scale_factor < *x) {
  677|      0|            *x = 9223372036854775807L;
  678|      0|            return ((strtol_error)1);
  679|      0|        }
  680|      0|        *x *= (intmax_t)scale_factor;
  681|      0|        return ((strtol_error)0);
  682|      0|    }
  683|      0|}
  684|       |static strtol_error bkm_scale_by_power___1(intmax_t *x, int base, int power)
  685|      0|{
  686|      0|    strtol_error err;
  687|      0|    strtol_error tmp;
  688|      0|    int tmp___0;
  689|       |
  690|      0|    {
  691|      0|        err = (strtol_error)0;
  692|      0|        {
  693|      0|            while (1) {
  694|      0|while_continue: /* CIL Label */
  695|      0|                ;
  696|      0|                tmp___0 = power;
  697|      0|                power--;
  698|      0|                if (!tmp___0) {
  699|      0|                    goto while_break;
  700|      0|                }
  701|      0|                {
  702|      0|                    tmp = bkm_scale___1(x, base);
  703|      0|                    err = (strtol_error)((unsigned int)err | (unsigned int)tmp);
  704|      0|                }
  705|      0|            }
  706|      0|while_break___0: /* CIL Label */
  707|      0|            ;
  708|      0|        }
  709|      0|while_break:
  710|      0|        ;
  711|      0|        return (err);
  712|      0|    }
  713|      0|}
  714|       |strtol_error xstrtoimax(char const *s, char **ptr, int strtol_base, intmax_t *val,
  715|       |                        char const *valid_suffixes)
  716|      0|{
  717|      0|    char *t_ptr;
  718|      0|    char **p;
  719|      0|    intmax_t tmp;
  720|      0|    strtol_error err;
  721|      0|    int *tmp___1;
  722|      0|    char *tmp___2;
  723|      0|    int *tmp___3;
  724|      0|    int *tmp___4;
  725|      0|    int base;
  726|      0|    int suffixes;
  727|      0|    strtol_error overflow;
  728|      0|    char *tmp___5;
  729|      0|    char *tmp___6;
  730|       |
  731|      0|    {
  732|      0|        err = (strtol_error)0;
  733|      0|        if (0 <= strtol_base) {
  734|      0|            if (!(strtol_base <= 36)) {
  735|      0|                {
  736|      0|                    __assert_fail("0 <= strtol_base && strtol_base <= 36", "/home/khheo/project/benchmark/grep-2.19/lib/xstrtol.c",
  737|      0|                                  96U, "xstrtoimax");
  738|      0|                }
  739|      0|            }
  740|      0|        }
  741|      0|        else {
  742|      0|            {
  743|      0|                __assert_fail("0 <= strtol_base && strtol_base <= 36", "/home/khheo/project/benchmark/grep-2.19/lib/xstrtol.c",
  744|      0|                              96U, "xstrtoimax");
  745|      0|            }
  746|      0|        }
  747|      0|        if (ptr) {
  748|      0|            p = ptr;
  749|      0|        }
  750|      0|        else {
  751|      0|            p = &t_ptr;
  752|      0|        }
  753|      0|        {
  754|      0|            tmp___1 = __errno_location();
  755|      0|            *tmp___1 = 0;
  756|      0|            tmp = strtoimax((char const * /* __restrict  */)s, (char ** /* __restrict  */)p,
  757|      0|                            strtol_base);
  758|      0|        }
  759|      0|        if ((unsigned long)*p == (unsigned long)s) {
  760|      0|            if (valid_suffixes) {
  761|      0|                if (*(*p)) {
  762|      0|                    {
  763|      0|                        tmp___2 = strchr(valid_suffixes, (int)*(*p));
  764|      0|                    }
  765|      0|                    if (tmp___2) {
  766|      0|                        tmp = (intmax_t)1;
  767|      0|                    }
  768|      0|                    else {
  769|      0|                        return ((strtol_error)4);
  770|      0|                    }
  771|      0|                }
  772|      0|                else {
  773|      0|                    return ((strtol_error)4);
  774|      0|                }
  775|      0|            }
  776|      0|            else {
  777|      0|                return ((strtol_error)4);
  778|      0|            }
  779|      0|        }
  780|      0|        else {
  781|      0|            {
  782|      0|                tmp___4 = __errno_location();
  783|      0|            }
  784|      0|            if (*tmp___4 != 0) {
  785|      0|                {
  786|      0|                    tmp___3 = __errno_location();
  787|      0|                }
  788|      0|                if (*tmp___3 != 34) {
  789|      0|                    return ((strtol_error)4);
  790|      0|                }
  791|      0|                err = (strtol_error)1;
  792|      0|            }
  793|      0|        }
  794|      0|        if (!valid_suffixes) {
  795|      0|            *val = tmp;
  796|      0|            return (err);
  797|      0|        }
  798|      0|        if ((int)*(*p) != 0) {
  799|      0|            {
  800|      0|                base = 1024;
  801|      0|                suffixes = 1;
  802|      0|                tmp___5 = strchr(valid_suffixes, (int)*(*p));
  803|      0|            }
  804|      0|            if (!tmp___5) {
  805|      0|                *val = tmp;
  806|      0|                return ((strtol_error)((unsigned int)err | 2U));
  807|      0|            }
  808|      0|            {
  809|      0|                tmp___6 = strchr(valid_suffixes, '0');
  810|      0|            }
  811|      0|            if (tmp___6) {
  812|      0|                if ((int)*(*(p + 0) + 1) == 105) {
  813|      0|                    goto case_105;
  814|      0|                }
  815|      0|                if ((int)*(*(p + 0) + 1) == 66) {
  816|      0|                    goto case_66;
  817|      0|                }
  818|      0|                if ((int)*(*(p + 0) + 1) == 68) {
  819|      0|                    goto case_66;
  820|      0|                }
  821|      0|                goto switch_break;
  822|      0|case_105:
  823|      0|                if ((int)*(*(p + 0) + 2) == 66) {
  824|      0|                    suffixes += 2;
  825|      0|                }
  826|      0|                goto switch_break;
  827|      0|case_66:
  828|      0|                base = 1000;
  829|      0|                suffixes++;
  830|      0|                goto switch_break;
  831|      0|switch_break:
  832|      0|                ;
  833|      0|            }
  834|      0|            if ((int)*(*p) == 98) {
  835|      0|                goto case_98;
  836|      0|            }
  837|      0|            if ((int)*(*p) == 66) {
  838|      0|                goto case_66___0;
  839|      0|            }
  840|      0|            if ((int)*(*p) == 99) {
  841|      0|                goto case_99;
  842|      0|            }
  843|      0|            if ((int)*(*p) == 69) {
  844|      0|                goto case_69;
  845|      0|            }
  846|      0|            if ((int)*(*p) == 71) {
  847|      0|                goto case_71;
  848|      0|            }
  849|      0|            if ((int)*(*p) == 103) {
  850|      0|                goto case_71;
  851|      0|            }
  852|      0|            if ((int)*(*p) == 107) {
  853|      0|                goto case_107;
  854|      0|            }
  855|      0|            if ((int)*(*p) == 75) {
  856|      0|                goto case_107;
  857|      0|            }
  858|      0|            if ((int)*(*p) == 77) {
  859|      0|                goto case_77;
  860|      0|            }
  861|      0|            if ((int)*(*p) == 109) {
  862|      0|                goto case_77;
  863|      0|            }
  864|      0|            if ((int)*(*p) == 80) {
  865|      0|                goto case_80;
  866|      0|            }
  867|      0|            if ((int)*(*p) == 84) {
  868|      0|                goto case_84;
  869|      0|            }
  870|      0|            if ((int)*(*p) == 116) {
  871|      0|                goto case_84;
  872|      0|            }
  873|      0|            if ((int)*(*p) == 119) {
  874|      0|                goto case_119;
  875|      0|            }
  876|      0|            if ((int)*(*p) == 89) {
  877|      0|                goto case_89;
  878|      0|            }
  879|      0|            if ((int)*(*p) == 90) {
  880|      0|                goto case_90;
  881|      0|            }
  882|      0|            goto switch_default;
  883|      0|case_98 : {
  884|      0|                overflow = bkm_scale___1(&tmp, 512);
  885|      0|            }
  886|      0|            goto switch_break___0;
  887|      0|case_66___0 : {
  888|      0|                overflow = bkm_scale___1(&tmp, 1024);
  889|      0|            }
  890|      0|            goto switch_break___0;
  891|      0|case_99:
  892|      0|            overflow = (strtol_error)0;
  893|      0|            goto switch_break___0;
  894|      0|case_69 : {
  895|      0|                overflow = bkm_scale_by_power___1(&tmp, base, 6);
  896|      0|            }
  897|      0|            goto switch_break___0;
  898|      0|case_71 : {
  899|      0|                overflow = bkm_scale_by_power___1(&tmp, base, 3);
  900|      0|            }
  901|      0|            goto switch_break___0;
  902|      0|case_107 : {
  903|      0|                overflow = bkm_scale_by_power___1(&tmp, base, 1);
  904|      0|            }
  905|      0|            goto switch_break___0;
  906|      0|case_77 : {
  907|      0|                overflow = bkm_scale_by_power___1(&tmp, base, 2);
  908|      0|            }
  909|      0|            goto switch_break___0;
  910|      0|case_80 : {
  911|      0|                overflow = bkm_scale_by_power___1(&tmp, base, 5);
  912|      0|            }
  913|      0|            goto switch_break___0;
  914|      0|case_84 : {
  915|      0|                overflow = bkm_scale_by_power___1(&tmp, base, 4);
  916|      0|            }
  917|      0|            goto switch_break___0;
  918|      0|case_119 : {
  919|      0|                overflow = bkm_scale___1(&tmp, 2);
  920|      0|            }
  921|      0|            goto switch_break___0;
  922|      0|case_89 : {
  923|      0|                overflow = bkm_scale_by_power___1(&tmp, base, 8);
  924|      0|            }
  925|      0|            goto switch_break___0;
  926|      0|case_90 : {
  927|      0|                overflow = bkm_scale_by_power___1(&tmp, base, 7);
  928|      0|            }
  929|      0|            goto switch_break___0;
  930|      0|switch_default:
  931|      0|            *val = tmp;
  932|      0|            return ((strtol_error)((unsigned int)err | 2U));
  933|      0|switch_break___0:
  934|      0|            err = (strtol_error)((unsigned int)err | (unsigned int)overflow);
  935|      0|            *p += suffixes;
  936|      0|            if (*(*p)) {
  937|      0|                err = (strtol_error)((unsigned int)err | 2U);
  938|      0|            }
  939|      0|        }
  940|      0|        *val = tmp;
  941|      0|        return (err);
  942|      0|    }
  943|      0|}
  944|       |__attribute__((__noreturn__)) void xalloc_die(void);
  945|       |void *xmalloc(size_t n) __attribute__((__malloc__, __alloc_size__(1)));
  946|       |void *xrealloc(void *p, size_t n) __attribute__((__alloc_size__(2)));
  947|       |void *xnmalloc(size_t n, size_t s) __attribute__((__malloc__, __alloc_size__(1, 2)));
  948|       |void *xnmalloc(size_t n, size_t s) __attribute__((__malloc__, __alloc_size__(1, 2)));
  949|       |void *xnmalloc(size_t n, size_t s)
  950|     26|{
  951|     26|    int tmp;
  952|     26|    void *tmp___0;
  953|       |
  954|     26|    {
  955|     26|        if (sizeof(ptrdiff_t) <= sizeof(size_t)) {
  956|     26|            tmp = -1;
  957|     26|        }
  958|      0|        else {
  959|      0|            tmp = -2;
  960|      0|        }
  961|     26|        if ((size_t)tmp / s < n) {
  962|      0|            {
  963|      0|                xalloc_die();
  964|      0|            }
  965|      0|        }
  966|     26|        {
  967|     26|            tmp___0 = xmalloc(n * s);
  968|     26|        }
  969|     26|        return (tmp___0);
  970|     26|    }
  971|     26|}
  972|       |void *xnrealloc(void *p, size_t n, size_t s) __attribute__((__alloc_size__(2, 3)));
  973|       |void *xnrealloc(void *p, size_t n, size_t s) __attribute__((__alloc_size__(2, 3)));
  974|       |void *xnrealloc(void *p, size_t n, size_t s)
  975|     24|{
  976|     24|    int tmp;
  977|     24|    void *tmp___0;
  978|       |
  979|     24|    {
  980|     24|        if (sizeof(ptrdiff_t) <= sizeof(size_t)) {
  981|     24|            tmp = -1;
  982|     24|        }
  983|      0|        else {
  984|      0|            tmp = -2;
  985|      0|        }
  986|     24|        if ((size_t)tmp / s < n) {
  987|      0|            {
  988|      0|                xalloc_die();
  989|      0|            }
  990|      0|        }
  991|     24|        {
  992|     24|            tmp___0 = xrealloc(p, n * s);
  993|     24|        }
  994|     24|        return (tmp___0);
  995|     24|    }
  996|     24|}
  997|       |void *x2nrealloc(void *p, size_t *pn, size_t s)
  998|      4|{
  999|      4|    size_t n;
 1000|      4|    void *tmp;
 1001|       |
 1002|      4|    {
 1003|      4|        n = *pn;
 1004|      4|        if (!p) {
 1005|      4|            if (!n) {
 1006|      4|                n = 128UL / s;
 1007|      4|                n += (size_t)(!n);
 1008|      4|            }
 1009|      4|        }
 1010|      0|        else {
 1011|      0|            if (0xaaaaaaaaaaaaaaaaUL / s <= n) {
 1012|      0|                {
 1013|      0|                    xalloc_die();
 1014|      0|                }
 1015|      0|            }
 1016|      0|            n += n / 2UL + 1UL;
 1017|      0|        }
 1018|      4|        {
 1019|      4|            *pn = n;
 1020|      4|            tmp = xrealloc(p, n * s);
 1021|      4|        }
 1022|      4|        return (tmp);
 1023|      4|    }
 1024|      4|}
 1025|       |char *xcharalloc(size_t n) __attribute__((__malloc__, __alloc_size__(1)));
 1026|       |char *xcharalloc(size_t n) __attribute__((__malloc__, __alloc_size__(1)));
 1027|       |char *xcharalloc(size_t n)
 1028|      0|{
 1029|      0|    void *tmp;
 1030|      0|    void *tmp___0;
 1031|      0|    void *tmp___1;
 1032|       |
 1033|      0|    {
 1034|      0|        if (sizeof(char) == 1UL) {
 1035|      0|            {
 1036|      0|                tmp = xmalloc(n);
 1037|      0|                tmp___1 = tmp;
 1038|      0|            }
 1039|      0|        }
 1040|      0|        else {
 1041|      0|            {
 1042|      0|                tmp___0 = xnmalloc(n, sizeof(char));
 1043|      0|                tmp___1 = tmp___0;
 1044|      0|            }
 1045|      0|        }
 1046|      0|        return ((char *)tmp___1);
 1047|      0|    }
 1048|      0|}
 1049|       |void *xzalloc(size_t s) __attribute__((__malloc__, __alloc_size__(1)));
 1050|       |void *xcalloc(size_t n, size_t s) __attribute__((__malloc__, __alloc_size__(1, 2)));
 1051|       |void *x2realloc(void *p, size_t *pn);
 1052|       |void *xmemdup(void const *p, size_t s) __attribute__((__malloc__, __alloc_size__(2)));
 1053|       |char *xstrdup(char const *string) __attribute__((__malloc__));
 1054|       |extern __attribute__((__nothrow__)) void *malloc(size_t __size) __attribute__((__malloc__));
 1055|       |extern __attribute__((__nothrow__)) void *calloc(size_t __nmemb, size_t __size) __attribute__((__malloc__));
 1056|       |extern __attribute__((__nothrow__)) void *(__attribute__((__warn_unused_result__)) realloc)(void *__ptr,
 1057|       |        size_t __size);
 1058|       |extern __attribute__((__nothrow__)) void free(void *__ptr);
 1059|       |extern __attribute__((__nothrow__)) void *(__attribute__((__nonnull__(1, 2))) memcpy)(void *__restrict __dest,
 1060|       |        void const *__restrict __src,
 1061|       |        size_t __n);
 1062|       |extern __attribute__((__nothrow__)) void *(__attribute__((__nonnull__(1))) memset)(void *__s,
 1063|       |        int __c,
 1064|       |        size_t __n);
 1065|       |extern __attribute__((__nothrow__)) size_t(__attribute__((__nonnull__(1))) strlen)(char const *__s) __attribute__((__pure__));
 1066|       |void *xmalloc(size_t n) __attribute__((__malloc__, __alloc_size__(1)));
 1067|       |void *xmalloc(size_t n)
 1068|    128|{
 1069|    128|    void *p;
 1070|    128|    void *tmp;
 1071|       |
 1072|    128|    {
 1073|    128|        {
 1074|    128|            tmp = malloc(n);
 1075|    128|            p = tmp;
 1076|    128|        }
 1077|    128|        if (!p) {
 1078|      0|            if (n != 0UL) {
 1079|      0|                {
 1080|      0|                    xalloc_die();
 1081|      0|                }
 1082|      0|            }
 1083|      0|        }
 1084|    128|        return (p);
 1085|    128|    }
 1086|    128|}
 1087|       |void *xrealloc(void *p, size_t n) __attribute__((__alloc_size__(2)));
 1088|       |void *xrealloc(void *p, size_t n)
 1089|     52|{
 1090|       |
 1091|     52|    {
 1092|     52|        if (!n) {
 1093|      0|            if (p) {
 1094|      0|                {
 1095|      0|                    free(p);
 1096|      0|                }
 1097|      0|                return ((void *)0);
 1098|      0|            }
 1099|      0|        }
 1100|     52|        {
 1101|     52|            p = realloc(p, n);
 1102|     52|        }
 1103|     52|        if (!p) {
 1104|      0|            if (n) {
 1105|      0|                {
 1106|      0|                    xalloc_die();
 1107|      0|                }
 1108|      0|            }
 1109|      0|        }
 1110|     52|        return (p);
 1111|     52|    }
 1112|     52|}
 1113|       |void *x2realloc(void *p, size_t *pn)
 1114|      0|{
 1115|      0|    void *tmp;
 1116|       |
 1117|      0|    {
 1118|      0|        {
 1119|      0|            tmp = x2nrealloc(p, pn, (size_t)1);
 1120|      0|        }
 1121|      0|        return (tmp);
 1122|      0|    }
 1123|      0|}
 1124|       |void *xzalloc(size_t s) __attribute__((__malloc__, __alloc_size__(1)));
 1125|       |void *xzalloc(size_t s)
 1126|     40|{
 1127|     40|    void *tmp;
 1128|     40|    void *tmp___0;
 1129|       |
 1130|     40|    {
 1131|     40|        {
 1132|     40|            tmp = xmalloc(s);
 1133|     40|            tmp___0 = memset(tmp, 0, s);
 1134|     40|        }
 1135|     40|        return (tmp___0);
 1136|     40|    }
 1137|     40|}
 1138|       |void *xcalloc(size_t n, size_t s) __attribute__((__malloc__, __alloc_size__(1, 2)));
 1139|       |void *xcalloc(size_t n, size_t s)
 1140|      2|{
 1141|      2|    void *p;
 1142|       |
 1143|      2|    {
 1144|      2|        {
 1145|      2|            p = calloc(n, s);
 1146|      2|        }
 1147|      2|        if (!p) {
 1148|      0|            {
 1149|      0|                xalloc_die();
 1150|      0|            }
 1151|      0|        }
 1152|      2|        return (p);
 1153|      2|    }
 1154|      2|}
 1155|       |void *xmemdup(void const *p, size_t s) __attribute__((__malloc__, __alloc_size__(2)));
 1156|       |void *xmemdup(void const *p, size_t s)
 1157|      4|{
 1158|      4|    void *tmp;
 1159|      4|    void *tmp___0;
 1160|       |
 1161|      4|    {
 1162|      4|        {
 1163|      4|            tmp = xmalloc(s);
 1164|      4|            tmp___0 = memcpy((void * /* __restrict  */)tmp, (void const * /* __restrict  */)p,
 1165|      4|                             s);
 1166|      4|        }
 1167|      4|        return (tmp___0);
 1168|      4|    }
 1169|      4|}
 1170|       |char *xstrdup(char const *string) __attribute__((__malloc__));
 1171|       |char *xstrdup(char const *string)
 1172|      2|{
 1173|      2|    size_t tmp;
 1174|      2|    char *tmp___0;
 1175|       |
 1176|      2|    {
 1177|      2|        {
 1178|      2|            tmp = strlen(string);
 1179|      2|            tmp___0 = (char *)xmemdup((void const *)string, tmp + 1UL);
 1180|      2|        }
 1181|      2|        return (tmp___0);
 1182|      2|    }
 1183|      2|}
 1184|       |__attribute__((__noreturn__)) void xalloc_die(void);
 1185|       |void xalloc_die(void)
 1186|      0|{
 1187|      0|    char *tmp;
 1188|      0|    char *__cil_tmp3;
 1189|       |
 1190|      0|    {
 1191|      0|        {
 1192|      0|            tmp = gettext("memory exhausted");
 1193|      0|            error((int)exit_failure, 0, "%s", tmp);
 1194|      0|            abort();
 1195|      0|        }
 1196|      0|    }
 1197|      0|}
 1198|       |extern __attribute__((__nothrow__)) int(__attribute__((__nonnull__(1, 2))) strcmp)(char const *__s1,
 1199|       |        char const *__s2) __attribute__((__pure__));
 1200|       |extern struct _IO_FILE *stdout;
 1201|       |extern int fprintf(FILE *__restrict __stream, char const *__restrict __format, ...);
 1202|       |extern int printf(char const *__restrict __format, ...);
 1203|       |extern int fputs_unlocked(char const *__restrict __s, FILE *__restrict __stream);
 1204|       |char const version_etc_copyright[47];
 1205|       |void version_etc_arn(FILE *stream, char const *command_name, char const *package,
 1206|       |                     char const *version, char const *const *authors, size_t n_authors);
 1207|       |void version_etc_va(FILE *stream, char const *command_name, char const *package,
 1208|       |                    char const *version, va_list authors);
 1209|       |void version_etc(FILE *stream, char const *command_name, char const *package,
 1210|       |                 char const *version, ...) __attribute__((__sentinel__));
 1211|       |void version_etc_arn(FILE *stream, char const *command_name, char const *package,
 1212|       |                     char const *version, char const *const *authors, size_t n_authors)
 1213|      0|{
 1214|      0|    char *tmp;
 1215|      0|    char *tmp___0;
 1216|      0|    char *tmp___1;
 1217|      0|    char *tmp___2;
 1218|      0|    char *tmp___3;
 1219|      0|    char *tmp___4;
 1220|      0|    char *tmp___5;
 1221|      0|    char *tmp___6;
 1222|      0|    char *tmp___7;
 1223|      0|    char *tmp___8;
 1224|      0|    char *tmp___9;
 1225|      0|    char *tmp___10;
 1226|      0|    char *__cil_tmp31;
 1227|      0|    char *__cil_tmp32;
 1228|      0|    char *__cil_tmp33;
 1229|      0|    char *__cil_tmp34;
 1230|      0|    char *__cil_tmp35;
 1231|      0|    char *__cil_tmp36;
 1232|      0|    char *__cil_tmp37;
 1233|      0|    char *__cil_tmp38;
 1234|      0|    char *__cil_tmp39;
 1235|      0|    char *__cil_tmp40;
 1236|      0|    char *__cil_tmp41;
 1237|      0|    char *__cil_tmp42;
 1238|       |
 1239|      0|    {
 1240|      0|        if (command_name) {
 1241|      0|            {
 1242|      0|                fprintf((FILE * /* __restrict  */) stream, (char const * /* __restrict  */) "%s (%s) %s\n",
 1243|      0|                        command_name, package, version);
 1244|      0|            }
 1245|      0|        }
 1246|      0|        else {
 1247|      0|            {
 1248|      0|                fprintf((FILE * /* __restrict  */) stream, (char const * /* __restrict  */) "%s %s\n",
 1249|      0|                        package, version);
 1250|      0|            }
 1251|      0|        }
 1252|      0|        {
 1253|      0|            tmp = gettext("(C)");
 1254|      0|            fprintf((FILE * /* __restrict  */) stream, (char const * /* __restrict  */)(version_etc_copyright),
 1255|      0|                    tmp, 2014);
 1256|      0|            tmp___0 = gettext("\nLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n\n");
 1257|      0|            fputs_unlocked((char const * /* __restrict  */)((char const *)tmp___0), (FILE * /* __restrict  */) stream);
 1258|      0|        }
 1259|      0|        if (n_authors == 0UL) {
 1260|      0|            goto case_0;
 1261|      0|        }
 1262|      0|        if (n_authors == 1UL) {
 1263|      0|            goto case_1;
 1264|      0|        }
 1265|      0|        if (n_authors == 2UL) {
 1266|      0|            goto case_2;
 1267|      0|        }
 1268|      0|        if (n_authors == 3UL) {
 1269|      0|            goto case_3;
 1270|      0|        }
 1271|      0|        if (n_authors == 4UL) {
 1272|      0|            goto case_4;
 1273|      0|        }
 1274|      0|        if (n_authors == 5UL) {
 1275|      0|            goto case_5;
 1276|      0|        }
 1277|      0|        if (n_authors == 6UL) {
 1278|      0|            goto case_6;
 1279|      0|        }
 1280|      0|        if (n_authors == 7UL) {
 1281|      0|            goto case_7;
 1282|      0|        }
 1283|      0|        if (n_authors == 8UL) {
 1284|      0|            goto case_8;
 1285|      0|        }
 1286|      0|        if (n_authors == 9UL) {
 1287|      0|            goto case_9;
 1288|      0|        }
 1289|      0|        goto switch_default;
 1290|      0|case_0 : {
 1291|      0|            abort();
 1292|      0|        }
 1293|      0|case_1 : {
 1294|      0|            tmp___1 = gettext("Written by %s.\n");
 1295|      0|            fprintf((FILE * /* __restrict  */) stream, (char const * /* __restrict  */)((char const *)tmp___1),
 1296|      0|                    *(authors + 0));
 1297|      0|        }
 1298|      0|        goto switch_break;
 1299|      0|case_2 : {
 1300|      0|            tmp___2 = gettext("Written by %s and %s.\n");
 1301|      0|            fprintf((FILE * /* __restrict  */) stream, (char const * /* __restrict  */)((char const *)tmp___2),
 1302|      0|                    *(authors + 0), *(authors + 1));
 1303|      0|        }
 1304|      0|        goto switch_break;
 1305|      0|case_3 : {
 1306|      0|            tmp___3 = gettext("Written by %s, %s, and %s.\n");
 1307|      0|            fprintf((FILE * /* __restrict  */) stream, (char const * /* __restrict  */)((char const *)tmp___3),
 1308|      0|                    *(authors + 0), *(authors + 1), *(authors + 2));
 1309|      0|        }
 1310|      0|        goto switch_break;
 1311|      0|case_4 : {
 1312|      0|            tmp___4 = gettext("Written by %s, %s, %s,\nand %s.\n");
 1313|      0|            fprintf((FILE * /* __restrict  */) stream, (char const * /* __restrict  */)((char const *)tmp___4),
 1314|      0|                    *(authors + 0), *(authors + 1), *(authors + 2), *(authors + 3));
 1315|      0|        }
 1316|      0|        goto switch_break;
 1317|      0|case_5 : {
 1318|      0|            tmp___5 = gettext("Written by %s, %s, %s,\n%s, and %s.\n");
 1319|      0|            fprintf((FILE * /* __restrict  */) stream, (char const * /* __restrict  */)((char const *)tmp___5),
 1320|      0|                    *(authors + 0), *(authors + 1), *(authors + 2), *(authors + 3), *(authors + 4));
 1321|      0|        }
 1322|      0|        goto switch_break;
 1323|      0|case_6 : {
 1324|      0|            tmp___6 = gettext("Written by %s, %s, %s,\n%s, %s, and %s.\n");
 1325|      0|            fprintf((FILE * /* __restrict  */) stream, (char const * /* __restrict  */)((char const *)tmp___6),
 1326|      0|                    *(authors + 0), *(authors + 1), *(authors + 2), *(authors + 3), *(authors + 4),
 1327|      0|                    *(authors + 5));
 1328|      0|        }
 1329|      0|        goto switch_break;
 1330|      0|case_7 : {
 1331|      0|            tmp___7 = gettext("Written by %s, %s, %s,\n%s, %s, %s, and %s.\n");
 1332|      0|            fprintf((FILE * /* __restrict  */) stream, (char const * /* __restrict  */)((char const *)tmp___7),
 1333|      0|                    *(authors + 0), *(authors + 1), *(authors + 2), *(authors + 3), *(authors + 4),
 1334|      0|                    *(authors + 5), *(authors + 6));
 1335|      0|        }
 1336|      0|        goto switch_break;
 1337|      0|case_8 : {
 1338|      0|            tmp___8 = gettext("Written by %s, %s, %s,\n%s, %s, %s, %s,\nand %s.\n");
 1339|      0|            fprintf((FILE * /* __restrict  */) stream, (char const * /* __restrict  */)((char const *)tmp___8),
 1340|      0|                    *(authors + 0), *(authors + 1), *(authors + 2), *(authors + 3), *(authors + 4),
 1341|      0|                    *(authors + 5), *(authors + 6), *(authors + 7));
 1342|      0|        }
 1343|      0|        goto switch_break;
 1344|      0|case_9 : {
 1345|      0|            tmp___9 = gettext("Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, and %s.\n");
 1346|      0|            fprintf((FILE * /* __restrict  */) stream, (char const * /* __restrict  */)((char const *)tmp___9),
 1347|      0|                    *(authors + 0), *(authors + 1), *(authors + 2), *(authors + 3), *(authors + 4),
 1348|      0|                    *(authors + 5), *(authors + 6), *(authors + 7), *(authors + 8));
 1349|      0|        }
 1350|      0|        goto switch_break;
 1351|      0|switch_default : {
 1352|      0|            tmp___10 = gettext("Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, %s, and others.\n");
 1353|      0|            fprintf((FILE * /* __restrict  */) stream, (char const * /* __restrict  */)((char const *)tmp___10),
 1354|      0|                    *(authors + 0), *(authors + 1), *(authors + 2), *(authors + 3), *(authors + 4),
 1355|      0|                    *(authors + 5), *(authors + 6), *(authors + 7), *(authors + 8));
 1356|      0|        }
 1357|      0|        goto switch_break;
 1358|      0|switch_break:
 1359|      0|        ;
 1360|      0|        return;
 1361|      0|    }
 1362|      0|}
 1363|       |void version_etc_va(FILE *stream, char const *command_name, char const *package,
 1364|       |                    char const *version, va_list authors)
 1365|      0|{
 1366|      0|    size_t n_authors;
 1367|      0|    char const *authtab[10];
 1368|      0|    char const *tmp;
 1369|      0|    void *__cil_tmp10;
 1370|       |
 1371|      0|    {
 1372|      0|        n_authors = (size_t)0;
 1373|      0|        {
 1374|      0|            while (1) {
 1375|      0|while_continue: /* CIL Label */
 1376|      0|                ;
 1377|       |
 1378|      0|                if (n_authors < 10UL) {
 1379|      0|                    {
 1380|      0|                        tmp = __builtin_va_arg(authors, char const *);
 1381|      0|                        authtab[n_authors] = tmp;
 1382|      0|                    }
 1383|      0|                    if (!((unsigned long)tmp != (unsigned long)((void *)0))) {
 1384|      0|                        goto while_break;
 1385|      0|                    }
 1386|      0|                }
 1387|      0|                else {
 1388|      0|                    goto while_break;
 1389|      0|                }
 1390|      0|                n_authors++;
 1391|      0|            }
 1392|      0|while_break___0: /* CIL Label */
 1393|      0|            ;
 1394|      0|        }
 1395|      0|while_break : {
 1396|      0|            version_etc_arn(stream, command_name, package, version, (char const *const *)(authtab),
 1397|      0|                            n_authors);
 1398|      0|        }
 1399|      0|        return;
 1400|      0|    }
 1401|      0|}
 1402|       |void version_etc(FILE *stream, char const *command_name, char const *package,
 1403|       |                 char const *version, ...) __attribute__((__sentinel__));
 1404|       |void version_etc(FILE *stream, char const *command_name, char const *package,
 1405|       |                 char const *version, ...)
 1406|      0|{
 1407|      0|    va_list authors;
 1408|       |
 1409|      0|    {
 1410|      0|        {
 1411|      0|            __builtin_va_start(authors, version);
 1412|      0|            version_etc_va(stream, command_name, package, version, authors);
 1413|      0|            __builtin_va_end(authors);
 1414|      0|        }
 1415|      0|        return;
 1416|      0|    }
 1417|      0|}
 1418|       |char const version_etc_copyright[47] = {
 1419|       |    (char const)'C', (char const)'o', (char const)'p', (char const)'y',
 1420|       |    (char const)'r', (char const)'i', (char const)'g', (char const)'h',
 1421|       |    (char const)'t', (char const)' ', (char const)'%', (char const)'s',
 1422|       |    (char const)' ', (char const)'%', (char const)'d', (char const)' ',
 1423|       |    (char const)'F', (char const)'r', (char const)'e', (char const)'e',
 1424|       |    (char const)' ', (char const)'S', (char const)'o', (char const)'f',
 1425|       |    (char const)'t', (char const)'w', (char const)'a', (char const)'r',
 1426|       |    (char const)'e', (char const)' ', (char const)'F', (char const)'o',
 1427|       |    (char const)'u', (char const)'n', (char const)'d', (char const)'a',
 1428|       |    (char const)'t', (char const)'i', (char const)'o', (char const)'n',
 1429|       |    (char const)',', (char const)' ', (char const)'I', (char const)'n',
 1430|       |    (char const)'c', (char const)'.', (char const)'\000'
 1431|       |};
 1432|       |char *trim2(char const *s, int how);
 1433|       |extern __attribute__((__nothrow__)) void *(__attribute__((__nonnull__(1, 2))) memmove)(void *__dest,
 1434|       |        void const *__src,
 1435|       |        size_t __n);
 1436|       |extern __attribute__((__nothrow__)) char *(__attribute__((__nonnull__(1))) strdup)(char const *__s) __attribute__((__malloc__));
 1437|       |extern __attribute__((__nothrow__)) size_t __ctype_get_mb_cur_max(void);
 1438|       |extern __attribute__((__nothrow__)) int mbsinit(mbstate_t const *__ps) __attribute__((__pure__));
 1439|       |extern __attribute__((__nothrow__)) size_t mbrtowc(wchar_t *__restrict __pwc,
 1440|       |        char const *__restrict __s,
 1441|       |        size_t __n, mbstate_t *__restrict __p);
 1442|       |extern __attribute__((__nothrow__)) int iswspace(wint_t __wc);
 1443|       |void mb_copy(mbchar_t *new_mbc, mbchar_t const *old_mbc)
 1444|      0|{
 1445|      0|    _Bool tmp;
 1446|       |
 1447|      0|    {
 1448|      0|        if ((unsigned long)old_mbc->ptr == (unsigned long)(&old_mbc->buf[0])) {
 1449|      0|            {
 1450|      0|                memcpy((void * /* __restrict  */)((void *)(&new_mbc->buf[0])), (void const * /* __restrict  */)((void const *)(&old_mbc->buf[0])),
 1451|      0|                       (size_t)old_mbc->bytes);
 1452|      0|                new_mbc->ptr = (char const *)(&new_mbc->buf[0]);
 1453|      0|            }
 1454|      0|        }
 1455|      0|        else {
 1456|      0|            new_mbc->ptr = (char const *)old_mbc->ptr;
 1457|      0|        }
 1458|      0|        new_mbc->bytes = (size_t)old_mbc->bytes;
 1459|      0|        tmp = (_Bool)old_mbc->wc_valid;
 1460|      0|        new_mbc->wc_valid = tmp;
 1461|      0|        if (tmp) {
 1462|      0|            new_mbc->wc = (wchar_t)old_mbc->wc;
 1463|      0|        }
 1464|      0|        return;
 1465|      0|    }
 1466|      0|}
 1467|       |unsigned int const is_basic_table[8];
 1468|       |_Bool is_basic(char c)
 1469|      0|{
 1470|       |
 1471|      0|    {
 1472|      0|        return ((_Bool)((is_basic_table[(int)((unsigned char)c) >> 5] >> ((int)((unsigned char)c) & 31)) & 1U));
 1473|      0|    }
 1474|      0|}
 1475|       |void mbiter_multi_next(struct mbiter_multi *iter)
 1476|      0|{
 1477|      0|    int tmp;
 1478|      0|    int tmp___0;
 1479|      0|    _Bool tmp___1;
 1480|       |
 1481|      0|    {
 1482|      0|        if (iter->next_done) {
 1483|      0|            return;
 1484|      0|        }
 1485|      0|        if (iter->in_shift) {
 1486|      0|            goto with_shift;
 1487|      0|        }
 1488|      0|        {
 1489|      0|            tmp___1 = is_basic((char)*(iter->cur.ptr));
 1490|      0|        }
 1491|      0|        if (tmp___1) {
 1492|      0|            iter->cur.bytes = (size_t)1;
 1493|      0|            iter->cur.wc = (wchar_t) * (iter->cur.ptr);
 1494|      0|            iter->cur.wc_valid = (_Bool)1;
 1495|      0|        }
 1496|      0|        else {
 1497|      0|            {
 1498|      0|                tmp = mbsinit((mbstate_t const *)(&iter->state));
 1499|      0|            }
 1500|      0|            if (!tmp) {
 1501|      0|                {
 1502|      0|                    __assert_fail("mbsinit (&iter->state)", "/home/khheo/project/benchmark/grep-2.19/lib/mbiter.h",
 1503|      0|                                  142U, "mbiter_multi_next");
 1504|      0|                }
 1505|      0|            }
 1506|      0|            iter->in_shift = (_Bool)1;
 1507|      0|with_shift : {
 1508|      0|                iter->cur.bytes = mbrtowc((wchar_t * /* __restrict  */)(&iter->cur.wc), (char const * /* __restrict  */)iter->cur.ptr,
 1509|      0|                                          (size_t)(iter->limit - iter->cur.ptr), (mbstate_t * /* __restrict  */)(&iter->state));
 1510|      0|            }
 1511|      0|            if (iter->cur.bytes == 0xffffffffffffffffUL) {
 1512|      0|                iter->cur.bytes = (size_t)1;
 1513|      0|                iter->cur.wc_valid = (_Bool)0;
 1514|      0|            }
 1515|      0|            else {
 1516|      0|                if (iter->cur.bytes == 0xfffffffffffffffeUL) {
 1517|      0|                    iter->cur.bytes = (size_t)(iter->limit - iter->cur.ptr);
 1518|      0|                    iter->cur.wc_valid = (_Bool)0;
 1519|      0|                }
 1520|      0|                else {
 1521|      0|                    if (iter->cur.bytes == 0UL) {
 1522|      0|                        iter->cur.bytes = (size_t)1;
 1523|      0|                        if (!((int const) * (iter->cur.ptr) == 0)) {
 1524|      0|                            {
 1525|      0|                                __assert_fail("*iter->cur.ptr == \'\\0\'", "/home/khheo/project/benchmark/grep-2.19/lib/mbiter.h",
 1526|      0|                                              169U, "mbiter_multi_next");
 1527|      0|                            }
 1528|      0|                        }
 1529|      0|                        if (!(iter->cur.wc == 0)) {
 1530|      0|                            {
 1531|      0|                                __assert_fail("iter->cur.wc == 0", "/home/khheo/project/benchmark/grep-2.19/lib/mbiter.h",
 1532|      0|                                              170U, "mbiter_multi_next");
 1533|      0|                            }
 1534|      0|                        }
 1535|      0|                    }
 1536|      0|                    {
 1537|      0|                        iter->cur.wc_valid = (_Bool)1;
 1538|      0|                        tmp___0 = mbsinit((mbstate_t const *)(&iter->state));
 1539|      0|                    }
 1540|      0|                    if (tmp___0) {
 1541|      0|                        iter->in_shift = (_Bool)0;
 1542|      0|                    }
 1543|      0|                }
 1544|      0|            }
 1545|      0|        }
 1546|      0|        iter->next_done = (_Bool)1;
 1547|      0|        return;
 1548|      0|    }
 1549|      0|}
 1550|       |char *trim2(char const *s, int how)
 1551|      0|{
 1552|      0|    char *d;
 1553|      0|    mbi_iterator_t i;
 1554|      0|    size_t tmp;
 1555|      0|    int tmp___0;
 1556|      0|    size_t tmp___1;
 1557|      0|    unsigned int state;
 1558|      0|    char *r;
 1559|      0|    size_t tmp___2;
 1560|      0|    int tmp___3;
 1561|      0|    int tmp___4;
 1562|      0|    int tmp___5;
 1563|      0|    int tmp___6;
 1564|      0|    int tmp___7;
 1565|      0|    char *p;
 1566|      0|    unsigned short const **tmp___8;
 1567|      0|    size_t tmp___9;
 1568|      0|    size_t tmp___10;
 1569|      0|    unsigned short const **tmp___11;
 1570|      0|    size_t tmp___12;
 1571|      0|    void *__cil_tmp24;
 1572|      0|    void *__cil_tmp25;
 1573|       |
 1574|      0|    {
 1575|      0|        {
 1576|      0|            d = strdup(s);
 1577|      0|        }
 1578|      0|        if (!d) {
 1579|      0|            {
 1580|      0|                xalloc_die();
 1581|      0|            }
 1582|      0|        }
 1583|      0|        {
 1584|      0|            tmp___12 = __ctype_get_mb_cur_max();
 1585|      0|        }
 1586|      0|        if (tmp___12 > 1UL) {
 1587|      0|            if (how != 0) {
 1588|      0|                {
 1589|      0|                    i.cur.ptr = (char const *)d;
 1590|      0|                    tmp = strlen((char const *)d);
 1591|      0|                    i.limit = i.cur.ptr + tmp;
 1592|      0|                    i.in_shift = (_Bool)0;
 1593|      0|                    memset((void *)(&i.state), '\000', sizeof(mbstate_t));
 1594|      0|                    i.next_done = (_Bool)0;
 1595|      0|                }
 1596|      0|                {
 1597|      0|                    while (1) {
 1598|      0|while_continue: /* CIL Label */
 1599|      0|                        ;
 1600|       |
 1601|      0|                        if ((unsigned long)i.cur.ptr < (unsigned long)i.limit) {
 1602|      0|                            {
 1603|      0|                                mbiter_multi_next(&i);
 1604|      0|                            }
 1605|      0|                            if (i.cur.wc_valid) {
 1606|      0|                                {
 1607|      0|                                    tmp___0 = iswspace((wint_t)i.cur.wc);
 1608|      0|                                }
 1609|      0|                                if (!tmp___0) {
 1610|      0|                                    goto while_break;
 1611|      0|                                }
 1612|      0|                            }
 1613|      0|                            else {
 1614|      0|                                goto while_break;
 1615|      0|                            }
 1616|      0|                        }
 1617|      0|                        else {
 1618|      0|                            goto while_break;
 1619|      0|                        }
 1620|      0|                        i.cur.ptr += i.cur.bytes;
 1621|      0|                        i.next_done = (_Bool)0;
 1622|      0|                    }
 1623|      0|while_break___3: /* CIL Label */
 1624|      0|                    ;
 1625|      0|                }
 1626|      0|while_break : {
 1627|      0|                    tmp___1 = strlen(i.cur.ptr);
 1628|      0|                    memmove((void *)d, (void const *)i.cur.ptr, tmp___1 + 1UL);
 1629|      0|                }
 1630|      0|            }
 1631|      0|            if (how != 1) {
 1632|      0|                {
 1633|      0|                    state = 0U;
 1634|      0|                    i.cur.ptr = (char const *)d;
 1635|      0|                    tmp___2 = strlen((char const *)d);
 1636|      0|                    i.limit = i.cur.ptr + tmp___2;
 1637|      0|                    i.in_shift = (_Bool)0;
 1638|      0|                    memset((void *)(&i.state), '\000', sizeof(mbstate_t));
 1639|      0|                    i.next_done = (_Bool)0;
 1640|      0|                }
 1641|      0|                {
 1642|      0|                    while (1) {
 1643|      0|while_continue___0: /* CIL Label */
 1644|      0|                        ;
 1645|       |
 1646|      0|                        if ((unsigned long)i.cur.ptr < (unsigned long)i.limit) {
 1647|      0|                            {
 1648|      0|                                mbiter_multi_next(&i);
 1649|      0|                            }
 1650|      0|                        }
 1651|      0|                        else {
 1652|      0|                            goto while_break___0;
 1653|      0|                        }
 1654|      0|                        if (state == 0U) {
 1655|      0|                            if (i.cur.wc_valid) {
 1656|      0|                                {
 1657|      0|                                    tmp___3 = iswspace((wint_t)i.cur.wc);
 1658|      0|                                }
 1659|      0|                                if (tmp___3) {
 1660|      0|                                    goto __Cont;
 1661|      0|                                }
 1662|      0|                            }
 1663|      0|                        }
 1664|      0|                        if (state == 0U) {
 1665|      0|                            if (i.cur.wc_valid) {
 1666|      0|                                {
 1667|      0|                                    tmp___4 = iswspace((wint_t)i.cur.wc);
 1668|      0|                                }
 1669|      0|                                if (!tmp___4) {
 1670|      0|                                    state = 1U;
 1671|      0|                                    goto __Cont;
 1672|      0|                                }
 1673|      0|                            }
 1674|      0|                            else {
 1675|      0|                                state = 1U;
 1676|      0|                                goto __Cont;
 1677|      0|                            }
 1678|      0|                        }
 1679|      0|                        if (state == 1U) {
 1680|      0|                            if (i.cur.wc_valid) {
 1681|      0|                                {
 1682|      0|                                    tmp___5 = iswspace((wint_t)i.cur.wc);
 1683|      0|                                }
 1684|      0|                                if (!tmp___5) {
 1685|      0|                                    goto __Cont;
 1686|      0|                                }
 1687|      0|                            }
 1688|      0|                            else {
 1689|      0|                                goto __Cont;
 1690|      0|                            }
 1691|      0|                        }
 1692|      0|                        if (state == 1U) {
 1693|      0|                            if (i.cur.wc_valid) {
 1694|      0|                                {
 1695|      0|                                    tmp___7 = iswspace((wint_t)i.cur.wc);
 1696|      0|                                }
 1697|      0|                                if (tmp___7) {
 1698|      0|                                    state = 2U;
 1699|      0|                                    r = (char *)i.cur.ptr;
 1700|      0|                                }
 1701|      0|                                else {
 1702|      0|                                    goto _L;
 1703|      0|                                }
 1704|      0|                            }
 1705|      0|                            else {
 1706|      0|                                goto _L;
 1707|      0|                            }
 1708|      0|                        }
 1709|      0|                        else {
 1710|      0|_L:
 1711|      0|                            if (state == 2U) {
 1712|      0|                                if (i.cur.wc_valid) {
 1713|      0|                                    {
 1714|      0|                                        tmp___6 = iswspace((wint_t)i.cur.wc);
 1715|      0|                                    }
 1716|      0|                                    if (!tmp___6) {
 1717|      0|                                        state = 1U;
 1718|      0|                                    }
 1719|      0|                                }
 1720|      0|                                else {
 1721|      0|                                    state = 1U;
 1722|      0|                                }
 1723|      0|                            }
 1724|      0|                            else {
 1725|      0|                                state = 1U;
 1726|      0|                            }
 1727|      0|                        }
 1728|      0|__Cont:
 1729|      0|                        i.cur.ptr += i.cur.bytes;
 1730|      0|                        i.next_done = (_Bool)0;
 1731|      0|                    }
 1732|      0|while_break___4: /* CIL Label */
 1733|      0|                    ;
 1734|      0|                }
 1735|      0|while_break___0:
 1736|      0|                ;
 1737|      0|                if (state == 2U) {
 1738|      0|                    *r = (char)'\000';
 1739|      0|                }
 1740|      0|            }
 1741|      0|        }
 1742|      0|        else {
 1743|      0|            if (how != 0) {
 1744|      0|                p = d;
 1745|      0|                {
 1746|      0|                    while (1) {
 1747|      0|while_continue___1: /* CIL Label */
 1748|      0|                        ;
 1749|       |
 1750|      0|                        if (*p) {
 1751|      0|                            {
 1752|      0|                                tmp___8 = __ctype_b_loc();
 1753|      0|                            }
 1754|      0|                            if (!((int const) * (*tmp___8 + (int)((unsigned char)*p)) & 8192)) {
 1755|      0|                                goto while_break___1;
 1756|      0|                            }
 1757|      0|                        }
 1758|      0|                        else {
 1759|      0|                            goto while_break___1;
 1760|      0|                        }
 1761|      0|                        p++;
 1762|      0|                    }
 1763|      0|while_break___5: /* CIL Label */
 1764|      0|                    ;
 1765|      0|                }
 1766|      0|while_break___1 : {
 1767|      0|                    tmp___9 = strlen((char const *)p);
 1768|      0|                    memmove((void *)d, (void const *)p, tmp___9 + 1UL);
 1769|      0|                }
 1770|      0|            }
 1771|      0|            if (how != 1) {
 1772|      0|                {
 1773|      0|                    tmp___10 = strlen((char const *)d);
 1774|      0|                    p = (d + tmp___10) - 1;
 1775|      0|                }
 1776|      0|                {
 1777|      0|                    while (1) {
 1778|      0|while_continue___2: /* CIL Label */
 1779|      0|                        ;
 1780|       |
 1781|      0|                        if ((unsigned long)p >= (unsigned long)d) {
 1782|      0|                            {
 1783|      0|                                tmp___11 = __ctype_b_loc();
 1784|      0|                            }
 1785|      0|                            if (!((int const) * (*tmp___11 + (int)((unsigned char)*p)) & 8192)) {
 1786|      0|                                goto while_break___2;
 1787|      0|                            }
 1788|      0|                        }
 1789|      0|                        else {
 1790|      0|                            goto while_break___2;
 1791|      0|                        }
 1792|      0|                        *p = (char)'\000';
 1793|      0|                        p--;
 1794|      0|                    }
 1795|      0|while_break___6: /* CIL Label */
 1796|      0|                    ;
 1797|      0|                }
 1798|      0|while_break___2:
 1799|      0|                ;
 1800|      0|            }
 1801|      0|        }
 1802|      0|        return (d);
 1803|      0|    }
 1804|      0|}
 1805|       |size_t strnlen1(char const *string, size_t maxlen) __attribute__((__pure__));
 1806|       |extern __attribute__((__nothrow__)) void *(__attribute__((__nonnull__(1))) memchr)(void const *__s,
 1807|       |        int __c,
 1808|       |        size_t __n) __attribute__((__pure__));
 1809|       |size_t strnlen1(char const *string, size_t maxlen) __attribute__((__pure__));
 1810|       |size_t strnlen1(char const *string, size_t maxlen)
 1811|      0|{
 1812|      0|    char const *end;
 1813|      0|    char const *tmp;
 1814|       |
 1815|      0|    {
 1816|      0|        {
 1817|      0|            tmp = (char const *)memchr((void const *)string, '\000', maxlen);
 1818|      0|            end = tmp;
 1819|      0|        }
 1820|      0|        if ((unsigned long)end != (unsigned long)((void *)0)) {
 1821|      0|            return ((size_t)((end - string) + 1L));
 1822|      0|        }
 1823|      0|        else {
 1824|      0|            return (maxlen);
 1825|      0|        }
 1826|      0|    }
 1827|      0|}
 1828|       |int c_strcasecmp(char const *s1, char const *s2) __attribute__((__pure__));
 1829|       |extern int close(int __fd);
 1830|       |extern __attribute__((__nothrow__)) int fchdir(int __fd);
 1831|       |int set_cloexec_flag(int desc, _Bool value);
 1832|       |int open_safer(char const *file, int flags, ...);
 1833|       |size_t safe_read(int fd, void *buf, size_t count);
 1834|       |extern ssize_t read(int __fd, void *__buf, size_t __nbytes);
 1835|       |size_t safe_read(int fd, void *buf, size_t count)
 1836|      8|{
 1837|      8|    ssize_t result;
 1838|      8|    ssize_t tmp;
 1839|      8|    int *tmp___0;
 1840|      8|    int *tmp___1;
 1841|       |
 1842|      8|    {
 1843|      8|        {
 1844|      8|            while (1) {
 1845|      8|while_continue: /* CIL Label */
 1846|      8|                ;
 1847|      8|                {
 1848|      8|                    tmp = read(fd, buf, count);
 1849|      8|                    result = tmp;
 1850|      8|                }
 1851|      8|                if (0L <= result) {
 1852|      8|                    return ((size_t)result);
 1853|      8|                }
 1854|      0|                else {
 1855|      0|                    {
 1856|      0|                        tmp___1 = __errno_location();
 1857|      0|                    }
 1858|      0|                    if (*tmp___1 == 4) {
 1859|      0|                        goto __Cont;
 1860|      0|                    }
 1861|      0|                    else {
 1862|      0|                        {
 1863|      0|                            tmp___0 = __errno_location();
 1864|      0|                        }
 1865|      0|                        if (*tmp___0 == 22) {
 1866|      0|                            if (2147475456UL < count) {
 1867|      0|                                count = (size_t)2147475456;
 1868|      0|                            }
 1869|      0|                            else {
 1870|      0|                                return ((size_t)result);
 1871|      0|                            }
 1872|      0|                        }
 1873|      0|                        else {
 1874|      0|                            return ((size_t)result);
 1875|      0|                        }
 1876|      0|                    }
 1877|      0|                }
 1878|      0|__Cont:
 1879|      0|                ;
 1880|      0|            }
 1881|      0|while_break: /* CIL Label */
 1882|      0|            ;
 1883|      0|        }
 1884|       |
 1885|      0|        return (0UL);
 1886|      8|    }
 1887|      8|}
 1888|       |char const *const quoting_style_args[9];
 1889|       |enum quoting_style const quoting_style_vals[8];
 1890|       |int set_char_quoting(struct quoting_options *o, char c, int i);
 1891|       |char *quotearg_n_style(int n, enum quoting_style s, char const *arg);
 1892|       |char *quotearg_char(char const *arg, char ch);
 1893|       |char *quotearg_char_mem(char const *arg, size_t argsize, char ch);
 1894|       |char *quotearg_colon(char const *arg);
 1895|       |struct quoting_options quote_quoting_options;
 1896|       |char const *quote_n_mem(int n, char const *arg, size_t argsize);
 1897|       |char const *quote_n(int n, char const *arg);
 1898|       |char const *quote(char const *arg);
 1899|       |char const *locale_charset(void);
 1900|       |extern __attribute__((__nothrow__)) int(__attribute__((__nonnull__(1, 2))) memcmp)(void const *__s1,
 1901|       |        void const *__s2,
 1902|       |        size_t __n) __attribute__((__pure__));
 1903|       |extern __attribute__((__nothrow__)) int iswprint(wint_t __wc);
 1904|       |char const *const quoting_style_args[9] = {
 1905|       |    (char const * /* const  */) "literal", (char const * /* const  */) "shell", (char const * /* const  */) "shell-always", (char const * /* const  */) "c",
 1906|       |    (char const * /* const  */) "c-maybe", (char const * /* const  */) "escape", (char const * /* const  */) "locale", (char const * /* const  */) "clocale",
 1907|       |    (char const * /* const  */)((char const *)0)
 1908|       |};
 1909|       |enum quoting_style const quoting_style_vals[8] = {
 1910|       |    (enum quoting_style const)0, (enum quoting_style const)1, (enum quoting_style const)2, (enum quoting_style const)3,
 1911|       |    (enum quoting_style const)4, (enum quoting_style const)5, (enum quoting_style const)6, (enum quoting_style const)7
 1912|       |};
 1913|       |static struct quoting_options default_quoting_options;
 1914|       |int set_char_quoting(struct quoting_options *o, char c, int i)
 1915|      0|{
 1916|      0|    unsigned char uc;
 1917|      0|    unsigned int *p;
 1918|      0|    struct quoting_options *tmp;
 1919|      0|    int shift;
 1920|      0|    int r;
 1921|       |
 1922|      0|    {
 1923|      0|        uc = (unsigned char)c;
 1924|      0|        if (o) {
 1925|      0|            tmp = o;
 1926|      0|        }
 1927|      0|        else {
 1928|      0|            tmp = &default_quoting_options;
 1929|      0|        }
 1930|      0|        p = tmp->quote_these_too + (unsigned long)uc / (sizeof(int) * 8UL);
 1931|      0|        shift = (int)((unsigned long)uc % (sizeof(int) * 8UL));
 1932|      0|        r = (int)((*p >> shift) & 1U);
 1933|      0|        *p ^= (unsigned int)(((i & 1) ^ r) << shift);
 1934|      0|        return (r);
 1935|      0|    }
 1936|      0|}
 1937|       |static struct quoting_options quoting_options_from_style(enum quoting_style style)
 1938|      0|{
 1939|      0|    struct quoting_options o;
 1940|      0|    unsigned int tmp;
 1941|      0|    void *__cil_tmp5;
 1942|       |
 1943|      0|    {
 1944|      0|        o.style = (enum quoting_style)0;
 1945|      0|        o.flags = 0;
 1946|      0|        o.quote_these_too[0] = 0U;
 1947|      0|        tmp = 1U;
 1948|      0|        {
 1949|      0|            while (1) {
 1950|      0|while_continue: /* CIL Label */
 1951|      0|                ;
 1952|       |
 1953|      0|                if (!(!(tmp >= 8U))) {
 1954|      0|                    goto while_break;
 1955|      0|                }
 1956|      0|                o.quote_these_too[tmp] = 0U;
 1957|      0|                tmp++;
 1958|      0|            }
 1959|      0|while_break___0: /* CIL Label */
 1960|      0|            ;
 1961|      0|        }
 1962|      0|while_break:
 1963|      0|        o.left_quote = (char const *)((void *)0);
 1964|      0|        o.right_quote = (char const *)((void *)0);
 1965|      0|        if ((unsigned int)style == 8U) {
 1966|      0|            {
 1967|      0|                abort();
 1968|      0|            }
 1969|      0|        }
 1970|      0|        o.style = style;
 1971|      0|        return (o);
 1972|      0|    }
 1973|      0|}
 1974|       |static char const *gettext_quote(char const *msgid, enum quoting_style s)
 1975|      0|{
 1976|      0|    char const *translation;
 1977|      0|    char const *tmp;
 1978|      0|    char const *locale_code;
 1979|      0|    char const *tmp___0;
 1980|      0|    int tmp___1;
 1981|      0|    char const *tmp___2;
 1982|      0|    int tmp___3;
 1983|      0|    char const *tmp___4;
 1984|      0|    char *__cil_tmp20;
 1985|      0|    char *__cil_tmp21;
 1986|      0|    char *__cil_tmp22;
 1987|      0|    char *__cil_tmp23;
 1988|      0|    char *__cil_tmp24;
 1989|      0|    char *__cil_tmp25;
 1990|      0|    char *__cil_tmp26;
 1991|      0|    char *__cil_tmp27;
 1992|       |
 1993|      0|    {
 1994|      0|        {
 1995|      0|            tmp = (char const *)gettext(msgid);
 1996|      0|            translation = tmp;
 1997|      0|        }
 1998|      0|        if ((unsigned long)translation != (unsigned long)msgid) {
 1999|      0|            return (translation);
 2000|      0|        }
 2001|      0|        {
 2002|      0|            locale_code = locale_charset();
 2003|      0|            tmp___1 = c_strcasecmp(locale_code, "UTF-8");
 2004|      0|        }
 2005|      0|        if (tmp___1 == 0) {
 2006|      0|            if ((int const) * (msgid + 0) == 96) {
 2007|      0|                tmp___0 = "\342\200\230";
 2008|      0|            }
 2009|      0|            else {
 2010|      0|                tmp___0 = "\342\200\231";
 2011|      0|            }
 2012|      0|            return (tmp___0);
 2013|      0|        }
 2014|      0|        {
 2015|      0|            tmp___3 = c_strcasecmp(locale_code, "GB18030");
 2016|      0|        }
 2017|      0|        if (tmp___3 == 0) {
 2018|      0|            if ((int const) * (msgid + 0) == 96) {
 2019|      0|                tmp___2 = "\241\ae";
 2020|      0|            }
 2021|      0|            else {
 2022|      0|                tmp___2 = "\241\257";
 2023|      0|            }
 2024|      0|            return (tmp___2);
 2025|      0|        }
 2026|      0|        if ((unsigned int)s == 7U) {
 2027|      0|            tmp___4 = "\"";
 2028|      0|        }
 2029|      0|        else {
 2030|      0|            tmp___4 = "\'";
 2031|      0|        }
 2032|      0|        return (tmp___4);
 2033|      0|    }
 2034|      0|}
 2035|       |static size_t quotearg_buffer_restyled(char *buffer___0, size_t buffersize, char const *arg,
 2036|       |                                       size_t argsize, enum quoting_style quoting_style,
 2037|       |                                       int flags, unsigned int const *quote_these_too,
 2038|       |                                       char const *left_quote, char const *right_quote)
 2039|      0|{
 2040|      0|    size_t i;
 2041|      0|    size_t len;
 2042|      0|    char const *quote_string;
 2043|      0|    size_t quote_string_len;
 2044|      0|    _Bool backslash_escapes;
 2045|      0|    _Bool unibyte_locale;
 2046|      0|    size_t tmp;
 2047|      0|    _Bool elide_outer_quotes;
 2048|      0|    unsigned char c;
 2049|      0|    unsigned char esc;
 2050|      0|    _Bool is_right_quote;
 2051|      0|    size_t tmp___0;
 2052|      0|    int tmp___1;
 2053|      0|    int tmp___2;
 2054|      0|    size_t m;
 2055|      0|    _Bool printable;
 2056|      0|    unsigned short const **tmp___3;
 2057|      0|    mbstate_t mbstate;
 2058|      0|    wchar_t w;
 2059|      0|    size_t bytes;
 2060|      0|    size_t tmp___4;
 2061|      0|    size_t j;
 2062|      0|    int tmp___5;
 2063|      0|    int tmp___6;
 2064|      0|    size_t ilim;
 2065|      0|    int tmp___7;
 2066|      0|    size_t tmp___8;
 2067|      0|    void *__cil_tmp42;
 2068|      0|    char *__cil_tmp43;
 2069|      0|    char *__cil_tmp44;
 2070|      0|    char *__cil_tmp45;
 2071|      0|    char *__cil_tmp46;
 2072|       |
 2073|      0|    {
 2074|      0|        {
 2075|      0|            len = (size_t)0;
 2076|      0|            quote_string = (char const *)0;
 2077|      0|            quote_string_len = (size_t)0;
 2078|      0|            backslash_escapes = (_Bool)0;
 2079|      0|            tmp = __ctype_get_mb_cur_max();
 2080|      0|            unibyte_locale = (_Bool)(tmp == 1UL);
 2081|      0|            elide_outer_quotes = (_Bool)((flags & 2) != 0);
 2082|      0|        }
 2083|      0|        if ((unsigned int)quoting_style == 4U) {
 2084|      0|            goto case_4;
 2085|      0|        }
 2086|      0|        if ((unsigned int)quoting_style == 3U) {
 2087|      0|            goto case_3;
 2088|      0|        }
 2089|      0|        if ((unsigned int)quoting_style == 5U) {
 2090|      0|            goto case_5;
 2091|      0|        }
 2092|      0|        if ((unsigned int)quoting_style == 6U) {
 2093|      0|            goto case_6;
 2094|      0|        }
 2095|      0|        if ((unsigned int)quoting_style == 7U) {
 2096|      0|            goto case_6;
 2097|      0|        }
 2098|      0|        if ((unsigned int)quoting_style == 8U) {
 2099|      0|            goto case_6;
 2100|      0|        }
 2101|      0|        if ((unsigned int)quoting_style == 1U) {
 2102|      0|            goto case_1;
 2103|      0|        }
 2104|      0|        if ((unsigned int)quoting_style == 2U) {
 2105|      0|            goto case_2;
 2106|      0|        }
 2107|      0|        if ((unsigned int)quoting_style == 0U) {
 2108|      0|            goto case_0;
 2109|      0|        }
 2110|      0|        goto switch_default;
 2111|      0|case_4:
 2112|      0|        quoting_style = (enum quoting_style)3;
 2113|      0|        elide_outer_quotes = (_Bool)1;
 2114|      0|case_3:
 2115|      0|        if (!elide_outer_quotes) {
 2116|      0|            {
 2117|      0|                while (1) {
 2118|      0|while_continue: /* CIL Label */
 2119|      0|                    ;
 2120|       |
 2121|      0|                    if (len < buffersize) {
 2122|      0|                        *(buffer___0 + len) = (char)'\"';
 2123|      0|                    }
 2124|      0|                    len++;
 2125|      0|                    goto while_break;
 2126|      0|                }
 2127|      0|while_break___27: /* CIL Label */
 2128|      0|                ;
 2129|      0|            }
 2130|      0|while_break:
 2131|      0|            ;
 2132|      0|        }
 2133|      0|        backslash_escapes = (_Bool)1;
 2134|      0|        quote_string = "\"";
 2135|      0|        quote_string_len = (size_t)1;
 2136|      0|        goto switch_break;
 2137|      0|case_5:
 2138|      0|        backslash_escapes = (_Bool)1;
 2139|      0|        elide_outer_quotes = (_Bool)0;
 2140|      0|        goto switch_break;
 2141|      0|case_6:
 2142|      0|        if ((unsigned int)quoting_style != 8U) {
 2143|      0|            {
 2144|      0|                left_quote = gettext_quote("`", quoting_style);
 2145|      0|                right_quote = gettext_quote("\'", quoting_style);
 2146|      0|            }
 2147|      0|        }
 2148|      0|        if (!elide_outer_quotes) {
 2149|      0|            quote_string = left_quote;
 2150|      0|            {
 2151|      0|                while (1) {
 2152|      0|while_continue___0: /* CIL Label */
 2153|      0|                    ;
 2154|       |
 2155|      0|                    if (!*quote_string) {
 2156|      0|                        goto while_break___0;
 2157|      0|                    }
 2158|      0|                    {
 2159|      0|                        while (1) {
 2160|      0|while_continue___1: /* CIL Label */
 2161|      0|                            ;
 2162|       |
 2163|      0|                            if (len < buffersize) {
 2164|      0|                                *(buffer___0 + len) = (char)*quote_string;
 2165|      0|                            }
 2166|      0|                            len++;
 2167|      0|                            goto while_break___1;
 2168|      0|                        }
 2169|      0|while_break___29: /* CIL Label */
 2170|      0|                        ;
 2171|      0|                    }
 2172|      0|while_break___1:
 2173|      0|                    quote_string++;
 2174|      0|                }
 2175|      0|while_break___28: /* CIL Label */
 2176|      0|                ;
 2177|      0|            }
 2178|      0|while_break___0:
 2179|      0|            ;
 2180|      0|        }
 2181|      0|        {
 2182|      0|            backslash_escapes = (_Bool)1;
 2183|      0|            quote_string = right_quote;
 2184|      0|            quote_string_len = strlen(quote_string);
 2185|      0|        }
 2186|      0|        goto switch_break;
 2187|      0|case_1:
 2188|      0|        quoting_style = (enum quoting_style)2;
 2189|      0|        elide_outer_quotes = (_Bool)1;
 2190|      0|case_2:
 2191|      0|        if (!elide_outer_quotes) {
 2192|      0|            {
 2193|      0|                while (1) {
 2194|      0|while_continue___2: /* CIL Label */
 2195|      0|                    ;
 2196|       |
 2197|      0|                    if (len < buffersize) {
 2198|      0|                        *(buffer___0 + len) = (char)'\'';
 2199|      0|                    }
 2200|      0|                    len++;
 2201|      0|                    goto while_break___2;
 2202|      0|                }
 2203|      0|while_break___30: /* CIL Label */
 2204|      0|                ;
 2205|      0|            }
 2206|      0|while_break___2:
 2207|      0|            ;
 2208|      0|        }
 2209|      0|        quote_string = "\'";
 2210|      0|        quote_string_len = (size_t)1;
 2211|      0|        goto switch_break;
 2212|      0|case_0:
 2213|      0|        elide_outer_quotes = (_Bool)0;
 2214|      0|        goto switch_break;
 2215|      0|switch_default : {
 2216|      0|            abort();
 2217|      0|        }
 2218|      0|switch_break:
 2219|      0|        i = (size_t)0;
 2220|      0|        {
 2221|      0|            while (1) {
 2222|      0|while_continue___3: /* CIL Label */
 2223|      0|                ;
 2224|       |
 2225|      0|                if (argsize == 0xffffffffffffffffUL) {
 2226|      0|                    tmp___7 = (int const) * (arg + i) == 0;
 2227|      0|                }
 2228|      0|                else {
 2229|      0|                    tmp___7 = i == argsize;
 2230|      0|                }
 2231|      0|                if (tmp___7) {
 2232|      0|                    goto while_break___3;
 2233|      0|                }
 2234|      0|                is_right_quote = (_Bool)0;
 2235|      0|                if (backslash_escapes) {
 2236|      0|                    if (quote_string_len) {
 2237|      0|                        if (argsize == 0xffffffffffffffffUL) {
 2238|      0|                            if (1UL < quote_string_len) {
 2239|      0|                                {
 2240|      0|                                    argsize = strlen(arg);
 2241|      0|                                    tmp___0 = argsize;
 2242|      0|                                }
 2243|      0|                            }
 2244|      0|                            else {
 2245|      0|                                tmp___0 = argsize;
 2246|      0|                            }
 2247|      0|                        }
 2248|      0|                        else {
 2249|      0|                            tmp___0 = argsize;
 2250|      0|                        }
 2251|      0|                        if (i + quote_string_len <= tmp___0) {
 2252|      0|                            {
 2253|      0|                                tmp___1 = memcmp((void const *)(arg + i), (void const *)quote_string,
 2254|      0|                                                 quote_string_len);
 2255|      0|                            }
 2256|      0|                            if (tmp___1 == 0) {
 2257|      0|                                if (elide_outer_quotes) {
 2258|      0|                                    goto force_outer_quoting_style;
 2259|      0|                                }
 2260|      0|                                is_right_quote = (_Bool)1;
 2261|      0|                            }
 2262|      0|                        }
 2263|      0|                    }
 2264|      0|                }
 2265|      0|                c = (unsigned char)*(arg + i);
 2266|      0|                if ((int)c == 0) {
 2267|      0|                    goto case_0___0;
 2268|      0|                }
 2269|      0|                if ((int)c == 63) {
 2270|      0|                    goto case_63;
 2271|      0|                }
 2272|      0|                if ((int)c == 7) {
 2273|      0|                    goto case_7___0;
 2274|      0|                }
 2275|      0|                if ((int)c == 8) {
 2276|      0|                    goto case_8___0;
 2277|      0|                }
 2278|      0|                if ((int)c == 12) {
 2279|      0|                    goto case_12;
 2280|      0|                }
 2281|      0|                if ((int)c == 10) {
 2282|      0|                    goto case_10;
 2283|      0|                }
 2284|      0|                if ((int)c == 13) {
 2285|      0|                    goto case_13;
 2286|      0|                }
 2287|      0|                if ((int)c == 9) {
 2288|      0|                    goto case_9;
 2289|      0|                }
 2290|      0|                if ((int)c == 11) {
 2291|      0|                    goto case_11;
 2292|      0|                }
 2293|      0|                if ((int)c == 92) {
 2294|      0|                    goto case_92;
 2295|      0|                }
 2296|      0|                if ((int)c == 123) {
 2297|      0|                    goto case_123;
 2298|      0|                }
 2299|      0|                if ((int)c == 125) {
 2300|      0|                    goto case_123;
 2301|      0|                }
 2302|      0|                if ((int)c == 35) {
 2303|      0|                    goto case_35;
 2304|      0|                }
 2305|      0|                if ((int)c == 126) {
 2306|      0|                    goto case_35;
 2307|      0|                }
 2308|      0|                if ((int)c == 32) {
 2309|      0|                    goto case_32;
 2310|      0|                }
 2311|      0|                if ((int)c == 33) {
 2312|      0|                    goto case_32;
 2313|      0|                }
 2314|      0|                if ((int)c == 34) {
 2315|      0|                    goto case_32;
 2316|      0|                }
 2317|      0|                if ((int)c == 36) {
 2318|      0|                    goto case_32;
 2319|      0|                }
 2320|      0|                if ((int)c == 38) {
 2321|      0|                    goto case_32;
 2322|      0|                }
 2323|      0|                if ((int)c == 40) {
 2324|      0|                    goto case_32;
 2325|      0|                }
 2326|      0|                if ((int)c == 41) {
 2327|      0|                    goto case_32;
 2328|      0|                }
 2329|      0|                if ((int)c == 42) {
 2330|      0|                    goto case_32;
 2331|      0|                }
 2332|      0|                if ((int)c == 59) {
 2333|      0|                    goto case_32;
 2334|      0|                }
 2335|      0|                if ((int)c == 60) {
 2336|      0|                    goto case_32;
 2337|      0|                }
 2338|      0|                if ((int)c == 61) {
 2339|      0|                    goto case_32;
 2340|      0|                }
 2341|      0|                if ((int)c == 62) {
 2342|      0|                    goto case_32;
 2343|      0|                }
 2344|      0|                if ((int)c == 91) {
 2345|      0|                    goto case_32;
 2346|      0|                }
 2347|      0|                if ((int)c == 94) {
 2348|      0|                    goto case_32;
 2349|      0|                }
 2350|      0|                if ((int)c == 96) {
 2351|      0|                    goto case_32;
 2352|      0|                }
 2353|      0|                if ((int)c == 124) {
 2354|      0|                    goto case_32;
 2355|      0|                }
 2356|      0|                if ((int)c == 39) {
 2357|      0|                    goto case_39___0;
 2358|      0|                }
 2359|      0|                if ((int)c == 37) {
 2360|      0|                    goto case_37;
 2361|      0|                }
 2362|      0|                if ((int)c == 43) {
 2363|      0|                    goto case_37;
 2364|      0|                }
 2365|      0|                if ((int)c == 44) {
 2366|      0|                    goto case_37;
 2367|      0|                }
 2368|      0|                if ((int)c == 45) {
 2369|      0|                    goto case_37;
 2370|      0|                }
 2371|      0|                if ((int)c == 46) {
 2372|      0|                    goto case_37;
 2373|      0|                }
 2374|      0|                if ((int)c == 47) {
 2375|      0|                    goto case_37;
 2376|      0|                }
 2377|      0|                if ((int)c == 48) {
 2378|      0|                    goto case_37;
 2379|      0|                }
 2380|      0|                if ((int)c == 49) {
 2381|      0|                    goto case_37;
 2382|      0|                }
 2383|      0|                if ((int)c == 50) {
 2384|      0|                    goto case_37;
 2385|      0|                }
 2386|      0|                if ((int)c == 51) {
 2387|      0|                    goto case_37;
 2388|      0|                }
 2389|      0|                if ((int)c == 52) {
 2390|      0|                    goto case_37;
 2391|      0|                }
 2392|      0|                if ((int)c == 53) {
 2393|      0|                    goto case_37;
 2394|      0|                }
 2395|      0|                if ((int)c == 54) {
 2396|      0|                    goto case_37;
 2397|      0|                }
 2398|      0|                if ((int)c == 55) {
 2399|      0|                    goto case_37;
 2400|      0|                }
 2401|      0|                if ((int)c == 56) {
 2402|      0|                    goto case_37;
 2403|      0|                }
 2404|      0|                if ((int)c == 57) {
 2405|      0|                    goto case_37;
 2406|      0|                }
 2407|      0|                if ((int)c == 58) {
 2408|      0|                    goto case_37;
 2409|      0|                }
 2410|      0|                if ((int)c == 65) {
 2411|      0|                    goto case_37;
 2412|      0|                }
 2413|      0|                if ((int)c == 66) {
 2414|      0|                    goto case_37;
 2415|      0|                }
 2416|      0|                if ((int)c == 67) {
 2417|      0|                    goto case_37;
 2418|      0|                }
 2419|      0|                if ((int)c == 68) {
 2420|      0|                    goto case_37;
 2421|      0|                }
 2422|      0|                if ((int)c == 69) {
 2423|      0|                    goto case_37;
 2424|      0|                }
 2425|      0|                if ((int)c == 70) {
 2426|      0|                    goto case_37;
 2427|      0|                }
 2428|      0|                if ((int)c == 71) {
 2429|      0|                    goto case_37;
 2430|      0|                }
 2431|      0|                if ((int)c == 72) {
 2432|      0|                    goto case_37;
 2433|      0|                }
 2434|      0|                if ((int)c == 73) {
 2435|      0|                    goto case_37;
 2436|      0|                }
 2437|      0|                if ((int)c == 74) {
 2438|      0|                    goto case_37;
 2439|      0|                }
 2440|      0|                if ((int)c == 75) {
 2441|      0|                    goto case_37;
 2442|      0|                }
 2443|      0|                if ((int)c == 76) {
 2444|      0|                    goto case_37;
 2445|      0|                }
 2446|      0|                if ((int)c == 77) {
 2447|      0|                    goto case_37;
 2448|      0|                }
 2449|      0|                if ((int)c == 78) {
 2450|      0|                    goto case_37;
 2451|      0|                }
 2452|      0|                if ((int)c == 79) {
 2453|      0|                    goto case_37;
 2454|      0|                }
 2455|      0|                if ((int)c == 80) {
 2456|      0|                    goto case_37;
 2457|      0|                }
 2458|      0|                if ((int)c == 81) {
 2459|      0|                    goto case_37;
 2460|      0|                }
 2461|      0|                if ((int)c == 82) {
 2462|      0|                    goto case_37;
 2463|      0|                }
 2464|      0|                if ((int)c == 83) {
 2465|      0|                    goto case_37;
 2466|      0|                }
 2467|      0|                if ((int)c == 84) {
 2468|      0|                    goto case_37;
 2469|      0|                }
 2470|      0|                if ((int)c == 85) {
 2471|      0|                    goto case_37;
 2472|      0|                }
 2473|      0|                if ((int)c == 86) {
 2474|      0|                    goto case_37;
 2475|      0|                }
 2476|      0|                if ((int)c == 87) {
 2477|      0|                    goto case_37;
 2478|      0|                }
 2479|      0|                if ((int)c == 88) {
 2480|      0|                    goto case_37;
 2481|      0|                }
 2482|      0|                if ((int)c == 89) {
 2483|      0|                    goto case_37;
 2484|      0|                }
 2485|      0|                if ((int)c == 90) {
 2486|      0|                    goto case_37;
 2487|      0|                }
 2488|      0|                if ((int)c == 93) {
 2489|      0|                    goto case_37;
 2490|      0|                }
 2491|      0|                if ((int)c == 95) {
 2492|      0|                    goto case_37;
 2493|      0|                }
 2494|      0|                if ((int)c == 97) {
 2495|      0|                    goto case_37;
 2496|      0|                }
 2497|      0|                if ((int)c == 98) {
 2498|      0|                    goto case_37;
 2499|      0|                }
 2500|      0|                if ((int)c == 99) {
 2501|      0|                    goto case_37;
 2502|      0|                }
 2503|      0|                if ((int)c == 100) {
 2504|      0|                    goto case_37;
 2505|      0|                }
 2506|      0|                if ((int)c == 101) {
 2507|      0|                    goto case_37;
 2508|      0|                }
 2509|      0|                if ((int)c == 102) {
 2510|      0|                    goto case_37;
 2511|      0|                }
 2512|      0|                if ((int)c == 103) {
 2513|      0|                    goto case_37;
 2514|      0|                }
 2515|      0|                if ((int)c == 104) {
 2516|      0|                    goto case_37;
 2517|      0|                }
 2518|      0|                if ((int)c == 105) {
 2519|      0|                    goto case_37;
 2520|      0|                }
 2521|      0|                if ((int)c == 106) {
 2522|      0|                    goto case_37;
 2523|      0|                }
 2524|      0|                if ((int)c == 107) {
 2525|      0|                    goto case_37;
 2526|      0|                }
 2527|      0|                if ((int)c == 108) {
 2528|      0|                    goto case_37;
 2529|      0|                }
 2530|      0|                if ((int)c == 109) {
 2531|      0|                    goto case_37;
 2532|      0|                }
 2533|      0|                if ((int)c == 110) {
 2534|      0|                    goto case_37;
 2535|      0|                }
 2536|      0|                if ((int)c == 111) {
 2537|      0|                    goto case_37;
 2538|      0|                }
 2539|      0|                if ((int)c == 112) {
 2540|      0|                    goto case_37;
 2541|      0|                }
 2542|      0|                if ((int)c == 113) {
 2543|      0|                    goto case_37;
 2544|      0|                }
 2545|      0|                if ((int)c == 114) {
 2546|      0|                    goto case_37;
 2547|      0|                }
 2548|      0|                if ((int)c == 115) {
 2549|      0|                    goto case_37;
 2550|      0|                }
 2551|      0|                if ((int)c == 116) {
 2552|      0|                    goto case_37;
 2553|      0|                }
 2554|      0|                if ((int)c == 117) {
 2555|      0|                    goto case_37;
 2556|      0|                }
 2557|      0|                if ((int)c == 118) {
 2558|      0|                    goto case_37;
 2559|      0|                }
 2560|      0|                if ((int)c == 119) {
 2561|      0|                    goto case_37;
 2562|      0|                }
 2563|      0|                if ((int)c == 120) {
 2564|      0|                    goto case_37;
 2565|      0|                }
 2566|      0|                if ((int)c == 121) {
 2567|      0|                    goto case_37;
 2568|      0|                }
 2569|      0|                if ((int)c == 122) {
 2570|      0|                    goto case_37;
 2571|      0|                }
 2572|      0|                goto switch_default___2;
 2573|      0|case_0___0:
 2574|      0|                if (backslash_escapes) {
 2575|      0|                    if (elide_outer_quotes) {
 2576|      0|                        goto force_outer_quoting_style;
 2577|      0|                    }
 2578|      0|                    {
 2579|      0|                        while (1) {
 2580|      0|while_continue___4: /* CIL Label */
 2581|      0|                            ;
 2582|       |
 2583|      0|                            if (len < buffersize) {
 2584|      0|                                *(buffer___0 + len) = (char)'\\';
 2585|      0|                            }
 2586|      0|                            len++;
 2587|      0|                            goto while_break___4;
 2588|      0|                        }
 2589|      0|while_break___32: /* CIL Label */
 2590|      0|                        ;
 2591|      0|                    }
 2592|      0|while_break___4:
 2593|      0|                    ;
 2594|      0|                    if (i + 1UL < argsize) {
 2595|      0|                        if (48 <= (int)*(arg + (i + 1UL))) {
 2596|      0|                            if ((int const) * (arg + (i + 1UL)) <= 57) {
 2597|      0|                                {
 2598|      0|                                    while (1) {
 2599|      0|while_continue___5: /* CIL Label */
 2600|      0|                                        ;
 2601|       |
 2602|      0|                                        if (len < buffersize) {
 2603|      0|                                            *(buffer___0 + len) = (char)'0';
 2604|      0|                                        }
 2605|      0|                                        len++;
 2606|      0|                                        goto while_break___5;
 2607|      0|                                    }
 2608|      0|while_break___33: /* CIL Label */
 2609|      0|                                    ;
 2610|      0|                                }
 2611|      0|while_break___5:
 2612|      0|                                ;
 2613|      0|                                {
 2614|      0|                                    while (1) {
 2615|      0|while_continue___6: /* CIL Label */
 2616|      0|                                        ;
 2617|       |
 2618|      0|                                        if (len < buffersize) {
 2619|      0|                                            *(buffer___0 + len) = (char)'0';
 2620|      0|                                        }
 2621|      0|                                        len++;
 2622|      0|                                        goto while_break___6;
 2623|      0|                                    }
 2624|      0|while_break___34: /* CIL Label */
 2625|      0|                                    ;
 2626|      0|                                }
 2627|      0|while_break___6:
 2628|      0|                                ;
 2629|      0|                            }
 2630|      0|                        }
 2631|      0|                    }
 2632|      0|                    c = (unsigned char)'0';
 2633|      0|                }
 2634|      0|                else {
 2635|      0|                    if (flags & 1) {
 2636|      0|                        goto __Cont;
 2637|      0|                    }
 2638|      0|                }
 2639|      0|                goto switch_break___0;
 2640|      0|case_63:
 2641|      0|                if ((unsigned int)quoting_style == 2U) {
 2642|      0|                    goto case_2___0;
 2643|      0|                }
 2644|      0|                if ((unsigned int)quoting_style == 3U) {
 2645|      0|                    goto case_3___0;
 2646|      0|                }
 2647|      0|                goto switch_default___1;
 2648|      0|case_2___0:
 2649|      0|                if (elide_outer_quotes) {
 2650|      0|                    goto force_outer_quoting_style;
 2651|      0|                }
 2652|      0|                goto switch_break___1;
 2653|      0|case_3___0:
 2654|      0|                if (flags & 4) {
 2655|      0|                    if (i + 2UL < argsize) {
 2656|      0|                        if ((int const) * (arg + (i + 1UL)) == 63) {
 2657|      0|                            if ((int const) * (arg + (i + 2UL)) == 33) {
 2658|      0|                                goto case_33;
 2659|      0|                            }
 2660|      0|                            if ((int const) * (arg + (i + 2UL)) == 39) {
 2661|      0|                                goto case_33;
 2662|      0|                            }
 2663|      0|                            if ((int const) * (arg + (i + 2UL)) == 40) {
 2664|      0|                                goto case_33;
 2665|      0|                            }
 2666|      0|                            if ((int const) * (arg + (i + 2UL)) == 41) {
 2667|      0|                                goto case_33;
 2668|      0|                            }
 2669|      0|                            if ((int const) * (arg + (i + 2UL)) == 45) {
 2670|      0|                                goto case_33;
 2671|      0|                            }
 2672|      0|                            if ((int const) * (arg + (i + 2UL)) == 47) {
 2673|      0|                                goto case_33;
 2674|      0|                            }
 2675|      0|                            if ((int const) * (arg + (i + 2UL)) == 60) {
 2676|      0|                                goto case_33;
 2677|      0|                            }
 2678|      0|                            if ((int const) * (arg + (i + 2UL)) == 61) {
 2679|      0|                                goto case_33;
 2680|      0|                            }
 2681|      0|                            if ((int const) * (arg + (i + 2UL)) == 62) {
 2682|      0|                                goto case_33;
 2683|      0|                            }
 2684|      0|                            goto switch_default___0;
 2685|      0|case_33:
 2686|      0|                            if (elide_outer_quotes) {
 2687|      0|                                goto force_outer_quoting_style;
 2688|      0|                            }
 2689|      0|                            c = (unsigned char)*(arg + (i + 2UL));
 2690|      0|                            i += 2UL;
 2691|      0|                            {
 2692|      0|                                while (1) {
 2693|      0|while_continue___7: /* CIL Label */
 2694|      0|                                    ;
 2695|       |
 2696|      0|                                    if (len < buffersize) {
 2697|      0|                                        *(buffer___0 + len) = (char)'?';
 2698|      0|                                    }
 2699|      0|                                    len++;
 2700|      0|                                    goto while_break___7;
 2701|      0|                                }
 2702|      0|while_break___35: /* CIL Label */
 2703|      0|                                ;
 2704|      0|                            }
 2705|      0|while_break___7:
 2706|      0|                            ;
 2707|      0|                            {
 2708|      0|                                while (1) {
 2709|      0|while_continue___8: /* CIL Label */
 2710|      0|                                    ;
 2711|       |
 2712|      0|                                    if (len < buffersize) {
 2713|      0|                                        *(buffer___0 + len) = (char)'\"';
 2714|      0|                                    }
 2715|      0|                                    len++;
 2716|      0|                                    goto while_break___8;
 2717|      0|                                }
 2718|      0|while_break___36: /* CIL Label */
 2719|      0|                                ;
 2720|      0|                            }
 2721|      0|while_break___8:
 2722|      0|                            ;
 2723|      0|                            {
 2724|      0|                                while (1) {
 2725|      0|while_continue___9: /* CIL Label */
 2726|      0|                                    ;
 2727|       |
 2728|      0|                                    if (len < buffersize) {
 2729|      0|                                        *(buffer___0 + len) = (char)'\"';
 2730|      0|                                    }
 2731|      0|                                    len++;
 2732|      0|                                    goto while_break___9;
 2733|      0|                                }
 2734|      0|while_break___37: /* CIL Label */
 2735|      0|                                ;
 2736|      0|                            }
 2737|      0|while_break___9:
 2738|      0|                            ;
 2739|      0|                            {
 2740|      0|                                while (1) {
 2741|      0|while_continue___10: /* CIL Label */
 2742|      0|                                    ;
 2743|       |
 2744|      0|                                    if (len < buffersize) {
 2745|      0|                                        *(buffer___0 + len) = (char)'?';
 2746|      0|                                    }
 2747|      0|                                    len++;
 2748|      0|                                    goto while_break___10;
 2749|      0|                                }
 2750|      0|while_break___38: /* CIL Label */
 2751|      0|                                ;
 2752|      0|                            }
 2753|      0|while_break___10:
 2754|      0|                            ;
 2755|      0|                            goto switch_break___2;
 2756|      0|switch_default___0:
 2757|      0|                            goto switch_break___2;
 2758|      0|switch_break___2:
 2759|      0|                            ;
 2760|      0|                        }
 2761|      0|                    }
 2762|      0|                }
 2763|      0|                goto switch_break___1;
 2764|      0|switch_default___1:
 2765|      0|                goto switch_break___1;
 2766|      0|switch_break___1:
 2767|      0|                ;
 2768|      0|                goto switch_break___0;
 2769|      0|case_7___0:
 2770|      0|                esc = (unsigned char)'a';
 2771|      0|                goto c_escape;
 2772|      0|case_8___0:
 2773|      0|                esc = (unsigned char)'b';
 2774|      0|                goto c_escape;
 2775|      0|case_12:
 2776|      0|                esc = (unsigned char)'f';
 2777|      0|                goto c_escape;
 2778|      0|case_10:
 2779|      0|                esc = (unsigned char)'n';
 2780|      0|                goto c_and_shell_escape;
 2781|      0|case_13:
 2782|      0|                esc = (unsigned char)'r';
 2783|      0|                goto c_and_shell_escape;
 2784|      0|case_9:
 2785|      0|                esc = (unsigned char)'t';
 2786|      0|                goto c_and_shell_escape;
 2787|      0|case_11:
 2788|      0|                esc = (unsigned char)'v';
 2789|      0|                goto c_escape;
 2790|      0|case_92:
 2791|      0|                esc = c;
 2792|      0|                if (backslash_escapes) {
 2793|      0|                    if (elide_outer_quotes) {
 2794|      0|                        if (quote_string_len) {
 2795|      0|                            goto store_c;
 2796|      0|                        }
 2797|      0|                    }
 2798|      0|                }
 2799|      0|c_and_shell_escape:
 2800|      0|                if ((unsigned int)quoting_style == 2U) {
 2801|      0|                    if (elide_outer_quotes) {
 2802|      0|                        goto force_outer_quoting_style;
 2803|      0|                    }
 2804|      0|                }
 2805|      0|c_escape:
 2806|      0|                if (backslash_escapes) {
 2807|      0|                    c = esc;
 2808|      0|                    goto store_escape;
 2809|      0|                }
 2810|      0|                goto switch_break___0;
 2811|      0|case_123:
 2812|      0|                if (argsize == 0xffffffffffffffffUL) {
 2813|      0|                    tmp___2 = (int const) * (arg + 1) == 0;
 2814|      0|                }
 2815|      0|                else {
 2816|      0|                    tmp___2 = argsize == 1UL;
 2817|      0|                }
 2818|      0|                if (!tmp___2) {
 2819|      0|                    goto switch_break___0;
 2820|      0|                }
 2821|      0|case_35:
 2822|      0|                if (i != 0UL) {
 2823|      0|                    goto switch_break___0;
 2824|      0|                }
 2825|      0|case_32:
 2826|      0|                if ((unsigned int)quoting_style == 2U) {
 2827|      0|                    if (elide_outer_quotes) {
 2828|      0|                        goto force_outer_quoting_style;
 2829|      0|                    }
 2830|      0|                }
 2831|      0|                goto switch_break___0;
 2832|      0|case_39___0:
 2833|      0|                if ((unsigned int)quoting_style == 2U) {
 2834|      0|                    if (elide_outer_quotes) {
 2835|      0|                        goto force_outer_quoting_style;
 2836|      0|                    }
 2837|      0|                    {
 2838|      0|                        while (1) {
 2839|      0|while_continue___11: /* CIL Label */
 2840|      0|                            ;
 2841|       |
 2842|      0|                            if (len < buffersize) {
 2843|      0|                                *(buffer___0 + len) = (char)'\'';
 2844|      0|                            }
 2845|      0|                            len++;
 2846|      0|                            goto while_break___11;
 2847|      0|                        }
 2848|      0|while_break___39: /* CIL Label */
 2849|      0|                        ;
 2850|      0|                    }
 2851|      0|while_break___11:
 2852|      0|                    ;
 2853|      0|                    {
 2854|      0|                        while (1) {
 2855|      0|while_continue___12: /* CIL Label */
 2856|      0|                            ;
 2857|       |
 2858|      0|                            if (len < buffersize) {
 2859|      0|                                *(buffer___0 + len) = (char)'\\';
 2860|      0|                            }
 2861|      0|                            len++;
 2862|      0|                            goto while_break___12;
 2863|      0|                        }
 2864|      0|while_break___40: /* CIL Label */
 2865|      0|                        ;
 2866|      0|                    }
 2867|      0|while_break___12:
 2868|      0|                    ;
 2869|      0|                    {
 2870|      0|                        while (1) {
 2871|      0|while_continue___13: /* CIL Label */
 2872|      0|                            ;
 2873|       |
 2874|      0|                            if (len < buffersize) {
 2875|      0|                                *(buffer___0 + len) = (char)'\'';
 2876|      0|                            }
 2877|      0|                            len++;
 2878|      0|                            goto while_break___13;
 2879|      0|                        }
 2880|      0|while_break___41: /* CIL Label */
 2881|      0|                        ;
 2882|      0|                    }
 2883|      0|while_break___13:
 2884|      0|                    ;
 2885|      0|                }
 2886|      0|                goto switch_break___0;
 2887|      0|case_37:
 2888|      0|                goto switch_break___0;
 2889|      0|switch_default___2:
 2890|      0|                if (unibyte_locale) {
 2891|      0|                    {
 2892|      0|                        m = (size_t)1;
 2893|      0|                        tmp___3 = __ctype_b_loc();
 2894|      0|                        printable = (_Bool)(((int const) * (*tmp___3 + (int)c) & 16384) != 0);
 2895|      0|                    }
 2896|      0|                }
 2897|      0|                else {
 2898|      0|                    {
 2899|      0|                        memset((void *)(&mbstate), 0, sizeof(mbstate));
 2900|      0|                        m = (size_t)0;
 2901|      0|                        printable = (_Bool)1;
 2902|      0|                    }
 2903|      0|                    if (argsize == 0xffffffffffffffffUL) {
 2904|      0|                        {
 2905|      0|                            argsize = strlen(arg);
 2906|      0|                        }
 2907|      0|                    }
 2908|      0|                    {
 2909|      0|                        while (1) {
 2910|      0|while_continue___14: /* CIL Label */
 2911|      0|                            ;
 2912|      0|                            {
 2913|      0|                                tmp___4 = mbrtowc((wchar_t * /* __restrict  */)(&w), (char const * /* __restrict  */)(arg + (i + m)),
 2914|      0|                                                  argsize - (i + m), (mbstate_t * /* __restrict  */)(&mbstate));
 2915|      0|                                bytes = tmp___4;
 2916|      0|                            }
 2917|      0|                            if (bytes == 0UL) {
 2918|      0|                                goto while_break___14;
 2919|      0|                            }
 2920|      0|                            else {
 2921|      0|                                if (bytes == 0xffffffffffffffffUL) {
 2922|      0|                                    printable = (_Bool)0;
 2923|      0|                                    goto while_break___14;
 2924|      0|                                }
 2925|      0|                                else {
 2926|      0|                                    if (bytes == 0xfffffffffffffffeUL) {
 2927|      0|                                        printable = (_Bool)0;
 2928|      0|                                        {
 2929|      0|                                            while (1) {
 2930|      0|while_continue___15: /* CIL Label */
 2931|      0|                                                ;
 2932|       |
 2933|      0|                                                if (i + m < argsize) {
 2934|      0|                                                    if (!*(arg + (i + m))) {
 2935|      0|                                                        goto while_break___15;
 2936|      0|                                                    }
 2937|      0|                                                }
 2938|      0|                                                else {
 2939|      0|                                                    goto while_break___15;
 2940|      0|                                                }
 2941|      0|                                                m++;
 2942|      0|                                            }
 2943|      0|while_break___43: /* CIL Label */
 2944|      0|                                            ;
 2945|      0|                                        }
 2946|      0|while_break___15:
 2947|      0|                                        ;
 2948|      0|                                        goto while_break___14;
 2949|      0|                                    }
 2950|      0|                                    else {
 2951|      0|                                        if (elide_outer_quotes) {
 2952|      0|                                            if ((unsigned int)quoting_style == 2U) {
 2953|      0|                                                j = (size_t)1;
 2954|      0|                                                {
 2955|      0|                                                    while (1) {
 2956|      0|while_continue___16: /* CIL Label */
 2957|      0|                                                        ;
 2958|       |
 2959|      0|                                                        if (!(j < bytes)) {
 2960|      0|                                                            goto while_break___16;
 2961|      0|                                                        }
 2962|      0|                                                        if ((int const) * (arg + ((i + m) + j)) == 91) {
 2963|      0|                                                            goto case_91___0;
 2964|      0|                                                        }
 2965|      0|                                                        if ((int const) * (arg + ((i + m) + j)) == 92) {
 2966|      0|                                                            goto case_91___0;
 2967|      0|                                                        }
 2968|      0|                                                        if ((int const) * (arg + ((i + m) + j)) == 94) {
 2969|      0|                                                            goto case_91___0;
 2970|      0|                                                        }
 2971|      0|                                                        if ((int const) * (arg + ((i + m) + j)) == 96) {
 2972|      0|                                                            goto case_91___0;
 2973|      0|                                                        }
 2974|      0|                                                        if ((int const) * (arg + ((i + m) + j)) == 124) {
 2975|      0|                                                            goto case_91___0;
 2976|      0|                                                        }
 2977|      0|                                                        goto switch_default___3;
 2978|      0|case_91___0:
 2979|      0|                                                        goto force_outer_quoting_style;
 2980|      0|switch_default___3:
 2981|      0|                                                        goto switch_break___3;
 2982|      0|switch_break___3:
 2983|      0|                                                        j++;
 2984|      0|                                                    }
 2985|      0|while_break___44: /* CIL Label */
 2986|      0|                                                    ;
 2987|      0|                                                }
 2988|      0|while_break___16:
 2989|      0|                                                ;
 2990|      0|                                            }
 2991|      0|                                        }
 2992|      0|                                        {
 2993|      0|                                            tmp___5 = iswprint((wint_t)w);
 2994|      0|                                        }
 2995|      0|                                        if (!tmp___5) {
 2996|      0|                                            printable = (_Bool)0;
 2997|      0|                                        }
 2998|      0|                                        m += bytes;
 2999|      0|                                    }
 3000|      0|                                }
 3001|      0|                            }
 3002|      0|                            {
 3003|      0|                                tmp___6 = mbsinit((mbstate_t const *)(&mbstate));
 3004|      0|                            }
 3005|      0|                            if (tmp___6) {
 3006|      0|                                goto while_break___14;
 3007|      0|                            }
 3008|      0|                        }
 3009|      0|while_break___42: /* CIL Label */
 3010|      0|                        ;
 3011|      0|                    }
 3012|      0|while_break___14:
 3013|      0|                    ;
 3014|      0|                }
 3015|      0|                if (1UL < m) {
 3016|      0|                    goto _L___0;
 3017|      0|                }
 3018|      0|                else {
 3019|      0|                    if (backslash_escapes) {
 3020|      0|                        if (!printable) {
 3021|      0|_L___0:
 3022|      0|                            ilim = i + m;
 3023|      0|                            {
 3024|      0|                                while (1) {
 3025|      0|while_continue___17: /* CIL Label */
 3026|      0|                                    ;
 3027|       |
 3028|      0|                                    if (backslash_escapes) {
 3029|      0|                                        if (!printable) {
 3030|      0|                                            if (elide_outer_quotes) {
 3031|      0|                                                goto force_outer_quoting_style;
 3032|      0|                                            }
 3033|      0|                                            {
 3034|      0|                                                while (1) {
 3035|      0|while_continue___18: /* CIL Label */
 3036|      0|                                                    ;
 3037|       |
 3038|      0|                                                    if (len < buffersize) {
 3039|      0|                                                        *(buffer___0 + len) = (char)'\\';
 3040|      0|                                                    }
 3041|      0|                                                    len++;
 3042|      0|                                                    goto while_break___18;
 3043|      0|                                                }
 3044|      0|while_break___46: /* CIL Label */
 3045|      0|                                                ;
 3046|      0|                                            }
 3047|      0|while_break___18:
 3048|      0|                                            ;
 3049|      0|                                            {
 3050|      0|                                                while (1) {
 3051|      0|while_continue___19: /* CIL Label */
 3052|      0|                                                    ;
 3053|       |
 3054|      0|                                                    if (len < buffersize) {
 3055|      0|                                                        *(buffer___0 + len) = (char)(48 + ((int)c >> 6));
 3056|      0|                                                    }
 3057|      0|                                                    len++;
 3058|      0|                                                    goto while_break___19;
 3059|      0|                                                }
 3060|      0|while_break___47: /* CIL Label */
 3061|      0|                                                ;
 3062|      0|                                            }
 3063|      0|while_break___19:
 3064|      0|                                            ;
 3065|      0|                                            {
 3066|      0|                                                while (1) {
 3067|      0|while_continue___20: /* CIL Label */
 3068|      0|                                                    ;
 3069|       |
 3070|      0|                                                    if (len < buffersize) {
 3071|      0|                                                        *(buffer___0 + len) = (char)(48 + (((int)c >> 3) & 7));
 3072|      0|                                                    }
 3073|      0|                                                    len++;
 3074|      0|                                                    goto while_break___20;
 3075|      0|                                                }
 3076|      0|while_break___48: /* CIL Label */
 3077|      0|                                                ;
 3078|      0|                                            }
 3079|      0|while_break___20:
 3080|      0|                                            c = (unsigned char)(48 + ((int)c & 7));
 3081|      0|                                        }
 3082|      0|                                        else {
 3083|      0|                                            goto _L;
 3084|      0|                                        }
 3085|      0|                                    }
 3086|      0|                                    else {
 3087|      0|_L:
 3088|      0|                                        if (is_right_quote) {
 3089|      0|                                            {
 3090|      0|                                                while (1) {
 3091|      0|while_continue___21: /* CIL Label */
 3092|      0|                                                    ;
 3093|       |
 3094|      0|                                                    if (len < buffersize) {
 3095|      0|                                                        *(buffer___0 + len) = (char)'\\';
 3096|      0|                                                    }
 3097|      0|                                                    len++;
 3098|      0|                                                    goto while_break___21;
 3099|      0|                                                }
 3100|      0|while_break___49: /* CIL Label */
 3101|      0|                                                ;
 3102|      0|                                            }
 3103|      0|while_break___21:
 3104|      0|                                            is_right_quote = (_Bool)0;
 3105|      0|                                        }
 3106|      0|                                    }
 3107|      0|                                    if (ilim <= i + 1UL) {
 3108|      0|                                        goto while_break___17;
 3109|      0|                                    }
 3110|      0|                                    {
 3111|      0|                                        while (1) {
 3112|      0|while_continue___22: /* CIL Label */
 3113|      0|                                            ;
 3114|       |
 3115|      0|                                            if (len < buffersize) {
 3116|      0|                                                *(buffer___0 + len) = (char)c;
 3117|      0|                                            }
 3118|      0|                                            len++;
 3119|      0|                                            goto while_break___22;
 3120|      0|                                        }
 3121|      0|while_break___50: /* CIL Label */
 3122|      0|                                        ;
 3123|      0|                                    }
 3124|      0|while_break___22:
 3125|      0|                                    i++;
 3126|      0|                                    c = (unsigned char)*(arg + i);
 3127|      0|                                }
 3128|      0|while_break___45: /* CIL Label */
 3129|      0|                                ;
 3130|      0|                            }
 3131|      0|while_break___17:
 3132|      0|                            ;
 3133|      0|                            goto store_c;
 3134|      0|                        }
 3135|      0|                    }
 3136|      0|                }
 3137|      0|switch_break___0:
 3138|      0|                ;
 3139|      0|                if (backslash_escapes) {
 3140|      0|                    goto _L___3;
 3141|      0|                }
 3142|      0|                else {
 3143|      0|                    if (elide_outer_quotes) {
 3144|      0|_L___3:
 3145|      0|                        if (quote_these_too) {
 3146|      0|                            if (!((*(quote_these_too + (unsigned long)c / (sizeof(int) * 8UL)) >> (unsigned long)c % (sizeof(int) * 8UL)) & 1U)) {
 3147|      0|                                goto _L___2;
 3148|      0|                            }
 3149|      0|                        }
 3150|      0|                        else {
 3151|      0|                            goto _L___2;
 3152|      0|                        }
 3153|      0|                    }
 3154|      0|                    else {
 3155|      0|_L___2:
 3156|      0|                        if (!is_right_quote) {
 3157|      0|                            goto store_c;
 3158|      0|                        }
 3159|      0|                    }
 3160|      0|                }
 3161|      0|store_escape:
 3162|      0|                if (elide_outer_quotes) {
 3163|      0|                    goto force_outer_quoting_style;
 3164|      0|                }
 3165|      0|                {
 3166|      0|                    while (1) {
 3167|      0|while_continue___23: /* CIL Label */
 3168|      0|                        ;
 3169|       |
 3170|      0|                        if (len < buffersize) {
 3171|      0|                            *(buffer___0 + len) = (char)'\\';
 3172|      0|                        }
 3173|      0|                        len++;
 3174|      0|                        goto while_break___23;
 3175|      0|                    }
 3176|      0|while_break___51: /* CIL Label */
 3177|      0|                    ;
 3178|      0|                }
 3179|      0|while_break___23:
 3180|      0|                ;
 3181|      0|store_c : {
 3182|      0|                    while (1) {
 3183|      0|while_continue___24: /* CIL Label */
 3184|      0|                        ;
 3185|       |
 3186|      0|                        if (len < buffersize) {
 3187|      0|                            *(buffer___0 + len) = (char)c;
 3188|      0|                        }
 3189|      0|                        len++;
 3190|      0|                        goto while_break___24;
 3191|      0|                    }
 3192|      0|while_break___52: /* CIL Label */
 3193|      0|                    ;
 3194|      0|                }
 3195|      0|while_break___24:
 3196|      0|                ;
 3197|      0|__Cont:
 3198|      0|                i++;
 3199|      0|            }
 3200|      0|while_break___31: /* CIL Label */
 3201|      0|            ;
 3202|      0|        }
 3203|      0|while_break___3:
 3204|      0|        ;
 3205|      0|        if (len == 0UL) {
 3206|      0|            if ((unsigned int)quoting_style == 2U) {
 3207|      0|                if (elide_outer_quotes) {
 3208|      0|                    goto force_outer_quoting_style;
 3209|      0|                }
 3210|      0|            }
 3211|      0|        }
 3212|      0|        if (quote_string) {
 3213|      0|            if (!elide_outer_quotes) {
 3214|      0|                {
 3215|      0|                    while (1) {
 3216|      0|while_continue___25: /* CIL Label */
 3217|      0|                        ;
 3218|       |
 3219|      0|                        if (!*quote_string) {
 3220|      0|                            goto while_break___25;
 3221|      0|                        }
 3222|      0|                        {
 3223|      0|                            while (1) {
 3224|      0|while_continue___26: /* CIL Label */
 3225|      0|                                ;
 3226|       |
 3227|      0|                                if (len < buffersize) {
 3228|      0|                                    *(buffer___0 + len) = (char)*quote_string;
 3229|      0|                                }
 3230|      0|                                len++;
 3231|      0|                                goto while_break___26;
 3232|      0|                            }
 3233|      0|while_break___54: /* CIL Label */
 3234|      0|                            ;
 3235|      0|                        }
 3236|      0|while_break___26:
 3237|      0|                        quote_string++;
 3238|      0|                    }
 3239|      0|while_break___53: /* CIL Label */
 3240|      0|                    ;
 3241|      0|                }
 3242|      0|while_break___25:
 3243|      0|                ;
 3244|      0|            }
 3245|      0|        }
 3246|      0|        if (len < buffersize) {
 3247|      0|            *(buffer___0 + len) = (char)'\000';
 3248|      0|        }
 3249|      0|        return (len);
 3250|      0|force_outer_quoting_style : {
 3251|      0|            tmp___8 = quotearg_buffer_restyled(buffer___0, buffersize, arg, argsize, quoting_style,
 3252|      0|                                               flags & -3, (unsigned int const *)((void *)0),
 3253|      0|                                               left_quote, right_quote);
 3254|      0|        }
 3255|      0|        return (tmp___8);
 3256|      0|    }
 3257|      0|}
 3258|       |static char slot0[256];
 3259|       |static unsigned int nslots = 1U;
 3260|       |static struct slotvec slotvec0 = {sizeof(slot0), slot0};
 3261|       |static struct slotvec *slotvec = &slotvec0;
 3262|       |static char *quotearg_n_options(int n, char const *arg, size_t argsize, struct quoting_options const *options)
 3263|      0|{
 3264|      0|    int e;
 3265|      0|    int *tmp;
 3266|      0|    unsigned int n0;
 3267|      0|    struct slotvec *sv;
 3268|      0|    size_t n1;
 3269|      0|    _Bool preallocated;
 3270|      0|    int tmp___0;
 3271|      0|    struct slotvec *tmp___1;
 3272|      0|    size_t size;
 3273|      0|    char *val;
 3274|      0|    int flags;
 3275|      0|    size_t qsize;
 3276|      0|    size_t tmp___2;
 3277|      0|    int *tmp___3;
 3278|       |
 3279|      0|    {
 3280|      0|        {
 3281|      0|            tmp = __errno_location();
 3282|      0|            e = *tmp;
 3283|      0|            n0 = (unsigned int)n;
 3284|      0|            sv = slotvec;
 3285|      0|        }
 3286|      0|        if (n < 0) {
 3287|      0|            {
 3288|      0|                abort();
 3289|      0|            }
 3290|      0|        }
 3291|      0|        if (nslots <= n0) {
 3292|      0|            n1 = (size_t)(n0 + 1U);
 3293|      0|            preallocated = (_Bool)((unsigned long)sv == (unsigned long)(&slotvec0));
 3294|      0|            if (sizeof(ptrdiff_t) <= sizeof(size_t)) {
 3295|      0|                tmp___0 = -1;
 3296|      0|            }
 3297|      0|            else {
 3298|      0|                tmp___0 = -2;
 3299|      0|            }
 3300|      0|            if ((size_t)tmp___0 / sizeof(*sv) < n1) {
 3301|      0|                {
 3302|      0|                    xalloc_die();
 3303|      0|                }
 3304|      0|            }
 3305|      0|            if (preallocated) {
 3306|      0|                tmp___1 = (struct slotvec *)((void *)0);
 3307|      0|            }
 3308|      0|            else {
 3309|      0|                tmp___1 = sv;
 3310|      0|            }
 3311|      0|            {
 3312|      0|                sv = (struct slotvec *)xrealloc((void *)tmp___1, n1 * sizeof(*sv));
 3313|      0|                slotvec = sv;
 3314|      0|            }
 3315|      0|            if (preallocated) {
 3316|      0|                *sv = slotvec0;
 3317|      0|            }
 3318|      0|            {
 3319|      0|                memset((void *)(sv + nslots), 0, (n1 - (size_t)nslots) * sizeof(*sv));
 3320|      0|                nslots = (unsigned int)n1;
 3321|      0|            }
 3322|      0|        }
 3323|      0|        {
 3324|      0|            size = (sv + n)->size;
 3325|      0|            val = (sv + n)->val;
 3326|      0|            flags = (int)(options->flags | 1);
 3327|      0|            tmp___2 = quotearg_buffer_restyled(val, size, arg, argsize, (enum quoting_style)options->style,
 3328|      0|                                               flags, (unsigned int const *)(options->quote_these_too),
 3329|      0|                                               (char const *)options->left_quote, (char const *)options->right_quote);
 3330|      0|            qsize = tmp___2;
 3331|      0|        }
 3332|      0|        if (size <= qsize) {
 3333|      0|            size = qsize + 1UL;
 3334|      0|            (sv + n)->size = size;
 3335|      0|            if ((unsigned long)val != (unsigned long)(slot0)) {
 3336|      0|                {
 3337|      0|                    free((void *)val);
 3338|      0|                }
 3339|      0|            }
 3340|      0|            {
 3341|      0|                val = xcharalloc(size);
 3342|      0|                (sv + n)->val = val;
 3343|      0|                quotearg_buffer_restyled(val, size, arg, argsize, (enum quoting_style)options->style,
 3344|      0|                                         flags, (unsigned int const *)(options->quote_these_too),
 3345|      0|                                         (char const *)options->left_quote, (char const *)options->right_quote);
 3346|      0|            }
 3347|      0|        }
 3348|      0|        {
 3349|      0|            tmp___3 = __errno_location();
 3350|      0|            *tmp___3 = e;
 3351|      0|        }
 3352|      0|        return (val);
 3353|      0|    }
 3354|      0|}
 3355|       |char *quotearg_n_style(int n, enum quoting_style s, char const *arg)
 3356|      0|{
 3357|      0|    struct quoting_options o;
 3358|      0|    struct quoting_options tmp;
 3359|      0|    char *tmp___0;
 3360|      0|    void *__cil_tmp9;
 3361|      0|    void *__cil_tmp10;
 3362|       |
 3363|      0|    {
 3364|      0|        {
 3365|      0|            tmp = quoting_options_from_style(s);
 3366|      0|            o = tmp;
 3367|      0|            tmp___0 = quotearg_n_options(n, arg, (size_t)-1, (struct quoting_options const *)(&o));
 3368|      0|        }
 3369|      0|        return (tmp___0);
 3370|      0|    }
 3371|      0|}
 3372|       |char *quotearg_char_mem(char const *arg, size_t argsize, char ch)
 3373|      0|{
 3374|      0|    struct quoting_options options;
 3375|      0|    char *tmp;
 3376|      0|    void *__cil_tmp7;
 3377|       |
 3378|      0|    {
 3379|      0|        {
 3380|      0|            options = default_quoting_options;
 3381|      0|            set_char_quoting(&options, ch, 1);
 3382|      0|            tmp = quotearg_n_options(0, arg, argsize, (struct quoting_options const *)(&options));
 3383|      0|        }
 3384|      0|        return (tmp);
 3385|      0|    }
 3386|      0|}
 3387|       |char *quotearg_char(char const *arg, char ch)
 3388|      0|{
 3389|      0|    char *tmp;
 3390|       |
 3391|      0|    {
 3392|      0|        {
 3393|      0|            tmp = quotearg_char_mem(arg, (size_t)-1, ch);
 3394|      0|        }
 3395|      0|        return (tmp);
 3396|      0|    }
 3397|      0|}
 3398|       |char *quotearg_colon(char const *arg)
 3399|      0|{
 3400|      0|    char *tmp;
 3401|       |
 3402|      0|    {
 3403|      0|        {
 3404|      0|            tmp = quotearg_char(arg, (char)':');
 3405|      0|        }
 3406|      0|        return (tmp);
 3407|      0|    }
 3408|      0|}
 3409|       |struct quoting_options quote_quoting_options = {(enum quoting_style)6, 0, {0U}, (char const *)((void *)0), (char const *)((void *)0)};
 3410|       |char const *quote_n_mem(int n,
 3411|       |                        char const *arg, size_t argsize)
 3412|      0|{
 3413|      0|    char const *tmp;
 3414|       |
 3415|      0|    {
 3416|      0|        {
 3417|      0|            tmp = (char const *)quotearg_n_options(n, arg, argsize, (struct quoting_options const *)(&quote_quoting_options));
 3418|      0|        }
 3419|      0|        return (tmp);
 3420|      0|    }
 3421|      0|}
 3422|       |char const *quote_n(int n, char const *arg)
 3423|      0|{
 3424|      0|    char const *tmp;
 3425|       |
 3426|      0|    {
 3427|      0|        {
 3428|      0|            tmp = quote_n_mem(n, arg, (size_t)-1);
 3429|      0|        }
 3430|      0|        return (tmp);
 3431|      0|    }
 3432|      0|}
 3433|       |char const *quote(char const *arg)
 3434|      0|{
 3435|      0|    char const *tmp;
 3436|       |
 3437|      0|    {
 3438|      0|        {
 3439|      0|            tmp = quote_n(0, arg);
 3440|      0|        }
 3441|      0|        return (tmp);
 3442|      0|    }
 3443|      0|}
 3444|       |char const *proper_name(char const *name);
 3445|       |extern __attribute__((__nothrow__)) int sprintf(char *__restrict __s, char const *__restrict __format, ...);
 3446|       |char *(__attribute__((__nonnull__(1, 2))) mbsstr)(char const *haystack, char const *needle) __attribute__((__pure__));
 3447|       |extern __attribute__((__nothrow__)) int iswalnum(wint_t __wc);
 3448|       |void mbuiter_multi_next(struct mbuiter_multi *iter)
 3449|      0|{
 3450|      0|    int tmp;
 3451|      0|    size_t tmp___0;
 3452|      0|    size_t tmp___1;
 3453|      0|    int tmp___2;
 3454|      0|    _Bool tmp___3;
 3455|       |
 3456|      0|    {
 3457|      0|        if (iter->next_done) {
 3458|      0|            return;
 3459|      0|        }
 3460|      0|        if (iter->in_shift) {
 3461|      0|            goto with_shift;
 3462|      0|        }
 3463|      0|        {
 3464|      0|            tmp___3 = is_basic((char)*(iter->cur.ptr));
 3465|      0|        }
 3466|      0|        if (tmp___3) {
 3467|      0|            iter->cur.bytes = (size_t)1;
 3468|      0|            iter->cur.wc = (wchar_t) * (iter->cur.ptr);
 3469|      0|            iter->cur.wc_valid = (_Bool)1;
 3470|      0|        }
 3471|      0|        else {
 3472|      0|            {
 3473|      0|                tmp = mbsinit((mbstate_t const *)(&iter->state));
 3474|      0|            }
 3475|      0|            if (!tmp) {
 3476|      0|                {
 3477|      0|                    __assert_fail("mbsinit (&iter->state)", "/home/khheo/project/benchmark/grep-2.19/lib/mbuiter.h",
 3478|      0|                                  150U, "mbuiter_multi_next");
 3479|      0|                }
 3480|      0|            }
 3481|      0|            iter->in_shift = (_Bool)1;
 3482|      0|with_shift : {
 3483|      0|                tmp___0 = __ctype_get_mb_cur_max();
 3484|      0|                tmp___1 = strnlen1(iter->cur.ptr, tmp___0);
 3485|      0|                iter->cur.bytes = mbrtowc((wchar_t * /* __restrict  */)(&iter->cur.wc), (char const * /* __restrict  */)iter->cur.ptr,
 3486|      0|                                          tmp___1, (mbstate_t * /* __restrict  */)(&iter->state));
 3487|      0|            }
 3488|      0|            if (iter->cur.bytes == 0xffffffffffffffffUL) {
 3489|      0|                iter->cur.bytes = (size_t)1;
 3490|      0|                iter->cur.wc_valid = (_Bool)0;
 3491|      0|            }
 3492|      0|            else {
 3493|      0|                if (iter->cur.bytes == 0xfffffffffffffffeUL) {
 3494|      0|                    {
 3495|      0|                        iter->cur.bytes = strlen(iter->cur.ptr);
 3496|      0|                        iter->cur.wc_valid = (_Bool)0;
 3497|      0|                    }
 3498|      0|                }
 3499|      0|                else {
 3500|      0|                    if (iter->cur.bytes == 0UL) {
 3501|      0|                        iter->cur.bytes = (size_t)1;
 3502|      0|                        if (!((int const) * (iter->cur.ptr) == 0)) {
 3503|      0|                            {
 3504|      0|                                __assert_fail("*iter->cur.ptr == \'\\0\'", "/home/khheo/project/benchmark/grep-2.19/lib/mbuiter.h",
 3505|      0|                                              178U, "mbuiter_multi_next");
 3506|      0|                            }
 3507|      0|                        }
 3508|      0|                        if (!(iter->cur.wc == 0)) {
 3509|      0|                            {
 3510|      0|                                __assert_fail("iter->cur.wc == 0", "/home/khheo/project/benchmark/grep-2.19/lib/mbuiter.h",
 3511|      0|                                              179U, "mbuiter_multi_next");
 3512|      0|                            }
 3513|      0|                        }
 3514|      0|                    }
 3515|      0|                    {
 3516|      0|                        iter->cur.wc_valid = (_Bool)1;
 3517|      0|                        tmp___2 = mbsinit((mbstate_t const *)(&iter->state));
 3518|      0|                    }
 3519|      0|                    if (tmp___2) {
 3520|      0|                        iter->in_shift = (_Bool)0;
 3521|      0|                    }
 3522|      0|                }
 3523|      0|            }
 3524|      0|        }
 3525|      0|        iter->next_done = (_Bool)1;
 3526|      0|        return;
 3527|      0|    }
 3528|      0|}
 3529|       |static _Bool mbsstr_trimmed_wordbounded(char const *string, char const *sub)
 3530|      0|{
 3531|      0|    char *tsub;
 3532|      0|    char *tmp;
 3533|      0|    _Bool found;
 3534|      0|    char const *tsub_in_string;
 3535|      0|    char const *tmp___0;
 3536|      0|    mbui_iterator_t string_iter;
 3537|      0|    _Bool word_boundary_before;
 3538|      0|    _Bool word_boundary_after;
 3539|      0|    mbchar_t last_char_before_tsub;
 3540|      0|    int tmp___1;
 3541|      0|    int tmp___2;
 3542|      0|    mbui_iterator_t tsub_iter;
 3543|      0|    int tmp___3;
 3544|      0|    int tmp___4;
 3545|      0|    mbchar_t first_char_after_tsub;
 3546|      0|    int tmp___5;
 3547|      0|    int tmp___6;
 3548|      0|    int tmp___7;
 3549|      0|    _Bool word_boundary_before___0;
 3550|      0|    char const *p;
 3551|      0|    _Bool word_boundary_after___0;
 3552|      0|    unsigned short const **tmp___8;
 3553|      0|    size_t tmp___9;
 3554|      0|    unsigned short const **tmp___10;
 3555|      0|    size_t tmp___11;
 3556|      0|    void *__cil_tmp35;
 3557|      0|    void *__cil_tmp36;
 3558|      0|    void *__cil_tmp37;
 3559|      0|    void *__cil_tmp38;
 3560|      0|    void *__cil_tmp39;
 3561|      0|    void *__cil_tmp40;
 3562|       |
 3563|      0|    {
 3564|      0|        {
 3565|      0|            tmp = trim2(sub, 2);
 3566|      0|            tsub = tmp;
 3567|      0|            found = (_Bool)0;
 3568|      0|        }
 3569|      0|        {
 3570|      0|            while (1) {
 3571|      0|while_continue: /* CIL Label */
 3572|      0|                ;
 3573|       |
 3574|      0|                if (!((int const) * string != 0)) {
 3575|      0|                    goto while_break;
 3576|      0|                }
 3577|      0|                {
 3578|      0|                    tmp___0 = (char const *)mbsstr(string, (char const *)tsub);
 3579|      0|                    tsub_in_string = tmp___0;
 3580|      0|                }
 3581|      0|                if ((unsigned long)tsub_in_string == (unsigned long)((void *)0)) {
 3582|      0|                    goto while_break;
 3583|      0|                }
 3584|      0|                else {
 3585|      0|                    {
 3586|      0|                        tmp___11 = __ctype_get_mb_cur_max();
 3587|      0|                    }
 3588|      0|                    if (tmp___11 > 1UL) {
 3589|      0|                        {
 3590|      0|                            string_iter.cur.ptr = string;
 3591|      0|                            string_iter.in_shift = (_Bool)0;
 3592|      0|                            memset((void *)(&string_iter.state), '\000', sizeof(mbstate_t));
 3593|      0|                            string_iter.next_done = (_Bool)0;
 3594|      0|                            word_boundary_before = (_Bool)1;
 3595|      0|                        }
 3596|      0|                        if ((unsigned long)string_iter.cur.ptr < (unsigned long)tsub_in_string) {
 3597|      0|                            {
 3598|      0|                                while (1) {
 3599|      0|while_continue___0: /* CIL Label */
 3600|      0|                                    ;
 3601|      0|                                    {
 3602|      0|                                        mbuiter_multi_next(&string_iter);
 3603|      0|                                    }
 3604|      0|                                    if (string_iter.cur.wc_valid) {
 3605|      0|                                        if (string_iter.cur.wc == 0) {
 3606|      0|                                            tmp___1 = 0;
 3607|      0|                                        }
 3608|      0|                                        else {
 3609|      0|                                            tmp___1 = 1;
 3610|      0|                                        }
 3611|      0|                                    }
 3612|      0|                                    else {
 3613|      0|                                        tmp___1 = 1;
 3614|      0|                                    }
 3615|      0|                                    if (!tmp___1) {
 3616|      0|                                        {
 3617|      0|                                            abort();
 3618|      0|                                        }
 3619|      0|                                    }
 3620|      0|                                    last_char_before_tsub = string_iter.cur;
 3621|      0|                                    string_iter.cur.ptr += string_iter.cur.bytes;
 3622|      0|                                    string_iter.next_done = (_Bool)0;
 3623|      0|                                    if (!((unsigned long)string_iter.cur.ptr < (unsigned long)tsub_in_string)) {
 3624|      0|                                        goto while_break___0;
 3625|      0|                                    }
 3626|      0|                                }
 3627|      0|while_break___3: /* CIL Label */
 3628|      0|                                ;
 3629|      0|                            }
 3630|      0|while_break___0:
 3631|      0|                            ;
 3632|      0|                            if (last_char_before_tsub.wc_valid) {
 3633|      0|                                {
 3634|      0|                                    tmp___2 = iswalnum((wint_t)last_char_before_tsub.wc);
 3635|      0|                                }
 3636|      0|                                if (tmp___2) {
 3637|      0|                                    word_boundary_before = (_Bool)0;
 3638|      0|                                }
 3639|      0|                            }
 3640|      0|                        }
 3641|      0|                        {
 3642|      0|                            string_iter.cur.ptr = tsub_in_string;
 3643|      0|                            string_iter.in_shift = (_Bool)0;
 3644|      0|                            memset((void *)(&string_iter.state), '\000', sizeof(mbstate_t));
 3645|      0|                            string_iter.next_done = (_Bool)0;
 3646|      0|                            tsub_iter.cur.ptr = (char const *)tsub;
 3647|      0|                            tsub_iter.in_shift = (_Bool)0;
 3648|      0|                            memset((void *)(&tsub_iter.state), '\000', sizeof(mbstate_t));
 3649|      0|                            tsub_iter.next_done = (_Bool)0;
 3650|      0|                        }
 3651|      0|                        {
 3652|      0|                            while (1) {
 3653|      0|while_continue___1: /* CIL Label */
 3654|      0|                                ;
 3655|      0|                                {
 3656|      0|                                    mbuiter_multi_next(&tsub_iter);
 3657|      0|                                }
 3658|      0|                                if (tsub_iter.cur.wc_valid) {
 3659|      0|                                    if (tsub_iter.cur.wc == 0) {
 3660|      0|                                        tmp___4 = 0;
 3661|      0|                                    }
 3662|      0|                                    else {
 3663|      0|                                        tmp___4 = 1;
 3664|      0|                                    }
 3665|      0|                                }
 3666|      0|                                else {
 3667|      0|                                    tmp___4 = 1;
 3668|      0|                                }
 3669|      0|                                if (!tmp___4) {
 3670|      0|                                    goto while_break___1;
 3671|      0|                                }
 3672|      0|                                {
 3673|      0|                                    mbuiter_multi_next(&string_iter);
 3674|      0|                                }
 3675|      0|                                if (string_iter.cur.wc_valid) {
 3676|      0|                                    if (string_iter.cur.wc == 0) {
 3677|      0|                                        tmp___3 = 0;
 3678|      0|                                    }
 3679|      0|                                    else {
 3680|      0|                                        tmp___3 = 1;
 3681|      0|                                    }
 3682|      0|                                }
 3683|      0|                                else {
 3684|      0|                                    tmp___3 = 1;
 3685|      0|                                }
 3686|      0|                                if (!tmp___3) {
 3687|      0|                                    {
 3688|      0|                                        abort();
 3689|      0|                                    }
 3690|      0|                                }
 3691|      0|                                string_iter.cur.ptr += string_iter.cur.bytes;
 3692|      0|                                string_iter.next_done = (_Bool)0;
 3693|      0|                                tsub_iter.cur.ptr += tsub_iter.cur.bytes;
 3694|      0|                                tsub_iter.next_done = (_Bool)0;
 3695|      0|                            }
 3696|      0|while_break___4: /* CIL Label */
 3697|      0|                            ;
 3698|      0|                        }
 3699|      0|while_break___1 : {
 3700|      0|                            word_boundary_after = (_Bool)1;
 3701|      0|                            mbuiter_multi_next(&string_iter);
 3702|      0|                        }
 3703|      0|                        if (string_iter.cur.wc_valid) {
 3704|      0|                            if (string_iter.cur.wc == 0) {
 3705|      0|                                tmp___6 = 0;
 3706|      0|                            }
 3707|      0|                            else {
 3708|      0|                                tmp___6 = 1;
 3709|      0|                            }
 3710|      0|                        }
 3711|      0|                        else {
 3712|      0|                            tmp___6 = 1;
 3713|      0|                        }
 3714|      0|                        if (tmp___6) {
 3715|      0|                            first_char_after_tsub = string_iter.cur;
 3716|      0|                            if (first_char_after_tsub.wc_valid) {
 3717|      0|                                {
 3718|      0|                                    tmp___5 = iswalnum((wint_t)first_char_after_tsub.wc);
 3719|      0|                                }
 3720|      0|                                if (tmp___5) {
 3721|      0|                                    word_boundary_after = (_Bool)0;
 3722|      0|                                }
 3723|      0|                            }
 3724|      0|                        }
 3725|      0|                        if (word_boundary_before) {
 3726|      0|                            if (word_boundary_after) {
 3727|      0|                                found = (_Bool)1;
 3728|      0|                                goto while_break;
 3729|      0|                            }
 3730|      0|                        }
 3731|      0|                        {
 3732|      0|                            string_iter.cur.ptr = tsub_in_string;
 3733|      0|                            string_iter.in_shift = (_Bool)0;
 3734|      0|                            memset((void *)(&string_iter.state), '\000', sizeof(mbstate_t));
 3735|      0|                            string_iter.next_done = (_Bool)0;
 3736|      0|                            mbuiter_multi_next(&string_iter);
 3737|      0|                        }
 3738|      0|                        if (string_iter.cur.wc_valid) {
 3739|      0|                            if (string_iter.cur.wc == 0) {
 3740|      0|                                tmp___7 = 0;
 3741|      0|                            }
 3742|      0|                            else {
 3743|      0|                                tmp___7 = 1;
 3744|      0|                            }
 3745|      0|                        }
 3746|      0|                        else {
 3747|      0|                            tmp___7 = 1;
 3748|      0|                        }
 3749|      0|                        if (!tmp___7) {
 3750|      0|                            goto while_break;
 3751|      0|                        }
 3752|      0|                        string = tsub_in_string + string_iter.cur.bytes;
 3753|      0|                    }
 3754|      0|                    else {
 3755|      0|                        word_boundary_before___0 = (_Bool)1;
 3756|      0|                        if ((unsigned long)string < (unsigned long)tsub_in_string) {
 3757|      0|                            {
 3758|      0|                                tmp___8 = __ctype_b_loc();
 3759|      0|                            }
 3760|      0|                            if ((int const) * (*tmp___8 + (int)((unsigned char)*(tsub_in_string + -1))) & 8) {
 3761|      0|                                word_boundary_before___0 = (_Bool)0;
 3762|      0|                            }
 3763|      0|                        }
 3764|      0|                        {
 3765|      0|                            tmp___9 = strlen((char const *)tsub);
 3766|      0|                            p = tsub_in_string + tmp___9;
 3767|      0|                            word_boundary_after___0 = (_Bool)1;
 3768|      0|                        }
 3769|      0|                        if ((int const) * p != 0) {
 3770|      0|                            {
 3771|      0|                                tmp___10 = __ctype_b_loc();
 3772|      0|                            }
 3773|      0|                            if ((int const) * (*tmp___10 + (int)((unsigned char)*p)) & 8) {
 3774|      0|                                word_boundary_after___0 = (_Bool)0;
 3775|      0|                            }
 3776|      0|                        }
 3777|      0|                        if (word_boundary_before___0) {
 3778|      0|                            if (word_boundary_after___0) {
 3779|      0|                                found = (_Bool)1;
 3780|      0|                                goto while_break;
 3781|      0|                            }
 3782|      0|                        }
 3783|      0|                        if ((int const) * tsub_in_string == 0) {
 3784|      0|                            goto while_break;
 3785|      0|                        }
 3786|      0|                        string = tsub_in_string + 1;
 3787|      0|                    }
 3788|      0|                }
 3789|      0|            }
 3790|      0|while_break___2: /* CIL Label */
 3791|      0|            ;
 3792|      0|        }
 3793|      0|while_break : {
 3794|      0|            free((void *)tsub);
 3795|      0|        }
 3796|      0|        return (found);
 3797|      0|    }
 3798|      0|}
 3799|       |char const *proper_name(char const *name)
 3800|      0|{
 3801|      0|    char const *translation;
 3802|      0|    char const *tmp;
 3803|      0|    char *result;
 3804|      0|    size_t tmp___0;
 3805|      0|    size_t tmp___1;
 3806|      0|    void *tmp___2;
 3807|      0|    size_t tmp___3;
 3808|      0|    size_t tmp___4;
 3809|      0|    void *tmp___5;
 3810|      0|    void *tmp___6;
 3811|      0|    _Bool tmp___7;
 3812|      0|    char *__cil_tmp15;
 3813|       |
 3814|      0|    {
 3815|      0|        {
 3816|      0|            tmp = (char const *)gettext(name);
 3817|      0|            translation = tmp;
 3818|      0|        }
 3819|      0|        if ((unsigned long)translation != (unsigned long)name) {
 3820|      0|            {
 3821|      0|                tmp___7 = mbsstr_trimmed_wordbounded(translation, name);
 3822|      0|            }
 3823|      0|            if (tmp___7) {
 3824|      0|                return (translation);
 3825|      0|            }
 3826|      0|            else {
 3827|      0|                if (sizeof(char) == 1UL) {
 3828|      0|                    {
 3829|      0|                        tmp___0 = strlen(translation);
 3830|      0|                        tmp___1 = strlen(name);
 3831|      0|                        tmp___2 = xmalloc((((tmp___0 + 2UL) + tmp___1) + 1UL) + 1UL);
 3832|      0|                        tmp___6 = tmp___2;
 3833|      0|                    }
 3834|      0|                }
 3835|      0|                else {
 3836|      0|                    {
 3837|      0|                        tmp___3 = strlen(translation);
 3838|      0|                        tmp___4 = strlen(name);
 3839|      0|                        tmp___5 = xnmalloc((((tmp___3 + 2UL) + tmp___4) + 1UL) + 1UL, sizeof(char));
 3840|      0|                        tmp___6 = tmp___5;
 3841|      0|                    }
 3842|      0|                }
 3843|      0|                {
 3844|      0|                    result = (char *)tmp___6;
 3845|      0|                    sprintf((char * /* __restrict  */)result, (char const * /* __restrict  */) "%s (%s)",
 3846|      0|                            translation, name);
 3847|      0|                }
 3848|      0|                return ((char const *)result);
 3849|      0|            }
 3850|      0|        }
 3851|      0|        else {
 3852|      0|            return (name);
 3853|      0|        }
 3854|      0|    }
 3855|      0|}
 3856|       |char const *program_name;
 3857|       |void set_program_name(char const *argv0);
 3858|       |extern char *program_invocation_name;
 3859|       |extern char *program_invocation_short_name;
 3860|       |extern struct _IO_FILE *stderr;
 3861|       |extern int fputs(char const *__restrict __s, FILE *__restrict __stream);
 3862|       |extern __attribute__((__nothrow__)) int(__attribute__((__nonnull__(1, 2))) strncmp)(char const *__s1,
 3863|       |        char const *__s2,
 3864|       |        size_t __n) __attribute__((__pure__));
 3865|       |extern __attribute__((__nothrow__)) char *(__attribute__((__nonnull__(1))) strrchr)(char const *__s,
 3866|       |        int __c) __attribute__((__pure__));
 3867|       |char const *program_name = (char const *)((void *)0);
 3868|       |void set_program_name(char const *argv0)
 3869|      2|{
 3870|      2|    char const *slash;
 3871|      2|    char const *base;
 3872|      2|    int tmp;
 3873|      2|    int tmp___0;
 3874|       |
 3875|      2|    {
 3876|      2|        if ((unsigned long)argv0 == (unsigned long)((void *)0)) {
 3877|      0|            {
 3878|      0|                fputs((char const * /* __restrict  */) "A NULL argv[0] was passed through an exec system call.\n",
 3879|      0|                      (FILE * /* __restrict  */) stderr);
 3880|      0|                abort();
 3881|      0|            }
 3882|      0|        }
 3883|      2|        {
 3884|      2|            slash = (char const *)strrchr(argv0, '/');
 3885|      2|        }
 3886|      2|        if ((unsigned long)slash != (unsigned long)((void *)0)) {
 3887|      2|            base = slash + 1;
 3888|      2|        }
 3889|      0|        else {
 3890|      0|            base = argv0;
 3891|      0|        }
 3892|      2|        if (base - argv0 >= 7L) {
 3893|      2|            {
 3894|      2|                tmp___0 = strncmp(base - 7, "/.libs/", (size_t)7);
 3895|      2|            }
 3896|      2|            if (tmp___0 == 0) {
 3897|      0|                {
 3898|      0|                    argv0 = base;
 3899|      0|                    tmp = strncmp(base, "lt-", (size_t)3);
 3900|      0|                }
 3901|      0|                if (tmp == 0) {
 3902|      0|                    argv0 = base + 3;
 3903|      0|                    program_invocation_short_name = (char *)argv0;
 3904|      0|                }
 3905|      0|            }
 3906|      2|        }
 3907|      2|        program_name = argv0;
 3908|      2|        program_invocation_name = (char *)argv0;
 3909|      2|        return;
 3910|      2|    }
 3911|      2|}
 3912|       |int fd_safer(int fd);
 3913|       |extern DIR *fdopendir(int __fd);
 3914|       |extern int(__attribute__((__nonnull__(1))) closedir)(DIR *__dirp);
 3915|       |extern __attribute__((__nothrow__)) int(__attribute__((__nonnull__(1))) dirfd)(DIR *__dirp);
 3916|       |int dup_safer(int fd);
 3917|       |int openat_safer(int fd, char const *file, int flags, ...);
 3918|       |extern int(__attribute__((__nonnull__(2))) openat)(int __fd, char const *__file,
 3919|       |        int __oflag, ...);
 3920|       |int openat_safer(int fd, char const *file, int flags, ...)
 3921|      6|{
 3922|      6|    mode_t mode___0;
 3923|      6|    va_list ap;
 3924|      6|    int tmp;
 3925|      6|    int tmp___0;
 3926|       |
 3927|      6|    {
 3928|      6|        mode___0 = (mode_t)0;
 3929|      6|        if (flags & 64) {
 3930|      0|            {
 3931|      0|                __builtin_va_start(ap, flags);
 3932|      0|                mode___0 = __builtin_va_arg(ap, mode_t);
 3933|      0|                __builtin_va_end(ap);
 3934|      0|            }
 3935|      0|        }
 3936|      6|        {
 3937|      6|            tmp = openat(fd, file, flags, mode___0);
 3938|      6|            tmp___0 = fd_safer(tmp);
 3939|      6|        }
 3940|      6|        return (tmp___0);
 3941|      6|    }
 3942|      6|}
 3943|       |extern int(__attribute__((__nonnull__(1))) open)(char const *__file, int __oflag, ...);
 3944|       |int open_safer(char const *file, int flags, ...)
 3945|      0|{
 3946|      0|    mode_t mode___0;
 3947|      0|    va_list ap;
 3948|      0|    int tmp;
 3949|      0|    int tmp___0;
 3950|       |
 3951|      0|    {
 3952|      0|        mode___0 = (mode_t)0;
 3953|      0|        if (flags & 64) {
 3954|      0|            {
 3955|      0|                __builtin_va_start(ap, flags);
 3956|      0|                mode___0 = __builtin_va_arg(ap, mode_t);
 3957|      0|                __builtin_va_end(ap);
 3958|      0|            }
 3959|      0|        }
 3960|      0|        {
 3961|      0|            tmp = open(file, flags, mode___0);
 3962|      0|            tmp___0 = fd_safer(tmp);
 3963|      0|        }
 3964|      0|        return (tmp___0);
 3965|      0|    }
 3966|      0|}
 3967|       |void *memchr2(void const *s, int c1_in, int c2_in, size_t n) __attribute__((__pure__));
 3968|       |void *memchr2(void const *s, int c1_in, int c2_in, size_t n) __attribute__((__pure__));
 3969|       |void *memchr2(void const *s, int c1_in, int c2_in, size_t n)
 3970|      0|{
 3971|      0|    unsigned char const *char_ptr;
 3972|      0|    void const *void_ptr;
 3973|      0|    longword const *longword_ptr;
 3974|      0|    longword repeated_one;
 3975|      0|    longword repeated_c1;
 3976|      0|    longword repeated_c2;
 3977|      0|    unsigned char c1;
 3978|      0|    unsigned char c2;
 3979|      0|    void *tmp;
 3980|      0|    size_t i;
 3981|      0|    longword longword1;
 3982|      0|    longword longword2;
 3983|       |
 3984|      0|    {
 3985|      0|        c1 = (unsigned char)c1_in;
 3986|      0|        c2 = (unsigned char)c2_in;
 3987|      0|        if ((int)c1 == (int)c2) {
 3988|      0|            {
 3989|      0|                tmp = memchr(s, (int)c1, n);
 3990|      0|            }
 3991|      0|            return (tmp);
 3992|      0|        }
 3993|      0|        void_ptr = s;
 3994|      0|        {
 3995|      0|            while (1) {
 3996|      0|while_continue: /* CIL Label */
 3997|      0|                ;
 3998|       |
 3999|      0|                if (n > 0UL) {
 4000|      0|                    if (!((uintptr_t)void_ptr % sizeof(longword) != 0UL)) {
 4001|      0|                        goto while_break;
 4002|      0|                    }
 4003|      0|                }
 4004|      0|                else {
 4005|      0|                    goto while_break;
 4006|      0|                }
 4007|      0|                char_ptr = (unsigned char const *)void_ptr;
 4008|      0|                if ((int const) * char_ptr == (int const)c1) {
 4009|      0|                    return ((void *)void_ptr);
 4010|      0|                }
 4011|      0|                else {
 4012|      0|                    if ((int const) * char_ptr == (int const)c2) {
 4013|      0|                        return ((void *)void_ptr);
 4014|      0|                    }
 4015|      0|                }
 4016|      0|                void_ptr = (void const *)(char_ptr + 1);
 4017|      0|                n--;
 4018|      0|            }
 4019|      0|while_break___3: /* CIL Label */
 4020|      0|            ;
 4021|      0|        }
 4022|      0|while_break:
 4023|      0|        longword_ptr = (longword const *)void_ptr;
 4024|      0|        repeated_one = (longword)16843009;
 4025|      0|        repeated_c1 = (longword)((int)c1 | ((int)c1 << 8));
 4026|      0|        repeated_c2 = (longword)((int)c2 | ((int)c2 << 8));
 4027|      0|        repeated_c1 |= repeated_c1 << 16;
 4028|      0|        repeated_c2 |= repeated_c2 << 16;
 4029|      0|        repeated_one |= (repeated_one << 31) << 1;
 4030|      0|        repeated_c1 |= (repeated_c1 << 31) << 1;
 4031|      0|        repeated_c2 |= (repeated_c2 << 31) << 1;
 4032|      0|        if (8UL < sizeof(longword)) {
 4033|      0|            i = (size_t)64;
 4034|      0|            {
 4035|      0|                while (1) {
 4036|      0|while_continue___0: /* CIL Label */
 4037|      0|                    ;
 4038|       |
 4039|      0|                    if (!(i < sizeof(longword) * 8UL)) {
 4040|      0|                        goto while_break___0;
 4041|      0|                    }
 4042|      0|                    repeated_one |= repeated_one << i;
 4043|      0|                    repeated_c1 |= repeated_c1 << i;
 4044|      0|                    repeated_c2 |= repeated_c2 << i;
 4045|      0|                    i *= 2UL;
 4046|      0|                }
 4047|      0|while_break___4: /* CIL Label */
 4048|      0|                ;
 4049|      0|            }
 4050|      0|while_break___0:
 4051|      0|            ;
 4052|      0|        }
 4053|      0|        {
 4054|      0|            while (1) {
 4055|      0|while_continue___1: /* CIL Label */
 4056|      0|                ;
 4057|       |
 4058|      0|                if (!(n >= sizeof(longword))) {
 4059|      0|                    goto while_break___1;
 4060|      0|                }
 4061|      0|                longword1 = (longword)(*longword_ptr ^ (unsigned long const)repeated_c1);
 4062|      0|                longword2 = (longword)(*longword_ptr ^ (unsigned long const)repeated_c2);
 4063|      0|                if (((((longword1 - repeated_one) & ~longword1) | ((longword2 - repeated_one) & ~longword2)) & (repeated_one << 7)) != 0UL) {
 4064|      0|                    goto while_break___1;
 4065|      0|                }
 4066|      0|                longword_ptr++;
 4067|      0|                n -= sizeof(longword);
 4068|      0|            }
 4069|      0|while_break___5: /* CIL Label */
 4070|      0|            ;
 4071|      0|        }
 4072|      0|while_break___1:
 4073|      0|        char_ptr = (unsigned char const *)longword_ptr;
 4074|      0|        {
 4075|      0|            while (1) {
 4076|      0|while_continue___2: /* CIL Label */
 4077|      0|                ;
 4078|       |
 4079|      0|                if (!(n > 0UL)) {
 4080|      0|                    goto while_break___2;
 4081|      0|                }
 4082|      0|                if ((int const) * char_ptr == (int const)c1) {
 4083|      0|                    return ((void *)char_ptr);
 4084|      0|                }
 4085|      0|                else {
 4086|      0|                    if ((int const) * char_ptr == (int const)c2) {
 4087|      0|                        return ((void *)char_ptr);
 4088|      0|                    }
 4089|      0|                }
 4090|      0|                n--;
 4091|      0|                char_ptr++;
 4092|      0|            }
 4093|      0|while_break___6: /* CIL Label */
 4094|      0|            ;
 4095|      0|        }
 4096|      0|while_break___2:
 4097|      0|        ;
 4098|      0|        return ((void *)0);
 4099|      0|    }
 4100|      0|}
 4101|       |extern __attribute__((__nothrow__)) size_t(__attribute__((__nonnull__(1))) strnlen)(char const *__string,
 4102|       |        size_t __maxlen) __attribute__((__pure__));
 4103|       |size_t(__attribute__((__nonnull__(1))) mbslen)(char const *string) __attribute__((__pure__));
 4104|       |void *mmalloca(size_t n);
 4105|       |void freea(void *p);
 4106|       |static _Bool knuth_morris_pratt(unsigned char const *haystack, unsigned char const *needle,
 4107|       |                                size_t needle_len, unsigned char const **resultp)
 4108|      0|{
 4109|      0|    size_t m;
 4110|      0|    size_t *table;
 4111|      0|    void *tmp___0;
 4112|      0|    void *tmp___1;
 4113|      0|    void *tmp___2;
 4114|      0|    void *tmp___3;
 4115|      0|    int tmp___4;
 4116|      0|    size_t i;
 4117|      0|    size_t j;
 4118|      0|    unsigned char b;
 4119|      0|    size_t j___0;
 4120|      0|    unsigned char const *rhaystack;
 4121|      0|    unsigned char const *phaystack;
 4122|       |
 4123|      0|    {
 4124|      0|        m = needle_len;
 4125|      0|        if (sizeof(ptrdiff_t) <= sizeof(size_t)) {
 4126|      0|            tmp___4 = -1;
 4127|      0|        }
 4128|      0|        else {
 4129|      0|            tmp___4 = -2;
 4130|      0|        }
 4131|      0|        if (m > (size_t)tmp___4 / sizeof(size_t)) {
 4132|      0|            tmp___3 = (void *)0;
 4133|      0|        }
 4134|      0|        else {
 4135|      0|            if (m * sizeof(size_t) < 4016UL) {
 4136|      0|                {
 4137|      0|                    tmp___0 = __builtin_alloca(m * sizeof(size_t) + 16UL);
 4138|      0|                    tmp___2 = (void *)((char *)tmp___0 + 16);
 4139|      0|                }
 4140|      0|            }
 4141|      0|            else {
 4142|      0|                {
 4143|      0|                    tmp___1 = mmalloca(m * sizeof(size_t));
 4144|      0|                    tmp___2 = tmp___1;
 4145|      0|                }
 4146|      0|            }
 4147|      0|            tmp___3 = tmp___2;
 4148|      0|        }
 4149|      0|        table = (size_t *)tmp___3;
 4150|      0|        if ((unsigned long)table == (unsigned long)((void *)0)) {
 4151|      0|            return ((_Bool)0);
 4152|      0|        }
 4153|      0|        *(table + 1) = (size_t)1;
 4154|      0|        j = (size_t)0;
 4155|      0|        i = (size_t)2;
 4156|      0|        {
 4157|      0|            while (1) {
 4158|      0|while_continue: /* CIL Label */
 4159|      0|                ;
 4160|       |
 4161|      0|                if (!(i < m)) {
 4162|      0|                    goto while_break;
 4163|      0|                }
 4164|      0|                b = (unsigned char)*(needle + (i - 1UL));
 4165|      0|                {
 4166|      0|                    while (1) {
 4167|      0|while_continue___0: /* CIL Label */
 4168|      0|                        ;
 4169|       |
 4170|      0|                        if ((int)b == (int)*(needle + j)) {
 4171|      0|                            j++;
 4172|      0|                            *(table + i) = i - j;
 4173|      0|                            goto while_break___0;
 4174|      0|                        }
 4175|      0|                        if (j == 0UL) {
 4176|      0|                            *(table + i) = i;
 4177|      0|                            goto while_break___0;
 4178|      0|                        }
 4179|      0|                        j -= *(table + j);
 4180|      0|                    }
 4181|      0|while_break___3: /* CIL Label */
 4182|      0|                    ;
 4183|      0|                }
 4184|      0|while_break___0:
 4185|      0|                i++;
 4186|      0|            }
 4187|      0|while_break___2: /* CIL Label */
 4188|      0|            ;
 4189|      0|        }
 4190|      0|while_break:
 4191|      0|        *resultp = (unsigned char const *)((void *)0);
 4192|      0|        j___0 = (size_t)0;
 4193|      0|        rhaystack = haystack;
 4194|      0|        phaystack = haystack;
 4195|      0|        {
 4196|      0|            while (1) {
 4197|      0|while_continue___1: /* CIL Label */
 4198|      0|                ;
 4199|       |
 4200|      0|                if (!((int const) * phaystack != 0)) {
 4201|      0|                    goto while_break___1;
 4202|      0|                }
 4203|      0|                if ((int const) * (needle + j___0) == (int const) * phaystack) {
 4204|      0|                    j___0++;
 4205|      0|                    phaystack++;
 4206|      0|                    if (j___0 == m) {
 4207|      0|                        *resultp = rhaystack;
 4208|      0|                        goto while_break___1;
 4209|      0|                    }
 4210|      0|                }
 4211|      0|                else {
 4212|      0|                    if (j___0 > 0UL) {
 4213|      0|                        rhaystack += *(table + j___0);
 4214|      0|                        j___0 -= *(table + j___0);
 4215|      0|                    }
 4216|      0|                    else {
 4217|      0|                        rhaystack++;
 4218|      0|                        phaystack++;
 4219|      0|                    }
 4220|      0|                }
 4221|      0|            }
 4222|      0|while_break___4: /* CIL Label */
 4223|      0|            ;
 4224|      0|        }
 4225|      0|while_break___1 : {
 4226|      0|            freea((void *)table);
 4227|      0|        }
 4228|      0|        return ((_Bool)1);
 4229|      0|    }
 4230|      0|}
 4231|       |static _Bool knuth_morris_pratt_multibyte(char const *haystack, char const *needle,
 4232|       |        char const **resultp)
 4233|      0|{
 4234|      0|    size_t m;
 4235|      0|    size_t tmp;
 4236|      0|    mbchar_t *needle_mbchars;
 4237|      0|    size_t *table;
 4238|      0|    void *memory;
 4239|      0|    void *tmp___1;
 4240|      0|    void *tmp___2;
 4241|      0|    void *tmp___3;
 4242|      0|    void *tmp___4;
 4243|      0|    int tmp___5;
 4244|      0|    void *table_memory;
 4245|      0|    mbui_iterator_t iter;
 4246|      0|    size_t j;
 4247|      0|    int tmp___6;
 4248|      0|    size_t i;
 4249|      0|    size_t j___0;
 4250|      0|    mbchar_t *b;
 4251|      0|    int tmp___7;
 4252|      0|    int tmp___8;
 4253|      0|    int tmp___9;
 4254|      0|    size_t j___1;
 4255|      0|    mbui_iterator_t rhaystack;
 4256|      0|    mbui_iterator_t phaystack;
 4257|      0|    size_t count;
 4258|      0|    int tmp___10;
 4259|      0|    int tmp___11;
 4260|      0|    int tmp___12;
 4261|      0|    int tmp___13;
 4262|      0|    int tmp___14;
 4263|      0|    int tmp___15;
 4264|      0|    void *__cil_tmp40;
 4265|      0|    void *__cil_tmp41;
 4266|      0|    void *__cil_tmp42;
 4267|      0|    void *__cil_tmp43;
 4268|      0|    void *__cil_tmp44;
 4269|      0|    void *__cil_tmp45;
 4270|       |
 4271|      0|    {
 4272|      0|        {
 4273|      0|            tmp = mbslen(needle);
 4274|      0|            m = tmp;
 4275|      0|        }
 4276|      0|        if (sizeof(ptrdiff_t) <= sizeof(size_t)) {
 4277|      0|            tmp___5 = -1;
 4278|      0|        }
 4279|      0|        else {
 4280|      0|            tmp___5 = -2;
 4281|      0|        }
 4282|      0|        if (m > (size_t)tmp___5 / (sizeof(mbchar_t) + sizeof(size_t))) {
 4283|      0|            tmp___4 = (void *)0;
 4284|      0|        }
 4285|      0|        else {
 4286|      0|            if (m * (sizeof(mbchar_t) + sizeof(size_t)) < 4016UL) {
 4287|      0|                {
 4288|      0|                    tmp___1 = __builtin_alloca(m * (sizeof(mbchar_t) + sizeof(size_t)) + 16UL);
 4289|      0|                    tmp___3 = (void *)((char *)tmp___1 + 16);
 4290|      0|                }
 4291|      0|            }
 4292|      0|            else {
 4293|      0|                {
 4294|      0|                    tmp___2 = mmalloca(m * (sizeof(mbchar_t) + sizeof(size_t)));
 4295|      0|                    tmp___3 = tmp___2;
 4296|      0|                }
 4297|      0|            }
 4298|      0|            tmp___4 = tmp___3;
 4299|      0|        }
 4300|      0|        memory = tmp___4;
 4301|      0|        if ((unsigned long)memory == (unsigned long)((void *)0)) {
 4302|      0|            return ((_Bool)0);
 4303|      0|        }
 4304|      0|        {
 4305|      0|            needle_mbchars = (mbchar_t *)memory;
 4306|      0|            table_memory = (void *)(needle_mbchars + m);
 4307|      0|            table = (size_t *)table_memory;
 4308|      0|            j = (size_t)0;
 4309|      0|            iter.cur.ptr = needle;
 4310|      0|            iter.in_shift = (_Bool)0;
 4311|      0|            memset((void *)(&iter.state), '\000', sizeof(mbstate_t));
 4312|      0|            iter.next_done = (_Bool)0;
 4313|      0|        }
 4314|      0|        {
 4315|      0|            while (1) {
 4316|      0|while_continue: /* CIL Label */
 4317|      0|                ;
 4318|      0|                {
 4319|      0|                    mbuiter_multi_next(&iter);
 4320|      0|                }
 4321|      0|                if (iter.cur.wc_valid) {
 4322|      0|                    if (iter.cur.wc == 0) {
 4323|      0|                        tmp___6 = 0;
 4324|      0|                    }
 4325|      0|                    else {
 4326|      0|                        tmp___6 = 1;
 4327|      0|                    }
 4328|      0|                }
 4329|      0|                else {
 4330|      0|                    tmp___6 = 1;
 4331|      0|                }
 4332|      0|                if (!tmp___6) {
 4333|      0|                    goto while_break;
 4334|      0|                }
 4335|      0|                {
 4336|      0|                    mb_copy(needle_mbchars + j, (mbchar_t const *)(&iter.cur));
 4337|      0|                    iter.cur.ptr += iter.cur.bytes;
 4338|      0|                    iter.next_done = (_Bool)0;
 4339|      0|                    j++;
 4340|      0|                }
 4341|      0|            }
 4342|      0|while_break___4: /* CIL Label */
 4343|      0|            ;
 4344|      0|        }
 4345|      0|while_break:
 4346|      0|        *(table + 1) = (size_t)1;
 4347|      0|        j___0 = (size_t)0;
 4348|      0|        i = (size_t)2;
 4349|      0|        {
 4350|      0|            while (1) {
 4351|      0|while_continue___0: /* CIL Label */
 4352|      0|                ;
 4353|       |
 4354|      0|                if (!(i < m)) {
 4355|      0|                    goto while_break___0;
 4356|      0|                }
 4357|      0|                b = needle_mbchars + (i - 1UL);
 4358|      0|                {
 4359|      0|                    while (1) {
 4360|      0|while_continue___1: /* CIL Label */
 4361|      0|                        ;
 4362|       |
 4363|      0|                        if (b->wc_valid) {
 4364|      0|                            if ((needle_mbchars + j___0)->wc_valid) {
 4365|      0|                                tmp___9 = b->wc == (needle_mbchars + j___0)->wc;
 4366|      0|                            }
 4367|      0|                            else {
 4368|      0|                                goto _L;
 4369|      0|                            }
 4370|      0|                        }
 4371|      0|                        else {
 4372|      0|_L:
 4373|      0|                            if (b->bytes == (needle_mbchars + j___0)->bytes) {
 4374|      0|                                {
 4375|      0|                                    tmp___7 = memcmp((void const *)b->ptr, (void const *)(needle_mbchars + j___0)->ptr,
 4376|      0|                                                     b->bytes);
 4377|      0|                                }
 4378|      0|                                if (tmp___7 == 0) {
 4379|      0|                                    tmp___8 = 1;
 4380|      0|                                }
 4381|      0|                                else {
 4382|      0|                                    tmp___8 = 0;
 4383|      0|                                }
 4384|      0|                            }
 4385|      0|                            else {
 4386|      0|                                tmp___8 = 0;
 4387|      0|                            }
 4388|      0|                            tmp___9 = tmp___8;
 4389|      0|                        }
 4390|      0|                        if (tmp___9) {
 4391|      0|                            j___0++;
 4392|      0|                            *(table + i) = i - j___0;
 4393|      0|                            goto while_break___1;
 4394|      0|                        }
 4395|      0|                        if (j___0 == 0UL) {
 4396|      0|                            *(table + i) = i;
 4397|      0|                            goto while_break___1;
 4398|      0|                        }
 4399|      0|                        j___0 -= *(table + j___0);
 4400|      0|                    }
 4401|      0|while_break___6: /* CIL Label */
 4402|      0|                    ;
 4403|      0|                }
 4404|      0|while_break___1:
 4405|      0|                i++;
 4406|      0|            }
 4407|      0|while_break___5: /* CIL Label */
 4408|      0|            ;
 4409|      0|        }
 4410|      0|while_break___0 : {
 4411|      0|            *resultp = (char const *)((void *)0);
 4412|      0|            j___1 = (size_t)0;
 4413|      0|            rhaystack.cur.ptr = haystack;
 4414|      0|            rhaystack.in_shift = (_Bool)0;
 4415|      0|            memset((void *)(&rhaystack.state), '\000', sizeof(mbstate_t));
 4416|      0|            rhaystack.next_done = (_Bool)0;
 4417|      0|            phaystack.cur.ptr = haystack;
 4418|      0|            phaystack.in_shift = (_Bool)0;
 4419|      0|            memset((void *)(&phaystack.state), '\000', sizeof(mbstate_t));
 4420|      0|            phaystack.next_done = (_Bool)0;
 4421|      0|        }
 4422|      0|        {
 4423|      0|            while (1) {
 4424|      0|while_continue___2: /* CIL Label */
 4425|      0|                ;
 4426|      0|                {
 4427|      0|                    mbuiter_multi_next(&phaystack);
 4428|      0|                }
 4429|      0|                if (phaystack.cur.wc_valid) {
 4430|      0|                    if (phaystack.cur.wc == 0) {
 4431|      0|                        tmp___15 = 0;
 4432|      0|                    }
 4433|      0|                    else {
 4434|      0|                        tmp___15 = 1;
 4435|      0|                    }
 4436|      0|                }
 4437|      0|                else {
 4438|      0|                    tmp___15 = 1;
 4439|      0|                }
 4440|      0|                if (!tmp___15) {
 4441|      0|                    goto while_break___2;
 4442|      0|                }
 4443|      0|                if ((needle_mbchars + j___1)->wc_valid) {
 4444|      0|                    if (phaystack.cur.wc_valid) {
 4445|      0|                        tmp___14 = (needle_mbchars + j___1)->wc == phaystack.cur.wc;
 4446|      0|                    }
 4447|      0|                    else {
 4448|      0|                        goto _L___0;
 4449|      0|                    }
 4450|      0|                }
 4451|      0|                else {
 4452|      0|_L___0:
 4453|      0|                    if ((needle_mbchars + j___1)->bytes == phaystack.cur.bytes) {
 4454|      0|                        {
 4455|      0|                            tmp___12 = memcmp((void const *)(needle_mbchars + j___1)->ptr, (void const *)phaystack.cur.ptr,
 4456|      0|                                              (needle_mbchars + j___1)->bytes);
 4457|      0|                        }
 4458|      0|                        if (tmp___12 == 0) {
 4459|      0|                            tmp___13 = 1;
 4460|      0|                        }
 4461|      0|                        else {
 4462|      0|                            tmp___13 = 0;
 4463|      0|                        }
 4464|      0|                    }
 4465|      0|                    else {
 4466|      0|                        tmp___13 = 0;
 4467|      0|                    }
 4468|      0|                    tmp___14 = tmp___13;
 4469|      0|                }
 4470|      0|                if (tmp___14) {
 4471|      0|                    j___1++;
 4472|      0|                    phaystack.cur.ptr += phaystack.cur.bytes;
 4473|      0|                    phaystack.next_done = (_Bool)0;
 4474|      0|                    if (j___1 == m) {
 4475|      0|                        *resultp = rhaystack.cur.ptr;
 4476|      0|                        goto while_break___2;
 4477|      0|                    }
 4478|      0|                }
 4479|      0|                else {
 4480|      0|                    if (j___1 > 0UL) {
 4481|      0|                        count = *(table + j___1);
 4482|      0|                        j___1 -= count;
 4483|      0|                        {
 4484|      0|                            while (1) {
 4485|      0|while_continue___3: /* CIL Label */
 4486|      0|                                ;
 4487|       |
 4488|      0|                                if (!(count > 0UL)) {
 4489|      0|                                    goto while_break___3;
 4490|      0|                                }
 4491|      0|                                {
 4492|      0|                                    mbuiter_multi_next(&rhaystack);
 4493|      0|                                }
 4494|      0|                                if (rhaystack.cur.wc_valid) {
 4495|      0|                                    if (rhaystack.cur.wc == 0) {
 4496|      0|                                        tmp___10 = 0;
 4497|      0|                                    }
 4498|      0|                                    else {
 4499|      0|                                        tmp___10 = 1;
 4500|      0|                                    }
 4501|      0|                                }
 4502|      0|                                else {
 4503|      0|                                    tmp___10 = 1;
 4504|      0|                                }
 4505|      0|                                if (!tmp___10) {
 4506|      0|                                    {
 4507|      0|                                        abort();
 4508|      0|                                    }
 4509|      0|                                }
 4510|      0|                                rhaystack.cur.ptr += rhaystack.cur.bytes;
 4511|      0|                                rhaystack.next_done = (_Bool)0;
 4512|      0|                                count--;
 4513|      0|                            }
 4514|      0|while_break___8: /* CIL Label */
 4515|      0|                            ;
 4516|      0|                        }
 4517|      0|while_break___3:
 4518|      0|                        ;
 4519|      0|                    }
 4520|      0|                    else {
 4521|      0|                        {
 4522|      0|                            mbuiter_multi_next(&rhaystack);
 4523|      0|                        }
 4524|      0|                        if (rhaystack.cur.wc_valid) {
 4525|      0|                            if (rhaystack.cur.wc == 0) {
 4526|      0|                                tmp___11 = 0;
 4527|      0|                            }
 4528|      0|                            else {
 4529|      0|                                tmp___11 = 1;
 4530|      0|                            }
 4531|      0|                        }
 4532|      0|                        else {
 4533|      0|                            tmp___11 = 1;
 4534|      0|                        }
 4535|      0|                        if (!tmp___11) {
 4536|      0|                            {
 4537|      0|                                abort();
 4538|      0|                            }
 4539|      0|                        }
 4540|      0|                        rhaystack.cur.ptr += rhaystack.cur.bytes;
 4541|      0|                        rhaystack.next_done = (_Bool)0;
 4542|      0|                        phaystack.cur.ptr += phaystack.cur.bytes;
 4543|      0|                        phaystack.next_done = (_Bool)0;
 4544|      0|                    }
 4545|      0|                }
 4546|      0|            }
 4547|      0|while_break___7: /* CIL Label */
 4548|      0|            ;
 4549|      0|        }
 4550|      0|while_break___2 : {
 4551|      0|            freea(memory);
 4552|      0|        }
 4553|      0|        return ((_Bool)1);
 4554|      0|    }
 4555|      0|}
 4556|       |char *(__attribute__((__nonnull__(1, 2))) mbsstr)(char const *haystack, char const *needle) __attribute__((__pure__));
 4557|       |char *(__attribute__((__nonnull__(1, 2))) mbsstr)(char const *haystack, char const *needle)
 4558|      0|{
 4559|      0|    mbui_iterator_t iter_needle;
 4560|      0|    _Bool try_kmp;
 4561|      0|    size_t outer_loop_count;
 4562|      0|    size_t comparison_count;
 4563|      0|    size_t last_ccount;
 4564|      0|    mbui_iterator_t iter_needle_last_ccount;
 4565|      0|    mbui_iterator_t iter_haystack;
 4566|      0|    int tmp;
 4567|      0|    size_t count;
 4568|      0|    int tmp___0;
 4569|      0|    char const *result;
 4570|      0|    _Bool success;
 4571|      0|    _Bool tmp___1;
 4572|      0|    int tmp___2;
 4573|      0|    mbui_iterator_t rhaystack;
 4574|      0|    mbui_iterator_t rneedle;
 4575|      0|    int tmp___3;
 4576|      0|    int tmp___4;
 4577|      0|    int tmp___5;
 4578|      0|    int tmp___6;
 4579|      0|    int tmp___7;
 4580|      0|    int tmp___8;
 4581|      0|    int tmp___9;
 4582|      0|    int tmp___10;
 4583|      0|    int tmp___11;
 4584|      0|    int tmp___12;
 4585|      0|    _Bool try_kmp___0;
 4586|      0|    size_t outer_loop_count___0;
 4587|      0|    size_t comparison_count___0;
 4588|      0|    size_t last_ccount___0;
 4589|      0|    char const *needle_last_ccount;
 4590|      0|    char b;
 4591|      0|    char const *tmp___13;
 4592|      0|    size_t tmp___14;
 4593|      0|    unsigned char const *result___0;
 4594|      0|    _Bool success___0;
 4595|      0|    size_t tmp___15;
 4596|      0|    _Bool tmp___16;
 4597|      0|    char const *rhaystack___0;
 4598|      0|    char const *rneedle___0;
 4599|      0|    size_t tmp___17;
 4600|      0|    void *__cil_tmp54;
 4601|      0|    void *__cil_tmp55;
 4602|      0|    void *__cil_tmp56;
 4603|      0|    void *__cil_tmp57;
 4604|      0|    void *__cil_tmp58;
 4605|      0|    void *__cil_tmp59;
 4606|      0|    void *__cil_tmp60;
 4607|      0|    void *__cil_tmp61;
 4608|      0|    void *__cil_tmp62;
 4609|      0|    void *__cil_tmp63;
 4610|       |
 4611|      0|    {
 4612|      0|        {
 4613|      0|            tmp___17 = __ctype_get_mb_cur_max();
 4614|      0|        }
 4615|      0|        if (tmp___17 > 1UL) {
 4616|      0|            {
 4617|      0|                iter_needle.cur.ptr = needle;
 4618|      0|                iter_needle.in_shift = (_Bool)0;
 4619|      0|                memset((void *)(&iter_needle.state), '\000', sizeof(mbstate_t));
 4620|      0|                iter_needle.next_done = (_Bool)0;
 4621|      0|                mbuiter_multi_next(&iter_needle);
 4622|      0|            }
 4623|      0|            if (iter_needle.cur.wc_valid) {
 4624|      0|                if (iter_needle.cur.wc == 0) {
 4625|      0|                    tmp___12 = 0;
 4626|      0|                }
 4627|      0|                else {
 4628|      0|                    tmp___12 = 1;
 4629|      0|                }
 4630|      0|            }
 4631|      0|            else {
 4632|      0|                tmp___12 = 1;
 4633|      0|            }
 4634|      0|            if (tmp___12) {
 4635|      0|                {
 4636|      0|                    try_kmp = (_Bool)1;
 4637|      0|                    outer_loop_count = (size_t)0;
 4638|      0|                    comparison_count = (size_t)0;
 4639|      0|                    last_ccount = (size_t)0;
 4640|      0|                    iter_needle_last_ccount.cur.ptr = needle;
 4641|      0|                    iter_needle_last_ccount.in_shift = (_Bool)0;
 4642|      0|                    memset((void *)(&iter_needle_last_ccount.state), '\000', sizeof(mbstate_t));
 4643|      0|                    iter_needle_last_ccount.next_done = (_Bool)0;
 4644|      0|                    iter_haystack.cur.ptr = haystack;
 4645|      0|                    iter_haystack.in_shift = (_Bool)0;
 4646|      0|                    memset((void *)(&iter_haystack.state), '\000', sizeof(mbstate_t));
 4647|      0|                    iter_haystack.next_done = (_Bool)0;
 4648|      0|                }
 4649|      0|                {
 4650|      0|                    while (1) {
 4651|      0|while_continue: /* CIL Label */
 4652|      0|                        ;
 4653|      0|                        {
 4654|      0|                            mbuiter_multi_next(&iter_haystack);
 4655|      0|                        }
 4656|      0|                        if (iter_haystack.cur.wc_valid) {
 4657|      0|                            if (iter_haystack.cur.wc == 0) {
 4658|      0|                                tmp = 0;
 4659|      0|                            }
 4660|      0|                            else {
 4661|      0|                                tmp = 1;
 4662|      0|                            }
 4663|      0|                        }
 4664|      0|                        else {
 4665|      0|                            tmp = 1;
 4666|      0|                        }
 4667|      0|                        if (!tmp) {
 4668|      0|                            return ((char *)((void *)0));
 4669|      0|                        }
 4670|      0|                        if (try_kmp) {
 4671|      0|                            if (outer_loop_count >= 10UL) {
 4672|      0|                                if (comparison_count >= 5UL * outer_loop_count) {
 4673|      0|                                    count = comparison_count - last_ccount;
 4674|      0|                                    {
 4675|      0|                                        while (1) {
 4676|      0|while_continue___0: /* CIL Label */
 4677|      0|                                            ;
 4678|       |
 4679|      0|                                            if (count > 0UL) {
 4680|      0|                                                {
 4681|      0|                                                    mbuiter_multi_next(&iter_needle_last_ccount);
 4682|      0|                                                }
 4683|      0|                                                if (iter_needle_last_ccount.cur.wc_valid) {
 4684|      0|                                                    if (iter_needle_last_ccount.cur.wc == 0) {
 4685|      0|                                                        tmp___0 = 0;
 4686|      0|                                                    }
 4687|      0|                                                    else {
 4688|      0|                                                        tmp___0 = 1;
 4689|      0|                                                    }
 4690|      0|                                                }
 4691|      0|                                                else {
 4692|      0|                                                    tmp___0 = 1;
 4693|      0|                                                }
 4694|      0|                                                if (!tmp___0) {
 4695|      0|                                                    goto while_break___0;
 4696|      0|                                                }
 4697|      0|                                            }
 4698|      0|                                            else {
 4699|      0|                                                goto while_break___0;
 4700|      0|                                            }
 4701|      0|                                            iter_needle_last_ccount.cur.ptr += iter_needle_last_ccount.cur.bytes;
 4702|      0|                                            iter_needle_last_ccount.next_done = (_Bool)0;
 4703|      0|                                            count--;
 4704|      0|                                        }
 4705|      0|while_break___4: /* CIL Label */
 4706|      0|                                        ;
 4707|      0|                                    }
 4708|      0|while_break___0 : {
 4709|      0|                                        last_ccount = comparison_count;
 4710|      0|                                        mbuiter_multi_next(&iter_needle_last_ccount);
 4711|      0|                                    }
 4712|      0|                                    if (iter_needle_last_ccount.cur.wc_valid) {
 4713|      0|                                        if (iter_needle_last_ccount.cur.wc == 0) {
 4714|      0|                                            tmp___2 = 0;
 4715|      0|                                        }
 4716|      0|                                        else {
 4717|      0|                                            tmp___2 = 1;
 4718|      0|                                        }
 4719|      0|                                    }
 4720|      0|                                    else {
 4721|      0|                                        tmp___2 = 1;
 4722|      0|                                    }
 4723|      0|                                    if (!tmp___2) {
 4724|      0|                                        {
 4725|      0|                                            tmp___1 = knuth_morris_pratt_multibyte(haystack, needle, &result);
 4726|      0|                                            success = tmp___1;
 4727|      0|                                        }
 4728|      0|                                        if (success) {
 4729|      0|                                            return ((char *)result);
 4730|      0|                                        }
 4731|      0|                                        try_kmp = (_Bool)0;
 4732|      0|                                    }
 4733|      0|                                }
 4734|      0|                            }
 4735|      0|                        }
 4736|      0|                        outer_loop_count++;
 4737|      0|                        comparison_count++;
 4738|      0|                        if (iter_haystack.cur.wc_valid) {
 4739|      0|                            if (iter_needle.cur.wc_valid) {
 4740|      0|                                tmp___11 = iter_haystack.cur.wc == iter_needle.cur.wc;
 4741|      0|                            }
 4742|      0|                            else {
 4743|      0|                                goto _L___0;
 4744|      0|                            }
 4745|      0|                        }
 4746|      0|                        else {
 4747|      0|_L___0:
 4748|      0|                            if (iter_haystack.cur.bytes == iter_needle.cur.bytes) {
 4749|      0|                                {
 4750|      0|                                    tmp___9 = memcmp((void const *)iter_haystack.cur.ptr, (void const *)iter_needle.cur.ptr,
 4751|      0|                                                     iter_haystack.cur.bytes);
 4752|      0|                                }
 4753|      0|                                if (tmp___9 == 0) {
 4754|      0|                                    tmp___10 = 1;
 4755|      0|                                }
 4756|      0|                                else {
 4757|      0|                                    tmp___10 = 0;
 4758|      0|                                }
 4759|      0|                            }
 4760|      0|                            else {
 4761|      0|                                tmp___10 = 0;
 4762|      0|                            }
 4763|      0|                            tmp___11 = tmp___10;
 4764|      0|                        }
 4765|      0|                        if (tmp___11) {
 4766|      0|                            {
 4767|      0|                                memcpy((void * /* __restrict  */)((void *)(&rhaystack)), (void const * /* __restrict  */)((void const *)(&iter_haystack)),
 4768|      0|                                       sizeof(mbui_iterator_t));
 4769|      0|                                rhaystack.cur.ptr += rhaystack.cur.bytes;
 4770|      0|                                rhaystack.next_done = (_Bool)0;
 4771|      0|                                rneedle.cur.ptr = needle;
 4772|      0|                                rneedle.in_shift = (_Bool)0;
 4773|      0|                                memset((void *)(&rneedle.state), '\000', sizeof(mbstate_t));
 4774|      0|                                rneedle.next_done = (_Bool)0;
 4775|      0|                                mbuiter_multi_next(&rneedle);
 4776|      0|                            }
 4777|      0|                            if (rneedle.cur.wc_valid) {
 4778|      0|                                if (rneedle.cur.wc == 0) {
 4779|      0|                                    tmp___3 = 0;
 4780|      0|                                }
 4781|      0|                                else {
 4782|      0|                                    tmp___3 = 1;
 4783|      0|                                }
 4784|      0|                            }
 4785|      0|                            else {
 4786|      0|                                tmp___3 = 1;
 4787|      0|                            }
 4788|      0|                            if (!tmp___3) {
 4789|      0|                                {
 4790|      0|                                    abort();
 4791|      0|                                }
 4792|      0|                            }
 4793|      0|                            rneedle.cur.ptr += rneedle.cur.bytes;
 4794|      0|                            rneedle.next_done = (_Bool)0;
 4795|      0|                            {
 4796|      0|                                while (1) {
 4797|      0|while_continue___1: /* CIL Label */
 4798|      0|                                    ;
 4799|      0|                                    {
 4800|      0|                                        mbuiter_multi_next(&rneedle);
 4801|      0|                                    }
 4802|      0|                                    if (rneedle.cur.wc_valid) {
 4803|      0|                                        if (rneedle.cur.wc == 0) {
 4804|      0|                                            tmp___4 = 0;
 4805|      0|                                        }
 4806|      0|                                        else {
 4807|      0|                                            tmp___4 = 1;
 4808|      0|                                        }
 4809|      0|                                    }
 4810|      0|                                    else {
 4811|      0|                                        tmp___4 = 1;
 4812|      0|                                    }
 4813|      0|                                    if (!tmp___4) {
 4814|      0|                                        return ((char *)iter_haystack.cur.ptr);
 4815|      0|                                    }
 4816|      0|                                    {
 4817|      0|                                        mbuiter_multi_next(&rhaystack);
 4818|      0|                                    }
 4819|      0|                                    if (rhaystack.cur.wc_valid) {
 4820|      0|                                        if (rhaystack.cur.wc == 0) {
 4821|      0|                                            tmp___5 = 0;
 4822|      0|                                        }
 4823|      0|                                        else {
 4824|      0|                                            tmp___5 = 1;
 4825|      0|                                        }
 4826|      0|                                    }
 4827|      0|                                    else {
 4828|      0|                                        tmp___5 = 1;
 4829|      0|                                    }
 4830|      0|                                    if (!tmp___5) {
 4831|      0|                                        return ((char *)((void *)0));
 4832|      0|                                    }
 4833|      0|                                    comparison_count++;
 4834|      0|                                    if (rhaystack.cur.wc_valid) {
 4835|      0|                                        if (rneedle.cur.wc_valid) {
 4836|      0|                                            tmp___8 = rhaystack.cur.wc == rneedle.cur.wc;
 4837|      0|                                        }
 4838|      0|                                        else {
 4839|      0|                                            goto _L;
 4840|      0|                                        }
 4841|      0|                                    }
 4842|      0|                                    else {
 4843|      0|_L:
 4844|      0|                                        if (rhaystack.cur.bytes == rneedle.cur.bytes) {
 4845|      0|                                            {
 4846|      0|                                                tmp___6 = memcmp((void const *)rhaystack.cur.ptr, (void const *)rneedle.cur.ptr,
 4847|      0|                                                                 rhaystack.cur.bytes);
 4848|      0|                                            }
 4849|      0|                                            if (tmp___6 == 0) {
 4850|      0|                                                tmp___7 = 1;
 4851|      0|                                            }
 4852|      0|                                            else {
 4853|      0|                                                tmp___7 = 0;
 4854|      0|                                            }
 4855|      0|                                        }
 4856|      0|                                        else {
 4857|      0|                                            tmp___7 = 0;
 4858|      0|                                        }
 4859|      0|                                        tmp___8 = tmp___7;
 4860|      0|                                    }
 4861|      0|                                    if (!tmp___8) {
 4862|      0|                                        goto while_break___1;
 4863|      0|                                    }
 4864|      0|                                    rhaystack.cur.ptr += rhaystack.cur.bytes;
 4865|      0|                                    rhaystack.next_done = (_Bool)0;
 4866|      0|                                    rneedle.cur.ptr += rneedle.cur.bytes;
 4867|      0|                                    rneedle.next_done = (_Bool)0;
 4868|      0|                                }
 4869|      0|while_break___5: /* CIL Label */
 4870|      0|                                ;
 4871|      0|                            }
 4872|      0|while_break___1:
 4873|      0|                            ;
 4874|      0|                        }
 4875|      0|                        iter_haystack.cur.ptr += iter_haystack.cur.bytes;
 4876|      0|                        iter_haystack.next_done = (_Bool)0;
 4877|      0|                    }
 4878|      0|while_break: /* CIL Label */
 4879|      0|                    ;
 4880|      0|                }
 4881|       |
 4882|      0|            }
 4883|      0|            else {
 4884|      0|                return ((char *)haystack);
 4885|      0|            }
 4886|      0|        }
 4887|      0|        else {
 4888|      0|            if ((int const) * needle != 0) {
 4889|      0|                try_kmp___0 = (_Bool)1;
 4890|      0|                outer_loop_count___0 = (size_t)0;
 4891|      0|                comparison_count___0 = (size_t)0;
 4892|      0|                last_ccount___0 = (size_t)0;
 4893|      0|                needle_last_ccount = needle;
 4894|      0|                tmp___13 = needle;
 4895|      0|                needle++;
 4896|      0|                b = (char)*tmp___13;
 4897|      0|                {
 4898|      0|                    while (1) {
 4899|      0|while_continue___2: /* CIL Label */
 4900|      0|                        ;
 4901|       |
 4902|      0|                        if ((int const) * haystack == 0) {
 4903|      0|                            return ((char *)((void *)0));
 4904|      0|                        }
 4905|      0|                        if (try_kmp___0) {
 4906|      0|                            if (outer_loop_count___0 >= 10UL) {
 4907|      0|                                if (comparison_count___0 >= 5UL * outer_loop_count___0) {
 4908|      0|                                    if ((unsigned long)needle_last_ccount != (unsigned long)((void *)0)) {
 4909|      0|                                        {
 4910|      0|                                            tmp___14 = strnlen(needle_last_ccount, comparison_count___0 - last_ccount___0);
 4911|      0|                                            needle_last_ccount += tmp___14;
 4912|      0|                                        }
 4913|      0|                                        if ((int const) * needle_last_ccount == 0) {
 4914|      0|                                            needle_last_ccount = (char const *)((void *)0);
 4915|      0|                                        }
 4916|      0|                                        last_ccount___0 = comparison_count___0;
 4917|      0|                                    }
 4918|      0|                                    if ((unsigned long)needle_last_ccount == (unsigned long)((void *)0)) {
 4919|      0|                                        {
 4920|      0|                                            tmp___15 = strlen(needle - 1);
 4921|      0|                                            tmp___16 = knuth_morris_pratt((unsigned char const *)haystack, (unsigned char const *)(needle - 1),
 4922|      0|                                                                          tmp___15, &result___0);
 4923|      0|                                            success___0 = tmp___16;
 4924|      0|                                        }
 4925|      0|                                        if (success___0) {
 4926|      0|                                            return ((char *)result___0);
 4927|      0|                                        }
 4928|      0|                                        try_kmp___0 = (_Bool)0;
 4929|      0|                                    }
 4930|      0|                                }
 4931|      0|                            }
 4932|      0|                        }
 4933|      0|                        outer_loop_count___0++;
 4934|      0|                        comparison_count___0++;
 4935|      0|                        if ((int const) * haystack == (int const)b) {
 4936|      0|                            rhaystack___0 = haystack + 1;
 4937|      0|                            rneedle___0 = needle;
 4938|      0|                            {
 4939|      0|                                while (1) {
 4940|      0|while_continue___3: /* CIL Label */
 4941|      0|                                    ;
 4942|       |
 4943|      0|                                    if ((int const) * rneedle___0 == 0) {
 4944|      0|                                        return ((char *)haystack);
 4945|      0|                                    }
 4946|      0|                                    if ((int const) * rhaystack___0 == 0) {
 4947|      0|                                        return ((char *)((void *)0));
 4948|      0|                                    }
 4949|      0|                                    comparison_count___0++;
 4950|      0|                                    if ((int const) * rhaystack___0 != (int const) * rneedle___0) {
 4951|      0|                                        goto while_break___3;
 4952|      0|                                    }
 4953|      0|                                    rhaystack___0++;
 4954|      0|                                    rneedle___0++;
 4955|      0|                                }
 4956|      0|while_break___7: /* CIL Label */
 4957|      0|                                ;
 4958|      0|                            }
 4959|      0|while_break___3:
 4960|      0|                            ;
 4961|      0|                        }
 4962|      0|                        haystack++;
 4963|      0|                    }
 4964|      0|while_break___6: /* CIL Label */
 4965|      0|                    ;
 4966|      0|                }
 4967|       |
 4968|      0|            }
 4969|      0|            else {
 4970|      0|                return ((char *)haystack);
 4971|      0|            }
 4972|      0|        }
 4973|      0|        return ((char *)0);
 4974|      0|    }
 4975|      0|}
 4976|       |size_t(__attribute__((__nonnull__(1))) mbslen)(char const *string) __attribute__((__pure__));
 4977|       |size_t(__attribute__((__nonnull__(1))) mbslen)(char const *string)
 4978|      0|{
 4979|      0|    size_t count;
 4980|      0|    mbui_iterator_t iter;
 4981|      0|    int tmp;
 4982|      0|    size_t tmp___0;
 4983|      0|    size_t tmp___1;
 4984|      0|    void *__cil_tmp9;
 4985|      0|    void *__cil_tmp10;
 4986|       |
 4987|      0|    {
 4988|      0|        {
 4989|      0|            tmp___1 = __ctype_get_mb_cur_max();
 4990|      0|        }
 4991|      0|        if (tmp___1 > 1UL) {
 4992|      0|            {
 4993|      0|                count = (size_t)0;
 4994|      0|                iter.cur.ptr = string;
 4995|      0|                iter.in_shift = (_Bool)0;
 4996|      0|                memset((void *)(&iter.state), '\000', sizeof(mbstate_t));
 4997|      0|                iter.next_done = (_Bool)0;
 4998|      0|            }
 4999|      0|            {
 5000|      0|                while (1) {
 5001|      0|while_continue: /* CIL Label */
 5002|      0|                    ;
 5003|      0|                    {
 5004|      0|                        mbuiter_multi_next(&iter);
 5005|      0|                    }
 5006|      0|                    if (iter.cur.wc_valid) {
 5007|      0|                        if (iter.cur.wc == 0) {
 5008|      0|                            tmp = 0;
 5009|      0|                        }
 5010|      0|                        else {
 5011|      0|                            tmp = 1;
 5012|      0|                        }
 5013|      0|                    }
 5014|      0|                    else {
 5015|      0|                        tmp = 1;
 5016|      0|                    }
 5017|      0|                    if (!tmp) {
 5018|      0|                        goto while_break;
 5019|      0|                    }
 5020|      0|                    count++;
 5021|      0|                    iter.cur.ptr += iter.cur.bytes;
 5022|      0|                    iter.next_done = (_Bool)0;
 5023|      0|                }
 5024|      0|while_break___0: /* CIL Label */
 5025|      0|                ;
 5026|      0|            }
 5027|      0|while_break:
 5028|      0|            ;
 5029|      0|            return (count);
 5030|      0|        }
 5031|      0|        else {
 5032|      0|            {
 5033|      0|                tmp___0 = strlen(string);
 5034|      0|            }
 5035|      0|            return (tmp___0);
 5036|      0|        }
 5037|      0|    }
 5038|      0|}
 5039|       |int(__attribute__((__nonnull__(1, 2))) mbscasecmp)(char const *s1, char const *s2) __attribute__((__pure__));
 5040|       |extern __attribute__((__nothrow__)) int tolower(int __c);
 5041|       |extern __attribute__((__nothrow__)) wint_t towlower(wint_t __wc);
 5042|       |int(__attribute__((__nonnull__(1, 2))) mbscasecmp)(char const *s1, char const *s2) __attribute__((__pure__));
 5043|       |int(__attribute__((__nonnull__(1, 2))) mbscasecmp)(char const *s1, char const *s2)
 5044|      0|{
 5045|      0|    mbui_iterator_t iter1;
 5046|      0|    mbui_iterator_t iter2;
 5047|      0|    int cmp;
 5048|      0|    wint_t tmp;
 5049|      0|    wint_t tmp___0;
 5050|      0|    int tmp___1;
 5051|      0|    int tmp___2;
 5052|      0|    int tmp___4;
 5053|      0|    int tmp___5;
 5054|      0|    int tmp___7;
 5055|      0|    int tmp___8;
 5056|      0|    int tmp___9;
 5057|      0|    int tmp___10;
 5058|      0|    int tmp___11;
 5059|      0|    int tmp___12;
 5060|      0|    int tmp___13;
 5061|      0|    int tmp___14;
 5062|      0|    int tmp___15;
 5063|      0|    int tmp___16;
 5064|      0|    unsigned char const *p1;
 5065|      0|    unsigned char const *p2;
 5066|      0|    unsigned char c1;
 5067|      0|    unsigned char c2;
 5068|      0|    int tmp___18;
 5069|      0|    unsigned short const **tmp___19;
 5070|      0|    int tmp___21;
 5071|      0|    unsigned short const **tmp___22;
 5072|      0|    size_t tmp___25;
 5073|      0|    void *__cil_tmp35;
 5074|      0|    void *__cil_tmp36;
 5075|      0|    void *__cil_tmp37;
 5076|      0|    void *__cil_tmp38;
 5077|       |
 5078|      0|    {
 5079|      0|        if ((unsigned long)s1 == (unsigned long)s2) {
 5080|      0|            return (0);
 5081|      0|        }
 5082|      0|        {
 5083|      0|            tmp___25 = __ctype_get_mb_cur_max();
 5084|      0|        }
 5085|      0|        if (tmp___25 > 1UL) {
 5086|      0|            {
 5087|      0|                iter1.cur.ptr = s1;
 5088|      0|                iter1.in_shift = (_Bool)0;
 5089|      0|                memset((void *)(&iter1.state), '\000', sizeof(mbstate_t));
 5090|      0|                iter1.next_done = (_Bool)0;
 5091|      0|                iter2.cur.ptr = s2;
 5092|      0|                iter2.in_shift = (_Bool)0;
 5093|      0|                memset((void *)(&iter2.state), '\000', sizeof(mbstate_t));
 5094|      0|                iter2.next_done = (_Bool)0;
 5095|      0|            }
 5096|      0|            {
 5097|      0|                while (1) {
 5098|      0|while_continue: /* CIL Label */
 5099|      0|                    ;
 5100|      0|                    {
 5101|      0|                        mbuiter_multi_next(&iter1);
 5102|      0|                    }
 5103|      0|                    if (iter1.cur.wc_valid) {
 5104|      0|                        if (iter1.cur.wc == 0) {
 5105|      0|                            tmp___13 = 0;
 5106|      0|                        }
 5107|      0|                        else {
 5108|      0|                            tmp___13 = 1;
 5109|      0|                        }
 5110|      0|                    }
 5111|      0|                    else {
 5112|      0|                        tmp___13 = 1;
 5113|      0|                    }
 5114|      0|                    if (tmp___13) {
 5115|      0|                        {
 5116|      0|                            mbuiter_multi_next(&iter2);
 5117|      0|                        }
 5118|      0|                        if (iter2.cur.wc_valid) {
 5119|      0|                            if (iter2.cur.wc == 0) {
 5120|      0|                                tmp___14 = 0;
 5121|      0|                            }
 5122|      0|                            else {
 5123|      0|                                tmp___14 = 1;
 5124|      0|                            }
 5125|      0|                        }
 5126|      0|                        else {
 5127|      0|                            tmp___14 = 1;
 5128|      0|                        }
 5129|      0|                        if (!tmp___14) {
 5130|      0|                            goto while_break;
 5131|      0|                        }
 5132|      0|                    }
 5133|      0|                    else {
 5134|      0|                        goto while_break;
 5135|      0|                    }
 5136|      0|                    if (iter1.cur.wc_valid) {
 5137|      0|                        if (iter2.cur.wc_valid) {
 5138|      0|                            {
 5139|      0|                                tmp = towlower((wint_t)iter1.cur.wc);
 5140|      0|                                tmp___0 = towlower((wint_t)iter2.cur.wc);
 5141|      0|                                tmp___1 = (int)tmp - (int)tmp___0;
 5142|      0|                            }
 5143|      0|                        }
 5144|      0|                        else {
 5145|      0|                            tmp___1 = -1;
 5146|      0|                        }
 5147|      0|                        tmp___12 = tmp___1;
 5148|      0|                    }
 5149|      0|                    else {
 5150|      0|                        if (iter2.cur.wc_valid) {
 5151|      0|                            tmp___11 = 1;
 5152|      0|                        }
 5153|      0|                        else {
 5154|      0|                            if (iter1.cur.bytes == iter2.cur.bytes) {
 5155|      0|                                {
 5156|      0|                                    tmp___2 = memcmp((void const *)iter1.cur.ptr, (void const *)iter2.cur.ptr,
 5157|      0|                                                     iter1.cur.bytes);
 5158|      0|                                    tmp___10 = tmp___2;
 5159|      0|                                }
 5160|      0|                            }
 5161|      0|                            else {
 5162|      0|                                if (iter1.cur.bytes < iter2.cur.bytes) {
 5163|      0|                                    {
 5164|      0|                                        tmp___5 = memcmp((void const *)iter1.cur.ptr, (void const *)iter2.cur.ptr,
 5165|      0|                                                         iter1.cur.bytes);
 5166|      0|                                    }
 5167|      0|                                    if (tmp___5 > 0) {
 5168|      0|                                        tmp___4 = 1;
 5169|      0|                                    }
 5170|      0|                                    else {
 5171|      0|                                        tmp___4 = -1;
 5172|      0|                                    }
 5173|      0|                                    tmp___9 = tmp___4;
 5174|      0|                                }
 5175|      0|                                else {
 5176|      0|                                    {
 5177|      0|                                        tmp___8 = memcmp((void const *)iter1.cur.ptr, (void const *)iter2.cur.ptr,
 5178|      0|                                                         iter2.cur.bytes);
 5179|      0|                                    }
 5180|      0|                                    if (tmp___8 >= 0) {
 5181|      0|                                        tmp___7 = 1;
 5182|      0|                                    }
 5183|      0|                                    else {
 5184|      0|                                        tmp___7 = -1;
 5185|      0|                                    }
 5186|      0|                                    tmp___9 = tmp___7;
 5187|      0|                                }
 5188|      0|                                tmp___10 = tmp___9;
 5189|      0|                            }
 5190|      0|                            tmp___11 = tmp___10;
 5191|      0|                        }
 5192|      0|                        tmp___12 = tmp___11;
 5193|      0|                    }
 5194|      0|                    cmp = tmp___12;
 5195|      0|                    if (cmp != 0) {
 5196|      0|                        return (cmp);
 5197|      0|                    }
 5198|      0|                    iter1.cur.ptr += iter1.cur.bytes;
 5199|      0|                    iter1.next_done = (_Bool)0;
 5200|      0|                    iter2.cur.ptr += iter2.cur.bytes;
 5201|      0|                    iter2.next_done = (_Bool)0;
 5202|      0|                }
 5203|      0|while_break___1: /* CIL Label */
 5204|      0|                ;
 5205|      0|            }
 5206|      0|while_break : {
 5207|      0|                mbuiter_multi_next(&iter1);
 5208|      0|            }
 5209|      0|            if (iter1.cur.wc_valid) {
 5210|      0|                if (iter1.cur.wc == 0) {
 5211|      0|                    tmp___15 = 0;
 5212|      0|                }
 5213|      0|                else {
 5214|      0|                    tmp___15 = 1;
 5215|      0|                }
 5216|      0|            }
 5217|      0|            else {
 5218|      0|                tmp___15 = 1;
 5219|      0|            }
 5220|      0|            if (tmp___15) {
 5221|      0|                return (1);
 5222|      0|            }
 5223|      0|            {
 5224|      0|                mbuiter_multi_next(&iter2);
 5225|      0|            }
 5226|      0|            if (iter2.cur.wc_valid) {
 5227|      0|                if (iter2.cur.wc == 0) {
 5228|      0|                    tmp___16 = 0;
 5229|      0|                }
 5230|      0|                else {
 5231|      0|                    tmp___16 = 1;
 5232|      0|                }
 5233|      0|            }
 5234|      0|            else {
 5235|      0|                tmp___16 = 1;
 5236|      0|            }
 5237|      0|            if (tmp___16) {
 5238|      0|                return (-1);
 5239|      0|            }
 5240|      0|            return (0);
 5241|      0|        }
 5242|      0|        else {
 5243|      0|            p1 = (unsigned char const *)s1;
 5244|      0|            p2 = (unsigned char const *)s2;
 5245|      0|            {
 5246|      0|                while (1) {
 5247|      0|while_continue___0: /* CIL Label */
 5248|      0|                    ;
 5249|      0|                    {
 5250|      0|                        tmp___19 = __ctype_b_loc();
 5251|      0|                    }
 5252|      0|                    if ((int const) * (*tmp___19 + (int)*p1) & 256) {
 5253|      0|                        {
 5254|      0|                            tmp___18 = tolower((int)*p1);
 5255|      0|                            c1 = (unsigned char)tmp___18;
 5256|      0|                        }
 5257|      0|                    }
 5258|      0|                    else {
 5259|      0|                        c1 = (unsigned char)*p1;
 5260|      0|                    }
 5261|      0|                    {
 5262|      0|                        tmp___22 = __ctype_b_loc();
 5263|      0|                    }
 5264|      0|                    if ((int const) * (*tmp___22 + (int)*p2) & 256) {
 5265|      0|                        {
 5266|      0|                            tmp___21 = tolower((int)*p2);
 5267|      0|                            c2 = (unsigned char)tmp___21;
 5268|      0|                        }
 5269|      0|                    }
 5270|      0|                    else {
 5271|      0|                        c2 = (unsigned char)*p2;
 5272|      0|                    }
 5273|      0|                    if ((int)c1 == 0) {
 5274|      0|                        goto while_break___0;
 5275|      0|                    }
 5276|      0|                    p1++;
 5277|      0|                    p2++;
 5278|      0|                    if (!((int)c1 == (int)c2)) {
 5279|      0|                        goto while_break___0;
 5280|      0|                    }
 5281|      0|                }
 5282|      0|while_break___2: /* CIL Label */
 5283|      0|                ;
 5284|      0|            }
 5285|      0|while_break___0:
 5286|      0|            ;
 5287|      0|            return ((int)c1 - (int)c2);
 5288|      0|        }
 5289|      0|    }
 5290|      0|}
 5291|       |unsigned int const is_basic_table[8] = {(unsigned int const)6656, (unsigned int const)4294967279U, (unsigned int const)4294967294U, (unsigned int const)2147483646};
 5292|       |static void *mmalloca_results[257];
 5293|       |void *mmalloca(size_t n)
 5294|      0|{
 5295|      0|    size_t nplus;
 5296|      0|    void *p;
 5297|      0|    void *tmp;
 5298|      0|    size_t slot;
 5299|      0|    union header *h;
 5300|       |
 5301|      0|    {
 5302|      0|        nplus = n + (((sizeof(struct preliminary_header) + 16UL) - 1UL) / 16UL) * 16UL;
 5303|      0|        if (nplus >= n) {
 5304|      0|            {
 5305|      0|                tmp = malloc(nplus);
 5306|      0|                p = tmp;
 5307|      0|            }
 5308|      0|            if ((unsigned long)p != (unsigned long)((void *)0)) {
 5309|      0|                h = (union header *)p;
 5310|      0|                p = (void *)(h + 1);
 5311|      0|                h->magic.word = 336984906;
 5312|      0|                slot = (uintptr_t)p % 257UL;
 5313|      0|                h->next = mmalloca_results[slot];
 5314|      0|                mmalloca_results[slot] = p;
 5315|      0|                return (p);
 5316|      0|            }
 5317|      0|        }
 5318|      0|        return ((void *)0);
 5319|      0|    }
 5320|      0|}
 5321|       |void freea(void *p)
 5322|      0|{
 5323|      0|    size_t slot;
 5324|      0|    void **chain;
 5325|      0|    union header *h;
 5326|      0|    union header *p_begin;
 5327|       |
 5328|      0|    {
 5329|      0|        if ((unsigned long)p != (unsigned long)((void *)0)) {
 5330|      0|            if (*((int *)p + -1) == 336984906) {
 5331|      0|                slot = (uintptr_t)p % 257UL;
 5332|      0|                chain = &mmalloca_results[slot];
 5333|      0|                {
 5334|      0|                    while (1) {
 5335|      0|while_continue: /* CIL Label */
 5336|      0|                        ;
 5337|       |
 5338|      0|                        if (!((unsigned long)*chain != (unsigned long)((void *)0))) {
 5339|      0|                            goto while_break;
 5340|      0|                        }
 5341|      0|                        h = (union header *)p;
 5342|      0|                        if ((unsigned long)*chain == (unsigned long)p) {
 5343|      0|                            {
 5344|      0|                                p_begin = h - 1;
 5345|      0|                                *chain = p_begin->next;
 5346|      0|                                free((void *)p_begin);
 5347|      0|                            }
 5348|      0|                            return;
 5349|      0|                        }
 5350|      0|                        h = (union header *)*chain;
 5351|      0|                        chain = &(h + -1)->next;
 5352|      0|                    }
 5353|      0|while_break___0: /* CIL Label */
 5354|      0|                    ;
 5355|      0|                }
 5356|      0|while_break:
 5357|      0|                ;
 5358|      0|            }
 5359|      0|        }
 5360|      0|        return;
 5361|      0|    }
 5362|      0|}
 5363|       |#pragma weak pthread_mutex_init
 5364|       |#pragma weak pthread_mutex_lock
 5365|       |#pragma weak pthread_mutex_unlock
 5366|       |#pragma weak pthread_mutex_destroy
 5367|       |#pragma weak pthread_rwlock_init
 5368|       |#pragma weak pthread_rwlock_rdlock
 5369|       |#pragma weak pthread_rwlock_wrlock
 5370|       |#pragma weak pthread_rwlock_unlock
 5371|       |#pragma weak pthread_rwlock_destroy
 5372|       |#pragma weak pthread_once
 5373|       |#pragma weak pthread_cond_init
 5374|       |#pragma weak pthread_cond_wait
 5375|       |#pragma weak pthread_cond_signal
 5376|       |#pragma weak pthread_cond_broadcast
 5377|       |#pragma weak pthread_cond_destroy
 5378|       |#pragma weak pthread_mutexattr_init
 5379|       |#pragma weak pthread_mutexattr_settype
 5380|       |#pragma weak pthread_mutexattr_destroy
 5381|       |#pragma weak pthread_self
 5382|       |#pragma weak pthread_cancel
 5383|       |extern int fclose(FILE *__stream);
 5384|       |extern __attribute__((__nothrow__)) FILE *fdopen(int __fd, char const *__modes);
 5385|       |extern int fscanf(FILE *__restrict __stream, char const *__restrict __format, ...);
 5386|       |extern int getc_unlocked(FILE *__stream);
 5387|       |extern int ungetc(int __c, FILE *__stream);
 5388|       |extern __attribute__((__nothrow__)) char *(__attribute__((__nonnull__(1, 2))) strcpy)(char *__restrict __dest,
 5389|       |        char const *__restrict __src);
 5390|       |extern __attribute__((__nothrow__)) char *(__attribute__((__nonnull__(1))) getenv)(char const *__name);
 5391|       |extern __attribute__((__nothrow__)) char *nl_langinfo(nl_item __item);
 5392|       |static char const *volatile charset_aliases;
 5393|       |static char const *get_charset_aliases(void)
 5394|      0|{
 5395|      0|    char const *cp;
 5396|      0|    char const *dir;
 5397|      0|    char const *base;
 5398|      0|    char *file_name___1;
 5399|      0|    size_t dir_len___0;
 5400|      0|    size_t tmp;
 5401|      0|    size_t base_len___0;
 5402|      0|    size_t tmp___0;
 5403|      0|    int add_slash;
 5404|      0|    int tmp___1;
 5405|      0|    int fd;
 5406|      0|    FILE *fp;
 5407|      0|    char *res_ptr;
 5408|      0|    size_t res_size;
 5409|      0|    int c;
 5410|      0|    char buf1[51];
 5411|      0|    char buf2[51];
 5412|      0|    size_t l1;
 5413|      0|    size_t l2;
 5414|      0|    char *old_res_ptr;
 5415|      0|    int tmp___3;
 5416|      0|    void *__cil_tmp36;
 5417|      0|    void *__cil_tmp37;
 5418|      0|    char *__cil_tmp38;
 5419|      0|    char *__cil_tmp39;
 5420|      0|    char *__cil_tmp40;
 5421|      0|    char *__cil_tmp41;
 5422|      0|    char *__cil_tmp42;
 5423|      0|    char *__cil_tmp43;
 5424|      0|    char *__cil_tmp44;
 5425|      0|    char *__cil_tmp45;
 5426|       |
 5427|      0|    {
 5428|      0|        cp = (char const *)charset_aliases;
 5429|      0|        if ((unsigned long)cp == (unsigned long)((void *)0)) {
 5430|      0|            {
 5431|      0|                base = "charset.alias";
 5432|      0|                dir = (char const *)getenv("CHARSETALIASDIR");
 5433|      0|            }
 5434|      0|            if ((unsigned long)dir == (unsigned long)((void *)0)) {
 5435|      0|                dir = "/usr/local/lib";
 5436|      0|            }
 5437|      0|            else {
 5438|      0|                if ((int const) * (dir + 0) == 0) {
 5439|      0|                    dir = "/usr/local/lib";
 5440|      0|                }
 5441|      0|            }
 5442|      0|            {
 5443|      0|                tmp = strlen(dir);
 5444|      0|                dir_len___0 = tmp;
 5445|      0|                tmp___0 = strlen(base);
 5446|      0|                base_len___0 = tmp___0;
 5447|      0|            }
 5448|      0|            if (dir_len___0 > 0UL) {
 5449|      0|                if (!((int const) * (dir + (dir_len___0 - 1UL)) == 47)) {
 5450|      0|                    tmp___1 = 1;
 5451|      0|                }
 5452|      0|                else {
 5453|      0|                    tmp___1 = 0;
 5454|      0|                }
 5455|      0|            }
 5456|      0|            else {
 5457|      0|                tmp___1 = 0;
 5458|      0|            }
 5459|      0|            {
 5460|      0|                add_slash = tmp___1;
 5461|      0|                file_name___1 = (char *)malloc(((dir_len___0 + (size_t)add_slash) + base_len___0) + 1UL);
 5462|      0|            }
 5463|      0|            if ((unsigned long)file_name___1 != (unsigned long)((void *)0)) {
 5464|      0|                {
 5465|      0|                    memcpy((void * /* __restrict  */)((void *)file_name___1), (void const * /* __restrict  */)((void const *)dir),
 5466|      0|                           dir_len___0);
 5467|      0|                }
 5468|      0|                if (add_slash) {
 5469|      0|                    *(file_name___1 + dir_len___0) = (char)'/';
 5470|      0|                }
 5471|      0|                {
 5472|      0|                    memcpy((void * /* __restrict  */)((void *)((file_name___1 + dir_len___0) + add_slash)),
 5473|      0|                           (void const * /* __restrict  */)((void const *)base), base_len___0 + 1UL);
 5474|      0|                }
 5475|      0|            }
 5476|      0|            if ((unsigned long)file_name___1 == (unsigned long)((void *)0)) {
 5477|      0|                cp = "";
 5478|      0|            }
 5479|      0|            else {
 5480|      0|                {
 5481|      0|                    fd = open((char const *)file_name___1, 131072);
 5482|      0|                }
 5483|      0|                if (fd < 0) {
 5484|      0|                    cp = "";
 5485|      0|                }
 5486|      0|                else {
 5487|      0|                    {
 5488|      0|                        fp = fdopen(fd, "r");
 5489|      0|                    }
 5490|      0|                    if ((unsigned long)fp == (unsigned long)((void *)0)) {
 5491|      0|                        {
 5492|      0|                            close(fd);
 5493|      0|                            cp = "";
 5494|      0|                        }
 5495|      0|                    }
 5496|      0|                    else {
 5497|      0|                        res_ptr = (char *)((void *)0);
 5498|      0|                        res_size = (size_t)0;
 5499|      0|                        {
 5500|      0|                            while (1) {
 5501|      0|while_continue: /* CIL Label */
 5502|      0|                                ;
 5503|      0|                                {
 5504|      0|                                    c = getc_unlocked(fp);
 5505|      0|                                }
 5506|      0|                                if (c == -1) {
 5507|      0|                                    goto while_break;
 5508|      0|                                }
 5509|      0|                                if (c == 10) {
 5510|      0|                                    goto __Cont;
 5511|      0|                                }
 5512|      0|                                else {
 5513|      0|                                    if (c == 32) {
 5514|      0|                                        goto __Cont;
 5515|      0|                                    }
 5516|      0|                                    else {
 5517|      0|                                        if (c == 9) {
 5518|      0|                                            goto __Cont;
 5519|      0|                                        }
 5520|      0|                                    }
 5521|      0|                                }
 5522|      0|                                if (c == 35) {
 5523|      0|                                    {
 5524|      0|                                        while (1) {
 5525|      0|while_continue___0: /* CIL Label */
 5526|      0|                                            ;
 5527|      0|                                            {
 5528|      0|                                                c = getc_unlocked(fp);
 5529|      0|                                            }
 5530|      0|                                            if (c == -1) {
 5531|      0|                                                goto while_break___0;
 5532|      0|                                            }
 5533|      0|                                            else {
 5534|      0|                                                if (c == 10) {
 5535|      0|                                                    goto while_break___0;
 5536|      0|                                                }
 5537|      0|                                            }
 5538|      0|                                        }
 5539|      0|while_break___2: /* CIL Label */
 5540|      0|                                        ;
 5541|      0|                                    }
 5542|      0|while_break___0:
 5543|      0|                                    ;
 5544|      0|                                    if (c == -1) {
 5545|      0|                                        goto while_break;
 5546|      0|                                    }
 5547|      0|                                    goto __Cont;
 5548|      0|                                }
 5549|      0|                                {
 5550|      0|                                    ungetc(c, fp);
 5551|      0|                                    tmp___3 = fscanf((FILE * /* __restrict  */) fp, (char const * /* __restrict  */) "%50s %50s",
 5552|      0|                                                     buf1, buf2);
 5553|      0|                                }
 5554|      0|                                if (tmp___3 < 2) {
 5555|      0|                                    goto while_break;
 5556|      0|                                }
 5557|      0|                                {
 5558|      0|                                    l1 = strlen((char const *)(buf1));
 5559|      0|                                    l2 = strlen((char const *)(buf2));
 5560|      0|                                    old_res_ptr = res_ptr;
 5561|      0|                                }
 5562|      0|                                if (res_size == 0UL) {
 5563|      0|                                    {
 5564|      0|                                        res_size = ((l1 + 1UL) + l2) + 1UL;
 5565|      0|                                        res_ptr = (char *)malloc(res_size + 1UL);
 5566|      0|                                    }
 5567|      0|                                }
 5568|      0|                                else {
 5569|      0|                                    {
 5570|      0|                                        res_size += ((l1 + 1UL) + l2) + 1UL;
 5571|      0|                                        res_ptr = (char *)realloc((void *)res_ptr, res_size + 1UL);
 5572|      0|                                    }
 5573|      0|                                }
 5574|      0|                                if ((unsigned long)res_ptr == (unsigned long)((void *)0)) {
 5575|      0|                                    {
 5576|      0|                                        res_size = (size_t)0;
 5577|      0|                                        free((void *)old_res_ptr);
 5578|      0|                                    }
 5579|      0|                                    goto while_break;
 5580|      0|                                }
 5581|      0|                                {
 5582|      0|                                    strcpy((char * /* __restrict  */)(((res_ptr + res_size) - (l2 + 1UL)) - (l1 + 1UL)),
 5583|      0|                                           (char const * /* __restrict  */)((char const *)(buf1)));
 5584|      0|                                    strcpy((char * /* __restrict  */)((res_ptr + res_size) - (l2 + 1UL)), (char const * /* __restrict  */)((char const *)(buf2)));
 5585|      0|                                }
 5586|      0|__Cont:
 5587|      0|                                ;
 5588|      0|                            }
 5589|      0|while_break___1: /* CIL Label */
 5590|      0|                            ;
 5591|      0|                        }
 5592|      0|while_break : {
 5593|      0|                            fclose(fp);
 5594|      0|                        }
 5595|      0|                        if (res_size == 0UL) {
 5596|      0|                            cp = "";
 5597|      0|                        }
 5598|      0|                        else {
 5599|      0|                            *(res_ptr + res_size) = (char)'\000';
 5600|      0|                            cp = (char const *)res_ptr;
 5601|      0|                        }
 5602|      0|                    }
 5603|      0|                }
 5604|      0|                {
 5605|      0|                    free((void *)file_name___1);
 5606|      0|                }
 5607|      0|            }
 5608|      0|            charset_aliases = (char const * /* volatile  */)cp;
 5609|      0|        }
 5610|      0|        return (cp);
 5611|      0|    }
 5612|      0|}
 5613|       |char const *locale_charset(void)
 5614|      0|{
 5615|      0|    char const *codeset;
 5616|      0|    char const *aliases;
 5617|      0|    size_t tmp;
 5618|      0|    size_t tmp___0;
 5619|      0|    size_t tmp___1;
 5620|      0|    int tmp___2;
 5621|      0|    char *__cil_tmp10;
 5622|      0|    char *__cil_tmp11;
 5623|       |
 5624|      0|    {
 5625|      0|        {
 5626|      0|            codeset = (char const *)nl_langinfo(14);
 5627|      0|        }
 5628|      0|        if ((unsigned long)codeset == (unsigned long)((void *)0)) {
 5629|      0|            codeset = "";
 5630|      0|        }
 5631|      0|        {
 5632|      0|            aliases = get_charset_aliases();
 5633|      0|        }
 5634|      0|        {
 5635|      0|            while (1) {
 5636|      0|while_continue: /* CIL Label */
 5637|      0|                ;
 5638|       |
 5639|      0|                if (!((int const) * aliases != 0)) {
 5640|      0|                    goto while_break;
 5641|      0|                }
 5642|      0|                {
 5643|      0|                    tmp___2 = strcmp(codeset, aliases);
 5644|      0|                }
 5645|      0|                if (tmp___2 == 0) {
 5646|      0|                    {
 5647|      0|                        tmp___1 = strlen(aliases);
 5648|      0|                        codeset = (aliases + tmp___1) + 1;
 5649|      0|                    }
 5650|      0|                    goto while_break;
 5651|      0|                }
 5652|      0|                else {
 5653|      0|                    if ((int const) * (aliases + 0) == 42) {
 5654|      0|                        if ((int const) * (aliases + 1) == 0) {
 5655|      0|                            {
 5656|      0|                                tmp___1 = strlen(aliases);
 5657|      0|                                codeset = (aliases + tmp___1) + 1;
 5658|      0|                            }
 5659|      0|                            goto while_break;
 5660|      0|                        }
 5661|      0|                    }
 5662|      0|                }
 5663|      0|                {
 5664|      0|                    tmp = strlen(aliases);
 5665|      0|                    aliases += tmp + 1UL;
 5666|      0|                    tmp___0 = strlen(aliases);
 5667|      0|                    aliases += tmp___0 + 1UL;
 5668|      0|                }
 5669|      0|            }
 5670|      0|while_break___0: /* CIL Label */
 5671|      0|            ;
 5672|      0|        }
 5673|      0|while_break:
 5674|      0|        ;
 5675|      0|        if ((int const) * (codeset + 0) == 0) {
 5676|      0|            codeset = "ASCII";
 5677|      0|        }
 5678|      0|        return (codeset);
 5679|      0|    }
 5680|      0|}
 5681|       |void i_ring_init(I_ring *ir, int default_val);
 5682|       |int i_ring_push(I_ring *ir, int val);
 5683|       |int i_ring_pop(I_ring *ir);
 5684|       |_Bool i_ring_empty(I_ring const *ir) __attribute__((__pure__));
 5685|       |void i_ring_init(I_ring *ir, int default_val)
 5686|      1|{
 5687|      1|    int i;
 5688|       |
 5689|      1|    {
 5690|      1|        ir->ir_empty = (_Bool)1;
 5691|      1|        ir->ir_front = 0U;
 5692|      1|        ir->ir_back = 0U;
 5693|      1|        i = 0;
 5694|      1|        {
 5695|      5|            while (1) {
 5696|      5|while_continue: /* CIL Label */
 5697|      5|                ;
 5698|       |
 5699|      5|                if (!(i < 4)) {
 5700|      1|                    goto while_break;
 5701|      1|                }
 5702|      4|                ir->ir_data[i] = default_val;
 5703|      4|                i++;
 5704|      4|            }
 5705|      0|while_break___0: /* CIL Label */
 5706|      0|            ;
 5707|      0|        }
 5708|      1|while_break:
 5709|      1|        ir->ir_default_val = default_val;
 5710|      1|        return;
 5711|      0|    }
 5712|      0|}
 5713|       |_Bool i_ring_empty(I_ring const *ir) __attribute__((__pure__));
 5714|       |_Bool i_ring_empty(I_ring const *ir)
 5715|      9|{
 5716|       |
 5717|      9|    {
 5718|      9|        return ((_Bool)ir->ir_empty);
 5719|      9|    }
 5720|      9|}
 5721|       |int i_ring_push(I_ring *ir, int val)
 5722|      3|{
 5723|      3|    unsigned int dest_idx;
 5724|      3|    int old_val;
 5725|       |
 5726|      3|    {
 5727|      3|        dest_idx = (ir->ir_front + (unsigned int)(!ir->ir_empty)) % 4U;
 5728|      3|        old_val = ir->ir_data[dest_idx];
 5729|      3|        ir->ir_data[dest_idx] = val;
 5730|      3|        ir->ir_front = dest_idx;
 5731|      3|        if (dest_idx == ir->ir_back) {
 5732|      2|            ir->ir_back = (ir->ir_back + (unsigned int)(!ir->ir_empty)) % 4U;
 5733|      2|        }
 5734|      3|        ir->ir_empty = (_Bool)0;
 5735|      3|        return (old_val);
 5736|      3|    }
 5737|      3|}
 5738|       |int i_ring_pop(I_ring *ir)
 5739|      3|{
 5740|      3|    int top_val;
 5741|      3|    _Bool tmp;
 5742|       |
 5743|      3|    {
 5744|      3|        {
 5745|      3|            tmp = i_ring_empty((I_ring const *)ir);
 5746|      3|        }
 5747|      3|        if (tmp) {
 5748|      0|            {
 5749|      0|                abort();
 5750|      0|            }
 5751|      0|        }
 5752|      3|        top_val = ir->ir_data[ir->ir_front];
 5753|      3|        ir->ir_data[ir->ir_front] = ir->ir_default_val;
 5754|      3|        if (ir->ir_front == ir->ir_back) {
 5755|      2|            ir->ir_empty = (_Bool)1;
 5756|      2|        }
 5757|      1|        else {
 5758|      1|            ir->ir_front = ((ir->ir_front + 4U) - 1U) % 4U;
 5759|      1|        }
 5760|      3|        return (top_val);
 5761|      3|    }
 5762|      3|}
 5763|       |void *hash_lookup(Hash_table const *table, void const *entry);
 5764|       |size_t hash_string(char const *string, size_t n_buckets) __attribute__((__pure__));
 5765|       |Hash_table *(__attribute__((__warn_unused_result__)) hash_initialize)(size_t candidate,
 5766|       |        Hash_tuning const *tuning,
 5767|       |        size_t (*hasher)(void const *,
 5768|       |                         size_t),
 5769|       |        _Bool (*comparator)(void const *,
 5770|       |                            void const *),
 5771|       |        void (*data_freer)(void *));
 5772|       |void hash_free(Hash_table *table);
 5773|       |_Bool(__attribute__((__warn_unused_result__)) hash_rehash)(Hash_table *table, size_t candidate);
 5774|       |void *(__attribute__((__warn_unused_result__)) hash_insert)(Hash_table *table, void const *entry);
 5775|       |int hash_insert_if_absent(Hash_table *table, void const *entry, void const **matched_ent);
 5776|       |void *hash_delete(Hash_table *table, void const *entry);
 5777|       |size_t rotr_sz(size_t x, int n)
 5778|      0|{
 5779|       |
 5780|      0|    {
 5781|      0|        return (((x >> n) | (x << (8UL * sizeof(x) - (unsigned long)n))) & 0xffffffffffffffffUL);
 5782|      0|    }
 5783|      0|}
 5784|       |static struct hash_tuning const default_tuning = {0.0f, 1.0f, 0.8f, 1.414f, (_Bool)0};
 5785|       |static struct hash_entry *safe_hasher(Hash_table const *table, void const *key)
 5786|      4|{
 5787|      4|    size_t n;
 5788|      4|    size_t tmp;
 5789|       |
 5790|      4|    {
 5791|      4|        {
 5792|      4|            tmp = (*(table->hasher))(key, (size_t)table->n_buckets);
 5793|      4|            n = tmp;
 5794|      4|        }
 5795|      4|        if (!(n < (size_t)table->n_buckets)) {
 5796|      0|            {
 5797|      0|                abort();
 5798|      0|            }
 5799|      0|        }
 5800|      4|        return ((struct hash_entry *)(table->bucket + n));
 5801|      4|    }
 5802|      4|}
 5803|       |void *hash_lookup(Hash_table const *table, void const *entry)
 5804|      0|{
 5805|      0|    struct hash_entry const *bucket;
 5806|      0|    struct hash_entry const *tmp;
 5807|      0|    struct hash_entry const *cursor;
 5808|      0|    _Bool tmp___0;
 5809|       |
 5810|      0|    {
 5811|      0|        {
 5812|      0|            tmp = (struct hash_entry const *)safe_hasher(table, entry);
 5813|      0|            bucket = tmp;
 5814|      0|        }
 5815|      0|        if ((unsigned long)bucket->data == (unsigned long)((void *)0)) {
 5816|      0|            return ((void *)0);
 5817|      0|        }
 5818|      0|        cursor = bucket;
 5819|      0|        {
 5820|      0|            while (1) {
 5821|      0|while_continue: /* CIL Label */
 5822|      0|                ;
 5823|       |
 5824|      0|                if (!cursor) {
 5825|      0|                    goto while_break;
 5826|      0|                }
 5827|      0|                if ((unsigned long)entry == (unsigned long)cursor->data) {
 5828|      0|                    return ((void *)cursor->data);
 5829|      0|                }
 5830|      0|                else {
 5831|      0|                    {
 5832|      0|                        tmp___0 = (*(table->comparator))(entry, (void const *)cursor->data);
 5833|      0|                    }
 5834|      0|                    if (tmp___0) {
 5835|      0|                        return ((void *)cursor->data);
 5836|      0|                    }
 5837|      0|                }
 5838|      0|                cursor = (struct hash_entry const *)cursor->next;
 5839|      0|            }
 5840|      0|while_break___0: /* CIL Label */
 5841|      0|            ;
 5842|      0|        }
 5843|      0|while_break:
 5844|      0|        ;
 5845|      0|        return ((void *)0);
 5846|      0|    }
 5847|      0|}
 5848|       |size_t hash_string(char const *string, size_t n_buckets) __attribute__((__pure__));
 5849|       |size_t hash_string(char const *string, size_t n_buckets)
 5850|      0|{
 5851|      0|    size_t value;
 5852|      0|    unsigned char ch;
 5853|       |
 5854|      0|    {
 5855|      0|        value = (size_t)0;
 5856|      0|        {
 5857|      0|            while (1) {
 5858|      0|while_continue: /* CIL Label */
 5859|      0|                ;
 5860|      0|                ch = (unsigned char)*string;
 5861|      0|                if (!ch) {
 5862|      0|                    goto while_break;
 5863|      0|                }
 5864|      0|                value = (value * 31UL + (size_t)ch) % n_buckets;
 5865|      0|                string++;
 5866|      0|            }
 5867|      0|while_break___0: /* CIL Label */
 5868|      0|            ;
 5869|      0|        }
 5870|      0|while_break:
 5871|      0|        ;
 5872|      0|        return (value);
 5873|      0|    }
 5874|      0|}
 5875|       |static _Bool is_prime(size_t candidate) __attribute__((__const__));
 5876|       |static _Bool is_prime(size_t candidate) __attribute__((__const__));
 5877|       |static _Bool is_prime(size_t candidate)
 5878|      4|{
 5879|      4|    size_t divisor;
 5880|      4|    size_t square;
 5881|      4|    int tmp;
 5882|       |
 5883|      4|    {
 5884|      4|        divisor = (size_t)3;
 5885|      4|        square = divisor * divisor;
 5886|      4|        {
 5887|      8|            while (1) {
 5888|      8|while_continue: /* CIL Label */
 5889|      8|                ;
 5890|       |
 5891|      8|                if (square < candidate) {
 5892|      6|                    if (!(candidate % divisor)) {
 5893|      2|                        goto while_break;
 5894|      2|                    }
 5895|      6|                }
 5896|      2|                else {
 5897|      2|                    goto while_break;
 5898|      2|                }
 5899|      4|                divisor++;
 5900|      4|                square += 4UL * divisor;
 5901|      4|                divisor++;
 5902|      4|            }
 5903|      0|while_break___0: /* CIL Label */
 5904|      0|            ;
 5905|      0|        }
 5906|      4|while_break:
 5907|      4|        ;
 5908|      4|        if (candidate % divisor) {
 5909|      2|            tmp = 1;
 5910|      2|        }
 5911|      2|        else {
 5912|      2|            tmp = 0;
 5913|      2|        }
 5914|      4|        return ((_Bool)tmp);
 5915|      0|    }
 5916|      0|}
 5917|       |static size_t next_prime(size_t candidate) __attribute__((__const__));
 5918|       |static size_t next_prime(size_t candidate) __attribute__((__const__));
 5919|       |static size_t next_prime(size_t candidate)
 5920|      2|{
 5921|      2|    _Bool tmp;
 5922|       |
 5923|      2|    {
 5924|      2|        if (candidate < 10UL) {
 5925|      0|            candidate = (size_t)10;
 5926|      0|        }
 5927|      2|        candidate |= 1UL;
 5928|      2|        {
 5929|      4|            while (1) {
 5930|      4|while_continue: /* CIL Label */
 5931|      4|                ;
 5932|       |
 5933|      4|                if (0xffffffffffffffffUL != candidate) {
 5934|      4|                    {
 5935|      4|                        tmp = is_prime(candidate);
 5936|      4|                    }
 5937|      4|                    if (tmp) {
 5938|      2|                        goto while_break;
 5939|      2|                    }
 5940|      4|                }
 5941|      0|                else {
 5942|      0|                    goto while_break;
 5943|      0|                }
 5944|      2|                candidate += 2UL;
 5945|      2|            }
 5946|      0|while_break___0: /* CIL Label */
 5947|      0|            ;
 5948|      0|        }
 5949|      2|while_break:
 5950|      2|        ;
 5951|      2|        return (candidate);
 5952|      0|    }
 5953|      0|}
 5954|       |static size_t raw_hasher(void const *data, size_t n)
 5955|      0|{
 5956|      0|    size_t val;
 5957|      0|    size_t tmp;
 5958|       |
 5959|      0|    {
 5960|      0|        {
 5961|      0|            tmp = rotr_sz((size_t)data, 3);
 5962|      0|            val = tmp;
 5963|      0|        }
 5964|      0|        return (val % n);
 5965|      0|    }
 5966|      0|}
 5967|       |static _Bool raw_comparator(void const *a, void const *b)
 5968|      0|{
 5969|       |
 5970|      0|    {
 5971|      0|        return ((_Bool)((unsigned long)a == (unsigned long)b));
 5972|      0|    }
 5973|      0|}
 5974|       |static _Bool check_tuning(Hash_table *table)
 5975|      2|{
 5976|      2|    Hash_tuning const *tuning;
 5977|      2|    float epsilon;
 5978|       |
 5979|      2|    {
 5980|      2|        tuning = table->tuning;
 5981|      2|        if ((unsigned long)tuning == (unsigned long)(&default_tuning)) {
 5982|      2|            return ((_Bool)1);
 5983|      2|        }
 5984|      0|        epsilon = 0.1f;
 5985|      0|        if (epsilon < (float)tuning->growth_threshold) {
 5986|      0|            if (tuning->growth_threshold < (float const)((float)1 - epsilon)) {
 5987|      0|                if ((float)1 + epsilon < (float)tuning->growth_factor) {
 5988|      0|                    if ((float const)0 <= tuning->shrink_threshold) {
 5989|      0|                        if (tuning->shrink_threshold + (float const)epsilon < tuning->shrink_factor) {
 5990|      0|                            if (tuning->shrink_factor <= (float const)1) {
 5991|      0|                                if (tuning->shrink_threshold + (float const)epsilon < tuning->growth_threshold) {
 5992|      0|                                    return ((_Bool)1);
 5993|      0|                                }
 5994|      0|                            }
 5995|      0|                        }
 5996|      0|                    }
 5997|      0|                }
 5998|      0|            }
 5999|      0|        }
 6000|      0|        table->tuning = &default_tuning;
 6001|      0|        return ((_Bool)0);
 6002|      0|    }
 6003|      0|}
 6004|       |static size_t __attribute__((__pure__)) compute_bucket_size(size_t candidate, Hash_tuning const *tuning)
 6005|      2|{
 6006|      2|    float new_candidate;
 6007|      2|    int tmp;
 6008|       |
 6009|      2|    {
 6010|      2|        if (!tuning->is_n_buckets) {
 6011|      2|            new_candidate = (float)((float const)candidate / tuning->growth_threshold);
 6012|      2|            if ((float)0xffffffffffffffffUL <= new_candidate) {
 6013|      0|                return ((size_t __attribute__((__pure__)))0);
 6014|      0|            }
 6015|      2|            candidate = (size_t)new_candidate;
 6016|      2|        }
 6017|      2|        {
 6018|      2|            candidate = next_prime(candidate);
 6019|      2|        }
 6020|      2|        if (sizeof(ptrdiff_t) <= sizeof(size_t)) {
 6021|      2|            tmp = -1;
 6022|      2|        }
 6023|      0|        else {
 6024|      0|            tmp = -2;
 6025|      0|        }
 6026|      2|        if ((size_t)tmp / sizeof(struct hash_entry *) < candidate) {
 6027|      0|            return ((size_t __attribute__((__pure__)))0);
 6028|      0|        }
 6029|      2|        return ((size_t __attribute__((__pure__)))candidate);
 6030|      2|    }
 6031|      2|}
 6032|       |Hash_table *(__attribute__((__warn_unused_result__)) hash_initialize)(size_t candidate,
 6033|       |        Hash_tuning const *tuning,
 6034|       |        size_t (*hasher)(void const *,
 6035|       |                         size_t),
 6036|       |        _Bool (*comparator)(void const *,
 6037|       |                            void const *),
 6038|       |        void (*data_freer)(void *))
 6039|      2|{
 6040|      2|    Hash_table *table;
 6041|      2|    _Bool tmp;
 6042|       |
 6043|      2|    {
 6044|      2|        if ((unsigned long)hasher == (unsigned long)((void *)0)) {
 6045|      0|            hasher = &raw_hasher;
 6046|      0|        }
 6047|      2|        if ((unsigned long)comparator == (unsigned long)((void *)0)) {
 6048|      0|            comparator = &raw_comparator;
 6049|      0|        }
 6050|      2|        {
 6051|      2|            table = (Hash_table *)malloc(sizeof(*table));
 6052|      2|        }
 6053|      2|        if ((unsigned long)table == (unsigned long)((void *)0)) {
 6054|      0|            return ((Hash_table *)((void *)0));
 6055|      0|        }
 6056|      2|        if (!tuning) {
 6057|      2|            tuning = &default_tuning;
 6058|      2|        }
 6059|      2|        {
 6060|      2|            table->tuning = tuning;
 6061|      2|            tmp = check_tuning(table);
 6062|      2|        }
 6063|      2|        if (!tmp) {
 6064|      0|            goto fail;
 6065|      0|        }
 6066|      2|        {
 6067|      2|            table->n_buckets = (size_t)compute_bucket_size(candidate, tuning);
 6068|      2|        }
 6069|      2|        if (!table->n_buckets) {
 6070|      0|            goto fail;
 6071|      0|        }
 6072|      2|        {
 6073|      2|            table->bucket = (struct hash_entry *)calloc(table->n_buckets, sizeof(*(table->bucket)));
 6074|      2|        }
 6075|      2|        if ((unsigned long)table->bucket == (unsigned long)((void *)0)) {
 6076|      0|            goto fail;
 6077|      0|        }
 6078|      2|        table->bucket_limit = (struct hash_entry const *)(table->bucket + table->n_buckets);
 6079|      2|        table->n_buckets_used = (size_t)0;
 6080|      2|        table->n_entries = (size_t)0;
 6081|      2|        table->hasher = hasher;
 6082|      2|        table->comparator = comparator;
 6083|      2|        table->data_freer = data_freer;
 6084|      2|        table->free_entry_list = (struct hash_entry *)((void *)0);
 6085|      2|        return (table);
 6086|      0|fail : {
 6087|      0|            free((void *)table);
 6088|      0|        }
 6089|      0|        return ((Hash_table *)((void *)0));
 6090|      2|    }
 6091|      2|}
 6092|       |void hash_free(Hash_table *table)
 6093|      2|{
 6094|      2|    struct hash_entry *bucket;
 6095|      2|    struct hash_entry *cursor;
 6096|      2|    struct hash_entry *next;
 6097|       |
 6098|      2|    {
 6099|      2|        if (table->data_freer) {
 6100|      2|            if (table->n_entries) {
 6101|      0|                bucket = table->bucket;
 6102|      0|                {
 6103|      0|                    while (1) {
 6104|      0|while_continue: /* CIL Label */
 6105|      0|                        ;
 6106|       |
 6107|      0|                        if (!((unsigned long)bucket < (unsigned long)table->bucket_limit)) {
 6108|      0|                            goto while_break;
 6109|      0|                        }
 6110|      0|                        if (bucket->data) {
 6111|      0|                            cursor = bucket;
 6112|      0|                            {
 6113|      0|                                while (1) {
 6114|      0|while_continue___0: /* CIL Label */
 6115|      0|                                    ;
 6116|       |
 6117|      0|                                    if (!cursor) {
 6118|      0|                                        goto while_break___0;
 6119|      0|                                    }
 6120|      0|                                    {
 6121|      0|                                        (*(table->data_freer))(cursor->data);
 6122|      0|                                        cursor = cursor->next;
 6123|      0|                                    }
 6124|      0|                                }
 6125|      0|while_break___5: /* CIL Label */
 6126|      0|                                ;
 6127|      0|                            }
 6128|      0|while_break___0:
 6129|      0|                            ;
 6130|      0|                        }
 6131|      0|                        bucket++;
 6132|      0|                    }
 6133|      0|while_break___4: /* CIL Label */
 6134|      0|                    ;
 6135|      0|                }
 6136|      0|while_break:
 6137|      0|                ;
 6138|      0|            }
 6139|      2|        }
 6140|      2|        bucket = table->bucket;
 6141|      2|        {
 6142|     84|            while (1) {
 6143|     84|while_continue___1: /* CIL Label */
 6144|     84|                ;
 6145|       |
 6146|     84|                if (!((unsigned long)bucket < (unsigned long)table->bucket_limit)) {
 6147|      2|                    goto while_break___1;
 6148|      2|                }
 6149|     82|                cursor = bucket->next;
 6150|     82|                {
 6151|     82|                    while (1) {
 6152|     82|while_continue___2: /* CIL Label */
 6153|     82|                        ;
 6154|       |
 6155|     82|                        if (!cursor) {
 6156|     82|                            goto while_break___2;
 6157|     82|                        }
 6158|      0|                        {
 6159|      0|                            next = cursor->next;
 6160|      0|                            free((void *)cursor);
 6161|      0|                            cursor = next;
 6162|      0|                        }
 6163|      0|                    }
 6164|      0|while_break___7: /* CIL Label */
 6165|      0|                    ;
 6166|      0|                }
 6167|     82|while_break___2:
 6168|     82|                bucket++;
 6169|     82|            }
 6170|      0|while_break___6: /* CIL Label */
 6171|      0|            ;
 6172|      0|        }
 6173|      2|while_break___1:
 6174|      2|        cursor = table->free_entry_list;
 6175|      2|        {
 6176|      2|            while (1) {
 6177|      2|while_continue___3: /* CIL Label */
 6178|      2|                ;
 6179|       |
 6180|      2|                if (!cursor) {
 6181|      2|                    goto while_break___3;
 6182|      2|                }
 6183|      0|                {
 6184|      0|                    next = cursor->next;
 6185|      0|                    free((void *)cursor);
 6186|      0|                    cursor = next;
 6187|      0|                }
 6188|      0|            }
 6189|      0|while_break___8: /* CIL Label */
 6190|      0|            ;
 6191|      0|        }
 6192|      2|while_break___3 : {
 6193|      2|            free((void *)table->bucket);
 6194|      2|            free((void *)table);
 6195|      2|        }
 6196|      2|        return;
 6197|      0|    }
 6198|      0|}
 6199|       |static struct hash_entry *allocate_entry(Hash_table *table)
 6200|      0|{
 6201|      0|    struct hash_entry *new;
 6202|       |
 6203|      0|    {
 6204|      0|        if (table->free_entry_list) {
 6205|      0|            new = table->free_entry_list;
 6206|      0|            table->free_entry_list = new->next;
 6207|      0|        }
 6208|      0|        else {
 6209|      0|            {
 6210|      0|                new = (struct hash_entry *)malloc(sizeof(*new));
 6211|      0|            }
 6212|      0|        }
 6213|      0|        return (new);
 6214|      0|    }
 6215|      0|}
 6216|       |static void free_entry(Hash_table *table, struct hash_entry *entry)
 6217|      0|{
 6218|       |
 6219|      0|    {
 6220|      0|        entry->data = (void *)0;
 6221|      0|        entry->next = table->free_entry_list;
 6222|      0|        table->free_entry_list = entry;
 6223|      0|        return;
 6224|      0|    }
 6225|      0|}
 6226|       |static void *hash_find_entry(Hash_table *table, void const *entry, struct hash_entry **bucket_head,
 6227|       |                             _Bool delete___0)
 6228|      4|{
 6229|      4|    struct hash_entry *bucket;
 6230|      4|    struct hash_entry *tmp;
 6231|      4|    struct hash_entry *cursor;
 6232|      4|    void *data;
 6233|      4|    struct hash_entry *next;
 6234|      4|    _Bool tmp___0;
 6235|      4|    void *data___0;
 6236|      4|    struct hash_entry *next___0;
 6237|      4|    _Bool tmp___1;
 6238|       |
 6239|      4|    {
 6240|      4|        {
 6241|      4|            tmp = safe_hasher((Hash_table const *)table, entry);
 6242|      4|            bucket = tmp;
 6243|      4|            *bucket_head = bucket;
 6244|      4|        }
 6245|      4|        if ((unsigned long)bucket->data == (unsigned long)((void *)0)) {
 6246|      2|            return ((void *)0);
 6247|      2|        }
 6248|      2|        if ((unsigned long)entry == (unsigned long)bucket->data) {
 6249|      0|            goto _L;
 6250|      0|        }
 6251|      2|        else {
 6252|      2|            {
 6253|      2|                tmp___0 = (*(table->comparator))(entry, (void const *)bucket->data);
 6254|      2|            }
 6255|      2|            if (tmp___0) {
 6256|      2|_L:
 6257|      2|                data = bucket->data;
 6258|      2|                if (delete___0) {
 6259|      2|                    if (bucket->next) {
 6260|      0|                        {
 6261|      0|                            next = bucket->next;
 6262|      0|                            *bucket = *next;
 6263|      0|                            free_entry(table, next);
 6264|      0|                        }
 6265|      0|                    }
 6266|      2|                    else {
 6267|      2|                        bucket->data = (void *)0;
 6268|      2|                    }
 6269|      2|                }
 6270|      2|                return (data);
 6271|      2|            }
 6272|      2|        }
 6273|      0|        cursor = bucket;
 6274|      0|        {
 6275|      0|            while (1) {
 6276|      0|while_continue: /* CIL Label */
 6277|      0|                ;
 6278|       |
 6279|      0|                if (!cursor->next) {
 6280|      0|                    goto while_break;
 6281|      0|                }
 6282|      0|                if ((unsigned long)entry == (unsigned long)(cursor->next)->data) {
 6283|      0|                    goto _L___0;
 6284|      0|                }
 6285|      0|                else {
 6286|      0|                    {
 6287|      0|                        tmp___1 = (*(table->comparator))(entry, (void const *)(cursor->next)->data);
 6288|      0|                    }
 6289|      0|                    if (tmp___1) {
 6290|      0|_L___0:
 6291|      0|                        data___0 = (cursor->next)->data;
 6292|      0|                        if (delete___0) {
 6293|      0|                            {
 6294|      0|                                next___0 = cursor->next;
 6295|      0|                                cursor->next = next___0->next;
 6296|      0|                                free_entry(table, next___0);
 6297|      0|                            }
 6298|      0|                        }
 6299|      0|                        return (data___0);
 6300|      0|                    }
 6301|      0|                }
 6302|      0|                cursor = cursor->next;
 6303|      0|            }
 6304|      0|while_break___0: /* CIL Label */
 6305|      0|            ;
 6306|      0|        }
 6307|      0|while_break:
 6308|      0|        ;
 6309|      0|        return ((void *)0);
 6310|      0|    }
 6311|      0|}
 6312|       |static _Bool transfer_entries(Hash_table *dst, Hash_table *src, _Bool safe)
 6313|      0|{
 6314|      0|    struct hash_entry *bucket;
 6315|      0|    struct hash_entry *cursor;
 6316|      0|    struct hash_entry *next;
 6317|      0|    void *data;
 6318|      0|    struct hash_entry *new_bucket;
 6319|      0|    struct hash_entry *new_entry;
 6320|      0|    struct hash_entry *tmp;
 6321|       |
 6322|      0|    {
 6323|      0|        bucket = src->bucket;
 6324|      0|        {
 6325|      0|            while (1) {
 6326|      0|while_continue: /* CIL Label */
 6327|      0|                ;
 6328|       |
 6329|      0|                if (!((unsigned long)bucket < (unsigned long)src->bucket_limit)) {
 6330|      0|                    goto while_break;
 6331|      0|                }
 6332|      0|                if (bucket->data) {
 6333|      0|                    cursor = bucket->next;
 6334|      0|                    {
 6335|      0|                        while (1) {
 6336|      0|while_continue___0: /* CIL Label */
 6337|      0|                            ;
 6338|       |
 6339|      0|                            if (!cursor) {
 6340|      0|                                goto while_break___0;
 6341|      0|                            }
 6342|      0|                            {
 6343|      0|                                data = cursor->data;
 6344|      0|                                new_bucket = safe_hasher((Hash_table const *)dst, (void const *)data);
 6345|      0|                                next = cursor->next;
 6346|      0|                            }
 6347|      0|                            if (new_bucket->data) {
 6348|      0|                                cursor->next = new_bucket->next;
 6349|      0|                                new_bucket->next = cursor;
 6350|      0|                            }
 6351|      0|                            else {
 6352|      0|                                {
 6353|      0|                                    new_bucket->data = data;
 6354|      0|                                    (dst->n_buckets_used)++;
 6355|      0|                                    free_entry(dst, cursor);
 6356|      0|                                }
 6357|      0|                            }
 6358|      0|                            cursor = next;
 6359|      0|                        }
 6360|      0|while_break___2: /* CIL Label */
 6361|      0|                        ;
 6362|      0|                    }
 6363|      0|while_break___0:
 6364|      0|                    data = bucket->data;
 6365|      0|                    bucket->next = (struct hash_entry *)((void *)0);
 6366|      0|                    if (safe) {
 6367|      0|                        goto __Cont;
 6368|      0|                    }
 6369|      0|                    {
 6370|      0|                        new_bucket = safe_hasher((Hash_table const *)dst, (void const *)data);
 6371|      0|                    }
 6372|      0|                    if (new_bucket->data) {
 6373|      0|                        {
 6374|      0|                            tmp = allocate_entry(dst);
 6375|      0|                            new_entry = tmp;
 6376|      0|                        }
 6377|      0|                        if ((unsigned long)new_entry == (unsigned long)((void *)0)) {
 6378|      0|                            return ((_Bool)0);
 6379|      0|                        }
 6380|      0|                        new_entry->data = data;
 6381|      0|                        new_entry->next = new_bucket->next;
 6382|      0|                        new_bucket->next = new_entry;
 6383|      0|                    }
 6384|      0|                    else {
 6385|      0|                        new_bucket->data = data;
 6386|      0|                        (dst->n_buckets_used)++;
 6387|      0|                    }
 6388|      0|                    bucket->data = (void *)0;
 6389|      0|                    (src->n_buckets_used)--;
 6390|      0|                }
 6391|      0|__Cont:
 6392|      0|                bucket++;
 6393|      0|            }
 6394|      0|while_break___1: /* CIL Label */
 6395|      0|            ;
 6396|      0|        }
 6397|      0|while_break:
 6398|      0|        ;
 6399|      0|        return ((_Bool)1);
 6400|      0|    }
 6401|      0|}
 6402|       |_Bool(__attribute__((__warn_unused_result__)) hash_rehash)(Hash_table *table, size_t candidate)
 6403|      0|{
 6404|      0|    Hash_table storage;
 6405|      0|    Hash_table *new_table;
 6406|      0|    size_t new_size;
 6407|      0|    size_t tmp;
 6408|      0|    _Bool tmp___0;
 6409|      0|    _Bool tmp___1;
 6410|      0|    _Bool tmp___2;
 6411|       |
 6412|      0|    {
 6413|      0|        {
 6414|      0|            tmp = (size_t)compute_bucket_size(candidate, table->tuning);
 6415|      0|            new_size = tmp;
 6416|      0|        }
 6417|      0|        if (!new_size) {
 6418|      0|            return ((_Bool)0);
 6419|      0|        }
 6420|      0|        if (new_size == table->n_buckets) {
 6421|      0|            return ((_Bool)1);
 6422|      0|        }
 6423|      0|        {
 6424|      0|            new_table = &storage;
 6425|      0|            new_table->bucket = (struct hash_entry *)calloc(new_size, sizeof(*(new_table->bucket)));
 6426|      0|        }
 6427|      0|        if ((unsigned long)new_table->bucket == (unsigned long)((void *)0)) {
 6428|      0|            return ((_Bool)0);
 6429|      0|        }
 6430|      0|        {
 6431|      0|            new_table->n_buckets = new_size;
 6432|      0|            new_table->bucket_limit = (struct hash_entry const *)(new_table->bucket + new_size);
 6433|      0|            new_table->n_buckets_used = (size_t)0;
 6434|      0|            new_table->n_entries = (size_t)0;
 6435|      0|            new_table->tuning = table->tuning;
 6436|      0|            new_table->hasher = table->hasher;
 6437|      0|            new_table->comparator = table->comparator;
 6438|      0|            new_table->data_freer = table->data_freer;
 6439|      0|            new_table->free_entry_list = table->free_entry_list;
 6440|      0|            tmp___0 = transfer_entries(new_table, table, (_Bool)0);
 6441|      0|        }
 6442|      0|        if (tmp___0) {
 6443|      0|            {
 6444|      0|                free((void *)table->bucket);
 6445|      0|                table->bucket = new_table->bucket;
 6446|      0|                table->bucket_limit = new_table->bucket_limit;
 6447|      0|                table->n_buckets = new_table->n_buckets;
 6448|      0|                table->n_buckets_used = new_table->n_buckets_used;
 6449|      0|                table->free_entry_list = new_table->free_entry_list;
 6450|      0|            }
 6451|      0|            return ((_Bool)1);
 6452|      0|        }
 6453|      0|        {
 6454|      0|            table->free_entry_list = new_table->free_entry_list;
 6455|      0|            tmp___1 = transfer_entries(table, new_table, (_Bool)1);
 6456|      0|        }
 6457|      0|        if (tmp___1) {
 6458|      0|            {
 6459|      0|                tmp___2 = transfer_entries(table, new_table, (_Bool)0);
 6460|      0|            }
 6461|      0|            if (!tmp___2) {
 6462|      0|                {
 6463|      0|                    abort();
 6464|      0|                }
 6465|      0|            }
 6466|      0|        }
 6467|      0|        else {
 6468|      0|            {
 6469|      0|                abort();
 6470|      0|            }
 6471|      0|        }
 6472|      0|        {
 6473|      0|            free((void *)new_table->bucket);
 6474|      0|        }
 6475|      0|        return ((_Bool)0);
 6476|      0|    }
 6477|      0|}
 6478|       |int hash_insert_if_absent(Hash_table *table, void const *entry, void const **matched_ent)
 6479|      2|{
 6480|      2|    void *data;
 6481|      2|    struct hash_entry *bucket;
 6482|      2|    Hash_tuning const *tuning;
 6483|      2|    float candidate;
 6484|      2|    float tmp;
 6485|      2|    _Bool tmp___0;
 6486|      2|    void *tmp___1;
 6487|      2|    struct hash_entry *new_entry;
 6488|      2|    struct hash_entry *tmp___2;
 6489|       |
 6490|      2|    {
 6491|      2|        if (!entry) {
 6492|      0|            {
 6493|      0|                abort();
 6494|      0|            }
 6495|      0|        }
 6496|      2|        {
 6497|      2|            data = hash_find_entry(table, entry, &bucket, (_Bool)0);
 6498|      2|        }
 6499|      2|        if ((unsigned long)data != (unsigned long)((void *)0)) {
 6500|      0|            if (matched_ent) {
 6501|      0|                *matched_ent = (void const *)data;
 6502|      0|            }
 6503|      0|            return (0);
 6504|      0|        }
 6505|      2|        if ((float const)table->n_buckets_used > (table->tuning)->growth_threshold * (float const)table->n_buckets) {
 6506|      0|            {
 6507|      0|                check_tuning(table);
 6508|      0|            }
 6509|      0|            if ((float const)table->n_buckets_used > (table->tuning)->growth_threshold * (float const)table->n_buckets) {
 6510|      0|                tuning = table->tuning;
 6511|      0|                if (tuning->is_n_buckets) {
 6512|      0|                    tmp = (float)((float const)table->n_buckets * tuning->growth_factor);
 6513|      0|                }
 6514|      0|                else {
 6515|      0|                    tmp = (float)(((float const)table->n_buckets * tuning->growth_factor) * tuning->growth_threshold);
 6516|      0|                }
 6517|      0|                candidate = tmp;
 6518|      0|                if ((float)0xffffffffffffffffUL <= candidate) {
 6519|      0|                    return (-1);
 6520|      0|                }
 6521|      0|                {
 6522|      0|                    tmp___0 = hash_rehash(table, (size_t)candidate);
 6523|      0|                }
 6524|      0|                if (!tmp___0) {
 6525|      0|                    return (-1);
 6526|      0|                }
 6527|      0|                {
 6528|      0|                    tmp___1 = hash_find_entry(table, entry, &bucket, (_Bool)0);
 6529|      0|                }
 6530|      0|                if ((unsigned long)tmp___1 != (unsigned long)((void *)0)) {
 6531|      0|                    {
 6532|      0|                        abort();
 6533|      0|                    }
 6534|      0|                }
 6535|      0|            }
 6536|      0|        }
 6537|      2|        if (bucket->data) {
 6538|      0|            {
 6539|      0|                tmp___2 = allocate_entry(table);
 6540|      0|                new_entry = tmp___2;
 6541|      0|            }
 6542|      0|            if ((unsigned long)new_entry == (unsigned long)((void *)0)) {
 6543|      0|                return (-1);
 6544|      0|            }
 6545|      0|            new_entry->data = (void *)entry;
 6546|      0|            new_entry->next = bucket->next;
 6547|      0|            bucket->next = new_entry;
 6548|      0|            (table->n_entries)++;
 6549|      0|            return (1);
 6550|      0|        }
 6551|      2|        bucket->data = (void *)entry;
 6552|      2|        (table->n_entries)++;
 6553|      2|        (table->n_buckets_used)++;
 6554|      2|        return (1);
 6555|      2|    }
 6556|      2|}
 6557|       |void *(__attribute__((__warn_unused_result__)) hash_insert)(Hash_table *table, void const *entry)
 6558|      2|{
 6559|      2|    void const *matched_ent;
 6560|      2|    int err;
 6561|      2|    int tmp;
 6562|      2|    void const *tmp___0;
 6563|      2|    void *tmp___1;
 6564|       |
 6565|      2|    {
 6566|      2|        {
 6567|      2|            tmp = hash_insert_if_absent(table, entry, &matched_ent);
 6568|      2|            err = tmp;
 6569|      2|        }
 6570|      2|        if (err == -1) {
 6571|      0|            tmp___1 = (void *)0;
 6572|      0|        }
 6573|      2|        else {
 6574|      2|            if (err == 0) {
 6575|      0|                tmp___0 = matched_ent;
 6576|      0|            }
 6577|      2|            else {
 6578|      2|                tmp___0 = entry;
 6579|      2|            }
 6580|      2|            tmp___1 = (void *)tmp___0;
 6581|      2|        }
 6582|      2|        return (tmp___1);
 6583|      2|    }
 6584|      2|}
 6585|       |void *hash_delete(Hash_table *table, void const *entry)
 6586|      2|{
 6587|      2|    void *data;
 6588|      2|    struct hash_entry *bucket;
 6589|      2|    Hash_tuning const *tuning;
 6590|      2|    size_t candidate;
 6591|      2|    float tmp;
 6592|      2|    struct hash_entry *cursor;
 6593|      2|    struct hash_entry *next;
 6594|      2|    _Bool tmp___0;
 6595|       |
 6596|      2|    {
 6597|      2|        {
 6598|      2|            data = hash_find_entry(table, entry, &bucket, (_Bool)1);
 6599|      2|        }
 6600|      2|        if (!data) {
 6601|      0|            return ((void *)0);
 6602|      0|        }
 6603|      2|        (table->n_entries)--;
 6604|      2|        if (!bucket->data) {
 6605|      2|            (table->n_buckets_used)--;
 6606|      2|            if ((float const)table->n_buckets_used < (table->tuning)->shrink_threshold * (float const)table->n_buckets) {
 6607|      0|                {
 6608|      0|                    check_tuning(table);
 6609|      0|                }
 6610|      0|                if ((float const)table->n_buckets_used < (table->tuning)->shrink_threshold * (float const)table->n_buckets) {
 6611|      0|                    tuning = table->tuning;
 6612|      0|                    if (tuning->is_n_buckets) {
 6613|      0|                        tmp = (float)((float const)table->n_buckets * tuning->shrink_factor);
 6614|      0|                    }
 6615|      0|                    else {
 6616|      0|                        tmp = (float)(((float const)table->n_buckets * tuning->shrink_factor) * tuning->growth_threshold);
 6617|      0|                    }
 6618|      0|                    {
 6619|      0|                        candidate = (size_t)tmp;
 6620|      0|                        tmp___0 = hash_rehash(table, candidate);
 6621|      0|                    }
 6622|      0|                    if (!tmp___0) {
 6623|      0|                        cursor = table->free_entry_list;
 6624|      0|                        {
 6625|      0|                            while (1) {
 6626|      0|while_continue: /* CIL Label */
 6627|      0|                                ;
 6628|       |
 6629|      0|                                if (!cursor) {
 6630|      0|                                    goto while_break;
 6631|      0|                                }
 6632|      0|                                {
 6633|      0|                                    next = cursor->next;
 6634|      0|                                    free((void *)cursor);
 6635|      0|                                    cursor = next;
 6636|      0|                                }
 6637|      0|                            }
 6638|      0|while_break___0: /* CIL Label */
 6639|      0|                            ;
 6640|      0|                        }
 6641|      0|while_break:
 6642|      0|                        table->free_entry_list = (struct hash_entry *)((void *)0);
 6643|      0|                    }
 6644|      0|                }
 6645|      0|            }
 6646|      2|        }
 6647|      2|        return (data);
 6648|      2|    }
 6649|      2|}
 6650|       |extern struct dirent *(__attribute__((__nonnull__(1))) readdir)(DIR *__dirp);
 6651|       |extern __attribute__((__nothrow__)) int(__attribute__((__nonnull__(1, 2))) stat)(char const *__restrict __file,
 6652|       |        struct stat *__restrict __buf);
 6653|       |extern __attribute__((__nothrow__)) int(__attribute__((__nonnull__(2))) fstat)(int __fd,
 6654|       |        struct stat *__buf);
 6655|       |extern __attribute__((__nothrow__)) int(__attribute__((__nonnull__(2, 3))) fstatat)(int __fd,
 6656|       |        char const *__restrict __file,
 6657|       |        struct stat *__restrict __buf,
 6658|       |        int __flag);
 6659|       |extern __attribute__((__nothrow__)) int(__attribute__((__nonnull__(1, 2))) lstat)(char const *__restrict __file,
 6660|       |        struct stat *__restrict __buf);
 6661|       |__attribute__((__nothrow__)) int(__attribute__((__warn_unused_result__)) fts_close)(FTS *sp);
 6662|       |__attribute__((__nothrow__)) FTS *(__attribute__((__warn_unused_result__)) fts_open)(char *const *argv,
 6663|       |        int options,
 6664|       |        int (*compar)(FTSENT const **,
 6665|       |                      FTSENT const **));
 6666|       |__attribute__((__nothrow__)) FTSENT *(__attribute__((__warn_unused_result__)) fts_read)(FTS *sp);
 6667|       |__attribute__((__nothrow__)) int fts_set(FTS *sp __attribute__((__unused__)), FTSENT *p,
 6668|       |        int instr);
 6669|       |extern void(__attribute__((__nonnull__(1, 4))) qsort)(void *__base, size_t __nmemb,
 6670|       |        size_t __size, int (*__compar)(void const *, void const *));
 6671|       |static FTSENT *fts_alloc(FTS *sp, char const *name, size_t namelen);
 6672|       |static FTSENT *fts_build(FTS *sp, int type);
 6673|       |static void fts_lfree(FTSENT *head);
 6674|       |static void fts_load(FTS *sp, FTSENT *p);
 6675|       |static size_t __attribute__((__pure__)) fts_maxarglen(char *const *argv);
 6676|       |static void fts_padjust(FTS *sp, FTSENT *head);
 6677|       |static _Bool fts_palloc(FTS *sp, size_t more);
 6678|       |static FTSENT *fts_sort(FTS *sp, FTSENT *head, size_t nitems);
 6679|       |static unsigned short fts_stat(FTS *sp, FTSENT *p, _Bool follow);
 6680|       |static int fts_safe_changedir(FTS *sp, FTSENT *p, int fd, char const *dir);
 6681|       |void cycle_check_init(struct cycle_check_state *state);
 6682|       |_Bool cycle_check(struct cycle_check_state *state, struct stat const *sb);
 6683|       |static _Bool AD_compare(void const *x, void const *y)
 6684|      2|{
 6685|      2|    struct Active_dir const *ax;
 6686|      2|    struct Active_dir const *ay;
 6687|      2|    int tmp;
 6688|       |
 6689|      2|    {
 6690|      2|        ax = (struct Active_dir const *)x;
 6691|      2|        ay = (struct Active_dir const *)y;
 6692|      2|        if (ax->ino == ay->ino) {
 6693|      2|            if (ax->dev == ay->dev) {
 6694|      2|                tmp = 1;
 6695|      2|            }
 6696|      0|            else {
 6697|      0|                tmp = 0;
 6698|      0|            }
 6699|      2|        }
 6700|      0|        else {
 6701|      0|            tmp = 0;
 6702|      0|        }
 6703|      2|        return ((_Bool)tmp);
 6704|      2|    }
 6705|      2|}
 6706|       |static size_t AD_hash(void const *x, size_t table_size)
 6707|      4|{
 6708|      4|    struct Active_dir const *ax;
 6709|       |
 6710|      4|    {
 6711|      4|        ax = (struct Active_dir const *)x;
 6712|      4|        return ((uintmax_t)ax->ino % table_size);
 6713|      4|    }
 6714|      4|}
 6715|       |static _Bool setup_dir(FTS *fts)
 6716|      2|{
 6717|       |
 6718|      2|    {
 6719|      2|        if (fts->fts_options & 258) {
 6720|      2|            {
 6721|      2|                fts->fts_cycle.ht = hash_initialize((size_t)31, (Hash_tuning const *)((void *)0),
 6722|      2|                                                    &AD_hash, &AD_compare, &free);
 6723|      2|            }
 6724|      2|            if (!fts->fts_cycle.ht) {
 6725|      0|                return ((_Bool)0);
 6726|      0|            }
 6727|      2|        }
 6728|      0|        else {
 6729|      0|            {
 6730|      0|                fts->fts_cycle.state = (struct cycle_check_state *)malloc(sizeof(*(fts->fts_cycle.state)));
 6731|      0|            }
 6732|      0|            if (!fts->fts_cycle.state) {
 6733|      0|                return ((_Bool)0);
 6734|      0|            }
 6735|      0|            {
 6736|      0|                cycle_check_init(fts->fts_cycle.state);
 6737|      0|            }
 6738|      0|        }
 6739|      2|        return ((_Bool)1);
 6740|      2|    }
 6741|      2|}
 6742|       |static _Bool enter_dir(FTS *fts, FTSENT *ent)
 6743|      2|{
 6744|      2|    struct stat const *st;
 6745|      2|    struct Active_dir *ad;
 6746|      2|    struct Active_dir *tmp;
 6747|      2|    struct Active_dir *ad_from_table;
 6748|      2|    _Bool tmp___0;
 6749|       |
 6750|      2|    {
 6751|      2|        if (fts->fts_options & 258) {
 6752|      2|            {
 6753|      2|                st = (struct stat const *)(ent->fts_statp);
 6754|      2|                tmp = (struct Active_dir *)malloc(sizeof(*ad));
 6755|      2|                ad = tmp;
 6756|      2|            }
 6757|      2|            if (!ad) {
 6758|      0|                return ((_Bool)0);
 6759|      0|            }
 6760|      2|            {
 6761|      2|                ad->dev = (dev_t)st->st_dev;
 6762|      2|                ad->ino = (ino_t)st->st_ino;
 6763|      2|                ad->fts_ent = ent;
 6764|      2|                ad_from_table = (struct Active_dir *)hash_insert(fts->fts_cycle.ht, (void const *)ad);
 6765|      2|            }
 6766|      2|            if ((unsigned long)ad_from_table != (unsigned long)ad) {
 6767|      0|                {
 6768|      0|                    free((void *)ad);
 6769|      0|                }
 6770|      0|                if (!ad_from_table) {
 6771|      0|                    return ((_Bool)0);
 6772|      0|                }
 6773|      0|                ent->fts_cycle = ad_from_table->fts_ent;
 6774|      0|                ent->fts_info = (unsigned short)2;
 6775|      0|            }
 6776|      2|        }
 6777|      0|        else {
 6778|      0|            {
 6779|      0|                tmp___0 = cycle_check(fts->fts_cycle.state, (struct stat const *)(ent->fts_statp));
 6780|      0|            }
 6781|      0|            if (tmp___0) {
 6782|      0|                ent->fts_cycle = ent;
 6783|      0|                ent->fts_info = (unsigned short)2;
 6784|      0|            }
 6785|      0|        }
 6786|      2|        return ((_Bool)1);
 6787|      2|    }
 6788|      2|}
 6789|       |static void leave_dir(FTS *fts, FTSENT *ent)
 6790|      2|{
 6791|      2|    struct stat const *st;
 6792|      2|    struct Active_dir obj;
 6793|      2|    void *found;
 6794|      2|    FTSENT *parent;
 6795|       |
 6796|      2|    {
 6797|      2|        st = (struct stat const *)(ent->fts_statp);
 6798|      2|        if (fts->fts_options & 258) {
 6799|      2|            {
 6800|      2|                obj.dev = (dev_t)st->st_dev;
 6801|      2|                obj.ino = (ino_t)st->st_ino;
 6802|      2|                found = hash_delete(fts->fts_cycle.ht, (void const *)(&obj));
 6803|      2|            }
 6804|      2|            if (!found) {
 6805|      0|                {
 6806|      0|                    abort();
 6807|      0|                }
 6808|      0|            }
 6809|      2|            {
 6810|      2|                free(found);
 6811|      2|            }
 6812|      2|        }
 6813|      0|        else {
 6814|      0|            parent = ent->fts_parent;
 6815|      0|            if ((unsigned long)parent != (unsigned long)((void *)0)) {
 6816|      0|                if (0L <= parent->fts_level) {
 6817|      0|                    {
 6818|      0|                        while (1) {
 6819|      0|while_continue: /* CIL Label */
 6820|      0|                            ;
 6821|       |
 6822|      0|                            if ((fts->fts_cycle.state)->chdir_counter == 0UL) {
 6823|      0|                                {
 6824|      0|                                    abort();
 6825|      0|                                }
 6826|      0|                            }
 6827|      0|                            if ((fts->fts_cycle.state)->dev_ino.st_ino == (ino_t)st->st_ino) {
 6828|      0|                                if ((fts->fts_cycle.state)->dev_ino.st_dev == (dev_t)st->st_dev) {
 6829|      0|                                    (fts->fts_cycle.state)->dev_ino.st_dev = parent->fts_statp[0].st_dev;
 6830|      0|                                    (fts->fts_cycle.state)->dev_ino.st_ino = parent->fts_statp[0].st_ino;
 6831|      0|                                }
 6832|      0|                            }
 6833|      0|                            goto while_break;
 6834|      0|                        }
 6835|      0|while_break___0: /* CIL Label */
 6836|      0|                        ;
 6837|      0|                    }
 6838|      0|while_break:
 6839|      0|                    ;
 6840|      0|                }
 6841|      0|            }
 6842|      0|        }
 6843|      2|        return;
 6844|      2|    }
 6845|      2|}
 6846|       |static void free_dir(FTS *sp)
 6847|      2|{
 6848|       |
 6849|      2|    {
 6850|      2|        if (sp->fts_options & 258) {
 6851|      2|            if (sp->fts_cycle.ht) {
 6852|      2|                {
 6853|      2|                    hash_free(sp->fts_cycle.ht);
 6854|      2|                }
 6855|      2|            }
 6856|      2|        }
 6857|      0|        else {
 6858|      0|            {
 6859|      0|                free((void *)sp->fts_cycle.state);
 6860|      0|            }
 6861|      0|        }
 6862|      2|        return;
 6863|      2|    }
 6864|      2|}
 6865|       |static void fd_ring_clear(I_ring *fd_ring)
 6866|      3|{
 6867|      3|    int fd;
 6868|      3|    int tmp;
 6869|      3|    _Bool tmp___0;
 6870|       |
 6871|      3|    {
 6872|      3|        {
 6873|      6|            while (1) {
 6874|      6|while_continue: /* CIL Label */
 6875|      6|                ;
 6876|      6|                {
 6877|      6|                    tmp___0 = i_ring_empty((I_ring const *)fd_ring);
 6878|      6|                }
 6879|      6|                if (tmp___0) {
 6880|      3|                    goto while_break;
 6881|      3|                }
 6882|      3|                {
 6883|      3|                    tmp = i_ring_pop(fd_ring);
 6884|      3|                    fd = tmp;
 6885|      3|                }
 6886|      3|                if (0 <= fd) {
 6887|      1|                    {
 6888|      1|                        close(fd);
 6889|      1|                    }
 6890|      1|                }
 6891|      3|            }
 6892|      0|while_break___0: /* CIL Label */
 6893|      0|            ;
 6894|      0|        }
 6895|      3|while_break:
 6896|      3|        ;
 6897|      3|        return;
 6898|      0|    }
 6899|      0|}
 6900|       |static void fts_set_stat_required(FTSENT *p, _Bool required)
 6901|      3|{
 6902|       |
 6903|      3|    {
 6904|      3|        {
 6905|      3|            while (1) {
 6906|      3|while_continue: /* CIL Label */
 6907|      3|                ;
 6908|       |
 6909|      3|                if (!((int)p->fts_info == 11)) {
 6910|      0|                    {
 6911|      0|                        abort();
 6912|      0|                    }
 6913|      0|                }
 6914|      3|                goto while_break;
 6915|      3|            }
 6916|      0|while_break___0: /* CIL Label */
 6917|      0|            ;
 6918|      0|        }
 6919|      3|while_break:
 6920|      3|        ;
 6921|      3|        if (required) {
 6922|      0|            p->fts_statp[0].st_size = (__off_t)2;
 6923|      0|        }
 6924|      3|        else {
 6925|      3|            p->fts_statp[0].st_size = (__off_t)1;
 6926|      3|        }
 6927|      3|        return;
 6928|      0|    }
 6929|      0|}
 6930|       |static DIR *opendirat(int fd, char const *dir, int extra_flags, int *pdir_fd)
 6931|      1|{
 6932|      1|    int new_fd;
 6933|      1|    int tmp;
 6934|      1|    DIR *dirp;
 6935|      1|    int saved_errno;
 6936|      1|    int *tmp___0;
 6937|      1|    int *tmp___1;
 6938|       |
 6939|      1|    {
 6940|      1|        {
 6941|      1|            tmp = openat_safer(fd, dir, 67840 | extra_flags);
 6942|      1|            new_fd = tmp;
 6943|      1|        }
 6944|      1|        if (new_fd < 0) {
 6945|      0|            return ((DIR *)((void *)0));
 6946|      0|        }
 6947|      1|        {
 6948|      1|            set_cloexec_flag(new_fd, (_Bool)1);
 6949|      1|            dirp = fdopendir(new_fd);
 6950|      1|        }
 6951|      1|        if (dirp) {
 6952|      1|            *pdir_fd = new_fd;
 6953|      1|        }
 6954|      0|        else {
 6955|      0|            {
 6956|      0|                tmp___0 = __errno_location();
 6957|      0|                saved_errno = *tmp___0;
 6958|      0|                close(new_fd);
 6959|      0|                tmp___1 = __errno_location();
 6960|      0|                *tmp___1 = saved_errno;
 6961|      0|            }
 6962|      0|        }
 6963|      1|        return (dirp);
 6964|      1|    }
 6965|      1|}
 6966|       |static void cwd_advance_fd(FTS *sp, int fd, _Bool chdir_down_one)
 6967|      3|{
 6968|      3|    int old;
 6969|      3|    int prev_fd_in_slot;
 6970|      3|    int tmp;
 6971|       |
 6972|      3|    {
 6973|      3|        old = sp->fts_cwd_fd;
 6974|      3|        {
 6975|      3|            while (1) {
 6976|      3|while_continue: /* CIL Label */
 6977|      3|                ;
 6978|       |
 6979|      3|                if (!(old != fd)) {
 6980|      1|                    if (!(old == -100)) {
 6981|      0|                        {
 6982|      0|                            abort();
 6983|      0|                        }
 6984|      0|                    }
 6985|      1|                }
 6986|      3|                goto while_break;
 6987|      3|            }
 6988|      0|while_break___0: /* CIL Label */
 6989|      0|            ;
 6990|      0|        }
 6991|      3|while_break:
 6992|      3|        ;
 6993|      3|        if (chdir_down_one) {
 6994|      3|            {
 6995|      3|                tmp = i_ring_push(&sp->fts_fd_ring, old);
 6996|      3|                prev_fd_in_slot = tmp;
 6997|      3|            }
 6998|      3|            if (0 <= prev_fd_in_slot) {
 6999|      0|                {
 7000|      0|                    close(prev_fd_in_slot);
 7001|      0|                }
 7002|      0|            }
 7003|      3|        }
 7004|      0|        else {
 7005|      0|            if (!(sp->fts_options & 4)) {
 7006|      0|                if (0 <= old) {
 7007|      0|                    {
 7008|      0|                        close(old);
 7009|      0|                    }
 7010|      0|                }
 7011|      0|            }
 7012|      0|        }
 7013|      3|        sp->fts_cwd_fd = fd;
 7014|      3|        return;
 7015|      0|    }
 7016|      0|}
 7017|       |static int restore_initial_cwd(FTS *sp)
 7018|      2|{
 7019|      2|    int fail;
 7020|      2|    int tmp;
 7021|      2|    int tmp___0;
 7022|      2|    int tmp___1;
 7023|      2|    int tmp___2;
 7024|      2|    int tmp___3;
 7025|       |
 7026|      2|    {
 7027|      2|        if (!(sp->fts_options & 4)) {
 7028|      2|            if (sp->fts_options & 512) {
 7029|      2|                if (sp->fts_options & 512) {
 7030|      2|                    tmp = -100;
 7031|      2|                }
 7032|      0|                else {
 7033|      0|                    tmp = sp->fts_rfd;
 7034|      0|                }
 7035|      2|                {
 7036|      2|                    cwd_advance_fd(sp, tmp, (_Bool)1);
 7037|      2|                    tmp___2 = 0;
 7038|      2|                }
 7039|      2|            }
 7040|      0|            else {
 7041|      0|                if (sp->fts_options & 512) {
 7042|      0|                    tmp___0 = -100;
 7043|      0|                }
 7044|      0|                else {
 7045|      0|                    tmp___0 = sp->fts_rfd;
 7046|      0|                }
 7047|      0|                {
 7048|      0|                    tmp___1 = fchdir(tmp___0);
 7049|      0|                    tmp___2 = tmp___1;
 7050|      0|                }
 7051|      0|            }
 7052|      2|            if (tmp___2) {
 7053|      0|                tmp___3 = 1;
 7054|      0|            }
 7055|      2|            else {
 7056|      2|                tmp___3 = 0;
 7057|      2|            }
 7058|      2|        }
 7059|      0|        else {
 7060|      0|            tmp___3 = 0;
 7061|      0|        }
 7062|      2|        {
 7063|      2|            fail = tmp___3;
 7064|      2|            fd_ring_clear(&sp->fts_fd_ring);
 7065|      2|        }
 7066|      2|        return (fail);
 7067|      2|    }
 7068|      2|}
 7069|       |static int diropen(FTS const *sp, char const *dir)
 7070|      0|{
 7071|      0|    int open_flags;
 7072|      0|    int tmp;
 7073|      0|    int tmp___0;
 7074|      0|    int fd;
 7075|      0|    int tmp___1;
 7076|      0|    int tmp___2;
 7077|      0|    int tmp___3;
 7078|       |
 7079|      0|    {
 7080|      0|        if (sp->fts_options & 16) {
 7081|      0|            tmp = 131072;
 7082|      0|        }
 7083|      0|        else {
 7084|      0|            tmp = 0;
 7085|      0|        }
 7086|      0|        if (sp->fts_options & 2048) {
 7087|      0|            tmp___0 = 262144;
 7088|      0|        }
 7089|      0|        else {
 7090|      0|            tmp___0 = 0;
 7091|      0|        }
 7092|      0|        open_flags = (67840 | tmp) | tmp___0;
 7093|      0|        if (sp->fts_options & 512) {
 7094|      0|            {
 7095|      0|                tmp___1 = openat_safer((int)sp->fts_cwd_fd, dir, open_flags);
 7096|      0|                tmp___3 = tmp___1;
 7097|      0|            }
 7098|      0|        }
 7099|      0|        else {
 7100|      0|            {
 7101|      0|                tmp___2 = open_safer(dir, open_flags);
 7102|      0|                tmp___3 = tmp___2;
 7103|      0|            }
 7104|      0|        }
 7105|      0|        fd = tmp___3;
 7106|      0|        if (0 <= fd) {
 7107|      0|            {
 7108|      0|                set_cloexec_flag(fd, (_Bool)1);
 7109|      0|            }
 7110|      0|        }
 7111|      0|        return (fd);
 7112|      0|    }
 7113|      0|}
 7114|       |__attribute__((__nothrow__)) FTS *(__attribute__((__warn_unused_result__)) fts_open)(char *const *argv,
 7115|       |        int options,
 7116|       |        int (*compar)(FTSENT const **,
 7117|       |                      FTSENT const **));
 7118|       |FTS *(__attribute__((__warn_unused_result__)) fts_open)(char *const *argv, int options,
 7119|       |        int (*compar)(FTSENT const **,
 7120|       |                      FTSENT const **))
 7121|      1|{
 7122|      1|    register FTS *sp;
 7123|      1|    register FTSENT *p;
 7124|      1|    register FTSENT *root;
 7125|      1|    register size_t nitems;
 7126|      1|    FTSENT *parent;
 7127|      1|    FTSENT *tmp;
 7128|      1|    _Bool defer_stat;
 7129|      1|    int *tmp___0;
 7130|      1|    int *tmp___1;
 7131|      1|    int *tmp___2;
 7132|      1|    size_t maxarglen;
 7133|      1|    size_t tmp___5;
 7134|      1|    size_t tmp___6;
 7135|      1|    _Bool tmp___7;
 7136|      1|    int tmp___8;
 7137|      1|    size_t len;
 7138|      1|    size_t tmp___9;
 7139|      1|    char const *v;
 7140|      1|    struct _ftsent *tmp___10;
 7141|      1|    _Bool tmp___11;
 7142|      1|    int tmp___12;
 7143|      1|    void *__cil_tmp31;
 7144|      1|    char *__cil_tmp32;
 7145|      1|    char *__cil_tmp33;
 7146|      1|    char *__cil_tmp34;
 7147|       |
 7148|      1|    {
 7149|      1|        parent = (FTSENT *)((void *)0);
 7150|      1|        tmp = (FTSENT *)((void *)0);
 7151|      1|        if (options & -8192) {
 7152|      0|            {
 7153|      0|                tmp___0 = __errno_location();
 7154|      0|                *tmp___0 = 22;
 7155|      0|            }
 7156|      0|            return ((FTS *)((void *)0));
 7157|      0|        }
 7158|      1|        if (options & 4) {
 7159|      0|            if (options & 512) {
 7160|      0|                {
 7161|      0|                    tmp___1 = __errno_location();
 7162|      0|                    *tmp___1 = 22;
 7163|      0|                }
 7164|      0|                return ((FTS *)((void *)0));
 7165|      0|            }
 7166|      0|        }
 7167|      1|        if (!(options & 18)) {
 7168|      0|            {
 7169|      0|                tmp___2 = __errno_location();
 7170|      0|                *tmp___2 = 22;
 7171|      0|            }
 7172|      0|            return ((FTS *)((void *)0));
 7173|      0|        }
 7174|      1|        {
 7175|      1|            sp = (FTS *)malloc(sizeof(FTS));
 7176|      1|        }
 7177|      1|        if ((unsigned long)sp == (unsigned long)((void *)0)) {
 7178|      0|            return ((FTS *)((void *)0));
 7179|      0|        }
 7180|      1|        {
 7181|      1|            memset((void *)sp, 0, sizeof(FTS));
 7182|      1|            sp->fts_compar = compar;
 7183|      1|            sp->fts_options = options;
 7184|      1|        }
 7185|      1|        if (sp->fts_options & 2) {
 7186|      0|            sp->fts_options |= 4;
 7187|      0|            sp->fts_options &= -513;
 7188|      0|        }
 7189|      1|        {
 7190|      1|            sp->fts_cwd_fd = -100;
 7191|      1|            tmp___5 = (size_t)fts_maxarglen(argv);
 7192|      1|            maxarglen = tmp___5;
 7193|      1|        }
 7194|      1|        if (maxarglen > 4096UL) {
 7195|      0|            tmp___6 = maxarglen;
 7196|      0|        }
 7197|      1|        else {
 7198|      1|            tmp___6 = (size_t)4096;
 7199|      1|        }
 7200|      1|        {
 7201|      1|            tmp___7 = fts_palloc(sp, tmp___6);
 7202|      1|        }
 7203|      1|        if (!tmp___7) {
 7204|      0|            goto mem1;
 7205|      0|        }
 7206|      1|        if ((unsigned long)*argv != (unsigned long)((void *)0)) {
 7207|      1|            {
 7208|      1|                parent = fts_alloc(sp, "", (size_t)0);
 7209|      1|            }
 7210|      1|            if ((unsigned long)parent == (unsigned long)((void *)0)) {
 7211|      0|                goto mem2;
 7212|      0|            }
 7213|      1|            parent->fts_level = (ptrdiff_t)-1;
 7214|      1|        }
 7215|      1|        if ((unsigned long)compar == (unsigned long)((void *)0)) {
 7216|      1|            tmp___8 = 1;
 7217|      1|        }
 7218|      0|        else {
 7219|      0|            if (sp->fts_options & 1024) {
 7220|      0|                tmp___8 = 1;
 7221|      0|            }
 7222|      0|            else {
 7223|      0|                tmp___8 = 0;
 7224|      0|            }
 7225|      0|        }
 7226|      1|        defer_stat = (_Bool)tmp___8;
 7227|      1|        root = (FTSENT *)((void *)0);
 7228|      1|        nitems = (size_t)0;
 7229|      1|        {
 7230|      2|            while (1) {
 7231|      2|while_continue: /* CIL Label */
 7232|      2|                ;
 7233|       |
 7234|      2|                if (!((unsigned long)*argv != (unsigned long)((void *)0))) {
 7235|      1|                    goto while_break;
 7236|      1|                }
 7237|      1|                {
 7238|      1|                    tmp___9 = strlen((char const *)*argv);
 7239|      1|                    len = tmp___9;
 7240|      1|                }
 7241|      1|                if (!(options & 4096)) {
 7242|      1|                    v = (char const *)*argv;
 7243|      1|                    if (2UL < len) {
 7244|      1|                        if ((int const) * (v + (len - 1UL)) == 47) {
 7245|      0|                            {
 7246|      0|                                while (1) {
 7247|      0|while_continue___0: /* CIL Label */
 7248|      0|                                    ;
 7249|       |
 7250|      0|                                    if (1UL < len) {
 7251|      0|                                        if (!((int const) * (v + (len - 2UL)) == 47)) {
 7252|      0|                                            goto while_break___0;
 7253|      0|                                        }
 7254|      0|                                    }
 7255|      0|                                    else {
 7256|      0|                                        goto while_break___0;
 7257|      0|                                    }
 7258|      0|                                    len--;
 7259|      0|                                }
 7260|      0|while_break___2: /* CIL Label */
 7261|      0|                                ;
 7262|      0|                            }
 7263|      0|while_break___0:
 7264|      0|                            ;
 7265|      0|                        }
 7266|      1|                    }
 7267|      1|                }
 7268|      1|                {
 7269|      1|                    p = fts_alloc(sp, (char const *)*argv, len);
 7270|      1|                }
 7271|      1|                if ((unsigned long)p == (unsigned long)((void *)0)) {
 7272|      0|                    goto mem3;
 7273|      0|                }
 7274|      1|                p->fts_level = (ptrdiff_t)0;
 7275|      1|                p->fts_parent = parent;
 7276|      1|                p->fts_accpath = p->fts_name;
 7277|      1|                if (defer_stat) {
 7278|      1|                    if ((unsigned long)root != (unsigned long)((void *)0)) {
 7279|      0|                        {
 7280|      0|                            p->fts_info = (unsigned short)11;
 7281|      0|                            fts_set_stat_required(p, (_Bool)1);
 7282|      0|                        }
 7283|      0|                    }
 7284|      1|                    else {
 7285|      1|                        {
 7286|      1|                            p->fts_info = fts_stat(sp, p, (_Bool)0);
 7287|      1|                        }
 7288|      1|                    }
 7289|      1|                }
 7290|      0|                else {
 7291|      0|                    {
 7292|      0|                        p->fts_info = fts_stat(sp, p, (_Bool)0);
 7293|      0|                    }
 7294|      0|                }
 7295|      1|                if (compar) {
 7296|      0|                    p->fts_link = root;
 7297|      0|                    root = p;
 7298|      0|                }
 7299|      1|                else {
 7300|      1|                    p->fts_link = (struct _ftsent *)((void *)0);
 7301|      1|                    if ((unsigned long)root == (unsigned long)((void *)0)) {
 7302|      1|                        root = p;
 7303|      1|                        tmp = root;
 7304|      1|                    }
 7305|      0|                    else {
 7306|      0|                        tmp->fts_link = p;
 7307|      0|                        tmp = p;
 7308|      0|                    }
 7309|      1|                }
 7310|      1|                argv++;
 7311|      1|                nitems++;
 7312|      1|            }
 7313|      0|while_break___1: /* CIL Label */
 7314|      0|            ;
 7315|      0|        }
 7316|      1|while_break:
 7317|      1|        ;
 7318|      1|        if (compar) {
 7319|      0|            if (nitems > 1UL) {
 7320|      0|                {
 7321|      0|                    root = fts_sort(sp, root, nitems);
 7322|      0|                }
 7323|      0|            }
 7324|      0|        }
 7325|      1|        {
 7326|      1|            tmp___10 = fts_alloc(sp, "", (size_t)0);
 7327|      1|            sp->fts_cur = tmp___10;
 7328|      1|        }
 7329|      1|        if ((unsigned long)tmp___10 == (unsigned long)((void *)0)) {
 7330|      0|            goto mem3;
 7331|      0|        }
 7332|      1|        {
 7333|      1|            (sp->fts_cur)->fts_link = root;
 7334|      1|            (sp->fts_cur)->fts_info = (unsigned short)9;
 7335|      1|            tmp___11 = setup_dir(sp);
 7336|      1|        }
 7337|      1|        if (!tmp___11) {
 7338|      0|            goto mem3;
 7339|      0|        }
 7340|      1|        if (!(sp->fts_options & 4)) {
 7341|      1|            if (!(sp->fts_options & 512)) {
 7342|      0|                {
 7343|      0|                    tmp___12 = diropen((FTS const *)sp, ".");
 7344|      0|                    sp->fts_rfd = tmp___12;
 7345|      0|                }
 7346|      0|                if (tmp___12 < 0) {
 7347|      0|                    sp->fts_options |= 4;
 7348|      0|                }
 7349|      0|            }
 7350|      1|        }
 7351|      1|        {
 7352|      1|            i_ring_init(&sp->fts_fd_ring, -1);
 7353|      1|        }
 7354|      1|        return (sp);
 7355|      0|mem3 : {
 7356|      0|            fts_lfree(root);
 7357|      0|            free((void *)parent);
 7358|      0|        }
 7359|      0|mem2 : {
 7360|      0|            free((void *)sp->fts_path);
 7361|      0|        }
 7362|      0|mem1 : {
 7363|      0|            free((void *)sp);
 7364|      0|        }
 7365|      0|        return ((FTS *)((void *)0));
 7366|      0|    }
 7367|      0|}
 7368|       |static void fts_load(FTS *sp, FTSENT *p)
 7369|      1|{
 7370|      1|    register size_t len;
 7371|      1|    register char *cp;
 7372|      1|    size_t tmp;
 7373|      1|    char *tmp___0;
 7374|       |
 7375|      1|    {
 7376|      1|        {
 7377|      1|            tmp = p->fts_namelen;
 7378|      1|            p->fts_pathlen = tmp;
 7379|      1|            len = tmp;
 7380|      1|            memmove((void *)sp->fts_path, (void const *)(p->fts_name), len + 1UL);
 7381|      1|            cp = strrchr((char const *)(p->fts_name), '/');
 7382|      1|        }
 7383|      1|        if (cp) {
 7384|      1|            if ((unsigned long)cp != (unsigned long)(p->fts_name)) {
 7385|      1|                {
 7386|      1|                    cp++;
 7387|      1|                    len = strlen((char const *)cp);
 7388|      1|                    memmove((void *)(p->fts_name), (void const *)cp, len + 1UL);
 7389|      1|                    p->fts_namelen = len;
 7390|      1|                }
 7391|      1|            }
 7392|      0|            else {
 7393|      0|                if (*(cp + 1)) {
 7394|      0|                    {
 7395|      0|                        cp++;
 7396|      0|                        len = strlen((char const *)cp);
 7397|      0|                        memmove((void *)(p->fts_name), (void const *)cp, len + 1UL);
 7398|      0|                        p->fts_namelen = len;
 7399|      0|                    }
 7400|      0|                }
 7401|      0|            }
 7402|      1|        }
 7403|      1|        tmp___0 = sp->fts_path;
 7404|      1|        p->fts_path = tmp___0;
 7405|      1|        p->fts_accpath = tmp___0;
 7406|      1|        return;
 7407|      1|    }
 7408|      1|}
 7409|       |__attribute__((__nothrow__)) int(__attribute__((__warn_unused_result__)) fts_close)(FTS *sp);
 7410|       |int(__attribute__((__warn_unused_result__)) fts_close)(FTS *sp)
 7411|      1|{
 7412|      1|    register FTSENT *freep;
 7413|      1|    register FTSENT *p;
 7414|      1|    int saved_errno;
 7415|      1|    int *tmp;
 7416|      1|    int tmp___0;
 7417|      1|    int *tmp___1;
 7418|      1|    int tmp___2;
 7419|      1|    int *tmp___3;
 7420|      1|    int tmp___4;
 7421|      1|    int *tmp___5;
 7422|       |
 7423|      1|    {
 7424|      1|        saved_errno = 0;
 7425|      1|        if (sp->fts_cur) {
 7426|      0|            p = sp->fts_cur;
 7427|      0|            {
 7428|      0|                while (1) {
 7429|      0|while_continue: /* CIL Label */
 7430|      0|                    ;
 7431|       |
 7432|      0|                    if (!(p->fts_level >= 0L)) {
 7433|      0|                        goto while_break;
 7434|      0|                    }
 7435|      0|                    freep = p;
 7436|      0|                    if ((unsigned long)p->fts_link != (unsigned long)((void *)0)) {
 7437|      0|                        p = p->fts_link;
 7438|      0|                    }
 7439|      0|                    else {
 7440|      0|                        p = p->fts_parent;
 7441|      0|                    }
 7442|      0|                    {
 7443|      0|                        free((void *)freep);
 7444|      0|                    }
 7445|      0|                }
 7446|      0|while_break___0: /* CIL Label */
 7447|      0|                ;
 7448|      0|            }
 7449|      0|while_break : {
 7450|      0|                free((void *)p);
 7451|      0|            }
 7452|      0|        }
 7453|      1|        if (sp->fts_child) {
 7454|      0|            {
 7455|      0|                fts_lfree(sp->fts_child);
 7456|      0|            }
 7457|      0|        }
 7458|      1|        {
 7459|      1|            free((void *)sp->fts_array);
 7460|      1|            free((void *)sp->fts_path);
 7461|      1|        }
 7462|      1|        if (sp->fts_options & 512) {
 7463|      1|            if (0 <= sp->fts_cwd_fd) {
 7464|      0|                {
 7465|      0|                    tmp___0 = close(sp->fts_cwd_fd);
 7466|      0|                }
 7467|      0|                if (tmp___0) {
 7468|      0|                    {
 7469|      0|                        tmp = __errno_location();
 7470|      0|                        saved_errno = *tmp;
 7471|      0|                    }
 7472|      0|                }
 7473|      0|            }
 7474|      1|        }
 7475|      0|        else {
 7476|      0|            if (!(sp->fts_options & 4)) {
 7477|      0|                {
 7478|      0|                    tmp___2 = fchdir(sp->fts_rfd);
 7479|      0|                }
 7480|      0|                if (tmp___2) {
 7481|      0|                    {
 7482|      0|                        tmp___1 = __errno_location();
 7483|      0|                        saved_errno = *tmp___1;
 7484|      0|                    }
 7485|      0|                }
 7486|      0|                {
 7487|      0|                    tmp___4 = close(sp->fts_rfd);
 7488|      0|                }
 7489|      0|                if (tmp___4) {
 7490|      0|                    if (saved_errno == 0) {
 7491|      0|                        {
 7492|      0|                            tmp___3 = __errno_location();
 7493|      0|                            saved_errno = *tmp___3;
 7494|      0|                        }
 7495|      0|                    }
 7496|      0|                }
 7497|      0|            }
 7498|      0|        }
 7499|      1|        {
 7500|      1|            fd_ring_clear(&sp->fts_fd_ring);
 7501|      1|        }
 7502|      1|        if (sp->fts_leaf_optimization_works_ht) {
 7503|      0|            {
 7504|      0|                hash_free(sp->fts_leaf_optimization_works_ht);
 7505|      0|            }
 7506|      0|        }
 7507|      1|        {
 7508|      1|            free_dir(sp);
 7509|      1|            free((void *)sp);
 7510|      1|        }
 7511|      1|        if (saved_errno) {
 7512|      0|            {
 7513|      0|                tmp___5 = __errno_location();
 7514|      0|                *tmp___5 = saved_errno;
 7515|      0|            }
 7516|      0|            return (-1);
 7517|      0|        }
 7518|      1|        return (0);
 7519|      1|    }
 7520|      1|}
 7521|       |extern __attribute__((__nothrow__)) int(__attribute__((__nonnull__(2))) fstatfs)(int __fildes,
 7522|       |        struct statfs *__buf);
 7523|       |static _Bool dirent_inode_sort_may_be_useful(int dir_fd)
 7524|      0|{
 7525|      0|    struct statfs fs_buf;
 7526|      0|    int tmp;
 7527|      0|    void *__cil_tmp6;
 7528|      0|    void *__cil_tmp7;
 7529|       |
 7530|      0|    {
 7531|      0|        {
 7532|      0|            tmp = fstatfs(dir_fd, &fs_buf);
 7533|      0|        }
 7534|      0|        if (tmp != 0) {
 7535|      0|            return ((_Bool)1);
 7536|      0|        }
 7537|      0|        if (fs_buf.f_type == 16914836L) {
 7538|      0|            goto case_16914836;
 7539|      0|        }
 7540|      0|        if (fs_buf.f_type == 26985L) {
 7541|      0|            goto case_16914836;
 7542|      0|        }
 7543|      0|        goto switch_default;
 7544|      0|case_16914836:
 7545|      0|        return ((_Bool)0);
 7546|      0|switch_default:
 7547|      0|        return ((_Bool)1);
 7548|       |
 7549|      0|        return ((_Bool)0);
 7550|      0|    }
 7551|      0|}
 7552|       |static _Bool leaf_optimization_applies(int dir_fd)
 7553|      0|{
 7554|      0|    struct statfs fs_buf;
 7555|      0|    int tmp;
 7556|      0|    void *__cil_tmp6;
 7557|      0|    void *__cil_tmp7;
 7558|       |
 7559|      0|    {
 7560|      0|        {
 7561|      0|            tmp = fstatfs(dir_fd, &fs_buf);
 7562|      0|        }
 7563|      0|        if (tmp != 0) {
 7564|      0|            return ((_Bool)0);
 7565|      0|        }
 7566|      0|        if (fs_buf.f_type == 1382369651L) {
 7567|      0|            goto case_1382369651;
 7568|      0|        }
 7569|      0|        goto switch_default;
 7570|      0|case_1382369651:
 7571|      0|        return ((_Bool)1);
 7572|      0|switch_default:
 7573|      0|        return ((_Bool)0);
 7574|       |
 7575|      0|        return ((_Bool)0);
 7576|      0|    }
 7577|      0|}
 7578|       |static size_t LCO_hash(void const *x, size_t table_size)
 7579|      0|{
 7580|      0|    struct LCO_ent const *ax;
 7581|       |
 7582|      0|    {
 7583|      0|        ax = (struct LCO_ent const *)x;
 7584|      0|        return ((uintmax_t)ax->st_dev % table_size);
 7585|      0|    }
 7586|      0|}
 7587|       |static _Bool LCO_compare(void const *x, void const *y)
 7588|      0|{
 7589|      0|    struct LCO_ent const *ax;
 7590|      0|    struct LCO_ent const *ay;
 7591|       |
 7592|      0|    {
 7593|      0|        ax = (struct LCO_ent const *)x;
 7594|      0|        ay = (struct LCO_ent const *)y;
 7595|      0|        return ((_Bool)(ax->st_dev == ay->st_dev));
 7596|      0|    }
 7597|      0|}
 7598|       |static _Bool link_count_optimize_ok(FTSENT const *p)
 7599|      0|{
 7600|      0|    FTS *sp;
 7601|      0|    Hash_table *h;
 7602|      0|    struct LCO_ent tmp;
 7603|      0|    struct LCO_ent *ent;
 7604|      0|    _Bool opt_ok;
 7605|      0|    struct LCO_ent *t2;
 7606|      0|    struct hash_table *tmp___0;
 7607|       |
 7608|      0|    {
 7609|      0|        sp = (FTS *)p->fts_fts;
 7610|      0|        h = sp->fts_leaf_optimization_works_ht;
 7611|      0|        if (!(sp->fts_options & 512)) {
 7612|      0|            return ((_Bool)0);
 7613|      0|        }
 7614|      0|        if ((unsigned long)h == (unsigned long)((void *)0)) {
 7615|      0|            {
 7616|      0|                tmp___0 = hash_initialize((size_t)13, (Hash_tuning const *)((void *)0), &LCO_hash,
 7617|      0|                                          &LCO_compare, &free);
 7618|      0|                sp->fts_leaf_optimization_works_ht = tmp___0;
 7619|      0|                h = tmp___0;
 7620|      0|            }
 7621|      0|            if ((unsigned long)h == (unsigned long)((void *)0)) {
 7622|      0|                return ((_Bool)0);
 7623|      0|            }
 7624|      0|        }
 7625|      0|        {
 7626|      0|            tmp.st_dev = (dev_t)p->fts_statp[0].st_dev;
 7627|      0|            ent = (struct LCO_ent *)hash_lookup((Hash_table const *)h, (void const *)(&tmp));
 7628|      0|        }
 7629|      0|        if (ent) {
 7630|      0|            return (ent->opt_ok);
 7631|      0|        }
 7632|      0|        {
 7633|      0|            t2 = (struct LCO_ent *)malloc(sizeof(*t2));
 7634|      0|        }
 7635|      0|        if ((unsigned long)t2 == (unsigned long)((void *)0)) {
 7636|      0|            return ((_Bool)0);
 7637|      0|        }
 7638|      0|        {
 7639|      0|            opt_ok = leaf_optimization_applies(sp->fts_cwd_fd);
 7640|      0|            t2->opt_ok = opt_ok;
 7641|      0|            t2->st_dev = (dev_t)p->fts_statp[0].st_dev;
 7642|      0|            ent = (struct LCO_ent *)hash_insert(h, (void const *)t2);
 7643|      0|        }
 7644|      0|        if ((unsigned long)ent == (unsigned long)((void *)0)) {
 7645|      0|            {
 7646|      0|                free((void *)t2);
 7647|      0|            }
 7648|      0|            return ((_Bool)0);
 7649|      0|        }
 7650|      0|        {
 7651|      0|            while (1) {
 7652|      0|while_continue: /* CIL Label */
 7653|      0|                ;
 7654|       |
 7655|      0|                if (!((unsigned long)ent == (unsigned long)t2)) {
 7656|      0|                    {
 7657|      0|                        abort();
 7658|      0|                    }
 7659|      0|                }
 7660|      0|                goto while_break;
 7661|      0|            }
 7662|      0|while_break___0: /* CIL Label */
 7663|      0|            ;
 7664|      0|        }
 7665|      0|while_break:
 7666|      0|        ;
 7667|      0|        return (opt_ok);
 7668|      0|    }
 7669|      0|}
 7670|       |__attribute__((__nothrow__)) FTSENT *(__attribute__((__warn_unused_result__)) fts_read)(FTS *sp);
 7671|       |FTSENT *(__attribute__((__warn_unused_result__)) fts_read)(FTS *sp)
 7672|      6|{
 7673|      6|    register FTSENT *p;
 7674|      6|    register FTSENT *tmp;
 7675|      6|    register unsigned short instr;
 7676|      6|    register char *t;
 7677|      6|    int *tmp___0;
 7678|      6|    int tmp___1;
 7679|      6|    int *tmp___2;
 7680|      6|    int tmp___3;
 7681|      6|    struct _ftsent *tmp___4;
 7682|      6|    int tmp___5;
 7683|      6|    int *tmp___6;
 7684|      6|    int tmp___7;
 7685|      6|    size_t tmp___8;
 7686|      6|    char *tmp___9;
 7687|      6|    FTSENT *parent;
 7688|      6|    _Bool tmp___10;
 7689|      6|    int *tmp___11;
 7690|      6|    _Bool tmp___12;
 7691|      6|    int *tmp___13;
 7692|      6|    struct _ftsent *tmp___14;
 7693|      6|    int *tmp___15;
 7694|      6|    int tmp___16;
 7695|      6|    int saved_errno;
 7696|      6|    int *tmp___17;
 7697|      6|    int *tmp___18;
 7698|      6|    int *tmp___19;
 7699|      6|    int tmp___20;
 7700|      6|    int tmp___21;
 7701|      6|    int *tmp___22;
 7702|      6|    int tmp___23;
 7703|      6|    FTSENT *tmp___24;
 7704|      6|    char *__cil_tmp36;
 7705|      6|    char *__cil_tmp37;
 7706|      6|    char *__cil_tmp38;
 7707|       |
 7708|      6|    {
 7709|      6|        if ((unsigned long)sp->fts_cur == (unsigned long)((void *)0)) {
 7710|      0|            return ((FTSENT *)((void *)0));
 7711|      0|        }
 7712|      6|        else {
 7713|      6|            if (sp->fts_options & 16384) {
 7714|      0|                return ((FTSENT *)((void *)0));
 7715|      0|            }
 7716|      6|        }
 7717|      6|        p = sp->fts_cur;
 7718|      6|        instr = p->fts_instr;
 7719|      6|        p->fts_instr = (unsigned short)3;
 7720|      6|        if ((int)instr == 1) {
 7721|      0|            {
 7722|      0|                p->fts_info = fts_stat(sp, p, (_Bool)0);
 7723|      0|            }
 7724|      0|            return (p);
 7725|      0|        }
 7726|      6|        if ((int)instr == 2) {
 7727|      0|            if ((int)p->fts_info == 12) {
 7728|      0|                goto _L;
 7729|      0|            }
 7730|      0|            else {
 7731|      0|                if ((int)p->fts_info == 13) {
 7732|      0|_L : {
 7733|      0|                        p->fts_info = fts_stat(sp, p, (_Bool)1);
 7734|      0|                    }
 7735|      0|                    if ((int)p->fts_info == 1) {
 7736|      0|                        if (!(sp->fts_options & 4)) {
 7737|      0|                            {
 7738|      0|                                tmp___1 = diropen((FTS const *)sp, ".");
 7739|      0|                                p->fts_symfd = tmp___1;
 7740|      0|                            }
 7741|      0|                            if (tmp___1 < 0) {
 7742|      0|                                {
 7743|      0|                                    tmp___0 = __errno_location();
 7744|      0|                                    p->fts_errno = *tmp___0;
 7745|      0|                                    p->fts_info = (unsigned short)7;
 7746|      0|                                }
 7747|      0|                            }
 7748|      0|                            else {
 7749|      0|                                p->fts_flags = (unsigned short)((int)p->fts_flags | 2);
 7750|      0|                            }
 7751|      0|                        }
 7752|      0|                    }
 7753|      0|                    goto check_for_dir;
 7754|      0|                }
 7755|      0|            }
 7756|      0|        }
 7757|      6|        if ((int)p->fts_info == 1) {
 7758|      1|            if ((int)instr == 4) {
 7759|      0|                goto _L___0;
 7760|      0|            }
 7761|      1|            else {
 7762|      1|                if (sp->fts_options & 64) {
 7763|      0|                    if (p->fts_statp[0].st_dev != sp->fts_dev) {
 7764|      0|_L___0:
 7765|      0|                        if ((int)p->fts_flags & 2) {
 7766|      0|                            {
 7767|      0|                                close(p->fts_symfd);
 7768|      0|                            }
 7769|      0|                        }
 7770|      0|                        if (sp->fts_child) {
 7771|      0|                            {
 7772|      0|                                fts_lfree(sp->fts_child);
 7773|      0|                                sp->fts_child = (struct _ftsent *)((void *)0);
 7774|      0|                            }
 7775|      0|                        }
 7776|      0|                        p->fts_info = (unsigned short)6;
 7777|      0|                        {
 7778|      0|                            while (1) {
 7779|      0|while_continue: /* CIL Label */
 7780|      0|                                ;
 7781|      0|                                {
 7782|      0|                                    leave_dir(sp, p);
 7783|      0|                                }
 7784|      0|                                goto while_break;
 7785|      0|                            }
 7786|      0|while_break___5: /* CIL Label */
 7787|      0|                            ;
 7788|      0|                        }
 7789|      0|while_break:
 7790|      0|                        ;
 7791|      0|                        return (p);
 7792|      0|                    }
 7793|      0|                }
 7794|      1|            }
 7795|      1|            if ((unsigned long)sp->fts_child != (unsigned long)((void *)0)) {
 7796|      0|                if (sp->fts_options & 8192) {
 7797|      0|                    {
 7798|      0|                        sp->fts_options &= -8193;
 7799|      0|                        fts_lfree(sp->fts_child);
 7800|      0|                        sp->fts_child = (struct _ftsent *)((void *)0);
 7801|      0|                    }
 7802|      0|                }
 7803|      0|            }
 7804|      1|            if ((unsigned long)sp->fts_child != (unsigned long)((void *)0)) {
 7805|      0|                {
 7806|      0|                    tmp___3 = fts_safe_changedir(sp, p, -1, (char const *)p->fts_accpath);
 7807|      0|                }
 7808|      0|                if (tmp___3) {
 7809|      0|                    {
 7810|      0|                        tmp___2 = __errno_location();
 7811|      0|                        p->fts_errno = *tmp___2;
 7812|      0|                        p->fts_flags = (unsigned short)((int)p->fts_flags | 1);
 7813|      0|                        p = sp->fts_child;
 7814|      0|                    }
 7815|      0|                    {
 7816|      0|                        while (1) {
 7817|      0|while_continue___0: /* CIL Label */
 7818|      0|                            ;
 7819|       |
 7820|      0|                            if (!((unsigned long)p != (unsigned long)((void *)0))) {
 7821|      0|                                goto while_break___0;
 7822|      0|                            }
 7823|      0|                            p->fts_accpath = (p->fts_parent)->fts_accpath;
 7824|      0|                            p = p->fts_link;
 7825|      0|                        }
 7826|      0|while_break___6: /* CIL Label */
 7827|      0|                        ;
 7828|      0|                    }
 7829|      0|while_break___0:
 7830|      0|                    ;
 7831|      0|                }
 7832|      0|            }
 7833|      1|            else {
 7834|      1|                {
 7835|      1|                    tmp___4 = fts_build(sp, 3);
 7836|      1|                    sp->fts_child = tmp___4;
 7837|      1|                }
 7838|      1|                if ((unsigned long)tmp___4 == (unsigned long)((void *)0)) {
 7839|      0|                    if (sp->fts_options & 16384) {
 7840|      0|                        return ((FTSENT *)((void *)0));
 7841|      0|                    }
 7842|      0|                    if (p->fts_errno) {
 7843|      0|                        if ((int)p->fts_info != 4) {
 7844|      0|                            p->fts_info = (unsigned short)7;
 7845|      0|                        }
 7846|      0|                    }
 7847|      0|                    {
 7848|      0|                        while (1) {
 7849|      0|while_continue___1: /* CIL Label */
 7850|      0|                            ;
 7851|      0|                            {
 7852|      0|                                leave_dir(sp, p);
 7853|      0|                            }
 7854|      0|                            goto while_break___1;
 7855|      0|                        }
 7856|      0|while_break___7: /* CIL Label */
 7857|      0|                        ;
 7858|      0|                    }
 7859|      0|while_break___1:
 7860|      0|                    ;
 7861|      0|                    return (p);
 7862|      0|                }
 7863|      1|            }
 7864|      1|            p = sp->fts_child;
 7865|      1|            sp->fts_child = (struct _ftsent *)((void *)0);
 7866|      1|            goto name;
 7867|      1|        }
 7868|      5|next:
 7869|      5|        tmp = p;
 7870|      5|        if ((unsigned long)p->fts_link == (unsigned long)((void *)0)) {
 7871|      2|            if ((p->fts_parent)->fts_dirp) {
 7872|      0|                {
 7873|      0|                    p = tmp->fts_parent;
 7874|      0|                    sp->fts_cur = p;
 7875|      0|                    *(sp->fts_path + p->fts_pathlen) = (char)'\000';
 7876|      0|                    p = fts_build(sp, 3);
 7877|      0|                }
 7878|      0|                if ((unsigned long)p == (unsigned long)((void *)0)) {
 7879|      0|                    if (sp->fts_options & 16384) {
 7880|      0|                        return ((FTSENT *)((void *)0));
 7881|      0|                    }
 7882|      0|                    goto cd_dot_dot;
 7883|      0|                }
 7884|      0|                {
 7885|      0|                    free((void *)tmp);
 7886|      0|                }
 7887|      0|                goto name;
 7888|      0|            }
 7889|      2|        }
 7890|      5|        p = p->fts_link;
 7891|      5|        if ((unsigned long)p != (unsigned long)((void *)0)) {
 7892|      3|            {
 7893|      3|                sp->fts_cur = p;
 7894|      3|                free((void *)tmp);
 7895|      3|            }
 7896|      3|            if (p->fts_level == 0L) {
 7897|      1|                {
 7898|      1|                    tmp___5 = restore_initial_cwd(sp);
 7899|      1|                }
 7900|      1|                if (tmp___5) {
 7901|      0|                    sp->fts_options |= 16384;
 7902|      0|                    return ((FTSENT *)((void *)0));
 7903|      0|                }
 7904|      1|                {
 7905|      1|                    free_dir(sp);
 7906|      1|                    fts_load(sp, p);
 7907|      1|                    setup_dir(sp);
 7908|      1|                }
 7909|      1|                goto check_for_dir;
 7910|      1|            }
 7911|      2|            if ((int)p->fts_instr == 4) {
 7912|      0|                goto next;
 7913|      0|            }
 7914|      2|            if ((int)p->fts_instr == 2) {
 7915|      0|                {
 7916|      0|                    p->fts_info = fts_stat(sp, p, (_Bool)1);
 7917|      0|                }
 7918|      0|                if ((int)p->fts_info == 1) {
 7919|      0|                    if (!(sp->fts_options & 4)) {
 7920|      0|                        {
 7921|      0|                            tmp___7 = diropen((FTS const *)sp, ".");
 7922|      0|                            p->fts_symfd = tmp___7;
 7923|      0|                        }
 7924|      0|                        if (tmp___7 < 0) {
 7925|      0|                            {
 7926|      0|                                tmp___6 = __errno_location();
 7927|      0|                                p->fts_errno = *tmp___6;
 7928|      0|                                p->fts_info = (unsigned short)7;
 7929|      0|                            }
 7930|      0|                        }
 7931|      0|                        else {
 7932|      0|                            p->fts_flags = (unsigned short)((int)p->fts_flags | 2);
 7933|      0|                        }
 7934|      0|                    }
 7935|      0|                }
 7936|      0|                p->fts_instr = (unsigned short)3;
 7937|      0|            }
 7938|      3|name:
 7939|      3|            if ((int)*((p->fts_parent)->fts_path + ((p->fts_parent)->fts_pathlen - 1UL)) == 47) {
 7940|      0|                tmp___8 = (p->fts_parent)->fts_pathlen - 1UL;
 7941|      0|            }
 7942|      3|            else {
 7943|      3|                tmp___8 = (p->fts_parent)->fts_pathlen;
 7944|      3|            }
 7945|      3|            {
 7946|      3|                t = sp->fts_path + tmp___8;
 7947|      3|                tmp___9 = t;
 7948|      3|                t++;
 7949|      3|                *tmp___9 = (char)'/';
 7950|      3|                memmove((void *)t, (void const *)(p->fts_name), p->fts_namelen + 1UL);
 7951|      3|            }
 7952|      4|check_for_dir:
 7953|      4|            sp->fts_cur = p;
 7954|      4|            if ((int)p->fts_info == 11) {
 7955|      3|                if (p->fts_statp[0].st_size == 2L) {
 7956|      0|                    parent = p->fts_parent;
 7957|      0|                    if (0L < p->fts_level) {
 7958|      0|                        if (parent->fts_n_dirs_remaining == 0UL) {
 7959|      0|                            if (sp->fts_options & 8) {
 7960|      0|                                if (sp->fts_options & 16) {
 7961|      0|                                    {
 7962|      0|                                        tmp___10 = link_count_optimize_ok((FTSENT const *)parent);
 7963|      0|                                    }
 7964|      0|                                    if (!tmp___10) {
 7965|      0|                                        goto _L___4;
 7966|      0|                                    }
 7967|      0|                                }
 7968|      0|                                else {
 7969|      0|                                    goto _L___4;
 7970|      0|                                }
 7971|      0|                            }
 7972|      0|                            else {
 7973|      0|                                goto _L___4;
 7974|      0|                            }
 7975|      0|                        }
 7976|      0|                        else {
 7977|      0|                            goto _L___4;
 7978|      0|                        }
 7979|      0|                    }
 7980|      0|                    else {
 7981|      0|_L___4 : {
 7982|      0|                            p->fts_info = fts_stat(sp, p, (_Bool)0);
 7983|      0|                        }
 7984|      0|                        if ((p->fts_statp[0].st_mode & 61440U) == 16384U) {
 7985|      0|                            if (p->fts_level != 0L) {
 7986|      0|                                if (parent->fts_n_dirs_remaining) {
 7987|      0|                                    (parent->fts_n_dirs_remaining)--;
 7988|      0|                                }
 7989|      0|                            }
 7990|      0|                        }
 7991|      0|                    }
 7992|      0|                }
 7993|      3|                else {
 7994|      3|                    {
 7995|      3|                        while (1) {
 7996|      3|while_continue___2: /* CIL Label */
 7997|      3|                            ;
 7998|       |
 7999|      3|                            if (!(p->fts_statp[0].st_size == 1L)) {
 8000|      0|                                {
 8001|      0|                                    abort();
 8002|      0|                                }
 8003|      0|                            }
 8004|      3|                            goto while_break___2;
 8005|      3|                        }
 8006|      0|while_break___8: /* CIL Label */
 8007|      0|                        ;
 8008|      0|                    }
 8009|      3|while_break___2:
 8010|      3|                    ;
 8011|      3|                }
 8012|      3|            }
 8013|      4|            if ((int)p->fts_info == 1) {
 8014|      1|                if (p->fts_level == 0L) {
 8015|      1|                    sp->fts_dev = p->fts_statp[0].st_dev;
 8016|      1|                }
 8017|      1|                {
 8018|      1|                    tmp___12 = enter_dir(sp, p);
 8019|      1|                }
 8020|      1|                if (!tmp___12) {
 8021|      0|                    {
 8022|      0|                        tmp___11 = __errno_location();
 8023|      0|                        *tmp___11 = 12;
 8024|      0|                    }
 8025|      0|                    return ((FTSENT *)((void *)0));
 8026|      0|                }
 8027|      1|            }
 8028|      4|            return (p);
 8029|      4|        }
 8030|      2|cd_dot_dot : {
 8031|      2|            p = tmp->fts_parent;
 8032|      2|            sp->fts_cur = p;
 8033|      2|            free((void *)tmp);
 8034|      2|        }
 8035|      2|        if (p->fts_level == -1L) {
 8036|      1|            {
 8037|      1|                free((void *)p);
 8038|      1|                tmp___13 = __errno_location();
 8039|      1|                *tmp___13 = 0;
 8040|      1|                tmp___14 = (struct _ftsent *)((void *)0);
 8041|      1|                sp->fts_cur = tmp___14;
 8042|      1|            }
 8043|      1|            return (tmp___14);
 8044|      1|        }
 8045|      1|        {
 8046|      1|            while (1) {
 8047|      1|while_continue___3: /* CIL Label */
 8048|      1|                ;
 8049|       |
 8050|      1|                if (!((int)p->fts_info != 11)) {
 8051|      0|                    {
 8052|      0|                        abort();
 8053|      0|                    }
 8054|      0|                }
 8055|      1|                goto while_break___3;
 8056|      1|            }
 8057|      0|while_break___9: /* CIL Label */
 8058|      0|            ;
 8059|      0|        }
 8060|      1|while_break___3:
 8061|      1|        *(sp->fts_path + p->fts_pathlen) = (char)'\000';
 8062|      1|        if (p->fts_level == 0L) {
 8063|      1|            {
 8064|      1|                tmp___16 = restore_initial_cwd(sp);
 8065|      1|            }
 8066|      1|            if (tmp___16) {
 8067|      0|                {
 8068|      0|                    tmp___15 = __errno_location();
 8069|      0|                    p->fts_errno = *tmp___15;
 8070|      0|                    sp->fts_options |= 16384;
 8071|      0|                }
 8072|      0|            }
 8073|      1|        }
 8074|      0|        else {
 8075|      0|            if ((int)p->fts_flags & 2) {
 8076|      0|                if (!(sp->fts_options & 4)) {
 8077|      0|                    if (sp->fts_options & 512) {
 8078|      0|                        {
 8079|      0|                            cwd_advance_fd(sp, p->fts_symfd, (_Bool)1);
 8080|      0|                            tmp___21 = 0;
 8081|      0|                        }
 8082|      0|                    }
 8083|      0|                    else {
 8084|      0|                        {
 8085|      0|                            tmp___20 = fchdir(p->fts_symfd);
 8086|      0|                            tmp___21 = tmp___20;
 8087|      0|                        }
 8088|      0|                    }
 8089|      0|                    if (tmp___21) {
 8090|      0|                        {
 8091|      0|                            tmp___17 = __errno_location();
 8092|      0|                            saved_errno = *tmp___17;
 8093|      0|                            close(p->fts_symfd);
 8094|      0|                            tmp___18 = __errno_location();
 8095|      0|                            *tmp___18 = saved_errno;
 8096|      0|                            tmp___19 = __errno_location();
 8097|      0|                            p->fts_errno = *tmp___19;
 8098|      0|                            sp->fts_options |= 16384;
 8099|      0|                        }
 8100|      0|                    }
 8101|      0|                }
 8102|      0|                {
 8103|      0|                    close(p->fts_symfd);
 8104|      0|                }
 8105|      0|            }
 8106|      0|            else {
 8107|      0|                if (!((int)p->fts_flags & 1)) {
 8108|      0|                    {
 8109|      0|                        tmp___23 = fts_safe_changedir(sp, p->fts_parent, -1, "..");
 8110|      0|                    }
 8111|      0|                    if (tmp___23) {
 8112|      0|                        {
 8113|      0|                            tmp___22 = __errno_location();
 8114|      0|                            p->fts_errno = *tmp___22;
 8115|      0|                            sp->fts_options |= 16384;
 8116|      0|                        }
 8117|      0|                    }
 8118|      0|                }
 8119|      0|            }
 8120|      0|        }
 8121|      1|        if (p->fts_errno) {
 8122|      0|            p->fts_info = (unsigned short)7;
 8123|      0|        }
 8124|      1|        else {
 8125|      1|            p->fts_info = (unsigned short)6;
 8126|      1|        }
 8127|      1|        if (p->fts_errno == 0) {
 8128|      1|            {
 8129|      1|                while (1) {
 8130|      1|while_continue___4: /* CIL Label */
 8131|      1|                    ;
 8132|      1|                    {
 8133|      1|                        leave_dir(sp, p);
 8134|      1|                    }
 8135|      1|                    goto while_break___4;
 8136|      1|                }
 8137|      0|while_break___10: /* CIL Label */
 8138|      0|                ;
 8139|      0|            }
 8140|      1|while_break___4:
 8141|      1|            ;
 8142|      1|        }
 8143|      1|        if (sp->fts_options & 16384) {
 8144|      0|            tmp___24 = (FTSENT *)((void *)0);
 8145|      0|        }
 8146|      1|        else {
 8147|      1|            tmp___24 = p;
 8148|      1|        }
 8149|      1|        return (tmp___24);
 8150|      1|    }
 8151|      1|}
 8152|       |__attribute__((__nothrow__)) int fts_set(FTS *sp __attribute__((__unused__)), FTSENT *p,
 8153|       |        int instr);
 8154|       |int fts_set(FTS *sp __attribute__((__unused__)), FTSENT *p, int instr)
 8155|      0|{
 8156|      0|    int *tmp;
 8157|       |
 8158|      0|    {
 8159|      0|        if (instr != 0) {
 8160|      0|            if (instr != 1) {
 8161|      0|                if (instr != 2) {
 8162|      0|                    if (instr != 3) {
 8163|      0|                        if (instr != 4) {
 8164|      0|                            {
 8165|      0|                                tmp = __errno_location();
 8166|      0|                                *tmp = 22;
 8167|      0|                            }
 8168|      0|                            return (1);
 8169|      0|                        }
 8170|      0|                    }
 8171|      0|                }
 8172|      0|            }
 8173|      0|        }
 8174|      0|        p->fts_instr = (unsigned short)instr;
 8175|      0|        return (0);
 8176|      0|    }
 8177|      0|}
 8178|       |static int fts_compare_ino(struct _ftsent const **a, struct _ftsent const **b)
 8179|      0|{
 8180|      0|    int tmp;
 8181|      0|    int tmp___0;
 8182|       |
 8183|      0|    {
 8184|      0|        if ((*(a + 0))->fts_statp[0].st_ino < (*(b + 0))->fts_statp[0].st_ino) {
 8185|      0|            tmp___0 = -1;
 8186|      0|        }
 8187|      0|        else {
 8188|      0|            if ((*(b + 0))->fts_statp[0].st_ino < (*(a + 0))->fts_statp[0].st_ino) {
 8189|      0|                tmp = 1;
 8190|      0|            }
 8191|      0|            else {
 8192|      0|                tmp = 0;
 8193|      0|            }
 8194|      0|            tmp___0 = tmp;
 8195|      0|        }
 8196|      0|        return (tmp___0);
 8197|      0|    }
 8198|      0|}
 8199|       |static void set_stat_type(struct stat *st, unsigned int dtype)
 8200|      3|{
 8201|      3|    mode_t type;
 8202|       |
 8203|      3|    {
 8204|      3|        if (dtype == 6U) {
 8205|      0|            goto case_6;
 8206|      0|        }
 8207|      3|        if (dtype == 2U) {
 8208|      0|            goto case_2;
 8209|      0|        }
 8210|      3|        if (dtype == 4U) {
 8211|      0|            goto case_4;
 8212|      0|        }
 8213|      3|        if (dtype == 1U) {
 8214|      0|            goto case_1;
 8215|      0|        }
 8216|      3|        if (dtype == 10U) {
 8217|      0|            goto case_10;
 8218|      0|        }
 8219|      3|        if (dtype == 8U) {
 8220|      3|            goto case_8;
 8221|      3|        }
 8222|      0|        if (dtype == 12U) {
 8223|      0|            goto case_12;
 8224|      0|        }
 8225|      0|        goto switch_default;
 8226|      0|case_6:
 8227|      0|        type = (mode_t)24576;
 8228|      0|        goto switch_break;
 8229|      0|case_2:
 8230|      0|        type = (mode_t)8192;
 8231|      0|        goto switch_break;
 8232|      0|case_4:
 8233|      0|        type = (mode_t)16384;
 8234|      0|        goto switch_break;
 8235|      0|case_1:
 8236|      0|        type = (mode_t)4096;
 8237|      0|        goto switch_break;
 8238|      0|case_10:
 8239|      0|        type = (mode_t)40960;
 8240|      0|        goto switch_break;
 8241|      3|case_8:
 8242|      3|        type = (mode_t)32768;
 8243|      3|        goto switch_break;
 8244|      0|case_12:
 8245|      0|        type = (mode_t)49152;
 8246|      0|        goto switch_break;
 8247|      0|switch_default:
 8248|      0|        type = (mode_t)0;
 8249|      3|switch_break:
 8250|      3|        st->st_mode = type;
 8251|      3|        return;
 8252|      0|    }
 8253|      0|}
 8254|       |static FTSENT *fts_build(FTS *sp, int type)
 8255|      1|{
 8256|      1|    register FTSENT *p;
 8257|      1|    register FTSENT *head;
 8258|      1|    register size_t nitems;
 8259|      1|    FTSENT *tail;
 8260|      1|    void *oldaddr;
 8261|      1|    int saved_errno;
 8262|      1|    _Bool descend;
 8263|      1|    _Bool doadjust;
 8264|      1|    ptrdiff_t level;
 8265|      1|    nlink_t nlinks;
 8266|      1|    _Bool nostat;
 8267|      1|    size_t len;
 8268|      1|    size_t maxlen;
 8269|      1|    size_t new_len;
 8270|      1|    char *cp;
 8271|      1|    int dir_fd;
 8272|      1|    FTSENT *cur;
 8273|      1|    _Bool continue_readdir;
 8274|      1|    DIR *dp;
 8275|      1|    int *tmp;
 8276|      1|    int *tmp___0;
 8277|      1|    DIR *tmp___1;
 8278|      1|    int tmp___2;
 8279|      1|    int tmp___3;
 8280|      1|    int tmp___4;
 8281|      1|    int *tmp___5;
 8282|      1|    _Bool tmp___6;
 8283|      1|    size_t max_entries;
 8284|      1|    unsigned long tmp___7;
 8285|      1|    int tmp___8;
 8286|      1|    int *tmp___9;
 8287|      1|    int tmp___10;
 8288|      1|    char *tmp___11;
 8289|      1|    _Bool is_dir;
 8290|      1|    size_t d_namelen;
 8291|      1|    struct dirent *dp___0;
 8292|      1|    struct dirent *tmp___12;
 8293|      1|    int *tmp___13;
 8294|      1|    int *tmp___14;
 8295|      1|    _Bool tmp___15;
 8296|      1|    int *tmp___16;
 8297|      1|    _Bool skip_stat;
 8298|      1|    int tmp___17;
 8299|      1|    int tmp___18;
 8300|      1|    int tmp___19;
 8301|      1|    int tmp___20;
 8302|      1|    int tmp___21;
 8303|      1|    int tmp___22;
 8304|      1|    _Bool tmp___23;
 8305|      1|    char *__cil_tmp53;
 8306|       |
 8307|      1|    {
 8308|      1|        cur = sp->fts_cur;
 8309|      1|        continue_readdir = (_Bool)(!(!cur->fts_dirp));
 8310|      1|        if (continue_readdir) {
 8311|      0|            {
 8312|      0|                dp = cur->fts_dirp;
 8313|      0|                dir_fd = dirfd(dp);
 8314|      0|            }
 8315|      0|            if (dir_fd < 0) {
 8316|      0|                {
 8317|      0|                    while (1) {
 8318|      0|while_continue: /* CIL Label */
 8319|      0|                        ;
 8320|      0|                        {
 8321|      0|                            closedir(cur->fts_dirp);
 8322|      0|                            cur->fts_dirp = (DIR *)((void *)0);
 8323|      0|                        }
 8324|      0|                        goto while_break;
 8325|      0|                    }
 8326|      0|while_break___6: /* CIL Label */
 8327|      0|                    ;
 8328|      0|                }
 8329|      0|while_break:
 8330|      0|                ;
 8331|      0|                if (type == 3) {
 8332|      0|                    {
 8333|      0|                        cur->fts_info = (unsigned short)4;
 8334|      0|                        tmp = __errno_location();
 8335|      0|                        cur->fts_errno = *tmp;
 8336|      0|                    }
 8337|      0|                }
 8338|      0|                return ((FTSENT *)((void *)0));
 8339|      0|            }
 8340|      0|        }
 8341|      1|        else {
 8342|      1|            if (sp->fts_options & 16) {
 8343|      1|                if (sp->fts_options & 1) {
 8344|      1|                    if (cur->fts_level == 0L) {
 8345|      1|                        tmp___2 = 0;
 8346|      1|                    }
 8347|      0|                    else {
 8348|      0|                        tmp___2 = 131072;
 8349|      0|                    }
 8350|      1|                }
 8351|      0|                else {
 8352|      0|                    tmp___2 = 131072;
 8353|      0|                }
 8354|      1|            }
 8355|      0|            else {
 8356|      0|                tmp___2 = 0;
 8357|      0|            }
 8358|      1|            if (sp->fts_options & 2048) {
 8359|      0|                tmp___3 = 262144;
 8360|      0|            }
 8361|      1|            else {
 8362|      1|                tmp___3 = 0;
 8363|      1|            }
 8364|      1|            if (!(sp->fts_options & 4)) {
 8365|      1|                if (sp->fts_options & 512) {
 8366|      1|                    tmp___4 = sp->fts_cwd_fd;
 8367|      1|                }
 8368|      0|                else {
 8369|      0|                    tmp___4 = -100;
 8370|      0|                }
 8371|      1|            }
 8372|      0|            else {
 8373|      0|                tmp___4 = -100;
 8374|      0|            }
 8375|      1|            {
 8376|      1|                tmp___1 = opendirat(tmp___4, (char const *)cur->fts_accpath, tmp___2 | tmp___3,
 8377|      1|                                    &dir_fd);
 8378|      1|                cur->fts_dirp = tmp___1;
 8379|      1|            }
 8380|      1|            if ((unsigned long)tmp___1 == (unsigned long)((void *)0)) {
 8381|      0|                if (type == 3) {
 8382|      0|                    {
 8383|      0|                        cur->fts_info = (unsigned short)4;
 8384|      0|                        tmp___0 = __errno_location();
 8385|      0|                        cur->fts_errno = *tmp___0;
 8386|      0|                    }
 8387|      0|                }
 8388|      0|                return ((FTSENT *)((void *)0));
 8389|      0|            }
 8390|      1|            if ((int)cur->fts_info == 11) {
 8391|      0|                {
 8392|      0|                    cur->fts_info = fts_stat(sp, cur, (_Bool)0);
 8393|      0|                }
 8394|      0|            }
 8395|      1|            else {
 8396|      1|                if (sp->fts_options & 256) {
 8397|      1|                    {
 8398|      1|                        while (1) {
 8399|      1|while_continue___3: /* CIL Label */
 8400|      1|                            ;
 8401|      1|                            {
 8402|      1|                                leave_dir(sp, cur);
 8403|      1|                            }
 8404|      1|                            goto while_break___0;
 8405|      1|                        }
 8406|      0|while_break___7: /* CIL Label */
 8407|      0|                        ;
 8408|      0|                    }
 8409|      1|while_break___0 : {
 8410|      1|                        fts_stat(sp, cur, (_Bool)0);
 8411|      1|                        tmp___6 = enter_dir(sp, cur);
 8412|      1|                    }
 8413|      1|                    if (!tmp___6) {
 8414|      0|                        {
 8415|      0|                            tmp___5 = __errno_location();
 8416|      0|                            *tmp___5 = 12;
 8417|      0|                        }
 8418|      0|                        return ((FTSENT *)((void *)0));
 8419|      0|                    }
 8420|      1|                }
 8421|      1|            }
 8422|      1|        }
 8423|      1|        if ((unsigned long)sp->fts_compar == (unsigned long)((void *)0)) {
 8424|      1|            tmp___7 = 100000UL;
 8425|      1|        }
 8426|      0|        else {
 8427|      0|            tmp___7 = 0xffffffffffffffffUL;
 8428|      0|        }
 8429|      1|        max_entries = tmp___7;
 8430|      1|        if (type == 2) {
 8431|      0|            nlinks = (nlink_t)0;
 8432|      0|            nostat = (_Bool)0;
 8433|      0|        }
 8434|      1|        else {
 8435|      1|            if (sp->fts_options & 8) {
 8436|      1|                if (sp->fts_options & 16) {
 8437|      1|                    if (sp->fts_options & 32) {
 8438|      0|                        tmp___8 = 0;
 8439|      0|                    }
 8440|      1|                    else {
 8441|      1|                        tmp___8 = 2;
 8442|      1|                    }
 8443|      1|                    nlinks = cur->fts_statp[0].st_nlink - (__nlink_t)tmp___8;
 8444|      1|                    nostat = (_Bool)1;
 8445|      1|                }
 8446|      0|                else {
 8447|      0|                    nlinks = (nlink_t)-1;
 8448|      0|                    nostat = (_Bool)0;
 8449|      0|                }
 8450|      1|            }
 8451|      0|            else {
 8452|      0|                nlinks = (nlink_t)-1;
 8453|      0|                nostat = (_Bool)0;
 8454|      0|            }
 8455|      1|        }
 8456|      1|        if (continue_readdir) {
 8457|      0|            descend = (_Bool)1;
 8458|      0|        }
 8459|      1|        else {
 8460|      1|            if (nlinks) {
 8461|      0|                goto _L___0;
 8462|      0|            }
 8463|      1|            else {
 8464|      1|                if (type == 3) {
 8465|      1|_L___0:
 8466|      1|                    if (sp->fts_options & 512) {
 8467|      1|                        {
 8468|      1|                            dir_fd = dup_safer(dir_fd);
 8469|      1|                        }
 8470|      1|                        if (0 <= dir_fd) {
 8471|      1|                            {
 8472|      1|                                set_cloexec_flag(dir_fd, (_Bool)1);
 8473|      1|                            }
 8474|      1|                        }
 8475|      1|                    }
 8476|      1|                    if (dir_fd < 0) {
 8477|      0|                        goto _L;
 8478|      0|                    }
 8479|      1|                    else {
 8480|      1|                        {
 8481|      1|                            tmp___10 = fts_safe_changedir(sp, cur, dir_fd, (char const *)((void *)0));
 8482|      1|                        }
 8483|      1|                        if (tmp___10) {
 8484|      0|_L:
 8485|      0|                            if (nlinks) {
 8486|      0|                                if (type == 3) {
 8487|      0|                                    {
 8488|      0|                                        tmp___9 = __errno_location();
 8489|      0|                                        cur->fts_errno = *tmp___9;
 8490|      0|                                    }
 8491|      0|                                }
 8492|      0|                            }
 8493|      0|                            cur->fts_flags = (unsigned short)((int)cur->fts_flags | 1);
 8494|      0|                            descend = (_Bool)0;
 8495|      0|                            {
 8496|      0|                                while (1) {
 8497|      0|while_continue___4: /* CIL Label */
 8498|      0|                                    ;
 8499|      0|                                    {
 8500|      0|                                        closedir(cur->fts_dirp);
 8501|      0|                                        cur->fts_dirp = (DIR *)((void *)0);
 8502|      0|                                    }
 8503|      0|                                    goto while_break___1;
 8504|      0|                                }
 8505|      0|while_break___8: /* CIL Label */
 8506|      0|                                ;
 8507|      0|                            }
 8508|      0|while_break___1:
 8509|      0|                            ;
 8510|      0|                            if (sp->fts_options & 512) {
 8511|      0|                                if (0 <= dir_fd) {
 8512|      0|                                    {
 8513|      0|                                        close(dir_fd);
 8514|      0|                                    }
 8515|      0|                                }
 8516|      0|                            }
 8517|      0|                            cur->fts_dirp = (DIR *)((void *)0);
 8518|      0|                        }
 8519|      1|                        else {
 8520|      1|                            descend = (_Bool)1;
 8521|      1|                        }
 8522|      1|                    }
 8523|      1|                }
 8524|      0|                else {
 8525|      0|                    descend = (_Bool)0;
 8526|      0|                }
 8527|      1|            }
 8528|      1|        }
 8529|      1|        if ((int)*(cur->fts_path + (cur->fts_pathlen - 1UL)) == 47) {
 8530|      0|            len = cur->fts_pathlen - 1UL;
 8531|      0|        }
 8532|      1|        else {
 8533|      1|            len = cur->fts_pathlen;
 8534|      1|        }
 8535|      1|        if (sp->fts_options & 4) {
 8536|      0|            cp = sp->fts_path + len;
 8537|      0|            tmp___11 = cp;
 8538|      0|            cp++;
 8539|      0|            *tmp___11 = (char)'/';
 8540|      0|        }
 8541|      1|        else {
 8542|      1|            cp = (char *)((void *)0);
 8543|      1|        }
 8544|      1|        len++;
 8545|      1|        maxlen = sp->fts_pathlen - len;
 8546|      1|        level = cur->fts_level + 1L;
 8547|      1|        doadjust = (_Bool)0;
 8548|      1|        head = (FTSENT *)((void *)0);
 8549|      1|        tail = (FTSENT *)((void *)0);
 8550|      1|        nitems = (size_t)0;
 8551|      1|        {
 8552|      4|            while (1) {
 8553|      4|while_continue___5: /* CIL Label */
 8554|      4|                ;
 8555|      6|while_continue___2:
 8556|      6|                ;
 8557|      6|                if (!cur->fts_dirp) {
 8558|      0|                    goto while_break___2;
 8559|      0|                }
 8560|      6|                {
 8561|      6|                    tmp___12 = readdir(cur->fts_dirp);
 8562|      6|                    dp___0 = tmp___12;
 8563|      6|                }
 8564|      6|                if ((unsigned long)dp___0 == (unsigned long)((void *)0)) {
 8565|      1|                    goto while_break___2;
 8566|      1|                }
 8567|      5|                if (!(sp->fts_options & 32)) {
 8568|      5|                    if ((int)dp___0->d_name[0] == 46) {
 8569|      2|                        if (!dp___0->d_name[1]) {
 8570|      1|                            goto while_continue___2;
 8571|      1|                        }
 8572|      1|                        else {
 8573|      1|                            if ((int)dp___0->d_name[1] == 46) {
 8574|      1|                                if (!dp___0->d_name[2]) {
 8575|      1|                                    goto while_continue___2;
 8576|      1|                                }
 8577|      1|                            }
 8578|      1|                        }
 8579|      2|                    }
 8580|      5|                }
 8581|      3|                {
 8582|      3|                    d_namelen = strlen((char const *)(dp___0->d_name));
 8583|      3|                    p = fts_alloc(sp, (char const *)(dp___0->d_name), d_namelen);
 8584|      3|                }
 8585|      3|                if (!p) {
 8586|      0|                    goto mem1;
 8587|      0|                }
 8588|      3|                if (d_namelen >= maxlen) {
 8589|      0|                    {
 8590|      0|                        oldaddr = (void *)sp->fts_path;
 8591|      0|                        tmp___15 = fts_palloc(sp, (d_namelen + len) + 1UL);
 8592|      0|                    }
 8593|      0|                    if (!tmp___15) {
 8594|      0|mem1 : {
 8595|      0|                            tmp___13 = __errno_location();
 8596|      0|                            saved_errno = *tmp___13;
 8597|      0|                            free((void *)p);
 8598|      0|                            fts_lfree(head);
 8599|      0|                        }
 8600|      0|                        {
 8601|      0|                            while (1) {
 8602|      0|while_continue___6: /* CIL Label */
 8603|      0|                                ;
 8604|      0|                                {
 8605|      0|                                    closedir(cur->fts_dirp);
 8606|      0|                                    cur->fts_dirp = (DIR *)((void *)0);
 8607|      0|                                }
 8608|      0|                                goto while_break___3;
 8609|      0|                            }
 8610|      0|while_break___10: /* CIL Label */
 8611|      0|                            ;
 8612|      0|                        }
 8613|      0|while_break___3 : {
 8614|      0|                            cur->fts_info = (unsigned short)7;
 8615|      0|                            sp->fts_options |= 16384;
 8616|      0|                            tmp___14 = __errno_location();
 8617|      0|                            *tmp___14 = saved_errno;
 8618|      0|                        }
 8619|      0|                        return ((FTSENT *)((void *)0));
 8620|      0|                    }
 8621|      0|                    if ((unsigned long)oldaddr != (unsigned long)sp->fts_path) {
 8622|      0|                        doadjust = (_Bool)1;
 8623|      0|                        if (sp->fts_options & 4) {
 8624|      0|                            cp = sp->fts_path + len;
 8625|      0|                        }
 8626|      0|                    }
 8627|      0|                    maxlen = sp->fts_pathlen - len;
 8628|      0|                }
 8629|      3|                new_len = len + d_namelen;
 8630|      3|                if (new_len < len) {
 8631|      0|                    {
 8632|      0|                        free((void *)p);
 8633|      0|                        fts_lfree(head);
 8634|      0|                    }
 8635|      0|                    {
 8636|      0|                        while (1) {
 8637|      0|while_continue___7: /* CIL Label */
 8638|      0|                            ;
 8639|      0|                            {
 8640|      0|                                closedir(cur->fts_dirp);
 8641|      0|                                cur->fts_dirp = (DIR *)((void *)0);
 8642|      0|                            }
 8643|      0|                            goto while_break___4;
 8644|      0|                        }
 8645|      0|while_break___11: /* CIL Label */
 8646|      0|                        ;
 8647|      0|                    }
 8648|      0|while_break___4 : {
 8649|      0|                        cur->fts_info = (unsigned short)7;
 8650|      0|                        sp->fts_options |= 16384;
 8651|      0|                        tmp___16 = __errno_location();
 8652|      0|                        *tmp___16 = 36;
 8653|      0|                    }
 8654|      0|                    return ((FTSENT *)((void *)0));
 8655|      0|                }
 8656|      3|                p->fts_level = level;
 8657|      3|                p->fts_parent = sp->fts_cur;
 8658|      3|                p->fts_pathlen = new_len;
 8659|      3|                p->fts_statp[0].st_ino = dp___0->d_ino;
 8660|      3|                if (sp->fts_options & 4) {
 8661|      0|                    {
 8662|      0|                        p->fts_accpath = p->fts_path;
 8663|      0|                        memmove((void *)cp, (void const *)(p->fts_name), p->fts_namelen + 1UL);
 8664|      0|                    }
 8665|      0|                }
 8666|      3|                else {
 8667|      3|                    p->fts_accpath = p->fts_name;
 8668|      3|                }
 8669|      3|                if ((unsigned long)sp->fts_compar == (unsigned long)((void *)0)) {
 8670|      3|                    goto _L___1;
 8671|      3|                }
 8672|      0|                else {
 8673|      0|                    if (sp->fts_options & 1024) {
 8674|      3|_L___1:
 8675|      3|                        if (sp->fts_options & 16) {
 8676|      3|                            if (sp->fts_options & 8) {
 8677|      3|                                if ((int)dp___0->d_type != 0) {
 8678|      3|                                    if (!((int)dp___0->d_type == 4)) {
 8679|      3|                                        tmp___17 = 1;
 8680|      3|                                    }
 8681|      0|                                    else {
 8682|      0|                                        tmp___17 = 0;
 8683|      0|                                    }
 8684|      3|                                }
 8685|      0|                                else {
 8686|      0|                                    tmp___17 = 0;
 8687|      0|                                }
 8688|      3|                            }
 8689|      0|                            else {
 8690|      0|                                tmp___17 = 0;
 8691|      0|                            }
 8692|      3|                        }
 8693|      0|                        else {
 8694|      0|                            tmp___17 = 0;
 8695|      0|                        }
 8696|      3|                        {
 8697|      3|                            skip_stat = (_Bool)tmp___17;
 8698|      3|                            p->fts_info = (unsigned short)11;
 8699|      3|                            set_stat_type(p->fts_statp, (unsigned int)dp___0->d_type);
 8700|      3|                            fts_set_stat_required(p, (_Bool)(!skip_stat));
 8701|      3|                        }
 8702|      3|                        if (sp->fts_options & 16) {
 8703|      3|                            if ((int)dp___0->d_type == 4) {
 8704|      0|                                tmp___18 = 1;
 8705|      0|                            }
 8706|      3|                            else {
 8707|      3|                                tmp___18 = 0;
 8708|      3|                            }
 8709|      3|                        }
 8710|      0|                        else {
 8711|      0|                            tmp___18 = 0;
 8712|      0|                        }
 8713|      3|                        is_dir = (_Bool)tmp___18;
 8714|      3|                    }
 8715|      0|                    else {
 8716|      0|                        {
 8717|      0|                            p->fts_info = fts_stat(sp, p, (_Bool)0);
 8718|      0|                        }
 8719|      0|                        if ((int)p->fts_info == 1) {
 8720|      0|                            tmp___19 = 1;
 8721|      0|                        }
 8722|      0|                        else {
 8723|      0|                            if ((int)p->fts_info == 2) {
 8724|      0|                                tmp___19 = 1;
 8725|      0|                            }
 8726|      0|                            else {
 8727|      0|                                if ((int)p->fts_info == 5) {
 8728|      0|                                    tmp___19 = 1;
 8729|      0|                                }
 8730|      0|                                else {
 8731|      0|                                    tmp___19 = 0;
 8732|      0|                                }
 8733|      0|                            }
 8734|      0|                        }
 8735|      0|                        is_dir = (_Bool)tmp___19;
 8736|      0|                    }
 8737|      0|                }
 8738|      3|                if (nlinks > 0UL) {
 8739|      0|                    if (is_dir) {
 8740|      0|                        nlinks -= (nlink_t)nostat;
 8741|      0|                    }
 8742|      0|                }
 8743|      3|                p->fts_link = (struct _ftsent *)((void *)0);
 8744|      3|                if ((unsigned long)head == (unsigned long)((void *)0)) {
 8745|      1|                    tail = p;
 8746|      1|                    head = tail;
 8747|      1|                }
 8748|      2|                else {
 8749|      2|                    tail->fts_link = p;
 8750|      2|                    tail = p;
 8751|      2|                }
 8752|      3|                nitems++;
 8753|      3|                if (max_entries <= nitems) {
 8754|      0|                    goto break_without_closedir;
 8755|      0|                }
 8756|      3|            }
 8757|      0|while_break___9: /* CIL Label */
 8758|      0|            ;
 8759|      0|        }
 8760|      1|while_break___2:
 8761|      1|        ;
 8762|      1|        if (cur->fts_dirp) {
 8763|      1|            {
 8764|      1|                while (1) {
 8765|      1|while_continue___8: /* CIL Label */
 8766|      1|                    ;
 8767|      1|                    {
 8768|      1|                        closedir(cur->fts_dirp);
 8769|      1|                        cur->fts_dirp = (DIR *)((void *)0);
 8770|      1|                    }
 8771|      1|                    goto while_break___5;
 8772|      1|                }
 8773|      0|while_break___12: /* CIL Label */
 8774|      0|                ;
 8775|      0|            }
 8776|      1|while_break___5:
 8777|      1|            ;
 8778|      1|        }
 8779|      1|break_without_closedir:
 8780|      1|        if (doadjust) {
 8781|      0|            {
 8782|      0|                fts_padjust(sp, head);
 8783|      0|            }
 8784|      0|        }
 8785|      1|        if (sp->fts_options & 4) {
 8786|      0|            if (len == sp->fts_pathlen) {
 8787|      0|                cp--;
 8788|      0|            }
 8789|      0|            else {
 8790|      0|                if (nitems == 0UL) {
 8791|      0|                    cp--;
 8792|      0|                }
 8793|      0|            }
 8794|      0|            *cp = (char)'\000';
 8795|      0|        }
 8796|      1|        if (!continue_readdir) {
 8797|      1|            if (descend) {
 8798|      1|                if (type == 1) {
 8799|      0|                    goto _L___2;
 8800|      0|                }
 8801|      1|                else {
 8802|      1|                    if (!nitems) {
 8803|      0|_L___2:
 8804|      0|                        if (cur->fts_level == 0L) {
 8805|      0|                            {
 8806|      0|                                tmp___20 = restore_initial_cwd(sp);
 8807|      0|                                tmp___22 = tmp___20;
 8808|      0|                            }
 8809|      0|                        }
 8810|      0|                        else {
 8811|      0|                            {
 8812|      0|                                tmp___21 = fts_safe_changedir(sp, cur->fts_parent, -1, "..");
 8813|      0|                                tmp___22 = tmp___21;
 8814|      0|                            }
 8815|      0|                        }
 8816|      0|                        if (tmp___22) {
 8817|      0|                            {
 8818|      0|                                cur->fts_info = (unsigned short)7;
 8819|      0|                                sp->fts_options |= 16384;
 8820|      0|                                fts_lfree(head);
 8821|      0|                            }
 8822|      0|                            return ((FTSENT *)((void *)0));
 8823|      0|                        }
 8824|      0|                    }
 8825|      1|                }
 8826|      1|            }
 8827|      1|        }
 8828|      1|        if (!nitems) {
 8829|      0|            if (type == 3) {
 8830|      0|                cur->fts_info = (unsigned short)6;
 8831|      0|            }
 8832|      0|            {
 8833|      0|                fts_lfree(head);
 8834|      0|            }
 8835|      0|            return ((FTSENT *)((void *)0));
 8836|      0|        }
 8837|      1|        if (nitems > 10000UL) {
 8838|      0|            if (!sp->fts_compar) {
 8839|      0|                if (sp->fts_options & 512) {
 8840|      0|                    {
 8841|      0|                        tmp___23 = dirent_inode_sort_may_be_useful(sp->fts_cwd_fd);
 8842|      0|                    }
 8843|      0|                    if (tmp___23) {
 8844|      0|                        {
 8845|      0|                            sp->fts_compar = &fts_compare_ino;
 8846|      0|                            head = fts_sort(sp, head, nitems);
 8847|      0|                            sp->fts_compar = (int (*)(struct _ftsent const **, struct _ftsent const **))((void *)0);
 8848|      0|                        }
 8849|      0|                    }
 8850|      0|                }
 8851|      0|            }
 8852|      0|        }
 8853|      1|        if (sp->fts_compar) {
 8854|      0|            if (nitems > 1UL) {
 8855|      0|                {
 8856|      0|                    head = fts_sort(sp, head, nitems);
 8857|      0|                }
 8858|      0|            }
 8859|      0|        }
 8860|      1|        return (head);
 8861|      1|    }
 8862|      1|}
 8863|       |static unsigned short fts_stat(FTS *sp, FTSENT *p, _Bool follow)
 8864|      2|{
 8865|      2|    struct stat *sbp;
 8866|      2|    int saved_errno;
 8867|      2|    int *tmp;
 8868|      2|    int *tmp___0;
 8869|      2|    int *tmp___1;
 8870|      2|    int tmp___2;
 8871|      2|    int tmp___3;
 8872|      2|    int *tmp___4;
 8873|      2|    int tmp___5;
 8874|      2|    int tmp___6;
 8875|      2|    int tmp___7;
 8876|       |
 8877|      2|    {
 8878|      2|        sbp = p->fts_statp;
 8879|      2|        if (p->fts_level == 0L) {
 8880|      2|            if (sp->fts_options & 1) {
 8881|      2|                follow = (_Bool)1;
 8882|      2|            }
 8883|      2|        }
 8884|      2|        if (sp->fts_options & 2) {
 8885|      0|            goto _L;
 8886|      0|        }
 8887|      2|        else {
 8888|      2|            if (follow) {
 8889|      2|_L : {
 8890|      2|                    tmp___3 = stat((char const * /* __restrict  */)((char const *)p->fts_accpath),
 8891|      2|                                   (struct stat * /* __restrict  */) sbp);
 8892|      2|                }
 8893|      2|                if (tmp___3) {
 8894|      0|                    {
 8895|      0|                        tmp = __errno_location();
 8896|      0|                        saved_errno = *tmp;
 8897|      0|                        tmp___1 = __errno_location();
 8898|      0|                    }
 8899|      0|                    if (*tmp___1 == 2) {
 8900|      0|                        {
 8901|      0|                            tmp___2 = lstat((char const * /* __restrict  */)((char const *)p->fts_accpath),
 8902|      0|                                            (struct stat * /* __restrict  */) sbp);
 8903|      0|                        }
 8904|      0|                        if (tmp___2 == 0) {
 8905|      0|                            {
 8906|      0|                                tmp___0 = __errno_location();
 8907|      0|                                *tmp___0 = 0;
 8908|      0|                            }
 8909|      0|                            return ((unsigned short)13);
 8910|      0|                        }
 8911|      0|                    }
 8912|      0|                    p->fts_errno = saved_errno;
 8913|      0|                    goto err;
 8914|      0|                }
 8915|      2|            }
 8916|      0|            else {
 8917|      0|                {
 8918|      0|                    tmp___5 = fstatat(sp->fts_cwd_fd, (char const * /* __restrict  */)((char const *)p->fts_accpath),
 8919|      0|                                      (struct stat * /* __restrict  */) sbp, 256);
 8920|      0|                }
 8921|      0|                if (tmp___5) {
 8922|      0|                    {
 8923|      0|                        tmp___4 = __errno_location();
 8924|      0|                        p->fts_errno = *tmp___4;
 8925|      0|                    }
 8926|      0|err : {
 8927|      0|                        memset((void *)sbp, 0, sizeof(struct stat));
 8928|      0|                    }
 8929|      0|                    return ((unsigned short)10);
 8930|      0|                }
 8931|      0|            }
 8932|      2|        }
 8933|      2|        if ((sbp->st_mode & 61440U) == 16384U) {
 8934|      2|            if (sp->fts_options & 32) {
 8935|      0|                tmp___6 = 0;
 8936|      0|            }
 8937|      2|            else {
 8938|      2|                tmp___6 = 2;
 8939|      2|            }
 8940|      2|            p->fts_n_dirs_remaining = sbp->st_nlink - (__nlink_t)tmp___6;
 8941|      2|            if ((int)p->fts_name[0] == 46) {
 8942|      0|                if (!p->fts_name[1]) {
 8943|      0|                    goto _L___0;
 8944|      0|                }
 8945|      0|                else {
 8946|      0|                    if ((int)p->fts_name[1] == 46) {
 8947|      0|                        if (!p->fts_name[2]) {
 8948|      0|_L___0:
 8949|      0|                            if (p->fts_level == 0L) {
 8950|      0|                                tmp___7 = 1;
 8951|      0|                            }
 8952|      0|                            else {
 8953|      0|                                tmp___7 = 5;
 8954|      0|                            }
 8955|      0|                            return ((unsigned short)tmp___7);
 8956|      0|                        }
 8957|      0|                    }
 8958|      0|                }
 8959|      0|            }
 8960|      2|            return ((unsigned short)1);
 8961|      2|        }
 8962|      0|        if ((sbp->st_mode & 61440U) == 40960U) {
 8963|      0|            return ((unsigned short)12);
 8964|      0|        }
 8965|      0|        if ((sbp->st_mode & 61440U) == 32768U) {
 8966|      0|            return ((unsigned short)8);
 8967|      0|        }
 8968|      0|        return ((unsigned short)3);
 8969|      0|    }
 8970|      0|}
 8971|       |static int fts_compar(void const *a, void const *b)
 8972|      0|{
 8973|      0|    FTSENT const **pa;
 8974|      0|    FTSENT const **pb;
 8975|      0|    int tmp;
 8976|       |
 8977|      0|    {
 8978|      0|        {
 8979|      0|            pa = (FTSENT const **)a;
 8980|      0|            pb = (FTSENT const **)b;
 8981|      0|            tmp = (*(((*(pa + 0))->fts_fts)->fts_compar))(pa, pb);
 8982|      0|        }
 8983|      0|        return (tmp);
 8984|      0|    }
 8985|      0|}
 8986|       |static FTSENT *fts_sort(FTS *sp, FTSENT *head, size_t nitems)
 8987|      0|{
 8988|      0|    register FTSENT **ap;
 8989|      0|    register FTSENT *p;
 8990|      0|    FTSENT *dummy;
 8991|      0|    int (*compare)(void const *, void const *);
 8992|      0|    int (*tmp)(void const *, void const *);
 8993|      0|    FTSENT **a;
 8994|      0|    FTSENT **tmp___0;
 8995|       |
 8996|      0|    {
 8997|      0|        if (sizeof(&dummy) == sizeof(void *)) {
 8998|      0|            if ((long)(&dummy) == (long)((void *)(&dummy))) {
 8999|      0|                tmp = (int (*)(void const *, void const *))sp->fts_compar;
 9000|      0|            }
 9001|      0|            else {
 9002|      0|                tmp = &fts_compar;
 9003|      0|            }
 9004|      0|        }
 9005|      0|        else {
 9006|      0|            tmp = &fts_compar;
 9007|      0|        }
 9008|      0|        compare = tmp;
 9009|      0|        if (nitems > sp->fts_nitems) {
 9010|      0|            sp->fts_nitems = nitems + 40UL;
 9011|      0|            if (0xffffffffffffffffUL / sizeof(*a) < sp->fts_nitems) {
 9012|      0|                {
 9013|      0|                    free((void *)sp->fts_array);
 9014|      0|                    sp->fts_array = (struct _ftsent **)((void *)0);
 9015|      0|                    sp->fts_nitems = (size_t)0;
 9016|      0|                }
 9017|      0|                return (head);
 9018|      0|            }
 9019|      0|            else {
 9020|      0|                {
 9021|      0|                    a = (FTSENT **)realloc((void *)sp->fts_array, sp->fts_nitems * sizeof(*a));
 9022|      0|                }
 9023|      0|                if (!a) {
 9024|      0|                    {
 9025|      0|                        free((void *)sp->fts_array);
 9026|      0|                        sp->fts_array = (struct _ftsent **)((void *)0);
 9027|      0|                        sp->fts_nitems = (size_t)0;
 9028|      0|                    }
 9029|      0|                    return (head);
 9030|      0|                }
 9031|      0|            }
 9032|      0|            sp->fts_array = a;
 9033|      0|        }
 9034|      0|        ap = sp->fts_array;
 9035|      0|        p = head;
 9036|      0|        {
 9037|      0|            while (1) {
 9038|      0|while_continue: /* CIL Label */
 9039|      0|                ;
 9040|       |
 9041|      0|                if (!p) {
 9042|      0|                    goto while_break;
 9043|      0|                }
 9044|      0|                tmp___0 = ap;
 9045|      0|                ap++;
 9046|      0|                *tmp___0 = p;
 9047|      0|                p = p->fts_link;
 9048|      0|            }
 9049|      0|while_break___1: /* CIL Label */
 9050|      0|            ;
 9051|      0|        }
 9052|      0|while_break : {
 9053|      0|            qsort((void *)sp->fts_array, nitems, sizeof(FTSENT *), compare);
 9054|      0|            ap = sp->fts_array;
 9055|      0|            head = *ap;
 9056|      0|        }
 9057|      0|        {
 9058|      0|            while (1) {
 9059|      0|while_continue___0: /* CIL Label */
 9060|      0|                ;
 9061|      0|                nitems--;
 9062|      0|                if (!nitems) {
 9063|      0|                    goto while_break___0;
 9064|      0|                }
 9065|      0|                (*(ap + 0))->fts_link = *(ap + 1);
 9066|      0|                ap++;
 9067|      0|            }
 9068|      0|while_break___2: /* CIL Label */
 9069|      0|            ;
 9070|      0|        }
 9071|      0|while_break___0:
 9072|      0|        (*(ap + 0))->fts_link = (struct _ftsent *)((void *)0);
 9073|      0|        return (head);
 9074|      0|    }
 9075|      0|}
 9076|       |static FTSENT *fts_alloc(FTS *sp, char const *name, size_t namelen)
 9077|      6|{
 9078|      6|    register FTSENT *p;
 9079|      6|    size_t len;
 9080|       |
 9081|      6|    {
 9082|      6|        {
 9083|      6|            len = sizeof(FTSENT) + namelen;
 9084|      6|            p = (FTSENT *)malloc(len);
 9085|      6|        }
 9086|      6|        if ((unsigned long)p == (unsigned long)((void *)0)) {
 9087|      0|            return ((FTSENT *)((void *)0));
 9088|      0|        }
 9089|      6|        {
 9090|      6|            memcpy((void * /* __restrict  */)((void *)(p->fts_name)), (void const * /* __restrict  */)((void const *)name),
 9091|      6|                   namelen);
 9092|      6|            p->fts_name[namelen] = (char)'\000';
 9093|      6|            p->fts_namelen = namelen;
 9094|      6|            p->fts_fts = sp;
 9095|      6|            p->fts_path = sp->fts_path;
 9096|      6|            p->fts_errno = 0;
 9097|      6|            p->fts_dirp = (DIR *)((void *)0);
 9098|      6|            p->fts_flags = (unsigned short)0;
 9099|      6|            p->fts_instr = (unsigned short)3;
 9100|      6|            p->fts_number = 0L;
 9101|      6|            p->fts_pointer = (void *)0;
 9102|      6|        }
 9103|      6|        return (p);
 9104|      6|    }
 9105|      6|}
 9106|       |static void fts_lfree(FTSENT *head)
 9107|      0|{
 9108|      0|    register FTSENT *p;
 9109|       |
 9110|      0|    {
 9111|      0|        {
 9112|      0|            while (1) {
 9113|      0|while_continue: /* CIL Label */
 9114|      0|                ;
 9115|      0|                p = head;
 9116|      0|                if (!p) {
 9117|      0|                    goto while_break;
 9118|      0|                }
 9119|      0|                head = head->fts_link;
 9120|      0|                if (p->fts_dirp) {
 9121|      0|                    {
 9122|      0|                        closedir(p->fts_dirp);
 9123|      0|                    }
 9124|      0|                }
 9125|      0|                {
 9126|      0|                    free((void *)p);
 9127|      0|                }
 9128|      0|            }
 9129|      0|while_break___0: /* CIL Label */
 9130|      0|            ;
 9131|      0|        }
 9132|      0|while_break:
 9133|      0|        ;
 9134|      0|        return;
 9135|      0|    }
 9136|      0|}
 9137|       |static _Bool fts_palloc(FTS *sp, size_t more)
 9138|      1|{
 9139|      1|    char *p;
 9140|      1|    size_t new_len;
 9141|      1|    int *tmp;
 9142|       |
 9143|      1|    {
 9144|      1|        new_len = (sp->fts_pathlen + more) + 256UL;
 9145|      1|        if (new_len < sp->fts_pathlen) {
 9146|      0|            {
 9147|      0|                free((void *)sp->fts_path);
 9148|      0|                sp->fts_path = (char *)((void *)0);
 9149|      0|                tmp = __errno_location();
 9150|      0|                *tmp = 36;
 9151|      0|            }
 9152|      0|            return ((_Bool)0);
 9153|      0|        }
 9154|      1|        {
 9155|      1|            sp->fts_pathlen = new_len;
 9156|      1|            p = (char *)realloc((void *)sp->fts_path, sp->fts_pathlen);
 9157|      1|        }
 9158|      1|        if ((unsigned long)p == (unsigned long)((void *)0)) {
 9159|      0|            {
 9160|      0|                free((void *)sp->fts_path);
 9161|      0|                sp->fts_path = (char *)((void *)0);
 9162|      0|            }
 9163|      0|            return ((_Bool)0);
 9164|      0|        }
 9165|      1|        sp->fts_path = p;
 9166|      1|        return ((_Bool)1);
 9167|      1|    }
 9168|      1|}
 9169|       |static void fts_padjust(FTS *sp, FTSENT *head)
 9170|      0|{
 9171|      0|    FTSENT *p;
 9172|      0|    char *addr;
 9173|       |
 9174|      0|    {
 9175|      0|        addr = sp->fts_path;
 9176|      0|        p = sp->fts_child;
 9177|      0|        {
 9178|      0|            while (1) {
 9179|      0|while_continue: /* CIL Label */
 9180|      0|                ;
 9181|       |
 9182|      0|                if (!p) {
 9183|      0|                    goto while_break;
 9184|      0|                }
 9185|      0|                {
 9186|      0|                    while (1) {
 9187|      0|while_continue___0: /* CIL Label */
 9188|      0|                        ;
 9189|       |
 9190|      0|                        if ((unsigned long)p->fts_accpath != (unsigned long)(p->fts_name)) {
 9191|      0|                            p->fts_accpath = addr + (p->fts_accpath - p->fts_path);
 9192|      0|                        }
 9193|      0|                        p->fts_path = addr;
 9194|      0|                        goto while_break___0;
 9195|      0|                    }
 9196|      0|while_break___4: /* CIL Label */
 9197|      0|                    ;
 9198|      0|                }
 9199|      0|while_break___0:
 9200|      0|                p = p->fts_link;
 9201|      0|            }
 9202|      0|while_break___3: /* CIL Label */
 9203|      0|            ;
 9204|      0|        }
 9205|      0|while_break:
 9206|      0|        p = head;
 9207|      0|        {
 9208|      0|            while (1) {
 9209|      0|while_continue___1: /* CIL Label */
 9210|      0|                ;
 9211|       |
 9212|      0|                if (!(p->fts_level >= 0L)) {
 9213|      0|                    goto while_break___1;
 9214|      0|                }
 9215|      0|                {
 9216|      0|                    while (1) {
 9217|      0|while_continue___2: /* CIL Label */
 9218|      0|                        ;
 9219|       |
 9220|      0|                        if ((unsigned long)p->fts_accpath != (unsigned long)(p->fts_name)) {
 9221|      0|                            p->fts_accpath = addr + (p->fts_accpath - p->fts_path);
 9222|      0|                        }
 9223|      0|                        p->fts_path = addr;
 9224|      0|                        goto while_break___2;
 9225|      0|                    }
 9226|      0|while_break___6: /* CIL Label */
 9227|      0|                    ;
 9228|      0|                }
 9229|      0|while_break___2:
 9230|      0|                ;
 9231|      0|                if (p->fts_link) {
 9232|      0|                    p = p->fts_link;
 9233|      0|                }
 9234|      0|                else {
 9235|      0|                    p = p->fts_parent;
 9236|      0|                }
 9237|      0|            }
 9238|      0|while_break___5: /* CIL Label */
 9239|      0|            ;
 9240|      0|        }
 9241|      0|while_break___1:
 9242|      0|        ;
 9243|      0|        return;
 9244|      0|    }
 9245|      0|}
 9246|       |static size_t __attribute__((__pure__)) fts_maxarglen(char *const *argv)
 9247|      1|{
 9248|      1|    size_t len;
 9249|      1|    size_t max;
 9250|       |
 9251|      1|    {
 9252|      1|        max = (size_t)0;
 9253|      1|        {
 9254|      2|            while (1) {
 9255|      2|while_continue: /* CIL Label */
 9256|      2|                ;
 9257|       |
 9258|      2|                if (!*argv) {
 9259|      1|                    goto while_break;
 9260|      1|                }
 9261|      1|                {
 9262|      1|                    len = strlen((char const *)*argv);
 9263|      1|                }
 9264|      1|                if (len > max) {
 9265|      1|                    max = len;
 9266|      1|                }
 9267|      1|                argv++;
 9268|      1|            }
 9269|      0|while_break___0: /* CIL Label */
 9270|      0|            ;
 9271|      0|        }
 9272|      1|while_break:
 9273|      1|        ;
 9274|      1|        return ((size_t __attribute__((__pure__)))(max + 1UL));
 9275|      0|    }
 9276|      0|}
 9277|       |static int fts_safe_changedir(FTS *sp, FTSENT *p, int fd, char const *dir)
 9278|      1|{
 9279|      1|    int ret;
 9280|      1|    _Bool is_dotdot;
 9281|      1|    int tmp;
 9282|      1|    int tmp___0;
 9283|      1|    int newfd;
 9284|      1|    int parent_fd;
 9285|      1|    _Bool tmp___1;
 9286|      1|    struct stat sb;
 9287|      1|    int tmp___2;
 9288|      1|    int *tmp___3;
 9289|      1|    int tmp___4;
 9290|      1|    int oerrno;
 9291|      1|    int *tmp___5;
 9292|      1|    int *tmp___6;
 9293|      1|    void *__cil_tmp20;
 9294|       |
 9295|      1|    {
 9296|      1|        if (dir) {
 9297|      0|            {
 9298|      0|                tmp = strcmp(dir, "..");
 9299|      0|            }
 9300|      0|            if (tmp == 0) {
 9301|      0|                tmp___0 = 1;
 9302|      0|            }
 9303|      0|            else {
 9304|      0|                tmp___0 = 0;
 9305|      0|            }
 9306|      0|        }
 9307|      1|        else {
 9308|      1|            tmp___0 = 0;
 9309|      1|        }
 9310|      1|        is_dotdot = (_Bool)tmp___0;
 9311|      1|        if (sp->fts_options & 4) {
 9312|      0|            if (sp->fts_options & 512) {
 9313|      0|                if (0 <= fd) {
 9314|      0|                    {
 9315|      0|                        close(fd);
 9316|      0|                    }
 9317|      0|                }
 9318|      0|            }
 9319|      0|            return (0);
 9320|      0|        }
 9321|      1|        if (fd < 0) {
 9322|      0|            if (is_dotdot) {
 9323|      0|                if (sp->fts_options & 512) {
 9324|      0|                    {
 9325|      0|                        tmp___1 = i_ring_empty((I_ring const *)(&sp->fts_fd_ring));
 9326|      0|                    }
 9327|      0|                    if (!tmp___1) {
 9328|      0|                        {
 9329|      0|                            parent_fd = i_ring_pop(&sp->fts_fd_ring);
 9330|      0|                            is_dotdot = (_Bool)1;
 9331|      0|                        }
 9332|      0|                        if (0 <= parent_fd) {
 9333|      0|                            fd = parent_fd;
 9334|      0|                            dir = (char const *)((void *)0);
 9335|      0|                        }
 9336|      0|                    }
 9337|      0|                }
 9338|      0|            }
 9339|      0|        }
 9340|      1|        newfd = fd;
 9341|      1|        if (fd < 0) {
 9342|      0|            {
 9343|      0|                newfd = diropen((FTS const *)sp, dir);
 9344|      0|            }
 9345|      0|            if (newfd < 0) {
 9346|      0|                return (-1);
 9347|      0|            }
 9348|      0|        }
 9349|      1|        if (sp->fts_options & 2) {
 9350|      0|            goto _L;
 9351|      0|        }
 9352|      1|        else {
 9353|      1|            if (dir) {
 9354|      0|                {
 9355|      0|                    tmp___4 = strcmp(dir, "..");
 9356|      0|                }
 9357|      0|                if (tmp___4 == 0) {
 9358|      0|_L : {
 9359|      0|                        tmp___2 = fstat(newfd, &sb);
 9360|      0|                    }
 9361|      0|                    if (tmp___2) {
 9362|      0|                        ret = -1;
 9363|      0|                        goto bail;
 9364|      0|                    }
 9365|      0|                    if (p->fts_statp[0].st_dev != sb.st_dev) {
 9366|      0|                        {
 9367|      0|                            tmp___3 = __errno_location();
 9368|      0|                            *tmp___3 = 2;
 9369|      0|                            ret = -1;
 9370|      0|                        }
 9371|      0|                        goto bail;
 9372|      0|                    }
 9373|      0|                    else {
 9374|      0|                        if (p->fts_statp[0].st_ino != sb.st_ino) {
 9375|      0|                            {
 9376|      0|                                tmp___3 = __errno_location();
 9377|      0|                                *tmp___3 = 2;
 9378|      0|                                ret = -1;
 9379|      0|                            }
 9380|      0|                            goto bail;
 9381|      0|                        }
 9382|      0|                    }
 9383|      0|                }
 9384|      0|            }
 9385|      1|        }
 9386|      1|        if (sp->fts_options & 512) {
 9387|      1|            {
 9388|      1|                cwd_advance_fd(sp, newfd, (_Bool)(!is_dotdot));
 9389|      1|            }
 9390|      1|            return (0);
 9391|      1|        }
 9392|      0|        {
 9393|      0|            ret = fchdir(newfd);
 9394|      0|        }
 9395|      0|bail:
 9396|      0|        if (fd < 0) {
 9397|      0|            {
 9398|      0|                tmp___5 = __errno_location();
 9399|      0|                oerrno = *tmp___5;
 9400|      0|                close(newfd);
 9401|      0|                tmp___6 = __errno_location();
 9402|      0|                *tmp___6 = oerrno;
 9403|      0|            }
 9404|      0|        }
 9405|      0|        return (ret);
 9406|      0|    }
 9407|      0|}
 9408|       |extern __attribute__((__nothrow__)) void *(__attribute__((__nonnull__(1, 2))) mempcpy)(void *__restrict __dest,
 9409|       |        void const *__restrict __src,
 9410|       |        size_t __n);
 9411|       |int fd_safer(int fd)
 9412|      6|{
 9413|      6|    int f;
 9414|      6|    int tmp;
 9415|      6|    int e;
 9416|      6|    int *tmp___0;
 9417|      6|    int *tmp___1;
 9418|       |
 9419|      6|    {
 9420|      6|        if (0 <= fd) {
 9421|      6|            if (fd <= 2) {
 9422|      0|                {
 9423|      0|                    tmp = dup_safer(fd);
 9424|      0|                    f = tmp;
 9425|      0|                    tmp___0 = __errno_location();
 9426|      0|                    e = *tmp___0;
 9427|      0|                    close(fd);
 9428|      0|                    tmp___1 = __errno_location();
 9429|      0|                    *tmp___1 = e;
 9430|      0|                    fd = f;
 9431|      0|                }
 9432|      0|            }
 9433|      6|        }
 9434|      6|        return (fd);
 9435|      6|    }
 9436|      6|}
 9437|       |extern int fcntl(int __fd, int __cmd, ...);
 9438|       |int rpl_fcntl(int fd, int action, ...);
 9439|       |static int have_dupfd_cloexec = 0;
 9440|       |int rpl_fcntl(int fd, int action, ...)
 9441|      5|{
 9442|      5|    va_list arg;
 9443|      5|    int result;
 9444|      5|    int target;
 9445|      5|    int tmp;
 9446|      5|    int *tmp___0;
 9447|      5|    int flags;
 9448|      5|    int tmp___1;
 9449|      5|    int saved_errno;
 9450|      5|    int *tmp___2;
 9451|      5|    int *tmp___3;
 9452|      5|    int tmp___4;
 9453|      5|    void *p;
 9454|      5|    void *tmp___5;
 9455|       |
 9456|      5|    {
 9457|      5|        {
 9458|      5|            result = -1;
 9459|      5|            __builtin_va_start(arg, action);
 9460|      5|        }
 9461|      5|        if (action == 1030) {
 9462|      0|            goto case_1030;
 9463|      0|        }
 9464|      5|        goto switch_default;
 9465|      5|case_1030 : {
 9466|      0|            tmp = __builtin_va_arg(arg, int);
 9467|      0|            target = tmp;
 9468|      0|        }
 9469|      0|        if (0 <= have_dupfd_cloexec) {
 9470|      0|            {
 9471|      0|                result = fcntl(fd, action, target);
 9472|      0|            }
 9473|      0|            if (0 <= result) {
 9474|      0|                have_dupfd_cloexec = 1;
 9475|      0|            }
 9476|      0|            else {
 9477|      0|                {
 9478|      0|                    tmp___0 = __errno_location();
 9479|      0|                }
 9480|      0|                if (*tmp___0 != 22) {
 9481|      0|                    have_dupfd_cloexec = 1;
 9482|      0|                }
 9483|      0|                else {
 9484|      0|                    {
 9485|      0|                        result = rpl_fcntl(fd, 0, target);
 9486|      0|                    }
 9487|      0|                    if (result < 0) {
 9488|      0|                        goto switch_break;
 9489|      0|                    }
 9490|      0|                    have_dupfd_cloexec = -1;
 9491|      0|                }
 9492|      0|            }
 9493|      0|        }
 9494|      0|        else {
 9495|      0|            {
 9496|      0|                result = rpl_fcntl(fd, 0, target);
 9497|      0|            }
 9498|      0|        }
 9499|      0|        if (0 <= result) {
 9500|      0|            if (have_dupfd_cloexec == -1) {
 9501|      0|                {
 9502|      0|                    tmp___1 = fcntl(result, 1);
 9503|      0|                    flags = tmp___1;
 9504|      0|                }
 9505|      0|                if (flags < 0) {
 9506|      0|                    goto _L;
 9507|      0|                }
 9508|      0|                else {
 9509|      0|                    {
 9510|      0|                        tmp___4 = fcntl(result, 2, flags | 1);
 9511|      0|                    }
 9512|      0|                    if (tmp___4 == -1) {
 9513|      0|_L : {
 9514|      0|                            tmp___2 = __errno_location();
 9515|      0|                            saved_errno = *tmp___2;
 9516|      0|                            close(result);
 9517|      0|                            tmp___3 = __errno_location();
 9518|      0|                            *tmp___3 = saved_errno;
 9519|      0|                            result = -1;
 9520|      0|                        }
 9521|      0|                    }
 9522|      0|                }
 9523|      0|            }
 9524|      0|        }
 9525|      0|        goto switch_break;
 9526|      5|switch_default : {
 9527|      5|            tmp___5 = __builtin_va_arg(arg, void *);
 9528|      5|            p = tmp___5;
 9529|      5|            result = fcntl(fd, action, p);
 9530|      5|        }
 9531|      5|        goto switch_break;
 9532|      5|switch_break : {
 9533|      5|            __builtin_va_end(arg);
 9534|      5|        }
 9535|      5|        return (result);
 9536|      0|    }
 9537|      0|}
 9538|       |int volatile exit_failure = (int volatile)1;
 9539|       |extern struct _IO_FILE *stdin;
 9540|       |extern FILE *fopen(char const *__restrict __filename, char const *__restrict __modes);
 9541|       |extern __attribute__((__nothrow__)) int ferror_unlocked(FILE *__stream);
 9542|       |extern int regcomp(regex_t *__restrict __preg, char const *__restrict __pattern,
 9543|       |                   int __cflags);
 9544|       |extern int regexec(regex_t const *__restrict __preg, char const *__restrict __string,
 9545|       |                   size_t __nmatch, regmatch_t *__restrict __pmatch, int __eflags);
 9546|       |_Bool fnmatch_pattern_has_wildcards(char const *str, int options) __attribute__((__pure__));
 9547|       |struct exclude *new_exclude(void);
 9548|       |void add_exclude(struct exclude *ex, char const *pattern, int options);
 9549|       |int add_exclude_file(void (*add_func)(struct exclude *, char const *, int),
 9550|       |                     struct exclude *ex, char const *file_name___1, int options,
 9551|       |                     char line_end);
 9552|       |int add_exclude_fp(void (*add_func)(struct exclude *, char const *, int, void *),
 9553|       |                   struct exclude *ex, FILE *fp, int options, char line_end, void *data);
 9554|       |_Bool excluded_file_name(struct exclude const *ex, char const *f);
 9555|       |void exclude_add_pattern_buffer(struct exclude *ex, char *buf);
 9556|       |_Bool exclude_fnmatch(char const *pattern, char const *f, int options);
 9557|       |extern int fnmatch(char const *__pattern, char const *__name, int __flags);
 9558|       |void exclude_add_pattern_buffer(struct exclude *ex, char *buf)
 9559|      0|{
 9560|      0|    struct pattern_buffer *pbuf;
 9561|      0|    struct pattern_buffer *tmp;
 9562|       |
 9563|      0|    {
 9564|      0|        {
 9565|      0|            tmp = (struct pattern_buffer *)xmalloc(sizeof(*pbuf));
 9566|      0|            pbuf = tmp;
 9567|      0|            pbuf->base = buf;
 9568|      0|            pbuf->next = ex->patbuf;
 9569|      0|            ex->patbuf = pbuf;
 9570|      0|        }
 9571|      0|        return;
 9572|      0|    }
 9573|      0|}
 9574|       |_Bool fnmatch_pattern_has_wildcards(char const *str, int options) __attribute__((__pure__));
 9575|       |_Bool fnmatch_pattern_has_wildcards(char const *str, int options)
 9576|      0|{
 9577|      0|    char const *tmp;
 9578|      0|    int tmp___0;
 9579|       |
 9580|      0|    {
 9581|      0|        {
 9582|      0|            while (1) {
 9583|      0|while_continue___0: /* CIL Label */
 9584|      0|                ;
 9585|      0|while_continue:
 9586|      0|                tmp = str;
 9587|      0|                str++;
 9588|      0|                if ((int const) * tmp == 46) {
 9589|      0|                    goto case_46;
 9590|      0|                }
 9591|      0|                if ((int const) * tmp == 123) {
 9592|      0|                    goto case_46;
 9593|      0|                }
 9594|      0|                if ((int const) * tmp == 125) {
 9595|      0|                    goto case_46;
 9596|      0|                }
 9597|      0|                if ((int const) * tmp == 40) {
 9598|      0|                    goto case_46;
 9599|      0|                }
 9600|      0|                if ((int const) * tmp == 41) {
 9601|      0|                    goto case_46;
 9602|      0|                }
 9603|      0|                if ((int const) * tmp == 92) {
 9604|      0|                    goto case_92;
 9605|      0|                }
 9606|      0|                if ((int const) * tmp == 43) {
 9607|      0|                    goto case_43;
 9608|      0|                }
 9609|      0|                if ((int const) * tmp == 64) {
 9610|      0|                    goto case_43;
 9611|      0|                }
 9612|      0|                if ((int const) * tmp == 33) {
 9613|      0|                    goto case_43;
 9614|      0|                }
 9615|      0|                if ((int const) * tmp == 63) {
 9616|      0|                    goto case_63;
 9617|      0|                }
 9618|      0|                if ((int const) * tmp == 42) {
 9619|      0|                    goto case_63;
 9620|      0|                }
 9621|      0|                if ((int const) * tmp == 91) {
 9622|      0|                    goto case_63;
 9623|      0|                }
 9624|      0|                if ((int const) * tmp == 0) {
 9625|      0|                    goto case_0;
 9626|      0|                }
 9627|      0|                goto switch_break;
 9628|      0|case_46:
 9629|      0|                if (options & (1 << 27)) {
 9630|      0|                    return ((_Bool)1);
 9631|      0|                }
 9632|      0|                goto switch_break;
 9633|      0|case_92:
 9634|      0|                if (options & (1 << 27)) {
 9635|      0|                    goto while_continue;
 9636|      0|                }
 9637|      0|                else {
 9638|      0|                    if (!(options & (1 << 1))) {
 9639|      0|                        if (*str) {
 9640|      0|                            tmp___0 = 1;
 9641|      0|                        }
 9642|      0|                        else {
 9643|      0|                            tmp___0 = 0;
 9644|      0|                        }
 9645|      0|                    }
 9646|      0|                    else {
 9647|      0|                        tmp___0 = 0;
 9648|      0|                    }
 9649|      0|                    str += tmp___0;
 9650|      0|                }
 9651|      0|                goto switch_break;
 9652|      0|case_43:
 9653|      0|                if (options & (1 << 5)) {
 9654|      0|                    if ((int const) * str == 40) {
 9655|      0|                        return ((_Bool)1);
 9656|      0|                    }
 9657|      0|                }
 9658|      0|                goto switch_break;
 9659|      0|case_63:
 9660|      0|                return ((_Bool)1);
 9661|      0|case_0:
 9662|      0|                return ((_Bool)0);
 9663|      0|switch_break:
 9664|      0|                ;
 9665|      0|            }
 9666|      0|while_break: /* CIL Label */
 9667|      0|            ;
 9668|      0|        }
 9669|       |
 9670|      0|        return ((_Bool)0);
 9671|      0|    }
 9672|      0|}
 9673|       |static void unescape_pattern(char *str)
 9674|      0|{
 9675|      0|    char const *q;
 9676|      0|    int tmp;
 9677|      0|    char *tmp___0;
 9678|      0|    char tmp___1;
 9679|      0|    char const *tmp___2;
 9680|       |
 9681|      0|    {
 9682|      0|        q = (char const *)str;
 9683|      0|        {
 9684|      0|            while (1) {
 9685|      0|while_continue: /* CIL Label */
 9686|      0|                ;
 9687|       |
 9688|      0|                if ((int const) * q == 92) {
 9689|      0|                    if (*(q + 1)) {
 9690|      0|                        tmp = 1;
 9691|      0|                    }
 9692|      0|                    else {
 9693|      0|                        tmp = 0;
 9694|      0|                    }
 9695|      0|                }
 9696|      0|                else {
 9697|      0|                    tmp = 0;
 9698|      0|                }
 9699|      0|                q += tmp;
 9700|      0|                tmp___0 = str;
 9701|      0|                str++;
 9702|      0|                tmp___2 = q;
 9703|      0|                q++;
 9704|      0|                tmp___1 = (char)*tmp___2;
 9705|      0|                *tmp___0 = tmp___1;
 9706|      0|                if (!tmp___1) {
 9707|      0|                    goto while_break;
 9708|      0|                }
 9709|      0|            }
 9710|      0|while_break___0: /* CIL Label */
 9711|      0|            ;
 9712|      0|        }
 9713|      0|while_break:
 9714|      0|        ;
 9715|      0|        return;
 9716|      0|    }
 9717|      0|}
 9718|       |struct exclude *new_exclude(void)
 9719|      0|{
 9720|      0|    struct exclude *tmp;
 9721|      0|    struct exclude *tmp___0;
 9722|       |
 9723|      0|    {
 9724|      0|        {
 9725|      0|            tmp___0 = (struct exclude *)xzalloc(sizeof(*tmp));
 9726|      0|        }
 9727|      0|        return (tmp___0);
 9728|      0|    }
 9729|      0|}
 9730|       |static size_t string_hasher(void const *data, size_t n_buckets)
 9731|      0|{
 9732|      0|    char const *p;
 9733|      0|    size_t tmp;
 9734|       |
 9735|      0|    {
 9736|      0|        {
 9737|      0|            p = (char const *)data;
 9738|      0|            tmp = hash_string(p, n_buckets);
 9739|      0|        }
 9740|      0|        return (tmp);
 9741|      0|    }
 9742|      0|}
 9743|       |static size_t string_hasher_ci(void const *data, size_t n_buckets)
 9744|      0|{
 9745|      0|    char const *p;
 9746|      0|    mbui_iterator_t iter;
 9747|      0|    size_t value;
 9748|      0|    mbchar_t m;
 9749|      0|    wchar_t wc;
 9750|      0|    int tmp;
 9751|      0|    void *__cil_tmp13;
 9752|      0|    void *__cil_tmp14;
 9753|      0|    void *__cil_tmp15;
 9754|       |
 9755|      0|    {
 9756|      0|        {
 9757|      0|            p = (char const *)data;
 9758|      0|            value = (size_t)0;
 9759|      0|            iter.cur.ptr = p;
 9760|      0|            iter.in_shift = (_Bool)0;
 9761|      0|            memset((void *)(&iter.state), '\000', sizeof(mbstate_t));
 9762|      0|            iter.next_done = (_Bool)0;
 9763|      0|        }
 9764|      0|        {
 9765|      0|            while (1) {
 9766|      0|while_continue: /* CIL Label */
 9767|      0|                ;
 9768|      0|                {
 9769|      0|                    mbuiter_multi_next(&iter);
 9770|      0|                }
 9771|      0|                if (iter.cur.wc_valid) {
 9772|      0|                    if (iter.cur.wc == 0) {
 9773|      0|                        tmp = 0;
 9774|      0|                    }
 9775|      0|                    else {
 9776|      0|                        tmp = 1;
 9777|      0|                    }
 9778|      0|                }
 9779|      0|                else {
 9780|      0|                    tmp = 1;
 9781|      0|                }
 9782|      0|                if (!tmp) {
 9783|      0|                    goto while_break;
 9784|      0|                }
 9785|      0|                m = iter.cur;
 9786|      0|                if (m.wc_valid) {
 9787|      0|                    {
 9788|      0|                        wc = (wchar_t)towlower((wint_t)m.wc);
 9789|      0|                    }
 9790|      0|                }
 9791|      0|                else {
 9792|      0|                    wc = (wchar_t) * (m.ptr);
 9793|      0|                }
 9794|      0|                value = (value * 31UL + (size_t)wc) % n_buckets;
 9795|      0|                iter.cur.ptr += iter.cur.bytes;
 9796|      0|                iter.next_done = (_Bool)0;
 9797|      0|            }
 9798|      0|while_break___0: /* CIL Label */
 9799|      0|            ;
 9800|      0|        }
 9801|      0|while_break:
 9802|      0|        ;
 9803|      0|        return (value);
 9804|      0|    }
 9805|      0|}
 9806|       |static _Bool string_compare(void const *data1, void const *data2)
 9807|      0|{
 9808|      0|    char const *p1;
 9809|      0|    char const *p2;
 9810|      0|    int tmp;
 9811|       |
 9812|      0|    {
 9813|      0|        {
 9814|      0|            p1 = (char const *)data1;
 9815|      0|            p2 = (char const *)data2;
 9816|      0|            tmp = strcmp(p1, p2);
 9817|      0|        }
 9818|      0|        return ((_Bool)(tmp == 0));
 9819|      0|    }
 9820|      0|}
 9821|       |static _Bool string_compare_ci(void const *data1, void const *data2)
 9822|      0|{
 9823|      0|    char const *p1;
 9824|      0|    char const *p2;
 9825|      0|    int tmp;
 9826|       |
 9827|      0|    {
 9828|      0|        {
 9829|      0|            p1 = (char const *)data1;
 9830|      0|            p2 = (char const *)data2;
 9831|      0|            tmp = mbscasecmp(p1, p2);
 9832|      0|        }
 9833|      0|        return ((_Bool)(tmp == 0));
 9834|      0|    }
 9835|      0|}
 9836|       |static void string_free(void *data)
 9837|      0|{
 9838|       |
 9839|      0|    {
 9840|      0|        {
 9841|      0|            free(data);
 9842|      0|        }
 9843|      0|        return;
 9844|      0|    }
 9845|      0|}
 9846|       |static void new_exclude_segment(struct exclude *ex, enum exclude_type type, int options)
 9847|      0|{
 9848|      0|    struct exclude_segment *sp;
 9849|      0|    struct exclude_segment *tmp;
 9850|      0|    _Bool (*tmp___0)(void const *data1, void const *data2);
 9851|      0|    size_t (*tmp___1)(void const *data, size_t n_buckets);
 9852|       |
 9853|      0|    {
 9854|      0|        {
 9855|      0|            tmp = (struct exclude_segment *)xzalloc(sizeof(struct exclude_segment));
 9856|      0|            sp = tmp;
 9857|      0|            sp->type = type;
 9858|      0|            sp->options = options;
 9859|      0|        }
 9860|      0|        if ((unsigned int)type == 1U) {
 9861|      0|            goto case_1;
 9862|      0|        }
 9863|      0|        if ((unsigned int)type == 0U) {
 9864|      0|            goto case_0;
 9865|      0|        }
 9866|      0|        goto switch_break;
 9867|      0|case_1:
 9868|      0|        goto switch_break;
 9869|      0|case_0:
 9870|      0|        if (options & (1 << 4)) {
 9871|      0|            tmp___0 = &string_compare_ci;
 9872|      0|        }
 9873|      0|        else {
 9874|      0|            tmp___0 = &string_compare;
 9875|      0|        }
 9876|      0|        if (options & (1 << 4)) {
 9877|      0|            tmp___1 = &string_hasher_ci;
 9878|      0|        }
 9879|      0|        else {
 9880|      0|            tmp___1 = &string_hasher;
 9881|      0|        }
 9882|      0|        {
 9883|      0|            sp->v.table = hash_initialize((size_t)0, (Hash_tuning const *)((void *)0), tmp___1,
 9884|      0|                                          tmp___0, &string_free);
 9885|      0|        }
 9886|      0|        goto switch_break;
 9887|      0|switch_break:
 9888|      0|        sp->next = ex->head;
 9889|      0|        ex->head = sp;
 9890|      0|        return;
 9891|      0|    }
 9892|      0|}
 9893|       |static int fnmatch_no_wildcards(char const *pattern, char const *f, int options)
 9894|      0|{
 9895|      0|    int tmp;
 9896|      0|    int tmp___0;
 9897|      0|    int tmp___1;
 9898|      0|    size_t patlen;
 9899|      0|    size_t tmp___2;
 9900|      0|    int r;
 9901|      0|    int tmp___3;
 9902|      0|    char *fcopy;
 9903|      0|    char *tmp___4;
 9904|      0|    char *p;
 9905|      0|    int r___0;
 9906|      0|    char *tmp___5;
 9907|       |
 9908|      0|    {
 9909|      0|        if (!(options & (1 << 3))) {
 9910|      0|            if (options & (1 << 4)) {
 9911|      0|                {
 9912|      0|                    tmp = mbscasecmp(pattern, f);
 9913|      0|                    tmp___1 = tmp;
 9914|      0|                }
 9915|      0|            }
 9916|      0|            else {
 9917|      0|                {
 9918|      0|                    tmp___0 = strcmp(pattern, f);
 9919|      0|                    tmp___1 = tmp___0;
 9920|      0|                }
 9921|      0|            }
 9922|      0|            return (tmp___1);
 9923|      0|        }
 9924|      0|        else {
 9925|      0|            if (!(options & (1 << 4))) {
 9926|      0|                {
 9927|      0|                    tmp___2 = strlen(pattern);
 9928|      0|                    patlen = tmp___2;
 9929|      0|                    tmp___3 = strncmp(pattern, f, patlen);
 9930|      0|                    r = tmp___3;
 9931|      0|                }
 9932|      0|                if (!r) {
 9933|      0|                    r = (int)*(f + patlen);
 9934|      0|                    if (r == 47) {
 9935|      0|                        r = 0;
 9936|      0|                    }
 9937|      0|                }
 9938|      0|                return (r);
 9939|      0|            }
 9940|      0|            else {
 9941|      0|                {
 9942|      0|                    tmp___4 = xstrdup(f);
 9943|      0|                    fcopy = tmp___4;
 9944|      0|                    p = fcopy;
 9945|      0|                }
 9946|      0|                {
 9947|      0|                    while (1) {
 9948|      0|while_continue: /* CIL Label */
 9949|      0|                        ;
 9950|      0|                        {
 9951|      0|                            p = strchr((char const *)p, '/');
 9952|      0|                        }
 9953|      0|                        if (p) {
 9954|      0|                            *p = (char)'\000';
 9955|      0|                        }
 9956|      0|                        {
 9957|      0|                            r___0 = mbscasecmp(pattern, (char const *)fcopy);
 9958|      0|                        }
 9959|      0|                        if (!p) {
 9960|      0|                            goto while_break;
 9961|      0|                        }
 9962|      0|                        else {
 9963|      0|                            if (r___0 <= 0) {
 9964|      0|                                goto while_break;
 9965|      0|                            }
 9966|      0|                        }
 9967|      0|                        tmp___5 = p;
 9968|      0|                        p++;
 9969|      0|                        *tmp___5 = (char)'/';
 9970|      0|                    }
 9971|      0|while_break___0: /* CIL Label */
 9972|      0|                    ;
 9973|      0|                }
 9974|      0|while_break : {
 9975|      0|                    free((void *)fcopy);
 9976|      0|                }
 9977|      0|                return (r___0);
 9978|      0|            }
 9979|      0|        }
 9980|      0|    }
 9981|      0|}
 9982|       |_Bool exclude_fnmatch(char const *pattern, char const *f, int options)
 9983|      0|{
 9984|      0|    int (*matcher___0)(char const *, char const *, int);
 9985|      0|    int (*tmp)(char const *__pattern, char const *__name, int __flags);
 9986|      0|    _Bool matched;
 9987|      0|    int tmp___0;
 9988|      0|    char const *p;
 9989|      0|    int tmp___1;
 9990|       |
 9991|      0|    {
 9992|      0|        if (options & (1 << 28)) {
 9993|      0|            tmp = &fnmatch;
 9994|      0|        }
 9995|      0|        else {
 9996|      0|            tmp = &fnmatch_no_wildcards;
 9997|      0|        }
 9998|      0|        {
 9999|      0|            matcher___0 = tmp;
10000|      0|            tmp___0 = (*matcher___0)(pattern, f, options);
10001|      0|            matched = (_Bool)(tmp___0 == 0);
10002|      0|        }
10003|      0|        if (!(options & (1 << 30))) {
10004|      0|            p = f;
10005|      0|            {
10006|      0|                while (1) {
10007|      0|while_continue: /* CIL Label */
10008|      0|                    ;
10009|       |
10010|      0|                    if (*p) {
10011|      0|                        if (!(!matched)) {
10012|      0|                            goto while_break;
10013|      0|                        }
10014|      0|                    }
10015|      0|                    else {
10016|      0|                        goto while_break;
10017|      0|                    }
10018|      0|                    if ((int const) * p == 47) {
10019|      0|                        if ((int const) * (p + 1) != 47) {
10020|      0|                            {
10021|      0|                                tmp___1 = (*matcher___0)(pattern, p + 1, options);
10022|      0|                                matched = (_Bool)(tmp___1 == 0);
10023|      0|                            }
10024|      0|                        }
10025|      0|                    }
10026|      0|                    p++;
10027|      0|                }
10028|      0|while_break___0: /* CIL Label */
10029|      0|                ;
10030|      0|            }
10031|      0|while_break:
10032|      0|            ;
10033|      0|        }
10034|      0|        return (matched);
10035|      0|    }
10036|      0|}
10037|       |_Bool exclude_patopts(struct patopts const *opts, char const *f)
10038|      0|{
10039|      0|    int options;
10040|      0|    int tmp;
10041|      0|    _Bool tmp___0;
10042|      0|    int tmp___1;
10043|       |
10044|      0|    {
10045|      0|        options = (int)opts->options;
10046|      0|        if (options & (1 << 27)) {
10047|      0|            {
10048|      0|                tmp = regexec((regex_t const * /* __restrict  */)(&opts->v.re), (char const * /* __restrict  */)f,
10049|      0|                              (size_t)0, (regmatch_t * /* __restrict  */)((regmatch_t *)((void *)0)),
10050|      0|                              0);
10051|      0|                tmp___1 = tmp == 0;
10052|      0|            }
10053|      0|        }
10054|      0|        else {
10055|      0|            {
10056|      0|                tmp___0 = exclude_fnmatch((char const *)opts->v.pattern, f, options);
10057|      0|                tmp___1 = (int)tmp___0;
10058|      0|            }
10059|      0|        }
10060|      0|        return ((_Bool)tmp___1);
10061|      0|    }
10062|      0|}
10063|       |static _Bool file_pattern_matches(struct exclude_segment const *seg, char const *f)
10064|      0|{
10065|      0|    size_t exclude_count;
10066|      0|    struct patopts const *exclude;
10067|      0|    size_t i;
10068|      0|    _Bool tmp;
10069|       |
10070|      0|    {
10071|      0|        exclude_count = (size_t)seg->v.pat.exclude_count;
10072|      0|        exclude = (struct patopts const *)seg->v.pat.exclude;
10073|      0|        i = (size_t)0;
10074|      0|        {
10075|      0|            while (1) {
10076|      0|while_continue: /* CIL Label */
10077|      0|                ;
10078|       |
10079|      0|                if (!(i < exclude_count)) {
10080|      0|                    goto while_break;
10081|      0|                }
10082|      0|                {
10083|      0|                    tmp = exclude_patopts(exclude + i, f);
10084|      0|                }
10085|      0|                if (tmp) {
10086|      0|                    return ((_Bool)1);
10087|      0|                }
10088|      0|                i++;
10089|      0|            }
10090|      0|while_break___0: /* CIL Label */
10091|      0|            ;
10092|      0|        }
10093|      0|while_break:
10094|      0|        ;
10095|      0|        return ((_Bool)0);
10096|      0|    }
10097|      0|}
10098|       |static _Bool file_name_matches(struct exclude_segment const *seg, char const *f,
10099|       |                               char *buffer___0)
10100|      0|{
10101|      0|    int options;
10102|      0|    Hash_table *table;
10103|      0|    void *tmp;
10104|      0|    char *p;
10105|      0|    char *tmp___0;
10106|       |
10107|      0|    {
10108|      0|        options = (int)seg->options;
10109|      0|        table = (Hash_table *)seg->v.table;
10110|      0|        {
10111|      0|            while (1) {
10112|      0|while_continue: /* CIL Label */
10113|      0|                ;
10114|      0|                {
10115|      0|                    strcpy((char * /* __restrict  */)buffer___0, (char const * /* __restrict  */)f);
10116|      0|                }
10117|      0|                {
10118|      0|                    while (1) {
10119|      0|while_continue___1: /* CIL Label */
10120|      0|                        ;
10121|      0|while_continue___0 : {
10122|      0|                            tmp = hash_lookup((Hash_table const *)table, (void const *)buffer___0);
10123|      0|                        }
10124|      0|                        if (tmp) {
10125|      0|                            return ((_Bool)1);
10126|      0|                        }
10127|      0|                        if (options & (1 << 3)) {
10128|      0|                            {
10129|      0|                                tmp___0 = strrchr((char const *)buffer___0, '/');
10130|      0|                                p = tmp___0;
10131|      0|                            }
10132|      0|                            if (p) {
10133|      0|                                *p = (char)0;
10134|      0|                                goto while_continue___0;
10135|      0|                            }
10136|      0|                        }
10137|      0|                        goto while_break___0;
10138|      0|                    }
10139|      0|while_break___2: /* CIL Label */
10140|      0|                    ;
10141|      0|                }
10142|      0|while_break___0:
10143|      0|                ;
10144|      0|                if (!(options & (1 << 30))) {
10145|      0|                    {
10146|      0|                        f = (char const *)strchr(f, '/');
10147|      0|                    }
10148|      0|                    if (f) {
10149|      0|                        f++;
10150|      0|                    }
10151|      0|                }
10152|      0|                else {
10153|      0|                    goto while_break;
10154|      0|                }
10155|      0|                if (!f) {
10156|      0|                    goto while_break;
10157|      0|                }
10158|      0|            }
10159|      0|while_break___1: /* CIL Label */
10160|      0|            ;
10161|      0|        }
10162|      0|while_break:
10163|      0|        ;
10164|      0|        return ((_Bool)0);
10165|      0|    }
10166|      0|}
10167|       |_Bool excluded_file_name(struct exclude const *ex, char const *f)
10168|      0|{
10169|      0|    struct exclude_segment *seg;
10170|      0|    _Bool invert;
10171|      0|    char *filename___0;
10172|      0|    size_t tmp;
10173|      0|    _Bool tmp___0;
10174|      0|    _Bool tmp___1;
10175|       |
10176|      0|    {
10177|      0|        invert = (_Bool)0;
10178|      0|        filename___0 = (char *)((void *)0);
10179|      0|        if (!ex->head) {
10180|      0|            return ((_Bool)0);
10181|      0|        }
10182|      0|        seg = (struct exclude_segment *)ex->head;
10183|      0|        {
10184|      0|            while (1) {
10185|      0|while_continue: /* CIL Label */
10186|      0|                ;
10187|       |
10188|      0|                if ((unsigned int)seg->type == 0U) {
10189|      0|                    if (!filename___0) {
10190|      0|                        {
10191|      0|                            tmp = strlen(f);
10192|      0|                            filename___0 = (char *)xmalloc(tmp + 1UL);
10193|      0|                        }
10194|      0|                    }
10195|      0|                    {
10196|      0|                        tmp___0 = file_name_matches((struct exclude_segment const *)seg, f, filename___0);
10197|      0|                    }
10198|      0|                    if (tmp___0) {
10199|      0|                        goto while_break;
10200|      0|                    }
10201|      0|                }
10202|      0|                else {
10203|      0|                    {
10204|      0|                        tmp___1 = file_pattern_matches((struct exclude_segment const *)seg, f);
10205|      0|                    }
10206|      0|                    if (tmp___1) {
10207|      0|                        goto while_break;
10208|      0|                    }
10209|      0|                }
10210|      0|                if (!seg->next) {
10211|      0|                    invert = (_Bool)1;
10212|      0|                    goto while_break;
10213|      0|                }
10214|      0|                seg = seg->next;
10215|      0|            }
10216|      0|while_break___0: /* CIL Label */
10217|      0|            ;
10218|      0|        }
10219|      0|while_break : {
10220|      0|            free((void *)filename___0);
10221|      0|        }
10222|      0|        return ((_Bool)((int)invert ^ !(seg->options & (1 << 29))));
10223|      0|    }
10224|      0|}
10225|       |void add_exclude(struct exclude *ex, char const *pattern, int options)
10226|      0|{
10227|      0|    struct exclude_segment *seg;
10228|      0|    struct exclude_pattern *pat;
10229|      0|    struct patopts *patopts;
10230|      0|    size_t tmp;
10231|      0|    int rc;
10232|      0|    int cflags;
10233|      0|    int tmp___0;
10234|      0|    char *tmp___1;
10235|      0|    size_t len;
10236|      0|    size_t tmp___2;
10237|      0|    char *str;
10238|      0|    char *p;
10239|      0|    int exclude_hash_flags;
10240|      0|    _Bool tmp___3;
10241|      0|    char *__cil_tmp23;
10242|       |
10243|      0|    {
10244|      0|        if (options & ((1 << 27) | (1 << 28))) {
10245|      0|            {
10246|      0|                tmp___3 = fnmatch_pattern_has_wildcards(pattern, options);
10247|      0|            }
10248|      0|            if (tmp___3) {
10249|      0|                if (ex->head) {
10250|      0|                    if ((unsigned int)(ex->head)->type == 1U) {
10251|      0|                        if (!(((ex->head)->options & (1 << 29)) == (options & (1 << 29)))) {
10252|      0|                            {
10253|      0|                                new_exclude_segment(ex, (enum exclude_type)1, options);
10254|      0|                            }
10255|      0|                        }
10256|      0|                    }
10257|      0|                    else {
10258|      0|                        {
10259|      0|                            new_exclude_segment(ex, (enum exclude_type)1, options);
10260|      0|                        }
10261|      0|                    }
10262|      0|                }
10263|      0|                else {
10264|      0|                    {
10265|      0|                        new_exclude_segment(ex, (enum exclude_type)1, options);
10266|      0|                    }
10267|      0|                }
10268|      0|                seg = ex->head;
10269|      0|                pat = &seg->v.pat;
10270|      0|                if (pat->exclude_count == pat->exclude_alloc) {
10271|      0|                    {
10272|      0|                        pat->exclude = (struct patopts *)x2nrealloc((void *)pat->exclude, &pat->exclude_alloc,
10273|      0|                                       sizeof(*(pat->exclude)));
10274|      0|                    }
10275|      0|                }
10276|      0|                tmp = pat->exclude_count;
10277|      0|                (pat->exclude_count)++;
10278|      0|                patopts = pat->exclude + tmp;
10279|      0|                patopts->options = options;
10280|      0|                if (options & (1 << 27)) {
10281|      0|                    if (options & (1 << 4)) {
10282|      0|                        tmp___0 = 1 << 1;
10283|      0|                    }
10284|      0|                    else {
10285|      0|                        tmp___0 = 0;
10286|      0|                    }
10287|      0|                    cflags = ((1 << 3) | 1) | tmp___0;
10288|      0|                    if (options & (1 << 3)) {
10289|      0|                        {
10290|      0|                            tmp___2 = strlen(pattern);
10291|      0|                            len = tmp___2;
10292|      0|                        }
10293|      0|                        {
10294|      0|                            while (1) {
10295|      0|while_continue: /* CIL Label */
10296|      0|                                ;
10297|       |
10298|      0|                                if (len > 0UL) {
10299|      0|                                    if (!((int const) * (pattern + (len - 1UL)) == 47)) {
10300|      0|                                        goto while_break;
10301|      0|                                    }
10302|      0|                                }
10303|      0|                                else {
10304|      0|                                    goto while_break;
10305|      0|                                }
10306|      0|                                len--;
10307|      0|                            }
10308|      0|while_break___0: /* CIL Label */
10309|      0|                            ;
10310|      0|                        }
10311|      0|while_break:
10312|      0|                        ;
10313|      0|                        if (len == 0UL) {
10314|      0|                            rc = 1;
10315|      0|                        }
10316|      0|                        else {
10317|      0|                            {
10318|      0|                                tmp___1 = (char *)xmalloc(len + 7UL);
10319|      0|                                memcpy((void * /* __restrict  */)((void *)tmp___1), (void const * /* __restrict  */)((void const *)pattern),
10320|      0|                                       len);
10321|      0|                                strcpy((char * /* __restrict  */)(tmp___1 + len), (char const * /* __restrict  */) "(/.*)?");
10322|      0|                                rc = regcomp((regex_t * /* __restrict  */)(&patopts->v.re), (char const * /* __restrict  */)((char const *)tmp___1),
10323|      0|                                             cflags);
10324|      0|                                free((void *)tmp___1);
10325|      0|                            }
10326|      0|                        }
10327|      0|                    }
10328|      0|                    else {
10329|      0|                        {
10330|      0|                            rc = regcomp((regex_t * /* __restrict  */)(&patopts->v.re), (char const * /* __restrict  */)pattern,
10331|      0|                                         cflags);
10332|      0|                        }
10333|      0|                    }
10334|      0|                    if (rc) {
10335|      0|                        (pat->exclude_count)--;
10336|      0|                        return;
10337|      0|                    }
10338|      0|                }
10339|      0|                else {
10340|      0|                    if (options & (1 << 26)) {
10341|      0|                        {
10342|      0|                            pattern = (char const *)xstrdup(pattern);
10343|      0|                            exclude_add_pattern_buffer(ex, (char *)pattern);
10344|      0|                        }
10345|      0|                    }
10346|      0|                    patopts->v.pattern = pattern;
10347|      0|                }
10348|      0|            }
10349|      0|            else {
10350|      0|                goto _L;
10351|      0|            }
10352|      0|        }
10353|      0|        else {
10354|      0|_L:
10355|      0|            exclude_hash_flags = (((1 << 29) | (1 << 30)) | (1 << 3)) | (1 << 4);
10356|      0|            if (ex->head) {
10357|      0|                if ((unsigned int)(ex->head)->type == 0U) {
10358|      0|                    if (!(((ex->head)->options & exclude_hash_flags) == (options & exclude_hash_flags))) {
10359|      0|                        {
10360|      0|                            new_exclude_segment(ex, (enum exclude_type)0, options);
10361|      0|                        }
10362|      0|                    }
10363|      0|                }
10364|      0|                else {
10365|      0|                    {
10366|      0|                        new_exclude_segment(ex, (enum exclude_type)0, options);
10367|      0|                    }
10368|      0|                }
10369|      0|            }
10370|      0|            else {
10371|      0|                {
10372|      0|                    new_exclude_segment(ex, (enum exclude_type)0, options);
10373|      0|                }
10374|      0|            }
10375|      0|            {
10376|      0|                seg = ex->head;
10377|      0|                str = xstrdup(pattern);
10378|      0|            }
10379|      0|            if ((options & ((1 << 28) | (1 << 1))) == 1 << 28) {
10380|      0|                {
10381|      0|                    unescape_pattern(str);
10382|      0|                }
10383|      0|            }
10384|      0|            {
10385|      0|                p = (char *)hash_insert(seg->v.table, (void const *)str);
10386|      0|            }
10387|      0|            if ((unsigned long)p != (unsigned long)str) {
10388|      0|                {
10389|      0|                    free((void *)str);
10390|      0|                }
10391|      0|            }
10392|      0|        }
10393|      0|        return;
10394|      0|    }
10395|      0|}
10396|       |int add_exclude_fp(void (*add_func)(struct exclude *, char const *, int, void *),
10397|       |                   struct exclude *ex, FILE *fp, int options, char line_end, void *data)
10398|      0|{
10399|      0|    char *buf;
10400|      0|    char *p;
10401|      0|    char *pattern;
10402|      0|    char const *lim;
10403|      0|    size_t buf_alloc;
10404|      0|    size_t buf_count;
10405|      0|    int c;
10406|      0|    int e;
10407|      0|    size_t tmp;
10408|      0|    int *tmp___0;
10409|      0|    int tmp___1;
10410|      0|    int tmp___2;
10411|      0|    char *pattern_end;
10412|      0|    unsigned short const **tmp___3;
10413|      0|    unsigned short const **tmp___4;
10414|      0|    int *tmp___5;
10415|      0|    int tmp___6;
10416|       |
10417|      0|    {
10418|      0|        buf = (char *)((void *)0);
10419|      0|        buf_alloc = (size_t)0;
10420|      0|        buf_count = (size_t)0;
10421|      0|        e = 0;
10422|      0|        {
10423|      0|            while (1) {
10424|      0|while_continue: /* CIL Label */
10425|      0|                ;
10426|      0|                {
10427|      0|                    c = getc_unlocked(fp);
10428|      0|                }
10429|      0|                if (!(c != -1)) {
10430|      0|                    goto while_break;
10431|      0|                }
10432|      0|                if (buf_count == buf_alloc) {
10433|      0|                    {
10434|      0|                        buf = (char *)x2realloc((void *)buf, &buf_alloc);
10435|      0|                    }
10436|      0|                }
10437|      0|                tmp = buf_count;
10438|      0|                buf_count++;
10439|      0|                *(buf + tmp) = (char)c;
10440|      0|            }
10441|      0|while_break___2: /* CIL Label */
10442|      0|            ;
10443|      0|        }
10444|      0|while_break : {
10445|      0|            tmp___1 = ferror_unlocked(fp);
10446|      0|        }
10447|      0|        if (tmp___1) {
10448|      0|            {
10449|      0|                tmp___0 = __errno_location();
10450|      0|                e = *tmp___0;
10451|      0|            }
10452|      0|        }
10453|      0|        {
10454|      0|            buf = (char *)xrealloc((void *)buf, buf_count + 1UL);
10455|      0|            *(buf + buf_count) = line_end;
10456|      0|        }
10457|      0|        if (buf_count == 0UL) {
10458|      0|            tmp___2 = 0;
10459|      0|        }
10460|      0|        else {
10461|      0|            if ((int)*(buf + (buf_count - 1UL)) == (int)line_end) {
10462|      0|                tmp___2 = 0;
10463|      0|            }
10464|      0|            else {
10465|      0|                tmp___2 = 1;
10466|      0|            }
10467|      0|        }
10468|      0|        {
10469|      0|            lim = (char const *)((buf + buf_count) + tmp___2);
10470|      0|            exclude_add_pattern_buffer(ex, buf);
10471|      0|            pattern = buf;
10472|      0|            p = buf;
10473|      0|        }
10474|      0|        {
10475|      0|            while (1) {
10476|      0|while_continue___0: /* CIL Label */
10477|      0|                ;
10478|       |
10479|      0|                if (!((unsigned long)p < (unsigned long)lim)) {
10480|      0|                    goto while_break___0;
10481|      0|                }
10482|      0|                if ((int)*p == (int)line_end) {
10483|      0|                    {
10484|      0|                        pattern_end = p;
10485|      0|                        tmp___4 = __ctype_b_loc();
10486|      0|                    }
10487|      0|                    if ((int const) * (*tmp___4 + (int)((unsigned char)line_end)) & 8192) {
10488|      0|                        {
10489|      0|                            while (1) {
10490|      0|while_continue___1: /* CIL Label */
10491|      0|                                ;
10492|       |
10493|      0|                                if ((unsigned long)pattern_end == (unsigned long)pattern) {
10494|      0|                                    goto next_pattern;
10495|      0|                                }
10496|      0|                                else {
10497|      0|                                    {
10498|      0|                                        tmp___3 = __ctype_b_loc();
10499|      0|                                    }
10500|      0|                                    if (!((int const) * (*tmp___3 + (int)((unsigned char)*(pattern_end + -1))) & 8192)) {
10501|      0|                                        goto while_break___1;
10502|      0|                                    }
10503|      0|                                }
10504|      0|                                pattern_end--;
10505|      0|                            }
10506|      0|while_break___4: /* CIL Label */
10507|      0|                            ;
10508|      0|                        }
10509|      0|while_break___1:
10510|      0|                        ;
10511|      0|                    }
10512|      0|                    {
10513|      0|                        *pattern_end = (char)'\000';
10514|      0|                        (*add_func)(ex, (char const *)pattern, options, data);
10515|      0|                    }
10516|      0|next_pattern:
10517|      0|                    pattern = p + 1;
10518|      0|                }
10519|      0|                p++;
10520|      0|            }
10521|      0|while_break___3: /* CIL Label */
10522|      0|            ;
10523|      0|        }
10524|      0|while_break___0 : {
10525|      0|            tmp___5 = __errno_location();
10526|      0|            *tmp___5 = e;
10527|      0|        }
10528|      0|        if (e) {
10529|      0|            tmp___6 = -1;
10530|      0|        }
10531|      0|        else {
10532|      0|            tmp___6 = 0;
10533|      0|        }
10534|      0|        return (tmp___6);
10535|      0|    }
10536|      0|}
10537|       |static void call_addfn(struct exclude *ex, char const *pattern, int options,
10538|       |                       void *data)
10539|      0|{
10540|      0|    void (**addfnptr)(struct exclude *, char const *, int);
10541|       |
10542|      0|    {
10543|      0|        {
10544|      0|            addfnptr = (void (**)(struct exclude *, char const *, int))data;
10545|      0|            (*(*addfnptr))(ex, pattern, options);
10546|      0|        }
10547|      0|        return;
10548|      0|    }
10549|      0|}
10550|       |int add_exclude_file(void (*add_func)(struct exclude *, char const *, int),
10551|       |                     struct exclude *ex, char const *file_name___1, int options,
10552|       |                     char line_end)
10553|      0|{
10554|      0|    _Bool use_stdin;
10555|      0|    int tmp;
10556|      0|    FILE *in;
10557|      0|    int rc;
10558|      0|    int tmp___0;
10559|       |
10560|      0|    {
10561|      0|        if ((int const) * (file_name___1 + 0) == 45) {
10562|      0|            if (!*(file_name___1 + 1)) {
10563|      0|                tmp = 1;
10564|      0|            }
10565|      0|            else {
10566|      0|                tmp = 0;
10567|      0|            }
10568|      0|        }
10569|      0|        else {
10570|      0|            tmp = 0;
10571|      0|        }
10572|      0|        use_stdin = (_Bool)tmp;
10573|      0|        rc = 0;
10574|      0|        if (use_stdin) {
10575|      0|            in = stdin;
10576|      0|        }
10577|      0|        else {
10578|      0|            {
10579|      0|                in = fopen((char const * /* __restrict  */)file_name___1, (char const * /* __restrict  */) "r");
10580|      0|            }
10581|      0|            if (!in) {
10582|      0|                return (-1);
10583|      0|            }
10584|      0|        }
10585|      0|        {
10586|      0|            rc = add_exclude_fp(&call_addfn, ex, in, options, line_end, (void *)(&add_func));
10587|      0|        }
10588|      0|        if (!use_stdin) {
10589|      0|            {
10590|      0|                tmp___0 = fclose(in);
10591|      0|            }
10592|      0|            if (tmp___0 != 0) {
10593|      0|                rc = -1;
10594|      0|            }
10595|      0|        }
10596|      0|        return (rc);
10597|      0|    }
10598|      0|}
10599|       |int dup_safer(int fd)
10600|      1|{
10601|      1|    int tmp;
10602|       |
10603|      1|    {
10604|      1|        {
10605|      1|            tmp = rpl_fcntl(fd, 0, 3);
10606|      1|        }
10607|      1|        return (tmp);
10608|      1|    }
10609|      1|}
10610|       |static _Bool is_zero_or_power_of_two(uintmax_t i)
10611|      0|{
10612|       |
10613|      0|    {
10614|      0|        return ((_Bool)((i & (i - 1UL)) == 0UL));
10615|      0|    }
10616|      0|}
10617|       |void cycle_check_init(struct cycle_check_state *state)
10618|      0|{
10619|       |
10620|      0|    {
10621|      0|        state->chdir_counter = (uintmax_t)0;
10622|      0|        state->magic = 9827862;
10623|      0|        return;
10624|      0|    }
10625|      0|}
10626|       |_Bool cycle_check(struct cycle_check_state *state, struct stat const *sb)
10627|      0|{
10628|      0|    _Bool tmp;
10629|       |
10630|      0|    {
10631|      0|        if (!(state->magic == 9827862)) {
10632|      0|            {
10633|      0|                __assert_fail("state->magic == 9827862", "/home/khheo/project/benchmark/grep-2.19/lib/cycle-check.c",
10634|      0|                              60U, "cycle_check");
10635|      0|            }
10636|      0|        }
10637|      0|        if (state->chdir_counter) {
10638|      0|            if (sb->st_ino == (__ino_t const)state->dev_ino.st_ino) {
10639|      0|                if (sb->st_dev == (__dev_t const)state->dev_ino.st_dev) {
10640|      0|                    return ((_Bool)1);
10641|      0|                }
10642|      0|            }
10643|      0|        }
10644|      0|        {
10645|      0|            (state->chdir_counter)++;
10646|      0|            tmp = is_zero_or_power_of_two(state->chdir_counter);
10647|      0|        }
10648|      0|        if (tmp) {
10649|      0|            if (state->chdir_counter == 0UL) {
10650|      0|                return ((_Bool)1);
10651|      0|            }
10652|      0|            state->dev_ino.st_dev = (dev_t)sb->st_dev;
10653|      0|            state->dev_ino.st_ino = (ino_t)sb->st_ino;
10654|      0|        }
10655|      0|        return ((_Bool)0);
10656|      0|    }
10657|      0|}
10658|       |int should_colorize(void);
10659|       |void init_colorize(void);
10660|       |void print_start_colorize(char const *sgr_start___0, char const *sgr_seq);
10661|       |void print_end_colorize(char const *sgr_end___0);
10662|       |int should_colorize(void)
10663|      0|{
10664|      0|    char const *t;
10665|      0|    char const *tmp;
10666|      0|    int tmp___0;
10667|      0|    int tmp___1;
10668|      0|    char *__cil_tmp7;
10669|       |
10670|      0|    {
10671|      0|        {
10672|      0|            tmp = (char const *)getenv("TERM");
10673|      0|            t = tmp;
10674|      0|        }
10675|      0|        if (t) {
10676|      0|            {
10677|      0|                tmp___0 = strcmp(t, "dumb");
10678|      0|            }
10679|      0|            if (tmp___0 != 0) {
10680|      0|                tmp___1 = 1;
10681|      0|            }
10682|      0|            else {
10683|      0|                tmp___1 = 0;
10684|      0|            }
10685|      0|        }
10686|      0|        else {
10687|      0|            tmp___1 = 0;
10688|      0|        }
10689|      0|        return (tmp___1);
10690|      0|    }
10691|      0|}
10692|       |void init_colorize(void)
10693|      2|{
10694|       |
10695|      2|    {
10696|      2|        return;
10697|      2|    }
10698|      2|}
10699|       |void print_start_colorize(char const *sgr_start___0, char const *sgr_seq)
10700|      0|{
10701|       |
10702|      0|    {
10703|      0|        {
10704|      0|            printf((char const * /* __restrict  */)sgr_start___0, sgr_seq);
10705|      0|        }
10706|      0|        return;
10707|      0|    }
10708|      0|}
10709|       |void print_end_colorize(char const *sgr_end___0)
10710|      0|{
10711|       |
10712|      0|    {
10713|      0|        {
10714|      0|            fputs((char const * /* __restrict  */)sgr_end___0, (FILE * /* __restrict  */) stdout);
10715|      0|        }
10716|      0|        return;
10717|      0|    }
10718|      0|}
10719|       |void close_stdout(void);
10720|       |extern __attribute__((__noreturn__)) void _exit(int __status);
10721|       |int close_stream(FILE *stream);
10722|       |static char const *file_name;
10723|       |static _Bool ignore_EPIPE;
10724|       |void close_stdout(void)
10725|      2|{
10726|      2|    char const *write_error;
10727|      2|    char const *tmp;
10728|      2|    char *tmp___0;
10729|      2|    int *tmp___1;
10730|      2|    int *tmp___2;
10731|      2|    int tmp___3;
10732|      2|    int *tmp___4;
10733|      2|    int tmp___5;
10734|      2|    char *__cil_tmp11;
10735|       |
10736|      2|    {
10737|      2|        {
10738|      2|            tmp___3 = close_stream(stdout);
10739|      2|        }
10740|      2|        if (tmp___3 != 0) {
10741|      0|            if (ignore_EPIPE) {
10742|      0|                {
10743|      0|                    tmp___4 = __errno_location();
10744|      0|                }
10745|      0|                if (!(*tmp___4 == 32)) {
10746|      0|                    goto _L;
10747|      0|                }
10748|      0|            }
10749|      0|            else {
10750|      0|_L : {
10751|      0|                    tmp = (char const *)gettext("write error");
10752|      0|                    write_error = tmp;
10753|      0|                }
10754|      0|                if (file_name) {
10755|      0|                    {
10756|      0|                        tmp___0 = quotearg_colon(file_name);
10757|      0|                        tmp___1 = __errno_location();
10758|      0|                        error(0, *tmp___1, "%s: %s", tmp___0, write_error);
10759|      0|                    }
10760|      0|                }
10761|      0|                else {
10762|      0|                    {
10763|      0|                        tmp___2 = __errno_location();
10764|      0|                        error(0, *tmp___2, "%s", write_error);
10765|      0|                    }
10766|      0|                }
10767|      0|                {
10768|      0|                    _exit((int)exit_failure);
10769|      0|                }
10770|      0|            }
10771|      0|        }
10772|      2|        {
10773|      2|            tmp___5 = close_stream(stderr);
10774|      2|        }
10775|      2|        if (tmp___5 != 0) {
10776|      0|            {
10777|      0|                _exit((int)exit_failure);
10778|      0|            }
10779|      0|        }
10780|      2|        return;
10781|      2|    }
10782|      2|}
10783|       |extern __attribute__((__nothrow__)) size_t __fpending(FILE *__fp);
10784|       |int close_stream(FILE *stream)
10785|      4|{
10786|      4|    _Bool some_pending;
10787|      4|    size_t tmp;
10788|      4|    _Bool prev_fail;
10789|      4|    int tmp___0;
10790|      4|    _Bool fclose_fail;
10791|      4|    int tmp___1;
10792|      4|    int *tmp___2;
10793|      4|    int *tmp___3;
10794|       |
10795|      4|    {
10796|      4|        {
10797|      4|            tmp = __fpending(stream);
10798|      4|            some_pending = (_Bool)(tmp != 0UL);
10799|      4|            tmp___0 = ferror_unlocked(stream);
10800|      4|            prev_fail = (_Bool)(tmp___0 != 0);
10801|      4|            tmp___1 = fclose(stream);
10802|      4|            fclose_fail = (_Bool)(tmp___1 != 0);
10803|      4|        }
10804|      4|        if (prev_fail) {
10805|      0|            goto _L___0;
10806|      0|        }
10807|      4|        else {
10808|      4|            if (fclose_fail) {
10809|      0|                if (some_pending) {
10810|      0|                    goto _L___0;
10811|      0|                }
10812|      0|                else {
10813|      0|                    {
10814|      0|                        tmp___3 = __errno_location();
10815|      0|                    }
10816|      0|                    if (*tmp___3 != 9) {
10817|      0|_L___0:
10818|      0|                        if (!fclose_fail) {
10819|      0|                            {
10820|      0|                                tmp___2 = __errno_location();
10821|      0|                                *tmp___2 = 0;
10822|      0|                            }
10823|      0|                        }
10824|      0|                        return (-1);
10825|      0|                    }
10826|      0|                }
10827|      0|            }
10828|      4|        }
10829|      4|        return (0);
10830|      4|    }
10831|      4|}
10832|       |int set_cloexec_flag(int desc, _Bool value)
10833|      2|{
10834|      2|    int flags;
10835|      2|    int tmp;
10836|      2|    int newflags;
10837|      2|    int tmp___0;
10838|      2|    int tmp___1;
10839|       |
10840|      2|    {
10841|      2|        {
10842|      2|            tmp = rpl_fcntl(desc, 1, 0);
10843|      2|            flags = tmp;
10844|      2|        }
10845|      2|        if (0 <= flags) {
10846|      2|            if (value) {
10847|      2|                tmp___0 = flags | 1;
10848|      2|            }
10849|      0|            else {
10850|      0|                tmp___0 = flags & -2;
10851|      0|            }
10852|      2|            newflags = tmp___0;
10853|      2|            if (flags == newflags) {
10854|      0|                return (0);
10855|      0|            }
10856|      2|            else {
10857|      2|                {
10858|      2|                    tmp___1 = rpl_fcntl(desc, 2, newflags);
10859|      2|                }
10860|      2|                if (tmp___1 != -1) {
10861|      2|                    return (0);
10862|      2|                }
10863|      2|            }
10864|      2|        }
10865|      0|        return (-1);
10866|      2|    }
10867|      2|}
10868|       |extern __attribute__((__nothrow__)) void *(__attribute__((__nonnull__(1))) memrchr)(void const *__s,
10869|       |        int __c,
10870|       |        size_t __n) __attribute__((__pure__));
10871|       |int c_tolower(int c) __attribute__((__const__));
10872|       |int c_strcasecmp(char const *s1, char const *s2) __attribute__((__pure__));
10873|       |int c_strcasecmp(char const *s1, char const *s2)
10874|      0|{
10875|      0|    register unsigned char const *p1;
10876|      0|    register unsigned char const *p2;
10877|      0|    unsigned char c1;
10878|      0|    unsigned char c2;
10879|       |
10880|      0|    {
10881|      0|        p1 = (unsigned char const *)s1;
10882|      0|        p2 = (unsigned char const *)s2;
10883|      0|        if ((unsigned long)p1 == (unsigned long)p2) {
10884|      0|            return (0);
10885|      0|        }
10886|      0|        {
10887|      0|            while (1) {
10888|      0|while_continue: /* CIL Label */
10889|      0|                ;
10890|      0|                {
10891|      0|                    c1 = (unsigned char)c_tolower((int)*p1);
10892|      0|                    c2 = (unsigned char)c_tolower((int)*p2);
10893|      0|                }
10894|      0|                if ((int)c1 == 0) {
10895|      0|                    goto while_break;
10896|      0|                }
10897|      0|                p1++;
10898|      0|                p2++;
10899|      0|                if (!((int)c1 == (int)c2)) {
10900|      0|                    goto while_break;
10901|      0|                }
10902|      0|            }
10903|      0|while_break___0: /* CIL Label */
10904|      0|            ;
10905|      0|        }
10906|      0|while_break:
10907|      0|        ;
10908|      0|        return ((int)c1 - (int)c2);
10909|      0|    }
10910|      0|}
10911|       |_Bool c_isspace(int c) __attribute__((__const__));
10912|       |_Bool c_isspace(int c) __attribute__((__const__));
10913|       |_Bool c_isspace(int c)
10914|      0|{
10915|      0|    int tmp;
10916|       |
10917|      0|    {
10918|      0|        if (c == 32) {
10919|      0|            tmp = 1;
10920|      0|        }
10921|      0|        else {
10922|      0|            if (c == 9) {
10923|      0|                tmp = 1;
10924|      0|            }
10925|      0|            else {
10926|      0|                if (c == 10) {
10927|      0|                    tmp = 1;
10928|      0|                }
10929|      0|                else {
10930|      0|                    if (c == 11) {
10931|      0|                        tmp = 1;
10932|      0|                    }
10933|      0|                    else {
10934|      0|                        if (c == 12) {
10935|      0|                            tmp = 1;
10936|      0|                        }
10937|      0|                        else {
10938|      0|                            if (c == 13) {
10939|      0|                                tmp = 1;
10940|      0|                            }
10941|      0|                            else {
10942|      0|                                tmp = 0;
10943|      0|                            }
10944|      0|                        }
10945|      0|                    }
10946|      0|                }
10947|      0|            }
10948|      0|        }
10949|      0|        return ((_Bool)tmp);
10950|      0|    }
10951|      0|}
10952|       |int c_tolower(int c) __attribute__((__const__));
10953|       |int c_tolower(int c)
10954|      0|{
10955|      0|    int tmp;
10956|       |
10957|      0|    {
10958|      0|        if (c >= 65) {
10959|      0|            if (c <= 90) {
10960|      0|                tmp = (c - 65) + 97;
10961|      0|            }
10962|      0|            else {
10963|      0|                tmp = c;
10964|      0|            }
10965|      0|        }
10966|      0|        else {
10967|      0|            tmp = c;
10968|      0|        }
10969|      0|        return (tmp);
10970|      0|    }
10971|      0|}
10972|       |int set_binary_mode(int fd, int mode___0)
10973|      6|{
10974|       |
10975|      6|    {
10976|      6|        return (0);
10977|      6|    }
10978|      6|}
10979|       |ptrdiff_t argmatch(char const *arg, char const *const *arglist, char const *vallist,
10980|       |                   size_t valsize) __attribute__((__pure__));
10981|       |void (*argmatch_die)(void);
10982|       |void argmatch_invalid(char const *context, char const *value, ptrdiff_t problem);
10983|       |void argmatch_valid(char const *const *arglist, char const *vallist, size_t valsize);
10984|       |ptrdiff_t __xargmatch_internal(char const *context, char const *arg, char const *const *arglist,
10985|       |                               char const *vallist, size_t valsize, void (*exit_fn)(void));
10986|       |extern int putc_unlocked(int __c, FILE *__stream);
10987|       |__attribute__((__noreturn__)) void usage(int status);
10988|       |static void __argmatch_die(void)
10989|      0|{
10990|       |
10991|      0|    {
10992|      0|        {
10993|      0|            usage(1);
10994|      0|        }
10995|      0|        return;
10996|      0|    }
10997|      0|}
10998|       |void (*argmatch_die)(void) = &__argmatch_die;
10999|       |ptrdiff_t argmatch(char const *arg, char const *const *arglist, char const *vallist,
11000|       |                   size_t valsize) __attribute__((__pure__));
11001|       |ptrdiff_t argmatch(char const *arg, char const *const *arglist, char const *vallist,
11002|       |                   size_t valsize)
11003|      0|{
11004|      0|    size_t i;
11005|      0|    size_t arglen;
11006|      0|    ptrdiff_t matchind;
11007|      0|    _Bool ambiguous;
11008|      0|    int tmp;
11009|      0|    size_t tmp___0;
11010|      0|    int tmp___1;
11011|       |
11012|      0|    {
11013|      0|        {
11014|      0|            matchind = (ptrdiff_t)-1;
11015|      0|            ambiguous = (_Bool)0;
11016|      0|            arglen = strlen(arg);
11017|      0|            i = (size_t)0;
11018|      0|        }
11019|      0|        {
11020|      0|            while (1) {
11021|      0|while_continue: /* CIL Label */
11022|      0|                ;
11023|       |
11024|      0|                if (!*(arglist + i)) {
11025|      0|                    goto while_break;
11026|      0|                }
11027|      0|                {
11028|      0|                    tmp___1 = strncmp((char const *)*(arglist + i), arg, arglen);
11029|      0|                }
11030|      0|                if (!tmp___1) {
11031|      0|                    {
11032|      0|                        tmp___0 = strlen((char const *)*(arglist + i));
11033|      0|                    }
11034|      0|                    if (tmp___0 == arglen) {
11035|      0|                        return ((ptrdiff_t)i);
11036|      0|                    }
11037|      0|                    else {
11038|      0|                        if (matchind == -1L) {
11039|      0|                            matchind = (ptrdiff_t)i;
11040|      0|                        }
11041|      0|                        else {
11042|      0|                            if ((unsigned long)vallist == (unsigned long)((void *)0)) {
11043|      0|                                ambiguous = (_Bool)1;
11044|      0|                            }
11045|      0|                            else {
11046|      0|                                {
11047|      0|                                    tmp = memcmp((void const *)(vallist + valsize * (size_t)matchind), (void const *)(vallist + valsize * i),
11048|      0|                                                 valsize);
11049|      0|                                }
11050|      0|                                if (tmp) {
11051|      0|                                    ambiguous = (_Bool)1;
11052|      0|                                }
11053|      0|                            }
11054|      0|                        }
11055|      0|                    }
11056|      0|                }
11057|      0|                i++;
11058|      0|            }
11059|      0|while_break___0: /* CIL Label */
11060|      0|            ;
11061|      0|        }
11062|      0|while_break:
11063|      0|        ;
11064|      0|        if (ambiguous) {
11065|      0|            return ((ptrdiff_t)-2);
11066|      0|        }
11067|      0|        else {
11068|      0|            return (matchind);
11069|      0|        }
11070|      0|    }
11071|      0|}
11072|       |void argmatch_invalid(char const *context, char const *value, ptrdiff_t problem)
11073|      0|{
11074|      0|    char const *format;
11075|      0|    char *tmp;
11076|      0|    char *tmp___0;
11077|      0|    char *tmp___1;
11078|      0|    char const *tmp___2;
11079|      0|    char *tmp___3;
11080|      0|    char *__cil_tmp12;
11081|      0|    char *__cil_tmp13;
11082|       |
11083|      0|    {
11084|      0|        if (problem == -1L) {
11085|      0|            {
11086|      0|                tmp = gettext("invalid argument %s for %s");
11087|      0|                tmp___1 = tmp;
11088|      0|            }
11089|      0|        }
11090|      0|        else {
11091|      0|            {
11092|      0|                tmp___0 = gettext("ambiguous argument %s for %s");
11093|      0|                tmp___1 = tmp___0;
11094|      0|            }
11095|      0|        }
11096|      0|        {
11097|      0|            format = (char const *)tmp___1;
11098|      0|            tmp___2 = quote_n(1, context);
11099|      0|            tmp___3 = quotearg_n_style(0, (enum quoting_style)6, value);
11100|      0|            error(0, 0, format, tmp___3, tmp___2);
11101|      0|        }
11102|      0|        return;
11103|      0|    }
11104|      0|}
11105|       |void argmatch_valid(char const *const *arglist, char const *vallist, size_t valsize)
11106|      0|{
11107|      0|    size_t i;
11108|      0|    char const *last_val;
11109|      0|    char *tmp;
11110|      0|    char const *tmp___0;
11111|      0|    char const *tmp___1;
11112|      0|    int tmp___2;
11113|      0|    char *__cil_tmp11;
11114|       |
11115|      0|    {
11116|      0|        {
11117|      0|            last_val = (char const *)((void *)0);
11118|      0|            tmp = gettext("Valid arguments are:");
11119|      0|            fputs_unlocked((char const * /* __restrict  */)((char const *)tmp), (FILE * /* __restrict  */) stderr);
11120|      0|            i = (size_t)0;
11121|      0|        }
11122|      0|        {
11123|      0|            while (1) {
11124|      0|while_continue: /* CIL Label */
11125|      0|                ;
11126|       |
11127|      0|                if (!*(arglist + i)) {
11128|      0|                    goto while_break;
11129|      0|                }
11130|      0|                if (i == 0UL) {
11131|      0|                    {
11132|      0|                        tmp___0 = quote((char const *)*(arglist + i));
11133|      0|                        fprintf((FILE * /* __restrict  */) stderr, (char const * /* __restrict  */) "\n  - %s",
11134|      0|                                tmp___0);
11135|      0|                        last_val = vallist + valsize * i;
11136|      0|                    }
11137|      0|                }
11138|      0|                else {
11139|      0|                    {
11140|      0|                        tmp___2 = memcmp((void const *)last_val, (void const *)(vallist + valsize * i),
11141|      0|                                         valsize);
11142|      0|                    }
11143|      0|                    if (tmp___2) {
11144|      0|                        {
11145|      0|                            tmp___0 = quote((char const *)*(arglist + i));
11146|      0|                            fprintf((FILE * /* __restrict  */) stderr, (char const * /* __restrict  */) "\n  - %s",
11147|      0|                                    tmp___0);
11148|      0|                            last_val = vallist + valsize * i;
11149|      0|                        }
11150|      0|                    }
11151|      0|                    else {
11152|      0|                        {
11153|      0|                            tmp___1 = quote((char const *)*(arglist + i));
11154|      0|                            fprintf((FILE * /* __restrict  */) stderr, (char const * /* __restrict  */) ", %s",
11155|      0|                                    tmp___1);
11156|      0|                        }
11157|      0|                    }
11158|      0|                }
11159|      0|                i++;
11160|      0|            }
11161|      0|while_break___0: /* CIL Label */
11162|      0|            ;
11163|      0|        }
11164|      0|while_break : {
11165|      0|            putc_unlocked('\n', stderr);
11166|      0|        }
11167|      0|        return;
11168|      0|    }
11169|      0|}
11170|       |ptrdiff_t __xargmatch_internal(char const *context, char const *arg, char const *const *arglist,
11171|       |                               char const *vallist, size_t valsize, void (*exit_fn)(void))
11172|      0|{
11173|      0|    ptrdiff_t res;
11174|      0|    ptrdiff_t tmp;
11175|       |
11176|      0|    {
11177|      0|        {
11178|      0|            tmp = argmatch(arg, arglist, vallist, valsize);
11179|      0|            res = tmp;
11180|      0|        }
11181|      0|        if (res >= 0L) {
11182|      0|            return (res);
11183|      0|        }
11184|      0|        {
11185|      0|            argmatch_invalid(context, arg, res);
11186|      0|            argmatch_valid(arglist, vallist, valsize);
11187|      0|            (*exit_fn)();
11188|      0|        }
11189|      0|        return ((ptrdiff_t)-1);
11190|      0|    }
11191|      0|}
11192|       |#pragma weak pthread_mutex_init
11193|       |#pragma weak pthread_mutex_lock
11194|       |#pragma weak pthread_mutex_unlock
11195|       |#pragma weak pthread_mutex_destroy
11196|       |#pragma weak pthread_rwlock_init
11197|       |#pragma weak pthread_rwlock_rdlock
11198|       |#pragma weak pthread_rwlock_wrlock
11199|       |#pragma weak pthread_rwlock_unlock
11200|       |#pragma weak pthread_rwlock_destroy
11201|       |#pragma weak pthread_once
11202|       |#pragma weak pthread_cond_init
11203|       |#pragma weak pthread_cond_wait
11204|       |#pragma weak pthread_cond_signal
11205|       |#pragma weak pthread_cond_broadcast
11206|       |#pragma weak pthread_cond_destroy
11207|       |#pragma weak pthread_mutexattr_init
11208|       |#pragma weak pthread_mutexattr_settype
11209|       |#pragma weak pthread_mutexattr_destroy
11210|       |#pragma weak pthread_self
11211|       |#pragma weak pthread_cancel
11212|       |int match_icase;
11213|       |int match_words;
11214|       |int match_lines;
11215|       |unsigned char eolbyte;
11216|       |int using_utf8(void);
11217|       |void Pcompile(char const *pattern, size_t size);
11218|       |size_t Pexecute(char const *buf, size_t size, size_t *match_size, char const *start_ptr);
11219|       |extern pcre *pcre_compile(char const *, int, char const **, int *, unsigned char const *);
11220|       |extern int pcre_exec(pcre const *, pcre_extra const *, char const *, int,
11221|       |                     int, int, int *, int);
11222|       |extern int pcre_fullinfo(pcre const *, pcre_extra const *, int, void *);
11223|       |extern unsigned char const *pcre_maketables(void);
11224|       |extern pcre_extra *pcre_study(pcre const *, int, char const **);
11225|       |extern pcre_jit_stack *pcre_jit_stack_alloc(int, int);
11226|       |extern void pcre_assign_jit_stack(pcre_extra *, pcre_jit_stack *(*)(void *), void *);
11227|       |static pcre *cre;
11228|       |static pcre_extra *extra;
11229|       |static pcre_jit_stack *jit_stack;
11230|       |void Pcompile(char const *pattern, size_t size)
11231|      0|{
11232|      0|    int e = 0;
11233|      0|    char const *ep = 0;
11234|      0|    char *re;
11235|      0|    char *tmp;
11236|      0|    int flags;
11237|      0|    int tmp___0;
11238|      0|    int tmp___2;
11239|      0|    int tmp___3;
11240|      0|    char const *patlim;
11241|      0|    char *n;
11242|      0|    char const *p;
11243|      0|    char const *pnul;
11244|      0|    char *tmp___4;
11245|      0|    void *tmp___5;
11246|      0|    size_t tmp___6;
11247|      0|    unsigned char const *tmp___7;
11248|      0|    char *tmp___8;
11249|      0|    int tmp___9;
11250|      0|    char *tmp___10;
11251|      0|    char *__cil_tmp32;
11252|      0|    char *__cil_tmp33;
11253|      0|    char *__cil_tmp34;
11254|      0|    char *__cil_tmp35;
11255|      0|    char *__cil_tmp36;
11256|      0|    char *__cil_tmp37;
11257|      0|    char *__cil_tmp38;
11258|      0|    char *__cil_tmp39;
11259|       |
11260|      0|    {
11261|      0|        {
11262|      0|            tmp = (char *)xnmalloc((size_t)4, size + 7UL);
11263|      0|            re = tmp;
11264|      0|        }
11265|      0|        if (match_icase) {
11266|      0|            tmp___0 = 1;
11267|      0|        }
11268|      0|        else {
11269|      0|            tmp___0 = 0;
11270|      0|        }
11271|      0|        {
11272|      0|            tmp___3 = using_utf8();
11273|      0|        }
11274|      0|        if (tmp___3) {
11275|      0|            tmp___2 = 2048;
11276|      0|        }
11277|      0|        else {
11278|      0|            tmp___2 = 0;
11279|      0|        }
11280|      0|        {
11281|      0|            flags = (2 | tmp___0) | tmp___2;
11282|      0|            patlim = pattern + size;
11283|      0|            n = re;
11284|      0|            tmp___5 = memchr((void const *)pattern, '\n', size);
11285|      0|        }
11286|      0|        if (tmp___5) {
11287|      0|            {
11288|      0|                tmp___4 = gettext("the -P option only supports a single pattern");
11289|      0|                error(2, 0, (char const *)tmp___4);
11290|      0|            }
11291|      0|        }
11292|      0|        *n = (char)'\000';
11293|      0|        if (match_lines) {
11294|      0|            {
11295|      0|                strcpy((char * /* __restrict  */)n, (char const * /* __restrict  */) "^(?:");
11296|      0|            }
11297|      0|        }
11298|      0|        if (match_words) {
11299|      0|            {
11300|      0|                strcpy((char * /* __restrict  */)n, (char const * /* __restrict  */) "(?<!\\w)(?:");
11301|      0|            }
11302|      0|        }
11303|      0|        {
11304|      0|            tmp___6 = strlen((char const *)n);
11305|      0|            n += tmp___6;
11306|      0|            p = pattern;
11307|      0|        }
11308|      0|        {
11309|      0|            while (1) {
11310|      0|while_continue: /* CIL Label */
11311|      0|                ;
11312|      0|                {
11313|      0|                    pnul = (char const *)memchr((void const *)p, '\000', (size_t)(patlim - p));
11314|      0|                }
11315|      0|                if (!pnul) {
11316|      0|                    goto while_break;
11317|      0|                }
11318|      0|                {
11319|      0|                    memcpy((void * /* __restrict  */)((void *)n), (void const * /* __restrict  */)((void const *)p),
11320|      0|                           (size_t)(pnul - p));
11321|      0|                    n += pnul - p;
11322|      0|                    p = pnul;
11323|      0|                }
11324|      0|                {
11325|      0|                    while (1) {
11326|      0|while_continue___0: /* CIL Label */
11327|      0|                        ;
11328|       |
11329|      0|                        if ((unsigned long)pattern < (unsigned long)p) {
11330|      0|                            if (!((int const) * (p + -1) == 92)) {
11331|      0|                                goto while_break___0;
11332|      0|                            }
11333|      0|                        }
11334|      0|                        else {
11335|      0|                            goto while_break___0;
11336|      0|                        }
11337|      0|                        goto __Cont;
11338|      0|__Cont:
11339|      0|                        p--;
11340|      0|                    }
11341|      0|while_break___2: /* CIL Label */
11342|      0|                    ;
11343|      0|                }
11344|      0|while_break___0 : {
11345|      0|                    n -= (pnul - p) & 1L;
11346|      0|                    strcpy((char * /* __restrict  */)n, (char const * /* __restrict  */) "\\000");
11347|      0|                    n += 4;
11348|      0|                    p = pnul + 1;
11349|      0|                }
11350|      0|            }
11351|      0|while_break___1: /* CIL Label */
11352|      0|            ;
11353|      0|        }
11354|      0|while_break : {
11355|      0|            memcpy((void * /* __restrict  */)((void *)n), (void const * /* __restrict  */)((void const *)p),
11356|      0|                   (size_t)(patlim - p));
11357|      0|            n += patlim - p;
11358|      0|            *n = (char)'\000';
11359|      0|        }
11360|      0|        if (match_words) {
11361|      0|            {
11362|      0|                strcpy((char * /* __restrict  */)n, (char const * /* __restrict  */) ")(?!\\w)");
11363|      0|            }
11364|      0|        }
11365|      0|        if (match_lines) {
11366|      0|            {
11367|      0|                strcpy((char * /* __restrict  */)n, (char const * /* __restrict  */) ")$");
11368|      0|            }
11369|      0|        }
11370|      0|        {
11371|      0|            tmp___7 = pcre_maketables();
11372|      0|            cre = pcre_compile((char const *)re, flags, &ep, &e, tmp___7);
11373|      0|        }
11374|      0|        if (!cre) {
11375|      0|            {
11376|      0|                error(2, 0, "%s", ep);
11377|      0|            }
11378|      0|        }
11379|      0|        {
11380|      0|            extra = pcre_study((pcre const *)cre, 1, &ep);
11381|      0|        }
11382|      0|        if (ep) {
11383|      0|            {
11384|      0|                error(2, 0, "%s", ep);
11385|      0|            }
11386|      0|        }
11387|      0|        {
11388|      0|            tmp___9 = pcre_fullinfo((pcre const *)cre, (pcre_extra const *)extra, 16, (void *)(&e));
11389|      0|        }
11390|      0|        if (tmp___9) {
11391|      0|            {
11392|      0|                tmp___8 = gettext("internal error (should never happen)");
11393|      0|                error(2, 0, (char const *)tmp___8);
11394|      0|            }
11395|      0|        }
11396|      0|        if (e) {
11397|      0|            {
11398|      0|                jit_stack = pcre_jit_stack_alloc(32768, 524288);
11399|      0|            }
11400|      0|            if (!jit_stack) {
11401|      0|                {
11402|      0|                    tmp___10 = gettext("failed to allocate memory for the PCRE JIT stack");
11403|      0|                    error(2, 0, (char const *)tmp___10);
11404|      0|                }
11405|      0|            }
11406|      0|            {
11407|      0|                pcre_assign_jit_stack(extra, (pcre_jit_stack * (*)(void *))((void *)0), (void *)jit_stack);
11408|      0|            }
11409|      0|        }
11410|      0|        {
11411|      0|            free((void *)re);
11412|      0|        }
11413|      0|        return;
11414|      0|    }
11415|      0|}
11416|       |size_t Pexecute(char const *buf, size_t size, size_t *match_size, char const *start_ptr)
11417|      0|{
11418|      0|    int sub[300] = {0};
11419|      0|    char const *line_buf;
11420|      0|    char const *line_end;
11421|      0|    char const *line_next;
11422|      0|    int e;
11423|      0|    ptrdiff_t start_ofs;
11424|      0|    long tmp;
11425|      0|    char *tmp___0;
11426|      0|    ptrdiff_t tmp___1;
11427|      0|    char *tmp___2;
11428|      0|    char *tmp___3;
11429|      0|    char *tmp___4;
11430|      0|    char *tmp___5;
11431|      0|    char const *beg;
11432|      0|    char const *end;
11433|      0|    char const *buflim___0;
11434|      0|    char eol;
11435|      0|    void *__cil_tmp30;
11436|      0|    char *__cil_tmp31;
11437|      0|    char *__cil_tmp32;
11438|      0|    char *__cil_tmp33;
11439|      0|    char *__cil_tmp34;
11440|      0|    char *__cil_tmp35;
11441|       |
11442|      0|    {
11443|      0|        e = -1;
11444|      0|        if (start_ptr) {
11445|      0|            tmp = start_ptr - buf;
11446|      0|        }
11447|      0|        else {
11448|      0|            tmp = 0L;
11449|      0|        }
11450|      0|        start_ofs = tmp;
11451|      0|        line_next = buf;
11452|      0|        {
11453|      0|            while (1) {
11454|      0|while_continue: /* CIL Label */
11455|      0|                ;
11456|       |
11457|      0|                if (e == -1) {
11458|      0|                    if (!((unsigned long)line_next < (unsigned long)(buf + size))) {
11459|      0|                        goto while_break;
11460|      0|                    }
11461|      0|                }
11462|      0|                else {
11463|      0|                    goto while_break;
11464|      0|                }
11465|      0|                {
11466|      0|                    line_buf = line_next;
11467|      0|                    line_end = (char const *)memchr((void const *)line_buf, (int)eolbyte, (size_t)((buf + size) - line_buf));
11468|      0|                }
11469|      0|                if ((unsigned long)line_end == (unsigned long)((void *)0)) {
11470|      0|                    line_end = buf + size;
11471|      0|                    line_next = line_end;
11472|      0|                }
11473|      0|                else {
11474|      0|                    line_next = line_end + 1;
11475|      0|                }
11476|      0|                if (start_ptr) {
11477|      0|                    if ((unsigned long)start_ptr >= (unsigned long)line_end) {
11478|      0|                        goto __Cont;
11479|      0|                    }
11480|      0|                }
11481|      0|                if (2147483647L < line_end - line_buf) {
11482|      0|                    {
11483|      0|                        tmp___0 = gettext("exceeded PCRE\'s line length limit");
11484|      0|                        error(2, 0, (char const *)tmp___0);
11485|      0|                    }
11486|      0|                }
11487|      0|                if (start_ofs < 0L) {
11488|      0|                    tmp___1 = (ptrdiff_t)0;
11489|      0|                }
11490|      0|                else {
11491|      0|                    tmp___1 = start_ofs;
11492|      0|                }
11493|      0|                {
11494|      0|                    e = pcre_exec((pcre const *)cre, (pcre_extra const *)extra, line_buf, (int)(line_end - line_buf),
11495|      0|                                  (int)tmp___1, 0, sub, (int)(sizeof(sub) / sizeof(sub[0])));
11496|      0|                }
11497|      0|__Cont:
11498|      0|                start_ofs -= line_next - line_buf;
11499|      0|            }
11500|      0|while_break___1: /* CIL Label */
11501|      0|            ;
11502|      0|        }
11503|      0|while_break:
11504|      0|        ;
11505|      0|        if (e <= 0) {
11506|      0|            if (e == -1) {
11507|      0|                goto case_neg_1;
11508|      0|            }
11509|      0|            if (e == -6) {
11510|      0|                goto case_neg_6;
11511|      0|            }
11512|      0|            if (e == -8) {
11513|      0|                goto case_neg_8;
11514|      0|            }
11515|      0|            if (e == -10) {
11516|      0|                goto case_neg_10;
11517|      0|            }
11518|      0|            goto switch_default;
11519|      0|case_neg_1:
11520|      0|            return ((size_t)-1);
11521|      0|case_neg_6 : {
11522|      0|                tmp___2 = gettext("memory exhausted");
11523|      0|                error(2, 0, (char const *)tmp___2);
11524|      0|            }
11525|      0|case_neg_8 : {
11526|      0|                tmp___3 = gettext("exceeded PCRE\'s backtracking limit");
11527|      0|                error(2, 0, (char const *)tmp___3);
11528|      0|            }
11529|      0|case_neg_10 : {
11530|      0|                tmp___4 = gettext("invalid UTF-8 byte sequence in input");
11531|      0|                error(2, 0, (char const *)tmp___4);
11532|      0|            }
11533|      0|switch_default : {
11534|      0|                tmp___5 = gettext("internal PCRE error: %d");
11535|      0|                error(2, 0, (char const *)tmp___5, e);
11536|      0|            }
11537|       |
11538|      0|            return ((size_t)-1);
11539|      0|        }
11540|      0|        else {
11541|      0|            beg = line_buf + sub[0];
11542|      0|            end = line_buf + sub[1];
11543|      0|            buflim___0 = buf + size;
11544|      0|            eol = (char)eolbyte;
11545|      0|            if (!start_ptr) {
11546|      0|                {
11547|      0|                    end = (char const *)memchr((void const *)end, (int)eol, (size_t)(buflim___0 - end));
11548|      0|                }
11549|      0|                if (end) {
11550|      0|                    end++;
11551|      0|                }
11552|      0|                else {
11553|      0|                    end = buflim___0;
11554|      0|                }
11555|      0|                {
11556|      0|                    while (1) {
11557|      0|while_continue___0: /* CIL Label */
11558|      0|                        ;
11559|       |
11560|      0|                        if ((unsigned long)buf < (unsigned long)beg) {
11561|      0|                            if (!((int const) * (beg + -1) != (int const)eol)) {
11562|      0|                                goto while_break___0;
11563|      0|                            }
11564|      0|                        }
11565|      0|                        else {
11566|      0|                            goto while_break___0;
11567|      0|                        }
11568|      0|                        beg--;
11569|      0|                    }
11570|      0|while_break___2: /* CIL Label */
11571|      0|                    ;
11572|      0|                }
11573|      0|while_break___0:
11574|      0|                ;
11575|      0|            }
11576|      0|            *match_size = (size_t)(end - beg);
11577|      0|            return ((size_t)(beg - buf));
11578|      0|        }
11579|      0|    }
11580|      0|}
11581|       |void kwsincr(kwset_t kwset___1, char const *text, size_t len);
11582|       |void kwsprep(kwset_t kwset___1);
11583|       |size_t(__attribute__((__nonnull__(4))) kwsexec)(kwset_t kwset___1, char const *text,
11584|       |        size_t size, struct kwsmatch *kwsmatch);
11585|       |void kwsinit(kwset_t *kwset___1);
11586|       |char *mbtoupper(char const *beg, size_t *n, mb_len_map_t **len_map_p);
11587|       |ptrdiff_t mb_goback(char const **mb_start, char const *cur, char const *end);
11588|       |wint_t mb_prev_wc(char const *buf, char const *cur, char const *end);
11589|       |wint_t mb_next_wc(char const *cur, char const *end);
11590|       |void Fcompile(char const *pattern, size_t size);
11591|       |size_t Fexecute(char const *buf, size_t size, size_t *match_size, char const *start_ptr);
11592|       |static _Bool wordchar(wint_t wc)
11593|      0|{
11594|      0|    int tmp;
11595|      0|    int tmp___0;
11596|       |
11597|      0|    {
11598|      0|        if (wc == 95U) {
11599|      0|            tmp___0 = 1;
11600|      0|        }
11601|      0|        else {
11602|      0|            {
11603|      0|                tmp = iswalnum(wc);
11604|      0|            }
11605|      0|            if (tmp) {
11606|      0|                tmp___0 = 1;
11607|      0|            }
11608|      0|            else {
11609|      0|                tmp___0 = 0;
11610|      0|            }
11611|      0|        }
11612|      0|        return ((_Bool)tmp___0);
11613|      0|    }
11614|      0|}
11615|       |static kwset_t kwset;
11616|       |void Fcompile(char const *pattern, size_t size)
11617|      0|{
11618|      0|    size_t total;
11619|      0|    mb_len_map_t *map;
11620|      0|    char const *pat;
11621|      0|    char *tmp___0;
11622|      0|    char const *tmp___1;
11623|      0|    size_t tmp___2;
11624|      0|    char const *p;
11625|      0|    size_t len;
11626|      0|    char const *sep;
11627|      0|    char const *tmp___3;
11628|      0|    char *buf;
11629|       |
11630|      0|    {
11631|      0|        total = size;
11632|      0|        map = (mb_len_map_t *)((void *)0);
11633|      0|        if (match_icase) {
11634|      0|            {
11635|      0|                tmp___2 = __ctype_get_mb_cur_max();
11636|      0|            }
11637|      0|            if (tmp___2 > 1UL) {
11638|      0|                {
11639|      0|                    tmp___0 = mbtoupper(pattern, &total, &map);
11640|      0|                    tmp___1 = (char const *)tmp___0;
11641|      0|                }
11642|      0|            }
11643|      0|            else {
11644|      0|                tmp___1 = pattern;
11645|      0|            }
11646|      0|        }
11647|      0|        else {
11648|      0|            tmp___1 = pattern;
11649|      0|        }
11650|      0|        {
11651|      0|            pat = tmp___1;
11652|      0|            kwsinit(&kwset);
11653|      0|            p = pat;
11654|      0|        }
11655|      0|        {
11656|      0|            while (1) {
11657|      0|while_continue: /* CIL Label */
11658|      0|                ;
11659|      0|                {
11660|      0|                    tmp___3 = (char const *)memchr((void const *)p, '\n', total);
11661|      0|                    sep = tmp___3;
11662|      0|                }
11663|      0|                if (sep) {
11664|      0|                    len = (size_t)(sep - p);
11665|      0|                    sep++;
11666|      0|                    total -= len + 1UL;
11667|      0|                }
11668|      0|                else {
11669|      0|                    len = total;
11670|      0|                    total = (size_t)0;
11671|      0|                }
11672|      0|                buf = (char *)((void *)0);
11673|      0|                if (match_lines) {
11674|      0|                    {
11675|      0|                        buf = (char *)xmalloc(len + 2UL);
11676|      0|                        *(buf + 0) = (char)eolbyte;
11677|      0|                        memcpy((void * /* __restrict  */)((void *)(buf + 1)), (void const * /* __restrict  */)((void const *)p),
11678|      0|                               len);
11679|      0|                        *(buf + (len + 1UL)) = (char)eolbyte;
11680|      0|                        p = (char const *)buf;
11681|      0|                        len += 2UL;
11682|      0|                    }
11683|      0|                }
11684|      0|                {
11685|      0|                    kwsincr(kwset, p, len);
11686|      0|                    free((void *)buf);
11687|      0|                    p = sep;
11688|      0|                }
11689|      0|                if (!p) {
11690|      0|                    goto while_break;
11691|      0|                }
11692|      0|            }
11693|      0|while_break___0: /* CIL Label */
11694|      0|            ;
11695|      0|        }
11696|      0|while_break : {
11697|      0|            kwsprep(kwset);
11698|      0|        }
11699|      0|        return;
11700|      0|    }
11701|      0|}
11702|       |static void mb_case_map_apply(mb_len_map_t const *map, size_t *off, size_t *len)
11703|      0|{
11704|      0|    size_t off_incr;
11705|      0|    size_t len_incr;
11706|      0|    size_t k;
11707|       |
11708|      0|    {
11709|      0|        if (map) {
11710|      0|            off_incr = (size_t)0;
11711|      0|            len_incr = (size_t)0;
11712|      0|            k = (size_t)0;
11713|      0|            {
11714|      0|                while (1) {
11715|      0|while_continue: /* CIL Label */
11716|      0|                    ;
11717|       |
11718|      0|                    if (!(k < *off)) {
11719|      0|                        goto while_break;
11720|      0|                    }
11721|      0|                    off_incr += (size_t) * (map + k);
11722|      0|                    k++;
11723|      0|                }
11724|      0|while_break___1: /* CIL Label */
11725|      0|                ;
11726|      0|            }
11727|      0|while_break:
11728|      0|            ;
11729|      0|            {
11730|      0|                while (1) {
11731|      0|while_continue___0: /* CIL Label */
11732|      0|                    ;
11733|       |
11734|      0|                    if (!(k < *off + *len)) {
11735|      0|                        goto while_break___0;
11736|      0|                    }
11737|      0|                    len_incr += (size_t) * (map + k);
11738|      0|                    k++;
11739|      0|                }
11740|      0|while_break___2: /* CIL Label */
11741|      0|                ;
11742|      0|            }
11743|      0|while_break___0:
11744|      0|            *off += off_incr;
11745|      0|            *len += len_incr;
11746|      0|        }
11747|      0|        return;
11748|      0|    }
11749|      0|}
11750|       |size_t Fexecute(char const *buf, size_t size, size_t *match_size, char const *start_ptr)
11751|      0|{
11752|      0|    char const *beg;
11753|      0|    char const *try
11754|      0|        ;
11755|      0|    char const *end;
11756|      0|    char const *mb_start;
11757|      0|    size_t len;
11758|      0|    char eol;
11759|      0|    struct kwsmatch kwsmatch;
11760|      0|    size_t ret_val;
11761|      0|    mb_len_map_t *map;
11762|      0|    char *case_buf;
11763|      0|    char *tmp;
11764|      0|    size_t tmp___0;
11765|      0|    size_t offset;
11766|      0|    size_t tmp___1;
11767|      0|    size_t tmp___2;
11768|      0|    int tmp___3;
11769|      0|    ptrdiff_t tmp___4;
11770|      0|    wint_t tmp___5;
11771|      0|    _Bool tmp___6;
11772|      0|    wint_t tmp___7;
11773|      0|    _Bool tmp___8;
11774|      0|    size_t off;
11775|      0|    void *__cil_tmp30;
11776|      0|    void *__cil_tmp31;
11777|       |
11778|      0|    {
11779|      0|        {
11780|      0|            eol = (char)eolbyte;
11781|      0|            map = (mb_len_map_t *)((void *)0);
11782|      0|            tmp___0 = __ctype_get_mb_cur_max();
11783|      0|        }
11784|      0|        if (tmp___0 > 1UL) {
11785|      0|            if (match_icase) {
11786|      0|                {
11787|      0|                    tmp = mbtoupper(buf, &size, &map);
11788|      0|                    case_buf = tmp;
11789|      0|                }
11790|      0|                if (start_ptr) {
11791|      0|                    start_ptr = (char const *)(case_buf + (start_ptr - buf));
11792|      0|                }
11793|      0|                buf = (char const *)case_buf;
11794|      0|            }
11795|      0|        }
11796|      0|        if (start_ptr) {
11797|      0|            beg = start_ptr;
11798|      0|        }
11799|      0|        else {
11800|      0|            beg = buf;
11801|      0|        }
11802|      0|        mb_start = beg;
11803|      0|        {
11804|      0|            while (1) {
11805|      0|while_continue: /* CIL Label */
11806|      0|                ;
11807|       |
11808|      0|                if (!((unsigned long)beg <= (unsigned long)(buf + size))) {
11809|      0|                    goto while_break;
11810|      0|                }
11811|      0|                {
11812|      0|                    tmp___1 = kwsexec(kwset, beg - match_lines, (size_t)(((buf + size) - beg) + (long)match_lines),
11813|      0|                                      &kwsmatch);
11814|      0|                    offset = tmp___1;
11815|      0|                }
11816|      0|                if (offset == 0xffffffffffffffffUL) {
11817|      0|                    goto failure;
11818|      0|                }
11819|      0|                len = kwsmatch.size[0] - (size_t)match_lines;
11820|      0|                if (!match_lines) {
11821|      0|                    {
11822|      0|                        tmp___2 = __ctype_get_mb_cur_max();
11823|      0|                    }
11824|      0|                    if (tmp___2 > 1UL) {
11825|      0|                        {
11826|      0|                            tmp___3 = using_utf8();
11827|      0|                        }
11828|      0|                        if (!tmp___3) {
11829|      0|                            {
11830|      0|                                tmp___4 = mb_goback(&mb_start, beg + offset, buf + size);
11831|      0|                            }
11832|      0|                            if (tmp___4 != 0L) {
11833|      0|                                beg = mb_start;
11834|      0|                                goto __Cont;
11835|      0|                            }
11836|      0|                        }
11837|      0|                    }
11838|      0|                }
11839|      0|                beg += offset;
11840|      0|                if (start_ptr) {
11841|      0|                    if (!match_words) {
11842|      0|                        goto success_in_beg_and_len;
11843|      0|                    }
11844|      0|                }
11845|      0|                if (match_lines) {
11846|      0|                    goto success_in_beg_and_len;
11847|      0|                }
11848|      0|                if (match_words) {
11849|      0|                    try
11850|      0|                            = beg;
11851|      0|                    {
11852|      0|                        while (1) {
11853|      0|while_continue___0: /* CIL Label */
11854|      0|                            ;
11855|      0|                            {
11856|      0|                                tmp___5 = mb_prev_wc(buf, try, buf + size);
11857|      0|                                tmp___6 = wordchar(tmp___5);
11858|      0|                            }
11859|      0|                            if (tmp___6) {
11860|      0|                                goto while_break___0;
11861|      0|                            }
11862|      0|                            {
11863|      0|                                tmp___7 = mb_next_wc(try + len, buf + size);
11864|      0|                                tmp___8 = wordchar(tmp___7);
11865|      0|                            }
11866|      0|                            if (tmp___8) {
11867|      0|                                if (!len) {
11868|      0|                                    goto while_break___0;
11869|      0|                                }
11870|      0|                                {
11871|      0|                                    len--;
11872|      0|                                    offset = kwsexec(kwset, beg, len, &kwsmatch);
11873|      0|                                }
11874|      0|                                if (offset == 0xffffffffffffffffUL) {
11875|      0|                                    goto while_break___0;
11876|      0|                                }
11877|      0|                                try
11878|      0|                                        = beg + offset;
11879|      0|                                len = kwsmatch.size[0];
11880|      0|                            }
11881|      0|                            else {
11882|      0|                                if (!start_ptr) {
11883|      0|                                    goto success;
11884|      0|                                }
11885|      0|                                else {
11886|      0|                                    goto success_in_beg_and_len;
11887|      0|                                }
11888|      0|                            }
11889|      0|                        }
11890|      0|while_break___3: /* CIL Label */
11891|      0|                        ;
11892|      0|                    }
11893|      0|while_break___0:
11894|      0|                    ;
11895|      0|                }
11896|      0|                else {
11897|      0|                    goto success;
11898|      0|                }
11899|      0|__Cont:
11900|      0|                beg++;
11901|      0|            }
11902|      0|while_break___2: /* CIL Label */
11903|      0|            ;
11904|      0|        }
11905|      0|while_break:
11906|      0|        ;
11907|      0|failure:
11908|      0|        return ((size_t)-1);
11909|      0|success : {
11910|      0|            end = (char const *)memchr((void const *)(beg + len), (int)eol, (size_t)((buf + size) - (beg + len)));
11911|      0|        }
11912|      0|        if ((unsigned long)end != (unsigned long)((void *)0)) {
11913|      0|            end++;
11914|      0|        }
11915|      0|        else {
11916|      0|            end = buf + size;
11917|      0|        }
11918|      0|        {
11919|      0|            while (1) {
11920|      0|while_continue___1: /* CIL Label */
11921|      0|                ;
11922|       |
11923|      0|                if ((unsigned long)buf < (unsigned long)beg) {
11924|      0|                    if (!((int const) * (beg + -1) != (int const)eol)) {
11925|      0|                        goto while_break___1;
11926|      0|                    }
11927|      0|                }
11928|      0|                else {
11929|      0|                    goto while_break___1;
11930|      0|                }
11931|      0|                beg--;
11932|      0|            }
11933|      0|while_break___4: /* CIL Label */
11934|      0|            ;
11935|      0|        }
11936|      0|while_break___1:
11937|      0|        len = (size_t)(end - beg);
11938|      0|success_in_beg_and_len : {
11939|      0|            off = (size_t)(beg - buf);
11940|      0|            mb_case_map_apply((mb_len_map_t const *)map, &off, &len);
11941|      0|            *match_size = len;
11942|      0|            ret_val = off;
11943|      0|        }
11944|      0|        return (ret_val);
11945|      0|    }
11946|      0|}
11947|       |kwset_t kwsalloc(char const *trans___0);
11948|       |static unsigned char to_uchar(char ch)
11949|     30|{
11950|       |
11951|     30|    {
11952|     30|        return ((unsigned char)ch);
11953|     30|    }
11954|     30|}
11955|       |extern void _obstack_newchunk(struct obstack *, int);
11956|       |extern int _obstack_begin(struct obstack *, int, int, void *(*)(long), void (*)(void *));
11957|       |static char tr(char const *trans___0, char c)
11958|     27|{
11959|     27|    unsigned char tmp;
11960|     27|    int tmp___0;
11961|       |
11962|     27|    {
11963|     27|        if (trans___0) {
11964|      0|            {
11965|      0|                tmp = to_uchar(c);
11966|      0|                tmp___0 = (int)*(trans___0 + (int)tmp);
11967|      0|            }
11968|      0|        }
11969|     27|        else {
11970|     27|            tmp___0 = (int)c;
11971|     27|        }
11972|     27|        return ((char)tmp___0);
11973|     27|    }
11974|     27|}
11975|       |kwset_t kwsalloc(char const *trans___0)
11976|      2|{
11977|      2|    struct kwset *kwset___1;
11978|      2|    struct kwset *tmp;
11979|      2|    struct obstack *__h;
11980|      2|    struct obstack *__o;
11981|      2|    int __len;
11982|      2|    struct obstack *__o1;
11983|      2|    void *__value;
11984|      2|    char *tmp___0;
11985|      2|    char *tmp___1;
11986|       |
11987|      2|    {
11988|      2|        {
11989|      2|            tmp = (struct kwset *)xmalloc(sizeof(*kwset___1));
11990|      2|            kwset___1 = tmp;
11991|      2|            _obstack_begin(&kwset___1->obstack, 0, 0, (void *(*)(long))(&xmalloc), &free);
11992|      2|            kwset___1->words = (ptrdiff_t)0;
11993|      2|            __h = &kwset___1->obstack;
11994|      2|            __o = __h;
11995|      2|            __len = (int)sizeof(*(kwset___1->trie));
11996|      2|        }
11997|      2|        if (__o->chunk_limit - __o->next_free < (long)__len) {
11998|      0|            {
11999|      0|                _obstack_newchunk(__o, __len);
12000|      0|            }
12001|      0|        }
12002|      2|        __o->next_free += __len;
12003|      2|        __o1 = __h;
12004|      2|        __value = (void *)__o1->object_base;
12005|      2|        if ((unsigned long)__o1->next_free == (unsigned long)__value) {
12006|      0|            __o1->maybe_empty_object = 1U;
12007|      0|        }
12008|      2|        if (sizeof(long) < sizeof(void *)) {
12009|      0|            tmp___0 = __o1->object_base;
12010|      0|        }
12011|      2|        else {
12012|      2|            tmp___0 = (char *)0;
12013|      2|        }
12014|      2|        if (sizeof(long) < sizeof(void *)) {
12015|      0|            tmp___1 = __o1->object_base;
12016|      0|        }
12017|      2|        else {
12018|      2|            tmp___1 = (char *)0;
12019|      2|        }
12020|      2|        __o1->next_free = tmp___0 + (((__o1->next_free - tmp___1) + (long)__o1->alignment_mask) & (long)(~__o1->alignment_mask));
12021|      2|        if (__o1->next_free - (char *)__o1->chunk > __o1->chunk_limit - (char *)__o1->chunk) {
12022|      0|            __o1->next_free = __o1->chunk_limit;
12023|      0|        }
12024|      2|        __o1->object_base = __o1->next_free;
12025|      2|        kwset___1->trie = (struct trie *)__value;
12026|      2|        (kwset___1->trie)->accepting = (size_t)0;
12027|      2|        (kwset___1->trie)->links = (struct tree *)((void *)0);
12028|      2|        (kwset___1->trie)->parent = (struct trie *)((void *)0);
12029|      2|        (kwset___1->trie)->next = (struct trie *)((void *)0);
12030|      2|        (kwset___1->trie)->fail = (struct trie *)((void *)0);
12031|      2|        (kwset___1->trie)->depth = 0;
12032|      2|        (kwset___1->trie)->shift = 0;
12033|      2|        kwset___1->mind = 2147483647;
12034|      2|        kwset___1->maxd = -1;
12035|      2|        kwset___1->target = (char *)((void *)0);
12036|      2|        kwset___1->trans = trans___0;
12037|      2|        return (kwset___1);
12038|      2|    }
12039|      2|}
12040|       |void kwsincr(kwset_t kwset___1, char const *text, size_t len)
12041|      2|{
12042|      2|    struct trie *trie;
12043|      2|    char const *trans___0;
12044|      2|    unsigned char uc;
12045|      2|    unsigned char label___0;
12046|      2|    int tmp;
12047|      2|    struct tree *kwset_link;
12048|      2|    struct tree *links[12];
12049|      2|    enum __anonenum_dirs_58 dirs[12];
12050|      2|    int depth___0;
12051|      2|    int tmp___0;
12052|      2|    int tmp___1;
12053|      2|    struct obstack *__h;
12054|      2|    struct obstack *__o;
12055|      2|    int __len;
12056|      2|    struct obstack *__o1;
12057|      2|    void *__value;
12058|      2|    char *tmp___2;
12059|      2|    char *tmp___3;
12060|      2|    struct obstack *__h___0;
12061|      2|    struct obstack *__o___0;
12062|      2|    int __len___0;
12063|      2|    struct obstack *__o1___0;
12064|      2|    void *__value___0;
12065|      2|    char *tmp___4;
12066|      2|    char *tmp___5;
12067|      2|    struct tree *t;
12068|      2|    struct tree *r;
12069|      2|    struct tree *l;
12070|      2|    struct tree *rl;
12071|      2|    struct tree *lr;
12072|      2|    char tmp___6;
12073|      2|    char tmp___7;
12074|      2|    size_t tmp___8;
12075|      2|    void *__cil_tmp39;
12076|      2|    void *__cil_tmp40;
12077|       |
12078|      2|    {
12079|      2|        trie = kwset___1->trie;
12080|      2|        trans___0 = kwset___1->trans;
12081|      2|        text += len;
12082|      2|        {
12083|     12|            while (1) {
12084|     12|while_continue: /* CIL Label */
12085|     12|                ;
12086|     12|                tmp___8 = len;
12087|     12|                len--;
12088|     12|                if (!tmp___8) {
12089|      2|                    goto while_break;
12090|      2|                }
12091|     10|                text--;
12092|     10|                uc = (unsigned char)*text;
12093|     10|                if (trans___0) {
12094|      0|                    tmp = (int)*(trans___0 + (int)uc);
12095|      0|                }
12096|     10|                else {
12097|     10|                    tmp = (int)uc;
12098|     10|                }
12099|     10|                label___0 = (unsigned char)tmp;
12100|     10|                kwset_link = trie->links;
12101|     10|                links[0] = (struct tree *)(&trie->links);
12102|     10|                dirs[0] = (enum __anonenum_dirs_58)0;
12103|     10|                depth___0 = 1;
12104|     10|                {
12105|     10|                    while (1) {
12106|     10|while_continue___0: /* CIL Label */
12107|     10|                        ;
12108|       |
12109|     10|                        if (kwset_link) {
12110|      0|                            if (!((int)label___0 != (int)kwset_link->label)) {
12111|      0|                                goto while_break___0;
12112|      0|                            }
12113|      0|                        }
12114|     10|                        else {
12115|     10|                            goto while_break___0;
12116|     10|                        }
12117|      0|                        links[depth___0] = kwset_link;
12118|      0|                        if ((int)label___0 < (int)kwset_link->label) {
12119|      0|                            tmp___0 = depth___0;
12120|      0|                            depth___0++;
12121|      0|                            dirs[tmp___0] = (enum __anonenum_dirs_58)0;
12122|      0|                            kwset_link = kwset_link->llink;
12123|      0|                        }
12124|      0|                        else {
12125|      0|                            tmp___1 = depth___0;
12126|      0|                            depth___0++;
12127|      0|                            dirs[tmp___1] = (enum __anonenum_dirs_58)1;
12128|      0|                            kwset_link = kwset_link->rlink;
12129|      0|                        }
12130|      0|                    }
12131|      0|while_break___3: /* CIL Label */
12132|      0|                    ;
12133|      0|                }
12134|     10|while_break___0:
12135|     10|                ;
12136|     10|                if (!kwset_link) {
12137|     10|                    __h = &kwset___1->obstack;
12138|     10|                    __o = __h;
12139|     10|                    __len = (int)sizeof(*kwset_link);
12140|     10|                    if (__o->chunk_limit - __o->next_free < (long)__len) {
12141|      0|                        {
12142|      0|                            _obstack_newchunk(__o, __len);
12143|      0|                        }
12144|      0|                    }
12145|     10|                    __o->next_free += __len;
12146|     10|                    __o1 = __h;
12147|     10|                    __value = (void *)__o1->object_base;
12148|     10|                    if ((unsigned long)__o1->next_free == (unsigned long)__value) {
12149|      0|                        __o1->maybe_empty_object = 1U;
12150|      0|                    }
12151|     10|                    if (sizeof(long) < sizeof(void *)) {
12152|      0|                        tmp___2 = __o1->object_base;
12153|      0|                    }
12154|     10|                    else {
12155|     10|                        tmp___2 = (char *)0;
12156|     10|                    }
12157|     10|                    if (sizeof(long) < sizeof(void *)) {
12158|      0|                        tmp___3 = __o1->object_base;
12159|      0|                    }
12160|     10|                    else {
12161|     10|                        tmp___3 = (char *)0;
12162|     10|                    }
12163|     10|                    __o1->next_free = tmp___2 + (((__o1->next_free - tmp___3) + (long)__o1->alignment_mask) & (long)(~__o1->alignment_mask));
12164|     10|                    if (__o1->next_free - (char *)__o1->chunk > __o1->chunk_limit - (char *)__o1->chunk) {
12165|      0|                        __o1->next_free = __o1->chunk_limit;
12166|      0|                    }
12167|     10|                    __o1->object_base = __o1->next_free;
12168|     10|                    kwset_link = (struct tree *)__value;
12169|     10|                    kwset_link->llink = (struct tree *)((void *)0);
12170|     10|                    kwset_link->rlink = (struct tree *)((void *)0);
12171|     10|                    __h___0 = &kwset___1->obstack;
12172|     10|                    __o___0 = __h___0;
12173|     10|                    __len___0 = (int)sizeof(*(kwset_link->trie));
12174|     10|                    if (__o___0->chunk_limit - __o___0->next_free < (long)__len___0) {
12175|      0|                        {
12176|      0|                            _obstack_newchunk(__o___0, __len___0);
12177|      0|                        }
12178|      0|                    }
12179|     10|                    __o___0->next_free += __len___0;
12180|     10|                    __o1___0 = __h___0;
12181|     10|                    __value___0 = (void *)__o1___0->object_base;
12182|     10|                    if ((unsigned long)__o1___0->next_free == (unsigned long)__value___0) {
12183|      0|                        __o1___0->maybe_empty_object = 1U;
12184|      0|                    }
12185|     10|                    if (sizeof(long) < sizeof(void *)) {
12186|      0|                        tmp___4 = __o1___0->object_base;
12187|      0|                    }
12188|     10|                    else {
12189|     10|                        tmp___4 = (char *)0;
12190|     10|                    }
12191|     10|                    if (sizeof(long) < sizeof(void *)) {
12192|      0|                        tmp___5 = __o1___0->object_base;
12193|      0|                    }
12194|     10|                    else {
12195|     10|                        tmp___5 = (char *)0;
12196|     10|                    }
12197|     10|                    __o1___0->next_free = tmp___4 + (((__o1___0->next_free - tmp___5) + (long)__o1___0->alignment_mask) & (long)(~__o1___0->alignment_mask));
12198|     10|                    if (__o1___0->next_free - (char *)__o1___0->chunk > __o1___0->chunk_limit - (char *)__o1___0->chunk) {
12199|      0|                        __o1___0->next_free = __o1___0->chunk_limit;
12200|      0|                    }
12201|     10|                    __o1___0->object_base = __o1___0->next_free;
12202|     10|                    kwset_link->trie = (struct trie *)__value___0;
12203|     10|                    (kwset_link->trie)->accepting = (size_t)0;
12204|     10|                    (kwset_link->trie)->links = (struct tree *)((void *)0);
12205|     10|                    (kwset_link->trie)->parent = trie;
12206|     10|                    (kwset_link->trie)->next = (struct trie *)((void *)0);
12207|     10|                    (kwset_link->trie)->fail = (struct trie *)((void *)0);
12208|     10|                    (kwset_link->trie)->depth = trie->depth + 1;
12209|     10|                    (kwset_link->trie)->shift = 0;
12210|     10|                    kwset_link->label = label___0;
12211|     10|                    kwset_link->balance = (char)0;
12212|     10|                    depth___0--;
12213|     10|                    if ((unsigned int)dirs[depth___0] == 0U) {
12214|     10|                        (links[depth___0])->llink = kwset_link;
12215|     10|                    }
12216|      0|                    else {
12217|      0|                        (links[depth___0])->rlink = kwset_link;
12218|      0|                    }
12219|     10|                    {
12220|     10|                        while (1) {
12221|     10|while_continue___1: /* CIL Label */
12222|     10|                            ;
12223|       |
12224|     10|                            if (depth___0) {
12225|      0|                                if (!(!(links[depth___0])->balance)) {
12226|      0|                                    goto while_break___1;
12227|      0|                                }
12228|      0|                            }
12229|     10|                            else {
12230|     10|                                goto while_break___1;
12231|     10|                            }
12232|      0|                            if ((unsigned int)dirs[depth___0] == 0U) {
12233|      0|                                (links[depth___0])->balance = (char)((int)(links[depth___0])->balance - 1);
12234|      0|                            }
12235|      0|                            else {
12236|      0|                                (links[depth___0])->balance = (char)((int)(links[depth___0])->balance + 1);
12237|      0|                            }
12238|      0|                            depth___0--;
12239|      0|                        }
12240|      0|while_break___4: /* CIL Label */
12241|      0|                        ;
12242|      0|                    }
12243|     10|while_break___1:
12244|     10|                    ;
12245|     10|                    if (depth___0) {
12246|      0|                        if ((unsigned int)dirs[depth___0] == 0U) {
12247|      0|                            (links[depth___0])->balance = (char)((int)(links[depth___0])->balance - 1);
12248|      0|                            if ((links[depth___0])->balance) {
12249|      0|                                goto _L;
12250|      0|                            }
12251|      0|                            else {
12252|      0|                                goto _L___0;
12253|      0|                            }
12254|      0|                        }
12255|      0|                        else {
12256|      0|_L___0:
12257|      0|                            if ((unsigned int)dirs[depth___0] == 1U) {
12258|      0|                                (links[depth___0])->balance = (char)((int)(links[depth___0])->balance + 1);
12259|      0|                                if ((links[depth___0])->balance) {
12260|      0|_L:
12261|      0|                                    if ((int)(links[depth___0])->balance == -2) {
12262|      0|                                        goto case_neg_2;
12263|      0|                                    }
12264|      0|                                    if ((int)(links[depth___0])->balance == 2) {
12265|      0|                                        goto case_2;
12266|      0|                                    }
12267|      0|                                    goto switch_default___1;
12268|      0|case_neg_2:
12269|      0|                                    if ((unsigned int)dirs[depth___0 + 1] == 0U) {
12270|      0|                                        goto case_0;
12271|      0|                                    }
12272|      0|                                    if ((unsigned int)dirs[depth___0 + 1] == 1U) {
12273|      0|                                        goto case_1;
12274|      0|                                    }
12275|      0|                                    goto switch_default;
12276|      0|case_0:
12277|      0|                                    r = links[depth___0];
12278|      0|                                    t = r->llink;
12279|      0|                                    rl = t->rlink;
12280|      0|                                    t->rlink = r;
12281|      0|                                    r->llink = rl;
12282|      0|                                    tmp___6 = (char)0;
12283|      0|                                    r->balance = tmp___6;
12284|      0|                                    t->balance = tmp___6;
12285|      0|                                    goto switch_break___0;
12286|      0|case_1:
12287|      0|                                    r = links[depth___0];
12288|      0|                                    l = r->llink;
12289|      0|                                    t = l->rlink;
12290|      0|                                    rl = t->rlink;
12291|      0|                                    lr = t->llink;
12292|      0|                                    t->llink = l;
12293|      0|                                    l->rlink = lr;
12294|      0|                                    t->rlink = r;
12295|      0|                                    r->llink = rl;
12296|      0|                                    if ((int)t->balance != 1) {
12297|      0|                                        l->balance = (char)0;
12298|      0|                                    }
12299|      0|                                    else {
12300|      0|                                        l->balance = (char)-1;
12301|      0|                                    }
12302|      0|                                    if ((int)t->balance != -1) {
12303|      0|                                        r->balance = (char)0;
12304|      0|                                    }
12305|      0|                                    else {
12306|      0|                                        r->balance = (char)1;
12307|      0|                                    }
12308|      0|                                    t->balance = (char)0;
12309|      0|                                    goto switch_break___0;
12310|      0|switch_default : {
12311|      0|                                        abort();
12312|      0|                                    }
12313|      0|switch_break___0:
12314|      0|                                    ;
12315|      0|                                    goto switch_break;
12316|      0|case_2:
12317|      0|                                    if ((unsigned int)dirs[depth___0 + 1] == 1U) {
12318|      0|                                        goto case_1___0;
12319|      0|                                    }
12320|      0|                                    if ((unsigned int)dirs[depth___0 + 1] == 0U) {
12321|      0|                                        goto case_0___0;
12322|      0|                                    }
12323|      0|                                    goto switch_default___0;
12324|      0|case_1___0:
12325|      0|                                    l = links[depth___0];
12326|      0|                                    t = l->rlink;
12327|      0|                                    lr = t->llink;
12328|      0|                                    t->llink = l;
12329|      0|                                    l->rlink = lr;
12330|      0|                                    tmp___7 = (char)0;
12331|      0|                                    l->balance = tmp___7;
12332|      0|                                    t->balance = tmp___7;
12333|      0|                                    goto switch_break___1;
12334|      0|case_0___0:
12335|      0|                                    l = links[depth___0];
12336|      0|                                    r = l->rlink;
12337|      0|                                    t = r->llink;
12338|      0|                                    lr = t->llink;
12339|      0|                                    rl = t->rlink;
12340|      0|                                    t->llink = l;
12341|      0|                                    l->rlink = lr;
12342|      0|                                    t->rlink = r;
12343|      0|                                    r->llink = rl;
12344|      0|                                    if ((int)t->balance != 1) {
12345|      0|                                        l->balance = (char)0;
12346|      0|                                    }
12347|      0|                                    else {
12348|      0|                                        l->balance = (char)-1;
12349|      0|                                    }
12350|      0|                                    if ((int)t->balance != -1) {
12351|      0|                                        r->balance = (char)0;
12352|      0|                                    }
12353|      0|                                    else {
12354|      0|                                        r->balance = (char)1;
12355|      0|                                    }
12356|      0|                                    t->balance = (char)0;
12357|      0|                                    goto switch_break___1;
12358|      0|switch_default___0 : {
12359|      0|                                        abort();
12360|      0|                                    }
12361|      0|switch_break___1:
12362|      0|                                    ;
12363|      0|                                    goto switch_break;
12364|      0|switch_default___1 : {
12365|      0|                                        abort();
12366|      0|                                    }
12367|      0|switch_break:
12368|      0|                                    ;
12369|      0|                                    if ((unsigned int)dirs[depth___0 - 1] == 0U) {
12370|      0|                                        (links[depth___0 - 1])->llink = t;
12371|      0|                                    }
12372|      0|                                    else {
12373|      0|                                        (links[depth___0 - 1])->rlink = t;
12374|      0|                                    }
12375|      0|                                }
12376|      0|                            }
12377|      0|                        }
12378|      0|                    }
12379|     10|                }
12380|     10|                trie = kwset_link->trie;
12381|     10|            }
12382|      0|while_break___2: /* CIL Label */
12383|      0|            ;
12384|      0|        }
12385|      2|while_break:
12386|      2|        ;
12387|      2|        if (!trie->accepting) {
12388|      2|            trie->accepting = (size_t)(1L + 2L * kwset___1->words);
12389|      2|        }
12390|      2|        (kwset___1->words)++;
12391|      2|        if (trie->depth < kwset___1->mind) {
12392|      2|            kwset___1->mind = trie->depth;
12393|      2|        }
12394|      2|        if (trie->depth > kwset___1->maxd) {
12395|      2|            kwset___1->maxd = trie->depth;
12396|      2|        }
12397|      2|        return;
12398|      0|    }
12399|      0|}
12400|       |static void enqueue(struct tree *tree, struct trie **last)
12401|     32|{
12402|     32|    struct trie *tmp;
12403|       |
12404|     32|    {
12405|     32|        if (!tree) {
12406|     22|            return;
12407|     22|        }
12408|     10|        {
12409|     10|            enqueue(tree->llink, last);
12410|     10|            enqueue(tree->rlink, last);
12411|     10|            tmp = tree->trie;
12412|     10|            (*last)->next = tmp;
12413|     10|            *last = tmp;
12414|     10|        }
12415|     10|        return;
12416|     32|    }
12417|     32|}
12418|       |static void treefails(struct tree const *tree, struct trie const *fail, struct trie *recourse)
12419|     32|{
12420|     32|    struct tree *kwset_link;
12421|       |
12422|     32|    {
12423|     32|        if (!tree) {
12424|     22|            return;
12425|     22|        }
12426|     10|        {
12427|     10|            treefails((struct tree const *)tree->llink, fail, recourse);
12428|     10|            treefails((struct tree const *)tree->rlink, fail, recourse);
12429|     10|        }
12430|     10|        {
12431|     18|            while (1) {
12432|     18|while_continue: /* CIL Label */
12433|     18|                ;
12434|       |
12435|     18|                if (!fail) {
12436|      6|                    goto while_break;
12437|      6|                }
12438|     12|                kwset_link = (struct tree *)fail->links;
12439|     12|                {
12440|     20|                    while (1) {
12441|     20|while_continue___0: /* CIL Label */
12442|     20|                        ;
12443|       |
12444|     20|                        if (kwset_link) {
12445|     12|                            if (!((int const)tree->label != (int const)kwset_link->label)) {
12446|      4|                                goto while_break___0;
12447|      4|                            }
12448|     12|                        }
12449|      8|                        else {
12450|      8|                            goto while_break___0;
12451|      8|                        }
12452|      8|                        if ((int const)tree->label < (int const)kwset_link->label) {
12453|      6|                            kwset_link = kwset_link->llink;
12454|      6|                        }
12455|      2|                        else {
12456|      2|                            kwset_link = kwset_link->rlink;
12457|      2|                        }
12458|      8|                    }
12459|      0|while_break___2: /* CIL Label */
12460|      0|                    ;
12461|      0|                }
12462|     12|while_break___0:
12463|     12|                ;
12464|     12|                if (kwset_link) {
12465|      4|                    (tree->trie)->fail = kwset_link->trie;
12466|      4|                    return;
12467|      4|                }
12468|      8|                fail = (struct trie const *)fail->fail;
12469|      8|            }
12470|      0|while_break___1: /* CIL Label */
12471|      0|            ;
12472|      0|        }
12473|      6|while_break:
12474|      6|        (tree->trie)->fail = recourse;
12475|      6|        return;
12476|      0|    }
12477|      0|}
12478|       |static void treedelta(struct tree const *tree, unsigned int depth___0, unsigned char *delta)
12479|     32|{
12480|       |
12481|     32|    {
12482|     32|        if (!tree) {
12483|     22|            return;
12484|     22|        }
12485|     10|        {
12486|     10|            treedelta((struct tree const *)tree->llink, depth___0, delta);
12487|     10|            treedelta((struct tree const *)tree->rlink, depth___0, delta);
12488|     10|        }
12489|     10|        if (depth___0 < (unsigned int)*(delta + (int const)tree->label)) {
12490|      6|            *(delta + (int const)tree->label) = (unsigned char)depth___0;
12491|      6|        }
12492|     10|        return;
12493|     32|    }
12494|     32|}
12495|       |static int __attribute__((__pure__)) hasevery(struct tree const *a, struct tree const *b)
12496|     38|{
12497|     38|    int __attribute__((__pure__)) tmp;
12498|     38|    int __attribute__((__pure__)) tmp___0;
12499|       |
12500|     38|    {
12501|     38|        if (!b) {
12502|     26|            return ((int __attribute__((__pure__)))1);
12503|     26|        }
12504|     12|        {
12505|     12|            tmp = hasevery(a, (struct tree const *)b->llink);
12506|     12|        }
12507|     12|        if (!tmp) {
12508|      0|            return ((int __attribute__((__pure__)))0);
12509|      0|        }
12510|     12|        {
12511|     12|            tmp___0 = hasevery(a, (struct tree const *)b->rlink);
12512|     12|        }
12513|     12|        if (!tmp___0) {
12514|      0|            return ((int __attribute__((__pure__)))0);
12515|      0|        }
12516|     12|        {
12517|     20|            while (1) {
12518|     20|while_continue: /* CIL Label */
12519|     20|                ;
12520|       |
12521|     20|                if (a) {
12522|     12|                    if (!((int const)b->label != (int const)a->label)) {
12523|      4|                        goto while_break;
12524|      4|                    }
12525|     12|                }
12526|      8|                else {
12527|      8|                    goto while_break;
12528|      8|                }
12529|      8|                if ((int const)b->label < (int const)a->label) {
12530|      6|                    a = (struct tree const *)a->llink;
12531|      6|                }
12532|      2|                else {
12533|      2|                    a = (struct tree const *)a->rlink;
12534|      2|                }
12535|      8|            }
12536|      0|while_break___0: /* CIL Label */
12537|      0|            ;
12538|      0|        }
12539|     12|while_break:
12540|     12|        ;
12541|     12|        return ((int __attribute__((__pure__)))(!(!a)));
12542|      0|    }
12543|      0|}
12544|       |static void treenext(struct tree const *tree, struct trie **next)
12545|      6|{
12546|       |
12547|      6|    {
12548|      6|        if (!tree) {
12549|      4|            return;
12550|      4|        }
12551|      2|        {
12552|      2|            treenext((struct tree const *)tree->llink, next);
12553|      2|            treenext((struct tree const *)tree->rlink, next);
12554|      2|            *(next + (int const)tree->label) = (struct trie *)tree->trie;
12555|      2|        }
12556|      2|        return;
12557|      6|    }
12558|      6|}
12559|       |void kwsprep(kwset_t kwset___1)
12560|      2|{
12561|      2|    char const *trans___0;
12562|      2|    int i;
12563|      2|    unsigned char deltabuf[256];
12564|      2|    unsigned char *delta;
12565|      2|    unsigned char *tmp;
12566|      2|    int tmp___0;
12567|      2|    struct trie *curr;
12568|      2|    struct trie *last;
12569|      2|    struct trie *fail;
12570|      2|    int __attribute__((__pure__)) tmp___1;
12571|      2|    struct trie *nextbuf[256];
12572|      2|    struct trie **next;
12573|      2|    struct trie **tmp___2;
12574|      2|    unsigned char tmp___3;
12575|      2|    struct obstack *__h;
12576|      2|    struct obstack *__o;
12577|      2|    int __len;
12578|      2|    struct obstack *__o1;
12579|      2|    void *__value;
12580|      2|    char *tmp___4;
12581|      2|    char *tmp___5;
12582|      2|    struct obstack *__h___0;
12583|      2|    struct obstack *__o___0;
12584|      2|    int __len___0;
12585|      2|    struct obstack *__o1___0;
12586|      2|    void *__value___0;
12587|      2|    char *tmp___6;
12588|      2|    char *tmp___7;
12589|      2|    char gc1;
12590|      2|    char tmp___8;
12591|      2|    int gc1help;
12592|      2|    char const *equiv1;
12593|      2|    char const *tmp___9;
12594|      2|    char const *equiv2;
12595|      2|    char const *tmp___10;
12596|      2|    unsigned char tmp___12;
12597|      2|    void *tmp___13;
12598|      2|    unsigned char tmp___14;
12599|      2|    void *__cil_tmp44;
12600|      2|    void *__cil_tmp45;
12601|       |
12602|      2|    {
12603|      2|        trans___0 = kwset___1->trans;
12604|      2|        if (trans___0) {
12605|      0|            tmp = deltabuf;
12606|      0|        }
12607|      2|        else {
12608|      2|            tmp = kwset___1->delta;
12609|      2|        }
12610|      2|        delta = tmp;
12611|      2|        if (kwset___1->mind < 255) {
12612|      2|            tmp___0 = kwset___1->mind;
12613|      2|        }
12614|      0|        else {
12615|      0|            tmp___0 = 255;
12616|      0|        }
12617|      2|        {
12618|      2|            memset((void *)delta, tmp___0, sizeof(deltabuf));
12619|      2|            last = kwset___1->trie;
12620|      2|            curr = last;
12621|      2|        }
12622|      2|        {
12623|     14|            while (1) {
12624|     14|while_continue: /* CIL Label */
12625|     14|                ;
12626|       |
12627|     14|                if (!curr) {
12628|      2|                    goto while_break;
12629|      2|                }
12630|     12|                {
12631|     12|                    enqueue(curr->links, &last);
12632|     12|                    curr->shift = kwset___1->mind;
12633|     12|                    curr->maxshift = kwset___1->mind;
12634|     12|                    treedelta((struct tree const *)curr->links, (unsigned int)curr->depth, delta);
12635|     12|                    treefails((struct tree const *)curr->links, (struct trie const *)curr->fail,
12636|     12|                              kwset___1->trie);
12637|     12|                    fail = curr->fail;
12638|     12|                }
12639|     12|                {
12640|     26|                    while (1) {
12641|     26|while_continue___0: /* CIL Label */
12642|     26|                        ;
12643|       |
12644|     26|                        if (!fail) {
12645|     12|                            goto while_break___0;
12646|     12|                        }
12647|     14|                        {
12648|     14|                            tmp___1 = hasevery((struct tree const *)fail->links, (struct tree const *)curr->links);
12649|     14|                        }
12650|     14|                        if (!tmp___1) {
12651|      8|                            if (curr->depth - fail->depth < fail->shift) {
12652|      4|                                fail->shift = curr->depth - fail->depth;
12653|      4|                            }
12654|      8|                        }
12655|     14|                        if (curr->accepting) {
12656|      2|                            if (fail->maxshift > curr->depth - fail->depth) {
12657|      0|                                fail->maxshift = curr->depth - fail->depth;
12658|      0|                            }
12659|      2|                        }
12660|     14|                        fail = fail->fail;
12661|     14|                    }
12662|      0|while_break___7: /* CIL Label */
12663|      0|                    ;
12664|      0|                }
12665|     12|while_break___0:
12666|     12|                curr = curr->next;
12667|     12|            }
12668|      0|while_break___6: /* CIL Label */
12669|      0|            ;
12670|      0|        }
12671|      2|while_break:
12672|      2|        curr = (kwset___1->trie)->next;
12673|      2|        {
12674|     12|            while (1) {
12675|     12|while_continue___1: /* CIL Label */
12676|     12|                ;
12677|       |
12678|     12|                if (!curr) {
12679|      2|                    goto while_break___1;
12680|      2|                }
12681|     10|                if (curr->maxshift > (curr->parent)->maxshift) {
12682|      0|                    curr->maxshift = (curr->parent)->maxshift;
12683|      0|                }
12684|     10|                if (curr->shift > curr->maxshift) {
12685|      0|                    curr->shift = curr->maxshift;
12686|      0|                }
12687|     10|                curr = curr->next;
12688|     10|            }
12689|      0|while_break___8: /* CIL Label */
12690|      0|            ;
12691|      0|        }
12692|      2|while_break___1:
12693|      2|        ;
12694|      2|        if (trans___0) {
12695|      0|            tmp___2 = nextbuf;
12696|      0|        }
12697|      2|        else {
12698|      2|            tmp___2 = kwset___1->next;
12699|      2|        }
12700|      2|        {
12701|      2|            next = tmp___2;
12702|      2|            memset((void *)next, 0, sizeof(nextbuf));
12703|      2|            treenext((struct tree const *)(kwset___1->trie)->links, next);
12704|      2|        }
12705|      2|        if (trans___0) {
12706|      0|            i = 0;
12707|      0|            {
12708|      0|                while (1) {
12709|      0|while_continue___2: /* CIL Label */
12710|      0|                    ;
12711|       |
12712|      0|                    if (!(i < 256)) {
12713|      0|                        goto while_break___2;
12714|      0|                    }
12715|      0|                    {
12716|      0|                        tmp___3 = to_uchar((char)*(trans___0 + i));
12717|      0|                        kwset___1->next[i] = *(next + (int)tmp___3);
12718|      0|                        i++;
12719|      0|                    }
12720|      0|                }
12721|      0|while_break___9: /* CIL Label */
12722|      0|                ;
12723|      0|            }
12724|      0|while_break___2:
12725|      0|            ;
12726|      0|        }
12727|      2|        if (kwset___1->words == 1L) {
12728|      2|            __h = &kwset___1->obstack;
12729|      2|            __o = __h;
12730|      2|            __len = kwset___1->mind;
12731|      2|            if (__o->chunk_limit - __o->next_free < (long)__len) {
12732|      0|                {
12733|      0|                    _obstack_newchunk(__o, __len);
12734|      0|                }
12735|      0|            }
12736|      2|            __o->next_free += __len;
12737|      2|            __o1 = __h;
12738|      2|            __value = (void *)__o1->object_base;
12739|      2|            if ((unsigned long)__o1->next_free == (unsigned long)__value) {
12740|      0|                __o1->maybe_empty_object = 1U;
12741|      0|            }
12742|      2|            if (sizeof(long) < sizeof(void *)) {
12743|      0|                tmp___4 = __o1->object_base;
12744|      0|            }
12745|      2|            else {
12746|      2|                tmp___4 = (char *)0;
12747|      2|            }
12748|      2|            if (sizeof(long) < sizeof(void *)) {
12749|      0|                tmp___5 = __o1->object_base;
12750|      0|            }
12751|      2|            else {
12752|      2|                tmp___5 = (char *)0;
12753|      2|            }
12754|      2|            __o1->next_free = tmp___4 + (((__o1->next_free - tmp___5) + (long)__o1->alignment_mask) & (long)(~__o1->alignment_mask));
12755|      2|            if (__o1->next_free - (char *)__o1->chunk > __o1->chunk_limit - (char *)__o1->chunk) {
12756|      0|                __o1->next_free = __o1->chunk_limit;
12757|      0|            }
12758|      2|            __o1->object_base = __o1->next_free;
12759|      2|            kwset___1->target = (char *)__value;
12760|      2|            i = kwset___1->mind - 1;
12761|      2|            curr = kwset___1->trie;
12762|      2|            {
12763|     12|                while (1) {
12764|     12|while_continue___3: /* CIL Label */
12765|     12|                    ;
12766|       |
12767|     12|                    if (!(i >= 0)) {
12768|      2|                        goto while_break___3;
12769|      2|                    }
12770|     10|                    *(kwset___1->target + i) = (char)(curr->links)->label;
12771|     10|                    curr = curr->next;
12772|     10|                    i--;
12773|     10|                }
12774|      0|while_break___10: /* CIL Label */
12775|      0|                ;
12776|      0|            }
12777|      2|while_break___3:
12778|      2|            ;
12779|      2|            if (kwset___1->mind > 1) {
12780|      2|                __h___0 = &kwset___1->obstack;
12781|      2|                __o___0 = __h___0;
12782|      2|                __len___0 = (int)(sizeof(*(kwset___1->shift)) * (unsigned long)(kwset___1->mind - 1));
12783|      2|                if (__o___0->chunk_limit - __o___0->next_free < (long)__len___0) {
12784|      0|                    {
12785|      0|                        _obstack_newchunk(__o___0, __len___0);
12786|      0|                    }
12787|      0|                }
12788|      2|                __o___0->next_free += __len___0;
12789|      2|                __o1___0 = __h___0;
12790|      2|                __value___0 = (void *)__o1___0->object_base;
12791|      2|                if ((unsigned long)__o1___0->next_free == (unsigned long)__value___0) {
12792|      0|                    __o1___0->maybe_empty_object = 1U;
12793|      0|                }
12794|      2|                if (sizeof(long) < sizeof(void *)) {
12795|      0|                    tmp___6 = __o1___0->object_base;
12796|      0|                }
12797|      2|                else {
12798|      2|                    tmp___6 = (char *)0;
12799|      2|                }
12800|      2|                if (sizeof(long) < sizeof(void *)) {
12801|      0|                    tmp___7 = __o1___0->object_base;
12802|      0|                }
12803|      2|                else {
12804|      2|                    tmp___7 = (char *)0;
12805|      2|                }
12806|      2|                __o1___0->next_free = tmp___6 + (((__o1___0->next_free - tmp___7) + (long)__o1___0->alignment_mask) & (long)(~__o1___0->alignment_mask));
12807|      2|                if (__o1___0->next_free - (char *)__o1___0->chunk > __o1___0->chunk_limit - (char *)__o1___0->chunk) {
12808|      0|                    __o1___0->next_free = __o1___0->chunk_limit;
12809|      0|                }
12810|      2|                __o1___0->object_base = __o1___0->next_free;
12811|      2|                kwset___1->shift = (int *)__value___0;
12812|      2|                i = 0;
12813|      2|                curr = (kwset___1->trie)->next;
12814|      2|                {
12815|     10|                    while (1) {
12816|     10|while_continue___4: /* CIL Label */
12817|     10|                        ;
12818|       |
12819|     10|                        if (!(i < kwset___1->mind - 1)) {
12820|      2|                            goto while_break___4;
12821|      2|                        }
12822|      8|                        *(kwset___1->shift + i) = curr->shift;
12823|      8|                        curr = curr->next;
12824|      8|                        i++;
12825|      8|                    }
12826|      0|while_break___11: /* CIL Label */
12827|      0|                    ;
12828|      0|                }
12829|      2|while_break___4:
12830|      2|                ;
12831|      2|            }
12832|      2|            {
12833|      2|                tmp___8 = tr(trans___0, *(kwset___1->target + (kwset___1->mind - 1)));
12834|      2|                gc1 = tmp___8;
12835|      2|                gc1help = -1;
12836|      2|            }
12837|      2|            if (trans___0) {
12838|      0|                {
12839|      0|                    tmp___9 = (char const *)memchr((void const *)trans___0, (int)gc1, (size_t)256);
12840|      0|                    equiv1 = tmp___9;
12841|      0|                    tmp___10 = (char const *)memchr((void const *)(equiv1 + 1), (int)gc1, (size_t)((trans___0 + 256) - (equiv1 + 1)));
12842|      0|                    equiv2 = tmp___10;
12843|      0|                }
12844|      0|                if (equiv2) {
12845|      0|                    {
12846|      0|                        tmp___13 = memchr((void const *)(equiv2 + 1), (int)gc1, (size_t)((trans___0 + 256) - (equiv2 + 1)));
12847|      0|                    }
12848|      0|                    if (tmp___13) {
12849|      0|                        gc1help = 256;
12850|      0|                    }
12851|      0|                    else {
12852|      0|                        {
12853|      0|                            tmp___12 = to_uchar(gc1);
12854|      0|                            gc1help = (int)(((long)tmp___12 ^ (equiv1 - trans___0)) ^ (equiv2 - trans___0));
12855|      0|                        }
12856|      0|                    }
12857|      0|                }
12858|      0|            }
12859|      2|            kwset___1->gc1 = gc1;
12860|      2|            kwset___1->gc1help = gc1help;
12861|      2|            if (kwset___1->mind > 1) {
12862|      2|                {
12863|      2|                    kwset___1->gc2 = tr(trans___0, *(kwset___1->target + (kwset___1->mind - 2)));
12864|      2|                }
12865|      2|            }
12866|      2|        }
12867|      2|        if (trans___0) {
12868|      0|            i = 0;
12869|      0|            {
12870|      0|                while (1) {
12871|      0|while_continue___5: /* CIL Label */
12872|      0|                    ;
12873|       |
12874|      0|                    if (!(i < 256)) {
12875|      0|                        goto while_break___5;
12876|      0|                    }
12877|      0|                    {
12878|      0|                        tmp___14 = to_uchar((char)*(trans___0 + i));
12879|      0|                        kwset___1->delta[i] = *(delta + (int)tmp___14);
12880|      0|                        i++;
12881|      0|                    }
12882|      0|                }
12883|      0|while_break___12: /* CIL Label */
12884|      0|                ;
12885|      0|            }
12886|      0|while_break___5:
12887|      0|            ;
12888|      0|        }
12889|      2|        return;
12890|      2|    }
12891|      2|}
12892|       |static _Bool bm_delta2_search(char const **tpp, char const *ep, char const *sp,
12893|       |                              int len, char const *trans___0, char gc1,
12894|       |                              char gc2, unsigned char const *d1, kwset_t kwset___1)
12895|      4|{
12896|      4|    char const *tp;
12897|      4|    int d;
12898|      4|    int skip;
12899|      4|    int i;
12900|      4|    char tmp;
12901|      4|    char tmp___0;
12902|      4|    char tmp___1;
12903|      4|    char tmp___2;
12904|      4|    char tmp___3;
12905|      4|    unsigned char tmp___4;
12906|      4|    char tmp___5;
12907|       |
12908|      4|    {
12909|      4|        tp = *tpp;
12910|      4|        d = len;
12911|      4|        skip = 0;
12912|      4|        {
12913|      5|            while (1) {
12914|      5|while_continue: /* CIL Label */
12915|      5|                ;
12916|      5|                {
12917|      5|                    i = 2;
12918|      5|                    tmp___3 = tr(trans___0, (char)*(tp + -2));
12919|      5|                }
12920|      5|                if ((int)tmp___3 == (int)gc2) {
12921|      3|                    {
12922|      9|                        while (1) {
12923|      9|while_continue___0: /* CIL Label */
12924|      9|                            ;
12925|      9|                            i++;
12926|      9|                            if (!(i <= d)) {
12927|      3|                                goto while_break___0;
12928|      3|                            }
12929|      6|                            {
12930|      6|                                tmp = tr(trans___0, (char)*(tp + -i));
12931|      6|                                tmp___0 = tr(trans___0, (char)*(sp + -i));
12932|      6|                            }
12933|      6|                            if ((int)tmp != (int)tmp___0) {
12934|      0|                                goto while_break___0;
12935|      0|                            }
12936|      6|                        }
12937|      0|while_break___3: /* CIL Label */
12938|      0|                        ;
12939|      0|                    }
12940|      3|while_break___0:
12941|      3|                    ;
12942|      3|                    if (i > d) {
12943|      3|                        i = (d + skip) + 1;
12944|      3|                        {
12945|      5|                            while (1) {
12946|      5|while_continue___1: /* CIL Label */
12947|      5|                                ;
12948|       |
12949|      5|                                if (!(i <= len)) {
12950|      3|                                    goto while_break___1;
12951|      3|                                }
12952|      2|                                {
12953|      2|                                    tmp___1 = tr(trans___0, (char)*(tp + -i));
12954|      2|                                    tmp___2 = tr(trans___0, (char)*(sp + -i));
12955|      2|                                }
12956|      2|                                if ((int)tmp___1 != (int)tmp___2) {
12957|      0|                                    goto while_break___1;
12958|      0|                                }
12959|      2|                                i++;
12960|      2|                            }
12961|      0|while_break___4: /* CIL Label */
12962|      0|                            ;
12963|      0|                        }
12964|      3|while_break___1:
12965|      3|                        ;
12966|      3|                        if (i > len) {
12967|      3|                            *tpp = tp - len;
12968|      3|                            return ((_Bool)1);
12969|      3|                        }
12970|      3|                    }
12971|      3|                }
12972|      2|                d = *(kwset___1->shift + (i - 2));
12973|      2|                tp += d;
12974|      2|                if ((unsigned long)tp > (unsigned long)ep) {
12975|      0|                    goto while_break;
12976|      0|                }
12977|      2|                {
12978|      2|                    tmp___5 = tr(trans___0, (char)*(tp + -1));
12979|      2|                }
12980|      2|                if ((int)tmp___5 != (int)gc1) {
12981|      1|                    if (d1) {
12982|      1|                        {
12983|      1|                            tmp___4 = to_uchar((char)*(tp + -1));
12984|      1|                            tp += (int const) * (d1 + (int)tmp___4);
12985|      1|                        }
12986|      1|                    }
12987|      1|                    goto while_break;
12988|      1|                }
12989|      1|                skip = i - 1;
12990|      1|            }
12991|      0|while_break___2: /* CIL Label */
12992|      0|            ;
12993|      0|        }
12994|      1|while_break:
12995|      1|        *tpp = tp;
12996|      1|        return ((_Bool)0);
12997|      0|    }
12998|      0|}
12999|       |static char const *memchr_kwset(char const *s, size_t n, kwset_t kwset___1)
13000|      0|{
13001|      0|    char const *tmp;
13002|      0|    int small_heuristic;
13003|      0|    int small;
13004|      0|    size_t ntrans;
13005|      0|    size_t tmp___0;
13006|      0|    char const *slim;
13007|      0|    unsigned char tmp___1;
13008|      0|    void *tmp___2;
13009|      0|    void *tmp___3;
13010|       |
13011|      0|    {
13012|      0|        if (kwset___1->gc1help < 0) {
13013|      0|            {
13014|      0|                tmp = (char const *)memchr((void const *)s, (int)kwset___1->gc1, n);
13015|      0|            }
13016|      0|            return (tmp);
13017|      0|        }
13018|      0|        small_heuristic = 2;
13019|      0|        small = (int)(-((uintptr_t)s) % sizeof(long) + (unsigned long)small_heuristic * sizeof(long));
13020|      0|        if (kwset___1->gc1help < 256) {
13021|      0|            if ((size_t)small < n) {
13022|      0|                tmp___0 = (size_t)small;
13023|      0|            }
13024|      0|            else {
13025|      0|                tmp___0 = n;
13026|      0|            }
13027|      0|        }
13028|      0|        else {
13029|      0|            tmp___0 = n;
13030|      0|        }
13031|      0|        ntrans = tmp___0;
13032|      0|        slim = s + ntrans;
13033|      0|        {
13034|      0|            while (1) {
13035|      0|while_continue: /* CIL Label */
13036|      0|                ;
13037|       |
13038|      0|                if (!((unsigned long)s < (unsigned long)slim)) {
13039|      0|                    goto while_break;
13040|      0|                }
13041|      0|                {
13042|      0|                    tmp___1 = to_uchar((char)*s);
13043|      0|                }
13044|      0|                if ((int const) * (kwset___1->trans + (int)tmp___1) == (int const)kwset___1->gc1) {
13045|      0|                    return (s);
13046|      0|                }
13047|      0|                s++;
13048|      0|            }
13049|      0|while_break___0: /* CIL Label */
13050|      0|            ;
13051|      0|        }
13052|      0|while_break:
13053|      0|        n -= ntrans;
13054|      0|        if (n == 0UL) {
13055|      0|            tmp___3 = (void *)0;
13056|      0|        }
13057|      0|        else {
13058|      0|            {
13059|      0|                tmp___2 = memchr2((void const *)s, (int)kwset___1->gc1, kwset___1->gc1help,
13060|      0|                                  n);
13061|      0|                tmp___3 = tmp___2;
13062|      0|            }
13063|      0|        }
13064|      0|        return ((char const *)tmp___3);
13065|      0|    }
13066|      0|}
13067|       |static size_t __attribute__((__pure__)) bmexec_trans(kwset_t kwset___1,
13068|       |        char const *text,
13069|       |        size_t size)
13070|      5|{
13071|      5|    unsigned char const *d1;
13072|      5|    char const *ep;
13073|      5|    char const *sp;
13074|      5|    char const *tp;
13075|      5|    int d;
13076|      5|    int len;
13077|      5|    char const *trans___0;
13078|      5|    long tmp;
13079|      5|    char gc1;
13080|      5|    char gc2;
13081|      5|    char const *tp0;
13082|      5|    unsigned char tmp___0;
13083|      5|    unsigned char tmp___1;
13084|      5|    unsigned char tmp___2;
13085|      5|    unsigned char tmp___3;
13086|      5|    unsigned char tmp___4;
13087|      5|    unsigned char tmp___5;
13088|      5|    unsigned char tmp___6;
13089|      5|    unsigned char tmp___7;
13090|      5|    unsigned char tmp___8;
13091|      5|    unsigned char tmp___9;
13092|      5|    int advance_heuristic;
13093|      5|    _Bool tmp___10;
13094|      5|    unsigned char tmp___11;
13095|      5|    unsigned char tmp___12;
13096|      5|    _Bool tmp___13;
13097|       |
13098|      5|    {
13099|      5|        len = kwset___1->mind;
13100|      5|        trans___0 = kwset___1->trans;
13101|      5|        if (len == 0) {
13102|      0|            return ((size_t __attribute__((__pure__)))0);
13103|      0|        }
13104|      5|        if ((size_t)len > size) {
13105|      0|            return ((size_t __attribute__((__pure__))) - 1);
13106|      0|        }
13107|      5|        if (len == 1) {
13108|      0|            {
13109|      0|                tp = memchr_kwset(text, size, kwset___1);
13110|      0|            }
13111|      0|            if (tp) {
13112|      0|                tmp = tp - text;
13113|      0|            }
13114|      0|            else {
13115|      0|                tmp = -1L;
13116|      0|            }
13117|      0|            return ((size_t __attribute__((__pure__)))tmp);
13118|      0|        }
13119|      5|        d1 = (unsigned char const *)(kwset___1->delta);
13120|      5|        sp = (char const *)(kwset___1->target + len);
13121|      5|        tp = text + len;
13122|      5|        gc1 = kwset___1->gc1;
13123|      5|        gc2 = kwset___1->gc2;
13124|      5|        if (size > (size_t)(12 * len)) {
13125|      1|            ep = (text + size) - 11 * len;
13126|      1|            {
13127|      2|                while (1) {
13128|      2|while_continue: /* CIL Label */
13129|      2|                    ;
13130|       |
13131|      2|                    if (!((unsigned long)tp <= (unsigned long)ep)) {
13132|      0|                        goto while_break;
13133|      0|                    }
13134|      2|                    {
13135|      2|                        tp0 = tp;
13136|      2|                        tmp___0 = to_uchar((char)*(tp + -1));
13137|      2|                        d = (int)*(d1 + (int)tmp___0);
13138|      2|                        tp += d;
13139|      2|                        tmp___1 = to_uchar((char)*(tp + -1));
13140|      2|                        d = (int)*(d1 + (int)tmp___1);
13141|      2|                        tp += d;
13142|      2|                    }
13143|      2|                    if (d != 0) {
13144|      1|                        {
13145|      1|                            tmp___2 = to_uchar((char)*(tp + -1));
13146|      1|                            d = (int)*(d1 + (int)tmp___2);
13147|      1|                            tp += d;
13148|      1|                            tmp___3 = to_uchar((char)*(tp + -1));
13149|      1|                            d = (int)*(d1 + (int)tmp___3);
13150|      1|                            tp += d;
13151|      1|                            tmp___4 = to_uchar((char)*(tp + -1));
13152|      1|                            d = (int)*(d1 + (int)tmp___4);
13153|      1|                            tp += d;
13154|      1|                        }
13155|      1|                        if (d != 0) {
13156|      1|                            {
13157|      1|                                tmp___5 = to_uchar((char)*(tp + -1));
13158|      1|                                d = (int)*(d1 + (int)tmp___5);
13159|      1|                                tp += d;
13160|      1|                                tmp___6 = to_uchar((char)*(tp + -1));
13161|      1|                                d = (int)*(d1 + (int)tmp___6);
13162|      1|                                tp += d;
13163|      1|                                tmp___7 = to_uchar((char)*(tp + -1));
13164|      1|                                d = (int)*(d1 + (int)tmp___7);
13165|      1|                                tp += d;
13166|      1|                            }
13167|      1|                            if (d != 0) {
13168|      0|                                {
13169|      0|                                    tmp___8 = to_uchar((char)*(tp + -1));
13170|      0|                                    d = (int)*(d1 + (int)tmp___8);
13171|      0|                                    tp += d;
13172|      0|                                    tmp___9 = to_uchar((char)*(tp + -1));
13173|      0|                                    d = (int)*(d1 + (int)tmp___9);
13174|      0|                                    tp += d;
13175|      0|                                    advance_heuristic = (int)(16UL * sizeof(long));
13176|      0|                                }
13177|      0|                                if ((long)advance_heuristic <= tp - tp0) {
13178|      0|                                    goto big_advance;
13179|      0|                                }
13180|      0|                                {
13181|      0|                                    tp--;
13182|      0|                                    tp = memchr_kwset(tp, (size_t)((text + size) - tp), kwset___1);
13183|      0|                                }
13184|      0|                                if (!tp) {
13185|      0|                                    return ((size_t __attribute__((__pure__))) - 1);
13186|      0|                                }
13187|      0|                                tp++;
13188|      0|                            }
13189|      1|                        }
13190|      1|                    }
13191|      2|                    {
13192|      2|                        tmp___10 = bm_delta2_search(&tp, ep, sp, len, trans___0, gc1, gc2, d1, kwset___1);
13193|      2|                    }
13194|      2|                    if (tmp___10) {
13195|      1|                        return ((size_t __attribute__((__pure__)))(tp - text));
13196|      1|                    }
13197|      1|big_advance:
13198|      1|                    ;
13199|      1|                }
13200|      0|while_break___1: /* CIL Label */
13201|      0|                ;
13202|      0|            }
13203|      0|while_break:
13204|      0|            ;
13205|      0|        }
13206|      4|        {
13207|      4|            ep = text + size;
13208|      4|            tmp___11 = to_uchar((char)*(tp + -1));
13209|      4|            d = (int)*(d1 + (int)tmp___11);
13210|      4|        }
13211|      4|        {
13212|      4|            while (1) {
13213|      4|while_continue___1: /* CIL Label */
13214|      4|                ;
13215|     17|while_continue___0:
13216|     17|                ;
13217|     17|                if (!((long)d <= ep - tp)) {
13218|      2|                    goto while_break___0;
13219|      2|                }
13220|     15|                {
13221|     15|                    tp += d;
13222|     15|                    tmp___12 = to_uchar((char)*(tp + -1));
13223|     15|                    d = (int)*(d1 + (int)tmp___12);
13224|     15|                }
13225|     15|                if (d != 0) {
13226|     13|                    goto while_continue___0;
13227|     13|                }
13228|      2|                {
13229|      2|                    tmp___13 = bm_delta2_search(&tp, ep, sp, len, trans___0, gc1, gc2, (unsigned char const *)((void *)0),
13230|      2|                                                kwset___1);
13231|      2|                }
13232|      2|                if (tmp___13) {
13233|      2|                    return ((size_t __attribute__((__pure__)))(tp - text));
13234|      2|                }
13235|      2|            }
13236|      0|while_break___2: /* CIL Label */
13237|      0|            ;
13238|      0|        }
13239|      2|while_break___0:
13240|      2|        ;
13241|      2|        return ((size_t __attribute__((__pure__))) - 1);
13242|      0|    }
13243|      0|}
13244|       |static size_t bmexec(kwset_t kwset___1, char const *text, size_t size)
13245|      5|{
13246|      5|    size_t __attribute__((__pure__)) tmp;
13247|      5|    size_t __attribute__((__pure__)) tmp___0;
13248|      5|    size_t __attribute__((__pure__)) tmp___1;
13249|       |
13250|      5|    {
13251|      5|        if (kwset___1->trans) {
13252|      0|            {
13253|      0|                tmp = bmexec_trans(kwset___1, text, size);
13254|      0|                tmp___1 = tmp;
13255|      0|            }
13256|      0|        }
13257|      5|        else {
13258|      5|            {
13259|      5|                tmp___0 = bmexec_trans(kwset___1, text, size);
13260|      5|                tmp___1 = tmp___0;
13261|      5|            }
13262|      5|        }
13263|      5|        return ((size_t)tmp___1);
13264|      5|    }
13265|      5|}
13266|       |static size_t(__attribute__((__nonnull__(4))) cwexec)(kwset_t kwset___1, char const *text,
13267|       |        size_t len, struct kwsmatch *kwsmatch)
13268|      0|{
13269|      0|    struct trie *const *next;
13270|      0|    struct trie const *trie;
13271|      0|    struct trie const *accept;
13272|      0|    char const *beg;
13273|      0|    char const *lim;
13274|      0|    char const *mch;
13275|      0|    char const *lmch;
13276|      0|    unsigned char c;
13277|      0|    unsigned char const *delta;
13278|      0|    int d;
13279|      0|    char const *end;
13280|      0|    char const *qlim;
13281|      0|    struct tree const *tree;
13282|      0|    char const *trans___0;
13283|      0|    unsigned char tmp;
13284|      0|    unsigned char tmp___0;
13285|      0|    unsigned char uc;
13286|      0|    unsigned char uc___0;
13287|       |
13288|      0|    {
13289|      0|        if (len < (size_t)kwset___1->mind) {
13290|      0|            return ((size_t)-1);
13291|      0|        }
13292|      0|        next = (struct trie *const *)(kwset___1->next);
13293|      0|        delta = (unsigned char const *)(kwset___1->delta);
13294|      0|        trans___0 = kwset___1->trans;
13295|      0|        lim = text + len;
13296|      0|        end = text;
13297|      0|        d = kwset___1->mind;
13298|      0|        if (d != 0) {
13299|      0|            mch = (char const *)((void *)0);
13300|      0|        }
13301|      0|        else {
13302|      0|            mch = text;
13303|      0|            accept = (struct trie const *)kwset___1->trie;
13304|      0|            goto match;
13305|      0|        }
13306|      0|        if (len >= (size_t)(4 * kwset___1->mind)) {
13307|      0|            qlim = lim - 4 * kwset___1->mind;
13308|      0|        }
13309|      0|        else {
13310|      0|            qlim = (char const *)((void *)0);
13311|      0|        }
13312|      0|        {
13313|      0|            while (1) {
13314|      0|while_continue___4: /* CIL Label */
13315|      0|                ;
13316|      0|while_continue:
13317|      0|                ;
13318|      0|                if (!(lim - end >= (long)d)) {
13319|      0|                    goto while_break;
13320|      0|                }
13321|      0|                if (qlim) {
13322|      0|                    if ((unsigned long)end <= (unsigned long)qlim) {
13323|      0|                        end += d - 1;
13324|      0|                        {
13325|      0|                            while (1) {
13326|      0|while_continue___5: /* CIL Label */
13327|      0|                                ;
13328|      0|                                c = (unsigned char)*end;
13329|      0|                                d = (int)*(delta + (int)c);
13330|      0|                                if (d) {
13331|      0|                                    if (!((unsigned long)end < (unsigned long)qlim)) {
13332|      0|                                        goto while_break___0;
13333|      0|                                    }
13334|      0|                                }
13335|      0|                                else {
13336|      0|                                    goto while_break___0;
13337|      0|                                }
13338|      0|                                {
13339|      0|                                    end += d;
13340|      0|                                    tmp = to_uchar((char)*end);
13341|      0|                                    end += (int const) * (delta + (int)tmp);
13342|      0|                                    tmp___0 = to_uchar((char)*end);
13343|      0|                                    end += (int const) * (delta + (int)tmp___0);
13344|      0|                                }
13345|      0|                            }
13346|      0|while_break___7: /* CIL Label */
13347|      0|                            ;
13348|      0|                        }
13349|      0|while_break___0:
13350|      0|                        end++;
13351|      0|                    }
13352|      0|                    else {
13353|      0|                        end += d;
13354|      0|                        c = (unsigned char)*(end + -1);
13355|      0|                        d = (int)*(delta + (int)c);
13356|      0|                    }
13357|      0|                }
13358|      0|                else {
13359|      0|                    end += d;
13360|      0|                    c = (unsigned char)*(end + -1);
13361|      0|                    d = (int)*(delta + (int)c);
13362|      0|                }
13363|      0|                if (d) {
13364|      0|                    goto while_continue;
13365|      0|                }
13366|      0|                beg = end - 1;
13367|      0|                trie = (struct trie const *)*(next + (int)c);
13368|      0|                if (trie->accepting) {
13369|      0|                    mch = beg;
13370|      0|                    accept = trie;
13371|      0|                }
13372|      0|                d = (int)trie->shift;
13373|      0|                {
13374|      0|                    while (1) {
13375|      0|while_continue___6: /* CIL Label */
13376|      0|                        ;
13377|       |
13378|      0|                        if (!((unsigned long)beg > (unsigned long)text)) {
13379|      0|                            goto while_break___1;
13380|      0|                        }
13381|      0|                        beg--;
13382|      0|                        uc = (unsigned char)*beg;
13383|      0|                        if (trans___0) {
13384|      0|                            c = (unsigned char)*(trans___0 + (int)uc);
13385|      0|                        }
13386|      0|                        else {
13387|      0|                            c = uc;
13388|      0|                        }
13389|      0|                        tree = (struct tree const *)trie->links;
13390|      0|                        {
13391|      0|                            while (1) {
13392|      0|while_continue___7: /* CIL Label */
13393|      0|                                ;
13394|       |
13395|      0|                                if (tree) {
13396|      0|                                    if (!((int)c != (int)tree->label)) {
13397|      0|                                        goto while_break___2;
13398|      0|                                    }
13399|      0|                                }
13400|      0|                                else {
13401|      0|                                    goto while_break___2;
13402|      0|                                }
13403|      0|                                if ((int)c < (int)tree->label) {
13404|      0|                                    tree = (struct tree const *)tree->llink;
13405|      0|                                }
13406|      0|                                else {
13407|      0|                                    tree = (struct tree const *)tree->rlink;
13408|      0|                                }
13409|      0|                            }
13410|      0|while_break___9: /* CIL Label */
13411|      0|                            ;
13412|      0|                        }
13413|      0|while_break___2:
13414|      0|                        ;
13415|      0|                        if (tree) {
13416|      0|                            trie = (struct trie const *)tree->trie;
13417|      0|                            if (trie->accepting) {
13418|      0|                                mch = beg;
13419|      0|                                accept = trie;
13420|      0|                            }
13421|      0|                        }
13422|      0|                        else {
13423|      0|                            goto while_break___1;
13424|      0|                        }
13425|      0|                        d = (int)trie->shift;
13426|      0|                    }
13427|      0|while_break___8: /* CIL Label */
13428|      0|                    ;
13429|      0|                }
13430|      0|while_break___1:
13431|      0|                ;
13432|      0|                if (mch) {
13433|      0|                    goto match;
13434|      0|                }
13435|      0|            }
13436|      0|while_break___6: /* CIL Label */
13437|      0|            ;
13438|      0|        }
13439|      0|while_break:
13440|      0|        ;
13441|      0|        return ((size_t)-1);
13442|      0|match:
13443|      0|        if (lim - mch > (long)kwset___1->maxd) {
13444|      0|            lim = mch + kwset___1->maxd;
13445|      0|        }
13446|      0|        lmch = (char const *)0;
13447|      0|        d = 1;
13448|      0|        {
13449|      0|            while (1) {
13450|      0|while_continue___8: /* CIL Label */
13451|      0|                ;
13452|      0|while_continue___3:
13453|      0|                ;
13454|      0|                if (!(lim - end >= (long)d)) {
13455|      0|                    goto while_break___3;
13456|      0|                }
13457|      0|                end += d;
13458|      0|                c = (unsigned char)*(end + -1);
13459|      0|                d = (int)*(delta + (int)c);
13460|      0|                if (d != 0) {
13461|      0|                    goto while_continue___3;
13462|      0|                }
13463|      0|                beg = end - 1;
13464|      0|                trie = (struct trie const *)*(next + (int)c);
13465|      0|                if (!trie) {
13466|      0|                    d = 1;
13467|      0|                    goto while_continue___3;
13468|      0|                }
13469|      0|                if (trie->accepting) {
13470|      0|                    if ((unsigned long)beg <= (unsigned long)mch) {
13471|      0|                        lmch = beg;
13472|      0|                        accept = trie;
13473|      0|                    }
13474|      0|                }
13475|      0|                d = (int)trie->shift;
13476|      0|                {
13477|      0|                    while (1) {
13478|      0|while_continue___9: /* CIL Label */
13479|      0|                        ;
13480|       |
13481|      0|                        if (!((unsigned long)beg > (unsigned long)text)) {
13482|      0|                            goto while_break___4;
13483|      0|                        }
13484|      0|                        beg--;
13485|      0|                        uc___0 = (unsigned char)*beg;
13486|      0|                        if (trans___0) {
13487|      0|                            c = (unsigned char)*(trans___0 + (int)uc___0);
13488|      0|                        }
13489|      0|                        else {
13490|      0|                            c = uc___0;
13491|      0|                        }
13492|      0|                        tree = (struct tree const *)trie->links;
13493|      0|                        {
13494|      0|                            while (1) {
13495|      0|while_continue___10: /* CIL Label */
13496|      0|                                ;
13497|       |
13498|      0|                                if (tree) {
13499|      0|                                    if (!((int)c != (int)tree->label)) {
13500|      0|                                        goto while_break___5;
13501|      0|                                    }
13502|      0|                                }
13503|      0|                                else {
13504|      0|                                    goto while_break___5;
13505|      0|                                }
13506|      0|                                if ((int)c < (int)tree->label) {
13507|      0|                                    tree = (struct tree const *)tree->llink;
13508|      0|                                }
13509|      0|                                else {
13510|      0|                                    tree = (struct tree const *)tree->rlink;
13511|      0|                                }
13512|      0|                            }
13513|      0|while_break___12: /* CIL Label */
13514|      0|                            ;
13515|      0|                        }
13516|      0|while_break___5:
13517|      0|                        ;
13518|      0|                        if (tree) {
13519|      0|                            trie = (struct trie const *)tree->trie;
13520|      0|                            if (trie->accepting) {
13521|      0|                                if ((unsigned long)beg <= (unsigned long)mch) {
13522|      0|                                    lmch = beg;
13523|      0|                                    accept = trie;
13524|      0|                                }
13525|      0|                            }
13526|      0|                        }
13527|      0|                        else {
13528|      0|                            goto while_break___4;
13529|      0|                        }
13530|      0|                        d = (int)trie->shift;
13531|      0|                    }
13532|      0|while_break___11: /* CIL Label */
13533|      0|                    ;
13534|      0|                }
13535|      0|while_break___4:
13536|      0|                ;
13537|      0|                if (lmch) {
13538|      0|                    mch = lmch;
13539|      0|                    goto match;
13540|      0|                }
13541|      0|                if (!d) {
13542|      0|                    d = 1;
13543|      0|                }
13544|      0|            }
13545|      0|while_break___10: /* CIL Label */
13546|      0|            ;
13547|      0|        }
13548|      0|while_break___3:
13549|      0|        kwsmatch->index = (size_t)(accept->accepting / 2UL);
13550|      0|        kwsmatch->offset[0] = (size_t)(mch - text);
13551|      0|        kwsmatch->size[0] = (size_t)accept->depth;
13552|      0|        return ((size_t)(mch - text));
13553|      0|    }
13554|      0|}
13555|       |size_t(__attribute__((__nonnull__(4))) kwsexec)(kwset_t kwset___1, char const *text,
13556|       |        size_t size, struct kwsmatch *kwsmatch)
13557|      5|{
13558|      5|    size_t ret;
13559|      5|    size_t tmp;
13560|      5|    size_t tmp___0;
13561|       |
13562|      5|    {
13563|      5|        if (kwset___1->words == 1L) {
13564|      5|            {
13565|      5|                tmp = bmexec(kwset___1, text, size);
13566|      5|                ret = tmp;
13567|      5|            }
13568|      5|            if (ret != 0xffffffffffffffffUL) {
13569|      3|                kwsmatch->index = (size_t)0;
13570|      3|                kwsmatch->offset[0] = ret;
13571|      3|                kwsmatch->size[0] = (size_t)kwset___1->mind;
13572|      3|            }
13573|      5|            return (ret);
13574|      5|        }
13575|      0|        else {
13576|      0|            {
13577|      0|                tmp___0 = cwexec(kwset___1, text, size, kwsmatch);
13578|      0|            }
13579|      0|            return (tmp___0);
13580|      0|        }
13581|      5|    }
13582|      5|}
13583|       |extern reg_syntax_t re_set_syntax(reg_syntax_t __syntax);
13584|       |extern char const *re_compile_pattern(char const *__pattern, size_t __length,
13585|       |                                      struct re_pattern_buffer *__buffer);
13586|       |extern regoff_t re_search(struct re_pattern_buffer *__buffer, char const *__string,
13587|       |                          __re_idx_t __length, __re_idx_t __start, regoff_t __range,
13588|       |                          struct re_registers *__regs);
13589|       |extern regoff_t re_match(struct re_pattern_buffer *__buffer, char const *__string,
13590|       |                         __re_idx_t __length, __re_idx_t __start, struct re_registers *__regs);
13591|       |struct dfa *dfaalloc(void);
13592|       |struct dfamust *__attribute__((__pure__)) dfamusts(struct dfa const *d);
13593|       |void dfasyntax(reg_syntax_t bits, int fold, unsigned char eol);
13594|       |void dfacomp(char const *s, size_t len, struct dfa *d, int searchflag);
13595|       |char *dfaexec(struct dfa *d, char const *begin, char *end, int allow_nl, size_t *count,
13596|       |              int *backref);
13597|       |struct dfa *dfasuperset(struct dfa const *d) __attribute__((__pure__));
13598|       |_Bool dfaisfast(struct dfa const *d) __attribute__((__pure__));
13599|       |void dfawarn(char const *mesg);
13600|       |__attribute__((__noreturn__)) void dfaerror(char const *mesg);
13601|       |void GEAcompile(char const *pattern, size_t size, reg_syntax_t syntax_bits___0);
13602|       |size_t EGexecute(char const *buf, size_t size, size_t *match_size, char const *start_ptr);
13603|       |static _Bool wordchar___0(wint_t wc)
13604|      0|{
13605|      0|    int tmp;
13606|      0|    int tmp___0;
13607|       |
13608|      0|    {
13609|      0|        if (wc == 95U) {
13610|      0|            tmp___0 = 1;
13611|      0|        }
13612|      0|        else {
13613|      0|            {
13614|      0|                tmp = iswalnum(wc);
13615|      0|            }
13616|      0|            if (tmp) {
13617|      0|                tmp___0 = 1;
13618|      0|            }
13619|      0|            else {
13620|      0|                tmp___0 = 0;
13621|      0|            }
13622|      0|        }
13623|      0|        return ((_Bool)tmp___0);
13624|      0|    }
13625|      0|}
13626|       |static kwset_t kwset___0;
13627|       |static struct dfa *dfa;
13628|       |static struct patterns patterns0;
13629|       |static struct patterns *patterns;
13630|       |static size_t pcount;
13631|       |static size_t kwset_exact_matches;
13632|       |static _Bool begline;
13633|       |__attribute__((__noreturn__)) void dfaerror(char const *mesg);
13634|       |void dfaerror(char const *mesg)
13635|      0|{
13636|       |
13637|      0|    {
13638|      0|        {
13639|      0|            error(2, 0, "%s", mesg);
13640|      0|            abort();
13641|      0|        }
13642|      0|    }
13643|      0|}
13644|       |static enum __anonenum_mode_60 mode;
13645|       |void dfawarn(char const *mesg)
13646|      0|{
13647|      0|    char *tmp___0;
13648|      0|    char *__cil_tmp4;
13649|       |
13650|      0|    {
13651|      0|        if ((unsigned int)mode == 0U) {
13652|      0|            {
13653|      0|                tmp___0 = getenv("POSIXLY_CORRECT");
13654|      0|            }
13655|      0|            if (tmp___0) {
13656|      0|                mode = (enum __anonenum_mode_60)1;
13657|      0|            }
13658|      0|            else {
13659|      0|                mode = (enum __anonenum_mode_60)2;
13660|      0|            }
13661|      0|        }
13662|      0|        if ((unsigned int)mode == 2U) {
13663|      0|            {
13664|      0|                dfaerror(mesg);
13665|      0|            }
13666|      0|        }
13667|      0|        return;
13668|      0|    }
13669|      0|}
13670|       |static void kwsmusts(void)
13671|      2|{
13672|      2|    struct dfamust const *dm;
13673|      2|    struct dfamust const *tmp;
13674|      2|    size_t old_len;
13675|      2|    size_t tmp___0;
13676|      2|    size_t new_len;
13677|      2|    char *must___0;
13678|      2|    char *tmp___1;
13679|      2|    char *mp;
13680|      2|    size_t tmp___2;
13681|       |
13682|      2|    {
13683|      2|        {
13684|      2|            tmp = (struct dfamust const *)dfamusts((struct dfa const *)dfa);
13685|      2|            dm = tmp;
13686|      2|        }
13687|      2|        if (dm) {
13688|      2|            {
13689|      2|                kwsinit(&kwset___0);
13690|      2|            }
13691|      2|            {
13692|      4|                while (1) {
13693|      4|while_continue: /* CIL Label */
13694|      4|                    ;
13695|       |
13696|      4|                    if (!dm) {
13697|      2|                        goto while_break;
13698|      2|                    }
13699|      2|                    if (!dm->exact) {
13700|      0|                        goto __Cont;
13701|      0|                    }
13702|      2|                    {
13703|      2|                        kwset_exact_matches++;
13704|      2|                        tmp___0 = strlen((char const *)dm->must);
13705|      2|                        old_len = tmp___0;
13706|      2|                        new_len = (old_len + (size_t)dm->begline) + (size_t)dm->endline;
13707|      2|                        tmp___1 = (char *)xmalloc(new_len);
13708|      2|                        must___0 = tmp___1;
13709|      2|                        mp = must___0;
13710|      2|                        *mp = (char)eolbyte;
13711|      2|                        mp += (int const)dm->begline;
13712|      2|                        begline = (_Bool)((int)begline | (int)dm->begline);
13713|      2|                        memcpy((void * /* __restrict  */)((void *)mp), (void const * /* __restrict  */)((void const *)dm->must),
13714|      2|                               old_len);
13715|      2|                    }
13716|      2|                    if (dm->endline) {
13717|      0|                        *(mp + old_len) = (char)eolbyte;
13718|      0|                    }
13719|      2|                    {
13720|      2|                        kwsincr(kwset___0, (char const *)must___0, new_len);
13721|      2|                        free((void *)must___0);
13722|      2|                    }
13723|      2|__Cont:
13724|      2|                    dm = (struct dfamust const *)dm->next;
13725|      2|                }
13726|      0|while_break___1: /* CIL Label */
13727|      0|                ;
13728|      0|            }
13729|      2|while_break : {
13730|      2|                dm = (struct dfamust const *)dfamusts((struct dfa const *)dfa);
13731|      2|            }
13732|      2|            {
13733|      4|                while (1) {
13734|      4|while_continue___0: /* CIL Label */
13735|      4|                    ;
13736|       |
13737|      4|                    if (!dm) {
13738|      2|                        goto while_break___0;
13739|      2|                    }
13740|      2|                    if (dm->exact) {
13741|      2|                        goto __Cont___0;
13742|      2|                    }
13743|      0|                    {
13744|      0|                        tmp___2 = strlen((char const *)dm->must);
13745|      0|                        kwsincr(kwset___0, (char const *)dm->must, tmp___2);
13746|      0|                    }
13747|      2|__Cont___0:
13748|      2|                    dm = (struct dfamust const *)dm->next;
13749|      2|                }
13750|      0|while_break___2: /* CIL Label */
13751|      0|                ;
13752|      0|            }
13753|      2|while_break___0 : {
13754|      2|                kwsprep(kwset___0);
13755|      2|            }
13756|      2|        }
13757|      2|        return;
13758|      2|    }
13759|      2|}
13760|       |static char const line_beg_no_bk[3] = {(char const)'^', (char const)'(', (char const)'\000'};
13761|       |static char const line_end_no_bk[3] = {(char const)')', (char const)'$', (char const)'\000'};
13762|       |static char const word_beg_no_bk[19] = {
13763|       |    (char const)'(', (char const)'^', (char const)'|', (char const)'[',
13764|       |    (char const)'^', (char const)'[', (char const)':', (char const)'a',
13765|       |    (char const)'l', (char const)'n', (char const)'u', (char const)'m',
13766|       |    (char const)':', (char const)']', (char const)'_', (char const)']',
13767|       |    (char const)')', (char const)'(', (char const)'\000'
13768|       |};
13769|       |static char const word_end_no_bk[19] = {
13770|       |    (char const)')', (char const)'(', (char const)'[', (char const)'^',
13771|       |    (char const)'[', (char const)':', (char const)'a', (char const)'l',
13772|       |    (char const)'n', (char const)'u', (char const)'m', (char const)':',
13773|       |    (char const)']', (char const)'_', (char const)']', (char const)'|',
13774|       |    (char const)'$', (char const)')', (char const)'\000'
13775|       |};
13776|       |static char const line_beg_bk[4] = {(char const)'^', (char const)'\\', (char const)'(', (char const)'\000'};
13777|       |static char const line_end_bk[4] = {(char const)'\\', (char const)')', (char const)'$', (char const)'\000'};
13778|       |static char const word_beg_bk[23] = {
13779|       |    (char const)'\\', (char const)'(', (char const)'^', (char const)'\\',
13780|       |    (char const)'|', (char const)'[', (char const)'^', (char const)'[',
13781|       |    (char const)':', (char const)'a', (char const)'l', (char const)'n',
13782|       |    (char const)'u', (char const)'m', (char const)':', (char const)']',
13783|       |    (char const)'_', (char const)']', (char const)'\\', (char const)')',
13784|       |    (char const)'\\', (char const)'(', (char const)'\000'
13785|       |};
13786|       |static char const word_end_bk[23] = {
13787|       |    (char const)'\\', (char const)')', (char const)'\\', (char const)'(',
13788|       |    (char const)'[', (char const)'^', (char const)'[', (char const)':',
13789|       |    (char const)'a', (char const)'l', (char const)'n', (char const)'u',
13790|       |    (char const)'m', (char const)':', (char const)']', (char const)'_',
13791|       |    (char const)']', (char const)'\\', (char const)'|', (char const)'$',
13792|       |    (char const)'\\', (char const)')', (char const)'\000'
13793|       |};
13794|       |void GEAcompile(char const *pattern, size_t size, reg_syntax_t syntax_bits___0)
13795|      2|{
13796|      2|    size_t total;
13797|      2|    char *motif;
13798|      2|    char const *p;
13799|      2|    size_t len;
13800|      2|    char const *sep;
13801|      2|    char const *tmp;
13802|      2|    char const *err;
13803|      2|    char const *tmp___0;
13804|      2|    int bk;
13805|      2|    char *n;
13806|      2|    char *tmp___1;
13807|      2|    char const *tmp___2;
13808|      2|    char const *tmp___3;
13809|      2|    char const *tmp___4;
13810|      2|    char const *tmp___5;
13811|      2|    char const *tmp___6;
13812|      2|    char const *tmp___7;
13813|      2|    size_t tmp___8;
13814|       |
13815|      2|    {
13816|      2|        total = size;
13817|      2|        if (match_icase) {
13818|      0|            syntax_bits___0 |= (((((((((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1;
13819|      0|        }
13820|      2|        {
13821|      2|            re_set_syntax(syntax_bits___0);
13822|      2|            dfasyntax(syntax_bits___0, match_icase, eolbyte);
13823|      2|            p = pattern;
13824|      2|        }
13825|      2|        {
13826|      2|            while (1) {
13827|      2|while_continue: /* CIL Label */
13828|      2|                ;
13829|      2|                {
13830|      2|                    tmp = (char const *)memchr((void const *)p, '\n', total);
13831|      2|                    sep = tmp;
13832|      2|                }
13833|      2|                if (sep) {
13834|      0|                    len = (size_t)(sep - p);
13835|      0|                    sep++;
13836|      0|                    total -= len + 1UL;
13837|      0|                }
13838|      2|                else {
13839|      2|                    len = total;
13840|      2|                    total = (size_t)0;
13841|      2|                }
13842|      2|                {
13843|      2|                    patterns = (struct patterns *)xnrealloc((void *)patterns, pcount + 1UL, sizeof(*patterns));
13844|      2|                    *(patterns + pcount) = patterns0;
13845|      2|                    tmp___0 = re_compile_pattern(p, len, &(patterns + pcount)->regexbuf);
13846|      2|                    err = tmp___0;
13847|      2|                }
13848|      2|                if (err) {
13849|      0|                    {
13850|      0|                        error(2, 0, "%s", err);
13851|      0|                    }
13852|      0|                }
13853|      2|                pcount++;
13854|      2|                p = sep;
13855|      2|                if (!p) {
13856|      2|                    goto while_break;
13857|      2|                }
13858|      2|            }
13859|      0|while_break___0: /* CIL Label */
13860|      0|            ;
13861|      0|        }
13862|      2|while_break:
13863|      2|        ;
13864|      2|        if (match_words) {
13865|      0|            goto _L;
13866|      0|        }
13867|      2|        else {
13868|      2|            if (match_lines) {
13869|      0|_L : {
13870|      0|                    bk = !(syntax_bits___0 & (((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1));
13871|      0|                    tmp___1 = (char *)xmalloc(((sizeof(word_beg_bk) - 1UL) + size) + sizeof(word_end_bk));
13872|      0|                    n = tmp___1;
13873|      0|                }
13874|      0|                if (match_lines) {
13875|      0|                    if (bk) {
13876|      0|                        tmp___2 = line_beg_bk;
13877|      0|                    }
13878|      0|                    else {
13879|      0|                        tmp___2 = line_beg_no_bk;
13880|      0|                    }
13881|      0|                    tmp___4 = tmp___2;
13882|      0|                }
13883|      0|                else {
13884|      0|                    if (bk) {
13885|      0|                        tmp___3 = word_beg_bk;
13886|      0|                    }
13887|      0|                    else {
13888|      0|                        tmp___3 = word_beg_no_bk;
13889|      0|                    }
13890|      0|                    tmp___4 = tmp___3;
13891|      0|                }
13892|      0|                {
13893|      0|                    strcpy((char * /* __restrict  */)n, (char const * /* __restrict  */)tmp___4);
13894|      0|                    total = strlen((char const *)n);
13895|      0|                    memcpy((void * /* __restrict  */)((void *)(n + total)), (void const * /* __restrict  */)((void const *)pattern),
13896|      0|                           size);
13897|      0|                    total += size;
13898|      0|                }
13899|      0|                if (match_lines) {
13900|      0|                    if (bk) {
13901|      0|                        tmp___5 = line_end_bk;
13902|      0|                    }
13903|      0|                    else {
13904|      0|                        tmp___5 = line_end_no_bk;
13905|      0|                    }
13906|      0|                    tmp___7 = tmp___5;
13907|      0|                }
13908|      0|                else {
13909|      0|                    if (bk) {
13910|      0|                        tmp___6 = word_end_bk;
13911|      0|                    }
13912|      0|                    else {
13913|      0|                        tmp___6 = word_end_no_bk;
13914|      0|                    }
13915|      0|                    tmp___7 = tmp___6;
13916|      0|                }
13917|      0|                {
13918|      0|                    strcpy((char * /* __restrict  */)(n + total), (char const * /* __restrict  */)tmp___7);
13919|      0|                    tmp___8 = strlen((char const *)(n + total));
13920|      0|                    total += tmp___8;
13921|      0|                    motif = n;
13922|      0|                    pattern = (char const *)motif;
13923|      0|                    size = total;
13924|      0|                }
13925|      0|            }
13926|      2|            else {
13927|      2|                motif = (char *)((void *)0);
13928|      2|            }
13929|      2|        }
13930|      2|        {
13931|      2|            dfa = dfaalloc();
13932|      2|            dfacomp(pattern, size, dfa, 1);
13933|      2|            kwsmusts();
13934|      2|            free((void *)motif);
13935|      2|        }
13936|      2|        return;
13937|      2|    }
13938|      2|}
13939|       |size_t EGexecute(char const *buf, size_t size, size_t *match_size, char const *start_ptr)
13940|      5|{
13941|      5|    char const *buflim___0;
13942|      5|    char const *beg;
13943|      5|    char const *end;
13944|      5|    char const *ptr;
13945|      5|    char const *match;
13946|      5|    char const *best_match;
13947|      5|    char const *mb_start;
13948|      5|    char eol;
13949|      5|    int backref;
13950|      5|    regoff_t start;
13951|      5|    size_t len;
13952|      5|    size_t best_len;
13953|      5|    struct kwsmatch kwsm;
13954|      5|    size_t i;
13955|      5|    struct dfa *superset;
13956|      5|    struct dfa *tmp;
13957|      5|    _Bool dfafast;
13958|      5|    _Bool tmp___0;
13959|      5|    char const *next_beg;
13960|      5|    char const *dfa_beg;
13961|      5|    size_t count;
13962|      5|    _Bool exact_kwset_match;
13963|      5|    char const *prev_beg;
13964|      5|    size_t offset;
13965|      5|    size_t tmp___1;
13966|      5|    long tmp___4;
13967|      5|    char const *tmp___5;
13968|      5|    long tmp___6;
13969|      5|    long tmp___7;
13970|      5|    size_t tmp___8;
13971|      5|    int tmp___9;
13972|      5|    ptrdiff_t tmp___10;
13973|      5|    regoff_t shorter_len;
13974|      5|    wint_t tmp___11;
13975|      5|    _Bool tmp___12;
13976|      5|    wint_t tmp___13;
13977|      5|    _Bool tmp___14;
13978|      5|    size_t off;
13979|      5|    void *__cil_tmp53;
13980|      5|    void *__cil_tmp54;
13981|       |
13982|      5|    {
13983|      5|        {
13984|      5|            eol = (char)eolbyte;
13985|      5|            tmp = dfasuperset((struct dfa const *)dfa);
13986|      5|            superset = tmp;
13987|      5|            tmp___0 = dfaisfast((struct dfa const *)dfa);
13988|      5|            dfafast = tmp___0;
13989|      5|            mb_start = buf;
13990|      5|            buflim___0 = buf + size;
13991|      5|            end = buf;
13992|      5|            beg = end;
13993|      5|        }
13994|      5|        {
13995|      5|            while (1) {
13996|      5|while_continue: /* CIL Label */
13997|      5|                ;
13998|       |
13999|      5|                if (!((unsigned long)end < (unsigned long)buflim___0)) {
14000|      0|                    goto while_break;
14001|      0|                }
14002|      5|                end = buflim___0;
14003|      5|                if (!start_ptr) {
14004|      5|                    dfa_beg = beg;
14005|      5|                    count = (size_t)0;
14006|      5|                    exact_kwset_match = (_Bool)0;
14007|      5|                    if (kwset___0) {
14008|      5|                        {
14009|      5|                            tmp___1 = kwsexec(kwset___0, beg - (int)begline, (size_t)((buflim___0 - beg) + (long)begline),
14010|      5|                                              &kwsm);
14011|      5|                            offset = tmp___1;
14012|      5|                        }
14013|      5|                        if (offset == 0xffffffffffffffffUL) {
14014|      2|                            goto failure;
14015|      2|                        }
14016|      3|                        {
14017|      3|                            match = beg + offset;
14018|      3|                            prev_beg = beg;
14019|      3|                            beg = (char const *)memrchr((void const *)buf, (int)eol, (size_t)(match - buf));
14020|      3|                        }
14021|      3|                        if (beg) {
14022|      2|                            beg++;
14023|      2|                        }
14024|      1|                        else {
14025|      1|                            beg = buf;
14026|      1|                        }
14027|      3|                        dfa_beg = beg;
14028|      3|                        exact_kwset_match = (_Bool)(kwsm.index < kwset_exact_matches);
14029|      3|                        if (exact_kwset_match) {
14030|      3|                            end = match;
14031|      3|                        }
14032|      0|                        else {
14033|      0|                            if (!dfafast) {
14034|      0|                                end = match;
14035|      0|                            }
14036|      0|                            else {
14037|      0|                                if (16L > match - beg) {
14038|      0|                                    tmp___7 = 16L;
14039|      0|                                }
14040|      0|                                else {
14041|      0|                                    tmp___7 = match - beg;
14042|      0|                                }
14043|      0|                                if (tmp___7<(match - prev_beg)>> 2) {
14044|      0|                                    end = match;
14045|      0|                                }
14046|      0|                                else {
14047|      0|                                    if (16L > match - beg) {
14048|      0|                                        tmp___6 = 16L;
14049|      0|                                    }
14050|      0|                                    else {
14051|      0|                                        tmp___6 = match - beg;
14052|      0|                                    }
14053|      0|                                    if (tmp___6<(buflim___0 - prev_beg)>> 2) {
14054|      0|                                        if (16L > match - beg) {
14055|      0|                                            tmp___4 = 16L;
14056|      0|                                        }
14057|      0|                                        else {
14058|      0|                                            tmp___4 = match - beg;
14059|      0|                                        }
14060|      0|                                        tmp___5 = prev_beg + 4L * tmp___4;
14061|      0|                                    }
14062|      0|                                    else {
14063|      0|                                        tmp___5 = buflim___0;
14064|      0|                                    }
14065|      0|                                    end = tmp___5;
14066|      0|                                }
14067|      0|                            }
14068|      0|                        }
14069|      3|                        {
14070|      3|                            end = (char const *)memchr((void const *)end, (int)eol, (size_t)(buflim___0 - end));
14071|      3|                        }
14072|      3|                        if (end) {
14073|      3|                            end++;
14074|      3|                        }
14075|      0|                        else {
14076|      0|                            end = buflim___0;
14077|      0|                        }
14078|      3|                        if (exact_kwset_match) {
14079|      3|                            {
14080|      3|                                tmp___8 = __ctype_get_mb_cur_max();
14081|      3|                            }
14082|      3|                            if (tmp___8 == 1UL) {
14083|      3|                                goto success;
14084|      3|                            }
14085|      0|                            else {
14086|      0|                                {
14087|      0|                                    tmp___9 = using_utf8();
14088|      0|                                }
14089|      0|                                if (tmp___9) {
14090|      0|                                    goto success;
14091|      0|                                }
14092|      0|                            }
14093|      0|                            if ((unsigned long)mb_start < (unsigned long)beg) {
14094|      0|                                mb_start = beg;
14095|      0|                            }
14096|      0|                            {
14097|      0|                                tmp___10 = mb_goback(&mb_start, match, buflim___0);
14098|      0|                            }
14099|      0|                            if (tmp___10 == 0L) {
14100|      0|                                goto success;
14101|      0|                            }
14102|      0|                            dfa_beg = mb_start;
14103|      0|                        }
14104|      3|                    }
14105|      0|                    if (superset) {
14106|      0|                        if (!exact_kwset_match) {
14107|      0|                            {
14108|      0|                                while (1) {
14109|      0|while_continue___0: /* CIL Label */
14110|      0|                                    ;
14111|      0|                                    {
14112|      0|                                        next_beg = (char const *)dfaexec(superset, dfa_beg, (char *)end, 1,
14113|      0|                                                                         &count, (int *)((void *)0));
14114|      0|                                    }
14115|      0|                                    if (next_beg) {
14116|      0|                                        if ((unsigned long)next_beg != (unsigned long)end) {
14117|      0|                                            if (!(count != 0UL)) {
14118|      0|                                                goto while_break___0;
14119|      0|                                            }
14120|      0|                                        }
14121|      0|                                        else {
14122|      0|                                            goto while_break___0;
14123|      0|                                        }
14124|      0|                                    }
14125|      0|                                    else {
14126|      0|                                        goto while_break___0;
14127|      0|                                    }
14128|      0|                                    {
14129|      0|                                        count = (size_t)0;
14130|      0|                                        beg = (char const *)memrchr((void const *)buf, (int)eol, (size_t)(next_beg - buf));
14131|      0|                                        beg++;
14132|      0|                                        dfa_beg = beg;
14133|      0|                                    }
14134|      0|                                }
14135|      0|while_break___4: /* CIL Label */
14136|      0|                                ;
14137|      0|                            }
14138|      0|while_break___0:
14139|      0|                            ;
14140|      0|                            if ((unsigned long)next_beg == (unsigned long)((void *)0)) {
14141|      0|                                goto __Cont;
14142|      0|                            }
14143|      0|                            else {
14144|      0|                                if ((unsigned long)next_beg == (unsigned long)end) {
14145|      0|                                    goto __Cont;
14146|      0|                                }
14147|      0|                            }
14148|      0|                            {
14149|      0|                                end = (char const *)memchr((void const *)next_beg, (int)eol, (size_t)(buflim___0 - next_beg));
14150|      0|                            }
14151|      0|                            if (end) {
14152|      0|                                end++;
14153|      0|                            }
14154|      0|                            else {
14155|      0|                                end = buflim___0;
14156|      0|                            }
14157|      0|                        }
14158|      0|                    }
14159|      0|                    {
14160|      0|                        next_beg = (char const *)dfaexec(dfa, dfa_beg, (char *)end, 0, &count, &backref);
14161|      0|                    }
14162|      0|                    if ((unsigned long)next_beg == (unsigned long)((void *)0)) {
14163|      0|                        goto __Cont;
14164|      0|                    }
14165|      0|                    else {
14166|      0|                        if ((unsigned long)next_beg == (unsigned long)end) {
14167|      0|                            goto __Cont;
14168|      0|                        }
14169|      0|                    }
14170|      0|                    if (count != 0UL) {
14171|      0|                        {
14172|      0|                            beg = (char const *)memrchr((void const *)buf, (int)eol, (size_t)(next_beg - buf));
14173|      0|                            beg++;
14174|      0|                        }
14175|      0|                    }
14176|      0|                    {
14177|      0|                        end = (char const *)memchr((void const *)next_beg, (int)eol, (size_t)(buflim___0 - next_beg));
14178|      0|                    }
14179|      0|                    if (end) {
14180|      0|                        end++;
14181|      0|                    }
14182|      0|                    else {
14183|      0|                        end = buflim___0;
14184|      0|                    }
14185|      0|                    if (!backref) {
14186|      0|                        goto success;
14187|      0|                    }
14188|      0|                    ptr = beg;
14189|      0|                }
14190|      0|                else {
14191|      0|                    ptr = start_ptr;
14192|      0|                }
14193|      0|                if ((long)(((1 << (sizeof(regoff_t) * 8UL - 2UL)) - 1) * 2 + 1) < (end - beg) - 1L) {
14194|      0|                    {
14195|      0|                        xalloc_die();
14196|      0|                    }
14197|      0|                }
14198|      0|                best_match = end;
14199|      0|                best_len = (size_t)0;
14200|      0|                i = (size_t)0;
14201|      0|                {
14202|      0|                    while (1) {
14203|      0|while_continue___1: /* CIL Label */
14204|      0|                        ;
14205|       |
14206|      0|                        if (!(i < pcount)) {
14207|      0|                            goto while_break___1;
14208|      0|                        }
14209|      0|                        {
14210|      0|                            (patterns + i)->regexbuf.not_eol = 0U;
14211|      0|                            start = re_search(&(patterns + i)->regexbuf, beg, (__re_idx_t)((end - beg) - 1L),
14212|      0|                                              (__re_idx_t)(ptr - beg), (regoff_t)((end - ptr) - 1L), &(patterns + i)->regs);
14213|      0|                            __msan_unpoison((patterns + i)->regs.end, 100);
14214|      0|                        }
14215|      0|                        if (start < -1) {
14216|      0|                            {
14217|      0|                                xalloc_die();
14218|      0|                            }
14219|      0|                        }
14220|      0|                        else {
14221|      0|                            if (0 <= start) {
14222|      0|                                len = (size_t)(*((patterns + i)->regs.end + 0) - start);
14223|      0|                                match = beg + start;
14224|      0|                                if ((unsigned long)match > (unsigned long)best_match) {
14225|      0|                                    goto __Cont___0;
14226|      0|                                }
14227|      0|                                if (start_ptr) {
14228|      0|                                    if (!match_words) {
14229|      0|                                        goto assess_pattern_match;
14230|      0|                                    }
14231|      0|                                }
14232|      0|                                if (!match_lines) {
14233|      0|                                    if (!match_words) {
14234|      0|                                        match = ptr;
14235|      0|                                        len = (size_t)(end - ptr);
14236|      0|                                        goto assess_pattern_match;
14237|      0|                                    }
14238|      0|                                    else {
14239|      0|                                        goto _L;
14240|      0|                                    }
14241|      0|                                }
14242|      0|                                else {
14243|      0|_L:
14244|      0|                                    if (match_lines) {
14245|      0|                                        if (len == (size_t)((end - ptr) - 1L)) {
14246|      0|                                            match = ptr;
14247|      0|                                            len = (size_t)(end - ptr);
14248|      0|                                            goto assess_pattern_match;
14249|      0|                                        }
14250|      0|                                    }
14251|      0|                                }
14252|      0|                                if (match_words) {
14253|      0|                                    {
14254|      0|                                        while (1) {
14255|      0|while_continue___2: /* CIL Label */
14256|      0|                                            ;
14257|       |
14258|      0|                                            if (!((unsigned long)match <= (unsigned long)best_match)) {
14259|      0|                                                goto while_break___2;
14260|      0|                                            }
14261|      0|                                            {
14262|      0|                                                shorter_len = 0;
14263|      0|                                                tmp___11 = mb_prev_wc(beg, match, end - 1);
14264|      0|                                                tmp___12 = wordchar___0(tmp___11);
14265|      0|                                            }
14266|      0|                                            if (!tmp___12) {
14267|      0|                                                {
14268|      0|                                                    tmp___13 = mb_next_wc(match + len, end - 1);
14269|      0|                                                    tmp___14 = wordchar___0(tmp___13);
14270|      0|                                                }
14271|      0|                                                if (!tmp___14) {
14272|      0|                                                    goto assess_pattern_match;
14273|      0|                                                }
14274|      0|                                            }
14275|      0|                                            if (len > 0UL) {
14276|      0|                                                {
14277|      0|                                                    len--;
14278|      0|                                                    (patterns + i)->regexbuf.not_eol = 1U;
14279|      0|                                                    shorter_len = re_match(&(patterns + i)->regexbuf, beg, (__re_idx_t)((match + len) - ptr),
14280|      0|                                                                           (__re_idx_t)(match - beg), &(patterns + i)->regs);
14281|      0|                                                }
14282|      0|                                                if (shorter_len < -1) {
14283|      0|                                                    {
14284|      0|                                                        xalloc_die();
14285|      0|                                                    }
14286|      0|                                                }
14287|      0|                                            }
14288|      0|                                            if (0 < shorter_len) {
14289|      0|                                                len = (size_t)shorter_len;
14290|      0|                                            }
14291|      0|                                            else {
14292|      0|                                                if ((unsigned long)match == (unsigned long)(end - 1)) {
14293|      0|                                                    goto while_break___2;
14294|      0|                                                }
14295|      0|                                                {
14296|      0|                                                    match++;
14297|      0|                                                    (patterns + i)->regexbuf.not_eol = 0U;
14298|      0|                                                    start = re_search(&(patterns + i)->regexbuf, beg, (__re_idx_t)((end - beg) - 1L),
14299|      0|                                                                      (__re_idx_t)(match - beg), (regoff_t)((end - match) - 1L),
14300|      0|                                                                      &(patterns + i)->regs);
14301|      0|                                                }
14302|      0|                                                if (start < 0) {
14303|      0|                                                    if (start < -1) {
14304|      0|                                                        {
14305|      0|                                                            xalloc_die();
14306|      0|                                                        }
14307|      0|                                                    }
14308|      0|                                                    goto while_break___2;
14309|      0|                                                }
14310|      0|                                                len = (size_t)(*((patterns + i)->regs.end + 0) - start);
14311|      0|                                                match = beg + start;
14312|      0|                                            }
14313|      0|                                        }
14314|      0|while_break___6: /* CIL Label */
14315|      0|                                        ;
14316|      0|                                    }
14317|      0|while_break___2:
14318|      0|                                    ;
14319|      0|                                }
14320|      0|                                goto __Cont___0;
14321|      0|assess_pattern_match:
14322|      0|                                if (!start_ptr) {
14323|      0|                                    goto success;
14324|      0|                                }
14325|      0|                                if ((unsigned long)match < (unsigned long)best_match) {
14326|      0|                                    best_match = match;
14327|      0|                                    best_len = len;
14328|      0|                                }
14329|      0|                                else {
14330|      0|                                    if ((unsigned long)match == (unsigned long)best_match) {
14331|      0|                                        if (len > best_len) {
14332|      0|                                            best_match = match;
14333|      0|                                            best_len = len;
14334|      0|                                        }
14335|      0|                                    }
14336|      0|                                }
14337|      0|                            }
14338|      0|                        }
14339|      0|__Cont___0:
14340|      0|                        i++;
14341|      0|                    }
14342|      0|while_break___5: /* CIL Label */
14343|      0|                    ;
14344|      0|                }
14345|      0|while_break___1:
14346|      0|                ;
14347|      0|                if ((unsigned long)best_match < (unsigned long)end) {
14348|      0|                    beg = best_match;
14349|      0|                    len = best_len;
14350|      0|                    goto success_in_len;
14351|      0|                }
14352|      0|__Cont:
14353|      0|                beg = end;
14354|      0|            }
14355|      0|while_break___3: /* CIL Label */
14356|      0|            ;
14357|      0|        }
14358|      0|while_break:
14359|      0|        ;
14360|      2|failure:
14361|      2|        return ((size_t)-1);
14362|      3|success:
14363|      3|        len = (size_t)(end - beg);
14364|      3|success_in_len:
14365|      3|        off = (size_t)(beg - buf);
14366|      3|        *match_size = len;
14367|      3|        return (off);
14368|      3|    }
14369|      3|}
14370|       |void dfafree(struct dfa *d);
14371|       |void dfainit(struct dfa *d);
14372|       |void dfaparse(char const *s, size_t len, struct dfa *d);
14373|       |void dfaanalyze(struct dfa *d, int searchflag);
14374|       |void dfastate(ptrdiff_t s, struct dfa *d, ptrdiff_t *trans___0);
14375|       |extern __attribute__((__nothrow__)) int isalnum(int);
14376|       |extern __attribute__((__nothrow__)) int isalpha(int);
14377|       |extern __attribute__((__nothrow__)) int iscntrl(int);
14378|       |extern __attribute__((__nothrow__)) int isdigit(int);
14379|       |extern __attribute__((__nothrow__)) int islower(int);
14380|       |extern __attribute__((__nothrow__)) int isgraph(int);
14381|       |extern __attribute__((__nothrow__)) int isprint(int);
14382|       |extern __attribute__((__nothrow__)) int ispunct(int);
14383|       |extern __attribute__((__nothrow__)) int isspace(int);
14384|       |extern __attribute__((__nothrow__)) int isupper(int);
14385|       |extern __attribute__((__nothrow__)) int isxdigit(int);
14386|       |extern __attribute__((__nothrow__)) int toupper(int __c);
14387|       |extern __attribute__((__nothrow__)) int isblank(int);
14388|       |extern __attribute__((__nothrow__)) char *(__attribute__((__nonnull__(1, 2))) strncpy)(char *__restrict __dest,
14389|       |        char const *__restrict __src,
14390|       |        size_t __n);
14391|       |extern __attribute__((__nothrow__)) int(__attribute__((__nonnull__(1, 2))) strcoll)(char const *__s1,
14392|       |        char const *__s2) __attribute__((__pure__));
14393|       |extern __attribute__((__nothrow__)) char *setlocale(int __category, char const *__locale);
14394|       |extern __attribute__((__nothrow__)) int wctob(wint_t __c);
14395|       |extern __attribute__((__nothrow__)) size_t wcrtomb(char *__restrict __s, wchar_t __wc,
14396|       |        mbstate_t *__restrict __ps);
14397|       |extern __attribute__((__nothrow__)) int iswalpha(wint_t __wc);
14398|       |extern __attribute__((__nothrow__)) wctype_t wctype(char const *__property);
14399|       |extern __attribute__((__nothrow__)) int iswctype(wint_t __wc, wctype_t __desc);
14400|       |extern __attribute__((__nothrow__)) wint_t towupper(wint_t __wc);
14401|       |static unsigned char to_uchar___0(char ch)
14402|     10|{
14403|       |
14404|     10|    {
14405|     10|        return ((unsigned char)ch);
14406|     10|    }
14407|     10|}
14408|       |static void dfamust(struct dfa *d);
14409|       |static void regexp(void);
14410|       |static void dfambcache(struct dfa *d)
14411|      2|{
14412|      2|    int i;
14413|      2|    char c;
14414|      2|    unsigned char uc;
14415|      2|    mbstate_t s;
14416|      2|    wchar_t wc;
14417|      2|    size_t tmp___0;
14418|      2|    void *__cil_tmp9;
14419|       |
14420|      2|    {
14421|      2|        i = -128;
14422|      2|        {
14423|    514|            while (1) {
14424|    514|while_continue: /* CIL Label */
14425|    514|                ;
14426|       |
14427|    514|                if (!(i <= 127)) {
14428|      2|                    goto while_break;
14429|      2|                }
14430|    512|                {
14431|    512|                    c = (char)i;
14432|    512|                    uc = (unsigned char)i;
14433|    512|                    s.__count = 0;
14434|    512|                    s.__value.__wch = 0U;
14435|    512|                    tmp___0 = mbrtowc((wchar_t * /* __restrict  */)(&wc), (char const * /* __restrict  */)((char const *)(&c)),
14436|    512|                                      (size_t)1, (mbstate_t * /* __restrict  */)(&s));
14437|    512|                }
14438|    512|                if (tmp___0 <= 1UL) {
14439|    256|                    d->mbrtowc_cache[uc] = (wint_t)wc;
14440|    256|                }
14441|    256|                else {
14442|    256|                    d->mbrtowc_cache[uc] = 4294967295U;
14443|    256|                }
14444|    512|                i++;
14445|    512|            }
14446|      0|while_break___0: /* CIL Label */
14447|      0|            ;
14448|      0|        }
14449|      2|while_break:
14450|      2|        ;
14451|      2|        return;
14452|      0|    }
14453|      0|}
14454|       |static size_t mbs_to_wchar(wint_t *pwc, char const *s, size_t n, struct dfa *d)
14455|     10|{
14456|     10|    unsigned char uc;
14457|     10|    wint_t wc;
14458|     10|    wchar_t wch;
14459|     10|    size_t nbytes;
14460|     10|    size_t tmp;
14461|       |
14462|     10|    {
14463|     10|        uc = (unsigned char)*(s + 0);
14464|     10|        wc = d->mbrtowc_cache[uc];
14465|     10|        if (wc == 4294967295U) {
14466|      0|            {
14467|      0|                tmp = mbrtowc((wchar_t * /* __restrict  */)(&wch), (char const * /* __restrict  */)s,
14468|      0|                              n, (mbstate_t * /* __restrict  */)(&d->mbs));
14469|      0|                nbytes = tmp;
14470|      0|            }
14471|      0|            if (0UL < nbytes) {
14472|      0|                if (nbytes < 0xfffffffffffffffeUL) {
14473|      0|                    *pwc = (wint_t)wch;
14474|      0|                    return (nbytes);
14475|      0|                }
14476|      0|            }
14477|      0|            {
14478|      0|                memset((void *)(&d->mbs), 0, sizeof(d->mbs));
14479|      0|            }
14480|      0|        }
14481|     10|        *pwc = wc;
14482|     10|        return ((size_t)1);
14483|     10|    }
14484|     10|}
14485|       |static _Bool tstbit(unsigned int b, charclass_word *const c)
14486|      0|{
14487|       |
14488|      0|    {
14489|      0|        return ((_Bool)((*(c + b / 32U) >> b % 32U) & 1U));
14490|      0|    }
14491|      0|}
14492|       |static void setbit(unsigned int b, charclass_word *c)
14493|    128|{
14494|       |
14495|    128|    {
14496|    128|        *(c + b / 32U) |= 1U << b % 32U;
14497|    128|        return;
14498|    128|    }
14499|    128|}
14500|       |static void clrbit(unsigned int b, charclass_word *c)
14501|      0|{
14502|       |
14503|      0|    {
14504|      0|        *(c + b / 32U) &= ~(1U << b % 32U);
14505|      0|        return;
14506|      0|    }
14507|      0|}
14508|       |static void copyset(charclass_word *const src, charclass_word *dst)
14509|      0|{
14510|       |
14511|      0|    {
14512|      0|        {
14513|      0|            memcpy((void * /* __restrict  */)((void *)dst), (void const * /* __restrict  */)((void const *)src),
14514|      0|                   sizeof(charclass));
14515|      0|        }
14516|      0|        return;
14517|      0|    }
14518|      0|}
14519|       |static void zeroset(charclass_word *s)
14520|      0|{
14521|       |
14522|      0|    {
14523|      0|        {
14524|      0|            memset((void *)s, 0, sizeof(charclass));
14525|      0|        }
14526|      0|        return;
14527|      0|    }
14528|      0|}
14529|       |static void notset(charclass_word *s)
14530|      0|{
14531|      0|    int i;
14532|       |
14533|      0|    {
14534|      0|        i = 0;
14535|      0|        {
14536|      0|            while (1) {
14537|      0|while_continue: /* CIL Label */
14538|      0|                ;
14539|       |
14540|      0|                if (!(i < 8)) {
14541|      0|                    goto while_break;
14542|      0|                }
14543|      0|                *(s + i) = (((1U << 31) << 1) - 1U) & ~*(s + i);
14544|      0|                i++;
14545|      0|            }
14546|      0|while_break___0: /* CIL Label */
14547|      0|            ;
14548|      0|        }
14549|      0|while_break:
14550|      0|        ;
14551|      0|        return;
14552|      0|    }
14553|      0|}
14554|       |static _Bool equal(charclass_word *const s1, charclass_word *const s2)
14555|      0|{
14556|      0|    int tmp;
14557|       |
14558|      0|    {
14559|      0|        {
14560|      0|            tmp = memcmp((void const *)s1, (void const *)s2, sizeof(charclass));
14561|      0|        }
14562|      0|        return ((_Bool)(tmp == 0));
14563|      0|    }
14564|      0|}
14565|       |static void *maybe_realloc(void *ptr, size_t nitems, size_t *nalloc, size_t itemsize)
14566|      4|{
14567|      4|    void *tmp;
14568|       |
14569|      4|    {
14570|      4|        if (nitems < *nalloc) {
14571|      2|            return (ptr);
14572|      2|        }
14573|      2|        {
14574|      2|            *nalloc = nitems;
14575|      2|            tmp = x2nrealloc(ptr, nalloc, itemsize);
14576|      2|        }
14577|      2|        return (tmp);
14578|      4|    }
14579|      4|}
14580|       |static size_t dfa_charclass_index(struct dfa *d, charclass_word *const s)
14581|      0|{
14582|      0|    size_t i;
14583|      0|    _Bool tmp;
14584|       |
14585|      0|    {
14586|      0|        i = (size_t)0;
14587|      0|        {
14588|      0|            while (1) {
14589|      0|while_continue: /* CIL Label */
14590|      0|                ;
14591|       |
14592|      0|                if (!(i < d->cindex)) {
14593|      0|                    goto while_break;
14594|      0|                }
14595|      0|                {
14596|      0|                    tmp = equal(s, (charclass_word * /* const  */)(*(d->charclasses + i)));
14597|      0|                }
14598|      0|                if (tmp) {
14599|      0|                    return (i);
14600|      0|                }
14601|      0|                i++;
14602|      0|            }
14603|      0|while_break___0: /* CIL Label */
14604|      0|            ;
14605|      0|        }
14606|      0|while_break : {
14607|      0|            d->charclasses = (charclass *)maybe_realloc((void *)d->charclasses, d->cindex, &d->calloc,
14608|      0|                             sizeof(*(d->charclasses)));
14609|      0|            (d->cindex)++;
14610|      0|            copyset(s, *(d->charclasses + i));
14611|      0|        }
14612|      0|        return (i);
14613|      0|    }
14614|      0|}
14615|       |static struct dfa *dfa___0;
14616|       |static size_t charclass_index(charclass_word *const s)
14617|      0|{
14618|      0|    size_t tmp;
14619|       |
14620|      0|    {
14621|      0|        {
14622|      0|            tmp = dfa_charclass_index(dfa___0, s);
14623|      0|        }
14624|      0|        return (tmp);
14625|      0|    }
14626|      0|}
14627|       |static reg_syntax_t syntax_bits;
14628|       |static reg_syntax_t syntax_bits_set;
14629|       |static _Bool case_fold;
14630|       |static unsigned char eolbyte___0;
14631|       |static int sbit[256];
14632|       |static charclass letters;
14633|       |static charclass newline;
14634|       |static int char_context(unsigned char c)
14635|    512|{
14636|    512|    unsigned short const **tmp;
14637|       |
14638|    512|    {
14639|    512|        if ((int)c == (int)eolbyte___0) {
14640|      2|            return (4);
14641|      2|        }
14642|    510|        {
14643|    510|            tmp = __ctype_b_loc();
14644|    510|        }
14645|    510|        if ((int const) * (*tmp + (int)c) & 8) {
14646|    124|            return (2);
14647|    124|        }
14648|    386|        else {
14649|    386|            if ((int)c == 95) {
14650|      2|                return (2);
14651|      2|            }
14652|    386|        }
14653|    384|        return (1);
14654|    510|    }
14655|    510|}
14656|       |static int wchar_context(wint_t wc)
14657|      0|{
14658|      0|    int tmp;
14659|       |
14660|      0|    {
14661|      0|        if (wc == (wint_t)((wchar_t)eolbyte___0)) {
14662|      0|            return (4);
14663|      0|        }
14664|      0|        else {
14665|      0|            if (wc == 0U) {
14666|      0|                return (4);
14667|      0|            }
14668|      0|        }
14669|      0|        if (wc == 95U) {
14670|      0|            return (2);
14671|      0|        }
14672|      0|        else {
14673|      0|            {
14674|      0|                tmp = iswalnum(wc);
14675|      0|            }
14676|      0|            if (tmp) {
14677|      0|                return (2);
14678|      0|            }
14679|      0|        }
14680|      0|        return (1);
14681|      0|    }
14682|      0|}
14683|       |void dfasyntax(reg_syntax_t bits, int fold, unsigned char eol)
14684|      2|{
14685|      2|    unsigned int i;
14686|       |
14687|      2|    {
14688|      2|        syntax_bits_set = (reg_syntax_t)1;
14689|      2|        syntax_bits = bits;
14690|      2|        case_fold = (_Bool)(fold != 0);
14691|      2|        eolbyte___0 = eol;
14692|      2|        i = 0U;
14693|      2|        {
14694|    514|            while (1) {
14695|    514|while_continue: /* CIL Label */
14696|    514|                ;
14697|       |
14698|    514|                if (!(i < 256U)) {
14699|      2|                    goto while_break;
14700|      2|                }
14701|    512|                {
14702|    512|                    sbit[i] = char_context((unsigned char)i);
14703|    512|                }
14704|    512|                if (sbit[i] == 2) {
14705|    126|                    goto case_2;
14706|    126|                }
14707|    386|                if (sbit[i] == 4) {
14708|      2|                    goto case_4;
14709|      2|                }
14710|    384|                goto switch_break;
14711|    384|case_2 : {
14712|    126|                    setbit(i, letters);
14713|    126|                }
14714|    126|                goto switch_break;
14715|      2|case_4 : {
14716|      2|                    setbit(i, newline);
14717|      2|                }
14718|      2|                goto switch_break;
14719|    512|switch_break:
14720|    512|                i++;
14721|    512|            }
14722|      0|while_break___0: /* CIL Label */
14723|      0|            ;
14724|      0|        }
14725|      2|while_break:
14726|      2|        ;
14727|      2|        return;
14728|      0|    }
14729|      0|}
14730|       |static _Bool setbit_wc(wint_t wc, charclass_word *c)
14731|      0|{
14732|      0|    int b;
14733|      0|    int tmp;
14734|       |
14735|      0|    {
14736|      0|        {
14737|      0|            tmp = wctob(wc);
14738|      0|            b = tmp;
14739|      0|        }
14740|      0|        if (b == -1) {
14741|      0|            return ((_Bool)0);
14742|      0|        }
14743|      0|        {
14744|      0|            setbit((unsigned int)b, c);
14745|      0|        }
14746|      0|        return ((_Bool)1);
14747|      0|    }
14748|      0|}
14749|       |static void setbit_case_fold_c(int b, charclass_word *c)
14750|      0|{
14751|      0|    int ub;
14752|      0|    int tmp;
14753|      0|    int i;
14754|      0|    int tmp___0;
14755|       |
14756|      0|    {
14757|      0|        {
14758|      0|            tmp = toupper(b);
14759|      0|            ub = tmp;
14760|      0|            i = 0;
14761|      0|        }
14762|      0|        {
14763|      0|            while (1) {
14764|      0|while_continue: /* CIL Label */
14765|      0|                ;
14766|       |
14767|      0|                if (!(i < 256)) {
14768|      0|                    goto while_break;
14769|      0|                }
14770|      0|                {
14771|      0|                    tmp___0 = toupper(i);
14772|      0|                }
14773|      0|                if (tmp___0 == ub) {
14774|      0|                    {
14775|      0|                        setbit((unsigned int)i, c);
14776|      0|                    }
14777|      0|                }
14778|      0|                i++;
14779|      0|            }
14780|      0|while_break___0: /* CIL Label */
14781|      0|            ;
14782|      0|        }
14783|      0|while_break:
14784|      0|        ;
14785|      0|        return;
14786|      0|    }
14787|      0|}
14788|       |static int utf8 = -1;
14789|       |int using_utf8(void)
14790|      2|{
14791|      2|    wchar_t wc;
14792|      2|    mbstate_t mbs;
14793|      2|    size_t tmp;
14794|      2|    int tmp___0;
14795|      2|    void *__cil_tmp6;
14796|       |
14797|      2|    {
14798|      2|        if (utf8 < 0) {
14799|      2|            {
14800|      2|                mbs.__count = 0;
14801|      2|                mbs.__value.__wch = 0U;
14802|      2|                tmp = mbrtowc((wchar_t * /* __restrict  */)(&wc), (char const * /* __restrict  */) "\304\200",
14803|      2|                              (size_t)2, (mbstate_t * /* __restrict  */)(&mbs));
14804|      2|            }
14805|      2|            if (tmp == 2UL) {
14806|      0|                if (wc == 256) {
14807|      0|                    tmp___0 = 1;
14808|      0|                }
14809|      0|                else {
14810|      0|                    tmp___0 = 0;
14811|      0|                }
14812|      0|            }
14813|      2|            else {
14814|      2|                tmp___0 = 0;
14815|      2|            }
14816|      2|            utf8 = tmp___0;
14817|      2|        }
14818|      2|        return (utf8);
14819|      2|    }
14820|      2|}
14821|       |static _Bool using_simple_locale(void);
14822|       |static int unibyte_c = -1;
14823|       |static _Bool using_simple_locale(void)
14824|      0|{
14825|      0|    char const *locale;
14826|      0|    char const *tmp;
14827|      0|    int tmp___0;
14828|      0|    int tmp___1;
14829|      0|    int tmp___2;
14830|       |
14831|      0|    {
14832|      0|        if (dfa___0->multibyte) {
14833|      0|            return ((_Bool)0);
14834|      0|        }
14835|      0|        else {
14836|      0|            if (unibyte_c < 0) {
14837|      0|                {
14838|      0|                    tmp = (char const *)setlocale(6, (char const *)((void *)0));
14839|      0|                    locale = tmp;
14840|      0|                }
14841|      0|                if (!locale) {
14842|      0|                    tmp___2 = 1;
14843|      0|                }
14844|      0|                else {
14845|      0|                    {
14846|      0|                        tmp___0 = strcmp(locale, "C");
14847|      0|                    }
14848|      0|                    if (tmp___0 == 0) {
14849|      0|                        tmp___2 = 1;
14850|      0|                    }
14851|      0|                    else {
14852|      0|                        {
14853|      0|                            tmp___1 = strcmp(locale, "POSIX");
14854|      0|                        }
14855|      0|                        if (tmp___1 == 0) {
14856|      0|                            tmp___2 = 1;
14857|      0|                        }
14858|      0|                        else {
14859|      0|                            tmp___2 = 0;
14860|      0|                        }
14861|      0|                    }
14862|      0|                }
14863|      0|                unibyte_c = tmp___2;
14864|      0|            }
14865|      0|            return ((_Bool)unibyte_c);
14866|      0|        }
14867|      0|    }
14868|      0|}
14869|       |static char const *lexptr;
14870|       |static size_t lexleft;
14871|       |static token lasttok;
14872|       |static _Bool laststart;
14873|       |static size_t parens;
14874|       |static int minrep;
14875|       |static int maxrep;
14876|       |static int cur_mb_len = 1;
14877|       |static wint_t wctok;
14878|       |static short const lonesome_lower[19] = {
14879|       |    (short const)181, (short const)305, (short const)383, (short const)453,
14880|       |    (short const)456, (short const)459, (short const)498, (short const)837,
14881|       |    (short const)962, (short const)976, (short const)977, (short const)981,
14882|       |    (short const)982, (short const)1008, (short const)1009, (short const)1010,
14883|       |    (short const)1013, (short const)7835, (short const)8126
14884|       |};
14885|       |static int case_folded_counterparts(wchar_t c, wchar_t *folded)
14886|      0|{
14887|      0|    int i;
14888|      0|    int n;
14889|      0|    wint_t uc;
14890|      0|    wint_t tmp;
14891|      0|    wint_t lc;
14892|      0|    wint_t tmp___0;
14893|      0|    int tmp___1;
14894|      0|    int tmp___2;
14895|      0|    wint_t tmp___3;
14896|      0|    wint_t li;
14897|      0|    int tmp___4;
14898|      0|    wint_t tmp___5;
14899|       |
14900|      0|    {
14901|      0|        {
14902|      0|            n = 0;
14903|      0|            tmp = towupper((wint_t)c);
14904|      0|            uc = tmp;
14905|      0|            tmp___0 = towlower(uc);
14906|      0|            lc = tmp___0;
14907|      0|        }
14908|      0|        if (uc != (wint_t)c) {
14909|      0|            tmp___1 = n;
14910|      0|            n++;
14911|      0|            *(folded + tmp___1) = (wchar_t)uc;
14912|      0|        }
14913|      0|        if (lc != uc) {
14914|      0|            if (lc != (wint_t)c) {
14915|      0|                {
14916|      0|                    tmp___3 = towupper(lc);
14917|      0|                }
14918|      0|                if (tmp___3 == uc) {
14919|      0|                    tmp___2 = n;
14920|      0|                    n++;
14921|      0|                    *(folded + tmp___2) = (wchar_t)lc;
14922|      0|                }
14923|      0|            }
14924|      0|        }
14925|      0|        i = 0;
14926|      0|        {
14927|      0|            while (1) {
14928|      0|while_continue: /* CIL Label */
14929|      0|                ;
14930|       |
14931|      0|                if (!((unsigned long)i < sizeof(lonesome_lower) / sizeof(lonesome_lower[0]))) {
14932|      0|                    goto while_break;
14933|      0|                }
14934|      0|                li = (wint_t)lonesome_lower[i];
14935|      0|                if (li != lc) {
14936|      0|                    if (li != uc) {
14937|      0|                        if (li != (wint_t)c) {
14938|      0|                            {
14939|      0|                                tmp___5 = towupper(li);
14940|      0|                            }
14941|      0|                            if (tmp___5 == uc) {
14942|      0|                                tmp___4 = n;
14943|      0|                                n++;
14944|      0|                                *(folded + tmp___4) = (wchar_t)li;
14945|      0|                            }
14946|      0|                        }
14947|      0|                    }
14948|      0|                }
14949|      0|                i++;
14950|      0|            }
14951|      0|while_break___0: /* CIL Label */
14952|      0|            ;
14953|      0|        }
14954|      0|while_break:
14955|      0|        ;
14956|      0|        return (n);
14957|      0|    }
14958|      0|}
14959|       |static struct dfa_ctype const prednames[13] = {
14960|       |    {"alpha", &isalpha, (_Bool)0},
14961|       |    {"upper", &isupper, (_Bool)0},
14962|       |    {"lower", &islower, (_Bool)0},
14963|       |    {"digit", &isdigit, (_Bool)1},
14964|       |    {"xdigit", &isxdigit, (_Bool)0},
14965|       |    {"space", &isspace, (_Bool)0},
14966|       |    {"punct", &ispunct, (_Bool)0},
14967|       |    {"alnum", &isalnum, (_Bool)0},
14968|       |    {"print", &isprint, (_Bool)0},
14969|       |    {"graph", &isgraph, (_Bool)0},
14970|       |    {"cntrl", &iscntrl, (_Bool)0},
14971|       |    {"blank", &isblank, (_Bool)0},
14972|       |    {(char const *)((void *)0), (predicate *)((void *)0), (_Bool)0}
14973|       |};
14974|       |static struct dfa_ctype const *__attribute__((__pure__)) find_pred(char const *str)
14975|      0|{
14976|      0|    unsigned int i;
14977|      0|    int tmp;
14978|       |
14979|      0|    {
14980|      0|        i = 0U;
14981|      0|        {
14982|      0|            while (1) {
14983|      0|while_continue: /* CIL Label */
14984|      0|                ;
14985|       |
14986|      0|                if (!prednames[i].name) {
14987|      0|                    goto while_break;
14988|      0|                }
14989|      0|                {
14990|      0|                    tmp = strcmp(str, (char const *)prednames[i].name);
14991|      0|                }
14992|      0|                if (tmp == 0) {
14993|      0|                    goto while_break;
14994|      0|                }
14995|      0|                i++;
14996|      0|            }
14997|      0|while_break___0: /* CIL Label */
14998|      0|            ;
14999|      0|        }
15000|      0|while_break:
15001|      0|        ;
15002|      0|        return ((struct dfa_ctype const * /* __attribute__((__pure__)) */)(&prednames[i]));
15003|      0|    }
15004|      0|}
15005|       |static charclass zeroclass;
15006|       |static token parse_bracket_exp(void)
15007|      0|{
15008|      0|    _Bool invert;
15009|      0|    int c;
15010|      0|    int c1;
15011|      0|    int c2;
15012|      0|    charclass ccl;
15013|      0|    _Bool known_bracket_exp;
15014|      0|    int colon_warning_state;
15015|      0|    wint_t wc;
15016|      0|    wint_t wc2;
15017|      0|    wint_t wc1;
15018|      0|    struct mb_char_classes *work_mbc;
15019|      0|    size_t chars_al;
15020|      0|    size_t ranges_al;
15021|      0|    size_t ch_classes_al;
15022|      0|    size_t equivs_al;
15023|      0|    size_t coll_elems_al;
15024|      0|    size_t tmp;
15025|      0|    char *tmp___0;
15026|      0|    char *tmp___1;
15027|      0|    wint_t _wc;
15028|      0|    size_t nbytes;
15029|      0|    size_t tmp___2;
15030|      0|    unsigned char tmp___3;
15031|      0|    char *tmp___4;
15032|      0|    char *tmp___5;
15033|      0|    wint_t _wc___0;
15034|      0|    size_t nbytes___0;
15035|      0|    size_t tmp___6;
15036|      0|    unsigned char tmp___7;
15037|      0|    char *tmp___8;
15038|      0|    char *tmp___9;
15039|      0|    wint_t _wc___1;
15040|      0|    size_t nbytes___1;
15041|      0|    size_t tmp___10;
15042|      0|    unsigned char tmp___11;
15043|      0|    char str[33];
15044|      0|    size_t len;
15045|      0|    char *tmp___12;
15046|      0|    char *tmp___13;
15047|      0|    wint_t _wc___2;
15048|      0|    size_t nbytes___2;
15049|      0|    size_t tmp___14;
15050|      0|    unsigned char tmp___15;
15051|      0|    size_t tmp___16;
15052|      0|    char *tmp___17;
15053|      0|    char *tmp___18;
15054|      0|    wint_t _wc___3;
15055|      0|    size_t nbytes___3;
15056|      0|    size_t tmp___19;
15057|      0|    unsigned char tmp___20;
15058|      0|    char const *class;
15059|      0|    char const *tmp___23;
15060|      0|    int tmp___24;
15061|      0|    int tmp___25;
15062|      0|    struct dfa_ctype const *pred;
15063|      0|    struct dfa_ctype const *tmp___26;
15064|      0|    char *tmp___27;
15065|      0|    wctype_t wt;
15066|      0|    wctype_t tmp___28;
15067|      0|    size_t tmp___29;
15068|      0|    int tmp___30;
15069|      0|    char *tmp___31;
15070|      0|    char *tmp___32;
15071|      0|    wint_t _wc___4;
15072|      0|    size_t nbytes___4;
15073|      0|    size_t tmp___33;
15074|      0|    unsigned char tmp___34;
15075|      0|    char *tmp___35;
15076|      0|    char *tmp___36;
15077|      0|    wint_t _wc___5;
15078|      0|    size_t nbytes___5;
15079|      0|    size_t tmp___37;
15080|      0|    unsigned char tmp___38;
15081|      0|    char *tmp___39;
15082|      0|    char *tmp___40;
15083|      0|    wint_t _wc___6;
15084|      0|    size_t nbytes___6;
15085|      0|    size_t tmp___41;
15086|      0|    unsigned char tmp___42;
15087|      0|    char *tmp___43;
15088|      0|    char *tmp___44;
15089|      0|    wint_t _wc___7;
15090|      0|    size_t nbytes___7;
15091|      0|    size_t tmp___45;
15092|      0|    unsigned char tmp___46;
15093|      0|    char *tmp___47;
15094|      0|    char *tmp___48;
15095|      0|    wint_t _wc___8;
15096|      0|    size_t nbytes___8;
15097|      0|    size_t tmp___49;
15098|      0|    unsigned char tmp___50;
15099|      0|    wint_t tmp___51;
15100|      0|    size_t tmp___52;
15101|      0|    wint_t tmp___53;
15102|      0|    size_t tmp___54;
15103|      0|    int tmp___55;
15104|      0|    int tmp___56;
15105|      0|    int uc;
15106|      0|    int tmp___57;
15107|      0|    int uc2;
15108|      0|    int tmp___58;
15109|      0|    int uc1;
15110|      0|    int tmp___59;
15111|      0|    _Bool tmp___60;
15112|      0|    char *tmp___61;
15113|      0|    char *tmp___62;
15114|      0|    wint_t _wc___9;
15115|      0|    size_t nbytes___9;
15116|      0|    size_t tmp___63;
15117|      0|    unsigned char tmp___64;
15118|      0|    int tmp___65;
15119|      0|    wchar_t folded[22];
15120|      0|    int i;
15121|      0|    int n;
15122|      0|    int tmp___66;
15123|      0|    int tmp___67;
15124|      0|    size_t tmp___68;
15125|      0|    _Bool tmp___69;
15126|      0|    char *tmp___70;
15127|      0|    size_t tmp___72;
15128|      0|    _Bool tmp___73;
15129|      0|    size_t tmp___74;
15130|      0|    void *__cil_tmp161;
15131|      0|    void *__cil_tmp162;
15132|      0|    void *__cil_tmp163;
15133|      0|    char *__cil_tmp164;
15134|      0|    char *__cil_tmp165;
15135|      0|    char *__cil_tmp166;
15136|      0|    char *__cil_tmp167;
15137|      0|    char *__cil_tmp168;
15138|      0|    char *__cil_tmp169;
15139|      0|    char *__cil_tmp170;
15140|      0|    char *__cil_tmp171;
15141|      0|    char *__cil_tmp172;
15142|      0|    char *__cil_tmp173;
15143|      0|    char *__cil_tmp174;
15144|      0|    char *__cil_tmp175;
15145|      0|    char *__cil_tmp176;
15146|      0|    char *__cil_tmp177;
15147|      0|    char *__cil_tmp178;
15148|      0|    char *__cil_tmp179;
15149|      0|    char *__cil_tmp180;
15150|      0|    char *__cil_tmp181;
15151|      0|    char *__cil_tmp182;
15152|      0|    char *__cil_tmp183;
15153|      0|    char *__cil_tmp184;
15154|      0|    char *__cil_tmp185;
15155|      0|    char *__cil_tmp186;
15156|      0|    char *__cil_tmp187;
15157|      0|    char *__cil_tmp188;
15158|      0|    char *__cil_tmp189;
15159|       |
15160|      0|    {
15161|      0|        known_bracket_exp = (_Bool)1;
15162|      0|        wc1 = (wint_t)0;
15163|      0|        coll_elems_al = (size_t)0;
15164|      0|        equivs_al = coll_elems_al;
15165|      0|        ch_classes_al = equivs_al;
15166|      0|        ranges_al = ch_classes_al;
15167|      0|        chars_al = ranges_al;
15168|      0|        if (dfa___0->multibyte) {
15169|      0|            {
15170|      0|                dfa___0->mbcsets = (struct mb_char_classes *)maybe_realloc((void *)dfa___0->mbcsets,
15171|      0|                                   dfa___0->nmbcsets,
15172|      0|                                   &dfa___0->mbcsets_alloc,
15173|      0|                                   sizeof(*(dfa___0->mbcsets)));
15174|      0|                tmp = dfa___0->nmbcsets;
15175|      0|                (dfa___0->nmbcsets)++;
15176|      0|                work_mbc = dfa___0->mbcsets + tmp;
15177|      0|                memset((void *)work_mbc, 0, sizeof(*work_mbc));
15178|      0|            }
15179|      0|        }
15180|      0|        else {
15181|      0|            work_mbc = (struct mb_char_classes *)((void *)0);
15182|      0|        }
15183|      0|        {
15184|      0|            memset((void *)(ccl), 0, sizeof(ccl));
15185|      0|        }
15186|      0|        {
15187|      0|            while (1) {
15188|      0|while_continue: /* CIL Label */
15189|      0|                ;
15190|       |
15191|      0|                if (!lexleft) {
15192|      0|                    {
15193|      0|                        tmp___1 = gettext("unbalanced [");
15194|      0|                    }
15195|      0|                    if ((unsigned long)tmp___1 != (unsigned long)((char *)0)) {
15196|      0|                        {
15197|      0|                            tmp___0 = gettext("unbalanced [");
15198|      0|                            dfaerror((char const *)tmp___0);
15199|      0|                        }
15200|      0|                    }
15201|      0|                    else {
15202|      0|                        lasttok = (token)-1;
15203|      0|                        return (lasttok);
15204|      0|                    }
15205|      0|                }
15206|      0|                else {
15207|      0|                    {
15208|      0|                        tmp___2 = mbs_to_wchar(&_wc, lexptr, lexleft, dfa___0);
15209|      0|                        nbytes = tmp___2;
15210|      0|                        cur_mb_len = (int)nbytes;
15211|      0|                        wc = _wc;
15212|      0|                    }
15213|      0|                    if (nbytes == 1UL) {
15214|      0|                        {
15215|      0|                            tmp___3 = to_uchar___0((char)*lexptr);
15216|      0|                            c = (int)tmp___3;
15217|      0|                        }
15218|      0|                    }
15219|      0|                    else {
15220|      0|                        c = -1;
15221|      0|                    }
15222|      0|                    lexptr += nbytes;
15223|      0|                    lexleft -= nbytes;
15224|      0|                }
15225|      0|                goto while_break;
15226|      0|            }
15227|      0|while_break___16: /* CIL Label */
15228|      0|            ;
15229|      0|        }
15230|      0|while_break:
15231|      0|        ;
15232|      0|        if (c == 94) {
15233|      0|            {
15234|      0|                while (1) {
15235|      0|while_continue___0: /* CIL Label */
15236|      0|                    ;
15237|       |
15238|      0|                    if (!lexleft) {
15239|      0|                        {
15240|      0|                            tmp___5 = gettext("unbalanced [");
15241|      0|                        }
15242|      0|                        if ((unsigned long)tmp___5 != (unsigned long)((char *)0)) {
15243|      0|                            {
15244|      0|                                tmp___4 = gettext("unbalanced [");
15245|      0|                                dfaerror((char const *)tmp___4);
15246|      0|                            }
15247|      0|                        }
15248|      0|                        else {
15249|      0|                            lasttok = (token)-1;
15250|      0|                            return (lasttok);
15251|      0|                        }
15252|      0|                    }
15253|      0|                    else {
15254|      0|                        {
15255|      0|                            tmp___6 = mbs_to_wchar(&_wc___0, lexptr, lexleft, dfa___0);
15256|      0|                            nbytes___0 = tmp___6;
15257|      0|                            cur_mb_len = (int)nbytes___0;
15258|      0|                            wc = _wc___0;
15259|      0|                        }
15260|      0|                        if (nbytes___0 == 1UL) {
15261|      0|                            {
15262|      0|                                tmp___7 = to_uchar___0((char)*lexptr);
15263|      0|                                c = (int)tmp___7;
15264|      0|                            }
15265|      0|                        }
15266|      0|                        else {
15267|      0|                            c = -1;
15268|      0|                        }
15269|      0|                        lexptr += nbytes___0;
15270|      0|                        lexleft -= nbytes___0;
15271|      0|                    }
15272|      0|                    goto while_break___0;
15273|      0|                }
15274|      0|while_break___17: /* CIL Label */
15275|      0|                ;
15276|      0|            }
15277|      0|while_break___0 : {
15278|      0|                invert = (_Bool)1;
15279|      0|                known_bracket_exp = using_simple_locale();
15280|      0|            }
15281|      0|        }
15282|      0|        else {
15283|      0|            invert = (_Bool)0;
15284|      0|        }
15285|      0|        colon_warning_state = c == 58;
15286|      0|        {
15287|      0|            while (1) {
15288|      0|while_continue___1: /* CIL Label */
15289|      0|                ;
15290|      0|                c1 = 256;
15291|      0|                colon_warning_state &= -3;
15292|      0|                if (c == 91) {
15293|      0|                    {
15294|      0|                        while (1) {
15295|      0|while_continue___2: /* CIL Label */
15296|      0|                            ;
15297|       |
15298|      0|                            if (!lexleft) {
15299|      0|                                {
15300|      0|                                    tmp___9 = gettext("unbalanced [");
15301|      0|                                }
15302|      0|                                if ((unsigned long)tmp___9 != (unsigned long)((char *)0)) {
15303|      0|                                    {
15304|      0|                                        tmp___8 = gettext("unbalanced [");
15305|      0|                                        dfaerror((char const *)tmp___8);
15306|      0|                                    }
15307|      0|                                }
15308|      0|                                else {
15309|      0|                                    lasttok = (token)-1;
15310|      0|                                    return (lasttok);
15311|      0|                                }
15312|      0|                            }
15313|      0|                            else {
15314|      0|                                {
15315|      0|                                    tmp___10 = mbs_to_wchar(&_wc___1, lexptr, lexleft, dfa___0);
15316|      0|                                    nbytes___1 = tmp___10;
15317|      0|                                    cur_mb_len = (int)nbytes___1;
15318|      0|                                    wc1 = _wc___1;
15319|      0|                                }
15320|      0|                                if (nbytes___1 == 1UL) {
15321|      0|                                    {
15322|      0|                                        tmp___11 = to_uchar___0((char)*lexptr);
15323|      0|                                        c1 = (int)tmp___11;
15324|      0|                                    }
15325|      0|                                }
15326|      0|                                else {
15327|      0|                                    c1 = -1;
15328|      0|                                }
15329|      0|                                lexptr += nbytes___1;
15330|      0|                                lexleft -= nbytes___1;
15331|      0|                            }
15332|      0|                            goto while_break___2;
15333|      0|                        }
15334|      0|while_break___19: /* CIL Label */
15335|      0|                        ;
15336|      0|                    }
15337|      0|while_break___2:
15338|      0|                    ;
15339|      0|                    if (c1 == 58) {
15340|      0|                        if (syntax_bits & ((1UL << 1) << 1)) {
15341|      0|                            goto _L___0;
15342|      0|                        }
15343|      0|                        else {
15344|      0|                            goto _L___1;
15345|      0|                        }
15346|      0|                    }
15347|      0|                    else {
15348|      0|_L___1:
15349|      0|                        if (c1 == 46) {
15350|      0|                            goto _L___0;
15351|      0|                        }
15352|      0|                        else {
15353|      0|                            if (c1 == 61) {
15354|      0|_L___0:
15355|      0|                                len = (size_t)0;
15356|      0|                                {
15357|      0|                                    while (1) {
15358|      0|while_continue___3: /* CIL Label */
15359|      0|                                        ;
15360|       |
15361|      0|                                        {
15362|      0|                                            while (1) {
15363|      0|while_continue___4: /* CIL Label */
15364|      0|                                                ;
15365|       |
15366|      0|                                                if (!lexleft) {
15367|      0|                                                    {
15368|      0|                                                        tmp___13 = gettext("unbalanced [");
15369|      0|                                                    }
15370|      0|                                                    if ((unsigned long)tmp___13 != (unsigned long)((char *)0)) {
15371|      0|                                                        {
15372|      0|                                                            tmp___12 = gettext("unbalanced [");
15373|      0|                                                            dfaerror((char const *)tmp___12);
15374|      0|                                                        }
15375|      0|                                                    }
15376|      0|                                                    else {
15377|      0|                                                        lasttok = (token)-1;
15378|      0|                                                        return (lasttok);
15379|      0|                                                    }
15380|      0|                                                }
15381|      0|                                                else {
15382|      0|                                                    {
15383|      0|                                                        tmp___14 = mbs_to_wchar(&_wc___2, lexptr, lexleft, dfa___0);
15384|      0|                                                        nbytes___2 = tmp___14;
15385|      0|                                                        cur_mb_len = (int)nbytes___2;
15386|      0|                                                        wc = _wc___2;
15387|      0|                                                    }
15388|      0|                                                    if (nbytes___2 == 1UL) {
15389|      0|                                                        {
15390|      0|                                                            tmp___15 = to_uchar___0((char)*lexptr);
15391|      0|                                                            c = (int)tmp___15;
15392|      0|                                                        }
15393|      0|                                                    }
15394|      0|                                                    else {
15395|      0|                                                        c = -1;
15396|      0|                                                    }
15397|      0|                                                    lexptr += nbytes___2;
15398|      0|                                                    lexleft -= nbytes___2;
15399|      0|                                                }
15400|      0|                                                goto while_break___4;
15401|      0|                                            }
15402|      0|while_break___21: /* CIL Label */
15403|      0|                                            ;
15404|      0|                                        }
15405|      0|while_break___4:
15406|      0|                                        ;
15407|      0|                                        if (c == c1) {
15408|      0|                                            if ((int const) * lexptr == 93) {
15409|      0|                                                goto while_break___3;
15410|      0|                                            }
15411|      0|                                            else {
15412|      0|                                                goto _L;
15413|      0|                                            }
15414|      0|                                        }
15415|      0|                                        else {
15416|      0|_L:
15417|      0|                                            if (lexleft == 0UL) {
15418|      0|                                                goto while_break___3;
15419|      0|                                            }
15420|      0|                                        }
15421|      0|                                        if (len < 32UL) {
15422|      0|                                            tmp___16 = len;
15423|      0|                                            len++;
15424|      0|                                            str[tmp___16] = (char)c;
15425|      0|                                        }
15426|      0|                                        else {
15427|      0|                                            str[0] = (char)'\000';
15428|      0|                                        }
15429|      0|                                    }
15430|      0|while_break___20: /* CIL Label */
15431|      0|                                    ;
15432|      0|                                }
15433|      0|while_break___3:
15434|      0|                                str[len] = (char)'\000';
15435|      0|                                {
15436|      0|                                    while (1) {
15437|      0|while_continue___5: /* CIL Label */
15438|      0|                                        ;
15439|       |
15440|      0|                                        if (!lexleft) {
15441|      0|                                            {
15442|      0|                                                tmp___18 = gettext("unbalanced [");
15443|      0|                                            }
15444|      0|                                            if ((unsigned long)tmp___18 != (unsigned long)((char *)0)) {
15445|      0|                                                {
15446|      0|                                                    tmp___17 = gettext("unbalanced [");
15447|      0|                                                    dfaerror((char const *)tmp___17);
15448|      0|                                                }
15449|      0|                                            }
15450|      0|                                            else {
15451|      0|                                                lasttok = (token)-1;
15452|      0|                                                return (lasttok);
15453|      0|                                            }
15454|      0|                                        }
15455|      0|                                        else {
15456|      0|                                            {
15457|      0|                                                tmp___19 = mbs_to_wchar(&_wc___3, lexptr, lexleft, dfa___0);
15458|      0|                                                nbytes___3 = tmp___19;
15459|      0|                                                cur_mb_len = (int)nbytes___3;
15460|      0|                                                wc = _wc___3;
15461|      0|                                            }
15462|      0|                                            if (nbytes___3 == 1UL) {
15463|      0|                                                {
15464|      0|                                                    tmp___20 = to_uchar___0((char)*lexptr);
15465|      0|                                                    c = (int)tmp___20;
15466|      0|                                                }
15467|      0|                                            }
15468|      0|                                            else {
15469|      0|                                                c = -1;
15470|      0|                                            }
15471|      0|                                            lexptr += nbytes___3;
15472|      0|                                            lexleft -= nbytes___3;
15473|      0|                                        }
15474|      0|                                        goto while_break___5;
15475|      0|                                    }
15476|      0|while_break___22: /* CIL Label */
15477|      0|                                    ;
15478|      0|                                }
15479|      0|while_break___5:
15480|      0|                                ;
15481|      0|                                if (c1 == 58) {
15482|      0|                                    if (case_fold) {
15483|      0|                                        {
15484|      0|                                            tmp___24 = strcmp((char const *)(str), "upper");
15485|      0|                                        }
15486|      0|                                        if (tmp___24 == 0) {
15487|      0|                                            tmp___23 = "alpha";
15488|      0|                                        }
15489|      0|                                        else {
15490|      0|                                            {
15491|      0|                                                tmp___25 = strcmp((char const *)(str), "lower");
15492|      0|                                            }
15493|      0|                                            if (tmp___25 == 0) {
15494|      0|                                                tmp___23 = "alpha";
15495|      0|                                            }
15496|      0|                                            else {
15497|      0|                                                tmp___23 = (char const *)(str);
15498|      0|                                            }
15499|      0|                                        }
15500|      0|                                    }
15501|      0|                                    else {
15502|      0|                                        tmp___23 = (char const *)(str);
15503|      0|                                    }
15504|      0|                                    {
15505|      0|                                        class = tmp___23;
15506|      0|                                        tmp___26 = (struct dfa_ctype const *)find_pred(class);
15507|      0|                                        pred = tmp___26;
15508|      0|                                    }
15509|      0|                                    if (!pred) {
15510|      0|                                        {
15511|      0|                                            tmp___27 = gettext("invalid character class");
15512|      0|                                            dfaerror((char const *)tmp___27);
15513|      0|                                        }
15514|      0|                                    }
15515|      0|                                    if (dfa___0->multibyte) {
15516|      0|                                        if (!pred->single_byte_only) {
15517|      0|                                            {
15518|      0|                                                tmp___28 = wctype(class);
15519|      0|                                                wt = tmp___28;
15520|      0|                                                work_mbc->ch_classes = (wctype_t *)maybe_realloc((void *)work_mbc->ch_classes,
15521|      0|                                                                       work_mbc->nch_classes,
15522|      0|                                                                       &ch_classes_al, sizeof(*(work_mbc->ch_classes)));
15523|      0|                                                tmp___29 = work_mbc->nch_classes;
15524|      0|                                                (work_mbc->nch_classes)++;
15525|      0|                                                *(work_mbc->ch_classes + tmp___29) = wt;
15526|      0|                                            }
15527|      0|                                        }
15528|      0|                                    }
15529|      0|                                    c2 = 0;
15530|      0|                                    {
15531|      0|                                        while (1) {
15532|      0|while_continue___6: /* CIL Label */
15533|      0|                                            ;
15534|       |
15535|      0|                                            if (!(c2 < 256)) {
15536|      0|                                                goto while_break___6;
15537|      0|                                            }
15538|      0|                                            {
15539|      0|                                                tmp___30 = (*(pred->func))(c2);
15540|      0|                                            }
15541|      0|                                            if (tmp___30) {
15542|      0|                                                {
15543|      0|                                                    setbit((unsigned int)c2, ccl);
15544|      0|                                                }
15545|      0|                                            }
15546|      0|                                            c2++;
15547|      0|                                        }
15548|      0|while_break___23: /* CIL Label */
15549|      0|                                        ;
15550|      0|                                    }
15551|      0|while_break___6:
15552|      0|                                    ;
15553|      0|                                }
15554|      0|                                else {
15555|      0|                                    known_bracket_exp = (_Bool)0;
15556|      0|                                }
15557|      0|                                colon_warning_state |= 8;
15558|      0|                                {
15559|      0|                                    while (1) {
15560|      0|while_continue___7: /* CIL Label */
15561|      0|                                        ;
15562|       |
15563|      0|                                        if (!lexleft) {
15564|      0|                                            {
15565|      0|                                                tmp___32 = gettext("unbalanced [");
15566|      0|                                            }
15567|      0|                                            if ((unsigned long)tmp___32 != (unsigned long)((char *)0)) {
15568|      0|                                                {
15569|      0|                                                    tmp___31 = gettext("unbalanced [");
15570|      0|                                                    dfaerror((char const *)tmp___31);
15571|      0|                                                }
15572|      0|                                            }
15573|      0|                                            else {
15574|      0|                                                lasttok = (token)-1;
15575|      0|                                                return (lasttok);
15576|      0|                                            }
15577|      0|                                        }
15578|      0|                                        else {
15579|      0|                                            {
15580|      0|                                                tmp___33 = mbs_to_wchar(&_wc___4, lexptr, lexleft, dfa___0);
15581|      0|                                                nbytes___4 = tmp___33;
15582|      0|                                                cur_mb_len = (int)nbytes___4;
15583|      0|                                                wc1 = _wc___4;
15584|      0|                                            }
15585|      0|                                            if (nbytes___4 == 1UL) {
15586|      0|                                                {
15587|      0|                                                    tmp___34 = to_uchar___0((char)*lexptr);
15588|      0|                                                    c1 = (int)tmp___34;
15589|      0|                                                }
15590|      0|                                            }
15591|      0|                                            else {
15592|      0|                                                c1 = -1;
15593|      0|                                            }
15594|      0|                                            lexptr += nbytes___4;
15595|      0|                                            lexleft -= nbytes___4;
15596|      0|                                        }
15597|      0|                                        goto while_break___7;
15598|      0|                                    }
15599|      0|while_break___24: /* CIL Label */
15600|      0|                                    ;
15601|      0|                                }
15602|      0|while_break___7:
15603|      0|                                ;
15604|      0|                                goto __Cont;
15605|      0|                            }
15606|      0|                        }
15607|      0|                    }
15608|      0|                }
15609|      0|                if (c == 92) {
15610|      0|                    if (syntax_bits & 1UL) {
15611|      0|                        {
15612|      0|                            while (1) {
15613|      0|while_continue___8: /* CIL Label */
15614|      0|                                ;
15615|       |
15616|      0|                                if (!lexleft) {
15617|      0|                                    {
15618|      0|                                        tmp___36 = gettext("unbalanced [");
15619|      0|                                    }
15620|      0|                                    if ((unsigned long)tmp___36 != (unsigned long)((char *)0)) {
15621|      0|                                        {
15622|      0|                                            tmp___35 = gettext("unbalanced [");
15623|      0|                                            dfaerror((char const *)tmp___35);
15624|      0|                                        }
15625|      0|                                    }
15626|      0|                                    else {
15627|      0|                                        lasttok = (token)-1;
15628|      0|                                        return (lasttok);
15629|      0|                                    }
15630|      0|                                }
15631|      0|                                else {
15632|      0|                                    {
15633|      0|                                        tmp___37 = mbs_to_wchar(&_wc___5, lexptr, lexleft, dfa___0);
15634|      0|                                        nbytes___5 = tmp___37;
15635|      0|                                        cur_mb_len = (int)nbytes___5;
15636|      0|                                        wc = _wc___5;
15637|      0|                                    }
15638|      0|                                    if (nbytes___5 == 1UL) {
15639|      0|                                        {
15640|      0|                                            tmp___38 = to_uchar___0((char)*lexptr);
15641|      0|                                            c = (int)tmp___38;
15642|      0|                                        }
15643|      0|                                    }
15644|      0|                                    else {
15645|      0|                                        c = -1;
15646|      0|                                    }
15647|      0|                                    lexptr += nbytes___5;
15648|      0|                                    lexleft -= nbytes___5;
15649|      0|                                }
15650|      0|                                goto while_break___8;
15651|      0|                            }
15652|      0|while_break___25: /* CIL Label */
15653|      0|                            ;
15654|      0|                        }
15655|      0|while_break___8:
15656|      0|                        ;
15657|      0|                    }
15658|      0|                }
15659|      0|                if (c1 == 256) {
15660|      0|                    {
15661|      0|                        while (1) {
15662|      0|while_continue___9: /* CIL Label */
15663|      0|                            ;
15664|       |
15665|      0|                            if (!lexleft) {
15666|      0|                                {
15667|      0|                                    tmp___40 = gettext("unbalanced [");
15668|      0|                                }
15669|      0|                                if ((unsigned long)tmp___40 != (unsigned long)((char *)0)) {
15670|      0|                                    {
15671|      0|                                        tmp___39 = gettext("unbalanced [");
15672|      0|                                        dfaerror((char const *)tmp___39);
15673|      0|                                    }
15674|      0|                                }
15675|      0|                                else {
15676|      0|                                    lasttok = (token)-1;
15677|      0|                                    return (lasttok);
15678|      0|                                }
15679|      0|                            }
15680|      0|                            else {
15681|      0|                                {
15682|      0|                                    tmp___41 = mbs_to_wchar(&_wc___6, lexptr, lexleft, dfa___0);
15683|      0|                                    nbytes___6 = tmp___41;
15684|      0|                                    cur_mb_len = (int)nbytes___6;
15685|      0|                                    wc1 = _wc___6;
15686|      0|                                }
15687|      0|                                if (nbytes___6 == 1UL) {
15688|      0|                                    {
15689|      0|                                        tmp___42 = to_uchar___0((char)*lexptr);
15690|      0|                                        c1 = (int)tmp___42;
15691|      0|                                    }
15692|      0|                                }
15693|      0|                                else {
15694|      0|                                    c1 = -1;
15695|      0|                                }
15696|      0|                                lexptr += nbytes___6;
15697|      0|                                lexleft -= nbytes___6;
15698|      0|                            }
15699|      0|                            goto while_break___9;
15700|      0|                        }
15701|      0|while_break___26: /* CIL Label */
15702|      0|                        ;
15703|      0|                    }
15704|      0|while_break___9:
15705|      0|                    ;
15706|      0|                }
15707|      0|                if (c1 == 45) {
15708|      0|                    {
15709|      0|                        while (1) {
15710|      0|while_continue___10: /* CIL Label */
15711|      0|                            ;
15712|       |
15713|      0|                            if (!lexleft) {
15714|      0|                                {
15715|      0|                                    tmp___44 = gettext("unbalanced [");
15716|      0|                                }
15717|      0|                                if ((unsigned long)tmp___44 != (unsigned long)((char *)0)) {
15718|      0|                                    {
15719|      0|                                        tmp___43 = gettext("unbalanced [");
15720|      0|                                        dfaerror((char const *)tmp___43);
15721|      0|                                    }
15722|      0|                                }
15723|      0|                                else {
15724|      0|                                    lasttok = (token)-1;
15725|      0|                                    return (lasttok);
15726|      0|                                }
15727|      0|                            }
15728|      0|                            else {
15729|      0|                                {
15730|      0|                                    tmp___45 = mbs_to_wchar(&_wc___7, lexptr, lexleft, dfa___0);
15731|      0|                                    nbytes___7 = tmp___45;
15732|      0|                                    cur_mb_len = (int)nbytes___7;
15733|      0|                                    wc2 = _wc___7;
15734|      0|                                }
15735|      0|                                if (nbytes___7 == 1UL) {
15736|      0|                                    {
15737|      0|                                        tmp___46 = to_uchar___0((char)*lexptr);
15738|      0|                                        c2 = (int)tmp___46;
15739|      0|                                    }
15740|      0|                                }
15741|      0|                                else {
15742|      0|                                    c2 = -1;
15743|      0|                                }
15744|      0|                                lexptr += nbytes___7;
15745|      0|                                lexleft -= nbytes___7;
15746|      0|                            }
15747|      0|                            goto while_break___10;
15748|      0|                        }
15749|      0|while_break___27: /* CIL Label */
15750|      0|                        ;
15751|      0|                    }
15752|      0|while_break___10:
15753|      0|                    ;
15754|      0|                    if (c2 == 91) {
15755|      0|                        if ((int const) * lexptr == 46) {
15756|      0|                            known_bracket_exp = (_Bool)0;
15757|      0|                            c2 = ']';
15758|      0|                        }
15759|      0|                    }
15760|      0|                    if (c2 != 93) {
15761|      0|                        if (c2 == 92) {
15762|      0|                            if (syntax_bits & 1UL) {
15763|      0|                                {
15764|      0|                                    while (1) {
15765|      0|while_continue___11: /* CIL Label */
15766|      0|                                        ;
15767|       |
15768|      0|                                        if (!lexleft) {
15769|      0|                                            {
15770|      0|                                                tmp___48 = gettext("unbalanced [");
15771|      0|                                            }
15772|      0|                                            if ((unsigned long)tmp___48 != (unsigned long)((char *)0)) {
15773|      0|                                                {
15774|      0|                                                    tmp___47 = gettext("unbalanced [");
15775|      0|                                                    dfaerror((char const *)tmp___47);
15776|      0|                                                }
15777|      0|                                            }
15778|      0|                                            else {
15779|      0|                                                lasttok = (token)-1;
15780|      0|                                                return (lasttok);
15781|      0|                                            }
15782|      0|                                        }
15783|      0|                                        else {
15784|      0|                                            {
15785|      0|                                                tmp___49 = mbs_to_wchar(&_wc___8, lexptr, lexleft, dfa___0);
15786|      0|                                                nbytes___8 = tmp___49;
15787|      0|                                                cur_mb_len = (int)nbytes___8;
15788|      0|                                                wc2 = _wc___8;
15789|      0|                                            }
15790|      0|                                            if (nbytes___8 == 1UL) {
15791|      0|                                                {
15792|      0|                                                    tmp___50 = to_uchar___0((char)*lexptr);
15793|      0|                                                    c2 = (int)tmp___50;
15794|      0|                                                }
15795|      0|                                            }
15796|      0|                                            else {
15797|      0|                                                c2 = -1;
15798|      0|                                            }
15799|      0|                                            lexptr += nbytes___8;
15800|      0|                                            lexleft -= nbytes___8;
15801|      0|                                        }
15802|      0|                                        goto while_break___11;
15803|      0|                                    }
15804|      0|while_break___28: /* CIL Label */
15805|      0|                                    ;
15806|      0|                                }
15807|      0|while_break___11:
15808|      0|                                ;
15809|      0|                            }
15810|      0|                        }
15811|      0|                        if (dfa___0->multibyte) {
15812|      0|                            if (wc != 4294967295U) {
15813|      0|                                if (wc2 != 4294967295U) {
15814|      0|                                    {
15815|      0|                                        work_mbc->ranges = (struct __anonstruct_ranges_39 *)maybe_realloc((void *)work_mbc->ranges,
15816|      0|                                                           work_mbc->nranges + 2UL,
15817|      0|                                                           &ranges_al,
15818|      0|                                                           sizeof(*(work_mbc->ranges)));
15819|      0|                                    }
15820|      0|                                    if (case_fold) {
15821|      0|                                        {
15822|      0|                                            tmp___51 = towlower(wc);
15823|      0|                                            (work_mbc->ranges + work_mbc->nranges)->beg = (wchar_t)tmp___51;
15824|      0|                                        }
15825|      0|                                    }
15826|      0|                                    else {
15827|      0|                                        (work_mbc->ranges + work_mbc->nranges)->beg = (wchar_t)wc;
15828|      0|                                    }
15829|      0|                                    tmp___52 = work_mbc->nranges;
15830|      0|                                    (work_mbc->nranges)++;
15831|      0|                                    if (case_fold) {
15832|      0|                                        {
15833|      0|                                            tmp___53 = towlower(wc2);
15834|      0|                                            (work_mbc->ranges + tmp___52)->end = (wchar_t)tmp___53;
15835|      0|                                        }
15836|      0|                                    }
15837|      0|                                    else {
15838|      0|                                        (work_mbc->ranges + tmp___52)->end = (wchar_t)wc2;
15839|      0|                                    }
15840|      0|                                    if (case_fold) {
15841|      0|                                        {
15842|      0|                                            tmp___55 = iswalpha(wc);
15843|      0|                                        }
15844|      0|                                        if (tmp___55) {
15845|      0|                                            {
15846|      0|                                                (work_mbc->ranges + work_mbc->nranges)->beg = (wchar_t)towupper(wc);
15847|      0|                                                tmp___54 = work_mbc->nranges;
15848|      0|                                                (work_mbc->nranges)++;
15849|      0|                                                (work_mbc->ranges + tmp___54)->end = (wchar_t)towupper(wc2);
15850|      0|                                            }
15851|      0|                                        }
15852|      0|                                        else {
15853|      0|                                            {
15854|      0|                                                tmp___56 = iswalpha(wc2);
15855|      0|                                            }
15856|      0|                                            if (tmp___56) {
15857|      0|                                                {
15858|      0|                                                    (work_mbc->ranges + work_mbc->nranges)->beg = (wchar_t)towupper(wc);
15859|      0|                                                    tmp___54 = work_mbc->nranges;
15860|      0|                                                    (work_mbc->nranges)++;
15861|      0|                                                    (work_mbc->ranges + tmp___54)->end = (wchar_t)towupper(wc2);
15862|      0|                                                }
15863|      0|                                            }
15864|      0|                                        }
15865|      0|                                    }
15866|      0|                                }
15867|      0|                            }
15868|      0|                        }
15869|      0|                        else {
15870|      0|                            {
15871|      0|                                tmp___60 = using_simple_locale();
15872|      0|                            }
15873|      0|                            if (tmp___60) {
15874|      0|                                c1 = c;
15875|      0|                                {
15876|      0|                                    while (1) {
15877|      0|while_continue___12: /* CIL Label */
15878|      0|                                        ;
15879|       |
15880|      0|                                        if (!(c1 <= c2)) {
15881|      0|                                            goto while_break___12;
15882|      0|                                        }
15883|      0|                                        {
15884|      0|                                            setbit((unsigned int)c1, ccl);
15885|      0|                                            c1++;
15886|      0|                                        }
15887|      0|                                    }
15888|      0|while_break___29: /* CIL Label */
15889|      0|                                    ;
15890|      0|                                }
15891|      0|while_break___12:
15892|      0|                                ;
15893|      0|                                if (case_fold) {
15894|      0|                                    {
15895|      0|                                        tmp___57 = toupper(c);
15896|      0|                                        uc = tmp___57;
15897|      0|                                        tmp___58 = toupper(c2);
15898|      0|                                        uc2 = tmp___58;
15899|      0|                                        c1 = 0;
15900|      0|                                    }
15901|      0|                                    {
15902|      0|                                        while (1) {
15903|      0|while_continue___13: /* CIL Label */
15904|      0|                                            ;
15905|       |
15906|      0|                                            if (!(c1 < 256)) {
15907|      0|                                                goto while_break___13;
15908|      0|                                            }
15909|      0|                                            {
15910|      0|                                                tmp___59 = toupper(c1);
15911|      0|                                                uc1 = tmp___59;
15912|      0|                                            }
15913|      0|                                            if (uc <= uc1) {
15914|      0|                                                if (uc1 <= uc2) {
15915|      0|                                                    {
15916|      0|                                                        setbit((unsigned int)c1, ccl);
15917|      0|                                                    }
15918|      0|                                                }
15919|      0|                                            }
15920|      0|                                            c1++;
15921|      0|                                        }
15922|      0|while_break___30: /* CIL Label */
15923|      0|                                        ;
15924|      0|                                    }
15925|      0|while_break___13:
15926|      0|                                    ;
15927|      0|                                }
15928|      0|                            }
15929|      0|                            else {
15930|      0|                                known_bracket_exp = (_Bool)0;
15931|      0|                            }
15932|      0|                        }
15933|      0|                        colon_warning_state |= 8;
15934|      0|                        {
15935|      0|                            while (1) {
15936|      0|while_continue___14: /* CIL Label */
15937|      0|                                ;
15938|       |
15939|      0|                                if (!lexleft) {
15940|      0|                                    {
15941|      0|                                        tmp___62 = gettext("unbalanced [");
15942|      0|                                    }
15943|      0|                                    if ((unsigned long)tmp___62 != (unsigned long)((char *)0)) {
15944|      0|                                        {
15945|      0|                                            tmp___61 = gettext("unbalanced [");
15946|      0|                                            dfaerror((char const *)tmp___61);
15947|      0|                                        }
15948|      0|                                    }
15949|      0|                                    else {
15950|      0|                                        lasttok = (token)-1;
15951|      0|                                        return (lasttok);
15952|      0|                                    }
15953|      0|                                }
15954|      0|                                else {
15955|      0|                                    {
15956|      0|                                        tmp___63 = mbs_to_wchar(&_wc___9, lexptr, lexleft, dfa___0);
15957|      0|                                        nbytes___9 = tmp___63;
15958|      0|                                        cur_mb_len = (int)nbytes___9;
15959|      0|                                        wc1 = _wc___9;
15960|      0|                                    }
15961|      0|                                    if (nbytes___9 == 1UL) {
15962|      0|                                        {
15963|      0|                                            tmp___64 = to_uchar___0((char)*lexptr);
15964|      0|                                            c1 = (int)tmp___64;
15965|      0|                                        }
15966|      0|                                    }
15967|      0|                                    else {
15968|      0|                                        c1 = -1;
15969|      0|                                    }
15970|      0|                                    lexptr += nbytes___9;
15971|      0|                                    lexleft -= nbytes___9;
15972|      0|                                }
15973|      0|                                goto while_break___14;
15974|      0|                            }
15975|      0|while_break___31: /* CIL Label */
15976|      0|                            ;
15977|      0|                        }
15978|      0|while_break___14:
15979|      0|                        ;
15980|      0|                        goto __Cont;
15981|      0|                    }
15982|      0|                    lexptr -= cur_mb_len;
15983|      0|                    lexleft += (size_t)cur_mb_len;
15984|      0|                }
15985|      0|                if (c == 58) {
15986|      0|                    tmp___65 = 2;
15987|      0|                }
15988|      0|                else {
15989|      0|                    tmp___65 = 4;
15990|      0|                }
15991|      0|                colon_warning_state |= tmp___65;
15992|      0|                if (!dfa___0->multibyte) {
15993|      0|                    if (case_fold) {
15994|      0|                        {
15995|      0|                            setbit_case_fold_c(c, ccl);
15996|      0|                        }
15997|      0|                    }
15998|      0|                    else {
15999|      0|                        {
16000|      0|                            setbit((unsigned int)c, ccl);
16001|      0|                        }
16002|      0|                    }
16003|      0|                    goto __Cont;
16004|      0|                }
16005|      0|                if (wc == 4294967295U) {
16006|      0|                    known_bracket_exp = (_Bool)0;
16007|      0|                }
16008|      0|                else {
16009|      0|                    if (case_fold) {
16010|      0|                        {
16011|      0|                            tmp___66 = case_folded_counterparts((wchar_t)wc, folded + 1);
16012|      0|                            tmp___67 = tmp___66 + 1;
16013|      0|                        }
16014|      0|                    }
16015|      0|                    else {
16016|      0|                        tmp___67 = 1;
16017|      0|                    }
16018|      0|                    n = tmp___67;
16019|      0|                    folded[0] = (wchar_t)wc;
16020|      0|                    i = 0;
16021|      0|                    {
16022|      0|                        while (1) {
16023|      0|while_continue___15: /* CIL Label */
16024|      0|                            ;
16025|       |
16026|      0|                            if (!(i < n)) {
16027|      0|                                goto while_break___15;
16028|      0|                            }
16029|      0|                            {
16030|      0|                                tmp___69 = setbit_wc((wint_t)folded[i], ccl);
16031|      0|                            }
16032|      0|                            if (!tmp___69) {
16033|      0|                                {
16034|      0|                                    work_mbc->chars = (wchar_t *)maybe_realloc((void *)work_mbc->chars, work_mbc->nchars,
16035|      0|                                                      &chars_al, sizeof(*(work_mbc->chars)));
16036|      0|                                    tmp___68 = work_mbc->nchars;
16037|      0|                                    (work_mbc->nchars)++;
16038|      0|                                    *(work_mbc->chars + tmp___68) = folded[i];
16039|      0|                                }
16040|      0|                            }
16041|      0|                            i++;
16042|      0|                        }
16043|      0|while_break___32: /* CIL Label */
16044|      0|                        ;
16045|      0|                    }
16046|      0|while_break___15:
16047|      0|                    ;
16048|      0|                }
16049|      0|__Cont:
16050|      0|                wc = wc1;
16051|      0|                c = c1;
16052|      0|                if (!(c != 93)) {
16053|      0|                    goto while_break___1;
16054|      0|                }
16055|      0|            }
16056|      0|while_break___18: /* CIL Label */
16057|      0|            ;
16058|      0|        }
16059|      0|while_break___1:
16060|      0|        ;
16061|      0|        if (colon_warning_state == 7) {
16062|      0|            {
16063|      0|                tmp___70 = gettext("character class syntax is [[:space:]], not [:space:]");
16064|      0|                dfawarn((char const *)tmp___70);
16065|      0|            }
16066|      0|        }
16067|      0|        if (!known_bracket_exp) {
16068|      0|            return ((token)257);
16069|      0|        }
16070|      0|        if (dfa___0->multibyte) {
16071|      0|            {
16072|      0|                work_mbc->invert = invert;
16073|      0|                tmp___73 = equal((charclass_word * /* const  */)(ccl), (charclass_word * /* const  */)(zeroclass));
16074|      0|            }
16075|      0|            if (tmp___73) {
16076|      0|                work_mbc->cset = (ptrdiff_t)-1;
16077|      0|            }
16078|      0|            else {
16079|      0|                {
16080|      0|                    tmp___72 = charclass_index((charclass_word * /* const  */)(ccl));
16081|      0|                    work_mbc->cset = (ptrdiff_t)tmp___72;
16082|      0|                }
16083|      0|            }
16084|      0|            return ((token)273);
16085|      0|        }
16086|      0|        if (invert) {
16087|      0|            if (!(!dfa___0->multibyte)) {
16088|      0|                {
16089|      0|                    __assert_fail("!dfa->multibyte", "/home/khheo/project/benchmark/grep-2.19/src/dfa.c",
16090|      0|                                  1232U, "parse_bracket_exp");
16091|      0|                }
16092|      0|            }
16093|      0|            {
16094|      0|                notset(ccl);
16095|      0|            }
16096|      0|            if (syntax_bits & ((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
16097|      0|                {
16098|      0|                    clrbit((unsigned int)eolbyte___0, ccl);
16099|      0|                }
16100|      0|            }
16101|      0|        }
16102|      0|        {
16103|      0|            tmp___74 = charclass_index((charclass_word * /* const  */)(ccl));
16104|      0|        }
16105|      0|        return ((token)(275UL + tmp___74));
16106|      0|    }
16107|      0|}
16108|       |static token lex(void)
16109|     12|{
16110|     12|    int c;
16111|     12|    int c2;
16112|     12|    _Bool backslash;
16113|     12|    charclass ccl;
16114|     12|    int i;
16115|     12|    wint_t _wc;
16116|     12|    size_t nbytes;
16117|     12|    size_t tmp;
16118|     12|    unsigned char tmp___0;
16119|     12|    char *tmp___1;
16120|     12|    int tmp___2;
16121|     12|    int tmp___3;
16122|     12|    int tmp___4;
16123|     12|    int tmp___5;
16124|     12|    int tmp___6;
16125|     12|    int tmp___7;
16126|     12|    char const *p;
16127|     12|    char const *lim;
16128|     12|    char *tmp___8;
16129|     12|    char const *tmp___9;
16130|     12|    char const *tmp___10;
16131|     12|    char *tmp___11;
16132|     12|    size_t tmp___12;
16133|     12|    unsigned short const **tmp___13;
16134|     12|    size_t tmp___14;
16135|     12|    char const *lexptr_saved;
16136|     12|    size_t lexleft_saved;
16137|     12|    unsigned short const **tmp___15;
16138|     12|    size_t tmp___16;
16139|     12|    size_t tmp___17;
16140|     12|    unsigned short const **tmp___18;
16141|     12|    void *__cil_tmp38;
16142|     12|    char *__cil_tmp39;
16143|     12|    char *__cil_tmp40;
16144|     12|    char *__cil_tmp41;
16145|     12|    char *__cil_tmp42;
16146|     12|    char *__cil_tmp43;
16147|       |
16148|     12|    {
16149|     12|        backslash = (_Bool)0;
16150|     12|        i = 0;
16151|     12|        {
16152|     12|            while (1) {
16153|     12|while_continue: /* CIL Label */
16154|     12|                ;
16155|       |
16156|     12|                if (!(i < 2)) {
16157|      0|                    goto while_break;
16158|      0|                }
16159|     12|                {
16160|     12|                    while (1) {
16161|     12|while_continue___0: /* CIL Label */
16162|     12|                        ;
16163|       |
16164|     12|                        if (!lexleft) {
16165|      2|                            lasttok = (token)-1;
16166|      2|                            return (lasttok);
16167|      2|                        }
16168|     10|                        else {
16169|     10|                            {
16170|     10|                                tmp = mbs_to_wchar(&_wc, lexptr, lexleft, dfa___0);
16171|     10|                                nbytes = tmp;
16172|     10|                                cur_mb_len = (int)nbytes;
16173|     10|                                wctok = _wc;
16174|     10|                            }
16175|     10|                            if (nbytes == 1UL) {
16176|     10|                                {
16177|     10|                                    tmp___0 = to_uchar___0((char)*lexptr);
16178|     10|                                    c = (int)tmp___0;
16179|     10|                                }
16180|     10|                            }
16181|      0|                            else {
16182|      0|                                c = -1;
16183|      0|                            }
16184|     10|                            lexptr += nbytes;
16185|     10|                            lexleft -= nbytes;
16186|     10|                        }
16187|     10|                        goto while_break___0;
16188|     12|                    }
16189|      0|while_break___7: /* CIL Label */
16190|      0|                    ;
16191|      0|                }
16192|     10|while_break___0:
16193|     10|                ;
16194|     10|                if (c == 92) {
16195|      0|                    goto case_92;
16196|      0|                }
16197|     10|                if (c == 94) {
16198|      0|                    goto case_94;
16199|      0|                }
16200|     10|                if (c == 36) {
16201|      0|                    goto case_36;
16202|      0|                }
16203|     10|                if (c == 49) {
16204|      0|                    goto case_49;
16205|      0|                }
16206|     10|                if (c == 50) {
16207|      0|                    goto case_49;
16208|      0|                }
16209|     10|                if (c == 51) {
16210|      0|                    goto case_49;
16211|      0|                }
16212|     10|                if (c == 52) {
16213|      0|                    goto case_49;
16214|      0|                }
16215|     10|                if (c == 53) {
16216|      0|                    goto case_49;
16217|      0|                }
16218|     10|                if (c == 54) {
16219|      0|                    goto case_49;
16220|      0|                }
16221|     10|                if (c == 55) {
16222|      0|                    goto case_49;
16223|      0|                }
16224|     10|                if (c == 56) {
16225|      0|                    goto case_49;
16226|      0|                }
16227|     10|                if (c == 57) {
16228|      0|                    goto case_49;
16229|      0|                }
16230|     10|                if (c == 96) {
16231|      0|                    goto case_96;
16232|      0|                }
16233|     10|                if (c == 39) {
16234|      0|                    goto case_39;
16235|      0|                }
16236|     10|                if (c == 60) {
16237|      0|                    goto case_60;
16238|      0|                }
16239|     10|                if (c == 62) {
16240|      0|                    goto case_62;
16241|      0|                }
16242|     10|                if (c == 98) {
16243|      0|                    goto case_98;
16244|      0|                }
16245|     10|                if (c == 66) {
16246|      0|                    goto case_66;
16247|      0|                }
16248|     10|                if (c == 63) {
16249|      0|                    goto case_63;
16250|      0|                }
16251|     10|                if (c == 42) {
16252|      0|                    goto case_42;
16253|      0|                }
16254|     10|                if (c == 43) {
16255|      0|                    goto case_43;
16256|      0|                }
16257|     10|                if (c == 123) {
16258|      0|                    goto case_123;
16259|      0|                }
16260|     10|                if (c == 124) {
16261|      0|                    goto case_124;
16262|      0|                }
16263|     10|                if (c == 10) {
16264|      0|                    goto case_10;
16265|      0|                }
16266|     10|                if (c == 40) {
16267|      0|                    goto case_40;
16268|      0|                }
16269|     10|                if (c == 41) {
16270|      0|                    goto case_41;
16271|      0|                }
16272|     10|                if (c == 46) {
16273|      0|                    goto case_46;
16274|      0|                }
16275|     10|                if (c == 115) {
16276|      0|                    goto case_115;
16277|      0|                }
16278|     10|                if (c == 83) {
16279|      0|                    goto case_115;
16280|      0|                }
16281|     10|                if (c == 119) {
16282|      0|                    goto case_119;
16283|      0|                }
16284|     10|                if (c == 87) {
16285|      0|                    goto case_119;
16286|      0|                }
16287|     10|                if (c == 91) {
16288|      0|                    goto case_91;
16289|      0|                }
16290|     10|                goto normal_char;
16291|     10|case_92:
16292|      0|                if (backslash) {
16293|      0|                    goto normal_char;
16294|      0|                }
16295|      0|                if (lexleft == 0UL) {
16296|      0|                    {
16297|      0|                        tmp___1 = gettext("unfinished \\ escape");
16298|      0|                        dfaerror((char const *)tmp___1);
16299|      0|                    }
16300|      0|                }
16301|      0|                backslash = (_Bool)1;
16302|      0|                goto switch_break;
16303|      0|case_94:
16304|      0|                if (backslash) {
16305|      0|                    goto normal_char;
16306|      0|                }
16307|      0|                if (syntax_bits & (((1UL << 1) << 1) << 1)) {
16308|      0|                    lasttok = (token)258;
16309|      0|                    return (lasttok);
16310|      0|                }
16311|      0|                else {
16312|      0|                    if (lasttok == -1L) {
16313|      0|                        lasttok = (token)258;
16314|      0|                        return (lasttok);
16315|      0|                    }
16316|      0|                    else {
16317|      0|                        if (lasttok == 270L) {
16318|      0|                            lasttok = (token)258;
16319|      0|                            return (lasttok);
16320|      0|                        }
16321|      0|                        else {
16322|      0|                            if (lasttok == 269L) {
16323|      0|                                lasttok = (token)258;
16324|      0|                                return (lasttok);
16325|      0|                            }
16326|      0|                        }
16327|      0|                    }
16328|      0|                }
16329|      0|                goto normal_char;
16330|      0|case_36:
16331|      0|                if (backslash) {
16332|      0|                    goto normal_char;
16333|      0|                }
16334|      0|                if (syntax_bits & (((1UL << 1) << 1) << 1)) {
16335|      0|                    lasttok = (token)259;
16336|      0|                    return (lasttok);
16337|      0|                }
16338|      0|                else {
16339|      0|                    if (lexleft == 0UL) {
16340|      0|                        lasttok = (token)259;
16341|      0|                        return (lasttok);
16342|      0|                    }
16343|      0|                    else {
16344|      0|                        if (syntax_bits & (((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
16345|      0|                            if (lexleft > 0UL) {
16346|      0|                                if ((int const) * lexptr == 41) {
16347|      0|                                    tmp___2 = 1;
16348|      0|                                }
16349|      0|                                else {
16350|      0|                                    tmp___2 = 0;
16351|      0|                                }
16352|      0|                            }
16353|      0|                            else {
16354|      0|                                tmp___2 = 0;
16355|      0|                            }
16356|      0|                            tmp___4 = tmp___2;
16357|      0|                        }
16358|      0|                        else {
16359|      0|                            if (lexleft > 1UL) {
16360|      0|                                if ((int const) * (lexptr + 0) == 92) {
16361|      0|                                    if ((int const) * (lexptr + 1) == 41) {
16362|      0|                                        tmp___3 = 1;
16363|      0|                                    }
16364|      0|                                    else {
16365|      0|                                        tmp___3 = 0;
16366|      0|                                    }
16367|      0|                                }
16368|      0|                                else {
16369|      0|                                    tmp___3 = 0;
16370|      0|                                }
16371|      0|                            }
16372|      0|                            else {
16373|      0|                                tmp___3 = 0;
16374|      0|                            }
16375|      0|                            tmp___4 = tmp___3;
16376|      0|                        }
16377|      0|                        if (tmp___4) {
16378|      0|                            lasttok = (token)259;
16379|      0|                            return (lasttok);
16380|      0|                        }
16381|      0|                        else {
16382|      0|                            if (syntax_bits & (((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
16383|      0|                                if (lexleft > 0UL) {
16384|      0|                                    if ((int const) * lexptr == 124) {
16385|      0|                                        tmp___5 = 1;
16386|      0|                                    }
16387|      0|                                    else {
16388|      0|                                        tmp___5 = 0;
16389|      0|                                    }
16390|      0|                                }
16391|      0|                                else {
16392|      0|                                    tmp___5 = 0;
16393|      0|                                }
16394|      0|                                tmp___7 = tmp___5;
16395|      0|                            }
16396|      0|                            else {
16397|      0|                                if (lexleft > 1UL) {
16398|      0|                                    if ((int const) * (lexptr + 0) == 92) {
16399|      0|                                        if ((int const) * (lexptr + 1) == 124) {
16400|      0|                                            tmp___6 = 1;
16401|      0|                                        }
16402|      0|                                        else {
16403|      0|                                            tmp___6 = 0;
16404|      0|                                        }
16405|      0|                                    }
16406|      0|                                    else {
16407|      0|                                        tmp___6 = 0;
16408|      0|                                    }
16409|      0|                                }
16410|      0|                                else {
16411|      0|                                    tmp___6 = 0;
16412|      0|                                }
16413|      0|                                tmp___7 = tmp___6;
16414|      0|                            }
16415|      0|                            if (tmp___7) {
16416|      0|                                lasttok = (token)259;
16417|      0|                                return (lasttok);
16418|      0|                            }
16419|      0|                            else {
16420|      0|                                if (syntax_bits & (((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
16421|      0|                                    if (lexleft > 0UL) {
16422|      0|                                        if ((int const) * lexptr == 10) {
16423|      0|                                            lasttok = (token)259;
16424|      0|                                            return (lasttok);
16425|      0|                                        }
16426|      0|                                    }
16427|      0|                                }
16428|      0|                            }
16429|      0|                        }
16430|      0|                    }
16431|      0|                }
16432|      0|                goto normal_char;
16433|      0|case_49:
16434|      0|                if (backslash) {
16435|      0|                    if (!(syntax_bits & ((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
16436|      0|                        laststart = (_Bool)0;
16437|      0|                        lasttok = (token)257;
16438|      0|                        return (lasttok);
16439|      0|                    }
16440|      0|                }
16441|      0|                goto normal_char;
16442|      0|case_96:
16443|      0|                if (backslash) {
16444|      0|                    if (!(syntax_bits & (((((((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
16445|      0|                        lasttok = (token)258;
16446|      0|                        return (lasttok);
16447|      0|                    }
16448|      0|                }
16449|      0|                goto normal_char;
16450|      0|case_39:
16451|      0|                if (backslash) {
16452|      0|                    if (!(syntax_bits & (((((((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
16453|      0|                        lasttok = (token)259;
16454|      0|                        return (lasttok);
16455|      0|                    }
16456|      0|                }
16457|      0|                goto normal_char;
16458|      0|case_60:
16459|      0|                if (backslash) {
16460|      0|                    if (!(syntax_bits & (((((((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
16461|      0|                        lasttok = (token)260;
16462|      0|                        return (lasttok);
16463|      0|                    }
16464|      0|                }
16465|      0|                goto normal_char;
16466|      0|case_62:
16467|      0|                if (backslash) {
16468|      0|                    if (!(syntax_bits & (((((((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
16469|      0|                        lasttok = (token)261;
16470|      0|                        return (lasttok);
16471|      0|                    }
16472|      0|                }
16473|      0|                goto normal_char;
16474|      0|case_98:
16475|      0|                if (backslash) {
16476|      0|                    if (!(syntax_bits & (((((((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
16477|      0|                        lasttok = (token)262;
16478|      0|                        return (lasttok);
16479|      0|                    }
16480|      0|                }
16481|      0|                goto normal_char;
16482|      0|case_66:
16483|      0|                if (backslash) {
16484|      0|                    if (!(syntax_bits & (((((((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
16485|      0|                        lasttok = (token)263;
16486|      0|                        return (lasttok);
16487|      0|                    }
16488|      0|                }
16489|      0|                goto normal_char;
16490|      0|case_63:
16491|      0|                if (syntax_bits & ((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
16492|      0|                    goto normal_char;
16493|      0|                }
16494|      0|                if ((int)backslash != ((syntax_bits & (1UL << 1)) != 0UL)) {
16495|      0|                    goto normal_char;
16496|      0|                }
16497|      0|                if (!(syntax_bits & ((((1UL << 1) << 1) << 1) << 1))) {
16498|      0|                    if (laststart) {
16499|      0|                        goto normal_char;
16500|      0|                    }
16501|      0|                }
16502|      0|                lasttok = (token)264;
16503|      0|                return (lasttok);
16504|      0|case_42:
16505|      0|                if (backslash) {
16506|      0|                    goto normal_char;
16507|      0|                }
16508|      0|                if (!(syntax_bits & ((((1UL << 1) << 1) << 1) << 1))) {
16509|      0|                    if (laststart) {
16510|      0|                        goto normal_char;
16511|      0|                    }
16512|      0|                }
16513|      0|                lasttok = (token)265;
16514|      0|                return (lasttok);
16515|      0|case_43:
16516|      0|                if (syntax_bits & ((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
16517|      0|                    goto normal_char;
16518|      0|                }
16519|      0|                if ((int)backslash != ((syntax_bits & (1UL << 1)) != 0UL)) {
16520|      0|                    goto normal_char;
16521|      0|                }
16522|      0|                if (!(syntax_bits & ((((1UL << 1) << 1) << 1) << 1))) {
16523|      0|                    if (laststart) {
16524|      0|                        goto normal_char;
16525|      0|                    }
16526|      0|                }
16527|      0|                lasttok = (token)266;
16528|      0|                return (lasttok);
16529|      0|case_123:
16530|      0|                if (!(syntax_bits & (((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
16531|      0|                    goto normal_char;
16532|      0|                }
16533|      0|                if ((int)backslash != ((syntax_bits & ((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0UL)) {
16534|      0|                    goto normal_char;
16535|      0|                }
16536|      0|                if (!(syntax_bits & ((((1UL << 1) << 1) << 1) << 1))) {
16537|      0|                    if (laststart) {
16538|      0|                        goto normal_char;
16539|      0|                    }
16540|      0|                }
16541|      0|                p = lexptr;
16542|      0|                lim = p + lexleft;
16543|      0|                maxrep = -1;
16544|      0|                minrep = maxrep;
16545|      0|                {
16546|      0|                    while (1) {
16547|      0|while_continue___1: /* CIL Label */
16548|      0|                        ;
16549|       |
16550|      0|                        if ((unsigned long)p != (unsigned long)lim) {
16551|      0|                            if (!((unsigned int)*p - 48U <= 9U)) {
16552|      0|                                goto while_break___1;
16553|      0|                            }
16554|      0|                        }
16555|      0|                        else {
16556|      0|                            goto while_break___1;
16557|      0|                        }
16558|      0|                        if (minrep < 0) {
16559|      0|                            minrep = (int)((int const) * p - 48);
16560|      0|                        }
16561|      0|                        else {
16562|      0|                            if (32768 < (minrep * 10 + (int)*p) - 48) {
16563|      0|                                minrep = 32768;
16564|      0|                            }
16565|      0|                            else {
16566|      0|                                minrep = (minrep * 10 + (int)*p) - 48;
16567|      0|                            }
16568|      0|                        }
16569|      0|                        p++;
16570|      0|                    }
16571|      0|while_break___8: /* CIL Label */
16572|      0|                    ;
16573|      0|                }
16574|      0|while_break___1:
16575|      0|                ;
16576|      0|                if ((unsigned long)p != (unsigned long)lim) {
16577|      0|                    if ((int const) * p != 44) {
16578|      0|                        maxrep = minrep;
16579|      0|                    }
16580|      0|                    else {
16581|      0|                        if (minrep < 0) {
16582|      0|                            minrep = 0;
16583|      0|                        }
16584|      0|                        {
16585|      0|                            while (1) {
16586|      0|while_continue___2: /* CIL Label */
16587|      0|                                ;
16588|      0|                                p++;
16589|      0|                                if ((unsigned long)p != (unsigned long)lim) {
16590|      0|                                    if (!((unsigned int)*p - 48U <= 9U)) {
16591|      0|                                        goto while_break___2;
16592|      0|                                    }
16593|      0|                                }
16594|      0|                                else {
16595|      0|                                    goto while_break___2;
16596|      0|                                }
16597|      0|                                if (maxrep < 0) {
16598|      0|                                    maxrep = (int)((int const) * p - 48);
16599|      0|                                }
16600|      0|                                else {
16601|      0|                                    if (32768 < (maxrep * 10 + (int)*p) - 48) {
16602|      0|                                        maxrep = 32768;
16603|      0|                                    }
16604|      0|                                    else {
16605|      0|                                        maxrep = (maxrep * 10 + (int)*p) - 48;
16606|      0|                                    }
16607|      0|                                }
16608|      0|                            }
16609|      0|while_break___9: /* CIL Label */
16610|      0|                            ;
16611|      0|                        }
16612|      0|while_break___2:
16613|      0|                        ;
16614|      0|                    }
16615|      0|                }
16616|      0|                if (!backslash) {
16617|      0|                    goto _L___3;
16618|      0|                }
16619|      0|                else {
16620|      0|                    if ((unsigned long)p != (unsigned long)lim) {
16621|      0|                        tmp___9 = p;
16622|      0|                        p++;
16623|      0|                        if ((int const) * tmp___9 == 92) {
16624|      0|_L___3:
16625|      0|                            if ((unsigned long)p != (unsigned long)lim) {
16626|      0|                                tmp___10 = p;
16627|      0|                                p++;
16628|      0|                                if ((int const) * tmp___10 == 125) {
16629|      0|                                    if (0 <= minrep) {
16630|      0|                                        if (!(maxrep < 0)) {
16631|      0|                                            if (!(minrep <= maxrep)) {
16632|      0|                                                goto _L___4;
16633|      0|                                            }
16634|      0|                                        }
16635|      0|                                    }
16636|      0|                                    else {
16637|      0|                                        goto _L___4;
16638|      0|                                    }
16639|      0|                                }
16640|      0|                                else {
16641|      0|                                    goto _L___4;
16642|      0|                                }
16643|      0|                            }
16644|      0|                            else {
16645|      0|                                goto _L___4;
16646|      0|                            }
16647|      0|                        }
16648|      0|                        else {
16649|      0|                            goto _L___4;
16650|      0|                        }
16651|      0|                    }
16652|      0|                    else {
16653|      0|_L___4:
16654|      0|                        if (syntax_bits & (((((((((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
16655|      0|                            goto normal_char;
16656|      0|                        }
16657|      0|                        {
16658|      0|                            tmp___8 = gettext("Invalid content of \\{\\}");
16659|      0|                            dfaerror((char const *)tmp___8);
16660|      0|                        }
16661|      0|                    }
16662|      0|                }
16663|      0|                if (32767 < maxrep) {
16664|      0|                    {
16665|      0|                        tmp___11 = gettext("Regular expression too big");
16666|      0|                        dfaerror((char const *)tmp___11);
16667|      0|                    }
16668|      0|                }
16669|      0|                lexptr = p;
16670|      0|                lexleft = (size_t)(lim - p);
16671|      0|                laststart = (_Bool)0;
16672|      0|                lasttok = (token)267;
16673|      0|                return (lasttok);
16674|      0|case_124:
16675|      0|                if (syntax_bits & ((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
16676|      0|                    goto normal_char;
16677|      0|                }
16678|      0|                if ((int)backslash != ((syntax_bits & (((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0UL)) {
16679|      0|                    goto normal_char;
16680|      0|                }
16681|      0|                laststart = (_Bool)1;
16682|      0|                lasttok = (token)269;
16683|      0|                return (lasttok);
16684|      0|case_10:
16685|      0|                if (syntax_bits & ((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
16686|      0|                    goto normal_char;
16687|      0|                }
16688|      0|                else {
16689|      0|                    if (backslash) {
16690|      0|                        goto normal_char;
16691|      0|                    }
16692|      0|                    else {
16693|      0|                        if (!(syntax_bits & (((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
16694|      0|                            goto normal_char;
16695|      0|                        }
16696|      0|                    }
16697|      0|                }
16698|      0|                laststart = (_Bool)1;
16699|      0|                lasttok = (token)269;
16700|      0|                return (lasttok);
16701|      0|case_40:
16702|      0|                if ((int)backslash != ((syntax_bits & (((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0UL)) {
16703|      0|                    goto normal_char;
16704|      0|                }
16705|      0|                parens++;
16706|      0|                laststart = (_Bool)1;
16707|      0|                lasttok = (token)270;
16708|      0|                return (lasttok);
16709|      0|case_41:
16710|      0|                if ((int)backslash != ((syntax_bits & (((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0UL)) {
16711|      0|                    goto normal_char;
16712|      0|                }
16713|      0|                if (parens == 0UL) {
16714|      0|                    if (syntax_bits & (((((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
16715|      0|                        goto normal_char;
16716|      0|                    }
16717|      0|                }
16718|      0|                parens--;
16719|      0|                laststart = (_Bool)0;
16720|      0|                lasttok = (token)271;
16721|      0|                return (lasttok);
16722|      0|case_46:
16723|      0|                if (backslash) {
16724|      0|                    goto normal_char;
16725|      0|                }
16726|      0|                if (dfa___0->multibyte) {
16727|      0|                    laststart = (_Bool)0;
16728|      0|                    lasttok = (token)272;
16729|      0|                    return (lasttok);
16730|      0|                }
16731|      0|                {
16732|      0|                    zeroset(ccl);
16733|      0|                    notset(ccl);
16734|      0|                }
16735|      0|                if (!(syntax_bits & ((((((1UL << 1) << 1) << 1) << 1) << 1) << 1))) {
16736|      0|                    {
16737|      0|                        clrbit((unsigned int)eolbyte___0, ccl);
16738|      0|                    }
16739|      0|                }
16740|      0|                if (syntax_bits & (((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
16741|      0|                    {
16742|      0|                        clrbit((unsigned int)'\000', ccl);
16743|      0|                    }
16744|      0|                }
16745|      0|                {
16746|      0|                    laststart = (_Bool)0;
16747|      0|                    tmp___12 = charclass_index((charclass_word * /* const  */)(ccl));
16748|      0|                    lasttok = (token)(275UL + tmp___12);
16749|      0|                }
16750|      0|                return (lasttok);
16751|      0|case_115:
16752|      0|                if (!backslash) {
16753|      0|                    goto normal_char;
16754|      0|                }
16755|      0|                else {
16756|      0|                    if (syntax_bits & (((((((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
16757|      0|                        goto normal_char;
16758|      0|                    }
16759|      0|                }
16760|      0|                if (!dfa___0->multibyte) {
16761|      0|                    {
16762|      0|                        zeroset(ccl);
16763|      0|                        c2 = 0;
16764|      0|                    }
16765|      0|                    {
16766|      0|                        while (1) {
16767|      0|while_continue___3: /* CIL Label */
16768|      0|                            ;
16769|       |
16770|      0|                            if (!(c2 < 256)) {
16771|      0|                                goto while_break___3;
16772|      0|                            }
16773|      0|                            {
16774|      0|                                tmp___13 = __ctype_b_loc();
16775|      0|                            }
16776|      0|                            if ((int const) * (*tmp___13 + c2) & 8192) {
16777|      0|                                {
16778|      0|                                    setbit((unsigned int)c2, ccl);
16779|      0|                                }
16780|      0|                            }
16781|      0|                            c2++;
16782|      0|                        }
16783|      0|while_break___10: /* CIL Label */
16784|      0|                        ;
16785|      0|                    }
16786|      0|while_break___3:
16787|      0|                    ;
16788|      0|                    if (c == 83) {
16789|      0|                        {
16790|      0|                            notset(ccl);
16791|      0|                        }
16792|      0|                    }
16793|      0|                    {
16794|      0|                        laststart = (_Bool)0;
16795|      0|                        tmp___14 = charclass_index((charclass_word * /* const  */)(ccl));
16796|      0|                        lasttok = (token)(275UL + tmp___14);
16797|      0|                    }
16798|      0|                    return (lasttok);
16799|      0|                }
16800|      0|                {
16801|      0|                    while (1) {
16802|      0|while_continue___4: /* CIL Label */
16803|      0|                        ;
16804|      0|                        lexptr_saved = lexptr;
16805|      0|                        lexleft_saved = lexleft;
16806|      0|                        if (c == 115) {
16807|      0|                            lexptr = "[:space:]]";
16808|      0|                        }
16809|      0|                        else {
16810|      0|                            lexptr = "^[:space:]]";
16811|      0|                        }
16812|      0|                        {
16813|      0|                            lexleft = strlen(lexptr);
16814|      0|                            lasttok = parse_bracket_exp();
16815|      0|                            lexptr = lexptr_saved;
16816|      0|                            lexleft = lexleft_saved;
16817|      0|                        }
16818|      0|                        goto while_break___4;
16819|      0|                    }
16820|      0|while_break___11: /* CIL Label */
16821|      0|                    ;
16822|      0|                }
16823|      0|while_break___4:
16824|      0|                laststart = (_Bool)0;
16825|      0|                return (lasttok);
16826|      0|case_119:
16827|      0|                if (!backslash) {
16828|      0|                    goto normal_char;
16829|      0|                }
16830|      0|                else {
16831|      0|                    if (syntax_bits & (((((((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
16832|      0|                        goto normal_char;
16833|      0|                    }
16834|      0|                }
16835|      0|                {
16836|      0|                    zeroset(ccl);
16837|      0|                    c2 = 0;
16838|      0|                }
16839|      0|                {
16840|      0|                    while (1) {
16841|      0|while_continue___5: /* CIL Label */
16842|      0|                        ;
16843|       |
16844|      0|                        if (!(c2 < 256)) {
16845|      0|                            goto while_break___5;
16846|      0|                        }
16847|      0|                        {
16848|      0|                            tmp___15 = __ctype_b_loc();
16849|      0|                        }
16850|      0|                        if ((int const) * (*tmp___15 + c2) & 8) {
16851|      0|                            {
16852|      0|                                setbit((unsigned int)c2, ccl);
16853|      0|                            }
16854|      0|                        }
16855|      0|                        else {
16856|      0|                            if (c2 == 95) {
16857|      0|                                {
16858|      0|                                    setbit((unsigned int)c2, ccl);
16859|      0|                                }
16860|      0|                            }
16861|      0|                        }
16862|      0|                        c2++;
16863|      0|                    }
16864|      0|while_break___12: /* CIL Label */
16865|      0|                    ;
16866|      0|                }
16867|      0|while_break___5:
16868|      0|                ;
16869|      0|                if (c == 87) {
16870|      0|                    {
16871|      0|                        notset(ccl);
16872|      0|                    }
16873|      0|                }
16874|      0|                {
16875|      0|                    laststart = (_Bool)0;
16876|      0|                    tmp___16 = charclass_index((charclass_word * /* const  */)(ccl));
16877|      0|                    lasttok = (token)(275UL + tmp___16);
16878|      0|                }
16879|      0|                return (lasttok);
16880|      0|case_91:
16881|      0|                if (backslash) {
16882|      0|                    goto normal_char;
16883|      0|                }
16884|      0|                {
16885|      0|                    laststart = (_Bool)0;
16886|      0|                    lasttok = parse_bracket_exp();
16887|      0|                }
16888|      0|                return (lasttok);
16889|     10|normal_char:
16890|     10|                laststart = (_Bool)0;
16891|     10|                if (dfa___0->multibyte) {
16892|      0|                    lasttok = (token)274;
16893|      0|                    return (lasttok);
16894|      0|                }
16895|     10|                if (case_fold) {
16896|      0|                    {
16897|      0|                        tmp___18 = __ctype_b_loc();
16898|      0|                    }
16899|      0|                    if ((int const) * (*tmp___18 + c) & 1024) {
16900|      0|                        {
16901|      0|                            zeroset(ccl);
16902|      0|                            setbit_case_fold_c(c, ccl);
16903|      0|                            tmp___17 = charclass_index((charclass_word * /* const  */)(ccl));
16904|      0|                            lasttok = (token)(275UL + tmp___17);
16905|      0|                        }
16906|      0|                        return (lasttok);
16907|      0|                    }
16908|      0|                }
16909|     10|                lasttok = (token)c;
16910|     10|                return (lasttok);
16911|      0|switch_break:
16912|      0|                i++;
16913|      0|            }
16914|      0|while_break___6: /* CIL Label */
16915|      0|            ;
16916|      0|        }
16917|      0|while_break : {
16918|      0|            abort();
16919|      0|        }
16920|      0|        return ((token)-1);
16921|      0|    }
16922|      0|}
16923|       |static token tok;
16924|       |static size_t depth;
16925|       |static void addtok_mb(token t, int mbprop)
16926|     22|{
16927|     22|    size_t tmp;
16928|       |
16929|     22|    {
16930|     22|        if (dfa___0->talloc == dfa___0->tindex) {
16931|      2|            {
16932|      2|                dfa___0->tokens = (token *)x2nrealloc((void *)dfa___0->tokens, &dfa___0->talloc,
16933|      2|                                                      sizeof(*(dfa___0->tokens)));
16934|      2|            }
16935|      2|            if (dfa___0->multibyte) {
16936|      0|                {
16937|      0|                    dfa___0->multibyte_prop = (int *)xnrealloc((void *)dfa___0->multibyte_prop,
16938|      0|                                              dfa___0->talloc, sizeof(*(dfa___0->multibyte_prop)));
16939|      0|                }
16940|      0|            }
16941|      2|        }
16942|     22|        if (dfa___0->multibyte) {
16943|      0|            *(dfa___0->multibyte_prop + dfa___0->tindex) = mbprop;
16944|      0|        }
16945|     22|        tmp = dfa___0->tindex;
16946|     22|        (dfa___0->tindex)++;
16947|     22|        *(dfa___0->tokens + tmp) = t;
16948|     22|        if (t == 264L) {
16949|      0|            goto case_264;
16950|      0|        }
16951|     22|        if (t == 265L) {
16952|      0|            goto case_264;
16953|      0|        }
16954|     22|        if (t == 266L) {
16955|      0|            goto case_264;
16956|      0|        }
16957|     22|        if (t == 268L) {
16958|     10|            goto case_268;
16959|     10|        }
16960|     12|        if (t == 269L) {
16961|      0|            goto case_268;
16962|      0|        }
16963|     12|        if (t == 257L) {
16964|      0|            goto case_257;
16965|      0|        }
16966|     12|        if (t == 256L) {
16967|      0|            goto case_256;
16968|      0|        }
16969|     12|        goto switch_default;
16970|     12|case_264:
16971|      0|        goto switch_break;
16972|     12|case_268:
16973|     10|        depth--;
16974|     10|        goto switch_break;
16975|      0|case_257:
16976|      0|        dfa___0->fast = (_Bool)0;
16977|     12|switch_default:
16978|     12|        (dfa___0->nleaves)++;
16979|     12|case_256:
16980|     12|        depth++;
16981|     12|        goto switch_break;
16982|     22|switch_break:
16983|     22|        ;
16984|     22|        if (depth > dfa___0->depth) {
16985|      4|            dfa___0->depth = depth;
16986|      4|        }
16987|     22|        return;
16988|     12|    }
16989|     12|}
16990|       |static void addtok_wc(wint_t wc);
16991|       |static void addtok(token t)
16992|     22|{
16993|     22|    _Bool need_or;
16994|     22|    struct mb_char_classes *work_mbc;
16995|     22|    size_t i;
16996|       |
16997|     22|    {
16998|     22|        if (dfa___0->multibyte) {
16999|      0|            if (t == 273L) {
17000|      0|                need_or = (_Bool)0;
17001|      0|                work_mbc = dfa___0->mbcsets + (dfa___0->nmbcsets - 1UL);
17002|      0|                if (!work_mbc->invert) {
17003|      0|                    i = (size_t)0;
17004|      0|                    {
17005|      0|                        while (1) {
17006|      0|while_continue: /* CIL Label */
17007|      0|                            ;
17008|       |
17009|      0|                            if (!(i < work_mbc->nchars)) {
17010|      0|                                goto while_break;
17011|      0|                            }
17012|      0|                            {
17013|      0|                                addtok_wc((wint_t) * (work_mbc->chars + i));
17014|      0|                            }
17015|      0|                            if (need_or) {
17016|      0|                                {
17017|      0|                                    addtok((token)269);
17018|      0|                                }
17019|      0|                            }
17020|      0|                            need_or = (_Bool)1;
17021|      0|                            i++;
17022|      0|                        }
17023|      0|while_break___0: /* CIL Label */
17024|      0|                        ;
17025|      0|                    }
17026|      0|while_break:
17027|      0|                    work_mbc->nchars = (size_t)0;
17028|      0|                }
17029|      0|                if (work_mbc->invert) {
17030|      0|                    goto _L;
17031|      0|                }
17032|      0|                else {
17033|      0|                    if (work_mbc->nch_classes != 0UL) {
17034|      0|                        goto _L;
17035|      0|                    }
17036|      0|                    else {
17037|      0|                        if (work_mbc->nranges != 0UL) {
17038|      0|                            goto _L;
17039|      0|                        }
17040|      0|                        else {
17041|      0|                            if (work_mbc->nequivs != 0UL) {
17042|      0|                                goto _L;
17043|      0|                            }
17044|      0|                            else {
17045|      0|                                if (work_mbc->ncoll_elems != 0UL) {
17046|      0|_L : {
17047|      0|                                        addtok_mb((token)273, (int)(((dfa___0->nmbcsets - 1UL) << 2) + 3UL));
17048|      0|                                    }
17049|      0|                                    if (need_or) {
17050|      0|                                        {
17051|      0|                                            addtok((token)269);
17052|      0|                                        }
17053|      0|                                    }
17054|      0|                                }
17055|      0|                                else {
17056|      0|                                    if (work_mbc->cset != -1L) {
17057|      0|                                        {
17058|      0|                                            addtok(275L + work_mbc->cset);
17059|      0|                                        }
17060|      0|                                        if (need_or) {
17061|      0|                                            {
17062|      0|                                                addtok((token)269);
17063|      0|                                            }
17064|      0|                                        }
17065|      0|                                    }
17066|      0|                                }
17067|      0|                            }
17068|      0|                        }
17069|      0|                    }
17070|      0|                }
17071|      0|            }
17072|      0|            else {
17073|      0|                {
17074|      0|                    addtok_mb(t, 3);
17075|      0|                }
17076|      0|            }
17077|      0|        }
17078|     22|        else {
17079|     22|            {
17080|     22|                addtok_mb(t, 3);
17081|     22|            }
17082|     22|        }
17083|     22|        return;
17084|     22|    }
17085|     22|}
17086|       |static void addtok_wc(wint_t wc)
17087|      0|{
17088|      0|    unsigned char buf[16];
17089|      0|    mbstate_t s;
17090|      0|    int i;
17091|      0|    size_t stored_bytes;
17092|      0|    size_t tmp;
17093|      0|    int tmp___0;
17094|      0|    int tmp___1;
17095|      0|    void *__cil_tmp11;
17096|      0|    void *__cil_tmp12;
17097|       |
17098|      0|    {
17099|      0|        {
17100|      0|            s.__count = 0;
17101|      0|            s.__value.__wch = 0U;
17102|      0|            tmp = wcrtomb((char * /* __restrict  */)((char *)(buf)), (wchar_t)wc, (mbstate_t * /* __restrict  */)(&s));
17103|      0|            stored_bytes = tmp;
17104|      0|        }
17105|      0|        if (stored_bytes != 0xffffffffffffffffUL) {
17106|      0|            cur_mb_len = (int)stored_bytes;
17107|      0|        }
17108|      0|        else {
17109|      0|            cur_mb_len = 1;
17110|      0|            buf[0] = (unsigned char)0;
17111|      0|        }
17112|      0|        if (cur_mb_len == 1) {
17113|      0|            tmp___0 = 3;
17114|      0|        }
17115|      0|        else {
17116|      0|            tmp___0 = 1;
17117|      0|        }
17118|      0|        {
17119|      0|            addtok_mb((token)buf[0], tmp___0);
17120|      0|            i = 1;
17121|      0|        }
17122|      0|        {
17123|      0|            while (1) {
17124|      0|while_continue: /* CIL Label */
17125|      0|                ;
17126|       |
17127|      0|                if (!(i < cur_mb_len)) {
17128|      0|                    goto while_break;
17129|      0|                }
17130|      0|                if (i == cur_mb_len - 1) {
17131|      0|                    tmp___1 = 2;
17132|      0|                }
17133|      0|                else {
17134|      0|                    tmp___1 = 0;
17135|      0|                }
17136|      0|                {
17137|      0|                    addtok_mb((token)buf[i], tmp___1);
17138|      0|                    addtok((token)268);
17139|      0|                    i++;
17140|      0|                }
17141|      0|            }
17142|      0|while_break___0: /* CIL Label */
17143|      0|            ;
17144|      0|        }
17145|      0|while_break:
17146|      0|        ;
17147|      0|        return;
17148|      0|    }
17149|      0|}
17150|       |static void add_utf8_anychar(void);
17151|       |static charclass const utf8_classes[5] = {{
17152|       |        (charclass_word)0, (charclass_word)0, (charclass_word)0, (charclass_word)0,
17153|       |        ((1U << 31) << 1) - 1U, ((1U << 31) << 1) - 1U, (charclass_word)0, (charclass_word)0
17154|       |    },
17155|       |    {
17156|       |        ((1U << 31) << 1) - 1U, ((1U << 31) << 1) - 1U, ((1U << 31) << 1) - 1U, ((1U << 31) << 1) - 1U,
17157|       |        (charclass_word)0, (charclass_word)0, (charclass_word)0, (charclass_word)0
17158|       |    },
17159|       |    {
17160|       |        (charclass_word)0, (charclass_word)0, (charclass_word)0, (charclass_word)0,
17161|       |        (charclass_word)0, (charclass_word)0, 4294967292U & (((1U << 31) << 1) - 1U), (charclass_word)0
17162|       |    },
17163|       |    {
17164|       |        (charclass_word)0, (charclass_word)0, (charclass_word)0, (charclass_word)0,
17165|       |        (charclass_word)0, (charclass_word)0, (charclass_word)0, (charclass_word)65535
17166|       |    },
17167|       |    {
17168|       |        (charclass_word)0, (charclass_word)0, (charclass_word)0, (charclass_word)0,
17169|       |        (charclass_word)0, (charclass_word)0, (charclass_word)0, (charclass_word)16711680
17170|       |    }
17171|       |};
17172|       |static void add_utf8_anychar(void)
17173|      0|{
17174|      0|    unsigned int n;
17175|      0|    unsigned int i;
17176|      0|    charclass c;
17177|      0|    size_t tmp;
17178|      0|    void *__cil_tmp6;
17179|       |
17180|      0|    {
17181|      0|        n = (unsigned int)(sizeof(utf8_classes) / sizeof(utf8_classes[0]));
17182|      0|        if (dfa___0->utf8_anychar_classes[0] == 0L) {
17183|      0|            i = 0U;
17184|      0|            {
17185|      0|                while (1) {
17186|      0|while_continue: /* CIL Label */
17187|      0|                    ;
17188|       |
17189|      0|                    if (!(i < n)) {
17190|      0|                        goto while_break;
17191|      0|                    }
17192|      0|                    {
17193|      0|                        copyset(utf8_classes[i], c);
17194|      0|                    }
17195|      0|                    if (i == 1U) {
17196|      0|                        if (!(syntax_bits & ((((((1UL << 1) << 1) << 1) << 1) << 1) << 1))) {
17197|      0|                            {
17198|      0|                                clrbit((unsigned int)eolbyte___0, c);
17199|      0|                            }
17200|      0|                        }
17201|      0|                        if (syntax_bits & (((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
17202|      0|                            {
17203|      0|                                clrbit((unsigned int)'\000', c);
17204|      0|                            }
17205|      0|                        }
17206|      0|                    }
17207|      0|                    {
17208|      0|                        tmp = charclass_index((charclass_word * /* const  */)(c));
17209|      0|                        dfa___0->utf8_anychar_classes[i] = (token)(275UL + tmp);
17210|      0|                        i++;
17211|      0|                    }
17212|      0|                }
17213|      0|while_break___2: /* CIL Label */
17214|      0|                ;
17215|      0|            }
17216|      0|while_break:
17217|      0|            ;
17218|      0|        }
17219|      0|        i = 1U;
17220|      0|        {
17221|      0|            while (1) {
17222|      0|while_continue___0: /* CIL Label */
17223|      0|                ;
17224|       |
17225|      0|                if (!(i < n)) {
17226|      0|                    goto while_break___0;
17227|      0|                }
17228|      0|                {
17229|      0|                    addtok(dfa___0->utf8_anychar_classes[i]);
17230|      0|                    i++;
17231|      0|                }
17232|      0|            }
17233|      0|while_break___3: /* CIL Label */
17234|      0|            ;
17235|      0|        }
17236|      0|while_break___0:
17237|      0|        ;
17238|      0|        {
17239|      0|            while (1) {
17240|      0|while_continue___1: /* CIL Label */
17241|      0|                ;
17242|      0|                i--;
17243|      0|                if (!(i > 1U)) {
17244|      0|                    goto while_break___1;
17245|      0|                }
17246|      0|                {
17247|      0|                    addtok(dfa___0->utf8_anychar_classes[0]);
17248|      0|                    addtok((token)268);
17249|      0|                    addtok((token)269);
17250|      0|                }
17251|      0|            }
17252|      0|while_break___4: /* CIL Label */
17253|      0|            ;
17254|      0|        }
17255|      0|while_break___1:
17256|      0|        ;
17257|      0|        return;
17258|      0|    }
17259|      0|}
17260|       |static void atom(void)
17261|     10|{
17262|     10|    wchar_t folded[21];
17263|     10|    int i;
17264|     10|    int n;
17265|     10|    int tmp;
17266|     10|    char *tmp___0;
17267|     10|    int tmp___1;
17268|     10|    void *__cil_tmp9;
17269|     10|    char *__cil_tmp10;
17270|       |
17271|     10|    {
17272|     10|        if (tok == 274L) {
17273|      0|            if (wctok == 4294967295U) {
17274|      0|                {
17275|      0|                    addtok((token)257);
17276|      0|                }
17277|      0|            }
17278|      0|            else {
17279|      0|                {
17280|      0|                    addtok_wc(wctok);
17281|      0|                }
17282|      0|                if (case_fold) {
17283|      0|                    {
17284|      0|                        tmp = case_folded_counterparts((wchar_t)wctok, folded);
17285|      0|                        n = tmp;
17286|      0|                        i = 0;
17287|      0|                    }
17288|      0|                    {
17289|      0|                        while (1) {
17290|      0|while_continue: /* CIL Label */
17291|      0|                            ;
17292|       |
17293|      0|                            if (!(i < n)) {
17294|      0|                                goto while_break;
17295|      0|                            }
17296|      0|                            {
17297|      0|                                addtok_wc((wint_t)folded[i]);
17298|      0|                                addtok((token)269);
17299|      0|                                i++;
17300|      0|                            }
17301|      0|                        }
17302|      0|while_break___0: /* CIL Label */
17303|      0|                        ;
17304|      0|                    }
17305|      0|while_break:
17306|      0|                    ;
17307|      0|                }
17308|      0|            }
17309|      0|            {
17310|      0|                tok = lex();
17311|      0|            }
17312|      0|        }
17313|     10|        else {
17314|     10|            if (tok == 272L) {
17315|      0|                {
17316|      0|                    tmp___1 = using_utf8();
17317|      0|                }
17318|      0|                if (tmp___1) {
17319|      0|                    {
17320|      0|                        add_utf8_anychar();
17321|      0|                        tok = lex();
17322|      0|                    }
17323|      0|                }
17324|      0|                else {
17325|      0|                    goto _L___0;
17326|      0|                }
17327|      0|            }
17328|     10|            else {
17329|     10|_L___0:
17330|     10|                if (tok >= 0L) {
17331|     10|                    if (tok < 256L) {
17332|     10|                        {
17333|     10|                            addtok(tok);
17334|     10|                            tok = lex();
17335|     10|                        }
17336|     10|                    }
17337|      0|                    else {
17338|      0|                        goto _L;
17339|      0|                    }
17340|     10|                }
17341|      0|                else {
17342|      0|_L:
17343|      0|                    if (tok >= 275L) {
17344|      0|                        {
17345|      0|                            addtok(tok);
17346|      0|                            tok = lex();
17347|      0|                        }
17348|      0|                    }
17349|      0|                    else {
17350|      0|                        if (tok == 257L) {
17351|      0|                            {
17352|      0|                                addtok(tok);
17353|      0|                                tok = lex();
17354|      0|                            }
17355|      0|                        }
17356|      0|                        else {
17357|      0|                            if (tok == 258L) {
17358|      0|                                {
17359|      0|                                    addtok(tok);
17360|      0|                                    tok = lex();
17361|      0|                                }
17362|      0|                            }
17363|      0|                            else {
17364|      0|                                if (tok == 259L) {
17365|      0|                                    {
17366|      0|                                        addtok(tok);
17367|      0|                                        tok = lex();
17368|      0|                                    }
17369|      0|                                }
17370|      0|                                else {
17371|      0|                                    if (tok == 260L) {
17372|      0|                                        {
17373|      0|                                            addtok(tok);
17374|      0|                                            tok = lex();
17375|      0|                                        }
17376|      0|                                    }
17377|      0|                                    else {
17378|      0|                                        if (tok == 272L) {
17379|      0|                                            {
17380|      0|                                                addtok(tok);
17381|      0|                                                tok = lex();
17382|      0|                                            }
17383|      0|                                        }
17384|      0|                                        else {
17385|      0|                                            if (tok == 273L) {
17386|      0|                                                {
17387|      0|                                                    addtok(tok);
17388|      0|                                                    tok = lex();
17389|      0|                                                }
17390|      0|                                            }
17391|      0|                                            else {
17392|      0|                                                if (tok == 261L) {
17393|      0|                                                    {
17394|      0|                                                        addtok(tok);
17395|      0|                                                        tok = lex();
17396|      0|                                                    }
17397|      0|                                                }
17398|      0|                                                else {
17399|      0|                                                    if (tok == 262L) {
17400|      0|                                                        {
17401|      0|                                                            addtok(tok);
17402|      0|                                                            tok = lex();
17403|      0|                                                        }
17404|      0|                                                    }
17405|      0|                                                    else {
17406|      0|                                                        if (tok == 263L) {
17407|      0|                                                            {
17408|      0|                                                                addtok(tok);
17409|      0|                                                                tok = lex();
17410|      0|                                                            }
17411|      0|                                                        }
17412|      0|                                                        else {
17413|      0|                                                            if (tok == 270L) {
17414|      0|                                                                {
17415|      0|                                                                    tok = lex();
17416|      0|                                                                    regexp();
17417|      0|                                                                }
17418|      0|                                                                if (tok != 271L) {
17419|      0|                                                                    {
17420|      0|                                                                        tmp___0 = gettext("unbalanced (");
17421|      0|                                                                        dfaerror((char const *)tmp___0);
17422|      0|                                                                    }
17423|      0|                                                                }
17424|      0|                                                                {
17425|      0|                                                                    tok = lex();
17426|      0|                                                                }
17427|      0|                                                            }
17428|      0|                                                            else {
17429|      0|                                                                {
17430|      0|                                                                    addtok((token)256);
17431|      0|                                                                }
17432|      0|                                                            }
17433|      0|                                                        }
17434|      0|                                                    }
17435|      0|                                                }
17436|      0|                                            }
17437|      0|                                        }
17438|      0|                                    }
17439|      0|                                }
17440|      0|                            }
17441|      0|                        }
17442|      0|                    }
17443|      0|                }
17444|     10|            }
17445|     10|        }
17446|     10|        return;
17447|     10|    }
17448|     10|}
17449|       |static size_t __attribute__((__pure__)) nsubtoks(size_t tindex)
17450|      0|{
17451|      0|    size_t ntoks1;
17452|      0|    size_t __attribute__((__pure__)) tmp;
17453|      0|    size_t __attribute__((__pure__)) tmp___0;
17454|       |
17455|      0|    {
17456|      0|        if (*(dfa___0->tokens + (tindex - 1UL)) == 264L) {
17457|      0|            goto case_264;
17458|      0|        }
17459|      0|        if (*(dfa___0->tokens + (tindex - 1UL)) == 265L) {
17460|      0|            goto case_264;
17461|      0|        }
17462|      0|        if (*(dfa___0->tokens + (tindex - 1UL)) == 266L) {
17463|      0|            goto case_264;
17464|      0|        }
17465|      0|        if (*(dfa___0->tokens + (tindex - 1UL)) == 268L) {
17466|      0|            goto case_268;
17467|      0|        }
17468|      0|        if (*(dfa___0->tokens + (tindex - 1UL)) == 269L) {
17469|      0|            goto case_268;
17470|      0|        }
17471|      0|        goto switch_default;
17472|      0|switch_default:
17473|      0|        return ((size_t __attribute__((__pure__)))1);
17474|      0|case_264 : {
17475|      0|            tmp = nsubtoks(tindex - 1UL);
17476|      0|        }
17477|      0|        return ((size_t __attribute__((__pure__)))1 + tmp);
17478|      0|case_268 : {
17479|      0|            ntoks1 = (size_t)nsubtoks(tindex - 1UL);
17480|      0|            tmp___0 = nsubtoks((tindex - 1UL) - ntoks1);
17481|      0|        }
17482|      0|        return ((size_t __attribute__((__pure__)))((1UL + ntoks1) + (size_t)tmp___0));
17483|       |
17484|      0|        return ((unsigned long __attribute__((__pure__)))0);
17485|      0|    }
17486|      0|}
17487|       |static void copytoks(size_t tindex, size_t ntokens)
17488|      0|{
17489|      0|    size_t i;
17490|       |
17491|      0|    {
17492|      0|        if (dfa___0->multibyte) {
17493|      0|            i = (size_t)0;
17494|      0|            {
17495|      0|                while (1) {
17496|      0|while_continue: /* CIL Label */
17497|      0|                    ;
17498|       |
17499|      0|                    if (!(i < ntokens)) {
17500|      0|                        goto while_break;
17501|      0|                    }
17502|      0|                    {
17503|      0|                        addtok_mb(*(dfa___0->tokens + (tindex + i)), *(dfa___0->multibyte_prop + (tindex + i)));
17504|      0|                        i++;
17505|      0|                    }
17506|      0|                }
17507|      0|while_break___1: /* CIL Label */
17508|      0|                ;
17509|      0|            }
17510|      0|while_break:
17511|      0|            ;
17512|      0|        }
17513|      0|        else {
17514|      0|            i = (size_t)0;
17515|      0|            {
17516|      0|                while (1) {
17517|      0|while_continue___0: /* CIL Label */
17518|      0|                    ;
17519|       |
17520|      0|                    if (!(i < ntokens)) {
17521|      0|                        goto while_break___0;
17522|      0|                    }
17523|      0|                    {
17524|      0|                        addtok_mb(*(dfa___0->tokens + (tindex + i)), 3);
17525|      0|                        i++;
17526|      0|                    }
17527|      0|                }
17528|      0|while_break___2: /* CIL Label */
17529|      0|                ;
17530|      0|            }
17531|      0|while_break___0:
17532|      0|            ;
17533|      0|        }
17534|      0|        return;
17535|      0|    }
17536|      0|}
17537|       |static void closure(void)
17538|     10|{
17539|     10|    int i;
17540|     10|    size_t tindex;
17541|     10|    size_t ntokens;
17542|     10|    size_t __attribute__((__pure__)) tmp;
17543|       |
17544|     10|    {
17545|     10|        {
17546|     10|            atom();
17547|     10|        }
17548|     10|        {
17549|     10|            while (1) {
17550|     10|while_continue: /* CIL Label */
17551|     10|                ;
17552|       |
17553|     10|                if (!(tok == 264L)) {
17554|     10|                    if (!(tok == 265L)) {
17555|     10|                        if (!(tok == 266L)) {
17556|     10|                            if (!(tok == 267L)) {
17557|     10|                                goto while_break;
17558|     10|                            }
17559|     10|                        }
17560|     10|                    }
17561|     10|                }
17562|      0|                if (tok == 267L) {
17563|      0|                    if (minrep) {
17564|      0|                        goto _L___0;
17565|      0|                    }
17566|      0|                    else {
17567|      0|                        if (maxrep) {
17568|      0|_L___0 : {
17569|      0|                                ntokens = (size_t)nsubtoks(dfa___0->tindex);
17570|      0|                                tindex = dfa___0->tindex - ntokens;
17571|      0|                            }
17572|      0|                            if (maxrep < 0) {
17573|      0|                                {
17574|      0|                                    addtok((token)266);
17575|      0|                                }
17576|      0|                            }
17577|      0|                            if (minrep == 0) {
17578|      0|                                {
17579|      0|                                    addtok((token)264);
17580|      0|                                }
17581|      0|                            }
17582|      0|                            i = 1;
17583|      0|                            {
17584|      0|                                while (1) {
17585|      0|while_continue___0: /* CIL Label */
17586|      0|                                    ;
17587|       |
17588|      0|                                    if (!(i < minrep)) {
17589|      0|                                        goto while_break___0;
17590|      0|                                    }
17591|      0|                                    {
17592|      0|                                        copytoks(tindex, ntokens);
17593|      0|                                        addtok((token)268);
17594|      0|                                        i++;
17595|      0|                                    }
17596|      0|                                }
17597|      0|while_break___3: /* CIL Label */
17598|      0|                                ;
17599|      0|                            }
17600|      0|while_break___0:
17601|      0|                            ;
17602|      0|                            {
17603|      0|                                while (1) {
17604|      0|while_continue___1: /* CIL Label */
17605|      0|                                    ;
17606|       |
17607|      0|                                    if (!(i < maxrep)) {
17608|      0|                                        goto while_break___1;
17609|      0|                                    }
17610|      0|                                    {
17611|      0|                                        copytoks(tindex, ntokens);
17612|      0|                                        addtok((token)264);
17613|      0|                                        addtok((token)268);
17614|      0|                                        i++;
17615|      0|                                    }
17616|      0|                                }
17617|      0|while_break___4: /* CIL Label */
17618|      0|                                ;
17619|      0|                            }
17620|      0|while_break___1 : {
17621|      0|                                tok = lex();
17622|      0|                            }
17623|      0|                        }
17624|      0|                        else {
17625|      0|                            goto _L;
17626|      0|                        }
17627|      0|                    }
17628|      0|                }
17629|      0|                else {
17630|      0|_L:
17631|      0|                    if (tok == 267L) {
17632|      0|                        {
17633|      0|                            tmp = nsubtoks(dfa___0->tindex);
17634|      0|                            dfa___0->tindex -= (size_t)tmp;
17635|      0|                            tok = lex();
17636|      0|                            closure();
17637|      0|                        }
17638|      0|                    }
17639|      0|                    else {
17640|      0|                        {
17641|      0|                            addtok(tok);
17642|      0|                            tok = lex();
17643|      0|                        }
17644|      0|                    }
17645|      0|                }
17646|      0|            }
17647|      0|while_break___2: /* CIL Label */
17648|      0|            ;
17649|      0|        }
17650|     10|while_break:
17651|     10|        ;
17652|     10|        return;
17653|      0|    }
17654|      0|}
17655|       |static void branch(void)
17656|      2|{
17657|       |
17658|      2|    {
17659|      2|        {
17660|      2|            closure();
17661|      2|        }
17662|      2|        {
17663|     10|            while (1) {
17664|     10|while_continue: /* CIL Label */
17665|     10|                ;
17666|       |
17667|     10|                if (tok != 271L) {
17668|     10|                    if (tok != 269L) {
17669|     10|                        if (!(tok >= 0L)) {
17670|      2|                            goto while_break;
17671|      2|                        }
17672|     10|                    }
17673|      0|                    else {
17674|      0|                        goto while_break;
17675|      0|                    }
17676|     10|                }
17677|      0|                else {
17678|      0|                    goto while_break;
17679|      0|                }
17680|      8|                {
17681|      8|                    closure();
17682|      8|                    addtok((token)268);
17683|      8|                }
17684|      8|            }
17685|      0|while_break___0: /* CIL Label */
17686|      0|            ;
17687|      0|        }
17688|      2|while_break:
17689|      2|        ;
17690|      2|        return;
17691|      0|    }
17692|      0|}
17693|       |static void regexp(void)
17694|      2|{
17695|       |
17696|      2|    {
17697|      2|        {
17698|      2|            branch();
17699|      2|        }
17700|      2|        {
17701|      2|            while (1) {
17702|      2|while_continue: /* CIL Label */
17703|      2|                ;
17704|       |
17705|      2|                if (!(tok == 269L)) {
17706|      2|                    goto while_break;
17707|      2|                }
17708|      0|                {
17709|      0|                    tok = lex();
17710|      0|                    branch();
17711|      0|                    addtok((token)269);
17712|      0|                }
17713|      0|            }
17714|      0|while_break___0: /* CIL Label */
17715|      0|            ;
17716|      0|        }
17717|      2|while_break:
17718|      2|        ;
17719|      2|        return;
17720|      0|    }
17721|      0|}
17722|       |void dfaparse(char const *s, size_t len, struct dfa *d)
17723|      2|{
17724|      2|    char *tmp;
17725|      2|    char *tmp___0;
17726|      2|    char *__cil_tmp8;
17727|      2|    char *__cil_tmp9;
17728|       |
17729|      2|    {
17730|      2|        dfa___0 = d;
17731|      2|        lexptr = s;
17732|      2|        lexleft = len;
17733|      2|        lasttok = (token)-1;
17734|      2|        laststart = (_Bool)1;
17735|      2|        parens = (size_t)0;
17736|      2|        if (dfa___0->multibyte) {
17737|      0|            {
17738|      0|                cur_mb_len = 0;
17739|      0|                memset((void *)(&d->mbs), 0, sizeof(d->mbs));
17740|      0|            }
17741|      0|        }
17742|      2|        if (!syntax_bits_set) {
17743|      0|            {
17744|      0|                tmp = gettext("no syntax specified");
17745|      0|                dfaerror((char const *)tmp);
17746|      0|            }
17747|      0|        }
17748|      2|        {
17749|      2|            tok = lex();
17750|      2|            depth = d->depth;
17751|      2|            regexp();
17752|      2|        }
17753|      2|        if (tok != -1L) {
17754|      0|            {
17755|      0|                tmp___0 = gettext("unbalanced )");
17756|      0|                dfaerror((char const *)tmp___0);
17757|      0|            }
17758|      0|        }
17759|      2|        {
17760|      2|            addtok((token)(0xffffffffffffffffUL - d->nregexps));
17761|      2|            addtok((token)268);
17762|      2|        }
17763|      2|        if (d->nregexps) {
17764|      0|            {
17765|      0|                addtok((token)269);
17766|      0|            }
17767|      0|        }
17768|      2|        (d->nregexps)++;
17769|      2|        return;
17770|      2|    }
17771|      2|}
17772|       |static void copy(position_set const *src, position_set *dst)
17773|     36|{
17774|       |
17775|     36|    {
17776|     36|        if (dst->alloc < (size_t)src->nelem) {
17777|      0|            {
17778|      0|                free((void *)dst->elems);
17779|      0|                dst->alloc = (size_t)src->nelem;
17780|      0|                dst->elems = (position *)x2nrealloc((void *)0, &dst->alloc, sizeof(*(dst->elems)));
17781|      0|            }
17782|      0|        }
17783|     36|        {
17784|     36|            memcpy((void * /* __restrict  */)((void *)dst->elems), (void const * /* __restrict  */)((void const *)src->elems),
17785|     36|                   (size_t)(src->nelem * (size_t const)sizeof(*(dst->elems))));
17786|     36|            dst->nelem = (size_t)src->nelem;
17787|     36|        }
17788|     36|        return;
17789|     36|    }
17790|     36|}
17791|       |static void alloc_position_set(position_set *s, size_t size)
17792|     16|{
17793|       |
17794|     16|    {
17795|     16|        {
17796|     16|            s->elems = (position *)xnmalloc(size, sizeof(*(s->elems)));
17797|     16|            s->alloc = size;
17798|     16|            s->nelem = (size_t)0;
17799|     16|        }
17800|     16|        return;
17801|     16|    }
17802|     16|}
17803|       |static void insert(position p, position_set *s)
17804|      2|{
17805|      2|    size_t count;
17806|      2|    size_t lo;
17807|      2|    size_t hi;
17808|      2|    size_t i;
17809|      2|    size_t mid;
17810|       |
17811|      2|    {
17812|      2|        count = s->nelem;
17813|      2|        lo = (size_t)0;
17814|      2|        hi = count;
17815|      2|        {
17816|      2|            while (1) {
17817|      2|while_continue: /* CIL Label */
17818|      2|                ;
17819|       |
17820|      2|                if (!(lo < hi)) {
17821|      2|                    goto while_break;
17822|      2|                }
17823|      0|                mid = (lo + hi) >> 1;
17824|      0|                if ((s->elems + mid)->index > p.index) {
17825|      0|                    lo = mid + 1UL;
17826|      0|                }
17827|      0|                else {
17828|      0|                    hi = mid;
17829|      0|                }
17830|      0|            }
17831|      0|while_break___1: /* CIL Label */
17832|      0|            ;
17833|      0|        }
17834|      2|while_break:
17835|      2|        ;
17836|      2|        if (lo < count) {
17837|      0|            if (p.index == (s->elems + lo)->index) {
17838|      0|                (s->elems + lo)->constraint |= p.constraint;
17839|      0|                return;
17840|      0|            }
17841|      0|        }
17842|      2|        {
17843|      2|            s->elems = (position *)maybe_realloc((void *)s->elems, count, &s->alloc, sizeof(*(s->elems)));
17844|      2|            i = count;
17845|      2|        }
17846|      2|        {
17847|      2|            while (1) {
17848|      2|while_continue___0: /* CIL Label */
17849|      2|                ;
17850|       |
17851|      2|                if (!(i > lo)) {
17852|      2|                    goto while_break___0;
17853|      2|                }
17854|      0|                *(s->elems + i) = *(s->elems + (i - 1UL));
17855|      0|                i--;
17856|      0|            }
17857|      0|while_break___2: /* CIL Label */
17858|      0|            ;
17859|      0|        }
17860|      2|while_break___0:
17861|      2|        *(s->elems + lo) = p;
17862|      2|        (s->nelem)++;
17863|      2|        return;
17864|      0|    }
17865|      0|}
17866|       |static void merge(position_set const *s1, position_set const *s2, position_set *m)
17867|     10|{
17868|     10|    size_t i;
17869|     10|    size_t j;
17870|     10|    size_t tmp;
17871|     10|    size_t tmp___0;
17872|     10|    size_t tmp___1;
17873|     10|    size_t tmp___2;
17874|     10|    size_t tmp___3;
17875|     10|    size_t tmp___4;
17876|     10|    size_t tmp___5;
17877|     10|    size_t tmp___6;
17878|     10|    size_t tmp___7;
17879|     10|    size_t tmp___8;
17880|     10|    size_t tmp___9;
17881|       |
17882|     10|    {
17883|     10|        i = (size_t)0;
17884|     10|        j = (size_t)0;
17885|     10|        if (m->alloc < (size_t)(s1->nelem + s2->nelem)) {
17886|      0|            {
17887|      0|                free((void *)m->elems);
17888|      0|                m->elems = (position *)maybe_realloc((void *)0, (size_t)(s1->nelem + s2->nelem),
17889|      0|                                                     &m->alloc, sizeof(*(m->elems)));
17890|      0|            }
17891|      0|        }
17892|     10|        m->nelem = (size_t)0;
17893|     10|        {
17894|     10|            while (1) {
17895|     10|while_continue: /* CIL Label */
17896|     10|                ;
17897|       |
17898|     10|                if (i < (size_t)s1->nelem) {
17899|     10|                    if (!(j < (size_t)s2->nelem)) {
17900|     10|                        goto while_break;
17901|     10|                    }
17902|     10|                }
17903|      0|                else {
17904|      0|                    goto while_break;
17905|      0|                }
17906|      0|                if ((s1->elems + i)->index > (s2->elems + j)->index) {
17907|      0|                    tmp = m->nelem;
17908|      0|                    (m->nelem)++;
17909|      0|                    tmp___0 = i;
17910|      0|                    i++;
17911|      0|                    *(m->elems + tmp) = *(s1->elems + tmp___0);
17912|      0|                }
17913|      0|                else {
17914|      0|                    if ((s1->elems + i)->index < (s2->elems + j)->index) {
17915|      0|                        tmp___1 = m->nelem;
17916|      0|                        (m->nelem)++;
17917|      0|                        tmp___2 = j;
17918|      0|                        j++;
17919|      0|                        *(m->elems + tmp___1) = *(s2->elems + tmp___2);
17920|      0|                    }
17921|      0|                    else {
17922|      0|                        tmp___3 = i;
17923|      0|                        i++;
17924|      0|                        *(m->elems + m->nelem) = *(s1->elems + tmp___3);
17925|      0|                        tmp___4 = m->nelem;
17926|      0|                        (m->nelem)++;
17927|      0|                        tmp___5 = j;
17928|      0|                        j++;
17929|      0|                        (m->elems + tmp___4)->constraint |= (s2->elems + tmp___5)->constraint;
17930|      0|                    }
17931|      0|                }
17932|      0|            }
17933|      0|while_break___2: /* CIL Label */
17934|      0|            ;
17935|      0|        }
17936|     10|while_break:
17937|     10|        ;
17938|     10|        {
17939|     20|            while (1) {
17940|     20|while_continue___0: /* CIL Label */
17941|     20|                ;
17942|       |
17943|     20|                if (!(i < (size_t)s1->nelem)) {
17944|     10|                    goto while_break___0;
17945|     10|                }
17946|     10|                tmp___6 = m->nelem;
17947|     10|                (m->nelem)++;
17948|     10|                tmp___7 = i;
17949|     10|                i++;
17950|     10|                *(m->elems + tmp___6) = *(s1->elems + tmp___7);
17951|     10|            }
17952|      0|while_break___3: /* CIL Label */
17953|      0|            ;
17954|      0|        }
17955|     10|while_break___0:
17956|     10|        ;
17957|     10|        {
17958|     10|            while (1) {
17959|     10|while_continue___1: /* CIL Label */
17960|     10|                ;
17961|       |
17962|     10|                if (!(j < (size_t)s2->nelem)) {
17963|     10|                    goto while_break___1;
17964|     10|                }
17965|      0|                tmp___8 = m->nelem;
17966|      0|                (m->nelem)++;
17967|      0|                tmp___9 = j;
17968|      0|                j++;
17969|      0|                *(m->elems + tmp___8) = *(s2->elems + tmp___9);
17970|      0|            }
17971|      0|while_break___4: /* CIL Label */
17972|      0|            ;
17973|      0|        }
17974|     10|while_break___1:
17975|     10|        ;
17976|     10|        return;
17977|      0|    }
17978|      0|}
17979|       |static void delete (position p, position_set *s)
17980|      0|{
17981|      0|    size_t i;
17982|       |
17983|      0|    {
17984|      0|        i = (size_t)0;
17985|      0|        {
17986|      0|            while (1) {
17987|      0|while_continue: /* CIL Label */
17988|      0|                ;
17989|       |
17990|      0|                if (!(i < s->nelem)) {
17991|      0|                    goto while_break;
17992|      0|                }
17993|      0|                if (p.index == (s->elems + i)->index) {
17994|      0|                    goto while_break;
17995|      0|                }
17996|      0|                i++;
17997|      0|            }
17998|      0|while_break___1: /* CIL Label */
17999|      0|            ;
18000|      0|        }
18001|      0|while_break:
18002|      0|        ;
18003|      0|        if (i < s->nelem) {
18004|      0|            (s->nelem)--;
18005|      0|            {
18006|      0|                while (1) {
18007|      0|while_continue___0: /* CIL Label */
18008|      0|                    ;
18009|       |
18010|      0|                    if (!(i < s->nelem)) {
18011|      0|                        goto while_break___0;
18012|      0|                    }
18013|      0|                    *(s->elems + i) = *(s->elems + (i + 1UL));
18014|      0|                    i++;
18015|      0|                }
18016|      0|while_break___2: /* CIL Label */
18017|      0|                ;
18018|      0|            }
18019|      0|while_break___0:
18020|      0|            ;
18021|      0|        }
18022|      0|        return;
18023|      0|    }
18024|      0|}
18025|       |static state_num state_index(struct dfa *d, position_set const *s, int context)
18026|      2|{
18027|      2|    size_t hash;
18028|      2|    int constraint;
18029|      2|    state_num i;
18030|      2|    state_num j;
18031|       |
18032|      2|    {
18033|      2|        hash = (size_t)0;
18034|      2|        i = (state_num)0;
18035|      2|        {
18036|      4|            while (1) {
18037|      4|while_continue: /* CIL Label */
18038|      4|                ;
18039|       |
18040|      4|                if (!((size_t const)i < s->nelem)) {
18041|      2|                    goto while_break;
18042|      2|                }
18043|      2|                hash ^= (s->elems + i)->index + (size_t)(s->elems + i)->constraint;
18044|      2|                i++;
18045|      2|            }
18046|      0|while_break___3: /* CIL Label */
18047|      0|            ;
18048|      0|        }
18049|      2|while_break:
18050|      2|        i = (state_num)0;
18051|      2|        {
18052|      2|            while (1) {
18053|      2|while_continue___0: /* CIL Label */
18054|      2|                ;
18055|       |
18056|      2|                if (!(i < d->sindex)) {
18057|      2|                    goto while_break___0;
18058|      2|                }
18059|      0|                if (hash != (d->states + i)->hash) {
18060|      0|                    goto __Cont;
18061|      0|                }
18062|      0|                else {
18063|      0|                    if (s->nelem != (size_t const)(d->states + i)->elems.nelem) {
18064|      0|                        goto __Cont;
18065|      0|                    }
18066|      0|                    else {
18067|      0|                        if (context != (int)(d->states + i)->context) {
18068|      0|                            goto __Cont;
18069|      0|                        }
18070|      0|                    }
18071|      0|                }
18072|      0|                j = (state_num)0;
18073|      0|                {
18074|      0|                    while (1) {
18075|      0|while_continue___1: /* CIL Label */
18076|      0|                        ;
18077|       |
18078|      0|                        if (!((size_t const)j < s->nelem)) {
18079|      0|                            goto while_break___1;
18080|      0|                        }
18081|      0|                        if ((s->elems + j)->constraint != ((d->states + i)->elems.elems + j)->constraint) {
18082|      0|                            goto while_break___1;
18083|      0|                        }
18084|      0|                        else {
18085|      0|                            if ((s->elems + j)->index != ((d->states + i)->elems.elems + j)->index) {
18086|      0|                                goto while_break___1;
18087|      0|                            }
18088|      0|                        }
18089|      0|                        j++;
18090|      0|                    }
18091|      0|while_break___5: /* CIL Label */
18092|      0|                    ;
18093|      0|                }
18094|      0|while_break___1:
18095|      0|                ;
18096|      0|                if ((size_t const)j == s->nelem) {
18097|      0|                    return (i);
18098|      0|                }
18099|      0|__Cont:
18100|      0|                i++;
18101|      0|            }
18102|      0|while_break___4: /* CIL Label */
18103|      0|            ;
18104|      0|        }
18105|      2|while_break___0 : {
18106|      2|            d->states = (dfa_state *)maybe_realloc((void *)d->states, (size_t)d->sindex, &d->salloc,
18107|      2|                                                   sizeof(*(d->states)));
18108|      2|            (d->states + i)->hash = hash;
18109|      2|            alloc_position_set(&(d->states + i)->elems, (size_t)s->nelem);
18110|      2|            copy(s, &(d->states + i)->elems);
18111|      2|            (d->states + i)->context = (unsigned char)context;
18112|      2|            (d->states + i)->has_backref = (_Bool)0;
18113|      2|            (d->states + i)->has_mbcset = (_Bool)0;
18114|      2|            (d->states + i)->constraint = (unsigned short)0;
18115|      2|            (d->states + i)->first_end = (token)0;
18116|      2|            (d->states + i)->mbps.nelem = (size_t)0;
18117|      2|            (d->states + i)->mbps.elems = (position *)((void *)0);
18118|      2|            j = (state_num)0;
18119|      2|        }
18120|      2|        {
18121|      4|            while (1) {
18122|      4|while_continue___2: /* CIL Label */
18123|      4|                ;
18124|       |
18125|      4|                if (!((size_t const)j < s->nelem)) {
18126|      2|                    goto while_break___2;
18127|      2|                }
18128|      2|                if (*(d->tokens + (s->elems + j)->index) < 0L) {
18129|      0|                    constraint = (int)(s->elems + j)->constraint;
18130|      0|                    if ((((constraint & 15) | ((constraint >> 4) & 15)) | ((constraint >> 8) & 15)) & context) {
18131|      0|                        (d->states + i)->constraint = (unsigned short)((int)(d->states + i)->constraint | constraint);
18132|      0|                    }
18133|      0|                    if (!(d->states + i)->first_end) {
18134|      0|                        (d->states + i)->first_end = *(d->tokens + (s->elems + j)->index);
18135|      0|                    }
18136|      0|                }
18137|      2|                else {
18138|      2|                    if (*(d->tokens + (s->elems + j)->index) == 257L) {
18139|      0|                        (d->states + i)->constraint = (unsigned short)1911;
18140|      0|                        (d->states + i)->has_backref = (_Bool)1;
18141|      0|                    }
18142|      2|                }
18143|      2|                j++;
18144|      2|            }
18145|      0|while_break___6: /* CIL Label */
18146|      0|            ;
18147|      0|        }
18148|      2|while_break___2:
18149|      2|        (d->sindex)++;
18150|      2|        return (i);
18151|      0|    }
18152|      0|}
18153|       |static void epsclosure(position_set *s, struct dfa const *d, char *visited)
18154|     14|{
18155|     14|    size_t i;
18156|     14|    size_t j;
18157|     14|    position p;
18158|     14|    position old;
18159|     14|    _Bool initialized;
18160|       |
18161|     14|    {
18162|     14|        initialized = (_Bool)0;
18163|     14|        i = (size_t)0;
18164|     14|        {
18165|     26|            while (1) {
18166|     26|while_continue: /* CIL Label */
18167|     26|                ;
18168|       |
18169|     26|                if (!(i < s->nelem)) {
18170|     14|                    goto while_break;
18171|     14|                }
18172|     12|                if (*(d->tokens + (s->elems + i)->index) >= 256L) {
18173|      0|                    if (*(d->tokens + (s->elems + i)->index) != 257L) {
18174|      0|                        if (*(d->tokens + (s->elems + i)->index) != 272L) {
18175|      0|                            if (*(d->tokens + (s->elems + i)->index) != 273L) {
18176|      0|                                if (*(d->tokens + (s->elems + i)->index) < 275L) {
18177|      0|                                    if (!initialized) {
18178|      0|                                        {
18179|      0|                                            memset((void *)visited, 0, (size_t)(d->tindex * (size_t const)sizeof(*visited)));
18180|      0|                                            initialized = (_Bool)1;
18181|      0|                                        }
18182|      0|                                    }
18183|      0|                                    {
18184|      0|                                        old = *(s->elems + i);
18185|      0|                                        p.constraint = old.constraint;
18186|      0|                                        delete (*(s->elems + i), s);
18187|      0|                                    }
18188|      0|                                    if (*(visited + old.index)) {
18189|      0|                                        i--;
18190|      0|                                        goto __Cont;
18191|      0|                                    }
18192|      0|                                    *(visited + old.index) = (char)1;
18193|      0|                                    if (*(d->tokens + old.index) == 258L) {
18194|      0|                                        goto case_258;
18195|      0|                                    }
18196|      0|                                    if (*(d->tokens + old.index) == 259L) {
18197|      0|                                        goto case_259;
18198|      0|                                    }
18199|      0|                                    if (*(d->tokens + old.index) == 260L) {
18200|      0|                                        goto case_260;
18201|      0|                                    }
18202|      0|                                    if (*(d->tokens + old.index) == 261L) {
18203|      0|                                        goto case_261;
18204|      0|                                    }
18205|      0|                                    if (*(d->tokens + old.index) == 262L) {
18206|      0|                                        goto case_262;
18207|      0|                                    }
18208|      0|                                    if (*(d->tokens + old.index) == 263L) {
18209|      0|                                        goto case_263;
18210|      0|                                    }
18211|      0|                                    goto switch_default;
18212|      0|case_258:
18213|      0|                                    p.constraint &= 1092U;
18214|      0|                                    goto switch_break;
18215|      0|case_259:
18216|      0|                                    p.constraint &= 1792U;
18217|      0|                                    goto switch_break;
18218|      0|case_260:
18219|      0|                                    p.constraint &= 80U;
18220|      0|                                    goto switch_break;
18221|      0|case_261:
18222|      0|                                    p.constraint &= 514U;
18223|      0|                                    goto switch_break;
18224|      0|case_262:
18225|      0|                                    p.constraint &= 594U;
18226|      0|                                    goto switch_break;
18227|      0|case_263:
18228|      0|                                    p.constraint &= 1317U;
18229|      0|                                    goto switch_break;
18230|      0|switch_default:
18231|      0|                                    goto switch_break;
18232|      0|switch_break:
18233|      0|                                    j = (size_t)0;
18234|      0|                                    {
18235|      0|                                        while (1) {
18236|      0|while_continue___0: /* CIL Label */
18237|      0|                                            ;
18238|       |
18239|      0|                                            if (!(j < (d->follows + old.index)->nelem)) {
18240|      0|                                                goto while_break___0;
18241|      0|                                            }
18242|      0|                                            {
18243|      0|                                                p.index = ((d->follows + old.index)->elems + j)->index;
18244|      0|                                                insert(p, s);
18245|      0|                                                j++;
18246|      0|                                            }
18247|      0|                                        }
18248|      0|while_break___2: /* CIL Label */
18249|      0|                                        ;
18250|      0|                                    }
18251|      0|while_break___0:
18252|      0|                                    i = (size_t)-1;
18253|      0|                                }
18254|      0|                            }
18255|      0|                        }
18256|      0|                    }
18257|      0|                }
18258|     12|__Cont:
18259|     12|                i++;
18260|     12|            }
18261|      0|while_break___1: /* CIL Label */
18262|      0|            ;
18263|      0|        }
18264|     14|while_break:
18265|     14|        ;
18266|     14|        return;
18267|      0|    }
18268|      0|}
18269|       |static int charclass_context(charclass_word *c)
18270|      0|{
18271|      0|    int context;
18272|      0|    unsigned int j;
18273|      0|    _Bool tmp;
18274|       |
18275|      0|    {
18276|      0|        {
18277|      0|            context = 0;
18278|      0|            tmp = tstbit((unsigned int)eolbyte___0, (charclass_word * /* const  */) c);
18279|      0|        }
18280|      0|        if (tmp) {
18281|      0|            context |= 4;
18282|      0|        }
18283|      0|        j = 0U;
18284|      0|        {
18285|      0|            while (1) {
18286|      0|while_continue: /* CIL Label */
18287|      0|                ;
18288|       |
18289|      0|                if (!(j < 8U)) {
18290|      0|                    goto while_break;
18291|      0|                }
18292|      0|                if (*(c + j) & letters[j]) {
18293|      0|                    context |= 2;
18294|      0|                }
18295|      0|                if (*(c + j) & ~(letters[j] | newline[j])) {
18296|      0|                    context |= 1;
18297|      0|                }
18298|      0|                j++;
18299|      0|            }
18300|      0|while_break___0: /* CIL Label */
18301|      0|            ;
18302|      0|        }
18303|      0|while_break:
18304|      0|        ;
18305|      0|        return (context);
18306|      0|    }
18307|      0|}
18308|       |static int __attribute__((__pure__)) state_separate_contexts(position_set const *s)
18309|      2|{
18310|      2|    int separate_contexts;
18311|      2|    size_t j;
18312|       |
18313|      2|    {
18314|      2|        separate_contexts = 0;
18315|      2|        j = (size_t)0;
18316|      2|        {
18317|      4|            while (1) {
18318|      4|while_continue: /* CIL Label */
18319|      4|                ;
18320|       |
18321|      4|                if (!(j < (size_t)s->nelem)) {
18322|      2|                    goto while_break;
18323|      2|                }
18324|      2|                if ((((s->elems + j)->constraint >> 2) & 273U) != ((s->elems + j)->constraint & 273U)) {
18325|      0|                    separate_contexts |= 4;
18326|      0|                }
18327|      2|                if ((((s->elems + j)->constraint >> 1) & 273U) != ((s->elems + j)->constraint & 273U)) {
18328|      0|                    separate_contexts |= 2;
18329|      0|                }
18330|      2|                j++;
18331|      2|            }
18332|      0|while_break___0: /* CIL Label */
18333|      0|            ;
18334|      0|        }
18335|      2|while_break:
18336|      2|        ;
18337|      2|        return ((int __attribute__((__pure__)))separate_contexts);
18338|      0|    }
18339|      0|}
18340|       |void dfaanalyze(struct dfa *d, int searchflag)
18341|      2|{
18342|      2|    position *posalloc;
18343|      2|    position *tmp;
18344|      2|    position *firstpos;
18345|      2|    position *lastpos;
18346|      2|    struct __anonstruct_stkalloc_43 *stkalloc;
18347|      2|    struct __anonstruct_stkalloc_43 *tmp___0;
18348|      2|    struct __anonstruct_stkalloc_43 *stk;
18349|      2|    position_set tmp___1;
18350|      2|    position_set merged;
18351|      2|    int separate_contexts;
18352|      2|    size_t i;
18353|      2|    size_t j;
18354|      2|    position *pos;
18355|      2|    char *visited;
18356|      2|    char *tmp___2;
18357|      2|    size_t tmp___3;
18358|      2|    size_t tmp___4;
18359|      2|    size_t tmp___5;
18360|      2|    size_t tmp___6;
18361|      2|    unsigned int tmp___7;
18362|      2|    int tmp___8;
18363|       |
18364|      2|    {
18365|      2|        {
18366|      2|            tmp = (position *)xnmalloc(d->nleaves, 2UL * sizeof(*posalloc));
18367|      2|            posalloc = tmp;
18368|      2|            firstpos = posalloc + d->nleaves;
18369|      2|            lastpos = firstpos + d->nleaves;
18370|      2|            tmp___0 = (struct __anonstruct_stkalloc_43 *)xnmalloc(d->depth, sizeof(*stkalloc));
18371|      2|            stkalloc = tmp___0;
18372|      2|            stk = stkalloc;
18373|      2|            tmp___2 = (char *)xnmalloc(d->tindex, sizeof(*visited));
18374|      2|            visited = tmp___2;
18375|      2|            d->searchflag = (_Bool)(searchflag != 0);
18376|      2|            alloc_position_set(&merged, d->nleaves);
18377|      2|            d->follows = (position_set *)xcalloc(d->tindex, sizeof(*(d->follows)));
18378|      2|            i = (size_t)0;
18379|      2|        }
18380|      2|        {
18381|     24|            while (1) {
18382|     24|while_continue: /* CIL Label */
18383|     24|                ;
18384|       |
18385|     24|                if (!(i < d->tindex)) {
18386|      2|                    goto while_break;
18387|      2|                }
18388|     22|                if (*(d->tokens + i) == 256L) {
18389|      0|                    goto case_256;
18390|      0|                }
18391|     22|                if (*(d->tokens + i) == 265L) {
18392|      0|                    goto case_265;
18393|      0|                }
18394|     22|                if (*(d->tokens + i) == 266L) {
18395|      0|                    goto case_265;
18396|      0|                }
18397|     22|                if (*(d->tokens + i) == 264L) {
18398|      0|                    goto case_264;
18399|      0|                }
18400|     22|                if (*(d->tokens + i) == 268L) {
18401|     10|                    goto case_268;
18402|     10|                }
18403|     12|                if (*(d->tokens + i) == 269L) {
18404|      0|                    goto case_269;
18405|      0|                }
18406|     12|                goto switch_default;
18407|     12|case_256:
18408|      0|                stk->nullable = (_Bool)1;
18409|      0|                tmp___3 = (size_t)0;
18410|      0|                stk->nlastpos = tmp___3;
18411|      0|                stk->nfirstpos = tmp___3;
18412|      0|                stk++;
18413|      0|                goto switch_break;
18414|      0|case_265:
18415|      0|                tmp___1.nelem = (stk + -1)->nfirstpos;
18416|      0|                tmp___1.elems = firstpos;
18417|      0|                pos = lastpos;
18418|      0|                j = (size_t)0;
18419|      0|                {
18420|      0|                    while (1) {
18421|      0|while_continue___0: /* CIL Label */
18422|      0|                        ;
18423|       |
18424|      0|                        if (!(j < (stk + -1)->nlastpos)) {
18425|      0|                            goto while_break___0;
18426|      0|                        }
18427|      0|                        {
18428|      0|                            merge((position_set const *)(&tmp___1), (position_set const *)(d->follows + (pos + j)->index),
18429|      0|                                  &merged);
18430|      0|                            copy((position_set const *)(&merged), d->follows + (pos + j)->index);
18431|      0|                            j++;
18432|      0|                        }
18433|      0|                    }
18434|      0|while_break___6: /* CIL Label */
18435|      0|                    ;
18436|      0|                }
18437|      0|while_break___0:
18438|      0|                ;
18439|      0|case_264:
18440|      0|                if (*(d->tokens + i) != 266L) {
18441|      0|                    (stk + -1)->nullable = (_Bool)1;
18442|      0|                }
18443|      0|                goto switch_break;
18444|     10|case_268:
18445|     10|                tmp___1.nelem = (stk + -1)->nfirstpos;
18446|     10|                tmp___1.elems = firstpos;
18447|     10|                pos = lastpos + (stk + -1)->nlastpos;
18448|     10|                j = (size_t)0;
18449|     10|                {
18450|     20|                    while (1) {
18451|     20|while_continue___1: /* CIL Label */
18452|     20|                        ;
18453|       |
18454|     20|                        if (!(j < (stk + -2)->nlastpos)) {
18455|     10|                            goto while_break___1;
18456|     10|                        }
18457|     10|                        {
18458|     10|                            merge((position_set const *)(&tmp___1), (position_set const *)(d->follows + (pos + j)->index),
18459|     10|                                  &merged);
18460|     10|                            copy((position_set const *)(&merged), d->follows + (pos + j)->index);
18461|     10|                            j++;
18462|     10|                        }
18463|     10|                    }
18464|      0|while_break___7: /* CIL Label */
18465|      0|                    ;
18466|      0|                }
18467|     10|while_break___1:
18468|     10|                ;
18469|     10|                if ((stk + -2)->nullable) {
18470|      0|                    (stk + -2)->nfirstpos += (stk + -1)->nfirstpos;
18471|      0|                }
18472|     10|                else {
18473|     10|                    firstpos += (stk + -1)->nfirstpos;
18474|     10|                }
18475|     10|                if ((stk + -1)->nullable) {
18476|      0|                    (stk + -2)->nlastpos += (stk + -1)->nlastpos;
18477|      0|                }
18478|     10|                else {
18479|     10|                    pos = lastpos + (stk + -2)->nlastpos;
18480|     10|                    j = (stk + -1)->nlastpos;
18481|     10|                    {
18482|     20|                        while (1) {
18483|     20|while_continue___2: /* CIL Label */
18484|     20|                            ;
18485|     20|                            tmp___4 = j;
18486|     20|                            j--;
18487|     20|                            if (!(tmp___4 > 0UL)) {
18488|     10|                                goto while_break___2;
18489|     10|                            }
18490|     10|                            *(pos + j) = *(lastpos + j);
18491|     10|                        }
18492|      0|while_break___8: /* CIL Label */
18493|      0|                        ;
18494|      0|                    }
18495|     10|while_break___2:
18496|     10|                    lastpos += (stk + -2)->nlastpos;
18497|     10|                    (stk + -2)->nlastpos = (stk + -1)->nlastpos;
18498|     10|                }
18499|     10|                (stk + -2)->nullable = (_Bool)((int)(stk + -2)->nullable & (int)(stk + -1)->nullable);
18500|     10|                stk--;
18501|     10|                goto switch_break;
18502|      0|case_269:
18503|      0|                (stk + -2)->nfirstpos += (stk + -1)->nfirstpos;
18504|      0|                (stk + -2)->nlastpos += (stk + -1)->nlastpos;
18505|      0|                (stk + -2)->nullable = (_Bool)((int)(stk + -2)->nullable | (int)(stk + -1)->nullable);
18506|      0|                stk--;
18507|      0|                goto switch_break;
18508|     12|switch_default : {
18509|     12|                    stk->nullable = (_Bool)(*(d->tokens + i) == 257L);
18510|     12|                    tmp___5 = (size_t)1;
18511|     12|                    stk->nlastpos = tmp___5;
18512|     12|                    stk->nfirstpos = tmp___5;
18513|     12|                    stk++;
18514|     12|                    firstpos--;
18515|     12|                    lastpos--;
18516|     12|                    tmp___6 = i;
18517|     12|                    lastpos->index = tmp___6;
18518|     12|                    firstpos->index = tmp___6;
18519|     12|                    tmp___7 = 1911U;
18520|     12|                    lastpos->constraint = tmp___7;
18521|     12|                    firstpos->constraint = tmp___7;
18522|     12|                    alloc_position_set(d->follows + i, (size_t)1);
18523|     12|                }
18524|     12|                goto switch_break;
18525|     22|switch_break:
18526|     22|                i++;
18527|     22|            }
18528|      0|while_break___5: /* CIL Label */
18529|      0|            ;
18530|      0|        }
18531|      2|while_break:
18532|      2|        i = (size_t)0;
18533|      2|        {
18534|     24|            while (1) {
18535|     24|while_continue___3: /* CIL Label */
18536|     24|                ;
18537|       |
18538|     24|                if (!(i < d->tindex)) {
18539|      2|                    goto while_break___3;
18540|      2|                }
18541|     22|                if (*(d->tokens + i) < 256L) {
18542|     12|                    {
18543|     12|                        copy((position_set const *)(d->follows + i), &merged);
18544|     12|                        epsclosure(&merged, (struct dfa const *)d, visited);
18545|     12|                        copy((position_set const *)(&merged), d->follows + i);
18546|     12|                    }
18547|     12|                }
18548|     10|                else {
18549|     10|                    if (*(d->tokens + i) == 257L) {
18550|      0|                        {
18551|      0|                            copy((position_set const *)(d->follows + i), &merged);
18552|      0|                            epsclosure(&merged, (struct dfa const *)d, visited);
18553|      0|                            copy((position_set const *)(&merged), d->follows + i);
18554|      0|                        }
18555|      0|                    }
18556|     10|                    else {
18557|     10|                        if (*(d->tokens + i) == 272L) {
18558|      0|                            {
18559|      0|                                copy((position_set const *)(d->follows + i), &merged);
18560|      0|                                epsclosure(&merged, (struct dfa const *)d, visited);
18561|      0|                                copy((position_set const *)(&merged), d->follows + i);
18562|      0|                            }
18563|      0|                        }
18564|     10|                        else {
18565|     10|                            if (*(d->tokens + i) == 273L) {
18566|      0|                                {
18567|      0|                                    copy((position_set const *)(d->follows + i), &merged);
18568|      0|                                    epsclosure(&merged, (struct dfa const *)d, visited);
18569|      0|                                    copy((position_set const *)(&merged), d->follows + i);
18570|      0|                                }
18571|      0|                            }
18572|     10|                            else {
18573|     10|                                if (*(d->tokens + i) >= 275L) {
18574|      0|                                    {
18575|      0|                                        copy((position_set const *)(d->follows + i), &merged);
18576|      0|                                        epsclosure(&merged, (struct dfa const *)d, visited);
18577|      0|                                        copy((position_set const *)(&merged), d->follows + i);
18578|      0|                                    }
18579|      0|                                }
18580|     10|                            }
18581|     10|                        }
18582|     10|                    }
18583|     10|                }
18584|     22|                i++;
18585|     22|            }
18586|      0|while_break___9: /* CIL Label */
18587|      0|            ;
18588|      0|        }
18589|      2|while_break___3:
18590|      2|        merged.nelem = (size_t)0;
18591|      2|        i = (size_t)0;
18592|      2|        {
18593|      4|            while (1) {
18594|      4|while_continue___4: /* CIL Label */
18595|      4|                ;
18596|       |
18597|      4|                if (!(i < (stk + -1)->nfirstpos)) {
18598|      2|                    goto while_break___4;
18599|      2|                }
18600|      2|                {
18601|      2|                    insert(*(firstpos + i), &merged);
18602|      2|                    i++;
18603|      2|                }
18604|      2|            }
18605|      0|while_break___10: /* CIL Label */
18606|      0|            ;
18607|      0|        }
18608|      2|while_break___4 : {
18609|      2|            epsclosure(&merged, (struct dfa const *)d, visited);
18610|      2|            separate_contexts = (int)state_separate_contexts((position_set const *)(&merged));
18611|      2|        }
18612|      2|        if (separate_contexts & 4) {
18613|      0|            tmp___8 = 4;
18614|      0|        }
18615|      2|        else {
18616|      2|            tmp___8 = separate_contexts ^ 7;
18617|      2|        }
18618|      2|        {
18619|      2|            state_index(d, (position_set const *)(&merged), tmp___8);
18620|      2|            free((void *)posalloc);
18621|      2|            free((void *)stkalloc);
18622|      2|            free((void *)merged.elems);
18623|      2|            free((void *)visited);
18624|      2|        }
18625|      2|        return;
18626|      0|    }
18627|      0|}
18628|       |void dfastate(ptrdiff_t s, struct dfa *d, ptrdiff_t *trans___0)
18629|      0|{
18630|      0|    leaf_set grps[256];
18631|      0|    charclass labels[256];
18632|      0|    size_t ngrps;
18633|      0|    position pos;
18634|      0|    charclass matches;
18635|      0|    charclass_word matchesf;
18636|      0|    charclass intersect;
18637|      0|    charclass_word intersectf;
18638|      0|    charclass leftovers;
18639|      0|    charclass_word leftoversf;
18640|      0|    position_set follows;
18641|      0|    position_set tmp;
18642|      0|    int possible_contexts;
18643|      0|    int separate_contexts;
18644|      0|    state_num state;
18645|      0|    state_num state_newline;
18646|      0|    state_num state_letter;
18647|      0|    _Bool next_isnt_1st_byte;
18648|      0|    size_t i;
18649|      0|    size_t j;
18650|      0|    size_t k;
18651|      0|    _Bool tmp___0;
18652|      0|    charclass_word tmp___1;
18653|      0|    charclass_word match;
18654|      0|    charclass_word label___0;
18655|      0|    charclass_word tmp___2;
18656|      0|    charclass_word tmp___3;
18657|      0|    size_t tmp___4;
18658|      0|    unsigned short const **tmp___6;
18659|      0|    int c;
18660|      0|    unsigned short const **tmp___7;
18661|      0|    void *__cil_tmp47;
18662|      0|    int __cil_tmp48;
18663|      0|    void *__cil_tmp49;
18664|      0|    int __cil_tmp50;
18665|      0|    void *__cil_tmp51;
18666|      0|    void *__cil_tmp52;
18667|      0|    void *__cil_tmp53;
18668|      0|    void *__cil_tmp54;
18669|       |
18670|      0|    {
18671|      0|        {
18672|      0|            ngrps = (size_t)0;
18673|      0|            next_isnt_1st_byte = (_Bool)0;
18674|      0|            zeroset(matches);
18675|      0|            i = (size_t)0;
18676|      0|        }
18677|      0|        {
18678|      0|            while (1) {
18679|      0|while_continue: /* CIL Label */
18680|      0|                ;
18681|       |
18682|      0|                if (!(i < (d->states + s)->elems.nelem)) {
18683|      0|                    goto while_break;
18684|      0|                }
18685|      0|                pos = *((d->states + s)->elems.elems + i);
18686|      0|                if (*(d->tokens + pos.index) >= 0L) {
18687|      0|                    if (*(d->tokens + pos.index) < 256L) {
18688|      0|                        {
18689|      0|                            setbit((unsigned int)*(d->tokens + pos.index), matches);
18690|      0|                        }
18691|      0|                    }
18692|      0|                    else {
18693|      0|                        goto _L___0;
18694|      0|                    }
18695|      0|                }
18696|      0|                else {
18697|      0|_L___0:
18698|      0|                    if (*(d->tokens + pos.index) >= 275L) {
18699|      0|                        {
18700|      0|                            copyset((charclass_word * /* const  */)(*(d->charclasses + (*(d->tokens + pos.index) - 275L))),
18701|      0|                                    matches);
18702|      0|                        }
18703|      0|                    }
18704|      0|                    else {
18705|      0|                        if (*(d->tokens + pos.index) == 273L) {
18706|      0|                            goto _L;
18707|      0|                        }
18708|      0|                        else {
18709|      0|                            if (*(d->tokens + pos.index) == 272L) {
18710|      0|_L:
18711|      0|                                if (*(d->tokens + pos.index) == 273L) {
18712|      0|                                    (d->states + s)->has_mbcset = (_Bool)1;
18713|      0|                                }
18714|      0|                                if ((d->states + s)->mbps.nelem == 0UL) {
18715|      0|                                    {
18716|      0|                                        alloc_position_set(&(d->states + s)->mbps, (size_t)1);
18717|      0|                                    }
18718|      0|                                }
18719|      0|                                {
18720|      0|                                    insert(pos, &(d->states + s)->mbps);
18721|      0|                                }
18722|      0|                            }
18723|      0|                        }
18724|      0|                        goto __Cont;
18725|      0|                    }
18726|      0|                }
18727|      0|                if (pos.constraint != 1911U) {
18728|      0|                    if (!(((pos.constraint >> 8) & 15U) & (unsigned int)(d->states + s)->context)) {
18729|      0|                        j = (size_t)0;
18730|      0|                        {
18731|      0|                            while (1) {
18732|      0|while_continue___0: /* CIL Label */
18733|      0|                                ;
18734|       |
18735|      0|                                if (!(j < 8UL)) {
18736|      0|                                    goto while_break___0;
18737|      0|                                }
18738|      0|                                matches[j] &= ~newline[j];
18739|      0|                                j++;
18740|      0|                            }
18741|      0|while_break___17: /* CIL Label */
18742|      0|                            ;
18743|      0|                        }
18744|      0|while_break___0:
18745|      0|                        ;
18746|      0|                    }
18747|      0|                    if (!(((pos.constraint >> 4) & 15U) & (unsigned int)(d->states + s)->context)) {
18748|      0|                        j = (size_t)0;
18749|      0|                        {
18750|      0|                            while (1) {
18751|      0|while_continue___1: /* CIL Label */
18752|      0|                                ;
18753|       |
18754|      0|                                if (!(j < 8UL)) {
18755|      0|                                    goto while_break___1;
18756|      0|                                }
18757|      0|                                matches[j] &= ~letters[j];
18758|      0|                                j++;
18759|      0|                            }
18760|      0|while_break___18: /* CIL Label */
18761|      0|                            ;
18762|      0|                        }
18763|      0|while_break___1:
18764|      0|                        ;
18765|      0|                    }
18766|      0|                    if (!((pos.constraint & 15U) & (unsigned int)(d->states + s)->context)) {
18767|      0|                        j = (size_t)0;
18768|      0|                        {
18769|      0|                            while (1) {
18770|      0|while_continue___2: /* CIL Label */
18771|      0|                                ;
18772|       |
18773|      0|                                if (!(j < 8UL)) {
18774|      0|                                    goto while_break___2;
18775|      0|                                }
18776|      0|                                matches[j] &= letters[j] | newline[j];
18777|      0|                                j++;
18778|      0|                            }
18779|      0|while_break___19: /* CIL Label */
18780|      0|                            ;
18781|      0|                        }
18782|      0|while_break___2:
18783|      0|                        ;
18784|      0|                    }
18785|      0|                    j = (size_t)0;
18786|      0|                    {
18787|      0|                        while (1) {
18788|      0|while_continue___3: /* CIL Label */
18789|      0|                            ;
18790|       |
18791|      0|                            if (j < 8UL) {
18792|      0|                                if (!(!matches[j])) {
18793|      0|                                    goto while_break___3;
18794|      0|                                }
18795|      0|                            }
18796|      0|                            else {
18797|      0|                                goto while_break___3;
18798|      0|                            }
18799|      0|                            goto __Cont___0;
18800|      0|__Cont___0:
18801|      0|                            j++;
18802|      0|                        }
18803|      0|while_break___20: /* CIL Label */
18804|      0|                        ;
18805|      0|                    }
18806|      0|while_break___3:
18807|      0|                    ;
18808|      0|                    if (j == 8UL) {
18809|      0|                        goto __Cont;
18810|      0|                    }
18811|      0|                }
18812|      0|                j = (size_t)0;
18813|      0|                {
18814|      0|                    while (1) {
18815|      0|while_continue___4: /* CIL Label */
18816|      0|                        ;
18817|       |
18818|      0|                        if (!(j < ngrps)) {
18819|      0|                            goto while_break___4;
18820|      0|                        }
18821|      0|                        if (*(d->tokens + pos.index) >= 0L) {
18822|      0|                            if (*(d->tokens + pos.index) < 256L) {
18823|      0|                                {
18824|      0|                                    tmp___0 = tstbit((unsigned int)*(d->tokens + pos.index), (charclass_word * /* const  */)(labels[j]));
18825|      0|                                }
18826|      0|                                if (!tmp___0) {
18827|      0|                                    goto __Cont___1;
18828|      0|                                }
18829|      0|                            }
18830|      0|                        }
18831|      0|                        intersectf = (charclass_word)0;
18832|      0|                        k = (size_t)0;
18833|      0|                        {
18834|      0|                            while (1) {
18835|      0|while_continue___5: /* CIL Label */
18836|      0|                                ;
18837|       |
18838|      0|                                if (!(k < 8UL)) {
18839|      0|                                    goto while_break___5;
18840|      0|                                }
18841|      0|                                tmp___1 = matches[k] & labels[j][k];
18842|      0|                                intersect[k] = tmp___1;
18843|      0|                                intersectf |= tmp___1;
18844|      0|                                k++;
18845|      0|                            }
18846|      0|while_break___22: /* CIL Label */
18847|      0|                            ;
18848|      0|                        }
18849|      0|while_break___5:
18850|      0|                        ;
18851|      0|                        if (!intersectf) {
18852|      0|                            goto __Cont___1;
18853|      0|                        }
18854|      0|                        matchesf = (charclass_word)0;
18855|      0|                        leftoversf = matchesf;
18856|      0|                        k = (size_t)0;
18857|      0|                        {
18858|      0|                            while (1) {
18859|      0|while_continue___6: /* CIL Label */
18860|      0|                                ;
18861|       |
18862|      0|                                if (!(k < 8UL)) {
18863|      0|                                    goto while_break___6;
18864|      0|                                }
18865|      0|                                match = matches[k];
18866|      0|                                label___0 = labels[j][k];
18867|      0|                                tmp___2 = ~match & label___0;
18868|      0|                                leftovers[k] = tmp___2;
18869|      0|                                leftoversf |= tmp___2;
18870|      0|                                tmp___3 = match & ~label___0;
18871|      0|                                matches[k] = tmp___3;
18872|      0|                                matchesf |= tmp___3;
18873|      0|                                k++;
18874|      0|                            }
18875|      0|while_break___23: /* CIL Label */
18876|      0|                            ;
18877|      0|                        }
18878|      0|while_break___6:
18879|      0|                        ;
18880|      0|                        if (leftoversf) {
18881|      0|                            {
18882|      0|                                copyset((charclass_word * /* const  */)(leftovers), labels[ngrps]);
18883|      0|                                copyset((charclass_word * /* const  */)(intersect), labels[j]);
18884|      0|                                grps[ngrps].elems = (size_t *)xnmalloc(d->nleaves, sizeof(*(grps[ngrps].elems)));
18885|      0|                                memcpy((void * /* __restrict  */)((void *)grps[ngrps].elems), (void const * /* __restrict  */)((void const *)grps[j].elems),
18886|      0|                                       sizeof(*(grps[j].elems + 0)) * grps[j].nelem);
18887|      0|                                grps[ngrps].nelem = grps[j].nelem;
18888|      0|                                ngrps++;
18889|      0|                            }
18890|      0|                        }
18891|      0|                        tmp___4 = grps[j].nelem;
18892|      0|                        (grps[j].nelem)++;
18893|      0|                        *(grps[j].elems + tmp___4) = pos.index;
18894|      0|                        if (!matchesf) {
18895|      0|                            goto while_break___4;
18896|      0|                        }
18897|      0|__Cont___1:
18898|      0|                        j++;
18899|      0|                    }
18900|      0|while_break___21: /* CIL Label */
18901|      0|                    ;
18902|      0|                }
18903|      0|while_break___4:
18904|      0|                ;
18905|      0|                if (j == ngrps) {
18906|      0|                    {
18907|      0|                        copyset((charclass_word * /* const  */)(matches), labels[ngrps]);
18908|      0|                        zeroset(matches);
18909|      0|                        grps[ngrps].elems = (size_t *)xnmalloc(d->nleaves, sizeof(*(grps[ngrps].elems)));
18910|      0|                        grps[ngrps].nelem = (size_t)1;
18911|      0|                        *(grps[ngrps].elems + 0) = pos.index;
18912|      0|                        ngrps++;
18913|      0|                    }
18914|      0|                }
18915|      0|__Cont:
18916|      0|                i++;
18917|      0|            }
18918|      0|while_break___16: /* CIL Label */
18919|      0|            ;
18920|      0|        }
18921|      0|while_break : {
18922|      0|            alloc_position_set(&follows, d->nleaves);
18923|      0|            alloc_position_set(&tmp, d->nleaves);
18924|      0|        }
18925|      0|        if (d->searchflag) {
18926|      0|            {
18927|      0|                copy((position_set const *)(&(d->states + 0)->elems), &follows);
18928|      0|                separate_contexts = (int)state_separate_contexts((position_set const *)(&follows));
18929|      0|                state = state_index(d, (position_set const *)(&follows), separate_contexts ^ 7);
18930|      0|            }
18931|      0|            if (separate_contexts & 4) {
18932|      0|                {
18933|      0|                    state_newline = state_index(d, (position_set const *)(&follows), 4);
18934|      0|                }
18935|      0|            }
18936|      0|            else {
18937|      0|                state_newline = state;
18938|      0|            }
18939|      0|            if (separate_contexts & 2) {
18940|      0|                {
18941|      0|                    state_letter = state_index(d, (position_set const *)(&follows), 2);
18942|      0|                }
18943|      0|            }
18944|      0|            else {
18945|      0|                state_letter = state;
18946|      0|            }
18947|      0|            i = (size_t)0;
18948|      0|            {
18949|      0|                while (1) {
18950|      0|while_continue___7: /* CIL Label */
18951|      0|                    ;
18952|       |
18953|      0|                    if (!(i < 256UL)) {
18954|      0|                        goto while_break___7;
18955|      0|                    }
18956|      0|                    {
18957|      0|                        tmp___6 = __ctype_b_loc();
18958|      0|                    }
18959|      0|                    if ((int const) * (*tmp___6 + (int)i) & 8) {
18960|      0|                        *(trans___0 + i) = state_letter;
18961|      0|                    }
18962|      0|                    else {
18963|      0|                        if (i == 95UL) {
18964|      0|                            *(trans___0 + i) = state_letter;
18965|      0|                        }
18966|      0|                        else {
18967|      0|                            *(trans___0 + i) = state;
18968|      0|                        }
18969|      0|                    }
18970|      0|                    i++;
18971|      0|                }
18972|      0|while_break___24: /* CIL Label */
18973|      0|                ;
18974|      0|            }
18975|      0|while_break___7:
18976|      0|            *(trans___0 + (int)eolbyte___0) = state_newline;
18977|      0|        }
18978|      0|        else {
18979|      0|            i = (size_t)0;
18980|      0|            {
18981|      0|                while (1) {
18982|      0|while_continue___8: /* CIL Label */
18983|      0|                    ;
18984|       |
18985|      0|                    if (!(i < 256UL)) {
18986|      0|                        goto while_break___8;
18987|      0|                    }
18988|      0|                    *(trans___0 + i) = (ptrdiff_t)-1;
18989|      0|                    i++;
18990|      0|                }
18991|      0|while_break___25: /* CIL Label */
18992|      0|                ;
18993|      0|            }
18994|      0|while_break___8:
18995|      0|            ;
18996|      0|        }
18997|      0|        i = (size_t)0;
18998|      0|        {
18999|      0|            while (1) {
19000|      0|while_continue___9: /* CIL Label */
19001|      0|                ;
19002|       |
19003|      0|                if (!(i < ngrps)) {
19004|      0|                    goto while_break___9;
19005|      0|                }
19006|      0|                follows.nelem = (size_t)0;
19007|      0|                j = (size_t)0;
19008|      0|                {
19009|      0|                    while (1) {
19010|      0|while_continue___10: /* CIL Label */
19011|      0|                        ;
19012|       |
19013|      0|                        if (!(j < grps[i].nelem)) {
19014|      0|                            goto while_break___10;
19015|      0|                        }
19016|      0|                        k = (size_t)0;
19017|      0|                        {
19018|      0|                            while (1) {
19019|      0|while_continue___11: /* CIL Label */
19020|      0|                                ;
19021|       |
19022|      0|                                if (!(k < (d->follows + *(grps[i].elems + j))->nelem)) {
19023|      0|                                    goto while_break___11;
19024|      0|                                }
19025|      0|                                {
19026|      0|                                    insert(*((d->follows + *(grps[i].elems + j))->elems + k), &follows);
19027|      0|                                    k++;
19028|      0|                                }
19029|      0|                            }
19030|      0|while_break___28: /* CIL Label */
19031|      0|                            ;
19032|      0|                        }
19033|      0|while_break___11:
19034|      0|                        j++;
19035|      0|                    }
19036|      0|while_break___27: /* CIL Label */
19037|      0|                    ;
19038|      0|                }
19039|      0|while_break___10:
19040|      0|                ;
19041|      0|                if (d->multibyte) {
19042|      0|                    next_isnt_1st_byte = (_Bool)0;
19043|      0|                    j = (size_t)0;
19044|      0|                    {
19045|      0|                        while (1) {
19046|      0|while_continue___12: /* CIL Label */
19047|      0|                            ;
19048|       |
19049|      0|                            if (!(j < follows.nelem)) {
19050|      0|                                goto while_break___12;
19051|      0|                            }
19052|      0|                            if (!(*(d->multibyte_prop + (follows.elems + j)->index) & 1)) {
19053|      0|                                next_isnt_1st_byte = (_Bool)1;
19054|      0|                                goto while_break___12;
19055|      0|                            }
19056|      0|                            j++;
19057|      0|                        }
19058|      0|while_break___29: /* CIL Label */
19059|      0|                        ;
19060|      0|                    }
19061|      0|while_break___12:
19062|      0|                    ;
19063|      0|                }
19064|      0|                if (d->searchflag) {
19065|      0|                    if (!d->multibyte) {
19066|      0|                        {
19067|      0|                            merge((position_set const *)(&(d->states + 0)->elems), (position_set const *)(&follows),
19068|      0|                                  &tmp);
19069|      0|                            copy((position_set const *)(&tmp), &follows);
19070|      0|                        }
19071|      0|                    }
19072|      0|                    else {
19073|      0|                        if (!next_isnt_1st_byte) {
19074|      0|                            {
19075|      0|                                merge((position_set const *)(&(d->states + 0)->elems), (position_set const *)(&follows),
19076|      0|                                      &tmp);
19077|      0|                                copy((position_set const *)(&tmp), &follows);
19078|      0|                            }
19079|      0|                        }
19080|      0|                    }
19081|      0|                }
19082|      0|                {
19083|      0|                    possible_contexts = charclass_context(labels[i]);
19084|      0|                    separate_contexts = (int)state_separate_contexts((position_set const *)(&follows));
19085|      0|                }
19086|      0|                if ((separate_contexts & possible_contexts) != possible_contexts) {
19087|      0|                    {
19088|      0|                        state = state_index(d, (position_set const *)(&follows), separate_contexts ^ 7);
19089|      0|                    }
19090|      0|                }
19091|      0|                else {
19092|      0|                    state = (state_num)-1;
19093|      0|                }
19094|      0|                if ((separate_contexts & possible_contexts) & 4) {
19095|      0|                    {
19096|      0|                        state_newline = state_index(d, (position_set const *)(&follows), 4);
19097|      0|                    }
19098|      0|                }
19099|      0|                else {
19100|      0|                    state_newline = state;
19101|      0|                }
19102|      0|                if ((separate_contexts & possible_contexts) & 2) {
19103|      0|                    {
19104|      0|                        state_letter = state_index(d, (position_set const *)(&follows), 2);
19105|      0|                    }
19106|      0|                }
19107|      0|                else {
19108|      0|                    state_letter = state;
19109|      0|                }
19110|      0|                j = (size_t)0;
19111|      0|                {
19112|      0|                    while (1) {
19113|      0|while_continue___13: /* CIL Label */
19114|      0|                        ;
19115|       |
19116|      0|                        if (!(j < 8UL)) {
19117|      0|                            goto while_break___13;
19118|      0|                        }
19119|      0|                        k = (size_t)0;
19120|      0|                        {
19121|      0|                            while (1) {
19122|      0|while_continue___14: /* CIL Label */
19123|      0|                                ;
19124|       |
19125|      0|                                if (!(k < 32UL)) {
19126|      0|                                    goto while_break___14;
19127|      0|                                }
19128|      0|                                if ((labels[i][j] >> k) & 1U) {
19129|      0|                                    c = (int)(j * 32UL + k);
19130|      0|                                    if (c == (int)eolbyte___0) {
19131|      0|                                        *(trans___0 + c) = state_newline;
19132|      0|                                    }
19133|      0|                                    else {
19134|      0|                                        {
19135|      0|                                            tmp___7 = __ctype_b_loc();
19136|      0|                                        }
19137|      0|                                        if ((int const) * (*tmp___7 + c) & 8) {
19138|      0|                                            *(trans___0 + c) = state_letter;
19139|      0|                                        }
19140|      0|                                        else {
19141|      0|                                            if (c == 95) {
19142|      0|                                                *(trans___0 + c) = state_letter;
19143|      0|                                            }
19144|      0|                                            else {
19145|      0|                                                if (c < 256) {
19146|      0|                                                    *(trans___0 + c) = state;
19147|      0|                                                }
19148|      0|                                            }
19149|      0|                                        }
19150|      0|                                    }
19151|      0|                                }
19152|      0|                                k++;
19153|      0|                            }
19154|      0|while_break___31: /* CIL Label */
19155|      0|                            ;
19156|      0|                        }
19157|      0|while_break___14:
19158|      0|                        j++;
19159|      0|                    }
19160|      0|while_break___30: /* CIL Label */
19161|      0|                    ;
19162|      0|                }
19163|      0|while_break___13:
19164|      0|                i++;
19165|      0|            }
19166|      0|while_break___26: /* CIL Label */
19167|      0|            ;
19168|      0|        }
19169|      0|while_break___9:
19170|      0|        i = (size_t)0;
19171|      0|        {
19172|      0|            while (1) {
19173|      0|while_continue___15: /* CIL Label */
19174|      0|                ;
19175|       |
19176|      0|                if (!(i < ngrps)) {
19177|      0|                    goto while_break___15;
19178|      0|                }
19179|      0|                {
19180|      0|                    free((void *)grps[i].elems);
19181|      0|                    i++;
19182|      0|                }
19183|      0|            }
19184|      0|while_break___32: /* CIL Label */
19185|      0|            ;
19186|      0|        }
19187|      0|while_break___15 : {
19188|      0|            free((void *)follows.elems);
19189|      0|            free((void *)tmp.elems);
19190|      0|        }
19191|      0|        return;
19192|      0|    }
19193|      0|}
19194|       |static void realloc_trans_if_necessary(struct dfa *d, state_num new_state)
19195|      0|{
19196|      0|    state_num oldalloc;
19197|      0|    state_num **realtrans;
19198|      0|    state_num **tmp;
19199|      0|    size_t newalloc;
19200|      0|    size_t newalloc1;
19201|       |
19202|      0|    {
19203|      0|        oldalloc = d->tralloc;
19204|      0|        if (oldalloc <= new_state) {
19205|      0|            if (d->trans) {
19206|      0|                tmp = d->trans - 1;
19207|      0|            }
19208|      0|            else {
19209|      0|                tmp = (state_num **)((void *)0);
19210|      0|            }
19211|      0|            {
19212|      0|                realtrans = tmp;
19213|      0|                newalloc1 = (size_t)(new_state + 1L);
19214|      0|                realtrans = (state_num **)x2nrealloc((void *)realtrans, &newalloc1, sizeof(*realtrans));
19215|      0|                *(realtrans + 0) = (state_num *)((void *)0);
19216|      0|                d->trans = realtrans + 1;
19217|      0|                newalloc = newalloc1 - 1UL;
19218|      0|                d->tralloc = (state_num)newalloc;
19219|      0|                d->fails = (state_num **)xnrealloc((void *)d->fails, newalloc, sizeof(*(d->fails)));
19220|      0|                d->success = (int *)xnrealloc((void *)d->success, newalloc, sizeof(*(d->success)));
19221|      0|                d->newlines = (state_num *)xnrealloc((void *)d->newlines, newalloc, sizeof(*(d->newlines)));
19222|      0|            }
19223|      0|            {
19224|      0|                while (1) {
19225|      0|while_continue: /* CIL Label */
19226|      0|                    ;
19227|       |
19228|      0|                    if (!((size_t)oldalloc < newalloc)) {
19229|      0|                        goto while_break;
19230|      0|                    }
19231|      0|                    *(d->trans + oldalloc) = (state_num *)((void *)0);
19232|      0|                    *(d->fails + oldalloc) = (state_num *)((void *)0);
19233|      0|                    oldalloc++;
19234|      0|                }
19235|      0|while_break___0: /* CIL Label */
19236|      0|                ;
19237|      0|            }
19238|      0|while_break:
19239|      0|            ;
19240|      0|        }
19241|      0|        return;
19242|      0|    }
19243|      0|}
19244|       |static void build_state(state_num s, struct dfa *d)
19245|      0|{
19246|      0|    state_num *trans___0;
19247|      0|    state_num i;
19248|      0|    state_num maxstate;
19249|      0|    state_num *tmp;
19250|       |
19251|      0|    {
19252|      0|        if (d->trcount >= 1024) {
19253|      0|            i = (state_num)0;
19254|      0|            {
19255|      0|                while (1) {
19256|      0|while_continue: /* CIL Label */
19257|      0|                    ;
19258|       |
19259|      0|                    if (!(i < d->tralloc)) {
19260|      0|                        goto while_break;
19261|      0|                    }
19262|      0|                    {
19263|      0|                        free((void *)*(d->trans + i));
19264|      0|                        free((void *)*(d->fails + i));
19265|      0|                        tmp = (state_num *)((void *)0);
19266|      0|                        *(d->fails + i) = tmp;
19267|      0|                        *(d->trans + i) = tmp;
19268|      0|                        i++;
19269|      0|                    }
19270|      0|                }
19271|      0|while_break___1: /* CIL Label */
19272|      0|                ;
19273|      0|            }
19274|      0|while_break:
19275|      0|            d->trcount = 0;
19276|      0|        }
19277|      0|        (d->trcount)++;
19278|      0|        *(d->success + s) = 0;
19279|      0|        if ((((int)(d->states + s)->constraint >> 8) & 15) & (int)(d->states + s)->context) {
19280|      0|            *(d->success + s) |= 4;
19281|      0|        }
19282|      0|        if ((((int)(d->states + s)->constraint >> 4) & 15) & (int)(d->states + s)->context) {
19283|      0|            *(d->success + s) |= 2;
19284|      0|        }
19285|      0|        if (((int)(d->states + s)->constraint & 15) & (int)(d->states + s)->context) {
19286|      0|            *(d->success + s) |= 1;
19287|      0|        }
19288|      0|        {
19289|      0|            trans___0 = (state_num *)xmalloc(256UL * sizeof(*trans___0));
19290|      0|            dfastate(s, d, trans___0);
19291|      0|            maxstate = (state_num)-1;
19292|      0|            i = (state_num)0;
19293|      0|        }
19294|      0|        {
19295|      0|            while (1) {
19296|      0|while_continue___0: /* CIL Label */
19297|      0|                ;
19298|       |
19299|      0|                if (!(i < 256L)) {
19300|      0|                    goto while_break___0;
19301|      0|                }
19302|      0|                if (maxstate < *(trans___0 + i)) {
19303|      0|                    maxstate = *(trans___0 + i);
19304|      0|                }
19305|      0|                i++;
19306|      0|            }
19307|      0|while_break___2: /* CIL Label */
19308|      0|            ;
19309|      0|        }
19310|      0|while_break___0 : {
19311|      0|            realloc_trans_if_necessary(d, maxstate);
19312|      0|            *(d->newlines + s) = *(trans___0 + (int)eolbyte___0);
19313|      0|            *(trans___0 + (int)eolbyte___0) = (state_num)-1;
19314|      0|        }
19315|      0|        if ((d->states + s)->constraint) {
19316|      0|            *(d->fails + s) = trans___0;
19317|      0|        }
19318|      0|        else {
19319|      0|            *(d->trans + s) = trans___0;
19320|      0|        }
19321|      0|        return;
19322|      0|    }
19323|      0|}
19324|       |static void build_state_zero(struct dfa *d)
19325|      0|{
19326|      0|    int initial_tab_size;
19327|       |
19328|      0|    {
19329|      0|        {
19330|      0|            initial_tab_size = 1;
19331|      0|            d->tralloc = (state_num)0;
19332|      0|            d->trcount = 0;
19333|      0|            d->trans = (state_num **)((void *)0);
19334|      0|            d->fails = (state_num **)((void *)0);
19335|      0|            d->success = (int *)((void *)0);
19336|      0|            d->newlines = (state_num *)((void *)0);
19337|      0|            realloc_trans_if_necessary(d, (state_num)initial_tab_size);
19338|      0|            build_state((state_num)0, d);
19339|      0|        }
19340|      0|        return;
19341|      0|    }
19342|      0|}
19343|       |static status_transit_state transit_state_singlebyte(struct dfa *d, state_num s,
19344|       |        unsigned char const *p, state_num *next_state)
19345|      0|{
19346|      0|    state_num *t;
19347|      0|    state_num works;
19348|      0|    status_transit_state rval;
19349|       |
19350|      0|    {
19351|      0|        works = s;
19352|      0|        rval = (status_transit_state)0;
19353|      0|        {
19354|      0|            while (1) {
19355|      0|while_continue: /* CIL Label */
19356|      0|                ;
19357|       |
19358|      0|                if (!((unsigned int)rval == 0U)) {
19359|      0|                    goto while_break;
19360|      0|                }
19361|      0|                t = *(d->trans + works);
19362|      0|                if ((unsigned long)t != (unsigned long)((void *)0)) {
19363|      0|                    works = *(t + (int const) * p);
19364|      0|                    rval = (status_transit_state)1;
19365|      0|                    if (works < 0L) {
19366|      0|                        works = (state_num)0;
19367|      0|                    }
19368|      0|                }
19369|      0|                else {
19370|      0|                    if (works < 0L) {
19371|      0|                        works = (state_num)0;
19372|      0|                    }
19373|      0|                    else {
19374|      0|                        if (*(d->fails + works)) {
19375|      0|                            works = *(*(d->fails + works) + (int const) * p);
19376|      0|                            rval = (status_transit_state)1;
19377|      0|                        }
19378|      0|                        else {
19379|      0|                            {
19380|      0|                                build_state(works, d);
19381|      0|                            }
19382|      0|                        }
19383|      0|                    }
19384|      0|                }
19385|      0|            }
19386|      0|while_break___0: /* CIL Label */
19387|      0|            ;
19388|      0|        }
19389|      0|while_break:
19390|      0|        *next_state = works;
19391|      0|        return (rval);
19392|      0|    }
19393|      0|}
19394|       |static int match_anychar(struct dfa *d, state_num s, position pos, wint_t wc,
19395|       |                         size_t mbclen)
19396|      0|{
19397|      0|    int context;
19398|      0|    unsigned int tmp;
19399|      0|    unsigned int tmp___0;
19400|      0|    unsigned int tmp___1;
19401|       |
19402|      0|    {
19403|      0|        if (wc == (wint_t)((wchar_t)eolbyte___0)) {
19404|      0|            if (!(syntax_bits & ((((((1UL << 1) << 1) << 1) << 1) << 1) << 1))) {
19405|      0|                return (0);
19406|      0|            }
19407|      0|        }
19408|      0|        else {
19409|      0|            if (wc == 0U) {
19410|      0|                if (syntax_bits & (((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
19411|      0|                    return (0);
19412|      0|                }
19413|      0|            }
19414|      0|            else {
19415|      0|                if (wc == 4294967295U) {
19416|      0|                    return (0);
19417|      0|                }
19418|      0|            }
19419|      0|        }
19420|      0|        {
19421|      0|            context = wchar_context(wc);
19422|      0|        }
19423|      0|        if (context & 1) {
19424|      0|            tmp = pos.constraint & 15U;
19425|      0|        }
19426|      0|        else {
19427|      0|            tmp = 0U;
19428|      0|        }
19429|      0|        if (context & 2) {
19430|      0|            tmp___0 = (pos.constraint >> 4) & 15U;
19431|      0|        }
19432|      0|        else {
19433|      0|            tmp___0 = 0U;
19434|      0|        }
19435|      0|        if (context & 4) {
19436|      0|            tmp___1 = (pos.constraint >> 8) & 15U;
19437|      0|        }
19438|      0|        else {
19439|      0|            tmp___1 = 0U;
19440|      0|        }
19441|      0|        if (!(((tmp | tmp___0) | tmp___1) & (unsigned int)(d->states + s)->context)) {
19442|      0|            return (0);
19443|      0|        }
19444|      0|        return ((int)mbclen);
19445|      0|    }
19446|      0|}
19447|       |static int match_mb_charset(struct dfa *d, state_num s, position pos, char const *p,
19448|       |                            wint_t wc, size_t match_len)
19449|      0|{
19450|      0|    size_t i;
19451|      0|    _Bool match;
19452|      0|    int op_len;
19453|      0|    char buffer___0[128];
19454|      0|    struct mb_char_classes *work_mbc;
19455|      0|    int context;
19456|      0|    unsigned int tmp;
19457|      0|    unsigned int tmp___0;
19458|      0|    unsigned int tmp___1;
19459|      0|    unsigned char tmp___2;
19460|      0|    _Bool tmp___3;
19461|      0|    int tmp___4;
19462|      0|    int tmp___5;
19463|      0|    int tmp___6;
19464|      0|    size_t tmp___7;
19465|      0|    void *__cil_tmp25;
19466|       |
19467|      0|    {
19468|      0|        if (wc == (wint_t)((wchar_t)eolbyte___0)) {
19469|      0|            if (!(syntax_bits & ((((((1UL << 1) << 1) << 1) << 1) << 1) << 1))) {
19470|      0|                return (0);
19471|      0|            }
19472|      0|        }
19473|      0|        else {
19474|      0|            if (wc == 0U) {
19475|      0|                if (syntax_bits & (((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
19476|      0|                    return (0);
19477|      0|                }
19478|      0|            }
19479|      0|            else {
19480|      0|                if (wc == 4294967295U) {
19481|      0|                    return (0);
19482|      0|                }
19483|      0|            }
19484|      0|        }
19485|      0|        {
19486|      0|            context = wchar_context(wc);
19487|      0|        }
19488|      0|        if (context & 1) {
19489|      0|            tmp = pos.constraint & 15U;
19490|      0|        }
19491|      0|        else {
19492|      0|            tmp = 0U;
19493|      0|        }
19494|      0|        if (context & 2) {
19495|      0|            tmp___0 = (pos.constraint >> 4) & 15U;
19496|      0|        }
19497|      0|        else {
19498|      0|            tmp___0 = 0U;
19499|      0|        }
19500|      0|        if (context & 4) {
19501|      0|            tmp___1 = (pos.constraint >> 8) & 15U;
19502|      0|        }
19503|      0|        else {
19504|      0|            tmp___1 = 0U;
19505|      0|        }
19506|      0|        if (!(((tmp | tmp___0) | tmp___1) & (unsigned int)(d->states + s)->context)) {
19507|      0|            return (0);
19508|      0|        }
19509|      0|        work_mbc = d->mbcsets + (*(d->multibyte_prop + pos.index) >> 2);
19510|      0|        match = (_Bool)(!work_mbc->invert);
19511|      0|        if (wc < 256U) {
19512|      0|            if (work_mbc->cset != -1L) {
19513|      0|                {
19514|      0|                    tmp___2 = to_uchar___0((char)wc);
19515|      0|                    tmp___3 = tstbit((unsigned int)tmp___2, (charclass_word * /* const  */)(*(d->charclasses + work_mbc->cset)));
19516|      0|                }
19517|      0|                if (tmp___3) {
19518|      0|                    goto charset_matched;
19519|      0|                }
19520|      0|            }
19521|      0|        }
19522|      0|        i = (size_t)0;
19523|      0|        {
19524|      0|            while (1) {
19525|      0|while_continue: /* CIL Label */
19526|      0|                ;
19527|       |
19528|      0|                if (!(i < work_mbc->nch_classes)) {
19529|      0|                    goto while_break;
19530|      0|                }
19531|      0|                {
19532|      0|                    tmp___4 = iswctype(wc, *(work_mbc->ch_classes + i));
19533|      0|                }
19534|      0|                if (tmp___4) {
19535|      0|                    goto charset_matched;
19536|      0|                }
19537|      0|                i++;
19538|      0|            }
19539|      0|while_break___4: /* CIL Label */
19540|      0|            ;
19541|      0|        }
19542|      0|while_break : {
19543|      0|            strncpy((char * /* __restrict  */)(buffer___0), (char const * /* __restrict  */)p,
19544|      0|                    match_len);
19545|      0|            buffer___0[match_len] = (char)'\000';
19546|      0|            i = (size_t)0;
19547|      0|        }
19548|      0|        {
19549|      0|            while (1) {
19550|      0|while_continue___0: /* CIL Label */
19551|      0|                ;
19552|       |
19553|      0|                if (!(i < work_mbc->nequivs)) {
19554|      0|                    goto while_break___0;
19555|      0|                }
19556|      0|                {
19557|      0|                    op_len = (int)strlen((char const *)*(work_mbc->equivs + i));
19558|      0|                    strncpy((char * /* __restrict  */)(buffer___0), (char const * /* __restrict  */)p,
19559|      0|                            (size_t)op_len);
19560|      0|                    buffer___0[op_len] = (char)'\000';
19561|      0|                    tmp___5 = strcoll((char const *)*(work_mbc->equivs + i), (char const *)(buffer___0));
19562|      0|                }
19563|      0|                if (tmp___5 == 0) {
19564|      0|                    match_len = (size_t)op_len;
19565|      0|                    goto charset_matched;
19566|      0|                }
19567|      0|                i++;
19568|      0|            }
19569|      0|while_break___5: /* CIL Label */
19570|      0|            ;
19571|      0|        }
19572|      0|while_break___0:
19573|      0|        i = (size_t)0;
19574|      0|        {
19575|      0|            while (1) {
19576|      0|while_continue___1: /* CIL Label */
19577|      0|                ;
19578|       |
19579|      0|                if (!(i < work_mbc->ncoll_elems)) {
19580|      0|                    goto while_break___1;
19581|      0|                }
19582|      0|                {
19583|      0|                    op_len = (int)strlen((char const *)*(work_mbc->coll_elems + i));
19584|      0|                    strncpy((char * /* __restrict  */)(buffer___0), (char const * /* __restrict  */)p,
19585|      0|                            (size_t)op_len);
19586|      0|                    buffer___0[op_len] = (char)'\000';
19587|      0|                    tmp___6 = strcoll((char const *)*(work_mbc->coll_elems + i), (char const *)(buffer___0));
19588|      0|                }
19589|      0|                if (tmp___6 == 0) {
19590|      0|                    match_len = (size_t)op_len;
19591|      0|                    goto charset_matched;
19592|      0|                }
19593|      0|                i++;
19594|      0|            }
19595|      0|while_break___6: /* CIL Label */
19596|      0|            ;
19597|      0|        }
19598|      0|while_break___1:
19599|      0|        i = (size_t)0;
19600|      0|        {
19601|      0|            while (1) {
19602|      0|while_continue___2: /* CIL Label */
19603|      0|                ;
19604|       |
19605|      0|                if (!(i < work_mbc->nranges)) {
19606|      0|                    goto while_break___2;
19607|      0|                }
19608|      0|                if ((wint_t)(work_mbc->ranges + i)->beg <= wc) {
19609|      0|                    if (wc <= (wint_t)(work_mbc->ranges + i)->end) {
19610|      0|                        goto charset_matched;
19611|      0|                    }
19612|      0|                }
19613|      0|                i++;
19614|      0|            }
19615|      0|while_break___7: /* CIL Label */
19616|      0|            ;
19617|      0|        }
19618|      0|while_break___2:
19619|      0|        i = (size_t)0;
19620|      0|        {
19621|      0|            while (1) {
19622|      0|while_continue___3: /* CIL Label */
19623|      0|                ;
19624|       |
19625|      0|                if (!(i < work_mbc->nchars)) {
19626|      0|                    goto while_break___3;
19627|      0|                }
19628|      0|                if (wc == (wint_t) * (work_mbc->chars + i)) {
19629|      0|                    goto charset_matched;
19630|      0|                }
19631|      0|                i++;
19632|      0|            }
19633|      0|while_break___8: /* CIL Label */
19634|      0|            ;
19635|      0|        }
19636|      0|while_break___3:
19637|      0|        match = (_Bool)(!match);
19638|      0|charset_matched:
19639|      0|        if (match) {
19640|      0|            tmp___7 = match_len;
19641|      0|        }
19642|      0|        else {
19643|      0|            tmp___7 = (size_t)0;
19644|      0|        }
19645|      0|        return ((int)tmp___7);
19646|      0|    }
19647|      0|}
19648|       |static int *check_matching_with_multibyte_ops(struct dfa *d, state_num s, char const *p,
19649|       |        wint_t wc, size_t mbclen)
19650|      0|{
19651|      0|    size_t i;
19652|      0|    int *rarray;
19653|      0|    position pos;
19654|       |
19655|      0|    {
19656|      0|        rarray = d->mb_match_lens;
19657|      0|        i = (size_t)0;
19658|      0|        {
19659|      0|            while (1) {
19660|      0|while_continue: /* CIL Label */
19661|      0|                ;
19662|       |
19663|      0|                if (!(i < (d->states + s)->mbps.nelem)) {
19664|      0|                    goto while_break;
19665|      0|                }
19666|      0|                pos = *((d->states + s)->mbps.elems + i);
19667|      0|                if (*(d->tokens + pos.index) == 272L) {
19668|      0|                    goto case_272;
19669|      0|                }
19670|      0|                if (*(d->tokens + pos.index) == 273L) {
19671|      0|                    goto case_273;
19672|      0|                }
19673|      0|                goto switch_default;
19674|      0|case_272 : {
19675|      0|                    *(rarray + i) = match_anychar(d, s, pos, wc, mbclen);
19676|      0|                }
19677|      0|                goto switch_break;
19678|      0|case_273 : {
19679|      0|                    *(rarray + i) = match_mb_charset(d, s, pos, p, wc, mbclen);
19680|      0|                }
19681|      0|                goto switch_break;
19682|      0|switch_default:
19683|      0|                goto switch_break;
19684|      0|switch_break:
19685|      0|                i++;
19686|      0|            }
19687|      0|while_break___0: /* CIL Label */
19688|      0|            ;
19689|      0|        }
19690|      0|while_break:
19691|      0|        ;
19692|      0|        return (rarray);
19693|      0|    }
19694|      0|}
19695|       |static status_transit_state transit_state_consume_1char(struct dfa *d, state_num s,
19696|       |        unsigned char const **pp,
19697|       |        wint_t wc, size_t mbclen,
19698|       |        int *match_lens)
19699|      0|{
19700|      0|    size_t i;
19701|      0|    size_t j;
19702|      0|    int k;
19703|      0|    state_num s1;
19704|      0|    state_num s2;
19705|      0|    status_transit_state rs;
19706|      0|    unsigned char const *tmp;
19707|       |
19708|      0|    {
19709|      0|        rs = (status_transit_state)1;
19710|      0|        if (!match_lens) {
19711|      0|            if ((d->states + s)->mbps.nelem != 0UL) {
19712|      0|                {
19713|      0|                    match_lens = check_matching_with_multibyte_ops(d, s, (char const *)*pp, wc,
19714|      0|                                 mbclen);
19715|      0|                }
19716|      0|            }
19717|      0|        }
19718|      0|        s1 = s;
19719|      0|        k = 0;
19720|      0|        {
19721|      0|            while (1) {
19722|      0|while_continue: /* CIL Label */
19723|      0|                ;
19724|       |
19725|      0|                if (!((size_t)k < mbclen)) {
19726|      0|                    goto while_break;
19727|      0|                }
19728|      0|                {
19729|      0|                    s2 = s1;
19730|      0|                    tmp = *pp;
19731|      0|                    (*pp)++;
19732|      0|                    rs = transit_state_singlebyte(d, s2, tmp, &s1);
19733|      0|                    k++;
19734|      0|                }
19735|      0|            }
19736|      0|while_break___2: /* CIL Label */
19737|      0|            ;
19738|      0|        }
19739|      0|while_break : {
19740|      0|            copy((position_set const *)(&(d->states + s1)->elems), &d->mb_follows);
19741|      0|            i = (size_t)0;
19742|      0|        }
19743|      0|        {
19744|      0|            while (1) {
19745|      0|while_continue___0: /* CIL Label */
19746|      0|                ;
19747|       |
19748|      0|                if (!(i < (d->states + s)->mbps.nelem)) {
19749|      0|                    goto while_break___0;
19750|      0|                }
19751|      0|                if ((size_t) * (match_lens + i) == mbclen) {
19752|      0|                    j = (size_t)0;
19753|      0|                    {
19754|      0|                        while (1) {
19755|      0|while_continue___1: /* CIL Label */
19756|      0|                            ;
19757|       |
19758|      0|                            if (!(j < (d->follows + ((d->states + s)->mbps.elems + i)->index)->nelem)) {
19759|      0|                                goto while_break___1;
19760|      0|                            }
19761|      0|                            {
19762|      0|                                insert(*((d->follows + ((d->states + s)->mbps.elems + i)->index)->elems + j),
19763|      0|                                       &d->mb_follows);
19764|      0|                                j++;
19765|      0|                            }
19766|      0|                        }
19767|      0|while_break___4: /* CIL Label */
19768|      0|                        ;
19769|      0|                    }
19770|      0|while_break___1:
19771|      0|                    ;
19772|      0|                }
19773|      0|                i++;
19774|      0|            }
19775|      0|while_break___3: /* CIL Label */
19776|      0|            ;
19777|      0|        }
19778|      0|while_break___0:
19779|      0|        ;
19780|      0|        return (rs);
19781|      0|    }
19782|      0|}
19783|       |static state_num transit_state(struct dfa *d, state_num s, unsigned char const **pp,
19784|       |                               unsigned char const *end)
19785|      0|{
19786|      0|    state_num s1;
19787|      0|    int mbclen;
19788|      0|    int maxlen;
19789|      0|    size_t i;
19790|      0|    size_t j;
19791|      0|    int *match_lens;
19792|      0|    size_t nelem;
19793|      0|    unsigned char const *p1;
19794|      0|    wint_t wc;
19795|      0|    status_transit_state rs;
19796|      0|    int tmp;
19797|      0|    int tmp___0;
19798|       |
19799|      0|    {
19800|      0|        maxlen = 0;
19801|      0|        match_lens = (int *)((void *)0);
19802|      0|        nelem = (d->states + s)->mbps.nelem;
19803|      0|        p1 = *pp;
19804|      0|        if (nelem > 0UL) {
19805|      0|            {
19806|      0|                mbclen = (int)mbs_to_wchar(&wc, (char const *)*pp, (size_t)(end - *pp), d);
19807|      0|                match_lens = check_matching_with_multibyte_ops(d, s, (char const *)*pp, wc,
19808|      0|                             (size_t)mbclen);
19809|      0|                i = (size_t)0;
19810|      0|            }
19811|      0|            {
19812|      0|                while (1) {
19813|      0|while_continue: /* CIL Label */
19814|      0|                    ;
19815|       |
19816|      0|                    if (!(i < nelem)) {
19817|      0|                        goto while_break;
19818|      0|                    }
19819|      0|                    if (*(match_lens + i) > maxlen) {
19820|      0|                        maxlen = *(match_lens + i);
19821|      0|                    }
19822|      0|                    i++;
19823|      0|                }
19824|      0|while_break___3: /* CIL Label */
19825|      0|                ;
19826|      0|            }
19827|      0|while_break:
19828|      0|            ;
19829|      0|        }
19830|      0|        if (nelem == 0UL) {
19831|      0|            goto _L;
19832|      0|        }
19833|      0|        else {
19834|      0|            if (maxlen == 0) {
19835|      0|_L : {
19836|      0|                    rs = transit_state_singlebyte(d, s, *pp, &s1);
19837|      0|                }
19838|      0|                if ((unsigned int)rs == 1U) {
19839|      0|                    (*pp)++;
19840|      0|                }
19841|      0|                return (s1);
19842|      0|            }
19843|      0|        }
19844|      0|        {
19845|      0|            d->mb_follows.nelem = (size_t)0;
19846|      0|            transit_state_consume_1char(d, s, pp, wc, (size_t)mbclen, match_lens);
19847|      0|            tmp = wchar_context(wc);
19848|      0|            s1 = state_index(d, (position_set const *)(&d->mb_follows), tmp);
19849|      0|            realloc_trans_if_necessary(d, s1);
19850|      0|        }
19851|      0|        {
19852|      0|            while (1) {
19853|      0|while_continue___0: /* CIL Label */
19854|      0|                ;
19855|       |
19856|      0|                if (!(*pp - p1 < (long)maxlen)) {
19857|      0|                    goto while_break___0;
19858|      0|                }
19859|      0|                {
19860|      0|                    mbclen = (int)mbs_to_wchar(&wc, (char const *)*pp, (size_t)(end - *pp), d);
19861|      0|                    transit_state_consume_1char(d, s1, pp, wc, (size_t)mbclen, (int *)((void *)0));
19862|      0|                    i = (size_t)0;
19863|      0|                }
19864|      0|                {
19865|      0|                    while (1) {
19866|      0|while_continue___1: /* CIL Label */
19867|      0|                        ;
19868|       |
19869|      0|                        if (!(i < nelem)) {
19870|      0|                            goto while_break___1;
19871|      0|                        }
19872|      0|                        if ((long)*(match_lens + i) == *pp - p1) {
19873|      0|                            j = (size_t)0;
19874|      0|                            {
19875|      0|                                while (1) {
19876|      0|while_continue___2: /* CIL Label */
19877|      0|                                    ;
19878|       |
19879|      0|                                    if (!(j < (d->follows + ((d->states + s1)->mbps.elems + i)->index)->nelem)) {
19880|      0|                                        goto while_break___2;
19881|      0|                                    }
19882|      0|                                    {
19883|      0|                                        insert(*((d->follows + ((d->states + s1)->mbps.elems + i)->index)->elems + j),
19884|      0|                                               &d->mb_follows);
19885|      0|                                        j++;
19886|      0|                                    }
19887|      0|                                }
19888|      0|while_break___6: /* CIL Label */
19889|      0|                                ;
19890|      0|                            }
19891|      0|while_break___2:
19892|      0|                            ;
19893|      0|                        }
19894|      0|                        i++;
19895|      0|                    }
19896|      0|while_break___5: /* CIL Label */
19897|      0|                    ;
19898|      0|                }
19899|      0|while_break___1 : {
19900|      0|                    tmp___0 = wchar_context(wc);
19901|      0|                    s1 = state_index(d, (position_set const *)(&d->mb_follows), tmp___0);
19902|      0|                    realloc_trans_if_necessary(d, s1);
19903|      0|                }
19904|      0|            }
19905|      0|while_break___4: /* CIL Label */
19906|      0|            ;
19907|      0|        }
19908|      0|while_break___0:
19909|      0|        ;
19910|      0|        return (s1);
19911|      0|    }
19912|      0|}
19913|       |char *dfaexec(struct dfa *d, char const *begin, char *end, int allow_nl, size_t *count,
19914|       |              int *backref)
19915|      0|{
19916|      0|    state_num s;
19917|      0|    state_num s1;
19918|      0|    unsigned char const *p;
19919|      0|    unsigned char const *mbp;
19920|      0|    state_num **trans___0;
19921|      0|    state_num *t;
19922|      0|    unsigned char eol;
19923|      0|    unsigned char saved_end;
19924|      0|    size_t nlcount;
19925|      0|    wint_t wc;
19926|      0|    size_t tmp;
19927|      0|    unsigned char const *tmp___0;
19928|      0|    unsigned char const *tmp___1;
19929|      0|    state_num tmp___2;
19930|      0|    unsigned char const *tmp___3;
19931|      0|    unsigned char const *tmp___4;
19932|       |
19933|      0|    {
19934|      0|        eol = eolbyte___0;
19935|      0|        nlcount = (size_t)0;
19936|      0|        if (!d->tralloc) {
19937|      0|            {
19938|      0|                build_state_zero(d);
19939|      0|            }
19940|      0|        }
19941|      0|        s1 = (state_num)0;
19942|      0|        s = s1;
19943|      0|        mbp = (unsigned char const *)begin;
19944|      0|        p = mbp;
19945|      0|        trans___0 = d->trans;
19946|      0|        saved_end = *((unsigned char *)end);
19947|      0|        *end = (char)eol;
19948|      0|        if (d->multibyte) {
19949|      0|            {
19950|      0|                memset((void *)(&d->mbs), 0, sizeof(d->mbs));
19951|      0|            }
19952|      0|            if (!d->mb_match_lens) {
19953|      0|                {
19954|      0|                    d->mb_match_lens = (int *)xnmalloc(d->nleaves, sizeof(*(d->mb_match_lens)));
19955|      0|                    alloc_position_set(&d->mb_follows, d->nleaves);
19956|      0|                }
19957|      0|            }
19958|      0|        }
19959|      0|        {
19960|      0|            while (1) {
19961|      0|while_continue: /* CIL Label */
19962|      0|                ;
19963|       |
19964|      0|                if (d->multibyte) {
19965|      0|                    {
19966|      0|                        while (1) {
19967|      0|while_continue___1: /* CIL Label */
19968|      0|                            ;
19969|      0|while_continue___0:
19970|      0|                            t = *(trans___0 + s);
19971|      0|                            if (!((unsigned long)t != (unsigned long)((void *)0))) {
19972|      0|                                goto while_break___0;
19973|      0|                            }
19974|      0|                            s1 = s;
19975|      0|                            if (s == 0L) {
19976|      0|                                {
19977|      0|                                    while (1) {
19978|      0|while_continue___2: /* CIL Label */
19979|      0|                                        ;
19980|       |
19981|      0|                                        if (!((unsigned long)mbp < (unsigned long)p)) {
19982|      0|                                            goto while_break___1;
19983|      0|                                        }
19984|      0|                                        {
19985|      0|                                            tmp = mbs_to_wchar(&wc, (char const *)mbp, (size_t)(end - (char *)((char const *)mbp)),
19986|      0|                                                               d);
19987|      0|                                            mbp += tmp;
19988|      0|                                        }
19989|      0|                                    }
19990|      0|while_break___4: /* CIL Label */
19991|      0|                                    ;
19992|      0|                                }
19993|      0|while_break___1:
19994|      0|                                p = mbp;
19995|      0|                                if ((unsigned long)((char *)p) > (unsigned long)end) {
19996|      0|                                    p = (unsigned char const *)((void *)0);
19997|      0|                                    goto done;
19998|      0|                                }
19999|      0|                            }
20000|      0|                            if ((d->states + s)->mbps.nelem == 0UL) {
20001|      0|                                tmp___0 = p;
20002|      0|                                p++;
20003|      0|                                s = *(t + (int const) * tmp___0);
20004|      0|                                goto while_continue___0;
20005|      0|                            }
20006|      0|                            if ((d->states + s)->has_mbcset) {
20007|      0|                                if (backref) {
20008|      0|                                    *backref = 1;
20009|      0|                                    goto done;
20010|      0|                                }
20011|      0|                            }
20012|      0|                            {
20013|      0|                                s = transit_state(d, s, &p, (unsigned char const *)((unsigned char *)end));
20014|      0|                                mbp = p;
20015|      0|                                trans___0 = d->trans;
20016|      0|                            }
20017|      0|                        }
20018|      0|while_break___3: /* CIL Label */
20019|      0|                        ;
20020|      0|                    }
20021|      0|while_break___0:
20022|      0|                    ;
20023|      0|                }
20024|      0|                else {
20025|      0|                    {
20026|      0|                        while (1) {
20027|      0|while_continue___3: /* CIL Label */
20028|      0|                            ;
20029|      0|                            t = *(trans___0 + s);
20030|      0|                            if (!((unsigned long)t != (unsigned long)((void *)0))) {
20031|      0|                                goto while_break___2;
20032|      0|                            }
20033|      0|                            tmp___1 = p;
20034|      0|                            p++;
20035|      0|                            s1 = *(t + (int const) * tmp___1);
20036|      0|                            t = *(trans___0 + s1);
20037|      0|                            if ((unsigned long)t == (unsigned long)((void *)0)) {
20038|      0|                                tmp___2 = s;
20039|      0|                                s = s1;
20040|      0|                                s1 = tmp___2;
20041|      0|                                goto while_break___2;
20042|      0|                            }
20043|      0|                            tmp___3 = p;
20044|      0|                            p++;
20045|      0|                            s = *(t + (int const) * tmp___3);
20046|      0|                        }
20047|      0|while_break___5: /* CIL Label */
20048|      0|                        ;
20049|      0|                    }
20050|      0|while_break___2:
20051|      0|                    ;
20052|      0|                }
20053|      0|                if ((unsigned long)((char *)p) > (unsigned long)end) {
20054|      0|                    p = (unsigned char const *)((void *)0);
20055|      0|                    goto done;
20056|      0|                }
20057|      0|                if (s >= 0L) {
20058|      0|                    if (*(d->fails + s)) {
20059|      0|                        if (*(d->success + s) & sbit[*p]) {
20060|      0|                            if (backref) {
20061|      0|                                *backref = (int)(d->states + s)->has_backref;
20062|      0|                            }
20063|      0|                            goto done;
20064|      0|                        }
20065|      0|                        s1 = s;
20066|      0|                        if (d->multibyte) {
20067|      0|                            {
20068|      0|                                s = transit_state(d, s, &p, (unsigned char const *)((unsigned char *)end));
20069|      0|                                mbp = p;
20070|      0|                                trans___0 = d->trans;
20071|      0|                            }
20072|      0|                        }
20073|      0|                        else {
20074|      0|                            tmp___4 = p;
20075|      0|                            p++;
20076|      0|                            s = *(*(d->fails + s) + (int const) * tmp___4);
20077|      0|                        }
20078|      0|                        goto __Cont;
20079|      0|                    }
20080|      0|                }
20081|      0|                if ((int const) * (p + -1) == (int const)eol) {
20082|      0|                    if ((unsigned long)((char *)p) != (unsigned long)begin) {
20083|      0|                        nlcount++;
20084|      0|                        mbp = p;
20085|      0|                    }
20086|      0|                }
20087|      0|                if (s >= 0L) {
20088|      0|                    if (!*(d->trans + s)) {
20089|      0|                        {
20090|      0|                            build_state(s, d);
20091|      0|                        }
20092|      0|                    }
20093|      0|                    trans___0 = d->trans;
20094|      0|                    goto __Cont;
20095|      0|                }
20096|      0|                if ((int const) * (p + -1) == (int const)eol) {
20097|      0|                    if (allow_nl) {
20098|      0|                        s = *(d->newlines + s1);
20099|      0|                        goto __Cont;
20100|      0|                    }
20101|      0|                }
20102|      0|                s = (state_num)0;
20103|      0|__Cont:
20104|      0|                ;
20105|      0|            }
20106|      0|while_break: /* CIL Label */
20107|      0|            ;
20108|      0|        }
20109|       |
20110|      0|done:
20111|      0|        if (count) {
20112|      0|            *count += nlcount;
20113|      0|        }
20114|      0|        *end = (char)saved_end;
20115|      0|        return ((char *)p);
20116|      0|    }
20117|      0|}
20118|       |struct dfa *dfasuperset(struct dfa const *d) __attribute__((__pure__));
20119|       |struct dfa *dfasuperset(struct dfa const *d)
20120|      5|{
20121|       |
20122|      5|    {
20123|      5|        return ((struct dfa *)d->superset);
20124|      5|    }
20125|      5|}
20126|       |_Bool dfaisfast(struct dfa const *d) __attribute__((__pure__));
20127|       |_Bool dfaisfast(struct dfa const *d)
20128|      5|{
20129|       |
20130|      5|    {
20131|      5|        return ((_Bool)d->fast);
20132|      5|    }
20133|      5|}
20134|       |static void free_mbdata(struct dfa *d)
20135|      0|{
20136|      0|    size_t i;
20137|      0|    size_t j;
20138|      0|    struct mb_char_classes *p;
20139|       |
20140|      0|    {
20141|      0|        {
20142|      0|            free((void *)d->multibyte_prop);
20143|      0|            i = (size_t)0;
20144|      0|        }
20145|      0|        {
20146|      0|            while (1) {
20147|      0|while_continue: /* CIL Label */
20148|      0|                ;
20149|       |
20150|      0|                if (!(i < d->nmbcsets)) {
20151|      0|                    goto while_break;
20152|      0|                }
20153|      0|                {
20154|      0|                    p = d->mbcsets + i;
20155|      0|                    free((void *)p->chars);
20156|      0|                    free((void *)p->ch_classes);
20157|      0|                    free((void *)p->ranges);
20158|      0|                    j = (size_t)0;
20159|      0|                }
20160|      0|                {
20161|      0|                    while (1) {
20162|      0|while_continue___0: /* CIL Label */
20163|      0|                        ;
20164|       |
20165|      0|                        if (!(j < p->nequivs)) {
20166|      0|                            goto while_break___0;
20167|      0|                        }
20168|      0|                        {
20169|      0|                            free((void *)*(p->equivs + j));
20170|      0|                            j++;
20171|      0|                        }
20172|      0|                    }
20173|      0|while_break___3: /* CIL Label */
20174|      0|                    ;
20175|      0|                }
20176|      0|while_break___0 : {
20177|      0|                    free((void *)p->equivs);
20178|      0|                    j = (size_t)0;
20179|      0|                }
20180|      0|                {
20181|      0|                    while (1) {
20182|      0|while_continue___1: /* CIL Label */
20183|      0|                        ;
20184|       |
20185|      0|                        if (!(j < p->ncoll_elems)) {
20186|      0|                            goto while_break___1;
20187|      0|                        }
20188|      0|                        {
20189|      0|                            free((void *)*(p->coll_elems + j));
20190|      0|                            j++;
20191|      0|                        }
20192|      0|                    }
20193|      0|while_break___4: /* CIL Label */
20194|      0|                    ;
20195|      0|                }
20196|      0|while_break___1 : {
20197|      0|                    free((void *)p->coll_elems);
20198|      0|                    i++;
20199|      0|                }
20200|      0|            }
20201|      0|while_break___2: /* CIL Label */
20202|      0|            ;
20203|      0|        }
20204|      0|while_break : {
20205|      0|            free((void *)d->mbcsets);
20206|      0|            free((void *)d->mb_follows.elems);
20207|      0|            free((void *)d->mb_match_lens);
20208|      0|            d->mb_match_lens = (int *)((void *)0);
20209|      0|        }
20210|      0|        return;
20211|      0|    }
20212|      0|}
20213|       |void dfainit(struct dfa *d)
20214|      2|{
20215|      2|    size_t tmp;
20216|       |
20217|      2|    {
20218|      2|        {
20219|      2|            memset((void *)d, 0, sizeof(*d));
20220|      2|            tmp = __ctype_get_mb_cur_max();
20221|      2|            d->multibyte = (_Bool)(tmp > 1UL);
20222|      2|            d->fast = (_Bool)(!d->multibyte);
20223|      2|        }
20224|      2|        return;
20225|      2|    }
20226|      2|}
20227|       |static void dfaoptimize(struct dfa *d)
20228|      2|{
20229|      2|    size_t i;
20230|      2|    _Bool have_backref;
20231|      2|    int tmp;
20232|       |
20233|      2|    {
20234|      2|        {
20235|      2|            have_backref = (_Bool)0;
20236|      2|            tmp = using_utf8();
20237|      2|        }
20238|      2|        if (!tmp) {
20239|      2|            return;
20240|      2|        }
20241|      0|        i = (size_t)0;
20242|      0|        {
20243|      0|            while (1) {
20244|      0|while_continue: /* CIL Label */
20245|      0|                ;
20246|       |
20247|      0|                if (!(i < d->tindex)) {
20248|      0|                    goto while_break;
20249|      0|                }
20250|      0|                if (*(d->tokens + i) == 272L) {
20251|      0|                    goto case_272;
20252|      0|                }
20253|      0|                if (*(d->tokens + i) == 257L) {
20254|      0|                    goto case_257;
20255|      0|                }
20256|      0|                if (*(d->tokens + i) == 273L) {
20257|      0|                    goto case_273;
20258|      0|                }
20259|      0|                goto switch_default;
20260|      0|case_272 : {
20261|      0|                    abort();
20262|      0|                }
20263|      0|case_257:
20264|      0|                have_backref = (_Bool)1;
20265|      0|                goto switch_break;
20266|      0|case_273:
20267|      0|                return;
20268|      0|switch_default:
20269|      0|                goto switch_break;
20270|      0|switch_break:
20271|      0|                i++;
20272|      0|            }
20273|      0|while_break___0: /* CIL Label */
20274|      0|            ;
20275|      0|        }
20276|      0|while_break:
20277|      0|        ;
20278|      0|        if (!have_backref) {
20279|      0|            if (d->superset) {
20280|      0|                {
20281|      0|                    dfafree(d->superset);
20282|      0|                    free((void *)d->superset);
20283|      0|                    d->superset = (struct dfa *)((void *)0);
20284|      0|                }
20285|      0|            }
20286|      0|        }
20287|      0|        {
20288|      0|            free_mbdata(d);
20289|      0|            d->multibyte = (_Bool)0;
20290|      0|        }
20291|      0|        return;
20292|      0|    }
20293|      0|}
20294|       |static void dfassbuild(struct dfa *d)
20295|      2|{
20296|      2|    size_t i;
20297|      2|    size_t j;
20298|      2|    charclass ccl;
20299|      2|    _Bool have_achar;
20300|      2|    _Bool have_nchar;
20301|      2|    struct dfa *sup;
20302|      2|    struct dfa *tmp;
20303|      2|    size_t tmp___0;
20304|      2|    size_t tmp___1;
20305|      2|    size_t tmp___2;
20306|      2|    size_t tmp___3;
20307|      2|    size_t tmp___4;
20308|      2|    void *__cil_tmp17;
20309|       |
20310|      2|    {
20311|      2|        {
20312|      2|            have_achar = (_Bool)0;
20313|      2|            have_nchar = (_Bool)0;
20314|      2|            tmp = dfaalloc();
20315|      2|            sup = tmp;
20316|      2|            *sup = *d;
20317|      2|            sup->multibyte = (_Bool)0;
20318|      2|            sup->multibyte_prop = (int *)((void *)0);
20319|      2|            sup->mbcsets = (struct mb_char_classes *)((void *)0);
20320|      2|            sup->superset = (struct dfa *)((void *)0);
20321|      2|            sup->states = (dfa_state *)((void *)0);
20322|      2|            sup->sindex = (state_num)0;
20323|      2|            sup->follows = (position_set *)((void *)0);
20324|      2|            sup->tralloc = (state_num)0;
20325|      2|            sup->trans = (state_num **)((void *)0);
20326|      2|            sup->fails = (state_num **)((void *)0);
20327|      2|            sup->success = (int *)((void *)0);
20328|      2|            sup->newlines = (state_num *)((void *)0);
20329|      2|            sup->musts = (struct dfamust *)((void *)0);
20330|      2|            sup->charclasses = (charclass *)xnmalloc(sup->calloc, sizeof(*(sup->charclasses)));
20331|      2|            memcpy((void * /* __restrict  */)((void *)sup->charclasses), (void const * /* __restrict  */)((void const *)d->charclasses),
20332|      2|                   d->cindex * sizeof(*(sup->charclasses)));
20333|      2|            sup->tokens = (token *)xnmalloc(d->tindex, 2UL * sizeof(*(sup->tokens)));
20334|      2|            sup->talloc = d->tindex * 2UL;
20335|      2|            j = (size_t)0;
20336|      2|            i = j;
20337|      2|        }
20338|      2|        {
20339|     24|            while (1) {
20340|     24|while_continue: /* CIL Label */
20341|     24|                ;
20342|       |
20343|     24|                if (!(i < d->tindex)) {
20344|      2|                    goto while_break;
20345|      2|                }
20346|     22|                if (*(d->tokens + i) == 272L) {
20347|      0|                    goto case_272;
20348|      0|                }
20349|     22|                if (*(d->tokens + i) == 273L) {
20350|      0|                    goto case_272;
20351|      0|                }
20352|     22|                if (*(d->tokens + i) == 257L) {
20353|      0|                    goto case_272;
20354|      0|                }
20355|     22|                if (*(d->tokens + i) == 260L) {
20356|      0|                    goto case_260;
20357|      0|                }
20358|     22|                if (*(d->tokens + i) == 261L) {
20359|      0|                    goto case_260;
20360|      0|                }
20361|     22|                if (*(d->tokens + i) == 262L) {
20362|      0|                    goto case_260;
20363|      0|                }
20364|     22|                if (*(d->tokens + i) == 263L) {
20365|      0|                    goto case_260;
20366|      0|                }
20367|     22|                goto switch_default;
20368|     22|case_272 : {
20369|      0|                    zeroset(ccl);
20370|      0|                    notset(ccl);
20371|      0|                    tmp___0 = j;
20372|      0|                    j++;
20373|      0|                    tmp___1 = dfa_charclass_index(sup, (charclass_word * /* const  */)(ccl));
20374|      0|                    *(sup->tokens + tmp___0) = (token)(275UL + tmp___1);
20375|      0|                    tmp___2 = j;
20376|      0|                    j++;
20377|      0|                    *(sup->tokens + tmp___2) = (token)265;
20378|      0|                }
20379|      0|                if (*(d->tokens + (i + 1UL)) == 264L) {
20380|      0|                    i++;
20381|      0|                }
20382|      0|                else {
20383|      0|                    if (*(d->tokens + (i + 1UL)) == 265L) {
20384|      0|                        i++;
20385|      0|                    }
20386|      0|                    else {
20387|      0|                        if (*(d->tokens + (i + 1UL)) == 266L) {
20388|      0|                            i++;
20389|      0|                        }
20390|      0|                    }
20391|      0|                }
20392|      0|                have_achar = (_Bool)1;
20393|      0|                goto switch_break;
20394|      0|case_260:
20395|      0|                if (d->multibyte) {
20396|      0|                    tmp___3 = j;
20397|      0|                    j++;
20398|      0|                    *(sup->tokens + tmp___3) = (token)256;
20399|      0|                    *(d->tokens + i) = (token)257;
20400|      0|                    goto switch_break;
20401|      0|                }
20402|     22|switch_default:
20403|     22|                tmp___4 = j;
20404|     22|                j++;
20405|     22|                *(sup->tokens + tmp___4) = *(d->tokens + i);
20406|     22|                if (0L <= *(d->tokens + i)) {
20407|     20|                    if (*(d->tokens + i) < 256L) {
20408|     10|                        have_nchar = (_Bool)1;
20409|     10|                    }
20410|     10|                    else {
20411|     10|                        goto _L;
20412|     10|                    }
20413|     20|                }
20414|      2|                else {
20415|     12|_L:
20416|     12|                    if (*(d->tokens + i) >= 275L) {
20417|      0|                        have_nchar = (_Bool)1;
20418|      0|                    }
20419|     12|                }
20420|     22|                goto switch_break;
20421|     22|switch_break:
20422|     22|                i++;
20423|     22|            }
20424|      0|while_break___0: /* CIL Label */
20425|      0|            ;
20426|      0|        }
20427|      2|while_break:
20428|      2|        sup->tindex = j;
20429|      2|        if (have_nchar) {
20430|      2|            if (have_achar) {
20431|      0|                d->superset = sup;
20432|      0|            }
20433|      2|            else {
20434|      2|                if (d->multibyte) {
20435|      0|                    d->superset = sup;
20436|      0|                }
20437|      2|                else {
20438|      2|                    {
20439|      2|                        dfafree(sup);
20440|      2|                        free((void *)sup);
20441|      2|                    }
20442|      2|                }
20443|      2|            }
20444|      2|        }
20445|      0|        else {
20446|      0|            {
20447|      0|                dfafree(sup);
20448|      0|                free((void *)sup);
20449|      0|            }
20450|      0|        }
20451|      2|        return;
20452|      0|    }
20453|      0|}
20454|       |void dfacomp(char const *s, size_t len, struct dfa *d, int searchflag)
20455|      2|{
20456|       |
20457|      2|    {
20458|      2|        {
20459|      2|            dfainit(d);
20460|      2|            dfambcache(d);
20461|      2|            dfaparse(s, len, d);
20462|      2|            dfamust(d);
20463|      2|            dfassbuild(d);
20464|      2|            dfaoptimize(d);
20465|      2|            dfaanalyze(d, searchflag);
20466|      2|        }
20467|      2|        if (d->superset) {
20468|      0|            {
20469|      0|                d->fast = (_Bool)1;
20470|      0|                dfaanalyze(d->superset, searchflag);
20471|      0|            }
20472|      0|        }
20473|      2|        return;
20474|      2|    }
20475|      2|}
20476|       |void dfafree(struct dfa *d)
20477|      2|{
20478|      2|    size_t i;
20479|      2|    struct dfamust *dm;
20480|      2|    struct dfamust *ndm;
20481|       |
20482|      2|    {
20483|      2|        {
20484|      2|            free((void *)d->charclasses);
20485|      2|            free((void *)d->tokens);
20486|      2|        }
20487|      2|        if (d->multibyte) {
20488|      0|            {
20489|      0|                free_mbdata(d);
20490|      0|            }
20491|      0|        }
20492|      2|        i = (size_t)0;
20493|      2|        {
20494|      2|            while (1) {
20495|      2|while_continue: /* CIL Label */
20496|      2|                ;
20497|       |
20498|      2|                if (!(i < (size_t)d->sindex)) {
20499|      2|                    goto while_break;
20500|      2|                }
20501|      0|                {
20502|      0|                    free((void *)(d->states + i)->elems.elems);
20503|      0|                    free((void *)(d->states + i)->mbps.elems);
20504|      0|                    i++;
20505|      0|                }
20506|      0|            }
20507|      0|while_break___3: /* CIL Label */
20508|      0|            ;
20509|      0|        }
20510|      2|while_break : {
20511|      2|            free((void *)d->states);
20512|      2|        }
20513|      2|        if (d->follows) {
20514|      0|            i = (size_t)0;
20515|      0|            {
20516|      0|                while (1) {
20517|      0|while_continue___0: /* CIL Label */
20518|      0|                    ;
20519|       |
20520|      0|                    if (!(i < d->tindex)) {
20521|      0|                        goto while_break___0;
20522|      0|                    }
20523|      0|                    {
20524|      0|                        free((void *)(d->follows + i)->elems);
20525|      0|                        i++;
20526|      0|                    }
20527|      0|                }
20528|      0|while_break___4: /* CIL Label */
20529|      0|                ;
20530|      0|            }
20531|      0|while_break___0 : {
20532|      0|                free((void *)d->follows);
20533|      0|            }
20534|      0|        }
20535|      2|        if (d->trans) {
20536|      0|            i = (size_t)0;
20537|      0|            {
20538|      0|                while (1) {
20539|      0|while_continue___1: /* CIL Label */
20540|      0|                    ;
20541|       |
20542|      0|                    if (!(i < (size_t)d->tralloc)) {
20543|      0|                        goto while_break___1;
20544|      0|                    }
20545|      0|                    {
20546|      0|                        free((void *)*(d->trans + i));
20547|      0|                        free((void *)*(d->fails + i));
20548|      0|                        i++;
20549|      0|                    }
20550|      0|                }
20551|      0|while_break___5: /* CIL Label */
20552|      0|                ;
20553|      0|            }
20554|      0|while_break___1 : {
20555|      0|                free((void *)(d->trans - 1));
20556|      0|                free((void *)d->fails);
20557|      0|                free((void *)d->newlines);
20558|      0|                free((void *)d->success);
20559|      0|            }
20560|      0|        }
20561|      2|        dm = d->musts;
20562|      2|        {
20563|      2|            while (1) {
20564|      2|while_continue___2: /* CIL Label */
20565|      2|                ;
20566|       |
20567|      2|                if (!dm) {
20568|      2|                    goto while_break___2;
20569|      2|                }
20570|      0|                {
20571|      0|                    ndm = dm->next;
20572|      0|                    free((void *)dm->must);
20573|      0|                    free((void *)dm);
20574|      0|                    dm = ndm;
20575|      0|                }
20576|      0|            }
20577|      0|while_break___6: /* CIL Label */
20578|      0|            ;
20579|      0|        }
20580|      2|while_break___2:
20581|      2|        ;
20582|      2|        if (d->superset) {
20583|      0|            {
20584|      0|                dfafree(d->superset);
20585|      0|            }
20586|      0|        }
20587|      2|        return;
20588|      0|    }
20589|      0|}
20590|       |static char *icatalloc(char *old, char const *new)
20591|     24|{
20592|     24|    char *result;
20593|     24|    size_t oldsize;
20594|     24|    size_t newsize;
20595|     24|    size_t tmp;
20596|       |
20597|     24|    {
20598|     24|        {
20599|     24|            tmp = strlen(new);
20600|     24|            newsize = tmp;
20601|     24|        }
20602|     24|        if (newsize == 0UL) {
20603|      0|            return (old);
20604|      0|        }
20605|     24|        {
20606|     24|            oldsize = strlen((char const *)old);
20607|     24|            result = (char *)xrealloc((void *)old, (oldsize + newsize) + 1UL);
20608|     24|            memcpy((void * /* __restrict  */)((void *)(result + oldsize)), (void const * /* __restrict  */)((void const *)new),
20609|     24|                   newsize + 1UL);
20610|     24|        }
20611|     24|        return (result);
20612|     24|    }
20613|     24|}
20614|       |static char *__attribute__((__pure__)) istrstr(char const *lookin, char const *lookfor)
20615|     36|{
20616|     36|    char const *cp;
20617|     36|    size_t len;
20618|     36|    int tmp;
20619|       |
20620|     36|    {
20621|     36|        {
20622|     36|            len = strlen(lookfor);
20623|     36|            cp = lookin;
20624|     36|        }
20625|     36|        {
20626|     84|            while (1) {
20627|     84|while_continue: /* CIL Label */
20628|     84|                ;
20629|       |
20630|     84|                if (!((int const) * cp != 0)) {
20631|     20|                    goto while_break;
20632|     20|                }
20633|     64|                {
20634|     64|                    tmp = strncmp(cp, lookfor, len);
20635|     64|                }
20636|     64|                if (tmp == 0) {
20637|     16|                    return ((char * /* __attribute__((__pure__)) */)((char *)cp));
20638|     16|                }
20639|     48|                cp++;
20640|     48|            }
20641|      0|while_break___0: /* CIL Label */
20642|      0|            ;
20643|      0|        }
20644|     20|while_break:
20645|     20|        ;
20646|     20|        return ((char * /* __attribute__((__pure__)) */)((char *)((void *)0)));
20647|      0|    }
20648|      0|}
20649|       |static void freelist(char **cpp)
20650|     10|{
20651|     10|    char **tmp;
20652|       |
20653|     10|    {
20654|     10|        {
20655|     20|            while (1) {
20656|     20|while_continue: /* CIL Label */
20657|     20|                ;
20658|       |
20659|     20|                if (!*cpp) {
20660|     10|                    goto while_break;
20661|     10|                }
20662|     10|                {
20663|     10|                    tmp = cpp;
20664|     10|                    cpp++;
20665|     10|                    free((void *)*tmp);
20666|     10|                }
20667|     10|            }
20668|      0|while_break___0: /* CIL Label */
20669|      0|            ;
20670|      0|        }
20671|     10|while_break:
20672|     10|        ;
20673|     10|        return;
20674|      0|    }
20675|      0|}
20676|       |static char **enlist(char **cpp, char *new, size_t len)
20677|     26|{
20678|     26|    size_t i;
20679|     26|    size_t j;
20680|     26|    void *tmp;
20681|     26|    char *__attribute__((__pure__)) tmp___0;
20682|     26|    char *__attribute__((__pure__)) tmp___1;
20683|       |
20684|     26|    {
20685|     26|        {
20686|     26|            tmp = xmalloc(len + 1UL);
20687|     26|            new = (char *)memcpy((void * /* __restrict  */)tmp, (void const * /* __restrict  */)((void const *)new),
20688|     26|                                 len);
20689|     26|            *(new + len) = (char)'\000';
20690|     26|            i = (size_t)0;
20691|     26|        }
20692|     26|        {
20693|     42|            while (1) {
20694|     42|while_continue: /* CIL Label */
20695|     42|                ;
20696|       |
20697|     42|                if (!((unsigned long)*(cpp + i) != (unsigned long)((void *)0))) {
20698|     22|                    goto while_break;
20699|     22|                }
20700|     20|                {
20701|     20|                    tmp___0 = istrstr((char const *)*(cpp + i), (char const *)new);
20702|     20|                }
20703|     20|                if ((unsigned long)tmp___0 != (unsigned long)((void *)0)) {
20704|      4|                    {
20705|      4|                        free((void *)new);
20706|      4|                    }
20707|      4|                    return (cpp);
20708|      4|                }
20709|     16|                i++;
20710|     16|            }
20711|      0|while_break___1: /* CIL Label */
20712|      0|            ;
20713|      0|        }
20714|     22|while_break:
20715|     22|        j = (size_t)0;
20716|     22|        {
20717|     30|            while (1) {
20718|     30|while_continue___0: /* CIL Label */
20719|     30|                ;
20720|       |
20721|     30|                if (!((unsigned long)*(cpp + j) != (unsigned long)((void *)0))) {
20722|     14|                    goto while_break___0;
20723|     14|                }
20724|     16|                {
20725|     16|                    tmp___1 = istrstr((char const *)new, (char const *)*(cpp + j));
20726|     16|                }
20727|     16|                if ((unsigned long)tmp___1 == (unsigned long)((void *)0)) {
20728|      4|                    j++;
20729|      4|                }
20730|     12|                else {
20731|     12|                    {
20732|     12|                        free((void *)*(cpp + j));
20733|     12|                        i--;
20734|     12|                    }
20735|     12|                    if (i == j) {
20736|      8|                        goto while_break___0;
20737|      8|                    }
20738|      4|                    *(cpp + j) = *(cpp + i);
20739|      4|                    *(cpp + i) = (char *)((void *)0);
20740|      4|                }
20741|     16|            }
20742|      0|while_break___2: /* CIL Label */
20743|      0|            ;
20744|      0|        }
20745|     22|while_break___0 : {
20746|     22|            cpp = (char **)xnrealloc((void *)cpp, i + 2UL, sizeof(*cpp));
20747|     22|            *(cpp + i) = new;
20748|     22|            *(cpp + (i + 1UL)) = (char *)((void *)0);
20749|     22|        }
20750|     22|        return (cpp);
20751|      0|    }
20752|      0|}
20753|       |static char **comsubs(char *left, char const *right)
20754|      0|{
20755|      0|    char **cpp;
20756|      0|    char **tmp;
20757|      0|    char *lcp;
20758|      0|    size_t len;
20759|      0|    char *rcp;
20760|      0|    char *tmp___0;
20761|      0|    size_t i;
20762|       |
20763|      0|    {
20764|      0|        {
20765|      0|            tmp = (char **)xzalloc(sizeof(*cpp));
20766|      0|            cpp = tmp;
20767|      0|            lcp = left;
20768|      0|        }
20769|      0|        {
20770|      0|            while (1) {
20771|      0|while_continue: /* CIL Label */
20772|      0|                ;
20773|       |
20774|      0|                if (!((int)*lcp != 0)) {
20775|      0|                    goto while_break;
20776|      0|                }
20777|      0|                {
20778|      0|                    len = (size_t)0;
20779|      0|                    tmp___0 = strchr(right, (int)*lcp);
20780|      0|                    rcp = tmp___0;
20781|      0|                }
20782|      0|                {
20783|      0|                    while (1) {
20784|      0|while_continue___0: /* CIL Label */
20785|      0|                        ;
20786|       |
20787|      0|                        if (!((unsigned long)rcp != (unsigned long)((void *)0))) {
20788|      0|                            goto while_break___0;
20789|      0|                        }
20790|      0|                        i = (size_t)1;
20791|      0|                        {
20792|      0|                            while (1) {
20793|      0|while_continue___1: /* CIL Label */
20794|      0|                                ;
20795|       |
20796|      0|                                if ((int)*(lcp + i) != 0) {
20797|      0|                                    if (!((int)*(lcp + i) == (int)*(rcp + i))) {
20798|      0|                                        goto while_break___1;
20799|      0|                                    }
20800|      0|                                }
20801|      0|                                else {
20802|      0|                                    goto while_break___1;
20803|      0|                                }
20804|      0|                                goto __Cont;
20805|      0|__Cont:
20806|      0|                                i++;
20807|      0|                            }
20808|      0|while_break___4: /* CIL Label */
20809|      0|                            ;
20810|      0|                        }
20811|      0|while_break___1:
20812|      0|                        ;
20813|      0|                        if (i > len) {
20814|      0|                            len = i;
20815|      0|                        }
20816|      0|                        {
20817|      0|                            rcp = strchr((char const *)(rcp + 1), (int)*lcp);
20818|      0|                        }
20819|      0|                    }
20820|      0|while_break___3: /* CIL Label */
20821|      0|                    ;
20822|      0|                }
20823|      0|while_break___0:
20824|      0|                ;
20825|      0|                if (len != 0UL) {
20826|      0|                    {
20827|      0|                        cpp = enlist(cpp, lcp, len);
20828|      0|                    }
20829|      0|                }
20830|      0|                lcp++;
20831|      0|            }
20832|      0|while_break___2: /* CIL Label */
20833|      0|            ;
20834|      0|        }
20835|      0|while_break:
20836|      0|        ;
20837|      0|        return (cpp);
20838|      0|    }
20839|      0|}
20840|       |static char **addlists(char **old, char **new)
20841|      8|{
20842|      8|    size_t tmp;
20843|       |
20844|      8|    {
20845|      8|        {
20846|     16|            while (1) {
20847|     16|while_continue: /* CIL Label */
20848|     16|                ;
20849|       |
20850|     16|                if (!*new) {
20851|      8|                    goto while_break;
20852|      8|                }
20853|      8|                {
20854|      8|                    tmp = strlen((char const *)*new);
20855|      8|                    old = enlist(old, *new, tmp);
20856|      8|                    new ++;
20857|      8|                }
20858|      8|            }
20859|      0|while_break___0: /* CIL Label */
20860|      0|            ;
20861|      0|        }
20862|      8|while_break:
20863|      8|        ;
20864|      8|        return (old);
20865|      0|    }
20866|      0|}
20867|       |static char **inboth(char **left, char **right)
20868|      0|{
20869|      0|    char **both;
20870|      0|    char **tmp;
20871|      0|    size_t lnum;
20872|      0|    size_t rnum;
20873|      0|    char **temp;
20874|      0|    char **tmp___0;
20875|       |
20876|      0|    {
20877|      0|        {
20878|      0|            tmp = (char **)xzalloc(sizeof(*both));
20879|      0|            both = tmp;
20880|      0|            lnum = (size_t)0;
20881|      0|        }
20882|      0|        {
20883|      0|            while (1) {
20884|      0|while_continue: /* CIL Label */
20885|      0|                ;
20886|       |
20887|      0|                if (!((unsigned long)*(left + lnum) != (unsigned long)((void *)0))) {
20888|      0|                    goto while_break;
20889|      0|                }
20890|      0|                rnum = (size_t)0;
20891|      0|                {
20892|      0|                    while (1) {
20893|      0|while_continue___0: /* CIL Label */
20894|      0|                        ;
20895|       |
20896|      0|                        if (!((unsigned long)*(right + rnum) != (unsigned long)((void *)0))) {
20897|      0|                            goto while_break___0;
20898|      0|                        }
20899|      0|                        {
20900|      0|                            tmp___0 = comsubs(*(left + lnum), (char const *)*(right + rnum));
20901|      0|                            temp = tmp___0;
20902|      0|                            both = addlists(both, temp);
20903|      0|                            freelist(temp);
20904|      0|                            free((void *)temp);
20905|      0|                            rnum++;
20906|      0|                        }
20907|      0|                    }
20908|      0|while_break___2: /* CIL Label */
20909|      0|                    ;
20910|      0|                }
20911|      0|while_break___0:
20912|      0|                lnum++;
20913|      0|            }
20914|      0|while_break___1: /* CIL Label */
20915|      0|            ;
20916|      0|        }
20917|      0|while_break:
20918|      0|        ;
20919|      0|        return (both);
20920|      0|    }
20921|      0|}
20922|       |static must *allocmust(must *mp)
20923|     10|{
20924|     10|    must *new_mp;
20925|     10|    must *tmp;
20926|       |
20927|     10|    {
20928|     10|        {
20929|     10|            tmp = (must *)xmalloc(sizeof(*new_mp));
20930|     10|            new_mp = tmp;
20931|     10|            new_mp->in = (char **)xzalloc(sizeof(*(new_mp->in)));
20932|     10|            new_mp->left = (char *)xzalloc((size_t)2);
20933|     10|            new_mp->right = (char *)xzalloc((size_t)2);
20934|     10|            new_mp->is = (char *)xzalloc((size_t)2);
20935|     10|            new_mp->begline = (_Bool)0;
20936|     10|            new_mp->endline = (_Bool)0;
20937|     10|            new_mp->prev = mp;
20938|     10|        }
20939|     10|        return (new_mp);
20940|     10|    }
20941|     10|}
20942|       |static void resetmust(must *mp)
20943|      0|{
20944|      0|    char tmp;
20945|      0|    char tmp___0;
20946|       |
20947|      0|    {
20948|      0|        {
20949|      0|            freelist(mp->in);
20950|      0|            *(mp->in + 0) = (char *)((void *)0);
20951|      0|            tmp___0 = (char)'\000';
20952|      0|            *(mp->is + 0) = tmp___0;
20953|      0|            tmp = tmp___0;
20954|      0|            *(mp->right + 0) = tmp;
20955|      0|            *(mp->left + 0) = tmp;
20956|      0|            mp->begline = (_Bool)0;
20957|      0|            mp->endline = (_Bool)0;
20958|      0|        }
20959|      0|        return;
20960|      0|    }
20961|      0|}
20962|       |static void freemust(must *mp)
20963|     10|{
20964|       |
20965|     10|    {
20966|     10|        {
20967|     10|            freelist(mp->in);
20968|     10|            free((void *)mp->in);
20969|     10|            free((void *)mp->left);
20970|     10|            free((void *)mp->right);
20971|     10|            free((void *)mp->is);
20972|     10|            free((void *)mp);
20973|     10|        }
20974|     10|        return;
20975|     10|    }
20976|     10|}
20977|       |static void dfamust(struct dfa *d)
20978|      2|{
20979|      2|    must *mp;
20980|      2|    char const *result;
20981|      2|    size_t ri;
20982|      2|    size_t i;
20983|      2|    _Bool exact;
20984|      2|    _Bool begline___0;
20985|      2|    _Bool endline;
20986|      2|    struct dfamust *dm;
20987|      2|    token t;
20988|      2|    char **new;
20989|      2|    must *rmp;
20990|      2|    must *lmp;
20991|      2|    size_t j;
20992|      2|    size_t ln;
20993|      2|    size_t rn;
20994|      2|    size_t n;
20995|      2|    int tmp;
20996|      2|    size_t tmp___0;
20997|      2|    size_t tmp___1;
20998|      2|    int tmp___2;
20999|      2|    must *rmp___0;
21000|      2|    must *lmp___0;
21001|      2|    size_t lrlen;
21002|      2|    size_t tmp___3;
21003|      2|    size_t rllen;
21004|      2|    size_t tmp___4;
21005|      2|    char *tp;
21006|      2|    char *tmp___5;
21007|      2|    charclass *ccl;
21008|      2|    int j___0;
21009|      2|    _Bool tmp___6;
21010|      2|    _Bool tmp___7;
21011|      2|    int tmp___8;
21012|      2|    int tmp___9;
21013|      2|    char tmp___10;
21014|      2|    char tmp___11;
21015|      2|    int tmp___12;
21016|      2|    char tmp___13;
21017|      2|    char tmp___14;
21018|      2|    must *prev;
21019|      2|    char *__cil_tmp45;
21020|       |
21021|      2|    {
21022|      2|        mp = (must *)((void *)0);
21023|      2|        result = "";
21024|      2|        exact = (_Bool)0;
21025|      2|        begline___0 = (_Bool)0;
21026|      2|        endline = (_Bool)0;
21027|      2|        ri = (size_t)0;
21028|      2|        {
21029|     20|            while (1) {
21030|     20|while_continue: /* CIL Label */
21031|     20|                ;
21032|       |
21033|     20|                if (!(ri < d->tindex)) {
21034|      0|                    goto while_break;
21035|      0|                }
21036|     20|                t = *(d->tokens + ri);
21037|     20|                if (t == 258L) {
21038|      0|                    goto case_258;
21039|      0|                }
21040|     20|                if (t == 259L) {
21041|      0|                    goto case_259;
21042|      0|                }
21043|     20|                if (t == 270L) {
21044|      0|                    goto case_270;
21045|      0|                }
21046|     20|                if (t == 271L) {
21047|      0|                    goto case_270;
21048|      0|                }
21049|     20|                if (t == 256L) {
21050|      0|                    goto case_256;
21051|      0|                }
21052|     20|                if (t == 260L) {
21053|      0|                    goto case_256;
21054|      0|                }
21055|     20|                if (t == 261L) {
21056|      0|                    goto case_256;
21057|      0|                }
21058|     20|                if (t == 262L) {
21059|      0|                    goto case_256;
21060|      0|                }
21061|     20|                if (t == 263L) {
21062|      0|                    goto case_256;
21063|      0|                }
21064|     20|                if (t == 257L) {
21065|      0|                    goto case_256;
21066|      0|                }
21067|     20|                if (t == 272L) {
21068|      0|                    goto case_256;
21069|      0|                }
21070|     20|                if (t == 273L) {
21071|      0|                    goto case_256;
21072|      0|                }
21073|     20|                if (t == 265L) {
21074|      0|                    goto case_265;
21075|      0|                }
21076|     20|                if (t == 264L) {
21077|      0|                    goto case_265;
21078|      0|                }
21079|     20|                if (t == 269L) {
21080|      0|                    goto case_269;
21081|      0|                }
21082|     20|                if (t == 266L) {
21083|      0|                    goto case_266;
21084|      0|                }
21085|     20|                if (t == -1L) {
21086|      2|                    goto case_neg_1;
21087|      2|                }
21088|     18|                if (t == 268L) {
21089|      8|                    goto case_268;
21090|      8|                }
21091|     10|                if (t == 0L) {
21092|      0|                    goto case_0;
21093|      0|                }
21094|     10|                goto switch_default;
21095|     10|case_258 : {
21096|      0|                    mp = allocmust(mp);
21097|      0|                    mp->begline = (_Bool)1;
21098|      0|                }
21099|      0|                goto switch_break;
21100|      0|case_259 : {
21101|      0|                    mp = allocmust(mp);
21102|      0|                    mp->endline = (_Bool)1;
21103|      0|                }
21104|      0|                goto switch_break;
21105|      0|case_270 : {
21106|      0|                    __assert_fail("!\"neither LPAREN nor RPAREN may appear here\"", "/home/khheo/project/benchmark/grep-2.19/src/dfa.c",
21107|      0|                                  3951U, "dfamust");
21108|     10|                }
21109|      0|case_256 : {
21110|      0|                    mp = allocmust(mp);
21111|      0|                }
21112|      0|                goto switch_break;
21113|      0|case_265 : {
21114|      0|                    resetmust(mp);
21115|      0|                }
21116|      0|                goto switch_break;
21117|      0|case_269 : {
21118|      0|                    rmp = mp;
21119|      0|                    mp = mp->prev;
21120|      0|                    lmp = mp;
21121|      0|                    tmp = strcmp((char const *)lmp->is, (char const *)rmp->is);
21122|      0|                }
21123|      0|                if (!(tmp == 0)) {
21124|      0|                    *(lmp->is + 0) = (char)'\000';
21125|      0|                }
21126|      0|                lmp->begline = (_Bool)((int)lmp->begline & (int)rmp->begline);
21127|      0|                lmp->endline = (_Bool)((int)lmp->endline & (int)rmp->endline);
21128|      0|                i = (size_t)0;
21129|      0|                {
21130|      0|                    while (1) {
21131|      0|while_continue___0: /* CIL Label */
21132|      0|                        ;
21133|       |
21134|      0|                        if ((int)*(lmp->left + i) != 0) {
21135|      0|                            if (!((int)*(lmp->left + i) == (int)*(rmp->left + i))) {
21136|      0|                                goto while_break___0;
21137|      0|                            }
21138|      0|                        }
21139|      0|                        else {
21140|      0|                            goto while_break___0;
21141|      0|                        }
21142|      0|                        i++;
21143|      0|                    }
21144|      0|while_break___8: /* CIL Label */
21145|      0|                    ;
21146|      0|                }
21147|      0|while_break___0 : {
21148|      0|                    *(lmp->left + i) = (char)'\000';
21149|      0|                    ln = strlen((char const *)lmp->right);
21150|      0|                    rn = strlen((char const *)rmp->right);
21151|      0|                    n = ln;
21152|      0|                }
21153|      0|                if (n > rn) {
21154|      0|                    n = rn;
21155|      0|                }
21156|      0|                i = (size_t)0;
21157|      0|                {
21158|      0|                    while (1) {
21159|      0|while_continue___1: /* CIL Label */
21160|      0|                        ;
21161|       |
21162|      0|                        if (!(i < n)) {
21163|      0|                            goto while_break___1;
21164|      0|                        }
21165|      0|                        if ((int)*(lmp->right + ((ln - i) - 1UL)) != (int)*(rmp->right + ((rn - i) - 1UL))) {
21166|      0|                            goto while_break___1;
21167|      0|                        }
21168|      0|                        i++;
21169|      0|                    }
21170|      0|while_break___9: /* CIL Label */
21171|      0|                    ;
21172|      0|                }
21173|      0|while_break___1:
21174|      0|                j = (size_t)0;
21175|      0|                {
21176|      0|                    while (1) {
21177|      0|while_continue___2: /* CIL Label */
21178|      0|                        ;
21179|       |
21180|      0|                        if (!(j < i)) {
21181|      0|                            goto while_break___2;
21182|      0|                        }
21183|      0|                        *(lmp->right + j) = *(lmp->right + ((ln - i) + j));
21184|      0|                        j++;
21185|      0|                    }
21186|      0|while_break___10: /* CIL Label */
21187|      0|                    ;
21188|      0|                }
21189|      0|while_break___2 : {
21190|      0|                    *(lmp->right + j) = (char)'\000';
21191|      0|                    new = inboth(lmp->in, rmp->in);
21192|      0|                    freelist(lmp->in);
21193|      0|                    free((void *)lmp->in);
21194|      0|                    lmp->in = new;
21195|      0|                    freemust(rmp);
21196|      0|                }
21197|      0|                goto switch_break;
21198|      0|case_266:
21199|      0|                *(mp->is + 0) = (char)'\000';
21200|      0|                goto switch_break;
21201|      2|case_neg_1:
21202|      2|                if (!(!mp->prev)) {
21203|      0|                    {
21204|      0|                        __assert_fail("!mp->prev", "/home/khheo/project/benchmark/grep-2.19/src/dfa.c",
21205|      0|                                      4011U, "dfamust");
21206|      0|                    }
21207|      0|                }
21208|      2|                i = (size_t)0;
21209|      2|                {
21210|      4|                    while (1) {
21211|      4|while_continue___3: /* CIL Label */
21212|      4|                        ;
21213|       |
21214|      4|                        if (!((unsigned long)*(mp->in + i) != (unsigned long)((void *)0))) {
21215|      2|                            goto while_break___3;
21216|      2|                        }
21217|      2|                        {
21218|      2|                            tmp___0 = strlen((char const *)*(mp->in + i));
21219|      2|                            tmp___1 = strlen(result);
21220|      2|                        }
21221|      2|                        if (tmp___0 > tmp___1) {
21222|      2|                            result = (char const *)*(mp->in + i);
21223|      2|                        }
21224|      2|                        i++;
21225|      2|                    }
21226|      0|while_break___11: /* CIL Label */
21227|      0|                    ;
21228|      0|                }
21229|      2|while_break___3 : {
21230|      2|                    tmp___2 = strcmp(result, (char const *)mp->is);
21231|      2|                }
21232|      2|                if (tmp___2 == 0) {
21233|      2|                    exact = (_Bool)1;
21234|      2|                    begline___0 = mp->begline;
21235|      2|                    endline = mp->endline;
21236|      2|                }
21237|      2|                goto done;
21238|      8|case_268 : {
21239|      8|                    rmp___0 = mp;
21240|      8|                    mp = mp->prev;
21241|      8|                    lmp___0 = mp;
21242|      8|                    lmp___0->in = addlists(lmp___0->in, rmp___0->in);
21243|      8|                }
21244|      8|                if ((int)*(lmp___0->right + 0) != 0) {
21245|      8|                    if ((int)*(rmp___0->left + 0) != 0) {
21246|      8|                        {
21247|      8|                            tmp___3 = strlen((char const *)lmp___0->right);
21248|      8|                            lrlen = tmp___3;
21249|      8|                            tmp___4 = strlen((char const *)rmp___0->left);
21250|      8|                            rllen = tmp___4;
21251|      8|                            tmp___5 = (char *)xmalloc(lrlen + rllen);
21252|      8|                            tp = tmp___5;
21253|      8|                            memcpy((void * /* __restrict  */)((void *)tp), (void const * /* __restrict  */)((void const *)lmp___0->right),
21254|      8|                                   lrlen);
21255|      8|                            memcpy((void * /* __restrict  */)((void *)(tp + lrlen)), (void const * /* __restrict  */)((void const *)rmp___0->left),
21256|      8|                                   rllen);
21257|      8|                            lmp___0->in = enlist(lmp___0->in, tp, lrlen + rllen);
21258|      8|                            free((void *)tp);
21259|      8|                        }
21260|      8|                    }
21261|      8|                }
21262|      8|                if ((int)*(lmp___0->is + 0) != 0) {
21263|      8|                    {
21264|      8|                        lmp___0->left = icatalloc(lmp___0->left, (char const *)rmp___0->left);
21265|      8|                    }
21266|      8|                }
21267|      8|                if ((int)*(rmp___0->is + 0) == 0) {
21268|      0|                    *(lmp___0->right + 0) = (char)'\000';
21269|      0|                }
21270|      8|                {
21271|      8|                    lmp___0->right = icatalloc(lmp___0->right, (char const *)rmp___0->right);
21272|      8|                }
21273|      8|                if ((int)*(lmp___0->is + 0) != 0) {
21274|      8|                    goto _L;
21275|      8|                }
21276|      0|                else {
21277|      0|                    if (lmp___0->begline) {
21278|      8|_L:
21279|      8|                        if ((int)*(rmp___0->is + 0) != 0) {
21280|      8|                            {
21281|      8|                                lmp___0->is = icatalloc(lmp___0->is, (char const *)rmp___0->is);
21282|      8|                                lmp___0->endline = rmp___0->endline;
21283|      8|                            }
21284|      8|                        }
21285|      0|                        else {
21286|      0|                            if (rmp___0->endline) {
21287|      0|                                {
21288|      0|                                    lmp___0->is = icatalloc(lmp___0->is, (char const *)rmp___0->is);
21289|      0|                                    lmp___0->endline = rmp___0->endline;
21290|      0|                                }
21291|      0|                            }
21292|      0|                            else {
21293|      0|                                *(lmp___0->is + 0) = (char)'\000';
21294|      0|                                lmp___0->begline = (_Bool)0;
21295|      0|                                lmp___0->endline = (_Bool)0;
21296|      0|                            }
21297|      0|                        }
21298|      8|                    }
21299|      0|                    else {
21300|      0|                        *(lmp___0->is + 0) = (char)'\000';
21301|      0|                        lmp___0->begline = (_Bool)0;
21302|      0|                        lmp___0->endline = (_Bool)0;
21303|      0|                    }
21304|      0|                }
21305|      8|                {
21306|      8|                    freemust(rmp___0);
21307|      8|                }
21308|      8|                goto switch_break;
21309|      0|case_0:
21310|      0|                goto done;
21311|     10|switch_default : {
21312|     10|                    mp = allocmust(mp);
21313|     10|                }
21314|     10|                if (275L <= t) {
21315|      0|                    ccl = d->charclasses + (t - 275L);
21316|      0|                    j___0 = 0;
21317|      0|                    {
21318|      0|                        while (1) {
21319|      0|while_continue___4: /* CIL Label */
21320|      0|                            ;
21321|       |
21322|      0|                            if (!(j___0 < 256)) {
21323|      0|                                goto while_break___4;
21324|      0|                            }
21325|      0|                            {
21326|      0|                                tmp___6 = tstbit((unsigned int)j___0, (charclass_word * /* const  */)(*ccl));
21327|      0|                            }
21328|      0|                            if (tmp___6) {
21329|      0|                                goto while_break___4;
21330|      0|                            }
21331|      0|                            j___0++;
21332|      0|                        }
21333|      0|while_break___12: /* CIL Label */
21334|      0|                        ;
21335|      0|                    }
21336|      0|while_break___4:
21337|      0|                    ;
21338|      0|                    if (!(j___0 < 256)) {
21339|      0|                        goto switch_break;
21340|      0|                    }
21341|      0|                    t = (token)j___0;
21342|      0|                    {
21343|      0|                        while (1) {
21344|      0|while_continue___5: /* CIL Label */
21345|      0|                            ;
21346|      0|                            j___0++;
21347|      0|                            if (!(j___0 < 256)) {
21348|      0|                                goto while_break___5;
21349|      0|                            }
21350|      0|                            {
21351|      0|                                tmp___7 = tstbit((unsigned int)j___0, (charclass_word * /* const  */)(*ccl));
21352|      0|                            }
21353|      0|                            if (tmp___7) {
21354|      0|                                if (case_fold) {
21355|      0|                                    if (!d->multibyte) {
21356|      0|                                        {
21357|      0|                                            tmp___8 = toupper(j___0);
21358|      0|                                            tmp___9 = toupper((int)t);
21359|      0|                                        }
21360|      0|                                        if (!(tmp___8 == tmp___9)) {
21361|      0|                                            goto while_break___5;
21362|      0|                                        }
21363|      0|                                    }
21364|      0|                                    else {
21365|      0|                                        goto while_break___5;
21366|      0|                                    }
21367|      0|                                }
21368|      0|                                else {
21369|      0|                                    goto while_break___5;
21370|      0|                                }
21371|      0|                            }
21372|      0|                        }
21373|      0|while_break___13: /* CIL Label */
21374|      0|                        ;
21375|      0|                    }
21376|      0|while_break___5:
21377|      0|                    ;
21378|      0|                    if (j___0 < 256) {
21379|      0|                        goto switch_break;
21380|      0|                    }
21381|      0|                }
21382|     10|                if (case_fold) {
21383|      0|                    if (!d->multibyte) {
21384|      0|                        {
21385|      0|                            tmp___12 = toupper((int)t);
21386|      0|                            tmp___11 = (char)tmp___12;
21387|      0|                        }
21388|      0|                    }
21389|      0|                    else {
21390|      0|                        tmp___11 = (char)t;
21391|      0|                    }
21392|      0|                }
21393|     10|                else {
21394|     10|                    tmp___11 = (char)t;
21395|     10|                }
21396|     10|                {
21397|     10|                    *(mp->right + 0) = tmp___11;
21398|     10|                    tmp___10 = tmp___11;
21399|     10|                    *(mp->left + 0) = tmp___10;
21400|     10|                    *(mp->is + 0) = tmp___10;
21401|     10|                    tmp___14 = (char)'\000';
21402|     10|                    *(mp->right + 1) = tmp___14;
21403|     10|                    tmp___13 = tmp___14;
21404|     10|                    *(mp->left + 1) = tmp___13;
21405|     10|                    *(mp->is + 1) = tmp___13;
21406|     10|                    mp->in = enlist(mp->in, mp->is, (size_t)1);
21407|     10|                }
21408|     10|                goto switch_break;
21409|     18|switch_break:
21410|     18|                ri++;
21411|     18|            }
21412|      0|while_break___7: /* CIL Label */
21413|      0|            ;
21414|      0|        }
21415|      0|while_break:
21416|      0|        ;
21417|      2|done:
21418|      2|        if (*result) {
21419|      2|            {
21420|      2|                dm = (struct dfamust *)xmalloc(sizeof(*dm));
21421|      2|                dm->exact = exact;
21422|      2|                dm->begline = begline___0;
21423|      2|                dm->endline = endline;
21424|      2|                dm->must = xstrdup(result);
21425|      2|                dm->next = d->musts;
21426|      2|                d->musts = dm;
21427|      2|            }
21428|      2|        }
21429|      2|        {
21430|      4|            while (1) {
21431|      4|while_continue___6: /* CIL Label */
21432|      4|                ;
21433|       |
21434|      4|                if (!mp) {
21435|      2|                    goto while_break___6;
21436|      2|                }
21437|      2|                {
21438|      2|                    prev = mp->prev;
21439|      2|                    freemust(mp);
21440|      2|                    mp = prev;
21441|      2|                }
21442|      2|            }
21443|      0|while_break___14: /* CIL Label */
21444|      0|            ;
21445|      0|        }
21446|      2|while_break___6:
21447|      2|        ;
21448|      2|        return;
21449|      0|    }
21450|      0|}
21451|       |struct dfa *dfaalloc(void)
21452|      4|{
21453|      4|    struct dfa *tmp;
21454|       |
21455|      4|    {
21456|      4|        {
21457|      4|            tmp = (struct dfa *)xmalloc(sizeof(struct dfa));
21458|      4|        }
21459|      4|        return (tmp);
21460|      4|    }
21461|      4|}
21462|       |struct dfamust *__attribute__((__pure__)) dfamusts(struct dfa const *d)
21463|      4|{
21464|       |
21465|      4|    {
21466|      4|        return ((struct dfamust * /* __attribute__((__pure__)) */)((struct dfamust *)d->musts));
21467|      4|    }
21468|      4|}
21469|       |extern __attribute__((__nothrow__)) size_t mbrlen(char const *__restrict __s,
21470|       |        size_t __n, mbstate_t *__restrict __ps);
21471|       |void build_mbclen_cache(void);
21472|       |static size_t mbclen_cache[256];
21473|       |static char trans[256];
21474|       |void kwsinit(kwset_t *kwset___1)
21475|      2|{
21476|      2|    int i;
21477|      2|    size_t tmp;
21478|       |
21479|      2|    {
21480|      2|        if (match_icase) {
21481|      0|            {
21482|      0|                tmp = __ctype_get_mb_cur_max();
21483|      0|            }
21484|      0|            if (tmp == 1UL) {
21485|      0|                i = 0;
21486|      0|                {
21487|      0|                    while (1) {
21488|      0|while_continue: /* CIL Label */
21489|      0|                        ;
21490|       |
21491|      0|                        if (!(i < 256)) {
21492|      0|                            goto while_break;
21493|      0|                        }
21494|      0|                        {
21495|      0|                            trans[i] = (char)toupper(i);
21496|      0|                            i++;
21497|      0|                        }
21498|      0|                    }
21499|      0|while_break___0: /* CIL Label */
21500|      0|                    ;
21501|      0|                }
21502|      0|while_break : {
21503|      0|                    *kwset___1 = kwsalloc((char const *)(trans));
21504|      0|                }
21505|      0|            }
21506|      0|            else {
21507|      0|                {
21508|      0|                    *kwset___1 = kwsalloc((char const *)((void *)0));
21509|      0|                }
21510|      0|            }
21511|      0|        }
21512|      2|        else {
21513|      2|            {
21514|      2|                *kwset___1 = kwsalloc((char const *)((void *)0));
21515|      2|            }
21516|      2|        }
21517|      2|        if (!*kwset___1) {
21518|      0|            {
21519|      0|                xalloc_die();
21520|      0|            }
21521|      0|        }
21522|      2|        return;
21523|      2|    }
21524|      2|}
21525|       |static char *out;
21526|       |static mb_len_map_t *len_map;
21527|       |static size_t outalloc;
21528|       |char *mbtoupper(char const *beg, size_t *n, mb_len_map_t **len_map_p)
21529|      0|{
21530|      0|    size_t outlen;
21531|      0|    size_t mb_cur_max;
21532|      0|    mbstate_t is;
21533|      0|    mbstate_t os;
21534|      0|    char const *end;
21535|      0|    char *p;
21536|      0|    mb_len_map_t *m;
21537|      0|    _Bool lengths_differ;
21538|      0|    wchar_t wc;
21539|      0|    size_t mbclen;
21540|      0|    size_t tmp;
21541|      0|    size_t dm;
21542|      0|    mb_len_map_t *tmp___0;
21543|      0|    char *tmp___1;
21544|      0|    char const *tmp___2;
21545|      0|    size_t ombclen;
21546|      0|    wint_t tmp___3;
21547|      0|    void *__cil_tmp27;
21548|      0|    void *__cil_tmp28;
21549|       |
21550|      0|    {
21551|      0|        lengths_differ = (_Bool)0;
21552|      0|        if (*n > outalloc) {
21553|      0|            goto _L;
21554|      0|        }
21555|      0|        else {
21556|      0|            if (outalloc == 0UL) {
21557|      0|_L:
21558|      0|                if (1UL > *n) {
21559|      0|                    outalloc = (size_t)1;
21560|      0|                }
21561|      0|                else {
21562|      0|                    outalloc = *n;
21563|      0|                }
21564|      0|                {
21565|      0|                    out = (char *)xrealloc((void *)out, outalloc);
21566|      0|                    len_map = (mb_len_map_t *)xrealloc((void *)len_map, outalloc);
21567|      0|                }
21568|      0|            }
21569|      0|        }
21570|      0|        if (!out) {
21571|      0|            {
21572|      0|                __assert_fail("out", "/home/khheo/project/benchmark/grep-2.19/src/searchutils.c",
21573|      0|                              97U, "mbtoupper");
21574|      0|            }
21575|      0|        }
21576|      0|        if (!len_map) {
21577|      0|            {
21578|      0|                __assert_fail("len_map", "/home/khheo/project/benchmark/grep-2.19/src/searchutils.c",
21579|      0|                              98U, "mbtoupper");
21580|      0|            }
21581|      0|        }
21582|      0|        if (*n == 0UL) {
21583|      0|            return (out);
21584|      0|        }
21585|      0|        {
21586|      0|            memset((void *)(&is), 0, sizeof(is));
21587|      0|            memset((void *)(&os), 0, sizeof(os));
21588|      0|            end = beg + *n;
21589|      0|            mb_cur_max = __ctype_get_mb_cur_max();
21590|      0|            p = out;
21591|      0|            m = len_map;
21592|      0|            outlen = (size_t)0;
21593|      0|        }
21594|      0|        {
21595|      0|            while (1) {
21596|      0|while_continue: /* CIL Label */
21597|      0|                ;
21598|       |
21599|      0|                if (!((unsigned long)beg < (unsigned long)end)) {
21600|      0|                    goto while_break;
21601|      0|                }
21602|      0|                {
21603|      0|                    tmp = mbrtowc((wchar_t * /* __restrict  */)(&wc), (char const * /* __restrict  */)beg,
21604|      0|                                  (size_t)(end - beg), (mbstate_t * /* __restrict  */)(&is));
21605|      0|                    mbclen = tmp;
21606|      0|                }
21607|      0|                if (outlen + mb_cur_max >= outalloc) {
21608|      0|                    {
21609|      0|                        dm = (size_t)(m - len_map);
21610|      0|                        out = (char *)x2nrealloc((void *)out, &outalloc, (size_t)1);
21611|      0|                        len_map = (mb_len_map_t *)xrealloc((void *)len_map, outalloc);
21612|      0|                        p = out + outlen;
21613|      0|                        m = len_map + dm;
21614|      0|                    }
21615|      0|                }
21616|      0|                if (mbclen == 0xffffffffffffffffUL) {
21617|      0|                    goto _L___0;
21618|      0|                }
21619|      0|                else {
21620|      0|                    if (mbclen == 0xfffffffffffffffeUL) {
21621|      0|                        goto _L___0;
21622|      0|                    }
21623|      0|                    else {
21624|      0|                        if (mbclen == 0UL) {
21625|      0|_L___0 : {
21626|      0|                                tmp___0 = m;
21627|      0|                                m++;
21628|      0|                                *tmp___0 = (mb_len_map_t)0;
21629|      0|                                tmp___1 = p;
21630|      0|                                p++;
21631|      0|                                tmp___2 = beg;
21632|      0|                                beg++;
21633|      0|                                *tmp___1 = (char)*tmp___2;
21634|      0|                                outlen++;
21635|      0|                                memset((void *)(&is), 0, sizeof(is));
21636|      0|                                memset((void *)(&os), 0, sizeof(os));
21637|      0|                            }
21638|      0|                        }
21639|      0|                        else {
21640|      0|                            {
21641|      0|                                beg += mbclen;
21642|      0|                                tmp___3 = towupper((wint_t)wc);
21643|      0|                                ombclen = wcrtomb((char * /* __restrict  */)p, (wchar_t)tmp___3, (mbstate_t * /* __restrict  */)(&os));
21644|      0|                                *m = (mb_len_map_t)(mbclen - ombclen);
21645|      0|                                memset((void *)(m + 1), 0, ombclen - 1UL);
21646|      0|                                m += ombclen;
21647|      0|                                p += ombclen;
21648|      0|                                outlen += ombclen;
21649|      0|                                lengths_differ = (_Bool)((int)lengths_differ | (mbclen != ombclen));
21650|      0|                            }
21651|      0|                        }
21652|      0|                    }
21653|      0|                }
21654|      0|            }
21655|      0|while_break___0: /* CIL Label */
21656|      0|            ;
21657|      0|        }
21658|      0|while_break:
21659|      0|        ;
21660|      0|        if (lengths_differ) {
21661|      0|            *len_map_p = len_map;
21662|      0|        }
21663|      0|        else {
21664|      0|            *len_map_p = (mb_len_map_t *)((void *)0);
21665|      0|        }
21666|      0|        *n = (size_t)(p - out);
21667|      0|        *p = (char)0;
21668|      0|        return (out);
21669|      0|    }
21670|      0|}
21671|       |void build_mbclen_cache(void)
21672|      0|{
21673|      0|    int i;
21674|      0|    char c;
21675|      0|    unsigned char uc;
21676|      0|    mbstate_t mbs;
21677|      0|    void *__cil_tmp6;
21678|       |
21679|      0|    {
21680|      0|        i = -128;
21681|      0|        {
21682|      0|            while (1) {
21683|      0|while_continue: /* CIL Label */
21684|      0|                ;
21685|       |
21686|      0|                if (!(i <= 127)) {
21687|      0|                    goto while_break;
21688|      0|                }
21689|      0|                {
21690|      0|                    c = (char)i;
21691|      0|                    uc = (unsigned char)i;
21692|      0|                    mbs.__count = 0;
21693|      0|                    mbs.__value.__wch = 0U;
21694|      0|                    mbclen_cache[uc] = mbrlen((char const * /* __restrict  */)((char const *)(&c)),
21695|      0|                                              (size_t)1, (mbstate_t * /* __restrict  */)(&mbs));
21696|      0|                    i++;
21697|      0|                }
21698|      0|            }
21699|      0|while_break___0: /* CIL Label */
21700|      0|            ;
21701|      0|        }
21702|      0|while_break:
21703|      0|        ;
21704|      0|        return;
21705|      0|    }
21706|      0|}
21707|       |ptrdiff_t mb_goback(char const **mb_start, char const *cur, char const *end)
21708|      0|{
21709|      0|    char const *p;
21710|      0|    char const *p0;
21711|      0|    mbstate_t cur_state;
21712|      0|    size_t mbclen;
21713|      0|    unsigned char tmp;
21714|      0|    long tmp___0;
21715|      0|    void *__cil_tmp11;
21716|       |
21717|      0|    {
21718|      0|        {
21719|      0|            p = *mb_start;
21720|      0|            p0 = p;
21721|      0|            memset((void *)(&cur_state), 0, sizeof(cur_state));
21722|      0|        }
21723|      0|        {
21724|      0|            while (1) {
21725|      0|while_continue: /* CIL Label */
21726|      0|                ;
21727|       |
21728|      0|                if (!((unsigned long)p < (unsigned long)cur)) {
21729|      0|                    goto while_break;
21730|      0|                }
21731|      0|                {
21732|      0|                    tmp = to_uchar((char)*p);
21733|      0|                    mbclen = mbclen_cache[tmp];
21734|      0|                }
21735|      0|                if (mbclen == 0xfffffffffffffffeUL) {
21736|      0|                    {
21737|      0|                        mbclen = mbrlen((char const * /* __restrict  */)p, (size_t)(end - p), (mbstate_t * /* __restrict  */)(&cur_state));
21738|      0|                    }
21739|      0|                }
21740|      0|                if (0UL < mbclen) {
21741|      0|                    if (!(mbclen < 0xfffffffffffffffeUL)) {
21742|      0|                        {
21743|      0|                            mbclen = (size_t)1;
21744|      0|                            memset((void *)(&cur_state), 0, sizeof(cur_state));
21745|      0|                        }
21746|      0|                    }
21747|      0|                }
21748|      0|                else {
21749|      0|                    {
21750|      0|                        mbclen = (size_t)1;
21751|      0|                        memset((void *)(&cur_state), 0, sizeof(cur_state));
21752|      0|                    }
21753|      0|                }
21754|      0|                p0 = p;
21755|      0|                p += mbclen;
21756|      0|            }
21757|      0|while_break___0: /* CIL Label */
21758|      0|            ;
21759|      0|        }
21760|      0|while_break:
21761|      0|        *mb_start = p;
21762|      0|        if ((unsigned long)p == (unsigned long)cur) {
21763|      0|            tmp___0 = 0L;
21764|      0|        }
21765|      0|        else {
21766|      0|            tmp___0 = cur - p0;
21767|      0|        }
21768|      0|        return (tmp___0);
21769|      0|    }
21770|      0|}
21771|       |wint_t mb_prev_wc(char const *buf, char const *cur, char const *end)
21772|      0|{
21773|      0|    char const *p;
21774|      0|    ptrdiff_t tmp;
21775|      0|    wint_t tmp___0;
21776|       |
21777|      0|    {
21778|      0|        if ((unsigned long)cur == (unsigned long)buf) {
21779|      0|            return (4294967295U);
21780|      0|        }
21781|      0|        {
21782|      0|            p = buf;
21783|      0|            cur--;
21784|      0|            tmp = mb_goback(&p, cur, end);
21785|      0|            cur -= tmp;
21786|      0|            tmp___0 = mb_next_wc(cur, end);
21787|      0|        }
21788|      0|        return (tmp___0);
21789|      0|    }
21790|      0|}
21791|       |wint_t mb_next_wc(char const *cur, char const *end)
21792|      0|{
21793|      0|    wchar_t wc;
21794|      0|    mbstate_t mbs;
21795|      0|    unsigned int tmp___0;
21796|      0|    size_t tmp___1;
21797|      0|    void *__cil_tmp8;
21798|       |
21799|      0|    {
21800|      0|        mbs.__count = 0;
21801|      0|        mbs.__value.__wch = 0U;
21802|      0|        if (end - cur != 0L) {
21803|      0|            {
21804|      0|                tmp___1 = mbrtowc((wchar_t * /* __restrict  */)(&wc), (char const * /* __restrict  */)cur,
21805|      0|                                  (size_t)(end - cur), (mbstate_t * /* __restrict  */)(&mbs));
21806|      0|            }
21807|      0|            if (tmp___1 < 0xfffffffffffffffeUL) {
21808|      0|                tmp___0 = (unsigned int)wc;
21809|      0|            }
21810|      0|            else {
21811|      0|                tmp___0 = 4294967295U;
21812|      0|            }
21813|      0|        }
21814|      0|        else {
21815|      0|            tmp___0 = 4294967295U;
21816|      0|        }
21817|      0|        return (tmp___0);
21818|      0|    }
21819|      0|}
21820|       |extern int fflush_unlocked(FILE *__stream);
21821|       |extern int fputc_unlocked(int __c, FILE *__stream);
21822|       |extern size_t fread_unlocked(void *__restrict __ptr, size_t __size, size_t __n,
21823|       |                             FILE *__restrict __stream);
21824|       |extern size_t fwrite_unlocked(void const *__restrict __ptr, size_t __size, size_t __n,
21825|       |                              FILE *__restrict __stream);
21826|       |extern __attribute__((__nothrow__)) __off_t lseek(int __fd, __off_t __offset, int __whence);
21827|       |extern __attribute__((__nothrow__)) int isatty(int __fd);
21828|       |extern char *optarg;
21829|       |extern int optind;
21830|       |extern __attribute__((__nothrow__)) int getpagesize(void) __attribute__((__const__));
21831|       |extern __attribute__((__nothrow__)) int(__attribute__((__nonnull__(1))) atexit)(void (*__func)(void));
21832|       |extern __attribute__((__nothrow__, __noreturn__)) void exit(int __status);
21833|       |extern __attribute__((__nothrow__)) int(__attribute__((__nonnull__(1, 2))) strcasecmp)(char const *__s1,
21834|       |        char const *__s2) __attribute__((__pure__));
21835|       |extern __attribute__((__nothrow__)) char *textdomain(char const *__domainname);
21836|       |extern __attribute__((__nothrow__)) char *bindtextdomain(char const *__domainname,
21837|       |        char const *__dirname);
21838|       |extern int getopt_long(int ___argc, char *const *___argv, char const *__shortopts,
21839|       |                       struct option const *__longopts, int *__longind);
21840|       |static struct stat out_stat;
21841|       |static int show_help;
21842|       |static int show_version;
21843|       |static int suppress_errors;
21844|       |static int color_option;
21845|       |static int only_matching;
21846|       |static int align_tabs;
21847|       |static char const *group_separator = "--";
21848|       |static char const *selected_match_color = "01;31";
21849|       |static char const *context_match_color = "01;31";
21850|       |static char const *filename_color = "35";
21851|       |static char const *line_num_color = "32";
21852|       |static char const *byte_num_color = "32";
21853|       |static char const *sep_color = "36";
21854|       |static char const *selected_line_color = "";
21855|       |static char const *context_line_color = "";
21856|       |static char const *sgr_start = "\033[%sm\033[K";
21857|       |static char const *sgr_end = "\033[m\033[K";
21858|       |static void pr_sgr_start(char const *s)
21859|      0|{
21860|       |
21861|      0|    {
21862|      0|        if (*s) {
21863|      0|            {
21864|      0|                print_start_colorize(sgr_start, s);
21865|      0|            }
21866|      0|        }
21867|      0|        return;
21868|      0|    }
21869|      0|}
21870|       |static void pr_sgr_end(char const *s)
21871|      0|{
21872|       |
21873|      0|    {
21874|      0|        if (*s) {
21875|      0|            {
21876|      0|                print_end_colorize(sgr_end);
21877|      0|            }
21878|      0|        }
21879|      0|        return;
21880|      0|    }
21881|      0|}
21882|       |static void pr_sgr_start_if(char const *s)
21883|      4|{
21884|       |
21885|      4|    {
21886|      4|        if (color_option) {
21887|      0|            {
21888|      0|                pr_sgr_start(s);
21889|      0|            }
21890|      0|        }
21891|      4|        return;
21892|      4|    }
21893|      4|}
21894|       |static void pr_sgr_end_if(char const *s)
21895|      4|{
21896|       |
21897|      4|    {
21898|      4|        if (color_option) {
21899|      0|            {
21900|      0|                pr_sgr_end(s);
21901|      0|            }
21902|      0|        }
21903|      4|        return;
21904|      4|    }
21905|      4|}
21906|       |static void color_cap_mt_fct(void)
21907|      0|{
21908|       |
21909|      0|    {
21910|      0|        context_match_color = selected_match_color;
21911|      0|        return;
21912|      0|    }
21913|      0|}
21914|       |static void color_cap_rv_fct(void)
21915|      0|{
21916|       |
21917|      0|    {
21918|      0|        color_option = -1;
21919|      0|        return;
21920|      0|    }
21921|      0|}
21922|       |static void color_cap_ne_fct(void)
21923|      0|{
21924|      0|    char *__cil_tmp3;
21925|      0|    char *__cil_tmp4;
21926|       |
21927|      0|    {
21928|      0|        sgr_start = "\033[%sm";
21929|      0|        sgr_end = "\033[m";
21930|      0|        return;
21931|      0|    }
21932|      0|}
21933|       |static struct color_cap const color_dict[12] = {
21934|       |    {"mt", &selected_match_color, &color_cap_mt_fct},
21935|       |    {"ms", &selected_match_color, (void (*)(void))((void *)0)},
21936|       |    {"mc", &context_match_color, (void (*)(void))((void *)0)},
21937|       |    {"fn", &filename_color, (void (*)(void))((void *)0)},
21938|       |    {"ln", &line_num_color, (void (*)(void))((void *)0)},
21939|       |    {"bn", &byte_num_color, (void (*)(void))((void *)0)},
21940|       |    {"se", &sep_color, (void (*)(void))((void *)0)},
21941|       |    {"sl", &selected_line_color, (void (*)(void))((void *)0)},
21942|       |    {"cx", &context_line_color, (void (*)(void))((void *)0)},
21943|       |    {"rv", (char const **)((void *)0), &color_cap_rv_fct},
21944|       |    {"ne", (char const **)((void *)0), &color_cap_ne_fct},
21945|       |    {(char const *)((void *)0), (char const **)((void *)0), (void (*)(void))((void *)0)}
21946|       |};
21947|       |static struct exclude *excluded_patterns;
21948|       |static struct exclude *excluded_directory_patterns;
21949|       |static char const short_options[58] = {
21950|       |    (char const)'0', (char const)'1', (char const)'2', (char const)'3',
21951|       |    (char const)'4', (char const)'5', (char const)'6', (char const)'7',
21952|       |    (char const)'8', (char const)'9', (char const)'A', (char const)':',
21953|       |    (char const)'B', (char const)':', (char const)'C', (char const)':',
21954|       |    (char const)'D', (char const)':', (char const)'E', (char const)'F',
21955|       |    (char const)'G', (char const)'H', (char const)'I', (char const)'P',
21956|       |    (char const)'T', (char const)'U', (char const)'V', (char const)'X',
21957|       |    (char const)':', (char const)'a', (char const)'b', (char const)'c',
21958|       |    (char const)'d', (char const)':', (char const)'e', (char const)':',
21959|       |    (char const)'f', (char const)':', (char const)'h', (char const)'i',
21960|       |    (char const)'L', (char const)'l', (char const)'m', (char const)':',
21961|       |    (char const)'n', (char const)'o', (char const)'q', (char const)'R',
21962|       |    (char const)'r', (char const)'s', (char const)'u', (char const)'v',
21963|       |    (char const)'w', (char const)'x', (char const)'y', (char const)'Z',
21964|       |    (char const)'z', (char const)'\000'
21965|       |};
21966|       |static struct option const long_options[50] = {
21967|       |    {"basic-regexp", 0, (int *)((void *)0), 'G'},
21968|       |    {"extended-regexp", 0, (int *)((void *)0), 'E'},
21969|       |    {"fixed-regexp", 0, (int *)((void *)0), 'F'},
21970|       |    {"fixed-strings", 0, (int *)((void *)0), 'F'},
21971|       |    {"perl-regexp", 0, (int *)((void *)0), 'P'},
21972|       |    {"after-context", 1, (int *)((void *)0), 'A'},
21973|       |    {"before-context", 1, (int *)((void *)0), 'B'},
21974|       |    {"binary-files", 1, (int *)((void *)0), 128},
21975|       |    {"byte-offset", 0, (int *)((void *)0), 'b'},
21976|       |    {"context", 1, (int *)((void *)0), 'C'},
21977|       |    {"color", 2, (int *)((void *)0), 129},
21978|       |    {"colour", 2, (int *)((void *)0), 129},
21979|       |    {"count", 0, (int *)((void *)0), 'c'},
21980|       |    {"devices", 1, (int *)((void *)0), 'D'},
21981|       |    {"directories", 1, (int *)((void *)0), 'd'},
21982|       |    {"exclude", 1, (int *)((void *)0), 131},
21983|       |    {"exclude-from", 1, (int *)((void *)0), 132},
21984|       |    {"exclude-dir", 1, (int *)((void *)0), 135},
21985|       |    {"file", 1, (int *)((void *)0), 'f'},
21986|       |    {"files-with-matches", 0, (int *)((void *)0), 'l'},
21987|       |    {"files-without-match", 0, (int *)((void *)0), 'L'},
21988|       |    {"group-separator", 1, (int *)((void *)0), 136},
21989|       |    {"help", 0, &show_help, 1},
21990|       |    {"include", 1, (int *)((void *)0), 130},
21991|       |    {"ignore-case", 0, (int *)((void *)0), 'i'},
21992|       |    {"initial-tab", 0, (int *)((void *)0), 'T'},
21993|       |    {"label", 1, (int *)((void *)0), 134},
21994|       |    {"line-buffered", 0, (int *)((void *)0), 133},
21995|       |    {"line-number", 0, (int *)((void *)0), 'n'},
21996|       |    {"line-regexp", 0, (int *)((void *)0), 'x'},
21997|       |    {"max-count", 1, (int *)((void *)0), 'm'},
21998|       |    {"no-filename", 0, (int *)((void *)0), 'h'},
21999|       |    {"no-group-separator", 0, (int *)((void *)0), 136},
22000|       |    {"no-messages", 0, (int *)((void *)0), 's'},
22001|       |    {"null", 0, (int *)((void *)0), 'Z'},
22002|       |    {"null-data", 0, (int *)((void *)0), 'z'},
22003|       |    {"only-matching", 0, (int *)((void *)0), 'o'},
22004|       |    {"quiet", 0, (int *)((void *)0), 'q'},
22005|       |    {"recursive", 0, (int *)((void *)0), 'r'},
22006|       |    {"dereference-recursive", 0, (int *)((void *)0), 'R'},
22007|       |    {"regexp", 1, (int *)((void *)0), 'e'},
22008|       |    {"invert-match", 0, (int *)((void *)0), 'v'},
22009|       |    {"silent", 0, (int *)((void *)0), 'q'},
22010|       |    {"text", 0, (int *)((void *)0), 'a'},
22011|       |    {"binary", 0, (int *)((void *)0), 'U'},
22012|       |    {"unix-byte-offsets", 0, (int *)((void *)0), 'u'},
22013|       |    {"version", 0, (int *)((void *)0), 'V'},
22014|       |    {"with-filename", 0, (int *)((void *)0), 'H'},
22015|       |    {"word-regexp", 0, (int *)((void *)0), 'w'},
22016|       |    {(char const *)0, 0, (int *)0, 0}
22017|       |};
22018|       |static char const *matcher;
22019|       |static char const *filename;
22020|       |static size_t filename_prefix_len;
22021|       |static int errseen;
22022|       |static int write_error_seen;
22023|       |static char const *const directories_args[4] = {(char const * /* const  */) "read", (char const * /* const  */) "recurse", (char const * /* const  */) "skip", (char const * /* const  */)((char const *)((void *)0))};
22024|       |static enum directories_type const directories_types[3] = {(enum directories_type const)2, (enum directories_type const)3, (enum directories_type const)4};
22025|       |static enum directories_type directories = (enum directories_type)2;
22026|       |static int fts_options = 793;
22027|       |static enum __anonenum_devices_71 devices = (enum __anonenum_devices_71)0;
22028|       |static int grepfile(int dirdesc, char const *name, int follow, int command_line);
22029|       |static int grepdesc(int desc, int command_line);
22030|       |static void dos_binary(void);
22031|       |static void dos_unix_byte_offsets(void);
22032|       |static int undossify_input(char *buf, size_t buflen);
22033|       |static int is_device_mode(mode_t m)
22034|      6|{
22035|      6|    int tmp;
22036|       |
22037|      6|    {
22038|      6|        if ((m & 61440U) == 8192U) {
22039|      0|            tmp = 1;
22040|      0|        }
22041|      6|        else {
22042|      6|            if ((m & 61440U) == 24576U) {
22043|      0|                tmp = 1;
22044|      0|            }
22045|      6|            else {
22046|      6|                if ((m & 61440U) == 49152U) {
22047|      0|                    tmp = 1;
22048|      0|                }
22049|      6|                else {
22050|      6|                    if ((m & 61440U) == 4096U) {
22051|      0|                        tmp = 1;
22052|      0|                    }
22053|      6|                    else {
22054|      6|                        tmp = 0;
22055|      6|                    }
22056|      6|                }
22057|      6|            }
22058|      6|        }
22059|      6|        return (tmp);
22060|      6|    }
22061|      6|}
22062|       |static int usable_st_size(struct stat const *st)
22063|      4|{
22064|      4|    int tmp;
22065|       |
22066|      4|    {
22067|      4|        if ((st->st_mode & 61440U) == 32768U) {
22068|      4|            tmp = 1;
22069|      4|        }
22070|      0|        else {
22071|      0|            if (st->st_mode - st->st_mode) {
22072|      0|                tmp = 1;
22073|      0|            }
22074|      0|            else {
22075|      0|                tmp = 0;
22076|      0|            }
22077|      0|        }
22078|      4|        return (tmp);
22079|      4|    }
22080|      4|}
22081|       |static void (*compile)(char const *, size_t);
22082|       |static size_t (*execute)(char const *, size_t, size_t *, char const *);
22083|       |static void suppressible_error(char const *mesg, int errnum)
22084|      0|{
22085|       |
22086|      0|    {
22087|      0|        if (!suppress_errors) {
22088|      0|            {
22089|      0|                error(0, errnum, "%s", mesg);
22090|      0|            }
22091|      0|        }
22092|      0|        errseen = 1;
22093|      0|        return;
22094|      0|    }
22095|      0|}
22096|       |static void clean_up_stdout(void)
22097|      2|{
22098|       |
22099|      2|    {
22100|      2|        if (!write_error_seen) {
22101|      2|            {
22102|      2|                close_stdout();
22103|      2|            }
22104|      2|        }
22105|      2|        return;
22106|      2|    }
22107|      2|}
22108|       |static int file_is_binary(char const *buf, size_t bufsize, int fd, struct stat const *st)
22109|      4|{
22110|      4|    void *tmp;
22111|      4|    void *tmp___0;
22112|      4|    off_t cur;
22113|      4|    off_t hole_start;
22114|      4|    off_t tmp___1;
22115|      4|    int *tmp___2;
22116|      4|    __off_t tmp___3;
22117|      4|    int tmp___4;
22118|       |
22119|      4|    {
22120|      4|        if (!eolbyte) {
22121|      0|            {
22122|      0|                tmp = memchr((void const *)buf, '\200', bufsize);
22123|      0|            }
22124|      0|            return ((unsigned long)tmp != (unsigned long)((void *)0));
22125|      0|        }
22126|      4|        {
22127|      4|            tmp___0 = memchr((void const *)buf, '\000', bufsize);
22128|      4|        }
22129|      4|        if (tmp___0) {
22130|      0|            return (1);
22131|      0|        }
22132|      4|        {
22133|      4|            tmp___4 = usable_st_size(st);
22134|      4|        }
22135|      4|        if (tmp___4) {
22136|      4|            cur = (off_t)bufsize;
22137|      4|            if (fd == 0) {
22138|      0|                {
22139|      0|                    cur = lseek(fd, (__off_t)0, 1);
22140|      0|                }
22141|      0|                if (cur < 0L) {
22142|      0|                    return (0);
22143|      0|                }
22144|      0|            }
22145|      4|            {
22146|      4|                tmp___1 = lseek(fd, cur, 4);
22147|      4|                hole_start = tmp___1;
22148|      4|            }
22149|      4|            if (0L <= hole_start) {
22150|      0|                {
22151|      0|                    tmp___3 = lseek(fd, cur, 0);
22152|      0|                }
22153|      0|                if (tmp___3 < 0L) {
22154|      0|                    {
22155|      0|                        tmp___2 = __errno_location();
22156|      0|                        suppressible_error(filename, *tmp___2);
22157|      0|                    }
22158|      0|                }
22159|      0|                if (hole_start < (off_t)st->st_size) {
22160|      0|                    return (1);
22161|      0|                }
22162|      0|            }
22163|      4|        }
22164|      4|        return (0);
22165|      4|    }
22166|      4|}
22167|       |static void context_length_arg(char const *str, intmax_t *out___0)
22168|      0|{
22169|      0|    strtol_error tmp;
22170|      0|    char *tmp___0;
22171|      0|    char *__cil_tmp7;
22172|      0|    char *__cil_tmp8;
22173|       |
22174|      0|    {
22175|      0|        {
22176|      0|            tmp = xstrtoimax(str, (char **)0, 10, out___0, "");
22177|      0|        }
22178|      0|        if ((unsigned int)tmp == 0U) {
22179|      0|            goto case_0;
22180|      0|        }
22181|      0|        if ((unsigned int)tmp == 1U) {
22182|      0|            goto case_0;
22183|      0|        }
22184|      0|        goto switch_default;
22185|      0|case_0:
22186|      0|        if (0L <= *out___0) {
22187|      0|            goto switch_break;
22188|      0|        }
22189|      0|switch_default : {
22190|      0|            tmp___0 = gettext("invalid context length argument");
22191|      0|            error(2, 0, "%s: %s", str, tmp___0);
22192|      0|        }
22193|      0|switch_break:
22194|      0|        ;
22195|      0|        return;
22196|      0|    }
22197|      0|}
22198|       |static int skipped_file(char const *name, int command_line, int is_dir)
22199|      6|{
22200|      6|    _Bool tmp;
22201|      6|    int tmp___0;
22202|      6|    _Bool tmp___1;
22203|      6|    int tmp___2;
22204|      6|    int tmp___3;
22205|       |
22206|      6|    {
22207|      6|        if (is_dir) {
22208|      2|            if ((unsigned int)directories == 4U) {
22209|      0|                tmp___0 = 1;
22210|      0|            }
22211|      2|            else {
22212|      2|                if (command_line) {
22213|      2|                    if (filename_prefix_len != 0UL) {
22214|      0|                        tmp___0 = 0;
22215|      0|                    }
22216|      2|                    else {
22217|      2|                        goto _L;
22218|      2|                    }
22219|      2|                }
22220|      0|                else {
22221|      2|_L:
22222|      2|                    if (excluded_directory_patterns) {
22223|      0|                        {
22224|      0|                            tmp = excluded_file_name((struct exclude const *)excluded_directory_patterns,
22225|      0|                                                     name);
22226|      0|                        }
22227|      0|                        if (tmp) {
22228|      0|                            tmp___0 = 1;
22229|      0|                        }
22230|      0|                        else {
22231|      0|                            tmp___0 = 0;
22232|      0|                        }
22233|      0|                    }
22234|      2|                    else {
22235|      2|                        tmp___0 = 0;
22236|      2|                    }
22237|      2|                }
22238|      2|            }
22239|      2|            tmp___3 = tmp___0;
22240|      2|        }
22241|      4|        else {
22242|      4|            if (excluded_patterns) {
22243|      0|                {
22244|      0|                    tmp___1 = excluded_file_name((struct exclude const *)excluded_patterns, name);
22245|      0|                }
22246|      0|                if (tmp___1) {
22247|      0|                    tmp___2 = 1;
22248|      0|                }
22249|      0|                else {
22250|      0|                    tmp___2 = 0;
22251|      0|                }
22252|      0|            }
22253|      4|            else {
22254|      4|                tmp___2 = 0;
22255|      4|            }
22256|      4|            tmp___3 = tmp___2;
22257|      4|        }
22258|      6|        return (tmp___3);
22259|      6|    }
22260|      6|}
22261|       |static char *buffer;
22262|       |static size_t bufalloc;
22263|       |static int bufdesc;
22264|       |static char *bufbeg;
22265|       |static char *buflim;
22266|       |static size_t pagesize;
22267|       |static off_t bufoffset;
22268|       |static off_t after_last_match;
22269|       |static int reset(int fd, struct stat const *st)
22270|      4|{
22271|      4|    size_t tmp;
22272|      4|    int *tmp___0;
22273|      4|    char *tmp___1;
22274|      4|    char *__cil_tmp9;
22275|       |
22276|      4|    {
22277|      4|        if (!pagesize) {
22278|      2|            {
22279|      2|                pagesize = (size_t)getpagesize();
22280|      2|            }
22281|      2|            if (pagesize == 0UL) {
22282|      0|                {
22283|      0|                    abort();
22284|      0|                }
22285|      0|            }
22286|      2|            else {
22287|      2|                if (2UL * pagesize + 1UL <= pagesize) {
22288|      0|                    {
22289|      0|                        abort();
22290|      0|                    }
22291|      0|                }
22292|      2|            }
22293|      2|            if (32768UL % pagesize == 0UL) {
22294|      2|                tmp = (size_t)32768;
22295|      2|            }
22296|      0|            else {
22297|      0|                tmp = 32768UL + (pagesize - 32768UL % pagesize);
22298|      0|            }
22299|      2|            {
22300|      2|                bufalloc = (tmp + pagesize) + 1UL;
22301|      2|                buffer = (char *)xmalloc(bufalloc);
22302|      2|            }
22303|      2|        }
22304|      4|        if ((size_t)(buffer + 1) % pagesize == 0UL) {
22305|      0|            buflim = buffer + 1;
22306|      0|        }
22307|      4|        else {
22308|      4|            buflim = (buffer + 1) + (pagesize - (size_t)(buffer + 1) % pagesize);
22309|      4|        }
22310|      4|        bufbeg = buflim;
22311|      4|        *(bufbeg + -1) = (char)eolbyte;
22312|      4|        bufdesc = fd;
22313|      4|        if ((st->st_mode & 61440U) == 32768U) {
22314|      4|            if (fd != 0) {
22315|      4|                bufoffset = (off_t)0;
22316|      4|            }
22317|      0|            else {
22318|      0|                {
22319|      0|                    bufoffset = lseek(fd, (__off_t)0, 1);
22320|      0|                }
22321|      0|                if (bufoffset < 0L) {
22322|      0|                    {
22323|      0|                        tmp___0 = __errno_location();
22324|      0|                        tmp___1 = gettext("lseek failed");
22325|      0|                        suppressible_error((char const *)tmp___1, *tmp___0);
22326|      0|                    }
22327|      0|                    return (0);
22328|      0|                }
22329|      0|            }
22330|      4|        }
22331|      4|        return (1);
22332|      4|    }
22333|      4|}
22334|       |static int fillbuf(size_t save, struct stat const *st)
22335|      8|{
22336|      8|    ssize_t fillsize;
22337|      8|    int cc;
22338|      8|    char *readbuf;
22339|      8|    size_t readsize;
22340|      8|    size_t saved_offset;
22341|      8|    size_t minsize;
22342|      8|    size_t newsize;
22343|      8|    size_t newalloc;
22344|      8|    char *newbuf;
22345|      8|    off_t to_be_read;
22346|      8|    off_t maxsize_off;
22347|      8|    int tmp;
22348|      8|    void *tmp___0;
22349|       |
22350|      8|    {
22351|      8|        cc = 1;
22352|      8|        saved_offset = (size_t)((buflim - save) - buffer);
22353|      8|        if (pagesize <= (size_t)((buffer + bufalloc) - buflim)) {
22354|      8|            readbuf = buflim;
22355|      8|            bufbeg = buflim - save;
22356|      8|        }
22357|      0|        else {
22358|      0|            minsize = save + pagesize;
22359|      0|            newsize = (bufalloc - pagesize) - 1UL;
22360|      0|            {
22361|      0|                while (1) {
22362|      0|while_continue: /* CIL Label */
22363|      0|                    ;
22364|       |
22365|      0|                    if (!(newsize < minsize)) {
22366|      0|                        goto while_break;
22367|      0|                    }
22368|      0|                    if (newsize * 2UL < newsize) {
22369|      0|                        {
22370|      0|                            xalloc_die();
22371|      0|                        }
22372|      0|                    }
22373|      0|                    else {
22374|      0|                        if ((newsize * 2UL + pagesize) + 1UL < newsize * 2UL) {
22375|      0|                            {
22376|      0|                                xalloc_die();
22377|      0|                            }
22378|      0|                        }
22379|      0|                    }
22380|      0|                    newsize *= 2UL;
22381|      0|                }
22382|      0|while_break___0: /* CIL Label */
22383|      0|                ;
22384|      0|            }
22385|      0|while_break : {
22386|      0|                tmp = usable_st_size(st);
22387|      0|            }
22388|      0|            if (tmp) {
22389|      0|                to_be_read = (off_t)(st->st_size - (__off_t const)bufoffset);
22390|      0|                maxsize_off = (off_t)(save + (size_t)to_be_read);
22391|      0|                if (0L <= to_be_read) {
22392|      0|                    if (to_be_read <= maxsize_off) {
22393|      0|                        if ((size_t)maxsize_off == (size_t)maxsize_off) {
22394|      0|                            if (minsize <= (size_t)maxsize_off) {
22395|      0|                                if ((size_t)maxsize_off < newsize) {
22396|      0|                                    newsize = (size_t)maxsize_off;
22397|      0|                                }
22398|      0|                            }
22399|      0|                        }
22400|      0|                    }
22401|      0|                }
22402|      0|            }
22403|      0|            newalloc = (newsize + pagesize) + 1UL;
22404|      0|            if (bufalloc < newalloc) {
22405|      0|                {
22406|      0|                    bufalloc = newalloc;
22407|      0|                    tmp___0 = xmalloc(bufalloc);
22408|      0|                    newbuf = (char *)tmp___0;
22409|      0|                }
22410|      0|            }
22411|      0|            else {
22412|      0|                newbuf = buffer;
22413|      0|            }
22414|      0|            if ((size_t)((newbuf + 1) + save) % pagesize == 0UL) {
22415|      0|                readbuf = (newbuf + 1) + save;
22416|      0|            }
22417|      0|            else {
22418|      0|                readbuf = ((newbuf + 1) + save) + (pagesize - (size_t)((newbuf + 1) + save) % pagesize);
22419|      0|            }
22420|      0|            {
22421|      0|                bufbeg = readbuf - save;
22422|      0|                memmove((void *)bufbeg, (void const *)(buffer + saved_offset), save);
22423|      0|                *(bufbeg + -1) = (char)eolbyte;
22424|      0|            }
22425|      0|            if ((unsigned long)newbuf != (unsigned long)buffer) {
22426|      0|                {
22427|      0|                    free((void *)buffer);
22428|      0|                    buffer = newbuf;
22429|      0|                }
22430|      0|            }
22431|      0|        }
22432|      8|        {
22433|      8|            readsize = (size_t)((buffer + bufalloc) - readbuf);
22434|      8|            readsize -= readsize % pagesize;
22435|      8|            fillsize = (ssize_t)safe_read(bufdesc, (void *)readbuf, readsize);
22436|      8|        }
22437|      8|        if (fillsize < 0L) {
22438|      0|            cc = 0;
22439|      0|            fillsize = (ssize_t)cc;
22440|      0|        }
22441|      8|        {
22442|      8|            bufoffset += fillsize;
22443|      8|            fillsize = (ssize_t)undossify_input(readbuf, (size_t)fillsize);
22444|      8|            buflim = readbuf + fillsize;
22445|      8|        }
22446|      8|        return (cc);
22447|      8|    }
22448|      8|}
22449|       |static enum __anonenum_binary_files_72 binary_files;
22450|       |static int filename_mask;
22451|       |static int out_quiet;
22452|       |static _Bool out_invert;
22453|       |static int out_file;
22454|       |static int out_line;
22455|       |static int out_byte;
22456|       |static intmax_t out_before;
22457|       |static intmax_t out_after;
22458|       |static int count_matches;
22459|       |static int list_files;
22460|       |static int no_filenames;
22461|       |static intmax_t max_count;
22462|       |static int line_buffered;
22463|       |static char *label = (char *)((void *)0);
22464|       |static uintmax_t totalcc;
22465|       |static char const *lastnl;
22466|       |static char const *lastout;
22467|       |static uintmax_t totalnl;
22468|       |static intmax_t outleft;
22469|       |static intmax_t pending;
22470|       |static int done_on_match;
22471|       |static int exit_on_match;
22472|       |static int dos_report_unix_offset = 0;
22473|       |static File_type dos_file_type = (File_type)0;
22474|       |static File_type dos_use_file_type = (File_type)0;
22475|       |static off_t dos_stripped_crs = (off_t)0;
22476|       |static struct dos_map *dos_pos_map;
22477|       |static int dos_pos_map_size = 0;
22478|       |static int dos_pos_map_used = 0;
22479|       |static int inp_map_idx = 0;
22480|       |static int out_map_idx = 1;
22481|       |static void dos_binary(void)
22482|      0|{
22483|       |
22484|      0|    {
22485|      0|        return;
22486|      0|    }
22487|      0|}
22488|       |static void dos_unix_byte_offsets(void)
22489|      0|{
22490|       |
22491|      0|    {
22492|      0|        return;
22493|      0|    }
22494|      0|}
22495|       |static int undossify_input(char *buf, size_t buflen)
22496|      8|{
22497|      8|    int chars_left;
22498|      8|    char *destp;
22499|      8|    char *tmp;
22500|      8|    char *tmp___0;
22501|      8|    int tmp___1;
22502|      8|    char *tmp___2;
22503|      8|    size_t tmp___3;
22504|       |
22505|      8|    {
22506|      8|        return ((int)buflen);
22507|      0|        chars_left = 0;
22508|      0|        if (totalcc == 0UL) {
22509|      0|            inp_map_idx = 0;
22510|      0|            out_map_idx = 1;
22511|      0|            dos_pos_map_used = 0;
22512|      0|            dos_stripped_crs = (off_t)0;
22513|      0|            dos_file_type = dos_use_file_type;
22514|      0|        }
22515|      0|        if ((unsigned int)dos_file_type == 0U) {
22516|      0|            {
22517|      0|                dos_file_type = (File_type)guess_type(buf, buflen);
22518|      0|            }
22519|      0|        }
22520|      0|        if ((unsigned int)dos_file_type == 2U) {
22521|      0|            destp = buf;
22522|      0|            {
22523|      0|                while (1) {
22524|      0|while_continue: /* CIL Label */
22525|      0|                    ;
22526|      0|                    tmp___3 = buflen;
22527|      0|                    buflen--;
22528|      0|                    if (!tmp___3) {
22529|      0|                        goto while_break;
22530|      0|                    }
22531|      0|                    if ((int)*buf != 13) {
22532|      0|                        tmp = destp;
22533|      0|                        destp++;
22534|      0|                        tmp___0 = buf;
22535|      0|                        buf++;
22536|      0|                        *tmp = *tmp___0;
22537|      0|                        chars_left++;
22538|      0|                    }
22539|      0|                    else {
22540|      0|                        buf++;
22541|      0|                        if (out_byte) {
22542|      0|                            if (!dos_report_unix_offset) {
22543|      0|                                dos_stripped_crs++;
22544|      0|                                {
22545|      0|                                    while (1) {
22546|      0|while_continue___0: /* CIL Label */
22547|      0|                                        ;
22548|       |
22549|      0|                                        if (buflen) {
22550|      0|                                            if (!((int)*buf == 13)) {
22551|      0|                                                goto while_break___0;
22552|      0|                                            }
22553|      0|                                        }
22554|      0|                                        else {
22555|      0|                                            goto while_break___0;
22556|      0|                                        }
22557|      0|                                        dos_stripped_crs++;
22558|      0|                                        buflen--;
22559|      0|                                        buf++;
22560|      0|                                    }
22561|      0|while_break___2: /* CIL Label */
22562|      0|                                    ;
22563|      0|                                }
22564|      0|while_break___0:
22565|      0|                                ;
22566|      0|                                if (inp_map_idx >= dos_pos_map_size - 1) {
22567|      0|                                    if (inp_map_idx) {
22568|      0|                                        dos_pos_map_size = inp_map_idx * 2;
22569|      0|                                    }
22570|      0|                                    else {
22571|      0|                                        dos_pos_map_size = 1000;
22572|      0|                                    }
22573|      0|                                    {
22574|      0|                                        dos_pos_map = (struct dos_map *)xrealloc((void *)dos_pos_map, (unsigned long)dos_pos_map_size * sizeof(struct dos_map));
22575|      0|                                    }
22576|      0|                                }
22577|      0|                                if (!inp_map_idx) {
22578|      0|                                    (dos_pos_map + inp_map_idx)->pos = (off_t)0;
22579|      0|                                    tmp___1 = inp_map_idx;
22580|      0|                                    inp_map_idx++;
22581|      0|                                    (dos_pos_map + tmp___1)->add = (off_t)0;
22582|      0|                                    (dos_pos_map + inp_map_idx)->add = (off_t)0;
22583|      0|                                }
22584|      0|                                inp_map_idx++;
22585|      0|                                if ((int)*buf == 10) {
22586|      0|                                    tmp___2 = destp + 1;
22587|      0|                                }
22588|      0|                                else {
22589|      0|                                    tmp___2 = destp;
22590|      0|                                }
22591|      0|                                (dos_pos_map + (inp_map_idx - 1))->pos = (off_t)((uintmax_t)(tmp___2 - bufbeg) + totalcc);
22592|      0|                                (dos_pos_map + inp_map_idx)->add = dos_stripped_crs;
22593|      0|                                dos_pos_map_used = inp_map_idx;
22594|      0|                                (dos_pos_map + inp_map_idx)->pos = (off_t)(((uintmax_t)(destp - bufbeg) + totalcc) + 1UL);
22595|      0|                            }
22596|      0|                        }
22597|      0|                    }
22598|      0|                }
22599|      0|while_break___1: /* CIL Label */
22600|      0|                ;
22601|      0|            }
22602|      0|while_break:
22603|      0|            ;
22604|      0|            return (chars_left);
22605|      0|        }
22606|      0|        return ((int)buflen);
22607|      0|    }
22608|      0|}
22609|       |static off_t dossified_pos(off_t byteno)
22610|      0|{
22611|      0|    off_t pos_lo;
22612|      0|    off_t pos_hi;
22613|       |
22614|      0|    {
22615|      0|        return (byteno);
22616|      0|        if ((unsigned int)dos_file_type != 2U) {
22617|      0|            return (byteno);
22618|      0|        }
22619|      0|        else {
22620|      0|            if (dos_report_unix_offset) {
22621|      0|                return (byteno);
22622|      0|            }
22623|      0|        }
22624|      0|        pos_lo = (dos_pos_map + (out_map_idx - 1))->pos;
22625|      0|        pos_hi = (dos_pos_map + out_map_idx)->pos;
22626|      0|        if (byteno >= pos_hi) {
22627|      0|            out_map_idx++;
22628|      0|            {
22629|      0|                while (1) {
22630|      0|while_continue: /* CIL Label */
22631|      0|                    ;
22632|       |
22633|      0|                    if (out_map_idx < dos_pos_map_used) {
22634|      0|                        if (!(byteno >= (dos_pos_map + out_map_idx)->pos)) {
22635|      0|                            goto while_break;
22636|      0|                        }
22637|      0|                    }
22638|      0|                    else {
22639|      0|                        goto while_break;
22640|      0|                    }
22641|      0|                    out_map_idx++;
22642|      0|                }
22643|      0|while_break___1: /* CIL Label */
22644|      0|                ;
22645|      0|            }
22646|      0|while_break:
22647|      0|            ;
22648|      0|        }
22649|      0|        else {
22650|      0|            if (byteno < pos_lo) {
22651|      0|                out_map_idx--;
22652|      0|                {
22653|      0|                    while (1) {
22654|      0|while_continue___0: /* CIL Label */
22655|      0|                        ;
22656|       |
22657|      0|                        if (out_map_idx > 1) {
22658|      0|                            if (!(byteno < (dos_pos_map + (out_map_idx - 1))->pos)) {
22659|      0|                                goto while_break___0;
22660|      0|                            }
22661|      0|                        }
22662|      0|                        else {
22663|      0|                            goto while_break___0;
22664|      0|                        }
22665|      0|                        out_map_idx--;
22666|      0|                    }
22667|      0|while_break___2: /* CIL Label */
22668|      0|                    ;
22669|      0|                }
22670|      0|while_break___0:
22671|      0|                ;
22672|      0|            }
22673|      0|        }
22674|      0|        return (byteno + (dos_pos_map + out_map_idx)->add);
22675|      0|    }
22676|      0|}
22677|       |static uintmax_t add_count(uintmax_t a, uintmax_t b)
22678|      0|{
22679|      0|    uintmax_t sum;
22680|      0|    char *tmp;
22681|      0|    char *__cil_tmp6;
22682|       |
22683|      0|    {
22684|      0|        sum = a + b;
22685|      0|        if (sum < a) {
22686|      0|            {
22687|      0|                tmp = gettext("input is too large to count");
22688|      0|                error(2, 0, (char const *)tmp);
22689|      0|            }
22690|      0|        }
22691|      0|        return (sum);
22692|      0|    }
22693|      0|}
22694|       |static void nlscan(char const *lim)
22695|      0|{
22696|      0|    size_t newlines;
22697|      0|    char const *beg;
22698|       |
22699|      0|    {
22700|      0|        newlines = (size_t)0;
22701|      0|        beg = lastnl;
22702|      0|        {
22703|      0|            while (1) {
22704|      0|while_continue: /* CIL Label */
22705|      0|                ;
22706|       |
22707|      0|                if (!((unsigned long)beg < (unsigned long)lim)) {
22708|      0|                    goto while_break;
22709|      0|                }
22710|      0|                {
22711|      0|                    beg = (char const *)memchr((void const *)beg, (int)eolbyte, (size_t)(lim - beg));
22712|      0|                }
22713|      0|                if (!beg) {
22714|      0|                    goto while_break;
22715|      0|                }
22716|      0|                newlines++;
22717|      0|                beg++;
22718|      0|            }
22719|      0|while_break___0: /* CIL Label */
22720|      0|            ;
22721|      0|        }
22722|      0|while_break : {
22723|      0|            totalnl = add_count(totalnl, newlines);
22724|      0|            lastnl = lim;
22725|      0|        }
22726|      0|        return;
22727|      0|    }
22728|      0|}
22729|       |static void print_filename(void)
22730|      2|{
22731|       |
22732|      2|    {
22733|      2|        {
22734|      2|            pr_sgr_start_if(filename_color);
22735|      2|            fputs_unlocked((char const * /* __restrict  */)filename, (FILE * /* __restrict  */) stdout);
22736|      2|            pr_sgr_end_if(filename_color);
22737|      2|        }
22738|      2|        return;
22739|      2|    }
22740|      2|}
22741|       |static void print_sep(char sep)
22742|      2|{
22743|       |
22744|      2|    {
22745|      2|        {
22746|      2|            pr_sgr_start_if(sep_color);
22747|      2|            fputc_unlocked((int)sep, stdout);
22748|      2|            pr_sgr_end_if(sep_color);
22749|      2|        }
22750|      2|        return;
22751|      2|    }
22752|      2|}
22753|       |static void print_offset(uintmax_t pos, int min_width, char const *color)
22754|      0|{
22755|      0|    char buf[sizeof(pos) * 8UL];
22756|      0|    char *p;
22757|      0|    void *__cil_tmp7;
22758|       |
22759|      0|    {
22760|      0|        p = buf + sizeof(buf);
22761|      0|        {
22762|      0|            while (1) {
22763|      0|while_continue: /* CIL Label */
22764|      0|                ;
22765|      0|                p--;
22766|      0|                *p = (char)(48UL + pos % 10UL);
22767|      0|                min_width--;
22768|      0|                pos /= 10UL;
22769|      0|                if (!(pos != 0UL)) {
22770|      0|                    goto while_break;
22771|      0|                }
22772|      0|            }
22773|      0|while_break___1: /* CIL Label */
22774|      0|            ;
22775|      0|        }
22776|      0|while_break:
22777|      0|        ;
22778|      0|        if (align_tabs) {
22779|      0|            {
22780|      0|                while (1) {
22781|      0|while_continue___0: /* CIL Label */
22782|      0|                    ;
22783|      0|                    min_width--;
22784|      0|                    if (!(min_width >= 0)) {
22785|      0|                        goto while_break___0;
22786|      0|                    }
22787|      0|                    p--;
22788|      0|                    *p = (char)' ';
22789|      0|                }
22790|      0|while_break___2: /* CIL Label */
22791|      0|                ;
22792|      0|            }
22793|      0|while_break___0:
22794|      0|            ;
22795|      0|        }
22796|      0|        {
22797|      0|            pr_sgr_start_if(color);
22798|      0|            fwrite_unlocked((void const * /* __restrict  */)((void const *)p), (size_t)1,
22799|      0|                            (size_t)((buf + sizeof(buf)) - p), (FILE * /* __restrict  */) stdout);
22800|      0|            pr_sgr_end_if(color);
22801|      0|        }
22802|      0|        return;
22803|      0|    }
22804|      0|}
22805|       |static void print_line_head(char const *beg, char const *lim, int sep)
22806|      3|{
22807|      3|    int pending_sep;
22808|      3|    uintmax_t pos;
22809|      3|    uintmax_t tmp;
22810|       |
22811|      3|    {
22812|      3|        pending_sep = 0;
22813|      3|        if (out_file) {
22814|      2|            {
22815|      2|                print_filename();
22816|      2|            }
22817|      2|            if (filename_mask) {
22818|      2|                pending_sep = 1;
22819|      2|            }
22820|      0|            else {
22821|      0|                {
22822|      0|                    fputc_unlocked(0, stdout);
22823|      0|                }
22824|      0|            }
22825|      2|        }
22826|      3|        if (out_line) {
22827|      0|            if ((unsigned long)lastnl < (unsigned long)lim) {
22828|      0|                {
22829|      0|                    nlscan(beg);
22830|      0|                    totalnl = add_count(totalnl, (uintmax_t)1);
22831|      0|                    lastnl = lim;
22832|      0|                }
22833|      0|            }
22834|      0|            if (pending_sep) {
22835|      0|                {
22836|      0|                    print_sep((char)sep);
22837|      0|                }
22838|      0|            }
22839|      0|            {
22840|      0|                print_offset(totalnl, 4, line_num_color);
22841|      0|                pending_sep = 1;
22842|      0|            }
22843|      0|        }
22844|      3|        if (out_byte) {
22845|      0|            {
22846|      0|                tmp = add_count(totalcc, (uintmax_t)(beg - (char const *)bufbeg));
22847|      0|                pos = tmp;
22848|      0|                pos = (uintmax_t)dossified_pos((off_t)pos);
22849|      0|            }
22850|      0|            if (pending_sep) {
22851|      0|                {
22852|      0|                    print_sep((char)sep);
22853|      0|                }
22854|      0|            }
22855|      0|            {
22856|      0|                print_offset(pos, 6, byte_num_color);
22857|      0|                pending_sep = 1;
22858|      0|            }
22859|      0|        }
22860|      3|        if (pending_sep) {
22861|      2|            if (align_tabs) {
22862|      0|                {
22863|      0|                    fputs_unlocked((char const * /* __restrict  */) "\t\b", (FILE * /* __restrict  */) stdout);
22864|      0|                }
22865|      0|            }
22866|      2|            {
22867|      2|                print_sep((char)sep);
22868|      2|            }
22869|      2|        }
22870|      3|        return;
22871|      3|    }
22872|      3|}
22873|       |static char const *print_line_middle(char const *beg, char const *lim, char const *line_color,
22874|       |                                     char const *match_color)
22875|      0|{
22876|      0|    size_t match_size;
22877|      0|    size_t match_offset;
22878|      0|    char const *cur;
22879|      0|    char const *mid;
22880|      0|    char const *b;
22881|      0|    int tmp;
22882|       |
22883|      0|    {
22884|      0|        cur = beg;
22885|      0|        mid = (char const *)((void *)0);
22886|      0|        {
22887|      0|            while (1) {
22888|      0|while_continue: /* CIL Label */
22889|      0|                ;
22890|       |
22891|      0|                if ((unsigned long)cur < (unsigned long)lim) {
22892|      0|                    {
22893|      0|                        match_offset = (*execute)(beg, (size_t)(lim - beg), &match_size, beg + (cur - beg));
22894|      0|                    }
22895|      0|                    if (!(match_offset != 0xffffffffffffffffUL)) {
22896|      0|                        goto while_break;
22897|      0|                    }
22898|      0|                }
22899|      0|                else {
22900|      0|                    goto while_break;
22901|      0|                }
22902|      0|                b = beg + match_offset;
22903|      0|                if ((unsigned long)b == (unsigned long)lim) {
22904|      0|                    goto while_break;
22905|      0|                }
22906|      0|                if (match_size == 0UL) {
22907|      0|                    match_size = (size_t)1;
22908|      0|                    if (!mid) {
22909|      0|                        mid = cur;
22910|      0|                    }
22911|      0|                }
22912|      0|                else {
22913|      0|                    if (only_matching) {
22914|      0|                        if (out_invert) {
22915|      0|                            tmp = '-';
22916|      0|                        }
22917|      0|                        else {
22918|      0|                            tmp = ':';
22919|      0|                        }
22920|      0|                        {
22921|      0|                            print_line_head(b, lim, tmp);
22922|      0|                        }
22923|      0|                    }
22924|      0|                    else {
22925|      0|                        {
22926|      0|                            pr_sgr_start(line_color);
22927|      0|                        }
22928|      0|                        if (mid) {
22929|      0|                            cur = mid;
22930|      0|                            mid = (char const *)((void *)0);
22931|      0|                        }
22932|      0|                        {
22933|      0|                            fwrite_unlocked((void const * /* __restrict  */)((void const *)cur), sizeof(char),
22934|      0|                                            (size_t)(b - cur), (FILE * /* __restrict  */) stdout);
22935|      0|                        }
22936|      0|                    }
22937|      0|                    {
22938|      0|                        pr_sgr_start_if(match_color);
22939|      0|                        fwrite_unlocked((void const * /* __restrict  */)((void const *)b), sizeof(char),
22940|      0|                                        match_size, (FILE * /* __restrict  */) stdout);
22941|      0|                        pr_sgr_end_if(match_color);
22942|      0|                    }
22943|      0|                    if (only_matching) {
22944|      0|                        {
22945|      0|                            fputs_unlocked((char const * /* __restrict  */) "\n", (FILE * /* __restrict  */) stdout);
22946|      0|                        }
22947|      0|                    }
22948|      0|                }
22949|      0|                cur = b + match_size;
22950|      0|            }
22951|      0|while_break___0: /* CIL Label */
22952|      0|            ;
22953|      0|        }
22954|      0|while_break:
22955|      0|        ;
22956|      0|        if (only_matching) {
22957|      0|            cur = lim;
22958|      0|        }
22959|      0|        else {
22960|      0|            if (mid) {
22961|      0|                cur = mid;
22962|      0|            }
22963|      0|        }
22964|      0|        return (cur);
22965|      0|    }
22966|      0|}
22967|       |static char const *print_line_tail(char const *beg, char const *lim, char const *line_color)
22968|      0|{
22969|      0|    size_t eol_size;
22970|      0|    size_t tail_size;
22971|      0|    int tmp;
22972|      0|    int tmp___0;
22973|       |
22974|      0|    {
22975|      0|        if ((unsigned long)lim > (unsigned long)beg) {
22976|      0|            if ((int const) * (lim + -1) == (int const)eolbyte) {
22977|      0|                tmp = 1;
22978|      0|            }
22979|      0|            else {
22980|      0|                tmp = 0;
22981|      0|            }
22982|      0|        }
22983|      0|        else {
22984|      0|            tmp = 0;
22985|      0|        }
22986|      0|        eol_size = (size_t)tmp;
22987|      0|        if ((unsigned long)(lim - eol_size) > (unsigned long)beg) {
22988|      0|            if ((int const) * (lim + -(1UL + eol_size)) == 13) {
22989|      0|                tmp___0 = 1;
22990|      0|            }
22991|      0|            else {
22992|      0|                tmp___0 = 0;
22993|      0|            }
22994|      0|        }
22995|      0|        else {
22996|      0|            tmp___0 = 0;
22997|      0|        }
22998|      0|        eol_size += (size_t)tmp___0;
22999|      0|        tail_size = (size_t)((lim - eol_size) - beg);
23000|      0|        if (tail_size > 0UL) {
23001|      0|            {
23002|      0|                pr_sgr_start(line_color);
23003|      0|                fwrite_unlocked((void const * /* __restrict  */)((void const *)beg), (size_t)1,
23004|      0|                                tail_size, (FILE * /* __restrict  */) stdout);
23005|      0|                beg += tail_size;
23006|      0|                pr_sgr_end(line_color);
23007|      0|            }
23008|      0|        }
23009|      0|        return (beg);
23010|      0|    }
23011|      0|}
23012|       |static void prline(char const *beg, char const *lim, int sep)
23013|      3|{
23014|      3|    int matching;
23015|      3|    char const *line_color;
23016|      3|    char const *match_color;
23017|      3|    int tmp___0;
23018|      3|    char *tmp___1;
23019|      3|    int tmp___2;
23020|      3|    char *__cil_tmp11;
23021|       |
23022|      3|    {
23023|      3|        if (!only_matching) {
23024|      3|            {
23025|      3|                print_line_head(beg, lim, sep);
23026|      3|            }
23027|      3|        }
23028|      3|        matching = (sep == 58) ^ (int)out_invert;
23029|      3|        if (color_option) {
23030|      0|            if (out_invert) {
23031|      0|                if (color_option < 0) {
23032|      0|                    tmp___0 = 1;
23033|      0|                }
23034|      0|                else {
23035|      0|                    tmp___0 = 0;
23036|      0|                }
23037|      0|            }
23038|      0|            else {
23039|      0|                tmp___0 = 0;
23040|      0|            }
23041|      0|            if ((sep == 58) ^ tmp___0) {
23042|      0|                line_color = selected_line_color;
23043|      0|            }
23044|      0|            else {
23045|      0|                line_color = context_line_color;
23046|      0|            }
23047|      0|            if (sep == 58) {
23048|      0|                match_color = selected_match_color;
23049|      0|            }
23050|      0|            else {
23051|      0|                match_color = context_match_color;
23052|      0|            }
23053|      0|        }
23054|      3|        else {
23055|      3|            match_color = (char const *)((void *)0);
23056|      3|            line_color = match_color;
23057|      3|        }
23058|      3|        if (only_matching) {
23059|      0|            if (matching) {
23060|      0|                goto _L___0;
23061|      0|            }
23062|      0|            else {
23063|      0|                goto _L___1;
23064|      0|            }
23065|      0|        }
23066|      3|        else {
23067|      3|_L___1:
23068|      3|            if (color_option) {
23069|      0|                if (*line_color) {
23070|      0|                    goto _L___0;
23071|      0|                }
23072|      0|                else {
23073|      0|                    if (*match_color) {
23074|      0|_L___0:
23075|      0|                        if (matching) {
23076|      0|                            if (only_matching) {
23077|      0|                                {
23078|      0|                                    beg = print_line_middle(beg, lim, line_color, match_color);
23079|      0|                                }
23080|      0|                            }
23081|      0|                            else {
23082|      0|                                if (*match_color) {
23083|      0|                                    {
23084|      0|                                        beg = print_line_middle(beg, lim, line_color, match_color);
23085|      0|                                    }
23086|      0|                                }
23087|      0|                            }
23088|      0|                        }
23089|      0|                        if (!only_matching) {
23090|      0|                            if (*line_color) {
23091|      0|                                {
23092|      0|                                    beg = print_line_tail(beg, lim, line_color);
23093|      0|                                }
23094|      0|                            }
23095|      0|                        }
23096|      0|                    }
23097|      0|                }
23098|      0|            }
23099|      3|        }
23100|      3|        if (!only_matching) {
23101|      3|            if ((unsigned long)lim > (unsigned long)beg) {
23102|      3|                {
23103|      3|                    fwrite_unlocked((void const * /* __restrict  */)((void const *)beg), (size_t)1,
23104|      3|                                    (size_t)(lim - beg), (FILE * /* __restrict  */) stdout);
23105|      3|                }
23106|      3|            }
23107|      3|        }
23108|      3|        {
23109|      3|            tmp___2 = ferror_unlocked(stdout);
23110|      3|        }
23111|      3|        if (tmp___2) {
23112|      0|            {
23113|      0|                write_error_seen = 1;
23114|      0|                tmp___1 = gettext("write error");
23115|      0|                error(2, 0, (char const *)tmp___1);
23116|      0|            }
23117|      0|        }
23118|      3|        lastout = lim;
23119|      3|        if (line_buffered) {
23120|      0|            {
23121|      0|                fflush_unlocked(stdout);
23122|      0|            }
23123|      0|        }
23124|      3|        return;
23125|      3|    }
23126|      3|}
23127|       |static void prpending(char const *lim)
23128|      3|{
23129|      3|    char const *nl;
23130|      3|    char const *tmp;
23131|      3|    size_t match_size;
23132|      3|    size_t tmp___0;
23133|       |
23134|      3|    {
23135|      3|        if (!lastout) {
23136|      0|            lastout = (char const *)bufbeg;
23137|      0|        }
23138|      3|        {
23139|      3|            while (1) {
23140|      3|while_continue: /* CIL Label */
23141|      3|                ;
23142|       |
23143|      3|                if (pending > 0L) {
23144|      0|                    if (!((unsigned long)lastout < (unsigned long)lim)) {
23145|      0|                        goto while_break;
23146|      0|                    }
23147|      0|                }
23148|      3|                else {
23149|      3|                    goto while_break;
23150|      3|                }
23151|      0|                {
23152|      0|                    tmp = (char const *)memchr((void const *)lastout, (int)eolbyte, (size_t)(lim - lastout));
23153|      0|                    nl = tmp;
23154|      0|                    pending--;
23155|      0|                }
23156|      0|                if (outleft) {
23157|      0|                    {
23158|      0|                        prline(lastout, nl + 1, '-');
23159|      0|                    }
23160|      0|                }
23161|      0|                else {
23162|      0|                    {
23163|      0|                        tmp___0 = (*execute)(lastout, (size_t)((nl + 1) - lastout), &match_size, (char const *)((void *)0));
23164|      0|                    }
23165|      0|                    if ((tmp___0 == 0xffffffffffffffffUL) == !out_invert) {
23166|      0|                        {
23167|      0|                            prline(lastout, nl + 1, '-');
23168|      0|                        }
23169|      0|                    }
23170|      0|                    else {
23171|      0|                        pending = (intmax_t)0;
23172|      0|                    }
23173|      0|                }
23174|      0|            }
23175|      0|while_break___0: /* CIL Label */
23176|      0|            ;
23177|      0|        }
23178|      3|while_break:
23179|      3|        ;
23180|      3|        return;
23181|      0|    }
23182|      0|}
23183|       |static _Bool used;
23184|       |static void prtext(char const *beg, char const *lim)
23185|      3|{
23186|      3|    char eol;
23187|      3|    char const *p;
23188|      3|    char const *bp;
23189|      3|    char const *tmp;
23190|      3|    intmax_t i;
23191|      3|    char const *nl;
23192|      3|    char const *tmp___0;
23193|      3|    intmax_t n;
23194|      3|    char const *nl___0;
23195|      3|    char const *tmp___1;
23196|       |
23197|      3|    {
23198|      3|        eol = (char)eolbyte;
23199|      3|        if (!out_quiet) {
23200|      3|            if (pending > 0L) {
23201|      0|                {
23202|      0|                    prpending(beg);
23203|      0|                }
23204|      0|            }
23205|      3|        }
23206|      3|        p = beg;
23207|      3|        if (!out_quiet) {
23208|      3|            if (lastout) {
23209|      0|                tmp = lastout;
23210|      0|            }
23211|      3|            else {
23212|      3|                tmp = (char const *)bufbeg;
23213|      3|            }
23214|      3|            bp = tmp;
23215|      3|            i = (intmax_t)0;
23216|      3|            {
23217|      3|                while (1) {
23218|      3|while_continue: /* CIL Label */
23219|      3|                    ;
23220|       |
23221|      3|                    if (!(i < out_before)) {
23222|      3|                        goto while_break;
23223|      3|                    }
23224|      0|                    if ((unsigned long)p > (unsigned long)bp) {
23225|      0|                        {
23226|      0|                            while (1) {
23227|      0|while_continue___0: /* CIL Label */
23228|      0|                                ;
23229|      0|                                p--;
23230|      0|                                if (!((int const) * (p + -1) != (int const)eol)) {
23231|      0|                                    goto while_break___0;
23232|      0|                                }
23233|      0|                            }
23234|      0|while_break___4: /* CIL Label */
23235|      0|                            ;
23236|      0|                        }
23237|      0|while_break___0:
23238|      0|                        ;
23239|      0|                    }
23240|      0|                    i++;
23241|      0|                }
23242|      0|while_break___3: /* CIL Label */
23243|      0|                ;
23244|      0|            }
23245|      3|while_break:
23246|      3|            ;
23247|      3|            if (0L <= out_before) {
23248|      0|                goto _L;
23249|      0|            }
23250|      3|            else {
23251|      3|                if (0L <= out_after) {
23252|      0|_L:
23253|      0|                    if (used) {
23254|      0|                        if ((unsigned long)p != (unsigned long)lastout) {
23255|      0|                            if (group_separator) {
23256|      0|                                {
23257|      0|                                    pr_sgr_start_if(sep_color);
23258|      0|                                    fputs_unlocked((char const * /* __restrict  */)group_separator, (FILE * /* __restrict  */) stdout);
23259|      0|                                    pr_sgr_end_if(sep_color);
23260|      0|                                    fputc_unlocked('\n', stdout);
23261|      0|                                }
23262|      0|                            }
23263|      0|                        }
23264|      0|                    }
23265|      0|                }
23266|      3|            }
23267|      3|            {
23268|      3|                while (1) {
23269|      3|while_continue___1: /* CIL Label */
23270|      3|                    ;
23271|       |
23272|      3|                    if (!((unsigned long)p < (unsigned long)beg)) {
23273|      3|                        goto while_break___1;
23274|      3|                    }
23275|      0|                    {
23276|      0|                        tmp___0 = (char const *)memchr((void const *)p, (int)eol, (size_t)(beg - p));
23277|      0|                        nl = tmp___0;
23278|      0|                        nl++;
23279|      0|                        prline(p, nl, '-');
23280|      0|                        p = nl;
23281|      0|                    }
23282|      0|                }
23283|      0|while_break___5: /* CIL Label */
23284|      0|                ;
23285|      0|            }
23286|      3|while_break___1:
23287|      3|            ;
23288|      3|        }
23289|      3|        if (out_invert) {
23290|      0|            n = (intmax_t)0;
23291|      0|            {
23292|      0|                while (1) {
23293|      0|while_continue___2: /* CIL Label */
23294|      0|                    ;
23295|       |
23296|      0|                    if ((unsigned long)p < (unsigned long)lim) {
23297|      0|                        if (!(n < outleft)) {
23298|      0|                            goto while_break___2;
23299|      0|                        }
23300|      0|                    }
23301|      0|                    else {
23302|      0|                        goto while_break___2;
23303|      0|                    }
23304|      0|                    {
23305|      0|                        tmp___1 = (char const *)memchr((void const *)p, (int)eol, (size_t)(lim - p));
23306|      0|                        nl___0 = tmp___1;
23307|      0|                        nl___0++;
23308|      0|                    }
23309|      0|                    if (!out_quiet) {
23310|      0|                        {
23311|      0|                            prline(p, nl___0, ':');
23312|      0|                        }
23313|      0|                    }
23314|      0|                    p = nl___0;
23315|      0|                    n++;
23316|      0|                }
23317|      0|while_break___6: /* CIL Label */
23318|      0|                ;
23319|      0|            }
23320|      0|while_break___2:
23321|      0|            ;
23322|      0|        }
23323|      3|        else {
23324|      3|            if (!out_quiet) {
23325|      3|                {
23326|      3|                    prline(beg, lim, ':');
23327|      3|                }
23328|      3|            }
23329|      3|            n = (intmax_t)1;
23330|      3|            p = lim;
23331|      3|        }
23332|      3|        after_last_match = bufoffset - (buflim - (char *)p);
23333|      3|        if (out_quiet) {
23334|      0|            pending = (intmax_t)0;
23335|      0|        }
23336|      3|        else {
23337|      3|            pending = out_after;
23338|      3|        }
23339|      3|        used = (_Bool)1;
23340|      3|        outleft -= n;
23341|      3|        return;
23342|      3|    }
23343|      3|}
23344|       |static size_t do_execute(char const *buf, size_t size, size_t *match_size, char const *start_ptr)
23345|      5|{
23346|      5|    size_t result;
23347|      5|    char const *line_next;
23348|      5|    size_t tmp;
23349|      5|    size_t tmp___0;
23350|      5|    char const *line_buf;
23351|      5|    char const *line_end;
23352|      5|    char const *tmp___1;
23353|       |
23354|      5|    {
23355|      5|        if ((unsigned long)execute == (unsigned long)(&Fexecute)) {
23356|      0|            goto _L;
23357|      0|        }
23358|      5|        else {
23359|      5|            if ((unsigned long)execute == (unsigned long)(&Pexecute)) {
23360|      0|_L : {
23361|      0|                    tmp___0 = __ctype_get_mb_cur_max();
23362|      0|                }
23363|      0|                if (tmp___0 == 1UL) {
23364|      0|                    {
23365|      0|                        tmp = (*execute)(buf, size, match_size, start_ptr);
23366|      0|                    }
23367|      0|                    return (tmp);
23368|      0|                }
23369|      0|                else {
23370|      0|                    if (!match_icase) {
23371|      0|                        {
23372|      0|                            tmp = (*execute)(buf, size, match_size, start_ptr);
23373|      0|                        }
23374|      0|                        return (tmp);
23375|      0|                    }
23376|      0|                }
23377|      0|            }
23378|      5|            else {
23379|      5|                {
23380|      5|                    tmp = (*execute)(buf, size, match_size, start_ptr);
23381|      5|                }
23382|      5|                return (tmp);
23383|      5|            }
23384|      5|        }
23385|      0|        line_next = buf;
23386|      0|        {
23387|      0|            while (1) {
23388|      0|while_continue: /* CIL Label */
23389|      0|                ;
23390|       |
23391|      0|                if (!((unsigned long)line_next < (unsigned long)(buf + size))) {
23392|      0|                    goto while_break;
23393|      0|                }
23394|      0|                {
23395|      0|                    line_buf = line_next;
23396|      0|                    tmp___1 = (char const *)memchr((void const *)line_buf, (int)eolbyte, (size_t)((buf + size) - line_buf));
23397|      0|                    line_end = tmp___1;
23398|      0|                }
23399|      0|                if ((unsigned long)line_end == (unsigned long)((void *)0)) {
23400|      0|                    line_end = buf + size;
23401|      0|                    line_next = line_end;
23402|      0|                }
23403|      0|                else {
23404|      0|                    line_next = line_end + 1;
23405|      0|                }
23406|      0|                if (start_ptr) {
23407|      0|                    if ((unsigned long)start_ptr >= (unsigned long)line_end) {
23408|      0|                        goto __Cont;
23409|      0|                    }
23410|      0|                }
23411|      0|                {
23412|      0|                    result = (*execute)(line_buf, (size_t)(line_next - line_buf), match_size, start_ptr);
23413|      0|                }
23414|      0|                if (result != 0xffffffffffffffffUL) {
23415|      0|                    return ((size_t)(line_buf - buf) + result);
23416|      0|                }
23417|      0|__Cont:
23418|      0|                ;
23419|      0|            }
23420|      0|while_break___0: /* CIL Label */
23421|      0|            ;
23422|      0|        }
23423|      0|while_break:
23424|      0|        ;
23425|      0|        return ((size_t)-1);
23426|      0|    }
23427|      0|}
23428|       |static intmax_t grepbuf(char const *beg, char const *lim)
23429|      4|{
23430|      4|    intmax_t outleft0;
23431|      4|    char const *p;
23432|      4|    char const *endp;
23433|      4|    size_t match_size;
23434|      4|    size_t match_offset;
23435|      4|    size_t tmp;
23436|      4|    char const *b;
23437|      4|    char const *prbeg;
23438|      4|    char const *tmp___0;
23439|      4|    char const *prend;
23440|      4|    char const *tmp___1;
23441|       |
23442|      4|    {
23443|      4|        outleft0 = outleft;
23444|      4|        p = beg;
23445|      4|        {
23446|      7|            while (1) {
23447|      7|while_continue: /* CIL Label */
23448|      7|                ;
23449|       |
23450|      7|                if (!((unsigned long)p < (unsigned long)lim)) {
23451|      2|                    goto while_break;
23452|      2|                }
23453|      5|                {
23454|      5|                    tmp = do_execute(p, (size_t)(lim - p), &match_size, (char const *)((void *)0));
23455|      5|                    match_offset = tmp;
23456|      5|                }
23457|      5|                if (match_offset == 0xffffffffffffffffUL) {
23458|      2|                    if (!out_invert) {
23459|      2|                        goto while_break;
23460|      2|                    }
23461|      0|                    match_offset = (size_t)(lim - p);
23462|      0|                    match_size = (size_t)0;
23463|      0|                }
23464|      3|                b = p + match_offset;
23465|      3|                endp = b + match_size;
23466|      3|                if (!out_invert) {
23467|      3|                    if ((unsigned long)b == (unsigned long)lim) {
23468|      0|                        goto while_break;
23469|      0|                    }
23470|      3|                }
23471|      3|                if (!out_invert) {
23472|      3|                    goto _L___0;
23473|      3|                }
23474|      0|                else {
23475|      0|                    if ((unsigned long)p < (unsigned long)b) {
23476|      3|_L___0:
23477|      3|                        if (out_invert) {
23478|      0|                            tmp___0 = p;
23479|      0|                        }
23480|      3|                        else {
23481|      3|                            tmp___0 = b;
23482|      3|                        }
23483|      3|                        prbeg = tmp___0;
23484|      3|                        if (out_invert) {
23485|      0|                            tmp___1 = b;
23486|      0|                        }
23487|      3|                        else {
23488|      3|                            tmp___1 = endp;
23489|      3|                        }
23490|      3|                        {
23491|      3|                            prend = tmp___1;
23492|      3|                            prtext(prbeg, prend);
23493|      3|                        }
23494|      3|                        if (!outleft) {
23495|      0|                            goto _L;
23496|      0|                        }
23497|      3|                        else {
23498|      3|                            if (done_on_match) {
23499|      0|_L:
23500|      0|                                if (exit_on_match) {
23501|      0|                                    {
23502|      0|                                        exit(0);
23503|      0|                                    }
23504|      0|                                }
23505|      0|                                goto while_break;
23506|      0|                            }
23507|      3|                        }
23508|      3|                    }
23509|      0|                }
23510|      3|                p = endp;
23511|      3|            }
23512|      0|while_break___0: /* CIL Label */
23513|      0|            ;
23514|      0|        }
23515|      4|while_break:
23516|      4|        ;
23517|      4|        return (outleft0 - outleft);
23518|      0|    }
23519|      0|}
23520|       |static intmax_t grep(int fd, struct stat const *st)
23521|      4|{
23522|      4|    intmax_t nlines;
23523|      4|    intmax_t i;
23524|      4|    int not_text;
23525|      4|    size_t residue;
23526|      4|    size_t save;
23527|      4|    char oldc;
23528|      4|    char *beg;
23529|      4|    char *lim;
23530|      4|    char eol;
23531|      4|    int tmp;
23532|      4|    int *tmp___0;
23533|      4|    int tmp___1;
23534|      4|    int tmp___2;
23535|      4|    int tmp___3;
23536|      4|    intmax_t tmp___4;
23537|      4|    int *tmp___5;
23538|      4|    int tmp___6;
23539|      4|    char *tmp___7;
23540|      4|    intmax_t tmp___8;
23541|      4|    char *tmp___9;
23542|      4|    char *__cil_tmp25;
23543|       |
23544|      4|    {
23545|      4|        {
23546|      4|            eol = (char)eolbyte;
23547|      4|            tmp = reset(fd, st);
23548|      4|        }
23549|      4|        if (!tmp) {
23550|      0|            return ((intmax_t)0);
23551|      0|        }
23552|      4|        {
23553|      4|            totalcc = (uintmax_t)0;
23554|      4|            lastout = (char const *)0;
23555|      4|            totalnl = (uintmax_t)0;
23556|      4|            outleft = max_count;
23557|      4|            after_last_match = (off_t)0;
23558|      4|            pending = (intmax_t)0;
23559|      4|            nlines = (intmax_t)0;
23560|      4|            residue = (size_t)0;
23561|      4|            save = (size_t)0;
23562|      4|            tmp___1 = fillbuf(save, st);
23563|      4|        }
23564|      4|        if (!tmp___1) {
23565|      0|            {
23566|      0|                tmp___0 = __errno_location();
23567|      0|                suppressible_error(filename, *tmp___0);
23568|      0|            }
23569|      0|            return ((intmax_t)0);
23570|      0|        }
23571|      4|        if ((unsigned int)binary_files == 0U) {
23572|      4|            if (!out_quiet) {
23573|      4|                goto _L;
23574|      4|            }
23575|      0|            else {
23576|      0|                goto _L___0;
23577|      0|            }
23578|      4|        }
23579|      0|        else {
23580|      0|_L___0:
23581|      0|            if ((unsigned int)binary_files == 2U) {
23582|      4|_L : {
23583|      4|                    tmp___2 = file_is_binary((char const *)bufbeg, (size_t)(buflim - bufbeg), fd,
23584|      4|                                             st);
23585|      4|                }
23586|      4|                if (tmp___2) {
23587|      0|                    tmp___3 = 1;
23588|      0|                }
23589|      4|                else {
23590|      4|                    tmp___3 = 0;
23591|      4|                }
23592|      4|            }
23593|      0|            else {
23594|      0|                tmp___3 = 0;
23595|      0|            }
23596|      0|        }
23597|      4|        not_text = tmp___3;
23598|      4|        if (not_text) {
23599|      0|            if ((unsigned int)binary_files == 2U) {
23600|      0|                return ((intmax_t)0);
23601|      0|            }
23602|      0|        }
23603|      4|        done_on_match += not_text;
23604|      4|        out_quiet += not_text;
23605|      4|        {
23606|      8|            while (1) {
23607|      8|while_continue: /* CIL Label */
23608|      8|                ;
23609|      8|                lastnl = (char const *)bufbeg;
23610|      8|                if (lastout) {
23611|      2|                    lastout = (char const *)bufbeg;
23612|      2|                }
23613|      8|                beg = bufbeg + save;
23614|      8|                if ((unsigned long)beg == (unsigned long)buflim) {
23615|      4|                    goto while_break;
23616|      4|                }
23617|      4|                {
23618|      4|                    oldc = *(beg + -1);
23619|      4|                    *(beg + -1) = eol;
23620|      4|                    lim = (char *)memrchr((void const *)(beg - 1), (int)eol, (size_t)((buflim - beg) + 1L));
23621|      4|                    lim++;
23622|      4|                    *(beg + -1) = oldc;
23623|      4|                }
23624|      4|                if ((unsigned long)lim == (unsigned long)beg) {
23625|      0|                    lim = beg - residue;
23626|      0|                }
23627|      4|                beg -= residue;
23628|      4|                residue = (size_t)(buflim - lim);
23629|      4|                if ((unsigned long)beg < (unsigned long)lim) {
23630|      4|                    if (outleft) {
23631|      4|                        {
23632|      4|                            tmp___4 = grepbuf((char const *)beg, (char const *)lim);
23633|      4|                            nlines += tmp___4;
23634|      4|                        }
23635|      4|                    }
23636|      4|                    if (pending) {
23637|      3|                        {
23638|      3|                            prpending((char const *)lim);
23639|      3|                        }
23640|      3|                    }
23641|      4|                    if (!outleft) {
23642|      0|                        if (!pending) {
23643|      0|                            goto finish_grep;
23644|      0|                        }
23645|      0|                        else {
23646|      0|                            goto _L___1;
23647|      0|                        }
23648|      0|                    }
23649|      4|                    else {
23650|      4|_L___1:
23651|      4|                        if (nlines) {
23652|      3|                            if (done_on_match) {
23653|      0|                                goto finish_grep;
23654|      0|                            }
23655|      3|                        }
23656|      4|                    }
23657|      4|                }
23658|      4|                i = (intmax_t)0;
23659|      4|                beg = lim;
23660|      4|                {
23661|      4|                    while (1) {
23662|      4|while_continue___0: /* CIL Label */
23663|      4|                        ;
23664|       |
23665|      4|                        if (i < out_before) {
23666|      0|                            if ((unsigned long)beg > (unsigned long)bufbeg) {
23667|      0|                                if (!((unsigned long)beg != (unsigned long)lastout)) {
23668|      0|                                    goto while_break___0;
23669|      0|                                }
23670|      0|                            }
23671|      0|                            else {
23672|      0|                                goto while_break___0;
23673|      0|                            }
23674|      0|                        }
23675|      4|                        else {
23676|      4|                            goto while_break___0;
23677|      4|                        }
23678|      0|                        i++;
23679|      0|                        {
23680|      0|                            while (1) {
23681|      0|while_continue___1: /* CIL Label */
23682|      0|                                ;
23683|      0|                                beg--;
23684|      0|                                if (!((int)*(beg + -1) != (int)eol)) {
23685|      0|                                    goto while_break___1;
23686|      0|                                }
23687|      0|                            }
23688|      0|while_break___4: /* CIL Label */
23689|      0|                            ;
23690|      0|                        }
23691|      0|while_break___1:
23692|      0|                        ;
23693|      0|                    }
23694|      0|while_break___3: /* CIL Label */
23695|      0|                    ;
23696|      0|                }
23697|      4|while_break___0:
23698|      4|                ;
23699|      4|                if ((unsigned long)beg != (unsigned long)lastout) {
23700|      2|                    lastout = (char const *)0;
23701|      2|                }
23702|      4|                save = (size_t)((lim + residue) - beg);
23703|      4|                if (out_byte) {
23704|      0|                    {
23705|      0|                        totalcc = add_count(totalcc, (size_t)(buflim - bufbeg) - save);
23706|      0|                    }
23707|      0|                }
23708|      4|                if (out_line) {
23709|      0|                    {
23710|      0|                        nlscan((char const *)beg);
23711|      0|                    }
23712|      0|                }
23713|      4|                {
23714|      4|                    tmp___6 = fillbuf(save, st);
23715|      4|                }
23716|      4|                if (!tmp___6) {
23717|      0|                    {
23718|      0|                        tmp___5 = __errno_location();
23719|      0|                        suppressible_error(filename, *tmp___5);
23720|      0|                    }
23721|      0|                    goto finish_grep;
23722|      0|                }
23723|      4|            }
23724|      0|while_break___2: /* CIL Label */
23725|      0|            ;
23726|      0|        }
23727|      4|while_break:
23728|      4|        ;
23729|      4|        if (residue) {
23730|      0|            tmp___7 = buflim;
23731|      0|            buflim++;
23732|      0|            *tmp___7 = eol;
23733|      0|            if (outleft) {
23734|      0|                {
23735|      0|                    tmp___8 = grepbuf((char const *)((bufbeg + save) - residue), (char const *)buflim);
23736|      0|                    nlines += tmp___8;
23737|      0|                }
23738|      0|            }
23739|      0|            if (pending) {
23740|      0|                {
23741|      0|                    prpending((char const *)buflim);
23742|      0|                }
23743|      0|            }
23744|      0|        }
23745|      4|finish_grep:
23746|      4|        done_on_match -= not_text;
23747|      4|        out_quiet -= not_text;
23748|      4|        if (not_text & ~out_quiet) {
23749|      0|            if (nlines != 0L) {
23750|      0|                {
23751|      0|                    tmp___9 = gettext("Binary file %s matches\n");
23752|      0|                    printf((char const * /* __restrict  */)((char const *)tmp___9), filename);
23753|      0|                }
23754|      0|            }
23755|      0|        }
23756|      4|        return (nlines);
23757|      4|    }
23758|      4|}
23759|       |static int grepdirent(FTS *fts, FTSENT *ent, int command_line)
23760|      5|{
23761|      5|    int follow;
23762|      5|    int dirdesc;
23763|      5|    struct stat *st;
23764|      5|    int tmp;
23765|      5|    int tmp___0;
23766|      5|    int tmp___1;
23767|      5|    char *tmp___2;
23768|      5|    char *tmp___3;
23769|      5|    struct stat st1;
23770|      5|    int flag;
23771|      5|    int tmp___4;
23772|      5|    int *tmp___5;
23773|      5|    int tmp___6;
23774|      5|    int tmp___7;
23775|      5|    int tmp___8;
23776|      5|    void *__cil_tmp22;
23777|      5|    char *__cil_tmp23;
23778|      5|    char *__cil_tmp24;
23779|       |
23780|      5|    {
23781|      5|        st = ent->fts_statp;
23782|      5|        command_line &= ent->fts_level == 0L;
23783|      5|        if ((int)ent->fts_info == 6) {
23784|      1|            if ((unsigned int)directories == 3U) {
23785|      1|                if (command_line) {
23786|      1|                    out_file &= ~(2 * !no_filenames);
23787|      1|                }
23788|      1|            }
23789|      1|            return (1);
23790|      1|        }
23791|      4|        if ((int)ent->fts_info == 1) {
23792|      1|            tmp = 1;
23793|      1|        }
23794|      3|        else {
23795|      3|            if ((int)ent->fts_info == 2) {
23796|      0|                tmp = 1;
23797|      0|            }
23798|      3|            else {
23799|      3|                if ((int)ent->fts_info == 4) {
23800|      0|                    tmp = 1;
23801|      0|                }
23802|      3|                else {
23803|      3|                    tmp = 0;
23804|      3|                }
23805|      3|            }
23806|      3|        }
23807|      4|        {
23808|      4|            tmp___0 = skipped_file((char const *)(ent->fts_name), command_line, tmp);
23809|      4|        }
23810|      4|        if (tmp___0) {
23811|      0|            {
23812|      0|                fts_set(fts, ent, 4);
23813|      0|            }
23814|      0|            return (1);
23815|      0|        }
23816|      4|        filename = (char const *)(ent->fts_path + filename_prefix_len);
23817|      4|        if (fts->fts_options & 2) {
23818|      0|            tmp___1 = 1;
23819|      0|        }
23820|      4|        else {
23821|      4|            if (fts->fts_options & 1) {
23822|      4|                if (command_line) {
23823|      1|                    tmp___1 = 1;
23824|      1|                }
23825|      3|                else {
23826|      3|                    tmp___1 = 0;
23827|      3|                }
23828|      4|            }
23829|      0|            else {
23830|      0|                tmp___1 = 0;
23831|      0|            }
23832|      4|        }
23833|      4|        follow = tmp___1;
23834|      4|        if ((int)ent->fts_info == 1) {
23835|      1|            goto case_1;
23836|      1|        }
23837|      3|        if ((int)ent->fts_info == 2) {
23838|      0|            goto case_2;
23839|      0|        }
23840|      3|        if ((int)ent->fts_info == 4) {
23841|      0|            goto case_4;
23842|      0|        }
23843|      3|        if ((int)ent->fts_info == 7) {
23844|      0|            goto case_4;
23845|      0|        }
23846|      3|        if ((int)ent->fts_info == 10) {
23847|      0|            goto case_4;
23848|      0|        }
23849|      3|        if ((int)ent->fts_info == 3) {
23850|      0|            goto case_3;
23851|      0|        }
23852|      3|        if ((int)ent->fts_info == 11) {
23853|      3|            goto case_3;
23854|      3|        }
23855|      0|        if ((int)ent->fts_info == 8) {
23856|      0|            goto case_8;
23857|      0|        }
23858|      0|        if ((int)ent->fts_info == 13) {
23859|      0|            goto case_8;
23860|      0|        }
23861|      0|        if ((int)ent->fts_info == 12) {
23862|      0|            goto case_12;
23863|      0|        }
23864|      0|        if ((int)ent->fts_info == 14) {
23865|      0|            goto case_12;
23866|      0|        }
23867|      0|        goto switch_default;
23868|      1|case_1:
23869|      1|        if ((unsigned int)directories == 3U) {
23870|      1|            out_file |= 2 * !no_filenames;
23871|      1|            return (1);
23872|      1|        }
23873|      0|        {
23874|      0|            fts_set(fts, ent, 4);
23875|      0|        }
23876|      0|        goto switch_break;
23877|      0|case_2:
23878|      0|        if (!suppress_errors) {
23879|      0|            {
23880|      0|                tmp___2 = gettext("recursive directory loop");
23881|      0|                tmp___3 = gettext("warning: %s: %s");
23882|      0|                error(0, 0, (char const *)tmp___3, filename, tmp___2);
23883|      0|            }
23884|      0|        }
23885|      0|        return (1);
23886|      0|case_4 : {
23887|      0|            suppressible_error(filename, ent->fts_errno);
23888|      0|        }
23889|      0|        return (1);
23890|      3|case_3:
23891|      3|        if ((unsigned int)devices == 2U) {
23892|      0|            goto _L;
23893|      0|        }
23894|      3|        else {
23895|      3|            if ((unsigned int)devices == 0U) {
23896|      3|                if (!command_line) {
23897|      3|_L:
23898|      3|                    if (!st->st_mode) {
23899|      0|                        if (follow) {
23900|      0|                            tmp___4 = 0;
23901|      0|                        }
23902|      0|                        else {
23903|      0|                            tmp___4 = 256;
23904|      0|                        }
23905|      0|                        {
23906|      0|                            flag = tmp___4;
23907|      0|                            tmp___6 = fstatat(fts->fts_cwd_fd, (char const * /* __restrict  */)((char const *)ent->fts_accpath),
23908|      0|                                              (struct stat * /* __restrict  */)(&st1), flag);
23909|      0|                        }
23910|      0|                        if (tmp___6 != 0) {
23911|      0|                            {
23912|      0|                                tmp___5 = __errno_location();
23913|      0|                                suppressible_error(filename, *tmp___5);
23914|      0|                            }
23915|      0|                            return (1);
23916|      0|                        }
23917|      0|                        st = &st1;
23918|      0|                    }
23919|      3|                    {
23920|      3|                        tmp___7 = is_device_mode(st->st_mode);
23921|      3|                    }
23922|      3|                    if (tmp___7) {
23923|      0|                        return (1);
23924|      0|                    }
23925|      3|                }
23926|      3|            }
23927|      3|        }
23928|      3|        goto switch_break;
23929|      3|case_8:
23930|      0|        goto switch_break;
23931|      3|case_12:
23932|      0|        return (1);
23933|      0|switch_default : {
23934|      0|            abort();
23935|      3|        }
23936|      3|switch_break:
23937|      3|        ;
23938|      3|        if ((fts->fts_options & 516) == 512) {
23939|      3|            dirdesc = fts->fts_cwd_fd;
23940|      3|        }
23941|      0|        else {
23942|      0|            dirdesc = -100;
23943|      0|        }
23944|      3|        {
23945|      3|            tmp___8 = grepfile(dirdesc, (char const *)ent->fts_accpath, follow, command_line);
23946|      3|        }
23947|      3|        return (tmp___8);
23948|      3|    }
23949|      3|}
23950|       |static int grepfile(int dirdesc, char const *name, int follow, int command_line)
23951|      5|{
23952|      5|    int desc;
23953|      5|    int tmp;
23954|      5|    int tmp___0;
23955|      5|    int *tmp___1;
23956|      5|    int *tmp___2;
23957|      5|    int *tmp___3;
23958|      5|    int tmp___4;
23959|       |
23960|      5|    {
23961|      5|        if (follow) {
23962|      2|            tmp = 0;
23963|      2|        }
23964|      3|        else {
23965|      3|            tmp = 131072;
23966|      3|        }
23967|      5|        {
23968|      5|            tmp___0 = openat_safer(dirdesc, name, tmp);
23969|      5|            desc = tmp___0;
23970|      5|        }
23971|      5|        if (desc < 0) {
23972|      0|            if (follow) {
23973|      0|                {
23974|      0|                    tmp___1 = __errno_location();
23975|      0|                    suppressible_error(filename, *tmp___1);
23976|      0|                }
23977|      0|            }
23978|      0|            else {
23979|      0|                {
23980|      0|                    tmp___2 = __errno_location();
23981|      0|                }
23982|      0|                if (*tmp___2 != 40) {
23983|      0|                    {
23984|      0|                        tmp___3 = __errno_location();
23985|      0|                    }
23986|      0|                    if (*tmp___3 != 31) {
23987|      0|                        {
23988|      0|                            tmp___1 = __errno_location();
23989|      0|                            suppressible_error(filename, *tmp___1);
23990|      0|                        }
23991|      0|                    }
23992|      0|                }
23993|      0|            }
23994|      0|            return (1);
23995|      0|        }
23996|      5|        {
23997|      5|            tmp___4 = grepdesc(desc, command_line);
23998|      5|        }
23999|      5|        return (tmp___4);
24000|      5|    }
24001|      5|}
24002|       |static int grepdesc(int desc, int command_line)
24003|      5|{
24004|      5|    intmax_t count;
24005|      5|    int status;
24006|      5|    struct stat st;
24007|      5|    int *tmp;
24008|      5|    int tmp___0;
24009|      5|    int tmp___1;
24010|      5|    FTS *fts;
24011|      5|    FTSENT *ent;
24012|      5|    int opts;
24013|      5|    int tmp___2;
24014|      5|    char *fts_arg[2];
24015|      5|    int *tmp___3;
24016|      5|    int tmp___4;
24017|      5|    int tmp___5;
24018|      5|    int *tmp___6;
24019|      5|    int *tmp___7;
24020|      5|    int *tmp___8;
24021|      5|    int tmp___9;
24022|      5|    int tmp___10;
24023|      5|    char const *tmp___11;
24024|      5|    char *tmp___12;
24025|      5|    int tmp___13;
24026|      5|    off_t required_offset;
24027|      5|    off_t tmp___14;
24028|      5|    int *tmp___15;
24029|      5|    __off_t tmp___16;
24030|      5|    int *tmp___17;
24031|      5|    int tmp___18;
24032|      5|    void *__cil_tmp34;
24033|      5|    void *__cil_tmp35;
24034|      5|    char *__cil_tmp36;
24035|       |
24036|      5|    {
24037|      5|        {
24038|      5|            status = 1;
24039|      5|            tmp___0 = fstat(desc, &st);
24040|      5|        }
24041|      5|        if (tmp___0 != 0) {
24042|      0|            {
24043|      0|                tmp = __errno_location();
24044|      0|                suppressible_error(filename, *tmp);
24045|      0|            }
24046|      0|            goto closeout;
24047|      0|        }
24048|      5|        if (desc != 0) {
24049|      5|            if (command_line) {
24050|      2|                {
24051|      2|                    tmp___1 = skipped_file(filename, 1, (st.st_mode & 61440U) == 16384U);
24052|      2|                }
24053|      2|                if (tmp___1) {
24054|      0|                    goto closeout;
24055|      0|                }
24056|      2|            }
24057|      5|        }
24058|      5|        if (desc != 0) {
24059|      5|            if ((unsigned int)directories == 3U) {
24060|      4|                if ((st.st_mode & 61440U) == 16384U) {
24061|      1|                    if (command_line) {
24062|      1|                        tmp___2 = 0;
24063|      1|                    }
24064|      0|                    else {
24065|      0|                        tmp___2 = 1;
24066|      0|                    }
24067|      1|                    {
24068|      1|                        opts = fts_options & ~tmp___2;
24069|      1|                        tmp___4 = close(desc);
24070|      1|                    }
24071|      1|                    if (tmp___4 != 0) {
24072|      0|                        {
24073|      0|                            tmp___3 = __errno_location();
24074|      0|                            suppressible_error(filename, *tmp___3);
24075|      0|                        }
24076|      0|                    }
24077|      1|                    {
24078|      1|                        fts_arg[0] = (char *)filename;
24079|      1|                        fts_arg[1] = (char *)((void *)0);
24080|      1|                        fts = fts_open((char *const *)(fts_arg), opts, (int (*)(FTSENT const **, FTSENT const **))((void *)0));
24081|      1|                    }
24082|      1|                    if (!fts) {
24083|      0|                        {
24084|      0|                            xalloc_die();
24085|      0|                        }
24086|      0|                    }
24087|      1|                    {
24088|      6|                        while (1) {
24089|      6|while_continue: /* CIL Label */
24090|      6|                            ;
24091|      6|                            {
24092|      6|                                ent = fts_read(fts);
24093|      6|                            }
24094|      6|                            if (!ent) {
24095|      1|                                goto while_break;
24096|      1|                            }
24097|      5|                            {
24098|      5|                                tmp___5 = grepdirent(fts, ent, command_line);
24099|      5|                                status &= tmp___5;
24100|      5|                            }
24101|      5|                        }
24102|      0|while_break___0: /* CIL Label */
24103|      0|                        ;
24104|      0|                    }
24105|      1|while_break : {
24106|      1|                        tmp___7 = __errno_location();
24107|      1|                    }
24108|      1|                    if (*tmp___7) {
24109|      0|                        {
24110|      0|                            tmp___6 = __errno_location();
24111|      0|                            suppressible_error(filename, *tmp___6);
24112|      0|                        }
24113|      0|                    }
24114|      1|                    {
24115|      1|                        tmp___9 = fts_close(fts);
24116|      1|                    }
24117|      1|                    if (tmp___9 != 0) {
24118|      0|                        {
24119|      0|                            tmp___8 = __errno_location();
24120|      0|                            suppressible_error(filename, *tmp___8);
24121|      0|                        }
24122|      0|                    }
24123|      1|                    return (status);
24124|      0|                }
24125|      4|            }
24126|      5|        }
24127|      4|        if (desc != 0) {
24128|      4|            if ((unsigned int)directories == 4U) {
24129|      0|                if ((st.st_mode & 61440U) == 16384U) {
24130|      0|                    goto closeout;
24131|      0|                }
24132|      0|                else {
24133|      0|                    goto _L___0;
24134|      0|                }
24135|      0|            }
24136|      4|            else {
24137|      4|_L___0:
24138|      4|                if ((unsigned int)devices == 2U) {
24139|      0|                    goto _L;
24140|      0|                }
24141|      4|                else {
24142|      4|                    if ((unsigned int)devices == 0U) {
24143|      4|                        if (!command_line) {
24144|      3|_L : {
24145|      3|                                tmp___10 = is_device_mode(st.st_mode);
24146|      3|                            }
24147|      3|                            if (tmp___10) {
24148|      0|                                goto closeout;
24149|      0|                            }
24150|      3|                        }
24151|      4|                    }
24152|      4|                }
24153|      4|            }
24154|      4|        }
24155|      4|        if (!out_quiet) {
24156|      4|            if (list_files == 0) {
24157|      4|                if (1L < max_count) {
24158|      4|                    if ((out_stat.st_mode & 61440U) == 32768U) {
24159|      0|                        if (out_stat.st_ino) {
24160|      0|                            if (st.st_ino == out_stat.st_ino) {
24161|      0|                                if (st.st_dev == out_stat.st_dev) {
24162|      0|                                    if (!suppress_errors) {
24163|      0|                                        {
24164|      0|                                            tmp___11 = quote(filename);
24165|      0|                                            tmp___12 = gettext("input file %s is also the output");
24166|      0|                                            error(0, 0, (char const *)tmp___12, tmp___11);
24167|      0|                                        }
24168|      0|                                    }
24169|      0|                                    errseen = 1;
24170|      0|                                    goto closeout;
24171|      0|                                }
24172|      0|                            }
24173|      0|                        }
24174|      0|                    }
24175|      4|                }
24176|      4|            }
24177|      4|        }
24178|      4|        {
24179|      4|            tmp___13 = isatty(desc);
24180|      4|        }
24181|      4|        if (!tmp___13) {
24182|      4|            {
24183|      4|                set_binary_mode(desc, 0);
24184|      4|            }
24185|      4|        }
24186|      4|        {
24187|      4|            count = grep(desc, (struct stat const *)(&st));
24188|      4|        }
24189|      4|        if (count < 0L) {
24190|      0|            status = (int)(count + 2L);
24191|      0|        }
24192|      4|        else {
24193|      4|            if (count_matches) {
24194|      0|                if (out_file) {
24195|      0|                    {
24196|      0|                        print_filename();
24197|      0|                    }
24198|      0|                    if (filename_mask) {
24199|      0|                        {
24200|      0|                            print_sep((char)':');
24201|      0|                        }
24202|      0|                    }
24203|      0|                    else {
24204|      0|                        {
24205|      0|                            fputc_unlocked(0, stdout);
24206|      0|                        }
24207|      0|                    }
24208|      0|                }
24209|      0|                {
24210|      0|                    printf((char const * /* __restrict  */) "%ld\n", count);
24211|      0|                }
24212|      0|            }
24213|      4|            status = !count;
24214|      4|            if (list_files == 1 - 2 * status) {
24215|      0|                {
24216|      0|                    print_filename();
24217|      0|                    fputc_unlocked(10 & filename_mask, stdout);
24218|      0|                }
24219|      0|            }
24220|      4|            if (desc == 0) {
24221|      0|                if (outleft) {
24222|      0|                    tmp___14 = bufoffset;
24223|      0|                }
24224|      0|                else {
24225|      0|                    tmp___14 = after_last_match;
24226|      0|                }
24227|      0|                required_offset = tmp___14;
24228|      0|                if (required_offset != bufoffset) {
24229|      0|                    {
24230|      0|                        tmp___16 = lseek(desc, required_offset, 0);
24231|      0|                    }
24232|      0|                    if (tmp___16 < 0L) {
24233|      0|                        if ((st.st_mode & 61440U) == 32768U) {
24234|      0|                            {
24235|      0|                                tmp___15 = __errno_location();
24236|      0|                                suppressible_error(filename, *tmp___15);
24237|      0|                            }
24238|      0|                        }
24239|      0|                    }
24240|      0|                }
24241|      0|            }
24242|      4|        }
24243|      4|closeout:
24244|      4|        if (desc != 0) {
24245|      4|            {
24246|      4|                tmp___18 = close(desc);
24247|      4|            }
24248|      4|            if (tmp___18 != 0) {
24249|      0|                {
24250|      0|                    tmp___17 = __errno_location();
24251|      0|                    suppressible_error(filename, *tmp___17);
24252|      0|                }
24253|      0|            }
24254|      4|        }
24255|      4|        return (status);
24256|      4|    }
24257|      4|}
24258|       |static int grep_command_line_arg(char const *arg)
24259|      2|{
24260|      2|    char *tmp;
24261|      2|    int tmp___0;
24262|      2|    int tmp___1;
24263|      2|    int tmp___2;
24264|      2|    char *__cil_tmp7;
24265|       |
24266|      2|    {
24267|      2|        {
24268|      2|            tmp___2 = strcmp(arg, "-");
24269|      2|        }
24270|      2|        if (tmp___2 == 0) {
24271|      0|            if (label) {
24272|      0|                filename = (char const *)label;
24273|      0|            }
24274|      0|            else {
24275|      0|                {
24276|      0|                    tmp = gettext("(standard input)");
24277|      0|                    filename = (char const *)tmp;
24278|      0|                }
24279|      0|            }
24280|      0|            {
24281|      0|                tmp___0 = grepdesc(0, 1);
24282|      0|            }
24283|      0|            return (tmp___0);
24284|      0|        }
24285|      2|        else {
24286|      2|            {
24287|      2|                filename = arg;
24288|      2|                tmp___1 = grepfile(-100, arg, 1, 1);
24289|      2|            }
24290|      2|            return (tmp___1);
24291|      2|        }
24292|      2|    }
24293|      2|}
24294|       |__attribute__((__noreturn__)) void usage(int status);
24295|       |void usage(int status)
24296|      0|{
24297|      0|    char *tmp;
24298|      0|    char *tmp___0;
24299|      0|    char *tmp___1;
24300|      0|    char *tmp___2;
24301|      0|    char *tmp___3;
24302|      0|    char *tmp___4;
24303|      0|    char *tmp___5;
24304|      0|    char *tmp___6;
24305|      0|    char *tmp___7;
24306|      0|    char *tmp___8;
24307|      0|    char *tmp___9;
24308|      0|    char *tmp___10;
24309|      0|    char *tmp___11;
24310|      0|    char *tmp___12;
24311|      0|    char *tmp___13;
24312|      0|    char *tmp___14;
24313|      0|    char *tmp___15;
24314|      0|    char *tmp___16;
24315|      0|    char *tmp___17;
24316|      0|    char *tmp___18;
24317|      0|    char *tmp___19;
24318|      0|    char *__cil_tmp44;
24319|      0|    char *__cil_tmp45;
24320|      0|    char *__cil_tmp46;
24321|      0|    char *__cil_tmp47;
24322|      0|    char *__cil_tmp48;
24323|      0|    char *__cil_tmp49;
24324|      0|    char *__cil_tmp50;
24325|      0|    char *__cil_tmp51;
24326|      0|    char *__cil_tmp52;
24327|      0|    char *__cil_tmp53;
24328|      0|    char *__cil_tmp54;
24329|      0|    char *__cil_tmp55;
24330|      0|    char *__cil_tmp56;
24331|      0|    char *__cil_tmp57;
24332|      0|    char *__cil_tmp58;
24333|      0|    char *__cil_tmp59;
24334|      0|    char *__cil_tmp60;
24335|      0|    char *__cil_tmp61;
24336|      0|    char *__cil_tmp62;
24337|      0|    char *__cil_tmp63;
24338|      0|    char *__cil_tmp64;
24339|       |
24340|      0|    {
24341|      0|        if (status != 0) {
24342|      0|            {
24343|      0|                tmp = gettext("Usage: %s [OPTION]... PATTERN [FILE]...\n");
24344|      0|                fprintf((FILE * /* __restrict  */) stderr, (char const * /* __restrict  */)((char const *)tmp),
24345|      0|                        program_name);
24346|      0|                tmp___0 = gettext("Try \'%s --help\' for more information.\n");
24347|      0|                fprintf((FILE * /* __restrict  */) stderr, (char const * /* __restrict  */)((char const *)tmp___0),
24348|      0|                        program_name);
24349|      0|            }
24350|      0|        }
24351|      0|        else {
24352|      0|            {
24353|      0|                tmp___1 = gettext("Usage: %s [OPTION]... PATTERN [FILE]...\n");
24354|      0|                printf((char const * /* __restrict  */)((char const *)tmp___1), program_name);
24355|      0|                tmp___2 = gettext("Search for PATTERN in each FILE or standard input.\n");
24356|      0|                printf((char const * /* __restrict  */)((char const *)tmp___2));
24357|      0|                tmp___3 = gettext("PATTERN is, by default, a basic regular expression (BRE).\n");
24358|      0|                printf((char const * /* __restrict  */)((char const *)tmp___3));
24359|      0|                tmp___4 = gettext("Example: %s -i \'hello world\' menu.h main.c\n\nRegexp selection and interpretation:\n");
24360|      0|                printf((char const * /* __restrict  */)((char const *)tmp___4), program_name);
24361|      0|                tmp___5 = gettext("  -E, --extended-regexp     PATTERN is an extended regular expression (ERE)\n  -F, --fixed-strings       PATTERN is a set of newline-separated fixed strings\n  -G, --basic-regexp        PATTERN is a basic regular expression (BRE)\n  -P, --perl-regexp         PATTERN is a Perl regular expression\n");
24362|      0|                printf((char const * /* __restrict  */)((char const *)tmp___5));
24363|      0|                tmp___6 = gettext("  -e, --regexp=PATTERN      use PATTERN for matching\n  -f, --file=FILE           obtain PATTERN from FILE\n  -i, --ignore-case         ignore case distinctions\n  -w, --word-regexp         force PATTERN to match only whole words\n  -x, --line-regexp         force PATTERN to match only whole lines\n  -z, --null-data           a data line ends in 0 byte, not newline\n");
24364|      0|                printf((char const * /* __restrict  */)((char const *)tmp___6));
24365|      0|                tmp___7 = gettext("\nMiscellaneous:\n  -s, --no-messages         suppress error messages\n  -v, --invert-match        select non-matching lines\n  -V, --version             display version information and exit\n      --help                display this help text and exit\n");
24366|      0|                printf((char const * /* __restrict  */)((char const *)tmp___7));
24367|      0|                tmp___8 = gettext("\nOutput control:\n  -m, --max-count=NUM       stop after NUM matches\n  -b, --byte-offset         print the byte offset with output lines\n  -n, --line-number         print line number with output lines\n      --line-buffered       flush output on every line\n  -H, --with-filename       print the file name for each match\n  -h, --no-filename         suppress the file name prefix on output\n      --label=LABEL         use LABEL as the standard input file name prefix\n");
24368|      0|                printf((char const * /* __restrict  */)((char const *)tmp___8));
24369|      0|                tmp___9 = gettext("  -o, --only-matching       show only the part of a line matching PATTERN\n  -q, --quiet, --silent     suppress all normal output\n      --binary-files=TYPE   assume that binary files are TYPE;\n                            TYPE is \'binary\', \'text\', or \'without-match\'\n  -a, --text                equivalent to --binary-files=text\n");
24370|      0|                printf((char const * /* __restrict  */)((char const *)tmp___9));
24371|      0|                tmp___10 = gettext("  -I                        equivalent to --binary-files=without-match\n  -d, --directories=ACTION  how to handle directories;\n                            ACTION is \'read\', \'recurse\', or \'skip\'\n  -D, --devices=ACTION      how to handle devices, FIFOs and sockets;\n                            ACTION is \'read\' or \'skip\'\n  -r, --recursive           like --directories=recurse\n  -R, --dereference-recursive  likewise, but follow all symlinks\n");
24372|      0|                printf((char const * /* __restrict  */)((char const *)tmp___10));
24373|      0|                tmp___11 = gettext("      --include=FILE_PATTERN  search only files that match FILE_PATTERN\n      --exclude=FILE_PATTERN  skip files and directories matching FILE_PATTERN\n      --exclude-from=FILE   skip files matching any file pattern from FILE\n      --exclude-dir=PATTERN  directories that match PATTERN will be skipped.\n");
24374|      0|                printf((char const * /* __restrict  */)((char const *)tmp___11));
24375|      0|                tmp___12 = gettext("  -L, --files-without-match  print only names of FILEs containing no match\n  -l, --files-with-matches  print only names of FILEs containing matches\n  -c, --count               print only a count of matching lines per FILE\n  -T, --initial-tab         make tabs line up (if needed)\n  -Z, --null                print 0 byte after FILE name\n");
24376|      0|                printf((char const * /* __restrict  */)((char const *)tmp___12));
24377|      0|                tmp___13 = gettext("\nContext control:\n  -B, --before-context=NUM  print NUM lines of leading context\n  -A, --after-context=NUM   print NUM lines of trailing context\n  -C, --context=NUM         print NUM lines of output context\n");
24378|      0|                printf((char const * /* __restrict  */)((char const *)tmp___13));
24379|      0|                tmp___14 = gettext("  -NUM                      same as --context=NUM\n      --color[=WHEN],\n      --colour[=WHEN]       use markers to highlight the matching strings;\n                            WHEN is \'always\', \'never\', or \'auto\'\n  -U, --binary              do not strip CR characters at EOL (MSDOS/Windows)\n  -u, --unix-byte-offsets   report offsets as if CRs were not there\n                            (MSDOS/Windows)\n\n");
24380|      0|                printf((char const * /* __restrict  */)((char const *)tmp___14));
24381|      0|                tmp___15 = gettext("\'egrep\' means \'grep -E\'.  \'fgrep\' means \'grep -F\'.\nDirect invocation as either \'egrep\' or \'fgrep\' is deprecated.\n");
24382|      0|                printf((char const * /* __restrict  */)((char const *)tmp___15));
24383|      0|                tmp___16 = gettext("When FILE is -, read standard input.  With no FILE, read . if a command-line\n-r is given, - otherwise.  If fewer than two FILEs are given, assume -h.\nExit status is 0 if any line is selected, 1 otherwise;\nif any error occurs and -q is not given, the exit status is 2.\n");
24384|      0|                printf((char const * /* __restrict  */)((char const *)tmp___16));
24385|      0|                tmp___17 = gettext("\nReport bugs to: %s\n");
24386|      0|                printf((char const * /* __restrict  */)((char const *)tmp___17), "bug-grep@gnu.org");
24387|      0|                tmp___18 = gettext("GNU Grep home page: <%s>\n");
24388|      0|                printf((char const * /* __restrict  */)((char const *)tmp___18), "http://www.gnu.org/software/grep/");
24389|      0|                tmp___19 = gettext("General help using GNU software: <http://www.gnu.org/gethelp/>\n");
24390|      0|                fputs_unlocked((char const * /* __restrict  */)((char const *)tmp___19), (FILE * /* __restrict  */) stdout);
24391|      0|            }
24392|      0|        }
24393|      0|        {
24394|      0|            exit(status);
24395|      0|        }
24396|      0|    }
24397|      0|}
24398|       |static void Gcompile(char const *pattern, size_t size)
24399|      2|{
24400|       |
24401|      2|    {
24402|      2|        {
24403|      2|            GEAcompile(pattern, size, (((((1UL << 1) | ((1UL << 1) << 1)) | ((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | (((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | (((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | ((((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1));
24404|      2|        }
24405|      2|        return;
24406|      2|    }
24407|      2|}
24408|       |static void Ecompile(char const *pattern, size_t size)
24409|      0|{
24410|       |
24411|      0|    {
24412|      0|        {
24413|      0|            GEAcompile(pattern, size, (((((((((((1UL << 1) << 1) | (((1UL << 1) << 1) << 1)) | ((((1UL << 1) << 1) << 1) << 1)) | ((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | (((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | (((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | (((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | (((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | ((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | (((((((((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | ((((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1));
24414|      0|        }
24415|      0|        return;
24416|      0|    }
24417|      0|}
24418|       |static void Acompile(char const *pattern, size_t size)
24419|      0|{
24420|       |
24421|      0|    {
24422|      0|        {
24423|      0|            GEAcompile(pattern, size, (((((((((1UL | (((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | (((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | ((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | (((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | ((((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | ((((((1UL << 1) << 1) << 1) << 1) << 1) << 1)) | (((1UL << 1) << 1) << 1)) | ((1UL << 1) << 1)) | (((((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | (((((((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1));
24424|      0|        }
24425|      0|        return;
24426|      0|    }
24427|      0|}
24428|       |static void GAcompile(char const *pattern, size_t size)
24429|      0|{
24430|       |
24431|      0|    {
24432|      0|        {
24433|      0|            GEAcompile(pattern, size, (((((((((((((((1UL << 1) << 1) | ((((((1UL << 1) << 1) << 1) << 1) << 1) << 1)) | (((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | (((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | ((((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | (((1UL << 1) << 1) << 1)) | ((((1UL << 1) << 1) << 1) << 1)) | ((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | (((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | (((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | (((((1UL << 1) << 1) << 1) << 1) << 1)) | (((((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | 1UL) | (((((((((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) & ~(((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) | ((((1UL << 1) << 1) << 1) << 1)) | (((((1UL << 1) << 1) << 1) << 1) << 1)));
24434|      0|        }
24435|      0|        return;
24436|      0|    }
24437|      0|}
24438|       |static void PAcompile(char const *pattern, size_t size)
24439|      0|{
24440|       |
24441|      0|    {
24442|      0|        {
24443|      0|            GEAcompile(pattern, size, ((((((((((((((((1UL << 1) << 1) | ((((((1UL << 1) << 1) << 1) << 1) << 1) << 1)) | (((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | (((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | ((((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | (((1UL << 1) << 1) << 1)) | ((((1UL << 1) << 1) << 1) << 1)) | ((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | (((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | (((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | (((((1UL << 1) << 1) << 1) << 1) << 1)) | (((((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | 1UL) | (((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | (((((((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | (((((((((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1));
24444|      0|        }
24445|      0|        return;
24446|      0|    }
24447|      0|}
24448|       |static struct matcher const matchers[8] = {
24449|       |    {   {
24450|       |            (char const)'g', (char const)'r', (char const)'e', (char const)'p',
24451|       |            (char const)'\000'
24452|       |        },
24453|       |        &Gcompile,
24454|       |        &EGexecute
24455|       |    },
24456|       |    {   {
24457|       |            (char const)'e', (char const)'g', (char const)'r', (char const)'e',
24458|       |            (char const)'p', (char const)'\000'
24459|       |        },
24460|       |        &Ecompile,
24461|       |        &EGexecute
24462|       |    },
24463|       |    {   {
24464|       |            (char const)'f', (char const)'g', (char const)'r', (char const)'e',
24465|       |            (char const)'p', (char const)'\000'
24466|       |        },
24467|       |        &Fcompile,
24468|       |        &Fexecute
24469|       |    },
24470|       |    {   {(char const)'a', (char const)'w', (char const)'k', (char const)'\000'},
24471|       |        &Acompile,
24472|       |        &EGexecute
24473|       |    },
24474|       |    {   {
24475|       |            (char const)'g', (char const)'a', (char const)'w', (char const)'k',
24476|       |            (char const)'\000'
24477|       |        },
24478|       |        &GAcompile,
24479|       |        &EGexecute
24480|       |    },
24481|       |    {   {
24482|       |            (char const)'p', (char const)'o', (char const)'s', (char const)'i',
24483|       |            (char const)'x', (char const)'a', (char const)'w', (char const)'k',
24484|       |            (char const)'\000'
24485|       |        },
24486|       |        &PAcompile,
24487|       |        &EGexecute
24488|       |    },
24489|       |    {   {
24490|       |            (char const)'p', (char const)'e', (char const)'r', (char const)'l',
24491|       |            (char const)'\000'
24492|       |        },
24493|       |        &Pcompile,
24494|       |        &Pexecute
24495|       |    },
24496|       |    {{(char const)'\000'}, (void (*)(char const *, size_t))((void *)0), (size_t(*)(char const *, size_t, size_t *, char const *))((void *)0)}
24497|       |};
24498|       |static void setmatcher(char const *m)
24499|      0|{
24500|      0|    struct matcher const *p;
24501|      0|    char *tmp;
24502|      0|    int tmp___0;
24503|      0|    int tmp___1;
24504|      0|    char *tmp___2;
24505|      0|    char *__cil_tmp9;
24506|      0|    char *__cil_tmp10;
24507|       |
24508|      0|    {
24509|      0|        if (matcher) {
24510|      0|            {
24511|      0|                tmp___0 = strcmp(matcher, m);
24512|      0|            }
24513|      0|            if (!(tmp___0 == 0)) {
24514|      0|                {
24515|      0|                    tmp = gettext("conflicting matchers specified");
24516|      0|                    error(2, 0, (char const *)tmp);
24517|      0|                }
24518|      0|            }
24519|      0|        }
24520|      0|        p = matchers;
24521|      0|        {
24522|      0|            while (1) {
24523|      0|while_continue: /* CIL Label */
24524|      0|                ;
24525|       |
24526|      0|                if (!p->compile) {
24527|      0|                    goto while_break;
24528|      0|                }
24529|      0|                {
24530|      0|                    tmp___1 = strcmp(m, (char const *)(p->name));
24531|      0|                }
24532|      0|                if (tmp___1 == 0) {
24533|      0|                    matcher = (char const *)(p->name);
24534|      0|                    compile = (void (*)(char const *, size_t))p->compile;
24535|      0|                    execute = (size_t(*)(char const *, size_t, size_t *, char const *))p->execute;
24536|      0|                    return;
24537|      0|                }
24538|      0|                p++;
24539|      0|            }
24540|      0|while_break___0: /* CIL Label */
24541|      0|            ;
24542|      0|        }
24543|      0|while_break : {
24544|      0|            tmp___2 = gettext("invalid matcher %s");
24545|      0|            error(2, 0, (char const *)tmp___2, m);
24546|      0|        }
24547|      0|        return;
24548|      0|    }
24549|      0|}
24550|       |static size_t prepend_args(char const *options, char *buf, char **argv)
24551|      0|{
24552|      0|    char const *o;
24553|      0|    char *b;
24554|      0|    size_t n;
24555|      0|    unsigned char tmp;
24556|      0|    _Bool tmp___0;
24557|      0|    char const *tmp___1;
24558|      0|    char *tmp___2;
24559|      0|    char tmp___3;
24560|      0|    char const *tmp___4;
24561|      0|    unsigned char tmp___5;
24562|      0|    _Bool tmp___6;
24563|      0|    char *tmp___7;
24564|       |
24565|      0|    {
24566|      0|        o = options;
24567|      0|        b = buf;
24568|      0|        n = (size_t)0;
24569|      0|        {
24570|      0|            while (1) {
24571|      0|while_continue: /* CIL Label */
24572|      0|                ;
24573|       |
24574|      0|                {
24575|      0|                    while (1) {
24576|      0|while_continue___0: /* CIL Label */
24577|      0|                        ;
24578|      0|                        {
24579|      0|                            tmp = to_uchar((char)*o);
24580|      0|                            tmp___0 = c_isspace((int)tmp);
24581|      0|                        }
24582|      0|                        if (!tmp___0) {
24583|      0|                            goto while_break___0;
24584|      0|                        }
24585|      0|                        o++;
24586|      0|                    }
24587|      0|while_break___2: /* CIL Label */
24588|      0|                    ;
24589|      0|                }
24590|      0|while_break___0:
24591|      0|                ;
24592|      0|                if (!*o) {
24593|      0|                    return (n);
24594|      0|                }
24595|      0|                if (argv) {
24596|      0|                    *(argv + n) = b;
24597|      0|                }
24598|      0|                n++;
24599|      0|                {
24600|      0|                    while (1) {
24601|      0|while_continue___1: /* CIL Label */
24602|      0|                        ;
24603|      0|                        tmp___2 = b;
24604|      0|                        b++;
24605|      0|                        tmp___4 = o;
24606|      0|                        o++;
24607|      0|                        tmp___3 = (char)*tmp___4;
24608|      0|                        *tmp___2 = tmp___3;
24609|      0|                        if ((int)tmp___3 == 92) {
24610|      0|                            if (*o) {
24611|      0|                                tmp___1 = o;
24612|      0|                                o++;
24613|      0|                                *(b + -1) = (char)*tmp___1;
24614|      0|                            }
24615|      0|                        }
24616|      0|                        if (*o) {
24617|      0|                            {
24618|      0|                                tmp___5 = to_uchar((char)*o);
24619|      0|                                tmp___6 = c_isspace((int)tmp___5);
24620|      0|                            }
24621|      0|                            if (tmp___6) {
24622|      0|                                goto while_break___1;
24623|      0|                            }
24624|      0|                        }
24625|      0|                        else {
24626|      0|                            goto while_break___1;
24627|      0|                        }
24628|      0|                    }
24629|      0|while_break___3: /* CIL Label */
24630|      0|                    ;
24631|      0|                }
24632|      0|while_break___1:
24633|      0|                tmp___7 = b;
24634|      0|                b++;
24635|      0|                *tmp___7 = (char)'\000';
24636|      0|            }
24637|      0|while_break: /* CIL Label */
24638|      0|            ;
24639|      0|        }
24640|       |
24641|      0|        return (0UL);
24642|      0|    }
24643|      0|}
24644|       |static int prepend_default_options(char const *options, int *pargc, char ***pargv)
24645|      2|{
24646|      2|    char *buf;
24647|      2|    size_t tmp;
24648|      2|    char *tmp___0;
24649|      2|    size_t prepended;
24650|      2|    size_t tmp___1;
24651|      2|    int argc;
24652|      2|    char *const *argv;
24653|      2|    char **pp;
24654|      2|    char **tmp___2;
24655|      2|    char *const *tmp___3;
24656|      2|    size_t tmp___4;
24657|      2|    char **tmp___5;
24658|      2|    char *tmp___6;
24659|      2|    char *const *tmp___7;
24660|       |
24661|      2|    {
24662|      2|        if (options) {
24663|      0|            if (*options) {
24664|      0|                {
24665|      0|                    tmp = strlen(options);
24666|      0|                    tmp___0 = (char *)xmalloc(tmp + 1UL);
24667|      0|                    buf = tmp___0;
24668|      0|                    tmp___1 = prepend_args(options, buf, (char **)((void *)0));
24669|      0|                    prepended = tmp___1;
24670|      0|                    argc = *pargc;
24671|      0|                    argv = (char *const *)*pargv;
24672|      0|                }
24673|      0|                if ((size_t)(2147483647 - argc) < prepended) {
24674|      0|                    {
24675|      0|                        xalloc_die();
24676|      0|                    }
24677|      0|                }
24678|      0|                {
24679|      0|                    pp = (char **)xmalloc(((prepended + (size_t)argc) + 1UL) * sizeof(*pp));
24680|      0|                    *pargc = (int)(prepended + (size_t)argc);
24681|      0|                    *pargv = pp;
24682|      0|                    tmp___2 = pp;
24683|      0|                    pp++;
24684|      0|                    tmp___3 = argv;
24685|      0|                    argv++;
24686|      0|                    *tmp___2 = (char *)*tmp___3;
24687|      0|                    tmp___4 = prepend_args(options, buf, pp);
24688|      0|                    pp += tmp___4;
24689|      0|                }
24690|      0|                {
24691|      0|                    while (1) {
24692|      0|while_continue___0: /* CIL Label */
24693|      0|                        ;
24694|      0|while_continue:
24695|      0|                        tmp___5 = pp;
24696|      0|                        pp++;
24697|      0|                        tmp___7 = argv;
24698|      0|                        argv++;
24699|      0|                        tmp___6 = (char *)*tmp___7;
24700|      0|                        *tmp___5 = tmp___6;
24701|      0|                        if (!tmp___6) {
24702|      0|                            goto while_break;
24703|      0|                        }
24704|      0|                        goto while_continue;
24705|      0|                    }
24706|      0|while_break___0: /* CIL Label */
24707|      0|                    ;
24708|      0|                }
24709|      0|while_break:
24710|      0|                ;
24711|      0|                return ((int)prepended);
24712|      0|            }
24713|      0|        }
24714|      2|        return (0);
24715|      2|    }
24716|      2|}
24717|       |static int get_nondigit_option(int argc, char *const *argv, intmax_t *default_context);
24718|       |static int prev_digit_optind = -1;
24719|       |static int get_nondigit_option(int argc, char *const *argv, intmax_t *default_context)
24720|      3|{
24721|      3|    int this_digit_optind;
24722|      3|    int was_digit;
24723|      3|    char buf[((((sizeof(intmax_t) * 8UL - 1UL) * 146UL + 484UL) / 485UL + 1UL) + 1UL) + 4UL];
24724|      3|    char *p;
24725|      3|    int opt;
24726|      3|    char *tmp;
24727|      3|    void *__cil_tmp12;
24728|      3|    char *__cil_tmp13;
24729|       |
24730|      3|    {
24731|      3|        p = buf;
24732|      3|        was_digit = 0;
24733|      3|        this_digit_optind = optind;
24734|      3|        {
24735|      3|            while (1) {
24736|      3|while_continue: /* CIL Label */
24737|      3|                ;
24738|      3|                {
24739|      3|                    opt = getopt_long(argc, (char *const *)((char **)argv), short_options, long_options,
24740|      3|                                      (int *)((void *)0));
24741|      3|                }
24742|      3|                if (48 <= opt) {
24743|      1|                    if (!(opt <= 57)) {
24744|      1|                        goto while_break;
24745|      1|                    }
24746|      1|                }
24747|      2|                else {
24748|      2|                    goto while_break;
24749|      2|                }
24750|      0|                if (prev_digit_optind != this_digit_optind) {
24751|      0|                    p = buf;
24752|      0|                }
24753|      0|                else {
24754|      0|                    if (!was_digit) {
24755|      0|                        p = buf;
24756|      0|                    }
24757|      0|                    else {
24758|      0|                        p -= (int)buf[0] == 48;
24759|      0|                    }
24760|      0|                }
24761|      0|                if ((unsigned long)p == (unsigned long)((buf + sizeof(buf)) - 4)) {
24762|      0|                    {
24763|      0|                        strcpy((char * /* __restrict  */)p, (char const * /* __restrict  */) "...");
24764|      0|                        p += 3;
24765|      0|                    }
24766|      0|                    goto while_break;
24767|      0|                }
24768|      0|                tmp = p;
24769|      0|                p++;
24770|      0|                *tmp = (char)opt;
24771|      0|                was_digit = 1;
24772|      0|                prev_digit_optind = this_digit_optind;
24773|      0|                this_digit_optind = optind;
24774|      0|            }
24775|      0|while_break___0: /* CIL Label */
24776|      0|            ;
24777|      0|        }
24778|      3|while_break:
24779|      3|        ;
24780|      3|        if ((unsigned long)p != (unsigned long)(buf)) {
24781|      0|            {
24782|      0|                *p = (char)'\000';
24783|      0|                context_length_arg((char const *)(buf), default_context);
24784|      0|            }
24785|      0|        }
24786|      3|        return (opt);
24787|      0|    }
24788|      0|}
24789|       |static void parse_grep_colors(void)
24790|      0|{
24791|      0|    char const *p;
24792|      0|    char *q;
24793|      0|    char *name;
24794|      0|    char *val;
24795|      0|    char c;
24796|      0|    struct color_cap const *cap;
24797|      0|    char *tmp;
24798|      0|    int tmp___0;
24799|      0|    char *tmp___1;
24800|      0|    char *__cil_tmp12;
24801|       |
24802|      0|    {
24803|      0|        {
24804|      0|            p = (char const *)getenv("GREP_COLORS");
24805|      0|        }
24806|      0|        if ((unsigned long)p == (unsigned long)((void *)0)) {
24807|      0|            return;
24808|      0|        }
24809|      0|        else {
24810|      0|            if ((int const) * p == 0) {
24811|      0|                return;
24812|      0|            }
24813|      0|        }
24814|      0|        {
24815|      0|            q = xstrdup(p);
24816|      0|            name = q;
24817|      0|            val = (char *)((void *)0);
24818|      0|        }
24819|      0|        {
24820|      0|            while (1) {
24821|      0|while_continue: /* CIL Label */
24822|      0|                ;
24823|       |
24824|      0|                if ((int)*q == 58) {
24825|      0|                    goto _L;
24826|      0|                }
24827|      0|                else {
24828|      0|                    if ((int)*q == 0) {
24829|      0|_L:
24830|      0|                        c = *q;
24831|      0|                        tmp = q;
24832|      0|                        q++;
24833|      0|                        *tmp = (char)'\000';
24834|      0|                        cap = color_dict;
24835|      0|                        {
24836|      0|                            while (1) {
24837|      0|while_continue___0: /* CIL Label */
24838|      0|                                ;
24839|       |
24840|      0|                                if (!cap->name) {
24841|      0|                                    goto while_break___0;
24842|      0|                                }
24843|      0|                                {
24844|      0|                                    tmp___0 = strcmp((char const *)cap->name, (char const *)name);
24845|      0|                                }
24846|      0|                                if (tmp___0 == 0) {
24847|      0|                                    goto while_break___0;
24848|      0|                                }
24849|      0|                                cap++;
24850|      0|                            }
24851|      0|while_break___1: /* CIL Label */
24852|      0|                            ;
24853|      0|                        }
24854|      0|while_break___0:
24855|      0|                        ;
24856|      0|                        if (cap->var) {
24857|      0|                            if (val) {
24858|      0|                                *(cap->var) = (char const *)val;
24859|      0|                            }
24860|      0|                        }
24861|      0|                        if (cap->fct) {
24862|      0|                            {
24863|      0|                                (*(cap->fct))();
24864|      0|                            }
24865|      0|                        }
24866|      0|                        if ((int)c == 0) {
24867|      0|                            return;
24868|      0|                        }
24869|      0|                        name = q;
24870|      0|                        val = (char *)((void *)0);
24871|      0|                    }
24872|      0|                    else {
24873|      0|                        if ((int)*q == 61) {
24874|      0|                            if ((unsigned long)q == (unsigned long)name) {
24875|      0|                                return;
24876|      0|                            }
24877|      0|                            else {
24878|      0|                                if (val) {
24879|      0|                                    return;
24880|      0|                                }
24881|      0|                            }
24882|      0|                            tmp___1 = q;
24883|      0|                            q++;
24884|      0|                            *tmp___1 = (char)'\000';
24885|      0|                            val = q;
24886|      0|                        }
24887|      0|                        else {
24888|      0|                            if ((unsigned long)val == (unsigned long)((void *)0)) {
24889|      0|                                q++;
24890|      0|                            }
24891|      0|                            else {
24892|      0|                                if ((int)*q == 59) {
24893|      0|                                    q++;
24894|      0|                                }
24895|      0|                                else {
24896|      0|                                    if ((int)*q >= 48) {
24897|      0|                                        if ((int)*q <= 57) {
24898|      0|                                            q++;
24899|      0|                                        }
24900|      0|                                        else {
24901|      0|                                            return;
24902|      0|                                        }
24903|      0|                                    }
24904|      0|                                    else {
24905|      0|                                        return;
24906|      0|                                    }
24907|      0|                                }
24908|      0|                            }
24909|      0|                        }
24910|      0|                    }
24911|      0|                }
24912|      0|            }
24913|      0|while_break: /* CIL Label */
24914|      0|            ;
24915|      0|        }
24916|       |
24917|      0|        return;
24918|      0|    }
24919|      0|}
24920|       |static _Bool contains_encoding_error(char const *pat, size_t patlen)
24921|      0|{
24922|      0|    mbstate_t mbs;
24923|      0|    size_t i;
24924|      0|    size_t charlen;
24925|      0|    void *__cil_tmp7;
24926|       |
24927|      0|    {
24928|      0|        mbs.__count = 0;
24929|      0|        mbs.__value.__wch = 0U;
24930|      0|        i = (size_t)0;
24931|      0|        {
24932|      0|            while (1) {
24933|      0|while_continue: /* CIL Label */
24934|      0|                ;
24935|       |
24936|      0|                if (!(i < patlen)) {
24937|      0|                    goto while_break;
24938|      0|                }
24939|      0|                {
24940|      0|                    charlen = mbrlen((char const * /* __restrict  */)(pat + i), patlen - i, (mbstate_t * /* __restrict  */)(&mbs));
24941|      0|                }
24942|      0|                if (0xfffffffffffffffeUL <= charlen) {
24943|      0|                    return ((_Bool)1);
24944|      0|                }
24945|      0|                i += charlen + (size_t)(charlen == 0UL);
24946|      0|            }
24947|      0|while_break___0: /* CIL Label */
24948|      0|            ;
24949|      0|        }
24950|      0|while_break:
24951|      0|        ;
24952|      0|        return ((_Bool)0);
24953|      0|    }
24954|      0|}
24955|       |static void fgrep_to_grep_pattern(size_t len, char const *keys, size_t *new_len,
24956|       |                                  char **new_keys)
24957|      0|{
24958|      0|    char *p;
24959|      0|    char *tmp;
24960|      0|    mbstate_t mb_state;
24961|      0|    size_t n;
24962|      0|    wchar_t wc;
24963|      0|    char *tmp___0;
24964|      0|    char *tmp___1;
24965|      0|    void *__cil_tmp16;
24966|      0|    char *__cil_tmp17;
24967|       |
24968|      0|    {
24969|      0|        {
24970|      0|            tmp = (char *)xnmalloc(len + 1UL, (size_t)2);
24971|      0|            *new_keys = tmp;
24972|      0|            p = tmp;
24973|      0|            mb_state.__count = 0;
24974|      0|            mb_state.__value.__wch = 0U;
24975|      0|        }
24976|      0|        {
24977|      0|            while (1) {
24978|      0|while_continue: /* CIL Label */
24979|      0|                ;
24980|       |
24981|      0|                if (!len) {
24982|      0|                    goto while_break;
24983|      0|                }
24984|      0|                {
24985|      0|                    n = mbrtowc((wchar_t * /* __restrict  */)(&wc), (char const * /* __restrict  */)keys,
24986|      0|                                len, (mbstate_t * /* __restrict  */)(&mb_state));
24987|      0|                }
24988|      0|                if (n == 0xfffffffffffffffeUL) {
24989|      0|                    goto case_18446744073709551614;
24990|      0|                }
24991|      0|                if (n == 0xffffffffffffffffUL) {
24992|      0|                    goto case_18446744073709551615;
24993|      0|                }
24994|      0|                if (n == 1UL) {
24995|      0|                    goto case_1;
24996|      0|                }
24997|      0|                if (n == 0UL) {
24998|      0|                    goto case_0;
24999|      0|                }
25000|      0|                goto switch_default;
25001|      0|case_18446744073709551614:
25002|      0|                n = len;
25003|      0|switch_default : {
25004|      0|                    p = (char *)mempcpy((void * /* __restrict  */)((void *)p), (void const * /* __restrict  */)((void const *)keys),
25005|      0|                                        n);
25006|      0|                }
25007|      0|                goto switch_break;
25008|      0|case_18446744073709551615 : {
25009|      0|                    memset((void *)(&mb_state), 0, sizeof(mb_state));
25010|      0|                }
25011|      0|case_1 : {
25012|      0|                    *p = (char)'\\';
25013|      0|                    tmp___0 = strchr("$*.[\\^", (int)*keys);
25014|      0|                    p += (unsigned long)tmp___0 != (unsigned long)((void *)0);
25015|      0|                }
25016|      0|case_0:
25017|      0|                tmp___1 = p;
25018|      0|                p++;
25019|      0|                *tmp___1 = (char)*keys;
25020|      0|                n = (size_t)1;
25021|      0|                goto switch_break;
25022|      0|switch_break:
25023|      0|                keys += n;
25024|      0|                len -= n;
25025|      0|            }
25026|      0|while_break___0: /* CIL Label */
25027|      0|            ;
25028|      0|        }
25029|      0|while_break:
25030|      0|        *new_len = (size_t)(p - *new_keys);
25031|      0|        return;
25032|      0|    }
25033|      0|}
25034|       |int main(int argc, char **argv)
25035|      2|{
25036|      2|    char *keys;
25037|      2|    size_t keycc;
25038|      2|    size_t oldcc;
25039|      2|    size_t keyalloc;
25040|      2|    int with_filenames;
25041|      2|    size_t cc;
25042|      2|    int opt;
25043|      2|    int status;
25044|      2|    int prepended;
25045|      2|    int prev_optind;
25046|      2|    int last_recursive;
25047|      2|    int fread_errno;
25048|      2|    intmax_t default_context;
25049|      2|    FILE *fp;
25050|      2|    char *tmp;
25051|      2|    char *tmp___0;
25052|      2|    int tmp___1;
25053|      2|    int tmp___2;
25054|      2|    ptrdiff_t tmp___3;
25055|      2|    size_t tmp___4;
25056|      2|    FILE *tmp___6;
25057|      2|    int tmp___7;
25058|      2|    int *tmp___8;
25059|      2|    int *tmp___9;
25060|      2|    int tmp___10;
25061|      2|    size_t tmp___11;
25062|      2|    strtol_error tmp___12;
25063|      2|    char *tmp___13;
25064|      2|    char *tmp___14;
25065|      2|    int tmp___15;
25066|      2|    int tmp___16;
25067|      2|    int tmp___17;
25068|      2|    int tmp___18;
25069|      2|    int tmp___19;
25070|      2|    int tmp___20;
25071|      2|    int tmp___21;
25072|      2|    int tmp___22;
25073|      2|    int tmp___23;
25074|      2|    int tmp___24;
25075|      2|    int tmp___25;
25076|      2|    int tmp___26;
25077|      2|    int tmp___27;
25078|      2|    int *tmp___28;
25079|      2|    int tmp___29;
25080|      2|    int tmp___30;
25081|      2|    int tmp___31;
25082|      2|    int tmp___32;
25083|      2|    char *userval;
25084|      2|    char *tmp___33;
25085|      2|    char *tmp___34;
25086|      2|    char const *tmp___35;
25087|      2|    struct stat tmp_stat;
25088|      2|    int tmp___36;
25089|      2|    int tmp___37;
25090|      2|    size_t new_keycc;
25091|      2|    char *new_keys;
25092|      2|    size_t tmp___38;
25093|      2|    _Bool tmp___39;
25094|      2|    size_t tmp___40;
25095|      2|    int tmp___41;
25096|      2|    int tmp___42;
25097|      2|    int tmp___43;
25098|      2|    void *__cil_tmp89;
25099|      2|    char *__cil_tmp90;
25100|      2|    char *__cil_tmp91;
25101|      2|    char *__cil_tmp92;
25102|      2|    char *__cil_tmp93;
25103|      2|    char *__cil_tmp94;
25104|      2|    char *__cil_tmp95;
25105|      2|    char *__cil_tmp96;
25106|      2|    char *__cil_tmp97;
25107|      2|    char *__cil_tmp98;
25108|      2|    char *__cil_tmp99;
25109|      2|    char *__cil_tmp100;
25110|      2|    char *__cil_tmp101;
25111|      2|    char *__cil_tmp102;
25112|      2|    char *__cil_tmp103;
25113|      2|    char *__cil_tmp104;
25114|      2|    char *__cil_tmp105;
25115|      2|    char *__cil_tmp106;
25116|      2|    char *__cil_tmp107;
25117|      2|    char *__cil_tmp108;
25118|       |
25119|      2|    {
25120|      2|        {
25121|      2|            exit_failure = (int volatile)2;
25122|      2|            set_program_name((char const *)*(argv + 0));
25123|      2|            program_name = (char const *)*(argv + 0);
25124|      2|            keys = (char *)((void *)0);
25125|      2|            keycc = (size_t)0;
25126|      2|            with_filenames = 0;
25127|      2|            eolbyte = (unsigned char)'\n';
25128|      2|            filename_mask = ~0;
25129|      2|            max_count = 9223372036854775807L;
25130|      2|            out_before = (intmax_t)-1;
25131|      2|            out_after = out_before;
25132|      2|            default_context = (intmax_t)-1;
25133|      2|            only_matching = 0;
25134|      2|            setlocale(6, "");
25135|      2|            bindtextdomain("grep", "/usr/local/share/locale");
25136|      2|            textdomain("grep");
25137|      2|            exit_failure = (int volatile)2;
25138|      2|            atexit(&clean_up_stdout);
25139|      2|            last_recursive = 0;
25140|      2|            tmp = getenv("GREP_OPTIONS");
25141|      2|            prepended = prepend_default_options((char const *)tmp, &argc, &argv);
25142|      2|            compile = (void (*)(char const *, size_t))matchers[0].compile;
25143|      2|            execute = (size_t(*)(char const *, size_t, size_t *, char const *))matchers[0].execute;
25144|      2|        }
25145|      2|        {
25146|      3|            while (1) {
25147|      3|while_continue: /* CIL Label */
25148|      3|                ;
25149|      3|                {
25150|      3|                    prev_optind = optind;
25151|      3|                    opt = get_nondigit_option(argc, (char *const *)argv, &default_context);
25152|      3|                }
25153|      3|                if (!(opt != -1)) {
25154|      2|                    goto while_break;
25155|      2|                }
25156|      1|                if (opt == 65) {
25157|      0|                    goto case_65;
25158|      0|                }
25159|      1|                if (opt == 66) {
25160|      0|                    goto case_66;
25161|      0|                }
25162|      1|                if (opt == 67) {
25163|      0|                    goto case_67;
25164|      0|                }
25165|      1|                if (opt == 68) {
25166|      0|                    goto case_68;
25167|      0|                }
25168|      1|                if (opt == 69) {
25169|      0|                    goto case_69;
25170|      0|                }
25171|      1|                if (opt == 70) {
25172|      0|                    goto case_70;
25173|      0|                }
25174|      1|                if (opt == 80) {
25175|      0|                    goto case_80;
25176|      0|                }
25177|      1|                if (opt == 71) {
25178|      0|                    goto case_71;
25179|      0|                }
25180|      1|                if (opt == 88) {
25181|      0|                    goto case_88;
25182|      0|                }
25183|      1|                if (opt == 72) {
25184|      0|                    goto case_72;
25185|      0|                }
25186|      1|                if (opt == 73) {
25187|      0|                    goto case_73;
25188|      0|                }
25189|      1|                if (opt == 84) {
25190|      0|                    goto case_84;
25191|      0|                }
25192|      1|                if (opt == 85) {
25193|      0|                    goto case_85;
25194|      0|                }
25195|      1|                if (opt == 117) {
25196|      0|                    goto case_117;
25197|      0|                }
25198|      1|                if (opt == 86) {
25199|      0|                    goto case_86;
25200|      0|                }
25201|      1|                if (opt == 97) {
25202|      0|                    goto case_97;
25203|      0|                }
25204|      1|                if (opt == 98) {
25205|      0|                    goto case_98;
25206|      0|                }
25207|      1|                if (opt == 99) {
25208|      0|                    goto case_99;
25209|      0|                }
25210|      1|                if (opt == 100) {
25211|      0|                    goto case_100;
25212|      0|                }
25213|      1|                if (opt == 101) {
25214|      0|                    goto case_101;
25215|      0|                }
25216|      1|                if (opt == 102) {
25217|      0|                    goto case_102;
25218|      0|                }
25219|      1|                if (opt == 104) {
25220|      0|                    goto case_104;
25221|      0|                }
25222|      1|                if (opt == 105) {
25223|      0|                    goto case_105;
25224|      0|                }
25225|      1|                if (opt == 121) {
25226|      0|                    goto case_105;
25227|      0|                }
25228|      1|                if (opt == 76) {
25229|      0|                    goto case_76;
25230|      0|                }
25231|      1|                if (opt == 108) {
25232|      0|                    goto case_108;
25233|      0|                }
25234|      1|                if (opt == 109) {
25235|      0|                    goto case_109;
25236|      0|                }
25237|      1|                if (opt == 110) {
25238|      0|                    goto case_110;
25239|      0|                }
25240|      1|                if (opt == 111) {
25241|      0|                    goto case_111;
25242|      0|                }
25243|      1|                if (opt == 113) {
25244|      0|                    goto case_113;
25245|      0|                }
25246|      1|                if (opt == 82) {
25247|      0|                    goto case_82;
25248|      0|                }
25249|      1|                if (opt == 114) {
25250|      1|                    goto case_114;
25251|      1|                }
25252|      0|                if (opt == 115) {
25253|      0|                    goto case_115;
25254|      0|                }
25255|      0|                if (opt == 118) {
25256|      0|                    goto case_118;
25257|      0|                }
25258|      0|                if (opt == 119) {
25259|      0|                    goto case_119;
25260|      0|                }
25261|      0|                if (opt == 120) {
25262|      0|                    goto case_120;
25263|      0|                }
25264|      0|                if (opt == 90) {
25265|      0|                    goto case_90;
25266|      0|                }
25267|      0|                if (opt == 122) {
25268|      0|                    goto case_122;
25269|      0|                }
25270|      0|                if (opt == 128) {
25271|      0|                    goto case_128;
25272|      0|                }
25273|      0|                if (opt == 129) {
25274|      0|                    goto case_129;
25275|      0|                }
25276|      0|                if (opt == 131) {
25277|      0|                    goto case_131;
25278|      0|                }
25279|      0|                if (opt == 130) {
25280|      0|                    goto case_131;
25281|      0|                }
25282|      0|                if (opt == 132) {
25283|      0|                    goto case_132;
25284|      0|                }
25285|      0|                if (opt == 135) {
25286|      0|                    goto case_135;
25287|      0|                }
25288|      0|                if (opt == 136) {
25289|      0|                    goto case_136;
25290|      0|                }
25291|      0|                if (opt == 133) {
25292|      0|                    goto case_133;
25293|      0|                }
25294|      0|                if (opt == 134) {
25295|      0|                    goto case_134;
25296|      0|                }
25297|      0|                if (opt == 0) {
25298|      0|                    goto case_0___0;
25299|      0|                }
25300|      0|                goto switch_default___0;
25301|      0|case_65 : {
25302|      0|                    context_length_arg((char const *)optarg, &out_after);
25303|      0|                }
25304|      0|                goto switch_break;
25305|      0|case_66 : {
25306|      0|                    context_length_arg((char const *)optarg, &out_before);
25307|      0|                }
25308|      0|                goto switch_break;
25309|      0|case_67 : {
25310|      0|                    context_length_arg((char const *)optarg, &default_context);
25311|      0|                }
25312|      0|                goto switch_break;
25313|      0|case_68 : {
25314|      0|                    tmp___2 = strcmp((char const *)optarg, "read");
25315|      0|                }
25316|      0|                if (tmp___2 == 0) {
25317|      0|                    devices = (enum __anonenum_devices_71)1;
25318|      0|                }
25319|      0|                else {
25320|      0|                    {
25321|      0|                        tmp___1 = strcmp((char const *)optarg, "skip");
25322|      0|                    }
25323|      0|                    if (tmp___1 == 0) {
25324|      0|                        devices = (enum __anonenum_devices_71)2;
25325|      0|                    }
25326|      0|                    else {
25327|      0|                        {
25328|      0|                            tmp___0 = gettext("unknown devices method");
25329|      0|                            error(2, 0, (char const *)tmp___0);
25330|      0|                        }
25331|      0|                    }
25332|      0|                }
25333|      0|                goto switch_break;
25334|      0|case_69 : {
25335|      0|                    setmatcher("egrep");
25336|      0|                }
25337|      0|                goto switch_break;
25338|      0|case_70 : {
25339|      0|                    setmatcher("fgrep");
25340|      0|                }
25341|      0|                goto switch_break;
25342|      0|case_80 : {
25343|      0|                    setmatcher("perl");
25344|      0|                }
25345|      0|                goto switch_break;
25346|      0|case_71 : {
25347|      0|                    setmatcher("grep");
25348|      0|                }
25349|      0|                goto switch_break;
25350|      0|case_88 : {
25351|      0|                    setmatcher((char const *)optarg);
25352|      0|                }
25353|      0|                goto switch_break;
25354|      0|case_72:
25355|      0|                with_filenames = 1;
25356|      0|                no_filenames = 0;
25357|      0|                goto switch_break;
25358|      0|case_73:
25359|      0|                binary_files = (enum __anonenum_binary_files_72)2;
25360|      0|                goto switch_break;
25361|      0|case_84:
25362|      0|                align_tabs = 1;
25363|      0|                goto switch_break;
25364|      0|case_85 : {
25365|      0|                    dos_binary();
25366|      0|                }
25367|      0|                goto switch_break;
25368|      0|case_117 : {
25369|      0|                    dos_unix_byte_offsets();
25370|      0|                }
25371|      0|                goto switch_break;
25372|      0|case_86:
25373|      0|                show_version = 1;
25374|      0|                goto switch_break;
25375|      0|case_97:
25376|      0|                binary_files = (enum __anonenum_binary_files_72)1;
25377|      0|                goto switch_break;
25378|      0|case_98:
25379|      0|                out_byte = 1;
25380|      0|                goto switch_break;
25381|      0|case_99:
25382|      0|                count_matches = 1;
25383|      0|                goto switch_break;
25384|      0|case_100 : {
25385|      0|                    tmp___3 = __xargmatch_internal("--directories", (char const *)optarg, directories_args,
25386|      0|                                                   (char const *)(directories_types), sizeof(directories_types[0]),
25387|      0|                                                   argmatch_die);
25388|      0|                    directories = (enum directories_type)directories_types[tmp___3];
25389|      0|                }
25390|      0|                if ((unsigned int)directories == 3U) {
25391|      0|                    last_recursive = prev_optind;
25392|      0|                }
25393|      0|                goto switch_break;
25394|      0|case_101 : {
25395|      0|                    cc = strlen((char const *)optarg);
25396|      0|                    keys = (char *)xrealloc((void *)keys, (keycc + cc) + 1UL);
25397|      0|                    strcpy((char * /* __restrict  */)(keys + keycc), (char const * /* __restrict  */)((char const *)optarg));
25398|      0|                    keycc += cc;
25399|      0|                    tmp___4 = keycc;
25400|      0|                    keycc++;
25401|      0|                    *(keys + tmp___4) = (char)'\n';
25402|      0|                }
25403|      0|                goto switch_break;
25404|      0|case_102 : {
25405|      0|                    tmp___7 = strcmp((char const *)optarg, "-");
25406|      0|                }
25407|      0|                if (tmp___7 == 0) {
25408|      0|                    fp = stdin;
25409|      0|                }
25410|      0|                else {
25411|      0|                    {
25412|      0|                        tmp___6 = fopen((char const * /* __restrict  */)((char const *)optarg), (char const * /* __restrict  */) "r");
25413|      0|                        fp = tmp___6;
25414|      0|                    }
25415|      0|                }
25416|      0|                if (!fp) {
25417|      0|                    {
25418|      0|                        tmp___8 = __errno_location();
25419|      0|                        error(2, *tmp___8, "%s", optarg);
25420|      0|                    }
25421|      0|                }
25422|      0|                keyalloc = (size_t)1;
25423|      0|                {
25424|      0|                    while (1) {
25425|      0|while_continue___0: /* CIL Label */
25426|      0|                        ;
25427|       |
25428|      0|                        if (!(keyalloc <= keycc + 1UL)) {
25429|      0|                            goto while_break___0;
25430|      0|                        }
25431|      0|                        keyalloc *= 2UL;
25432|      0|                    }
25433|      0|while_break___4: /* CIL Label */
25434|      0|                    ;
25435|      0|                }
25436|      0|while_break___0 : {
25437|      0|                    keys = (char *)xrealloc((void *)keys, keyalloc);
25438|      0|                    oldcc = keycc;
25439|      0|                }
25440|      0|                {
25441|      0|                    while (1) {
25442|      0|while_continue___1: /* CIL Label */
25443|      0|                        ;
25444|      0|                        {
25445|      0|                            cc = fread_unlocked((void * /* __restrict  */)((void *)(keys + keycc)), (size_t)1,
25446|      0|                                                (keyalloc - 1UL) - keycc, (FILE * /* __restrict  */) fp);
25447|      0|                        }
25448|      0|                        if (!(cc != 0UL)) {
25449|      0|                            goto while_break___1;
25450|      0|                        }
25451|      0|                        keycc += cc;
25452|      0|                        if (keycc == keyalloc - 1UL) {
25453|      0|                            {
25454|      0|                                keys = (char *)x2nrealloc((void *)keys, &keyalloc, sizeof(*keys));
25455|      0|                            }
25456|      0|                        }
25457|      0|                    }
25458|      0|while_break___5: /* CIL Label */
25459|      0|                    ;
25460|      0|                }
25461|      0|while_break___1 : {
25462|      0|                    tmp___9 = __errno_location();
25463|      0|                    fread_errno = *tmp___9;
25464|      0|                    tmp___10 = ferror_unlocked(fp);
25465|      0|                }
25466|      0|                if (tmp___10) {
25467|      0|                    {
25468|      0|                        error(2, fread_errno, "%s", optarg);
25469|      0|                    }
25470|      0|                }
25471|      0|                if ((unsigned long)fp != (unsigned long)stdin) {
25472|      0|                    {
25473|      0|                        fclose(fp);
25474|      0|                    }
25475|      0|                }
25476|      0|                if (oldcc != keycc) {
25477|      0|                    if ((int)*(keys + (keycc - 1UL)) != 10) {
25478|      0|                        tmp___11 = keycc;
25479|      0|                        keycc++;
25480|      0|                        *(keys + tmp___11) = (char)'\n';
25481|      0|                    }
25482|      0|                }
25483|      0|                goto switch_break;
25484|      0|case_104:
25485|      0|                with_filenames = 0;
25486|      0|                no_filenames = 1;
25487|      0|                goto switch_break;
25488|      0|case_105:
25489|      0|                match_icase = 1;
25490|      0|                goto switch_break;
25491|      0|case_76:
25492|      0|                list_files = -1;
25493|      0|                goto switch_break;
25494|      0|case_108:
25495|      0|                list_files = 1;
25496|      0|                goto switch_break;
25497|      0|case_109 : {
25498|      0|                    tmp___12 = xstrtoimax((char const *)optarg, (char **)0, 10, &max_count, "");
25499|      0|                }
25500|      0|                if ((unsigned int)tmp___12 == 0U) {
25501|      0|                    goto case_0;
25502|      0|                }
25503|      0|                if ((unsigned int)tmp___12 == 1U) {
25504|      0|                    goto case_0;
25505|      0|                }
25506|      0|                goto switch_default;
25507|      0|case_0:
25508|      0|                goto switch_break___0;
25509|      0|switch_default : {
25510|      0|                    tmp___13 = gettext("invalid max count");
25511|      0|                    error(2, 0, (char const *)tmp___13);
25512|      0|                }
25513|      0|switch_break___0:
25514|      0|                ;
25515|      0|                goto switch_break;
25516|      0|case_110:
25517|      0|                out_line = 1;
25518|      0|                goto switch_break;
25519|      0|case_111:
25520|      0|                only_matching = 1;
25521|      0|                goto switch_break;
25522|      0|case_113:
25523|      0|                exit_on_match = 1;
25524|      0|                exit_failure = (int volatile)0;
25525|      0|                goto switch_break;
25526|      0|case_82:
25527|      0|                fts_options = 778;
25528|      1|case_114:
25529|      1|                directories = (enum directories_type)3;
25530|      1|                last_recursive = prev_optind;
25531|      1|                goto switch_break;
25532|      0|case_115:
25533|      0|                suppress_errors = 1;
25534|      0|                goto switch_break;
25535|      0|case_118:
25536|      0|                out_invert = (_Bool)1;
25537|      0|                goto switch_break;
25538|      0|case_119:
25539|      0|                match_words = 1;
25540|      0|                goto switch_break;
25541|      0|case_120:
25542|      0|                match_lines = 1;
25543|      0|                goto switch_break;
25544|      0|case_90:
25545|      0|                filename_mask = 0;
25546|      0|                goto switch_break;
25547|      0|case_122:
25548|      0|                eolbyte = (unsigned char)'\000';
25549|      0|                goto switch_break;
25550|      0|case_128 : {
25551|      0|                    tmp___17 = strcmp((char const *)optarg, "binary");
25552|      0|                }
25553|      0|                if (tmp___17 == 0) {
25554|      0|                    binary_files = (enum __anonenum_binary_files_72)0;
25555|      0|                }
25556|      0|                else {
25557|      0|                    {
25558|      0|                        tmp___16 = strcmp((char const *)optarg, "text");
25559|      0|                    }
25560|      0|                    if (tmp___16 == 0) {
25561|      0|                        binary_files = (enum __anonenum_binary_files_72)1;
25562|      0|                    }
25563|      0|                    else {
25564|      0|                        {
25565|      0|                            tmp___15 = strcmp((char const *)optarg, "without-match");
25566|      0|                        }
25567|      0|                        if (tmp___15 == 0) {
25568|      0|                            binary_files = (enum __anonenum_binary_files_72)2;
25569|      0|                        }
25570|      0|                        else {
25571|      0|                            {
25572|      0|                                tmp___14 = gettext("unknown binary-files type");
25573|      0|                                error(2, 0, (char const *)tmp___14);
25574|      0|                            }
25575|      0|                        }
25576|      0|                    }
25577|      0|                }
25578|      0|                goto switch_break;
25579|      0|case_129:
25580|      0|                if (optarg) {
25581|      0|                    {
25582|      0|                        tmp___24 = strcasecmp((char const *)optarg, "always");
25583|      0|                    }
25584|      0|                    if (tmp___24) {
25585|      0|                        {
25586|      0|                            tmp___25 = strcasecmp((char const *)optarg, "yes");
25587|      0|                        }
25588|      0|                        if (tmp___25) {
25589|      0|                            {
25590|      0|                                tmp___26 = strcasecmp((char const *)optarg, "force");
25591|      0|                            }
25592|      0|                            if (tmp___26) {
25593|      0|                                {
25594|      0|                                    tmp___21 = strcasecmp((char const *)optarg, "never");
25595|      0|                                }
25596|      0|                                if (tmp___21) {
25597|      0|                                    {
25598|      0|                                        tmp___22 = strcasecmp((char const *)optarg, "no");
25599|      0|                                    }
25600|      0|                                    if (tmp___22) {
25601|      0|                                        {
25602|      0|                                            tmp___23 = strcasecmp((char const *)optarg, "none");
25603|      0|                                        }
25604|      0|                                        if (tmp___23) {
25605|      0|                                            {
25606|      0|                                                tmp___18 = strcasecmp((char const *)optarg, "auto");
25607|      0|                                            }
25608|      0|                                            if (tmp___18) {
25609|      0|                                                {
25610|      0|                                                    tmp___19 = strcasecmp((char const *)optarg, "tty");
25611|      0|                                                }
25612|      0|                                                if (tmp___19) {
25613|      0|                                                    {
25614|      0|                                                        tmp___20 = strcasecmp((char const *)optarg, "if-tty");
25615|      0|                                                    }
25616|      0|                                                    if (tmp___20) {
25617|      0|                                                        show_help = 1;
25618|      0|                                                    }
25619|      0|                                                    else {
25620|      0|                                                        color_option = 2;
25621|      0|                                                    }
25622|      0|                                                }
25623|      0|                                                else {
25624|      0|                                                    color_option = 2;
25625|      0|                                                }
25626|      0|                                            }
25627|      0|                                            else {
25628|      0|                                                color_option = 2;
25629|      0|                                            }
25630|      0|                                        }
25631|      0|                                        else {
25632|      0|                                            color_option = 0;
25633|      0|                                        }
25634|      0|                                    }
25635|      0|                                    else {
25636|      0|                                        color_option = 0;
25637|      0|                                    }
25638|      0|                                }
25639|      0|                                else {
25640|      0|                                    color_option = 0;
25641|      0|                                }
25642|      0|                            }
25643|      0|                            else {
25644|      0|                                color_option = 1;
25645|      0|                            }
25646|      0|                        }
25647|      0|                        else {
25648|      0|                            color_option = 1;
25649|      0|                        }
25650|      0|                    }
25651|      0|                    else {
25652|      0|                        color_option = 1;
25653|      0|                    }
25654|      0|                }
25655|      0|                else {
25656|      0|                    color_option = 2;
25657|      0|                }
25658|      0|                goto switch_break;
25659|      0|case_131:
25660|      0|                if (!excluded_patterns) {
25661|      0|                    {
25662|      0|                        excluded_patterns = new_exclude();
25663|      0|                    }
25664|      0|                }
25665|      0|                if (opt == 130) {
25666|      0|                    tmp___27 = 1 << 29;
25667|      0|                }
25668|      0|                else {
25669|      0|                    tmp___27 = 0;
25670|      0|                }
25671|      0|                {
25672|      0|                    add_exclude(excluded_patterns, (char const *)optarg, (1 << 28) | tmp___27);
25673|      0|                }
25674|      0|                goto switch_break;
25675|      0|case_132:
25676|      0|                if (!excluded_patterns) {
25677|      0|                    {
25678|      0|                        excluded_patterns = new_exclude();
25679|      0|                    }
25680|      0|                }
25681|      0|                {
25682|      0|                    tmp___29 = add_exclude_file(&add_exclude, excluded_patterns, (char const *)optarg,
25683|      0|                                                1 << 28, (char)'\n');
25684|      0|                }
25685|      0|                if (tmp___29 != 0) {
25686|      0|                    {
25687|      0|                        tmp___28 = __errno_location();
25688|      0|                        error(2, *tmp___28, "%s", optarg);
25689|      0|                    }
25690|      0|                }
25691|      0|                goto switch_break;
25692|      0|case_135:
25693|      0|                if (!excluded_directory_patterns) {
25694|      0|                    {
25695|      0|                        excluded_directory_patterns = new_exclude();
25696|      0|                    }
25697|      0|                }
25698|      0|                {
25699|      0|                    add_exclude(excluded_directory_patterns, (char const *)optarg, 1 << 28);
25700|      0|                }
25701|      0|                goto switch_break;
25702|      0|case_136:
25703|      0|                group_separator = (char const *)optarg;
25704|      0|                goto switch_break;
25705|      0|case_133:
25706|      0|                line_buffered = 1;
25707|      0|                goto switch_break;
25708|      0|case_134:
25709|      0|                label = optarg;
25710|      0|                goto switch_break;
25711|      0|case_0___0:
25712|      0|                goto switch_break;
25713|      0|switch_default___0 : {
25714|      0|                    usage(2);
25715|      0|                }
25716|      0|                goto switch_break;
25717|      1|switch_break:
25718|      1|                ;
25719|      1|            }
25720|      0|while_break___3: /* CIL Label */
25721|      0|            ;
25722|      0|        }
25723|      2|while_break:
25724|      2|        ;
25725|      2|        if (color_option == 2) {
25726|      0|            {
25727|      0|                tmp___30 = isatty(1);
25728|      0|            }
25729|      0|            if (tmp___30) {
25730|      0|                {
25731|      0|                    tmp___31 = should_colorize();
25732|      0|                }
25733|      0|                if (tmp___31) {
25734|      0|                    tmp___32 = 1;
25735|      0|                }
25736|      0|                else {
25737|      0|                    tmp___32 = 0;
25738|      0|                }
25739|      0|            }
25740|      0|            else {
25741|      0|                tmp___32 = 0;
25742|      0|            }
25743|      0|            color_option = tmp___32;
25744|      0|        }
25745|      2|        {
25746|      2|            init_colorize();
25747|      2|        }
25748|      2|        if (exit_on_match) {
25749|      0|            list_files = 0;
25750|      0|        }
25751|      2|        if (exit_on_match | list_files) {
25752|      0|            count_matches = 0;
25753|      0|            done_on_match = 1;
25754|      0|        }
25755|      2|        out_quiet = count_matches | done_on_match;
25756|      2|        if (out_after < 0L) {
25757|      2|            out_after = default_context;
25758|      2|        }
25759|      2|        if (out_before < 0L) {
25760|      2|            out_before = default_context;
25761|      2|        }
25762|      2|        if (color_option) {
25763|      0|            {
25764|      0|                tmp___33 = getenv("GREP_COLOR");
25765|      0|                userval = tmp___33;
25766|      0|            }
25767|      0|            if ((unsigned long)userval != (unsigned long)((void *)0)) {
25768|      0|                if ((int)*userval != 0) {
25769|      0|                    context_match_color = (char const *)userval;
25770|      0|                    selected_match_color = context_match_color;
25771|      0|                }
25772|      0|            }
25773|      0|            {
25774|      0|                parse_grep_colors();
25775|      0|            }
25776|      0|        }
25777|      2|        if (show_version) {
25778|      0|            {
25779|      0|                tmp___34 = gettext("others, see <http://git.sv.gnu.org/cgit/grep.git/tree/AUTHORS>");
25780|      0|                tmp___35 = proper_name("Mike Haertel");
25781|      0|                version_etc(stdout, program_name, "GNU grep", "2.19", tmp___35, tmp___34, (char *)((void *)0));
25782|      0|                exit(0);
25783|      0|            }
25784|      0|        }
25785|      2|        if (show_help) {
25786|      0|            {
25787|      0|                usage(0);
25788|      0|            }
25789|      0|        }
25790|      2|        {
25791|      2|            tmp___36 = fstat(1, &tmp_stat);
25792|      2|        }
25793|      2|        if (tmp___36 == 0) {
25794|      2|            if ((tmp_stat.st_mode & 61440U) == 32768U) {
25795|      0|                out_stat = tmp_stat;
25796|      0|            }
25797|      2|        }
25798|      2|        if (keys) {
25799|      0|            if (keycc == 0UL) {
25800|      0|                out_invert = (_Bool)((int)out_invert ^ 1);
25801|      0|                match_words = 0;
25802|      0|                match_lines = match_words;
25803|      0|            }
25804|      0|            else {
25805|      0|                keycc--;
25806|      0|            }
25807|      0|        }
25808|      2|        else {
25809|      2|            if (optind < argc) {
25810|      2|                {
25811|      2|                    keycc = strlen((char const *)*(argv + optind));
25812|      2|                    tmp___37 = optind;
25813|      2|                    optind++;
25814|      2|                    keys = (char *)xmemdup((void const *)*(argv + tmp___37), keycc + 1UL);
25815|      2|                }
25816|      2|            }
25817|      0|            else {
25818|      0|                {
25819|      0|                    usage(2);
25820|      0|                }
25821|      0|            }
25822|      2|        }
25823|      2|        if ((unsigned long)compile == (unsigned long)(&Fcompile)) {
25824|      0|            {
25825|      0|                tmp___38 = __ctype_get_mb_cur_max();
25826|      0|            }
25827|      0|            if (tmp___38 > 1UL) {
25828|      0|                if (match_icase) {
25829|      0|                    goto _L;
25830|      0|                }
25831|      0|                else {
25832|      0|                    {
25833|      0|                        tmp___39 = contains_encoding_error((char const *)keys, keycc);
25834|      0|                    }
25835|      0|                    if (tmp___39) {
25836|      0|_L : {
25837|      0|                            fgrep_to_grep_pattern(keycc, (char const *)keys, &new_keycc, &new_keys);
25838|      0|                            free((void *)keys);
25839|      0|                            keys = new_keys;
25840|      0|                            keycc = new_keycc;
25841|      0|                            matcher = "grep";
25842|      0|                            compile = &Gcompile;
25843|      0|                            execute = &EGexecute;
25844|      0|                        }
25845|      0|                    }
25846|      0|                }
25847|      0|            }
25848|      0|        }
25849|      2|        {
25850|      2|            tmp___40 = __ctype_get_mb_cur_max();
25851|      2|        }
25852|      2|        if (tmp___40 > 1UL) {
25853|      0|            {
25854|      0|                build_mbclen_cache();
25855|      0|            }
25856|      0|        }
25857|      2|        {
25858|      2|            (*compile)((char const *)keys, keycc);
25859|      2|            free((void *)keys);
25860|      2|        }
25861|      2|        if (argc - optind > 1) {
25862|      0|            if (!no_filenames) {
25863|      0|                out_file = 1;
25864|      0|            }
25865|      0|            else {
25866|      0|                goto _L___0;
25867|      0|            }
25868|      0|        }
25869|      2|        else {
25870|      2|_L___0:
25871|      2|            if (with_filenames) {
25872|      0|                out_file = 1;
25873|      0|            }
25874|      2|        }
25875|      2|        {
25876|      2|            tmp___41 = isatty(1);
25877|      2|        }
25878|      2|        if (!tmp___41) {
25879|      2|            {
25880|      2|                set_binary_mode(1, 0);
25881|      2|            }
25882|      2|        }
25883|      2|        if (max_count == 0L) {
25884|      0|            {
25885|      0|                exit(1);
25886|      0|            }
25887|      0|        }
25888|      2|        if (fts_options & 2) {
25889|      0|            if ((unsigned int)devices == 0U) {
25890|      0|                devices = (enum __anonenum_devices_71)1;
25891|      0|            }
25892|      0|        }
25893|      2|        if (optind < argc) {
25894|      2|            status = 1;
25895|      2|            {
25896|      2|                while (1) {
25897|      2|while_continue___2: /* CIL Label */
25898|      2|                    ;
25899|      2|                    {
25900|      2|                        tmp___42 = grep_command_line_arg((char const *)*(argv + optind));
25901|      2|                        status &= tmp___42;
25902|      2|                        optind++;
25903|      2|                    }
25904|      2|                    if (!(optind < argc)) {
25905|      2|                        goto while_break___2;
25906|      2|                    }
25907|      2|                }
25908|      0|while_break___6: /* CIL Label */
25909|      0|                ;
25910|      0|            }
25911|      2|while_break___2:
25912|      2|            ;
25913|      2|        }
25914|      0|        else {
25915|      0|            if ((unsigned int)directories == 3U) {
25916|      0|                if (prepended < last_recursive) {
25917|      0|                    {
25918|      0|                        filename_prefix_len = (size_t)2;
25919|      0|                        status = grep_command_line_arg(".");
25920|      0|                    }
25921|      0|                }
25922|      0|                else {
25923|      0|                    {
25924|      0|                        status = grep_command_line_arg("-");
25925|      0|                    }
25926|      0|                }
25927|      0|            }
25928|      0|            else {
25929|      0|                {
25930|      0|                    status = grep_command_line_arg("-");
25931|      0|                }
25932|      0|            }
25933|      0|        }
25934|      2|        if (errseen) {
25935|      0|            tmp___43 = 2;
25936|      0|        }
25937|      2|        else {
25938|      2|            tmp___43 = status;
25939|      2|        }
25940|      2|        {
25941|      2|            exit(tmp___43);
25942|      2|        }
25943|      2|    }
25944|      2|}

