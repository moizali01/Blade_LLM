    1|       |typedef unsigned long uintmax_t;
    2|       |enum strtol_error {
    3|       |    LONGINT_OK = 0,
    4|       |    LONGINT_OVERFLOW = 1,
    5|       |    LONGINT_INVALID_SUFFIX_CHAR = 2,
    6|       |    LONGINT_INVALID_SUFFIX_CHAR_WITH_OVERFLOW = 3,
    7|       |    LONGINT_INVALID = 4
    8|       |};
    9|       |typedef enum strtol_error strtol_error;
   10|       |typedef long intmax_t;
   11|       |typedef unsigned long size_t;
   12|       |typedef long __ssize_t;
   13|       |typedef __ssize_t ssize_t;
   14|       |typedef long __time_t;
   15|       |typedef long __syscall_slong_t;
   16|       |typedef __time_t time_t;
   17|       |struct timespec {
   18|       |    __time_t tv_sec;
   19|       |    __syscall_slong_t tv_nsec;
   20|       |};
   21|       |enum quoting_style {
   22|       |    literal_quoting_style = 0,
   23|       |    shell_quoting_style = 1,
   24|       |    shell_always_quoting_style = 2,
   25|       |    c_quoting_style = 3,
   26|       |    escape_quoting_style = 4,
   27|       |    locale_quoting_style = 5,
   28|       |    clocale_quoting_style = 6
   29|       |};
   30|       |typedef long ptrdiff_t;
   31|       |typedef unsigned short __u_short;
   32|       |typedef unsigned long __dev_t;
   33|       |typedef unsigned int __uid_t;
   34|       |typedef unsigned int __gid_t;
   35|       |typedef unsigned long __ino_t;
   36|       |typedef unsigned int __mode_t;
   37|       |typedef unsigned long __nlink_t;
   38|       |typedef long __off_t;
   39|       |typedef long __blksize_t;
   40|       |typedef long __blkcnt_t;
   41|       |typedef __u_short u_short;
   42|       |typedef __ino_t ino_t;
   43|       |typedef __dev_t dev_t;
   44|       |typedef __nlink_t nlink_t;
   45|       |struct hash_table;
   46|       |struct hash_table;
   47|       |typedef struct hash_table Hash_table;
   48|       |struct stat {
   49|       |    __dev_t st_dev;
   50|       |    __ino_t st_ino;
   51|       |    __nlink_t st_nlink;
   52|       |    __mode_t st_mode;
   53|       |    __uid_t st_uid;
   54|       |    __gid_t st_gid;
   55|       |    int __pad0;
   56|       |    __dev_t st_rdev;
   57|       |    __off_t st_size;
   58|       |    __blksize_t st_blksize;
   59|       |    __blkcnt_t st_blocks;
   60|       |    struct timespec st_atim;
   61|       |    struct timespec st_mtim;
   62|       |    struct timespec st_ctim;
   63|       |    __syscall_slong_t __glibc_reserved[3];
   64|       |};
   65|       |struct dev_ino {
   66|       |    ino_t st_ino;
   67|       |    dev_t st_dev;
   68|       |};
   69|       |struct cycle_check_state {
   70|       |    struct dev_ino dev_ino;
   71|       |    size_t chdir_counter;
   72|       |    unsigned long magic;
   73|       |};
   74|       |struct _ftsent;
   75|       |struct _ftsent;
   76|       |struct __anonstruct_FTS_26 {
   77|       |    struct _ftsent *fts_cur;
   78|       |    struct _ftsent *fts_child;
   79|       |    struct _ftsent **fts_array;
   80|       |    dev_t fts_dev;
   81|       |    char *fts_path;
   82|       |    int fts_rfd;
   83|       |    size_t fts_pathlen;
   84|       |    int fts_nitems;
   85|       |    int (*fts_compar)(void const *, void const *);
   86|       |    int fts_options;
   87|       |    Hash_table *active_dir_ht;
   88|       |    struct cycle_check_state *cycle_state;
   89|       |};
   90|       |typedef struct __anonstruct_FTS_26 FTS;
   91|       |struct _ftsent {
   92|       |    struct _ftsent *fts_cycle;
   93|       |    struct _ftsent *fts_parent;
   94|       |    struct _ftsent *fts_link;
   95|       |    long fts_number;
   96|       |    void *fts_pointer;
   97|       |    char *fts_accpath;
   98|       |    char *fts_path;
   99|       |    int fts_errno;
  100|       |    int fts_symfd;
  101|       |    size_t fts_pathlen;
  102|       |    ino_t fts_ino;
  103|       |    dev_t fts_dev;
  104|       |    nlink_t fts_nlink;
  105|       |    int fts_level;
  106|       |    u_short fts_namelen;
  107|       |    u_short fts_info;
  108|       |    u_short fts_flags;
  109|       |    u_short fts_instr;
  110|       |    struct stat *fts_statp;
  111|       |    char fts_name[1];
  112|       |};
  113|       |typedef struct _ftsent FTSENT;
  114|       |typedef __builtin_va_list __gnuc_va_list;
  115|       |typedef __gnuc_va_list va_list;
  116|       |typedef long __off64_t;
  117|       |struct _IO_FILE;
  118|       |struct _IO_FILE;
  119|       |typedef struct _IO_FILE FILE;
  120|       |typedef void _IO_lock_t;
  121|       |struct _IO_marker {
  122|       |    struct _IO_marker *_next;
  123|       |    struct _IO_FILE *_sbuf;
  124|       |    int _pos;
  125|       |};
  126|       |struct _IO_FILE {
  127|       |    int _flags;
  128|       |    char *_IO_read_ptr;
  129|       |    char *_IO_read_end;
  130|       |    char *_IO_read_base;
  131|       |    char *_IO_write_base;
  132|       |    char *_IO_write_ptr;
  133|       |    char *_IO_write_end;
  134|       |    char *_IO_buf_base;
  135|       |    char *_IO_buf_end;
  136|       |    char *_IO_save_base;
  137|       |    char *_IO_backup_base;
  138|       |    char *_IO_save_end;
  139|       |    struct _IO_marker *_markers;
  140|       |    struct _IO_FILE *_chain;
  141|       |    int _fileno;
  142|       |    int _flags2;
  143|       |    __off_t _old_offset;
  144|       |    unsigned short _cur_column;
  145|       |    signed char _vtable_offset;
  146|       |    char _shortbuf[1];
  147|       |    _IO_lock_t *_lock;
  148|       |    __off64_t _offset;
  149|       |    void *__pad1;
  150|       |    void *__pad2;
  151|       |    void *__pad3;
  152|       |    void *__pad4;
  153|       |    size_t __pad5;
  154|       |    int _mode;
  155|       |    char _unused2[(15UL * sizeof(int) - 4UL * sizeof(void *)) - sizeof(size_t)];
  156|       |};
  157|       |typedef int wchar_t;
  158|       |typedef unsigned int wint_t;
  159|       |enum __anonenum_arg_type_26 {
  160|       |    TYPE_NONE = 0,
  161|       |    TYPE_SCHAR = 1,
  162|       |    TYPE_UCHAR = 2,
  163|       |    TYPE_SHORT = 3,
  164|       |    TYPE_USHORT = 4,
  165|       |    TYPE_INT = 5,
  166|       |    TYPE_UINT = 6,
  167|       |    TYPE_LONGINT = 7,
  168|       |    TYPE_ULONGINT = 8,
  169|       |    TYPE_LONGLONGINT = 9,
  170|       |    TYPE_ULONGLONGINT = 10,
  171|       |    TYPE_DOUBLE = 11,
  172|       |    TYPE_LONGDOUBLE = 12,
  173|       |    TYPE_CHAR = 13,
  174|       |    TYPE_WIDE_CHAR = 14,
  175|       |    TYPE_STRING = 15,
  176|       |    TYPE_WIDE_STRING = 16,
  177|       |    TYPE_POINTER = 17,
  178|       |    TYPE_COUNT_SCHAR_POINTER = 18,
  179|       |    TYPE_COUNT_SHORT_POINTER = 19,
  180|       |    TYPE_COUNT_INT_POINTER = 20,
  181|       |    TYPE_COUNT_LONGINT_POINTER = 21,
  182|       |    TYPE_COUNT_LONGLONGINT_POINTER = 22
  183|       |};
  184|       |typedef enum __anonenum_arg_type_26 arg_type;
  185|       |union __anonunion_a_28 {
  186|       |    signed char a_schar;
  187|       |    unsigned char a_uchar;
  188|       |    short a_short;
  189|       |    unsigned short a_ushort;
  190|       |    int a_int;
  191|       |    unsigned int a_uint;
  192|       |    long a_longint;
  193|       |    unsigned long a_ulongint;
  194|       |    long long a_longlongint;
  195|       |    unsigned long long a_ulonglongint;
  196|       |    float a_float;
  197|       |    double a_double;
  198|       |    long double a_longdouble;
  199|       |    int a_char;
  200|       |    wint_t a_wide_char;
  201|       |    char const *a_string;
  202|       |    wchar_t const *a_wide_string;
  203|       |    void *a_pointer;
  204|       |    signed char *a_count_schar_pointer;
  205|       |    short *a_count_short_pointer;
  206|       |    int *a_count_int_pointer;
  207|       |    long *a_count_longint_pointer;
  208|       |    long long *a_count_longlongint_pointer;
  209|       |};
  210|       |struct __anonstruct_argument_27 {
  211|       |    arg_type type;
  212|       |    union __anonunion_a_28 a;
  213|       |};
  214|       |typedef struct __anonstruct_argument_27 argument;
  215|       |struct __anonstruct_arguments_29 {
  216|       |    unsigned int count;
  217|       |    argument *arg;
  218|       |};
  219|       |typedef struct __anonstruct_arguments_29 arguments;
  220|       |struct __anonstruct_char_directive_30 {
  221|       |    char const *dir_start;
  222|       |    char const *dir_end;
  223|       |    int flags;
  224|       |    char const *width_start;
  225|       |    char const *width_end;
  226|       |    int width_arg_index;
  227|       |    char const *precision_start;
  228|       |    char const *precision_end;
  229|       |    int precision_arg_index;
  230|       |    char conversion;
  231|       |    int arg_index;
  232|       |};
  233|       |typedef struct __anonstruct_char_directive_30 char_directive;
  234|       |struct __anonstruct_char_directives_31 {
  235|       |    unsigned int count;
  236|       |    char_directive *dir;
  237|       |    unsigned int max_width_length;
  238|       |    unsigned int max_precision_length;
  239|       |};
  240|       |typedef struct __anonstruct_char_directives_31 char_directives;
  241|       |typedef long __suseconds_t;
  242|       |struct timeval {
  243|       |    __time_t tv_sec;
  244|       |    __suseconds_t tv_usec;
  245|       |};
  246|       |typedef __gid_t gid_t;
  247|       |typedef __uid_t uid_t;
  248|       |struct passwd {
  249|       |    char *pw_name;
  250|       |    char *pw_passwd;
  251|       |    __uid_t pw_uid;
  252|       |    __gid_t pw_gid;
  253|       |    char *pw_gecos;
  254|       |    char *pw_dir;
  255|       |    char *pw_shell;
  256|       |};
  257|       |struct group {
  258|       |    char *gr_name;
  259|       |    char *gr_passwd;
  260|       |    __gid_t gr_gid;
  261|       |    char **gr_mem;
  262|       |};
  263|       |typedef void *iconv_t;
  264|       |struct tm {
  265|       |    int tm_sec;
  266|       |    int tm_min;
  267|       |    int tm_hour;
  268|       |    int tm_mday;
  269|       |    int tm_mon;
  270|       |    int tm_year;
  271|       |    int tm_wday;
  272|       |    int tm_yday;
  273|       |    int tm_isdst;
  274|       |    long tm_gmtoff;
  275|       |    char const *tm_zone;
  276|       |};
  277|       |union __anonunion___value_16 {
  278|       |    unsigned int __wch;
  279|       |    char __wchb[4];
  280|       |};
  281|       |struct __anonstruct___mbstate_t_15 {
  282|       |    int __count;
  283|       |    union __anonunion___value_16 __value;
  284|       |};
  285|       |typedef struct __anonstruct___mbstate_t_15 __mbstate_t;
  286|       |typedef __mbstate_t mbstate_t;
  287|       |struct numname {
  288|       |    int num;
  289|       |    char const name[8];
  290|       |};
  291|       |typedef unsigned int md5_uint32;
  292|       |typedef unsigned long md5_uintptr;
  293|       |struct sha_ctx {
  294|       |    md5_uint32 A;
  295|       |    md5_uint32 B;
  296|       |    md5_uint32 C;
  297|       |    md5_uint32 D;
  298|       |    md5_uint32 E;
  299|       |    md5_uint32 total[2];
  300|       |    md5_uint32 buflen;
  301|       |    char buffer[128];
  302|       |};
  303|       |typedef int __clockid_t;
  304|       |typedef __clockid_t clockid_t;
  305|       |struct timezone {
  306|       |    int tz_minuteswest;
  307|       |    int tz_dsttime;
  308|       |};
  309|       |struct dirent {
  310|       |    __ino_t d_ino;
  311|       |    __off_t d_off;
  312|       |    unsigned short d_reclen;
  313|       |    unsigned char d_type;
  314|       |    char d_name[256];
  315|       |};
  316|       |struct __dirstream;
  317|       |struct __dirstream;
  318|       |typedef struct __dirstream DIR;
  319|       |struct saved_cwd {
  320|       |    int desc;
  321|       |    char *name;
  322|       |};
  323|       |typedef int __int32_t;
  324|       |typedef int __pid_t;
  325|       |struct __exit_status {
  326|       |    short e_termination;
  327|       |    short e_exit;
  328|       |};
  329|       |struct __anonstruct_ut_tv_27 {
  330|       |    __int32_t tv_sec;
  331|       |    __int32_t tv_usec;
  332|       |};
  333|       |struct utmpx {
  334|       |    short ut_type;
  335|       |    __pid_t ut_pid;
  336|       |    char ut_line[32];
  337|       |    char ut_id[4];
  338|       |    char ut_user[32];
  339|       |    char ut_host[256];
  340|       |    struct __exit_status ut_exit;
  341|       |    __int32_t ut_session;
  342|       |    struct __anonstruct_ut_tv_27 ut_tv;
  343|       |    __int32_t ut_addr_v6[4];
  344|       |    char __glibc_reserved[20];
  345|       |};
  346|       |typedef struct utmpx STRUCT_UTMP;
  347|       |struct tokenbuffer {
  348|       |    long size;
  349|       |    char *buffer;
  350|       |};
  351|       |typedef struct tokenbuffer token_buffer;
  352|       |struct quoting_options;
  353|       |struct quoting_options;
  354|       |struct quoting_options {
  355|       |    enum quoting_style style;
  356|       |    int quote_these_too[255UL / (sizeof(int) * 8UL) + 1UL];
  357|       |};
  358|       |struct slotvec {
  359|       |    size_t size;
  360|       |    char *val;
  361|       |};
  362|       |typedef __off_t off_t;
  363|       |struct mntent {
  364|       |    char *mnt_fsname;
  365|       |    char *mnt_dir;
  366|       |    char *mnt_type;
  367|       |    char *mnt_opts;
  368|       |    int mnt_freq;
  369|       |    int mnt_passno;
  370|       |};
  371|       |struct mount_entry {
  372|       |    char *me_devname;
  373|       |    char *me_mountdir;
  374|       |    char *me_type;
  375|       |    dev_t me_dev;
  376|       |    unsigned int me_dummy : 1;
  377|       |    unsigned int me_remote : 1;
  378|       |    unsigned int me_type_malloced : 1;
  379|       |    struct mount_entry *me_next;
  380|       |};
  381|       |typedef __mode_t mode_t;
  382|       |struct mode_change {
  383|       |    char op;
  384|       |    char flags;
  385|       |    mode_t affected;
  386|       |    mode_t value;
  387|       |    struct mode_change *next;
  388|       |};
  389|       |struct md5_ctx {
  390|       |    md5_uint32 A;
  391|       |    md5_uint32 B;
  392|       |    md5_uint32 C;
  393|       |    md5_uint32 D;
  394|       |    md5_uint32 total[2];
  395|       |    md5_uint32 buflen;
  396|       |    char buffer[128];
  397|       |};
  398|       |struct ptr_list {
  399|       |    char *dirname_end;
  400|       |    struct ptr_list *next;
  401|       |};
  402|       |struct option {
  403|       |    char const *name;
  404|       |    int has_arg;
  405|       |    int *flag;
  406|       |    int val;
  407|       |};
  408|       |typedef int nl_item;
  409|       |struct linebuffer {
  410|       |    size_t size;
  411|       |    size_t length;
  412|       |    char *buffer;
  413|       |};
  414|       |union __anonunion_id_22 {
  415|       |    uid_t u;
  416|       |    gid_t g;
  417|       |};
  418|       |struct userid {
  419|       |    union __anonunion_id_22 id;
  420|       |    char *name;
  421|       |    struct userid *next;
  422|       |};
  423|       |struct lconv {
  424|       |    char *decimal_point;
  425|       |    char *thousands_sep;
  426|       |    char *grouping;
  427|       |    char *int_curr_symbol;
  428|       |    char *currency_symbol;
  429|       |    char *mon_decimal_point;
  430|       |    char *mon_thousands_sep;
  431|       |    char *mon_grouping;
  432|       |    char *positive_sign;
  433|       |    char *negative_sign;
  434|       |    char int_frac_digits;
  435|       |    char frac_digits;
  436|       |    char p_cs_precedes;
  437|       |    char p_sep_by_space;
  438|       |    char n_cs_precedes;
  439|       |    char n_sep_by_space;
  440|       |    char p_sign_posn;
  441|       |    char n_sign_posn;
  442|       |    char int_p_cs_precedes;
  443|       |    char int_p_sep_by_space;
  444|       |    char int_n_cs_precedes;
  445|       |    char int_n_sep_by_space;
  446|       |    char int_p_sign_posn;
  447|       |    char int_n_sign_posn;
  448|       |};
  449|       |struct hash_entry {
  450|       |    void *data;
  451|       |    struct hash_entry *next;
  452|       |};
  453|       |struct hash_tuning {
  454|       |    float shrink_threshold;
  455|       |    float shrink_factor;
  456|       |    float growth_threshold;
  457|       |    float growth_factor;
  458|       |    _Bool is_n_buckets;
  459|       |};
  460|       |typedef struct hash_tuning Hash_tuning;
  461|       |struct hash_table {
  462|       |    struct hash_entry *bucket;
  463|       |    struct hash_entry const *bucket_limit;
  464|       |    size_t n_buckets;
  465|       |    size_t n_buckets_used;
  466|       |    size_t n_entries;
  467|       |    Hash_tuning const *tuning;
  468|       |    size_t (*hasher)(void const *, size_t);
  469|       |    _Bool (*comparator)(void const *, void const *);
  470|       |    void (*data_freer)(void *);
  471|       |    struct hash_entry *free_entry_list;
  472|       |};
  473|       |typedef struct timezone *__restrict __timezone_ptr_t;
  474|       |struct __anonstruct_textint_22 {
  475|       |    int value;
  476|       |    int digits;
  477|       |};
  478|       |typedef struct __anonstruct_textint_22 textint;
  479|       |struct __anonstruct_table_23 {
  480|       |    char const *name;
  481|       |    int type;
  482|       |    int value;
  483|       |};
  484|       |typedef struct __anonstruct_table_23 table;
  485|       |struct __anonstruct_parser_control_25 {
  486|       |    char const *input;
  487|       |    int day_ordinal;
  488|       |    int day_number;
  489|       |    int local_isdst;
  490|       |    int time_zone;
  491|       |    int meridian;
  492|       |    textint year;
  493|       |    int month;
  494|       |    int day;
  495|       |    int hour;
  496|       |    int minutes;
  497|       |    int seconds;
  498|       |    int rel_year;
  499|       |    int rel_month;
  500|       |    int rel_day;
  501|       |    int rel_hour;
  502|       |    int rel_minutes;
  503|       |    int rel_seconds;
  504|       |    int dates_seen;
  505|       |    int days_seen;
  506|       |    int local_zones_seen;
  507|       |    int rels_seen;
  508|       |    int times_seen;
  509|       |    int zones_seen;
  510|       |    table local_time_zone_table[3];
  511|       |};
  512|       |typedef struct __anonstruct_parser_control_25 parser_control;
  513|       |union YYSTYPE {
  514|       |    int intval;
  515|       |    textint textintval;
  516|       |};
  517|       |typedef union YYSTYPE YYSTYPE;
  518|       |union yyalloc {
  519|       |    short yyss;
  520|       |    YYSTYPE yyvs;
  521|       |};
  522|       |typedef signed char yysigned_char;
  523|       |typedef unsigned int __u_int;
  524|       |typedef __u_int u_int;
  525|       |struct Active_dir {
  526|       |    dev_t dev;
  527|       |    ino_t ino;
  528|       |    FTSENT *fts_ent;
  529|       |};
  530|       |struct __anonstruct___fsid_t_2 {
  531|       |    int __val[2];
  532|       |};
  533|       |typedef struct __anonstruct___fsid_t_2 __fsid_t;
  534|       |typedef unsigned long __fsblkcnt_t;
  535|       |typedef unsigned long __fsfilcnt_t;
  536|       |typedef long __fsword_t;
  537|       |struct fs_usage {
  538|       |    int fsu_blocksize;
  539|       |    uintmax_t fsu_blocks;
  540|       |    uintmax_t fsu_bfree;
  541|       |    uintmax_t fsu_bavail;
  542|       |    int fsu_bavail_top_bit_set;
  543|       |    uintmax_t fsu_files;
  544|       |    uintmax_t fsu_ffree;
  545|       |};
  546|       |struct statfs {
  547|       |    __fsword_t f_type;
  548|       |    __fsword_t f_bsize;
  549|       |    __fsblkcnt_t f_blocks;
  550|       |    __fsblkcnt_t f_bfree;
  551|       |    __fsblkcnt_t f_bavail;
  552|       |    __fsfilcnt_t f_files;
  553|       |    __fsfilcnt_t f_ffree;
  554|       |    __fsid_t f_fsid;
  555|       |    __fsword_t f_namelen;
  556|       |    __fsword_t f_frsize;
  557|       |    __fsword_t f_flags;
  558|       |    __fsword_t f_spare[4];
  559|       |};
  560|       |struct exclude;
  561|       |struct exclude;
  562|       |struct patopts {
  563|       |    char const *pattern;
  564|       |    int options;
  565|       |};
  566|       |struct exclude {
  567|       |    struct patopts *exclude;
  568|       |    size_t exclude_alloc;
  569|       |    size_t exclude_count;
  570|       |};
  571|       |typedef unsigned int __socklen_t;
  572|       |typedef unsigned int uint32_t;
  573|       |typedef uint32_t in_addr_t;
  574|       |struct in_addr {
  575|       |    in_addr_t s_addr;
  576|       |};
  577|       |struct hostent {
  578|       |    char *h_name;
  579|       |    char **h_aliases;
  580|       |    int h_addrtype;
  581|       |    int h_length;
  582|       |    char **h_addr_list;
  583|       |};
  584|       |enum backup_type { none = 0, simple = 1, numbered_existing = 2, numbered = 3 };
  585|       |extern __attribute__((__nothrow__)) unsigned short const **(
  586|       |    __attribute__((__leaf__)) __ctype_b_loc)(void)__attribute__((__const__));
  587|       |extern
  588|       |__attribute__((__nothrow__)) int(__attribute__((__nonnull__(1), __leaf__))
  589|       |                                 rpmatch)(char const *response);
  590|       |extern int getchar_unlocked(void);
  591|       |extern __attribute__((__nothrow__))
  592|       |uintmax_t(__attribute__((__leaf__)) strtoumax)(char const *__restrict __nptr,
  593|       |        char **__restrict __endptr,
  594|       |        int __base);
  595|       |extern __attribute__((__nothrow__, __noreturn__)) void(__attribute__((
  596|       |            __leaf__)) __assert_fail)(char const *__assertion, char const *__file,
  597|       |                                      unsigned int __line, char const *__function);
  598|       |extern __attribute__((__nothrow__)) char *(__attribute__((__nonnull__(1),
  599|       |        __leaf__))
  600|       |        strchr)(char const *__s, int __c)
  601|       |__attribute__((__pure__));
  602|       |extern __attribute__((__nothrow__)) int *(
  603|       |    __attribute__((__leaf__)) __errno_location)(void)__attribute__((__const__));
  604|       |extern __attribute__((__nothrow__)) unsigned long(__attribute__((
  605|       |            __nonnull__(1), __leaf__)) strtoul)(char const *__restrict __nptr,
  606|       |                    char **__restrict __endptr, int __base);
  607|       |strtol_error xstrtoul(char const *s, char **ptr, int strtol_base,
  608|       |                      unsigned long *val, char const *valid_suffixes);
  609|       |static strtol_error bkm_scale___0(unsigned long *x, int scale_factor)
  610|      0|{
  611|       |
  612|      0|    {
  613|      0|        if (0xffffffffffffffffUL / (unsigned long)scale_factor < *x) {
  614|      0|            *x = 0xffffffffffffffffUL;
  615|      0|            return ((strtol_error)1);
  616|      0|        }
  617|      0|        *x *= (unsigned long)scale_factor;
  618|      0|        return ((strtol_error)0);
  619|      0|    }
  620|      0|}
  621|       |static strtol_error bkm_scale_by_power___0(unsigned long *x, int base,
  622|       |        int power)
  623|      0|{
  624|      0|    strtol_error err;
  625|      0|    strtol_error tmp;
  626|      0|    int tmp___0;
  627|       |
  628|      0|    {
  629|      0|        err = (strtol_error)0;
  630|      0|        {
  631|      0|            while (1) {
  632|      0|while_continue: /* CIL Label */
  633|      0|                ;
  634|      0|                tmp___0 = power;
  635|      0|                power--;
  636|      0|                if (!tmp___0) {
  637|      0|                    goto while_break;
  638|      0|                }
  639|      0|                {
  640|      0|                    tmp = bkm_scale___0(x, base);
  641|      0|                    err = (strtol_error)((unsigned int)err | (unsigned int)tmp);
  642|      0|                }
  643|      0|            }
  644|      0|while_break___0: /* CIL Label */
  645|      0|            ;
  646|      0|        }
  647|      0|while_break:
  648|      0|        ;
  649|      0|        return (err);
  650|      0|    }
  651|      0|}
  652|       |strtol_error xstrtoul(char const *s, char **ptr, int strtol_base,
  653|       |                      unsigned long *val, char const *valid_suffixes)
  654|      0|{
  655|      0|    char *t_ptr;
  656|      0|    char **p;
  657|      0|    unsigned long tmp;
  658|      0|    strtol_error err;
  659|      0|    char const *q;
  660|      0|    unsigned short const **tmp___0;
  661|      0|    int *tmp___1;
  662|      0|    char *tmp___2;
  663|      0|    int *tmp___3;
  664|      0|    int *tmp___4;
  665|      0|    int base;
  666|      0|    int suffixes;
  667|      0|    strtol_error overflow;
  668|      0|    char *tmp___5;
  669|      0|    char *tmp___6;
  670|       |
  671|      0|    {
  672|      0|        err = (strtol_error)0;
  673|      0|        if (0 <= strtol_base) {
  674|      0|            if (!(strtol_base <= 36)) {
  675|      0|                {
  676|      0|                    __assert_fail(
  677|      0|                        "0 <= strtol_base && strtol_base <= 36",
  678|      0|                        "/home/khheo/project/benchmark/coreutils-5.2.1/lib/xstrtol.c",
  679|      0|                        117U, "xstrtoul");
  680|      0|                }
  681|      0|            }
  682|      0|        }
  683|      0|        else {
  684|      0|            {
  685|      0|                __assert_fail(
  686|      0|                    "0 <= strtol_base && strtol_base <= 36",
  687|      0|                    "/home/khheo/project/benchmark/coreutils-5.2.1/lib/xstrtol.c", 117U,
  688|      0|                    "xstrtoul");
  689|      0|            }
  690|      0|        }
  691|      0|        if (ptr) {
  692|      0|            p = ptr;
  693|      0|        }
  694|      0|        else {
  695|      0|            p = &t_ptr;
  696|      0|        }
  697|      0|        q = s;
  698|      0|        {
  699|      0|            while (1) {
  700|      0|while_continue: /* CIL Label */
  701|      0|                ;
  702|      0|                {
  703|      0|                    tmp___0 = __ctype_b_loc();
  704|      0|                }
  705|      0|                if (!((int const) * (*tmp___0 + (int)((unsigned char)*q)) & 8192)) {
  706|      0|                    goto while_break;
  707|      0|                }
  708|      0|                q++;
  709|      0|            }
  710|      0|while_break___0: /* CIL Label */
  711|      0|            ;
  712|      0|        }
  713|      0|while_break:
  714|      0|        ;
  715|      0|        if ((int const) * q == 45) {
  716|      0|            return ((strtol_error)4);
  717|      0|        }
  718|      0|        {
  719|      0|            tmp___1 = __errno_location();
  720|      0|            *tmp___1 = 0;
  721|      0|            tmp = strtoul((char const * /* __restrict  */)s,
  722|      0|                          (char ** /* __restrict  */)p, strtol_base);
  723|      0|        }
  724|      0|        if ((unsigned long)*p == (unsigned long)s) {
  725|      0|            if (valid_suffixes) {
  726|      0|                if (*(*p)) {
  727|      0|                    {
  728|      0|                        tmp___2 = strchr(valid_suffixes, (int)*(*p));
  729|      0|                    }
  730|      0|                    if (tmp___2) {
  731|      0|                        tmp = 1UL;
  732|      0|                    }
  733|      0|                    else {
  734|      0|                        return ((strtol_error)4);
  735|      0|                    }
  736|      0|                }
  737|      0|                else {
  738|      0|                    return ((strtol_error)4);
  739|      0|                }
  740|      0|            }
  741|      0|            else {
  742|      0|                return ((strtol_error)4);
  743|      0|            }
  744|      0|        }
  745|      0|        else {
  746|      0|            {
  747|      0|                tmp___4 = __errno_location();
  748|      0|            }
  749|      0|            if (*tmp___4 != 0) {
  750|      0|                {
  751|      0|                    tmp___3 = __errno_location();
  752|      0|                }
  753|      0|                if (*tmp___3 != 34) {
  754|      0|                    return ((strtol_error)4);
  755|      0|                }
  756|      0|                err = (strtol_error)1;
  757|      0|            }
  758|      0|        }
  759|      0|        if (!valid_suffixes) {
  760|      0|            *val = tmp;
  761|      0|            return (err);
  762|      0|        }
  763|      0|        if ((int)*(*p) != 0) {
  764|      0|            {
  765|      0|                base = 1024;
  766|      0|                suffixes = 1;
  767|      0|                tmp___5 = strchr(valid_suffixes, (int)*(*p));
  768|      0|            }
  769|      0|            if (!tmp___5) {
  770|      0|                *val = tmp;
  771|      0|                return ((strtol_error)((unsigned int)err | 2U));
  772|      0|            }
  773|      0|            {
  774|      0|                tmp___6 = strchr(valid_suffixes, '0');
  775|      0|            }
  776|      0|            if (tmp___6) {
  777|      0|                if ((int)*(*(p + 0) + 1) == 105) {
  778|      0|                    goto case_105;
  779|      0|                }
  780|      0|                if ((int)*(*(p + 0) + 1) == 68) {
  781|      0|                    goto case_68;
  782|      0|                }
  783|      0|                if ((int)*(*(p + 0) + 1) == 66) {
  784|      0|                    goto case_68;
  785|      0|                }
  786|      0|                goto switch_break;
  787|      0|case_105:
  788|      0|                if ((int)*(*(p + 0) + 2) == 66) {
  789|      0|                    suffixes += 2;
  790|      0|                }
  791|      0|                goto switch_break;
  792|      0|case_68:
  793|      0|                base = 1000;
  794|      0|                suffixes++;
  795|      0|                goto switch_break;
  796|      0|switch_break:
  797|      0|                ;
  798|      0|            }
  799|      0|            if ((int)*(*p) == 98) {
  800|      0|                goto case_98;
  801|      0|            }
  802|      0|            if ((int)*(*p) == 66) {
  803|      0|                goto case_66___0;
  804|      0|            }
  805|      0|            if ((int)*(*p) == 99) {
  806|      0|                goto case_99;
  807|      0|            }
  808|      0|            if ((int)*(*p) == 69) {
  809|      0|                goto case_69;
  810|      0|            }
  811|      0|            if ((int)*(*p) == 103) {
  812|      0|                goto case_103;
  813|      0|            }
  814|      0|            if ((int)*(*p) == 71) {
  815|      0|                goto case_103;
  816|      0|            }
  817|      0|            if ((int)*(*p) == 75) {
  818|      0|                goto case_75;
  819|      0|            }
  820|      0|            if ((int)*(*p) == 107) {
  821|      0|                goto case_75;
  822|      0|            }
  823|      0|            if ((int)*(*p) == 109) {
  824|      0|                goto case_109;
  825|      0|            }
  826|      0|            if ((int)*(*p) == 77) {
  827|      0|                goto case_109;
  828|      0|            }
  829|      0|            if ((int)*(*p) == 80) {
  830|      0|                goto case_80;
  831|      0|            }
  832|      0|            if ((int)*(*p) == 116) {
  833|      0|                goto case_116;
  834|      0|            }
  835|      0|            if ((int)*(*p) == 84) {
  836|      0|                goto case_116;
  837|      0|            }
  838|      0|            if ((int)*(*p) == 119) {
  839|      0|                goto case_119;
  840|      0|            }
  841|      0|            if ((int)*(*p) == 89) {
  842|      0|                goto case_89;
  843|      0|            }
  844|      0|            if ((int)*(*p) == 90) {
  845|      0|                goto case_90;
  846|      0|            }
  847|      0|            goto switch_default;
  848|      0|case_98 : {
  849|      0|                overflow = bkm_scale___0(&tmp, 512);
  850|      0|            }
  851|      0|            goto switch_break___0;
  852|      0|case_66___0 : {
  853|      0|                overflow = bkm_scale___0(&tmp, 1024);
  854|      0|            }
  855|      0|            goto switch_break___0;
  856|      0|case_99:
  857|      0|            overflow = (strtol_error)0;
  858|      0|            goto switch_break___0;
  859|      0|case_69 : {
  860|      0|                overflow = bkm_scale_by_power___0(&tmp, base, 6);
  861|      0|            }
  862|      0|            goto switch_break___0;
  863|      0|case_103 : {
  864|      0|                overflow = bkm_scale_by_power___0(&tmp, base, 3);
  865|      0|            }
  866|      0|            goto switch_break___0;
  867|      0|case_75 : {
  868|      0|                overflow = bkm_scale_by_power___0(&tmp, base, 1);
  869|      0|            }
  870|      0|            goto switch_break___0;
  871|      0|case_109 : {
  872|      0|                overflow = bkm_scale_by_power___0(&tmp, base, 2);
  873|      0|            }
  874|      0|            goto switch_break___0;
  875|      0|case_80 : {
  876|      0|                overflow = bkm_scale_by_power___0(&tmp, base, 5);
  877|      0|            }
  878|      0|            goto switch_break___0;
  879|      0|case_116 : {
  880|      0|                overflow = bkm_scale_by_power___0(&tmp, base, 4);
  881|      0|            }
  882|      0|            goto switch_break___0;
  883|      0|case_119 : {
  884|      0|                overflow = bkm_scale___0(&tmp, 2);
  885|      0|            }
  886|      0|            goto switch_break___0;
  887|      0|case_89 : {
  888|      0|                overflow = bkm_scale_by_power___0(&tmp, base, 8);
  889|      0|            }
  890|      0|            goto switch_break___0;
  891|      0|case_90 : {
  892|      0|                overflow = bkm_scale_by_power___0(&tmp, base, 7);
  893|      0|            }
  894|      0|            goto switch_break___0;
  895|      0|switch_default:
  896|      0|            *val = tmp;
  897|      0|            return ((strtol_error)((unsigned int)err | 2U));
  898|      0|switch_break___0:
  899|      0|            err = (strtol_error)((unsigned int)err | (unsigned int)overflow);
  900|      0|            *p += suffixes;
  901|      0|            if (*(*p)) {
  902|      0|                err = (strtol_error)((unsigned int)err | 2U);
  903|      0|            }
  904|      0|        }
  905|      0|        *val = tmp;
  906|      0|        return (err);
  907|      0|    }
  908|      0|}
  909|       |extern
  910|       |__attribute__((__nothrow__)) long(__attribute__((__nonnull__(1), __leaf__))
  911|       |                                  strtol)(char const *__restrict __nptr,
  912|       |                                          char **__restrict __endptr,
  913|       |                                          int __base);
  914|       |extern __attribute__((__nothrow__))
  915|       |intmax_t(__attribute__((__leaf__)) strtoimax)(char const *__restrict __nptr,
  916|       |        char **__restrict __endptr,
  917|       |        int __base);
  918|       |extern __attribute__((__nothrow__)) char *(
  919|       |    __attribute__((__nonnull__(1), __leaf__))
  920|       |    strndup)(char const *__string, size_t __n) __attribute__((__malloc__));
  921|       |__attribute__((__noreturn__)) void xalloc_die(void);
  922|       |extern __attribute__((__nothrow__))
  923|       |size_t(__attribute__((__nonnull__(1), __leaf__)) strlen)(char const *__s)
  924|       |__attribute__((__pure__));
  925|       |__attribute__((__nothrow__)) void(__attribute__((__leaf__)) rpl_free)(void *p);
  926|       |extern __attribute__((__nothrow__))
  927|       |ssize_t(__attribute__((__nonnull__(1, 2), __leaf__))
  928|       |        readlink)(char const *__restrict __path, char *__restrict __buf,
  929|       |                  size_t __len);
  930|       |void *xmalloc(size_t n);
  931|       |extern int nanosleep(struct timespec const *__requested_time,
  932|       |                     struct timespec *__remaining);
  933|       |extern __attribute__((__nothrow__)) char *(__attribute__((__leaf__))
  934|       |        gettext)(char const *__msgid)
  935|       |__attribute__((__format_arg__(1)));
  936|       |extern void error(int __status, int __errnum, char const *__format, ...);
  937|       |int volatile exit_failure;
  938|       |void (*xalloc_fail_func)(void);
  939|       |char const xalloc_msg_memory_exhausted[17];
  940|       |void *xrealloc(void *p, size_t n);
  941|       |extern __attribute__((__nothrow__)) void *(__attribute__((__leaf__))
  942|       |        malloc)(size_t __size)
  943|       |__attribute__((__malloc__));
  944|       |extern
  945|       |__attribute__((__nothrow__)) void *(__attribute__((__leaf__))
  946|       |                                    calloc)(size_t __nmemb, size_t __size)
  947|       |__attribute__((__malloc__));
  948|       |extern
  949|       |__attribute__((__nothrow__)) void *(__attribute__((__warn_unused_result__,
  950|       |                                    __leaf__))
  951|       |                                    realloc)(void *__ptr, size_t __size);
  952|       |extern __attribute__((__nothrow__, __noreturn__)) void(__attribute__((__leaf__))
  953|       |        abort)(void);
  954|       |extern __attribute__((__nothrow__)) void *(
  955|       |    __attribute__((__nonnull__(1, 2), __leaf__))
  956|       |    memcpy)(void *__restrict __dest, void const *__restrict __src, size_t __n);
  957|       |extern
  958|       |__attribute__((__nothrow__)) void *(__attribute__((__nonnull__(1),
  959|       |                                    __leaf__))
  960|       |                                    memset)(void *__s, int __c, size_t __n);
  961|       |void (*xalloc_fail_func)(void) = (void (*)(void))0;
  962|       |char const xalloc_msg_memory_exhausted[17] = {
  963|       |    (char const)'m',   (char const)'e', (char const)'m', (char const)'o',
  964|       |    (char const)'r',   (char const)'y', (char const)' ', (char const)'e',
  965|       |    (char const)'x',   (char const)'h', (char const)'a', (char const)'u',
  966|       |    (char const)'s',   (char const)'t', (char const)'e', (char const)'d',
  967|       |    (char const)'\000'
  968|       |};
  969|       |__attribute__((__noreturn__)) void xalloc_die(void);
  970|       |void xalloc_die(void)
  971|      0|{
  972|      0|    char *tmp;
  973|       |
  974|      0|    {
  975|      0|        if (xalloc_fail_func) {
  976|      0|            {
  977|      0|                (*xalloc_fail_func)();
  978|      0|            }
  979|      0|        }
  980|      0|        {
  981|      0|            tmp = gettext(xalloc_msg_memory_exhausted);
  982|      0|            error((int)exit_failure, 0, "%s", tmp);
  983|      0|            abort();
  984|      0|        }
  985|      0|    }
  986|      0|}
  987|       |__inline static void *xnmalloc_inline(size_t n, size_t s)
  988|      0|{
  989|      0|    void *p;
  990|      0|    int tmp;
  991|       |
  992|      0|    {
  993|      0|        if (sizeof(ptrdiff_t) <= sizeof(size_t)) {
  994|      0|            tmp = -1;
  995|      0|        }
  996|      0|        else {
  997|      0|            tmp = -2;
  998|      0|        }
  999|      0|        if ((size_t)tmp / s < n) {
 1000|      0|            {
 1001|      0|                xalloc_die();
 1002|      0|            }
 1003|      0|        }
 1004|      0|        else {
 1005|      0|            {
 1006|      0|                p = malloc(n * s);
 1007|      0|            }
 1008|      0|            if (!p) {
 1009|      0|                {
 1010|      0|                    xalloc_die();
 1011|      0|                }
 1012|      0|            }
 1013|      0|        }
 1014|      0|        return (p);
 1015|      0|    }
 1016|      0|}
 1017|       |void *xmalloc(size_t n)
 1018|      0|{
 1019|      0|    void *tmp;
 1020|       |
 1021|      0|    {
 1022|      0|        {
 1023|      0|            tmp = xnmalloc_inline(n, (size_t)1);
 1024|      0|        }
 1025|      0|        return (tmp);
 1026|      0|    }
 1027|      0|}
 1028|       |__inline static void *xnrealloc_inline(void *p, size_t n, size_t s)
 1029|      0|{
 1030|      0|    int tmp;
 1031|       |
 1032|      0|    {
 1033|      0|        if (sizeof(ptrdiff_t) <= sizeof(size_t)) {
 1034|      0|            tmp = -1;
 1035|      0|        }
 1036|      0|        else {
 1037|      0|            tmp = -2;
 1038|      0|        }
 1039|      0|        if ((size_t)tmp / s < n) {
 1040|      0|            {
 1041|      0|                xalloc_die();
 1042|      0|            }
 1043|      0|        }
 1044|      0|        else {
 1045|      0|            {
 1046|      0|                p = realloc(p, n * s);
 1047|      0|            }
 1048|      0|            if (!p) {
 1049|      0|                {
 1050|      0|                    xalloc_die();
 1051|      0|                }
 1052|      0|            }
 1053|      0|        }
 1054|      0|        return (p);
 1055|      0|    }
 1056|      0|}
 1057|       |void *xrealloc(void *p, size_t n)
 1058|      0|{
 1059|      0|    void *tmp;
 1060|       |
 1061|      0|    {
 1062|      0|        {
 1063|      0|            tmp = xnrealloc_inline(p, n, (size_t)1);
 1064|      0|        }
 1065|      0|        return (tmp);
 1066|      0|    }
 1067|      0|}
 1068|       |extern int gethostname();
 1069|       |__attribute__((__nothrow__)) char *(__attribute__((__leaf__))
 1070|       |                                    rpl_getcwd)(char *buf, size_t size);
 1071|       |char *xgetcwd(void);
 1072|       |char *xgetcwd(void)
 1073|      0|{
 1074|      0|    char *cwd;
 1075|      0|    char *tmp;
 1076|      0|    int *tmp___0;
 1077|       |
 1078|      0|    {
 1079|      0|        {
 1080|      0|            tmp = rpl_getcwd((char *)((void *)0), (size_t)0);
 1081|      0|            cwd = tmp;
 1082|      0|        }
 1083|      0|        if (!cwd) {
 1084|      0|            {
 1085|      0|                tmp___0 = __errno_location();
 1086|      0|            }
 1087|      0|            if (*tmp___0 == 12) {
 1088|      0|                {
 1089|      0|                    xalloc_die();
 1090|      0|                }
 1091|      0|            }
 1092|      0|        }
 1093|      0|        return (cwd);
 1094|      0|    }
 1095|      0|}
 1096|       |char const *quote(char const *name);
 1097|       |extern int fprintf(FILE *__restrict __stream, char const *__restrict __format,
 1098|       |                   ...);
 1099|       |extern int vfprintf(FILE *__restrict __s, char const *__restrict __format,
 1100|       |                    __gnuc_va_list __arg);
 1101|       |extern int putc_unlocked(int __c, FILE *__stream);
 1102|       |extern int fputs_unlocked(char const *__restrict __s,
 1103|       |                          FILE *__restrict __stream);
 1104|       |char const *version_etc_copyright;
 1105|       |void version_etc_va(FILE *stream, char const *command_name, char const *package,
 1106|       |                    char const *version, va_list authors);
 1107|       |void version_etc(FILE *stream, char const *command_name, char const *package,
 1108|       |                 char const *version, ...);
 1109|       |char const *version_etc_copyright =
 1110|       |    "Copyright (C) 2004 Free Software Foundation, Inc.";
 1111|       |void version_etc_va(FILE *stream, char const *command_name, char const *package,
 1112|       |                    char const *version, va_list authors)
 1113|      0|{
 1114|      0|    unsigned int n_authors;
 1115|      0|    va_list tmp_authors;
 1116|      0|    char const *tmp___0;
 1117|      0|    char *tmp___1;
 1118|      0|    char *tmp___2;
 1119|      0|    char *tmp___3;
 1120|      0|    char *tmp___4;
 1121|      0|    char *tmp___5;
 1122|      0|    char *tmp___6;
 1123|      0|    char *tmp___7;
 1124|      0|    char *tmp___8;
 1125|      0|    char *tmp___9;
 1126|      0|    char *tmp___10;
 1127|      0|    char *tmp___11;
 1128|      0|    char *__cil_tmp20;
 1129|      0|    char *__cil_tmp21;
 1130|      0|    char *__cil_tmp22;
 1131|      0|    char *__cil_tmp23;
 1132|      0|    char *__cil_tmp24;
 1133|      0|    char *__cil_tmp25;
 1134|      0|    char *__cil_tmp26;
 1135|      0|    char *__cil_tmp27;
 1136|      0|    char *__cil_tmp28;
 1137|      0|    char *__cil_tmp29;
 1138|      0|    char *__cil_tmp30;
 1139|       |
 1140|      0|    {
 1141|      0|        {
 1142|      0|            __builtin_va_copy(tmp_authors, authors);
 1143|      0|            n_authors = 0U;
 1144|      0|        }
 1145|      0|        {
 1146|      0|            while (1) {
 1147|      0|while_continue: /* CIL Label */
 1148|      0|                ;
 1149|      0|                {
 1150|      0|                    tmp___0 = __builtin_va_arg(tmp_authors, char const *);
 1151|      0|                }
 1152|      0|                if (!((unsigned long)tmp___0 != (unsigned long)((void *)0))) {
 1153|      0|                    goto while_break;
 1154|      0|                }
 1155|      0|                n_authors++;
 1156|      0|            }
 1157|      0|while_break___0: /* CIL Label */
 1158|      0|            ;
 1159|      0|        }
 1160|      0|while_break:
 1161|      0|        ;
 1162|      0|        if (command_name) {
 1163|      0|            {
 1164|      0|                fprintf((FILE * /* __restrict  */) stream,
 1165|      0|                        (char const * /* __restrict  */) "%s (%s) %s\n", command_name,
 1166|      0|                        package, version);
 1167|      0|            }
 1168|      0|        }
 1169|      0|        else {
 1170|      0|            {
 1171|      0|                fprintf((FILE * /* __restrict  */) stream,
 1172|      0|                        (char const * /* __restrict  */) "%s %s\n", package, version);
 1173|      0|            }
 1174|      0|        }
 1175|      0|        if (n_authors == 0U) {
 1176|      0|            goto case_0;
 1177|      0|        }
 1178|      0|        if (n_authors == 1U) {
 1179|      0|            goto case_1;
 1180|      0|        }
 1181|      0|        if (n_authors == 2U) {
 1182|      0|            goto case_2;
 1183|      0|        }
 1184|      0|        if (n_authors == 3U) {
 1185|      0|            goto case_3;
 1186|      0|        }
 1187|      0|        if (n_authors == 4U) {
 1188|      0|            goto case_4;
 1189|      0|        }
 1190|      0|        if (n_authors == 5U) {
 1191|      0|            goto case_5;
 1192|      0|        }
 1193|      0|        if (n_authors == 6U) {
 1194|      0|            goto case_6;
 1195|      0|        }
 1196|      0|        if (n_authors == 7U) {
 1197|      0|            goto case_7;
 1198|      0|        }
 1199|      0|        if (n_authors == 8U) {
 1200|      0|            goto case_8;
 1201|      0|        }
 1202|      0|        if (n_authors == 9U) {
 1203|      0|            goto case_9;
 1204|      0|        }
 1205|      0|        goto switch_default;
 1206|      0|case_0 : {
 1207|      0|            abort();
 1208|      0|        }
 1209|      0|case_1 : {
 1210|      0|            tmp___1 = gettext("Written by %s.\n");
 1211|      0|            vfprintf((FILE * /* __restrict  */) stream,
 1212|      0|                     (char const * /* __restrict  */)((char const *)tmp___1), authors);
 1213|      0|        }
 1214|      0|        goto switch_break;
 1215|      0|case_2 : {
 1216|      0|            tmp___2 = gettext("Written by %s and %s.\n");
 1217|      0|            vfprintf((FILE * /* __restrict  */) stream,
 1218|      0|                     (char const * /* __restrict  */)((char const *)tmp___2), authors);
 1219|      0|        }
 1220|      0|        goto switch_break;
 1221|      0|case_3 : {
 1222|      0|            tmp___3 = gettext("Written by %s, %s, and %s.\n");
 1223|      0|            vfprintf((FILE * /* __restrict  */) stream,
 1224|      0|                     (char const * /* __restrict  */)((char const *)tmp___3), authors);
 1225|      0|        }
 1226|      0|        goto switch_break;
 1227|      0|case_4 : {
 1228|      0|            tmp___4 = gettext("Written by %s, %s, %s,\nand %s.\n");
 1229|      0|            vfprintf((FILE * /* __restrict  */) stream,
 1230|      0|                     (char const * /* __restrict  */)((char const *)tmp___4), authors);
 1231|      0|        }
 1232|      0|        goto switch_break;
 1233|      0|case_5 : {
 1234|      0|            tmp___5 = gettext("Written by %s, %s, %s,\n%s, and %s.\n");
 1235|      0|            vfprintf((FILE * /* __restrict  */) stream,
 1236|      0|                     (char const * /* __restrict  */)((char const *)tmp___5), authors);
 1237|      0|        }
 1238|      0|        goto switch_break;
 1239|      0|case_6 : {
 1240|      0|            tmp___6 = gettext("Written by %s, %s, %s,\n%s, %s, and %s.\n");
 1241|      0|            vfprintf((FILE * /* __restrict  */) stream,
 1242|      0|                     (char const * /* __restrict  */)((char const *)tmp___6), authors);
 1243|      0|        }
 1244|      0|        goto switch_break;
 1245|      0|case_7 : {
 1246|      0|            tmp___7 = gettext("Written by %s, %s, %s,\n%s, %s, %s, and %s.\n");
 1247|      0|            vfprintf((FILE * /* __restrict  */) stream,
 1248|      0|                     (char const * /* __restrict  */)((char const *)tmp___7), authors);
 1249|      0|        }
 1250|      0|        goto switch_break;
 1251|      0|case_8 : {
 1252|      0|            tmp___8 = gettext("Written by %s, %s, %s,\n%s, %s, %s, %s,\nand %s.\n");
 1253|      0|            vfprintf((FILE * /* __restrict  */) stream,
 1254|      0|                     (char const * /* __restrict  */)((char const *)tmp___8), authors);
 1255|      0|        }
 1256|      0|        goto switch_break;
 1257|      0|case_9 : {
 1258|      0|            tmp___9 = gettext("Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, and %s.\n");
 1259|      0|            vfprintf((FILE * /* __restrict  */) stream,
 1260|      0|                     (char const * /* __restrict  */)((char const *)tmp___9), authors);
 1261|      0|        }
 1262|      0|        goto switch_break;
 1263|      0|switch_default : {
 1264|      0|            tmp___10 = gettext(
 1265|      0|                           "Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, %s, and others.\n");
 1266|      0|            vfprintf((FILE * /* __restrict  */) stream,
 1267|      0|                     (char const * /* __restrict  */)((char const *)tmp___10), authors);
 1268|      0|        }
 1269|      0|        goto switch_break;
 1270|      0|switch_break : {
 1271|      0|            __builtin_va_end(authors);
 1272|      0|            putc_unlocked('\n', stream);
 1273|      0|            fputs_unlocked((char const * /* __restrict  */)version_etc_copyright,
 1274|      0|                           (FILE * /* __restrict  */) stream);
 1275|      0|            putc_unlocked('\n', stream);
 1276|      0|            tmp___11 =
 1277|      0|                gettext("This is free software; see the source for copying conditions. "
 1278|      0|                        " There is NO\nwarranty; not even for MERCHANTABILITY or "
 1279|      0|                        "FITNESS FOR A PARTICULAR PURPOSE.\n");
 1280|      0|            fputs_unlocked((char const * /* __restrict  */)((char const *)tmp___11),
 1281|      0|                           (FILE * /* __restrict  */) stream);
 1282|      0|        }
 1283|      0|        return;
 1284|      0|    }
 1285|      0|}
 1286|       |void version_etc(FILE *stream, char const *command_name, char const *package,
 1287|       |                 char const *version, ...)
 1288|      0|{
 1289|      0|    va_list authors;
 1290|       |
 1291|      0|    {
 1292|      0|        {
 1293|      0|            __builtin_va_start(authors, version);
 1294|      0|            version_etc_va(stream, command_name, package, version, authors);
 1295|      0|        }
 1296|      0|        return;
 1297|      0|    }
 1298|      0|}
 1299|       |extern __attribute__((__nothrow__)) int
 1300|       |snprintf(char *__restrict __s, size_t __maxlen, char const *__restrict __format,
 1301|       |         ...);
 1302|       |extern
 1303|       |__attribute__((__nothrow__)) int(__attribute__((__nonnull__(1), __leaf__))
 1304|       |                                 utimes)(char const *__file,
 1305|       |                                         struct timeval const *__tvp);
 1306|       |extern __attribute__((__nothrow__)) int
 1307|       |sprintf(char *__restrict __s, char const *__restrict __format, ...);
 1308|       |extern void endpwent(void);
 1309|       |extern struct passwd *getpwnam(char const *__name);
 1310|       |extern void endgrent(void);
 1311|       |extern struct group *getgrgid(__gid_t __gid);
 1312|       |extern struct group *getgrnam(char const *__name);
 1313|       |extern __attribute__((__nothrow__)) char *(
 1314|       |    __attribute__((__nonnull__(1, 2), __leaf__))
 1315|       |    strcpy)(char *__restrict __dest, char const *__restrict __src);
 1316|       |extern __attribute__((__nothrow__)) char *(__attribute__((__nonnull__(1),
 1317|       |        __leaf__))
 1318|       |        strdup)(char const *__s)
 1319|       |__attribute__((__malloc__));
 1320|       |static char const *E_invalid_user = "invalid user";
 1321|       |static char const *E_invalid_group = "invalid group";
 1322|       |static char const *E_bad_spec = "cannot get the login group of a numeric UID";
 1323|       |static char const *E_cannot_omit_both = "cannot omit both user and group";
 1324|       |extern size_t fwrite(void const *__restrict __ptr, size_t __size, size_t __n,
 1325|       |                     FILE *__restrict __s);
 1326|       |extern __attribute__((__nothrow__)) int(
 1327|       |    __attribute__((__nonnull__(1, 2), __leaf__))
 1328|       |    strcmp)(char const *__s1, char const *__s2) __attribute__((__pure__));
 1329|       |extern iconv_t iconv_open(char const *__tocode, char const *__fromcode);
 1330|       |extern size_t iconv(iconv_t __cd, char **__restrict __inbuf,
 1331|       |                    size_t *__restrict __inbytesleft,
 1332|       |                    char **__restrict __outbuf,
 1333|       |                    size_t *__restrict __outbytesleft);
 1334|       |static int initialized;
 1335|       |static int is_utf8;
 1336|       |static iconv_t utf8_to_local;
 1337|       |extern __attribute__((__nothrow__)) struct tm *(__attribute__((__leaf__))
 1338|       |        gmtime)(time_t const *__timer);
 1339|       |extern
 1340|       |__attribute__((__nothrow__)) struct tm *(__attribute__((__leaf__))
 1341|       |        localtime)(time_t const *__timer);
 1342|       |extern __attribute__((__nothrow__)) char *(__attribute__((__leaf__))
 1343|       |        asctime)(struct tm const *__tp);
 1344|       |extern __attribute__((__nothrow__)) char *(__attribute__((__leaf__))
 1345|       |        ctime)(time_t const *__timer);
 1346|       |char *base_name(char const *name);
 1347|       |size_t base_len(char const *name);
 1348|       |int strip_trailing_slashes(char *path);
 1349|       |int strip_trailing_slashes(char *path)
 1350|      2|{
 1351|      2|    char *base;
 1352|      2|    char *tmp;
 1353|      2|    char *base_lim;
 1354|      2|    size_t tmp___0;
 1355|      2|    int had_slash;
 1356|       |
 1357|      2|    {
 1358|      2|        {
 1359|      2|            tmp = base_name((char const *)path);
 1360|      2|            base = tmp;
 1361|      2|            tmp___0 = base_len((char const *)base);
 1362|      2|            base_lim = base + tmp___0;
 1363|      2|            had_slash = (int)*base_lim;
 1364|      2|            *base_lim = (char)'\000';
 1365|      2|        }
 1366|      2|        return (had_slash);
 1367|      2|    }
 1368|      2|}
 1369|       |extern __attribute__((__nothrow__)) int(__attribute__((__leaf__))
 1370|       |                                        tolower)(int __c);
 1371|       |extern __attribute__((__nothrow__)) int(__attribute__((__leaf__))
 1372|       |                                        toupper)(int __c);
 1373|       |extern __attribute__((__nothrow__))
 1374|       |size_t(__attribute__((__leaf__)) strftime)(char *__restrict __s,
 1375|       |        size_t __maxsize,
 1376|       |        char const *__restrict __format,
 1377|       |        struct tm const *__restrict __tp);
 1378|       |extern __attribute__((__nothrow__)) int(__attribute__((__leaf__))
 1379|       |                                        mbsinit)(mbstate_t const *__ps)
 1380|       |__attribute__((__pure__));
 1381|       |extern __attribute__((__nothrow__))
 1382|       |size_t(__attribute__((__leaf__)) mbrlen)(char const *__restrict __s, size_t __n,
 1383|       |        mbstate_t *__restrict __ps);
 1384|       |static mbstate_t const mbstate_zero;
 1385|       |extern __attribute__((__nothrow__)) int(__attribute__((__leaf__))
 1386|       |                                        __libc_current_sigrtmin)(void);
 1387|       |extern __attribute__((__nothrow__)) int(__attribute__((__leaf__))
 1388|       |                                        __libc_current_sigrtmax)(void);
 1389|       |extern __attribute__((__nothrow__)) int(
 1390|       |    __attribute__((__nonnull__(1, 2), __leaf__))
 1391|       |    strncmp)(char const *__s1, char const *__s2, size_t __n)
 1392|       |__attribute__((__pure__));
 1393|       |static struct numname numname_table[35] = {
 1394|       |    {
 1395|       |        1,
 1396|       |        {(char const)'H', (char const)'U', (char const)'P', (char const)'\000'}
 1397|       |    },
 1398|       |    {
 1399|       |        2,
 1400|       |        {(char const)'I', (char const)'N', (char const)'T', (char const)'\000'}
 1401|       |    },
 1402|       |    {
 1403|       |        3,
 1404|       |        {
 1405|       |            (char const)'Q', (char const)'U', (char const)'I', (char const)'T',
 1406|       |            (char const)'\000'
 1407|       |        }
 1408|       |    },
 1409|       |    {
 1410|       |        4,
 1411|       |        {(char const)'I', (char const)'L', (char const)'L', (char const)'\000'}
 1412|       |    },
 1413|       |    {
 1414|       |        5,
 1415|       |        {
 1416|       |            (char const)'T', (char const)'R', (char const)'A', (char const)'P',
 1417|       |            (char const)'\000'
 1418|       |        }
 1419|       |    },
 1420|       |    {
 1421|       |        6,
 1422|       |        {
 1423|       |            (char const)'A', (char const)'B', (char const)'R', (char const)'T',
 1424|       |            (char const)'\000'
 1425|       |        }
 1426|       |    },
 1427|       |    {
 1428|       |        8,
 1429|       |        {(char const)'F', (char const)'P', (char const)'E', (char const)'\000'}
 1430|       |    },
 1431|       |    {
 1432|       |        9,
 1433|       |        {
 1434|       |            (char const)'K', (char const)'I', (char const)'L', (char const)'L',
 1435|       |            (char const)'\000'
 1436|       |        }
 1437|       |    },
 1438|       |    {
 1439|       |        7,
 1440|       |        {(char const)'B', (char const)'U', (char const)'S', (char const)'\000'}
 1441|       |    },
 1442|       |    {
 1443|       |        11,
 1444|       |        {
 1445|       |            (char const)'S', (char const)'E', (char const)'G', (char const)'V',
 1446|       |            (char const)'\000'
 1447|       |        }
 1448|       |    },
 1449|       |    {
 1450|       |        13,
 1451|       |        {
 1452|       |            (char const)'P', (char const)'I', (char const)'P', (char const)'E',
 1453|       |            (char const)'\000'
 1454|       |        }
 1455|       |    },
 1456|       |    {
 1457|       |        14,
 1458|       |        {
 1459|       |            (char const)'A', (char const)'L', (char const)'R', (char const)'M',
 1460|       |            (char const)'\000'
 1461|       |        }
 1462|       |    },
 1463|       |    {
 1464|       |        15,
 1465|       |        {
 1466|       |            (char const)'T', (char const)'E', (char const)'R', (char const)'M',
 1467|       |            (char const)'\000'
 1468|       |        }
 1469|       |    },
 1470|       |    {
 1471|       |        10,
 1472|       |        {
 1473|       |            (char const)'U', (char const)'S', (char const)'R', (char const)'1',
 1474|       |            (char const)'\000'
 1475|       |        }
 1476|       |    },
 1477|       |    {
 1478|       |        12,
 1479|       |        {
 1480|       |            (char const)'U', (char const)'S', (char const)'R', (char const)'2',
 1481|       |            (char const)'\000'
 1482|       |        }
 1483|       |    },
 1484|       |    {
 1485|       |        17,
 1486|       |        {
 1487|       |            (char const)'C', (char const)'H', (char const)'L', (char const)'D',
 1488|       |            (char const)'\000'
 1489|       |        }
 1490|       |    },
 1491|       |    {
 1492|       |        23,
 1493|       |        {(char const)'U', (char const)'R', (char const)'G', (char const)'\000'}
 1494|       |    },
 1495|       |    {
 1496|       |        19,
 1497|       |        {
 1498|       |            (char const)'S', (char const)'T', (char const)'O', (char const)'P',
 1499|       |            (char const)'\000'
 1500|       |        }
 1501|       |    },
 1502|       |    {
 1503|       |        20,
 1504|       |        {
 1505|       |            (char const)'T', (char const)'S', (char const)'T', (char const)'P',
 1506|       |            (char const)'\000'
 1507|       |        }
 1508|       |    },
 1509|       |    {
 1510|       |        18,
 1511|       |        {
 1512|       |            (char const)'C', (char const)'O', (char const)'N', (char const)'T',
 1513|       |            (char const)'\000'
 1514|       |        }
 1515|       |    },
 1516|       |    {
 1517|       |        21,
 1518|       |        {
 1519|       |            (char const)'T', (char const)'T', (char const)'I', (char const)'N',
 1520|       |            (char const)'\000'
 1521|       |        }
 1522|       |    },
 1523|       |    {
 1524|       |        22,
 1525|       |        {
 1526|       |            (char const)'T', (char const)'T', (char const)'O', (char const)'U',
 1527|       |            (char const)'\000'
 1528|       |        }
 1529|       |    },
 1530|       |    {
 1531|       |        31,
 1532|       |        {(char const)'S', (char const)'Y', (char const)'S', (char const)'\000'}
 1533|       |    },
 1534|       |    {
 1535|       |        29,
 1536|       |        {
 1537|       |            (char const)'P', (char const)'O', (char const)'L', (char const)'L',
 1538|       |            (char const)'\000'
 1539|       |        }
 1540|       |    },
 1541|       |    {
 1542|       |        26,
 1543|       |        {
 1544|       |            (char const)'V', (char const)'T', (char const)'A', (char const)'L',
 1545|       |            (char const)'R', (char const)'M', (char const)'\000'
 1546|       |        }
 1547|       |    },
 1548|       |    {
 1549|       |        27,
 1550|       |        {
 1551|       |            (char const)'P', (char const)'R', (char const)'O', (char const)'F',
 1552|       |            (char const)'\000'
 1553|       |        }
 1554|       |    },
 1555|       |    {
 1556|       |        24,
 1557|       |        {
 1558|       |            (char const)'X', (char const)'C', (char const)'P', (char const)'U',
 1559|       |            (char const)'\000'
 1560|       |        }
 1561|       |    },
 1562|       |    {
 1563|       |        25,
 1564|       |        {
 1565|       |            (char const)'X', (char const)'F', (char const)'S', (char const)'Z',
 1566|       |            (char const)'\000'
 1567|       |        }
 1568|       |    },
 1569|       |    {
 1570|       |        6,
 1571|       |        {(char const)'I', (char const)'O', (char const)'T', (char const)'\000'}
 1572|       |    },
 1573|       |    {
 1574|       |        17,
 1575|       |        {(char const)'C', (char const)'L', (char const)'D', (char const)'\000'}
 1576|       |    },
 1577|       |    {
 1578|       |        30,
 1579|       |        {(char const)'P', (char const)'W', (char const)'R', (char const)'\000'}
 1580|       |    },
 1581|       |    {
 1582|       |        28,
 1583|       |        {
 1584|       |            (char const)'W', (char const)'I', (char const)'N', (char const)'C',
 1585|       |            (char const)'H', (char const)'\000'
 1586|       |        }
 1587|       |    },
 1588|       |    {29, {(char const)'I', (char const)'O', (char const)'\000'}},
 1589|       |    {
 1590|       |        16,
 1591|       |        {
 1592|       |            (char const)'S', (char const)'T', (char const)'K', (char const)'F',
 1593|       |            (char const)'L', (char const)'T', (char const)'\000'
 1594|       |        }
 1595|       |    },
 1596|       |    {
 1597|       |        0,
 1598|       |        {
 1599|       |            (char const)'E', (char const)'X', (char const)'I', (char const)'T',
 1600|       |            (char const)'\000'
 1601|       |        }
 1602|       |    }
 1603|       |};
 1604|       |extern size_t fread_unlocked(void *__restrict __ptr, size_t __size, size_t __n,
 1605|       |                             FILE *__restrict __stream);
 1606|       |extern __attribute__((__nothrow__)) int(__attribute__((__leaf__))
 1607|       |                                        feof_unlocked)(FILE *__stream);
 1608|       |extern __attribute__((__nothrow__)) int(__attribute__((__leaf__))
 1609|       |                                        ferror_unlocked)(FILE *__stream);
 1610|       |static unsigned char const fillbuf[64] = {(unsigned char const)128,
 1611|       |                                          (unsigned char const)0
 1612|       |                                         };
 1613|       |extern
 1614|       |__attribute__((__nothrow__)) int(__attribute__((__leaf__))
 1615|       |                                 settimeofday)(struct timeval const *__tv,
 1616|       |                                         struct timezone const *__tz);
 1617|       |extern
 1618|       |__attribute__((__nothrow__)) int(__attribute__((__leaf__)) clock_settime)(
 1619|       |    clockid_t __clock_id, struct timespec const *__tp);
 1620|       |extern DIR *(__attribute__((__nonnull__(1))) opendir)(char const *__name);
 1621|       |extern int(__attribute__((__nonnull__(1))) closedir)(DIR *__dirp);
 1622|       |extern struct dirent *(__attribute__((__nonnull__(1))) readdir)(DIR *__dirp);
 1623|       |extern int close(int __fd);
 1624|       |extern
 1625|       |__attribute__((__nothrow__)) int(__attribute__((__nonnull__(1), __leaf__))
 1626|       |                                 chdir)(char const *__path);
 1627|       |extern __attribute__((__nothrow__)) int(__attribute__((__leaf__))
 1628|       |                                        fchdir)(int __fd);
 1629|       |extern int(__attribute__((__nonnull__(1))) open)(char const *__file,
 1630|       |        int __oflag, ...);
 1631|       |int save_cwd(struct saved_cwd *cwd);
 1632|       |int restore_cwd(struct saved_cwd const *cwd);
 1633|       |void free_cwd(struct saved_cwd *cwd);
 1634|       |static int have_working_fchdir = 1;
 1635|       |int save_cwd(struct saved_cwd *cwd)
 1636|      2|{
 1637|       |
 1638|      2|    {
 1639|      2|        cwd->desc = -1;
 1640|      2|        cwd->name = (char *)((void *)0);
 1641|      2|        if (have_working_fchdir) {
 1642|      2|            {
 1643|      2|                cwd->desc = open(".", 65536);
 1644|      2|            }
 1645|      2|            if (cwd->desc < 0) {
 1646|      0|                return (1);
 1647|      0|            }
 1648|      2|        }
 1649|      2|        if (!have_working_fchdir) {
 1650|      0|            {
 1651|      0|                cwd->name = xgetcwd();
 1652|      0|            }
 1653|      0|            if ((unsigned long)cwd->name == (unsigned long)((void *)0)) {
 1654|      0|                return (1);
 1655|      0|            }
 1656|      0|        }
 1657|      2|        return (0);
 1658|      2|    }
 1659|      2|}
 1660|       |int restore_cwd(struct saved_cwd const *cwd)
 1661|      2|{
 1662|      2|    int tmp;
 1663|      2|    int tmp___0;
 1664|       |
 1665|      2|    {
 1666|      2|        if (0 <= (int)cwd->desc) {
 1667|      2|            {
 1668|      2|                tmp = fchdir((int)cwd->desc);
 1669|      2|            }
 1670|      2|            return (tmp < 0);
 1671|      2|        }
 1672|      0|        else {
 1673|      0|            {
 1674|      0|                tmp___0 = chdir((char const *)cwd->name);
 1675|      0|            }
 1676|      0|            return (tmp___0 < 0);
 1677|      0|        }
 1678|      2|    }
 1679|      2|}
 1680|       |void free_cwd(struct saved_cwd *cwd)
 1681|      2|{
 1682|       |
 1683|      2|    {
 1684|      2|        if (cwd->desc >= 0) {
 1685|      2|            {
 1686|      2|                close(cwd->desc);
 1687|      2|            }
 1688|      2|        }
 1689|      2|        if (cwd->name) {
 1690|      0|            {
 1691|      0|                rpl_free((void *)cwd->name);
 1692|      0|            }
 1693|      0|        }
 1694|      2|        return;
 1695|      2|    }
 1696|      2|}
 1697|       |extern __attribute__((__nothrow__)) int(
 1698|       |    __attribute__((__nonnull__(1, 2), __leaf__))
 1699|       |    stat)(char const *__restrict __file, struct stat *__restrict __buf);
 1700|       |extern __attribute__((__nothrow__)) int(
 1701|       |    __attribute__((__nonnull__(1, 2), __leaf__))
 1702|       |    memcmp)(void const *__s1, void const *__s2, size_t __n)
 1703|       |__attribute__((__pure__));
 1704|       |int same_name(char const *source, char const *dest);
 1705|       |char *dir_name(char const *path);
 1706|       |int same_name(char const *source, char const *dest)
 1707|      0|{
 1708|      0|    char const *source_basename;
 1709|      0|    char *tmp;
 1710|      0|    char const *dest_basename;
 1711|      0|    char *tmp___0;
 1712|      0|    size_t source_baselen;
 1713|      0|    size_t tmp___1;
 1714|      0|    size_t dest_baselen;
 1715|      0|    size_t tmp___2;
 1716|      0|    _Bool identical_basenames;
 1717|      0|    int tmp___3;
 1718|      0|    int tmp___4;
 1719|      0|    _Bool compare_dirs;
 1720|      0|    _Bool same;
 1721|      0|    struct stat source_dir_stats;
 1722|      0|    struct stat dest_dir_stats;
 1723|      0|    char *source_dirname;
 1724|      0|    char *dest_dirname;
 1725|      0|    int *tmp___5;
 1726|      0|    int tmp___6;
 1727|      0|    int *tmp___7;
 1728|      0|    int tmp___8;
 1729|      0|    int tmp___9;
 1730|      0|    void *__cil_tmp25;
 1731|      0|    void *__cil_tmp26;
 1732|       |
 1733|      0|    {
 1734|      0|        {
 1735|      0|            tmp = base_name(source);
 1736|      0|            source_basename = (char const *)tmp;
 1737|      0|            tmp___0 = base_name(dest);
 1738|      0|            dest_basename = (char const *)tmp___0;
 1739|      0|            tmp___1 = base_len(source_basename);
 1740|      0|            source_baselen = tmp___1;
 1741|      0|            tmp___2 = base_len(dest_basename);
 1742|      0|            dest_baselen = tmp___2;
 1743|      0|        }
 1744|      0|        if (source_baselen == dest_baselen) {
 1745|      0|            {
 1746|      0|                tmp___3 = memcmp((void const *)source_basename,
 1747|      0|                                 (void const *)dest_basename, dest_baselen);
 1748|      0|            }
 1749|      0|            if (tmp___3 == 0) {
 1750|      0|                tmp___4 = 1;
 1751|      0|            }
 1752|      0|            else {
 1753|      0|                tmp___4 = 0;
 1754|      0|            }
 1755|      0|        }
 1756|      0|        else {
 1757|      0|            tmp___4 = 0;
 1758|      0|        }
 1759|      0|        identical_basenames = (_Bool)tmp___4;
 1760|      0|        compare_dirs = identical_basenames;
 1761|      0|        same = (_Bool)0;
 1762|      0|        if (compare_dirs) {
 1763|      0|            {
 1764|      0|                source_dirname = dir_name(source);
 1765|      0|                dest_dirname = dir_name(dest);
 1766|      0|                tmp___6 =
 1767|      0|                    stat((char const * /* __restrict  */)((char const *)source_dirname),
 1768|      0|                         (struct stat * /* __restrict  */)(&source_dir_stats));
 1769|      0|            }
 1770|      0|            if (tmp___6) {
 1771|      0|                {
 1772|      0|                    tmp___5 = __errno_location();
 1773|      0|                    error(1, *tmp___5, "%s", source_dirname);
 1774|      0|                }
 1775|      0|            }
 1776|      0|            {
 1777|      0|                tmp___8 =
 1778|      0|                    stat((char const * /* __restrict  */)((char const *)dest_dirname),
 1779|      0|                         (struct stat * /* __restrict  */)(&dest_dir_stats));
 1780|      0|            }
 1781|      0|            if (tmp___8) {
 1782|      0|                {
 1783|      0|                    tmp___7 = __errno_location();
 1784|      0|                    error(1, *tmp___7, "%s", dest_dirname);
 1785|      0|                }
 1786|      0|            }
 1787|      0|            if (source_dir_stats.st_ino == dest_dir_stats.st_ino) {
 1788|      0|                if (source_dir_stats.st_dev == dest_dir_stats.st_dev) {
 1789|      0|                    tmp___9 = 1;
 1790|      0|                }
 1791|      0|                else {
 1792|      0|                    tmp___9 = 0;
 1793|      0|                }
 1794|      0|            }
 1795|      0|            else {
 1796|      0|                tmp___9 = 0;
 1797|      0|            }
 1798|      0|            {
 1799|      0|                same = (_Bool)tmp___9;
 1800|      0|                rpl_free((void *)source_dirname);
 1801|      0|                rpl_free((void *)dest_dirname);
 1802|      0|            }
 1803|      0|        }
 1804|      0|        return ((int)same);
 1805|      0|    }
 1806|      0|}
 1807|       |extern ssize_t write(int __fd, void const *__buf, size_t __n);
 1808|       |extern ssize_t read(int __fd, void *__buf, size_t __nbytes);
 1809|       |extern __attribute__((__nothrow__)) int(
 1810|       |    __attribute__((__nonnull__(1, 2), __leaf__))
 1811|       |    lstat)(char const *__restrict __file, struct stat *__restrict __buf);
 1812|       |extern __attribute__((__nothrow__)) char *(
 1813|       |    __attribute__((__nonnull__(1, 2), __leaf__))
 1814|       |    strncpy)(char *__restrict __dest, char const *__restrict __src, size_t __n);
 1815|       |extern void setutxent(void);
 1816|       |extern void endutxent(void);
 1817|       |extern struct utmpx *getutxent(void);
 1818|       |extern int utmpxname(char const *__file);
 1819|       |extern int getc_unlocked(FILE *__stream);
 1820|       |static char const *saved_delim = (char const *)((void *)0);
 1821|       |static char isdelim[256];
 1822|       |char const *const quoting_style_args[8];
 1823|       |enum quoting_style const quoting_style_vals[7];
 1824|       |int set_char_quoting(struct quoting_options *o, char c, int i);
 1825|       |size_t quotearg_buffer(char *buffer, size_t buffersize, char const *arg,
 1826|       |                       size_t argsize, struct quoting_options const *o);
 1827|       |char *quotearg_n_style(int n, enum quoting_style s, char const *arg);
 1828|       |char *quotearg_char(char const *arg, char ch);
 1829|       |char *quotearg_colon(char const *arg);
 1830|       |extern __attribute__((__nothrow__))
 1831|       |size_t(__attribute__((__leaf__)) __ctype_get_mb_cur_max)(void);
 1832|       |extern __attribute__((__nothrow__))
 1833|       |size_t(__attribute__((__leaf__))
 1834|       |       mbrtowc)(wchar_t *__restrict __pwc, char const *__restrict __s,
 1835|       |                size_t __n, mbstate_t *__restrict __p);
 1836|       |extern __attribute__((__nothrow__)) int(__attribute__((__leaf__))
 1837|       |                                        iswprint)(wint_t __wc);
 1838|       |char const *const quoting_style_args[8] = {
 1839|       |    (char const * /* const  */) "literal",
 1840|       |    (char const * /* const  */) "shell",
 1841|       |    (char const * /* const  */) "shell-always",
 1842|       |    (char const * /* const  */) "c",
 1843|       |    (char const * /* const  */) "escape",
 1844|       |    (char const * /* const  */) "locale",
 1845|       |    (char const * /* const  */) "clocale",
 1846|       |    (char const * /* const  */)((char const *)0)
 1847|       |};
 1848|       |enum quoting_style const quoting_style_vals[7] = {
 1849|       |    (enum quoting_style const)0, (enum quoting_style const)1,
 1850|       |    (enum quoting_style const)2, (enum quoting_style const)3,
 1851|       |    (enum quoting_style const)4, (enum quoting_style const)5,
 1852|       |    (enum quoting_style const)6
 1853|       |};
 1854|       |static struct quoting_options default_quoting_options;
 1855|       |int set_char_quoting(struct quoting_options *o, char c, int i)
 1856|      0|{
 1857|      0|    unsigned char uc;
 1858|      0|    int *p;
 1859|      0|    struct quoting_options *tmp;
 1860|      0|    int shift;
 1861|      0|    int r;
 1862|       |
 1863|      0|    {
 1864|      0|        uc = (unsigned char)c;
 1865|      0|        if (o) {
 1866|      0|            tmp = o;
 1867|      0|        }
 1868|      0|        else {
 1869|      0|            tmp = &default_quoting_options;
 1870|      0|        }
 1871|      0|        p = tmp->quote_these_too + (unsigned long)uc / (sizeof(int) * 8UL);
 1872|      0|        shift = (int)((unsigned long)uc % (sizeof(int) * 8UL));
 1873|      0|        r = (*p >> shift) & 1;
 1874|      0|        *p ^= ((i & 1) ^ r) << shift;
 1875|      0|        return (r);
 1876|      0|    }
 1877|      0|}
 1878|       |static char const *gettext_quote(char const *msgid, enum quoting_style s)
 1879|      0|{
 1880|      0|    char const *translation;
 1881|      0|    char *tmp;
 1882|      0|    char *__cil_tmp5;
 1883|       |
 1884|      0|    {
 1885|      0|        {
 1886|      0|            tmp = gettext(msgid);
 1887|      0|            translation = (char const *)tmp;
 1888|      0|        }
 1889|      0|        if ((unsigned long)translation == (unsigned long)msgid) {
 1890|      0|            if ((unsigned int)s == 6U) {
 1891|      0|                translation = "\"";
 1892|      0|            }
 1893|      0|        }
 1894|      0|        return (translation);
 1895|      0|    }
 1896|      0|}
 1897|       |static size_t quotearg_buffer_restyled(char *buffer, size_t buffersize,
 1898|       |                                       char const *arg, size_t argsize,
 1899|       |                                       enum quoting_style quoting_style,
 1900|       |                                       struct quoting_options const *o)
 1901|      0|{
 1902|      0|    size_t i;
 1903|      0|    size_t len;
 1904|      0|    char const *quote_string;
 1905|      0|    size_t quote_string_len;
 1906|      0|    int backslash_escapes;
 1907|      0|    int unibyte_locale;
 1908|      0|    size_t tmp;
 1909|      0|    char const *left;
 1910|      0|    char const *tmp___0;
 1911|      0|    char const *right;
 1912|      0|    char const *tmp___1;
 1913|      0|    unsigned char c;
 1914|      0|    unsigned char esc;
 1915|      0|    int tmp___2;
 1916|      0|    size_t m;
 1917|      0|    int printable;
 1918|      0|    unsigned short const **tmp___3;
 1919|      0|    mbstate_t mbstate;
 1920|      0|    wchar_t w;
 1921|      0|    size_t bytes;
 1922|      0|    size_t tmp___4;
 1923|      0|    int tmp___5;
 1924|      0|    int tmp___6;
 1925|      0|    size_t ilim;
 1926|      0|    int tmp___7;
 1927|      0|    size_t tmp___8;
 1928|      0|    void *__cil_tmp33;
 1929|      0|    char *__cil_tmp34;
 1930|      0|    char *__cil_tmp35;
 1931|      0|    char *__cil_tmp36;
 1932|      0|    char *__cil_tmp37;
 1933|       |
 1934|      0|    {
 1935|      0|        {
 1936|      0|            len = (size_t)0;
 1937|      0|            quote_string = (char const *)0;
 1938|      0|            quote_string_len = (size_t)0;
 1939|      0|            backslash_escapes = 0;
 1940|      0|            tmp = __ctype_get_mb_cur_max();
 1941|      0|            unibyte_locale = tmp == 1UL;
 1942|      0|        }
 1943|      0|        if ((unsigned int)quoting_style == 3U) {
 1944|      0|            goto case_3;
 1945|      0|        }
 1946|      0|        if ((unsigned int)quoting_style == 4U) {
 1947|      0|            goto case_4;
 1948|      0|        }
 1949|      0|        if ((unsigned int)quoting_style == 6U) {
 1950|      0|            goto case_6;
 1951|      0|        }
 1952|      0|        if ((unsigned int)quoting_style == 5U) {
 1953|      0|            goto case_6;
 1954|      0|        }
 1955|      0|        if ((unsigned int)quoting_style == 2U) {
 1956|      0|            goto case_2;
 1957|      0|        }
 1958|      0|        goto switch_default;
 1959|      0|case_3 : {
 1960|      0|            while (1) {
 1961|      0|while_continue: /* CIL Label */
 1962|      0|                ;
 1963|       |
 1964|      0|                if (len < buffersize) {
 1965|      0|                    *(buffer + len) = (char)'\"';
 1966|      0|                }
 1967|      0|                len++;
 1968|      0|                goto while_break;
 1969|      0|            }
 1970|      0|while_break___25: /* CIL Label */
 1971|      0|            ;
 1972|      0|        }
 1973|      0|while_break:
 1974|      0|        backslash_escapes = 1;
 1975|      0|        quote_string = "\"";
 1976|      0|        quote_string_len = (size_t)1;
 1977|      0|        goto switch_break;
 1978|      0|case_4:
 1979|      0|        backslash_escapes = 1;
 1980|      0|        goto switch_break;
 1981|      0|case_6 : {
 1982|      0|            tmp___0 = gettext_quote("`", quoting_style);
 1983|      0|            left = tmp___0;
 1984|      0|            tmp___1 = gettext_quote("\'", quoting_style);
 1985|      0|            right = tmp___1;
 1986|      0|            quote_string = left;
 1987|      0|        }
 1988|      0|        {
 1989|      0|            while (1) {
 1990|      0|while_continue___0: /* CIL Label */
 1991|      0|                ;
 1992|       |
 1993|      0|                if (!*quote_string) {
 1994|      0|                    goto while_break___0;
 1995|      0|                }
 1996|      0|                {
 1997|      0|                    while (1) {
 1998|      0|while_continue___1: /* CIL Label */
 1999|      0|                        ;
 2000|       |
 2001|      0|                        if (len < buffersize) {
 2002|      0|                            *(buffer + len) = (char)*quote_string;
 2003|      0|                        }
 2004|      0|                        len++;
 2005|      0|                        goto while_break___1;
 2006|      0|                    }
 2007|      0|while_break___27: /* CIL Label */
 2008|      0|                    ;
 2009|      0|                }
 2010|      0|while_break___1:
 2011|      0|                quote_string++;
 2012|      0|            }
 2013|      0|while_break___26: /* CIL Label */
 2014|      0|            ;
 2015|      0|        }
 2016|      0|while_break___0 : {
 2017|      0|            backslash_escapes = 1;
 2018|      0|            quote_string = right;
 2019|      0|            quote_string_len = strlen(quote_string);
 2020|      0|        }
 2021|      0|        goto switch_break;
 2022|      0|case_2 : {
 2023|      0|            while (1) {
 2024|      0|while_continue___2: /* CIL Label */
 2025|      0|                ;
 2026|       |
 2027|      0|                if (len < buffersize) {
 2028|      0|                    *(buffer + len) = (char)'\'';
 2029|      0|                }
 2030|      0|                len++;
 2031|      0|                goto while_break___2;
 2032|      0|            }
 2033|      0|while_break___28: /* CIL Label */
 2034|      0|            ;
 2035|      0|        }
 2036|      0|while_break___2:
 2037|      0|        quote_string = "\'";
 2038|      0|        quote_string_len = (size_t)1;
 2039|      0|        goto switch_break;
 2040|      0|switch_default:
 2041|      0|        goto switch_break;
 2042|      0|switch_break:
 2043|      0|        i = (size_t)0;
 2044|      0|        {
 2045|      0|            while (1) {
 2046|      0|while_continue___3: /* CIL Label */
 2047|      0|                ;
 2048|       |
 2049|      0|                if (argsize == 0xffffffffffffffffUL) {
 2050|      0|                    tmp___7 = (int const) * (arg + i) == 0;
 2051|      0|                }
 2052|      0|                else {
 2053|      0|                    tmp___7 = i == argsize;
 2054|      0|                }
 2055|      0|                if (tmp___7) {
 2056|      0|                    goto while_break___3;
 2057|      0|                }
 2058|      0|                if (backslash_escapes) {
 2059|      0|                    if (quote_string_len) {
 2060|      0|                        if (i + quote_string_len <= argsize) {
 2061|      0|                            {
 2062|      0|                                tmp___2 = memcmp((void const *)(arg + i),
 2063|      0|                                                 (void const *)quote_string, quote_string_len);
 2064|      0|                            }
 2065|      0|                            if (tmp___2 == 0) {
 2066|      0|                                {
 2067|      0|                                    while (1) {
 2068|      0|while_continue___4: /* CIL Label */
 2069|      0|                                        ;
 2070|       |
 2071|      0|                                        if (len < buffersize) {
 2072|      0|                                            *(buffer + len) = (char)'\\';
 2073|      0|                                        }
 2074|      0|                                        len++;
 2075|      0|                                        goto while_break___4;
 2076|      0|                                    }
 2077|      0|while_break___30: /* CIL Label */
 2078|      0|                                    ;
 2079|      0|                                }
 2080|      0|while_break___4:
 2081|      0|                                ;
 2082|      0|                            }
 2083|      0|                        }
 2084|      0|                    }
 2085|      0|                }
 2086|      0|                c = (unsigned char)*(arg + i);
 2087|      0|                if ((int)c == 0) {
 2088|      0|                    goto case_0;
 2089|      0|                }
 2090|      0|                if ((int)c == 63) {
 2091|      0|                    goto case_63;
 2092|      0|                }
 2093|      0|                if ((int)c == 7) {
 2094|      0|                    goto case_7;
 2095|      0|                }
 2096|      0|                if ((int)c == 8) {
 2097|      0|                    goto case_8;
 2098|      0|                }
 2099|      0|                if ((int)c == 12) {
 2100|      0|                    goto case_12;
 2101|      0|                }
 2102|      0|                if ((int)c == 10) {
 2103|      0|                    goto case_10;
 2104|      0|                }
 2105|      0|                if ((int)c == 13) {
 2106|      0|                    goto case_13;
 2107|      0|                }
 2108|      0|                if ((int)c == 9) {
 2109|      0|                    goto case_9;
 2110|      0|                }
 2111|      0|                if ((int)c == 11) {
 2112|      0|                    goto case_11;
 2113|      0|                }
 2114|      0|                if ((int)c == 92) {
 2115|      0|                    goto case_92;
 2116|      0|                }
 2117|      0|                if ((int)c == 126) {
 2118|      0|                    goto case_126;
 2119|      0|                }
 2120|      0|                if ((int)c == 35) {
 2121|      0|                    goto case_126;
 2122|      0|                }
 2123|      0|                if ((int)c == 124) {
 2124|      0|                    goto case_124;
 2125|      0|                }
 2126|      0|                if ((int)c == 96) {
 2127|      0|                    goto case_124;
 2128|      0|                }
 2129|      0|                if ((int)c == 94) {
 2130|      0|                    goto case_124;
 2131|      0|                }
 2132|      0|                if ((int)c == 91) {
 2133|      0|                    goto case_124;
 2134|      0|                }
 2135|      0|                if ((int)c == 62) {
 2136|      0|                    goto case_124;
 2137|      0|                }
 2138|      0|                if ((int)c == 60) {
 2139|      0|                    goto case_124;
 2140|      0|                }
 2141|      0|                if ((int)c == 59) {
 2142|      0|                    goto case_124;
 2143|      0|                }
 2144|      0|                if ((int)c == 42) {
 2145|      0|                    goto case_124;
 2146|      0|                }
 2147|      0|                if ((int)c == 41) {
 2148|      0|                    goto case_124;
 2149|      0|                }
 2150|      0|                if ((int)c == 40) {
 2151|      0|                    goto case_124;
 2152|      0|                }
 2153|      0|                if ((int)c == 38) {
 2154|      0|                    goto case_124;
 2155|      0|                }
 2156|      0|                if ((int)c == 36) {
 2157|      0|                    goto case_124;
 2158|      0|                }
 2159|      0|                if ((int)c == 34) {
 2160|      0|                    goto case_124;
 2161|      0|                }
 2162|      0|                if ((int)c == 33) {
 2163|      0|                    goto case_124;
 2164|      0|                }
 2165|      0|                if ((int)c == 32) {
 2166|      0|                    goto case_124;
 2167|      0|                }
 2168|      0|                if ((int)c == 39) {
 2169|      0|                    goto case_39___0;
 2170|      0|                }
 2171|      0|                if ((int)c == 125) {
 2172|      0|                    goto case_125;
 2173|      0|                }
 2174|      0|                if ((int)c == 123) {
 2175|      0|                    goto case_125;
 2176|      0|                }
 2177|      0|                if ((int)c == 122) {
 2178|      0|                    goto case_125;
 2179|      0|                }
 2180|      0|                if ((int)c == 121) {
 2181|      0|                    goto case_125;
 2182|      0|                }
 2183|      0|                if ((int)c == 120) {
 2184|      0|                    goto case_125;
 2185|      0|                }
 2186|      0|                if ((int)c == 119) {
 2187|      0|                    goto case_125;
 2188|      0|                }
 2189|      0|                if ((int)c == 118) {
 2190|      0|                    goto case_125;
 2191|      0|                }
 2192|      0|                if ((int)c == 117) {
 2193|      0|                    goto case_125;
 2194|      0|                }
 2195|      0|                if ((int)c == 116) {
 2196|      0|                    goto case_125;
 2197|      0|                }
 2198|      0|                if ((int)c == 115) {
 2199|      0|                    goto case_125;
 2200|      0|                }
 2201|      0|                if ((int)c == 114) {
 2202|      0|                    goto case_125;
 2203|      0|                }
 2204|      0|                if ((int)c == 113) {
 2205|      0|                    goto case_125;
 2206|      0|                }
 2207|      0|                if ((int)c == 112) {
 2208|      0|                    goto case_125;
 2209|      0|                }
 2210|      0|                if ((int)c == 111) {
 2211|      0|                    goto case_125;
 2212|      0|                }
 2213|      0|                if ((int)c == 110) {
 2214|      0|                    goto case_125;
 2215|      0|                }
 2216|      0|                if ((int)c == 109) {
 2217|      0|                    goto case_125;
 2218|      0|                }
 2219|      0|                if ((int)c == 108) {
 2220|      0|                    goto case_125;
 2221|      0|                }
 2222|      0|                if ((int)c == 107) {
 2223|      0|                    goto case_125;
 2224|      0|                }
 2225|      0|                if ((int)c == 106) {
 2226|      0|                    goto case_125;
 2227|      0|                }
 2228|      0|                if ((int)c == 105) {
 2229|      0|                    goto case_125;
 2230|      0|                }
 2231|      0|                if ((int)c == 104) {
 2232|      0|                    goto case_125;
 2233|      0|                }
 2234|      0|                if ((int)c == 103) {
 2235|      0|                    goto case_125;
 2236|      0|                }
 2237|      0|                if ((int)c == 102) {
 2238|      0|                    goto case_125;
 2239|      0|                }
 2240|      0|                if ((int)c == 101) {
 2241|      0|                    goto case_125;
 2242|      0|                }
 2243|      0|                if ((int)c == 100) {
 2244|      0|                    goto case_125;
 2245|      0|                }
 2246|      0|                if ((int)c == 99) {
 2247|      0|                    goto case_125;
 2248|      0|                }
 2249|      0|                if ((int)c == 98) {
 2250|      0|                    goto case_125;
 2251|      0|                }
 2252|      0|                if ((int)c == 97) {
 2253|      0|                    goto case_125;
 2254|      0|                }
 2255|      0|                if ((int)c == 95) {
 2256|      0|                    goto case_125;
 2257|      0|                }
 2258|      0|                if ((int)c == 93) {
 2259|      0|                    goto case_125;
 2260|      0|                }
 2261|      0|                if ((int)c == 90) {
 2262|      0|                    goto case_125;
 2263|      0|                }
 2264|      0|                if ((int)c == 89) {
 2265|      0|                    goto case_125;
 2266|      0|                }
 2267|      0|                if ((int)c == 88) {
 2268|      0|                    goto case_125;
 2269|      0|                }
 2270|      0|                if ((int)c == 87) {
 2271|      0|                    goto case_125;
 2272|      0|                }
 2273|      0|                if ((int)c == 86) {
 2274|      0|                    goto case_125;
 2275|      0|                }
 2276|      0|                if ((int)c == 85) {
 2277|      0|                    goto case_125;
 2278|      0|                }
 2279|      0|                if ((int)c == 84) {
 2280|      0|                    goto case_125;
 2281|      0|                }
 2282|      0|                if ((int)c == 83) {
 2283|      0|                    goto case_125;
 2284|      0|                }
 2285|      0|                if ((int)c == 82) {
 2286|      0|                    goto case_125;
 2287|      0|                }
 2288|      0|                if ((int)c == 81) {
 2289|      0|                    goto case_125;
 2290|      0|                }
 2291|      0|                if ((int)c == 80) {
 2292|      0|                    goto case_125;
 2293|      0|                }
 2294|      0|                if ((int)c == 79) {
 2295|      0|                    goto case_125;
 2296|      0|                }
 2297|      0|                if ((int)c == 78) {
 2298|      0|                    goto case_125;
 2299|      0|                }
 2300|      0|                if ((int)c == 77) {
 2301|      0|                    goto case_125;
 2302|      0|                }
 2303|      0|                if ((int)c == 76) {
 2304|      0|                    goto case_125;
 2305|      0|                }
 2306|      0|                if ((int)c == 75) {
 2307|      0|                    goto case_125;
 2308|      0|                }
 2309|      0|                if ((int)c == 74) {
 2310|      0|                    goto case_125;
 2311|      0|                }
 2312|      0|                if ((int)c == 73) {
 2313|      0|                    goto case_125;
 2314|      0|                }
 2315|      0|                if ((int)c == 72) {
 2316|      0|                    goto case_125;
 2317|      0|                }
 2318|      0|                if ((int)c == 71) {
 2319|      0|                    goto case_125;
 2320|      0|                }
 2321|      0|                if ((int)c == 70) {
 2322|      0|                    goto case_125;
 2323|      0|                }
 2324|      0|                if ((int)c == 69) {
 2325|      0|                    goto case_125;
 2326|      0|                }
 2327|      0|                if ((int)c == 68) {
 2328|      0|                    goto case_125;
 2329|      0|                }
 2330|      0|                if ((int)c == 67) {
 2331|      0|                    goto case_125;
 2332|      0|                }
 2333|      0|                if ((int)c == 66) {
 2334|      0|                    goto case_125;
 2335|      0|                }
 2336|      0|                if ((int)c == 65) {
 2337|      0|                    goto case_125;
 2338|      0|                }
 2339|      0|                if ((int)c == 61) {
 2340|      0|                    goto case_125;
 2341|      0|                }
 2342|      0|                if ((int)c == 58) {
 2343|      0|                    goto case_125;
 2344|      0|                }
 2345|      0|                if ((int)c == 57) {
 2346|      0|                    goto case_125;
 2347|      0|                }
 2348|      0|                if ((int)c == 56) {
 2349|      0|                    goto case_125;
 2350|      0|                }
 2351|      0|                if ((int)c == 55) {
 2352|      0|                    goto case_125;
 2353|      0|                }
 2354|      0|                if ((int)c == 54) {
 2355|      0|                    goto case_125;
 2356|      0|                }
 2357|      0|                if ((int)c == 53) {
 2358|      0|                    goto case_125;
 2359|      0|                }
 2360|      0|                if ((int)c == 52) {
 2361|      0|                    goto case_125;
 2362|      0|                }
 2363|      0|                if ((int)c == 51) {
 2364|      0|                    goto case_125;
 2365|      0|                }
 2366|      0|                if ((int)c == 50) {
 2367|      0|                    goto case_125;
 2368|      0|                }
 2369|      0|                if ((int)c == 49) {
 2370|      0|                    goto case_125;
 2371|      0|                }
 2372|      0|                if ((int)c == 48) {
 2373|      0|                    goto case_125;
 2374|      0|                }
 2375|      0|                if ((int)c == 47) {
 2376|      0|                    goto case_125;
 2377|      0|                }
 2378|      0|                if ((int)c == 46) {
 2379|      0|                    goto case_125;
 2380|      0|                }
 2381|      0|                if ((int)c == 45) {
 2382|      0|                    goto case_125;
 2383|      0|                }
 2384|      0|                if ((int)c == 44) {
 2385|      0|                    goto case_125;
 2386|      0|                }
 2387|      0|                if ((int)c == 43) {
 2388|      0|                    goto case_125;
 2389|      0|                }
 2390|      0|                if ((int)c == 37) {
 2391|      0|                    goto case_125;
 2392|      0|                }
 2393|      0|                goto switch_default___2;
 2394|      0|case_0:
 2395|      0|                if (backslash_escapes) {
 2396|      0|                    {
 2397|      0|                        while (1) {
 2398|      0|while_continue___5: /* CIL Label */
 2399|      0|                            ;
 2400|       |
 2401|      0|                            if (len < buffersize) {
 2402|      0|                                *(buffer + len) = (char)'\\';
 2403|      0|                            }
 2404|      0|                            len++;
 2405|      0|                            goto while_break___5;
 2406|      0|                        }
 2407|      0|while_break___31: /* CIL Label */
 2408|      0|                        ;
 2409|      0|                    }
 2410|      0|while_break___5:
 2411|      0|                    ;
 2412|      0|                    {
 2413|      0|                        while (1) {
 2414|      0|while_continue___6: /* CIL Label */
 2415|      0|                            ;
 2416|       |
 2417|      0|                            if (len < buffersize) {
 2418|      0|                                *(buffer + len) = (char)'0';
 2419|      0|                            }
 2420|      0|                            len++;
 2421|      0|                            goto while_break___6;
 2422|      0|                        }
 2423|      0|while_break___32: /* CIL Label */
 2424|      0|                        ;
 2425|      0|                    }
 2426|      0|while_break___6:
 2427|      0|                    ;
 2428|      0|                    {
 2429|      0|                        while (1) {
 2430|      0|while_continue___7: /* CIL Label */
 2431|      0|                            ;
 2432|       |
 2433|      0|                            if (len < buffersize) {
 2434|      0|                                *(buffer + len) = (char)'0';
 2435|      0|                            }
 2436|      0|                            len++;
 2437|      0|                            goto while_break___7;
 2438|      0|                        }
 2439|      0|while_break___33: /* CIL Label */
 2440|      0|                        ;
 2441|      0|                    }
 2442|      0|while_break___7:
 2443|      0|                    c = (unsigned char)'0';
 2444|      0|                }
 2445|      0|                goto switch_break___0;
 2446|      0|case_63:
 2447|      0|                if ((unsigned int)quoting_style == 1U) {
 2448|      0|                    goto case_1;
 2449|      0|                }
 2450|      0|                if ((unsigned int)quoting_style == 3U) {
 2451|      0|                    goto case_3___0;
 2452|      0|                }
 2453|      0|                goto switch_default___0;
 2454|      0|case_1:
 2455|      0|                goto use_shell_always_quoting_style;
 2456|      0|case_3___0:
 2457|      0|                if (i + 2UL < argsize) {
 2458|      0|                    if ((int const) * (arg + (i + 1UL)) == 63) {
 2459|      0|                        if ((int const) * (arg + (i + 2UL)) == 62) {
 2460|      0|                            goto case_62;
 2461|      0|                        }
 2462|      0|                        if ((int const) * (arg + (i + 2UL)) == 61) {
 2463|      0|                            goto case_62;
 2464|      0|                        }
 2465|      0|                        if ((int const) * (arg + (i + 2UL)) == 60) {
 2466|      0|                            goto case_62;
 2467|      0|                        }
 2468|      0|                        if ((int const) * (arg + (i + 2UL)) == 47) {
 2469|      0|                            goto case_62;
 2470|      0|                        }
 2471|      0|                        if ((int const) * (arg + (i + 2UL)) == 45) {
 2472|      0|                            goto case_62;
 2473|      0|                        }
 2474|      0|                        if ((int const) * (arg + (i + 2UL)) == 41) {
 2475|      0|                            goto case_62;
 2476|      0|                        }
 2477|      0|                        if ((int const) * (arg + (i + 2UL)) == 40) {
 2478|      0|                            goto case_62;
 2479|      0|                        }
 2480|      0|                        if ((int const) * (arg + (i + 2UL)) == 39) {
 2481|      0|                            goto case_62;
 2482|      0|                        }
 2483|      0|                        if ((int const) * (arg + (i + 2UL)) == 33) {
 2484|      0|                            goto case_62;
 2485|      0|                        }
 2486|      0|                        goto switch_break___2;
 2487|      0|case_62:
 2488|      0|                        c = (unsigned char)*(arg + (i + 2UL));
 2489|      0|                        i += 2UL;
 2490|      0|                        {
 2491|      0|                            while (1) {
 2492|      0|while_continue___8: /* CIL Label */
 2493|      0|                                ;
 2494|       |
 2495|      0|                                if (len < buffersize) {
 2496|      0|                                    *(buffer + len) = (char)'?';
 2497|      0|                                }
 2498|      0|                                len++;
 2499|      0|                                goto while_break___8;
 2500|      0|                            }
 2501|      0|while_break___34: /* CIL Label */
 2502|      0|                            ;
 2503|      0|                        }
 2504|      0|while_break___8:
 2505|      0|                        ;
 2506|      0|                        {
 2507|      0|                            while (1) {
 2508|      0|while_continue___9: /* CIL Label */
 2509|      0|                                ;
 2510|       |
 2511|      0|                                if (len < buffersize) {
 2512|      0|                                    *(buffer + len) = (char)'\\';
 2513|      0|                                }
 2514|      0|                                len++;
 2515|      0|                                goto while_break___9;
 2516|      0|                            }
 2517|      0|while_break___35: /* CIL Label */
 2518|      0|                            ;
 2519|      0|                        }
 2520|      0|while_break___9:
 2521|      0|                        ;
 2522|      0|                        {
 2523|      0|                            while (1) {
 2524|      0|while_continue___10: /* CIL Label */
 2525|      0|                                ;
 2526|       |
 2527|      0|                                if (len < buffersize) {
 2528|      0|                                    *(buffer + len) = (char)'?';
 2529|      0|                                }
 2530|      0|                                len++;
 2531|      0|                                goto while_break___10;
 2532|      0|                            }
 2533|      0|while_break___36: /* CIL Label */
 2534|      0|                            ;
 2535|      0|                        }
 2536|      0|while_break___10:
 2537|      0|                        ;
 2538|      0|                        goto switch_break___2;
 2539|      0|switch_break___2:
 2540|      0|                        ;
 2541|      0|                    }
 2542|      0|                }
 2543|      0|                goto switch_break___1;
 2544|      0|switch_default___0:
 2545|      0|                goto switch_break___1;
 2546|      0|switch_break___1:
 2547|      0|                ;
 2548|      0|                goto switch_break___0;
 2549|      0|case_7:
 2550|      0|                esc = (unsigned char)'a';
 2551|      0|                goto c_escape;
 2552|      0|case_8:
 2553|      0|                esc = (unsigned char)'b';
 2554|      0|                goto c_escape;
 2555|      0|case_12:
 2556|      0|                esc = (unsigned char)'f';
 2557|      0|                goto c_escape;
 2558|      0|case_10:
 2559|      0|                esc = (unsigned char)'n';
 2560|      0|                goto c_and_shell_escape;
 2561|      0|case_13:
 2562|      0|                esc = (unsigned char)'r';
 2563|      0|                goto c_and_shell_escape;
 2564|      0|case_9:
 2565|      0|                esc = (unsigned char)'t';
 2566|      0|                goto c_and_shell_escape;
 2567|      0|case_11:
 2568|      0|                esc = (unsigned char)'v';
 2569|      0|                goto c_escape;
 2570|      0|case_92:
 2571|      0|                esc = c;
 2572|      0|                goto c_and_shell_escape;
 2573|      0|c_and_shell_escape:
 2574|      0|                if ((unsigned int)quoting_style == 1U) {
 2575|      0|                    goto use_shell_always_quoting_style;
 2576|      0|                }
 2577|      0|c_escape:
 2578|      0|                if (backslash_escapes) {
 2579|      0|                    c = esc;
 2580|      0|                    goto store_escape;
 2581|      0|                }
 2582|      0|                goto switch_break___0;
 2583|      0|case_126:
 2584|      0|                if (i != 0UL) {
 2585|      0|                    goto switch_break___0;
 2586|      0|                }
 2587|      0|case_124:
 2588|      0|                if ((unsigned int)quoting_style == 1U) {
 2589|      0|                    goto use_shell_always_quoting_style;
 2590|      0|                }
 2591|      0|                goto switch_break___0;
 2592|      0|case_39___0:
 2593|      0|                if ((unsigned int)quoting_style == 1U) {
 2594|      0|                    goto case_1___0;
 2595|      0|                }
 2596|      0|                if ((unsigned int)quoting_style == 2U) {
 2597|      0|                    goto case_2___0;
 2598|      0|                }
 2599|      0|                goto switch_default___1;
 2600|      0|case_1___0:
 2601|      0|                goto use_shell_always_quoting_style;
 2602|      0|case_2___0 : {
 2603|      0|                    while (1) {
 2604|      0|while_continue___11: /* CIL Label */
 2605|      0|                        ;
 2606|       |
 2607|      0|                        if (len < buffersize) {
 2608|      0|                            *(buffer + len) = (char)'\'';
 2609|      0|                        }
 2610|      0|                        len++;
 2611|      0|                        goto while_break___11;
 2612|      0|                    }
 2613|      0|while_break___37: /* CIL Label */
 2614|      0|                    ;
 2615|      0|                }
 2616|      0|while_break___11:
 2617|      0|                ;
 2618|      0|                {
 2619|      0|                    while (1) {
 2620|      0|while_continue___12: /* CIL Label */
 2621|      0|                        ;
 2622|       |
 2623|      0|                        if (len < buffersize) {
 2624|      0|                            *(buffer + len) = (char)'\\';
 2625|      0|                        }
 2626|      0|                        len++;
 2627|      0|                        goto while_break___12;
 2628|      0|                    }
 2629|      0|while_break___38: /* CIL Label */
 2630|      0|                    ;
 2631|      0|                }
 2632|      0|while_break___12:
 2633|      0|                ;
 2634|      0|                {
 2635|      0|                    while (1) {
 2636|      0|while_continue___13: /* CIL Label */
 2637|      0|                        ;
 2638|       |
 2639|      0|                        if (len < buffersize) {
 2640|      0|                            *(buffer + len) = (char)'\'';
 2641|      0|                        }
 2642|      0|                        len++;
 2643|      0|                        goto while_break___13;
 2644|      0|                    }
 2645|      0|while_break___39: /* CIL Label */
 2646|      0|                    ;
 2647|      0|                }
 2648|      0|while_break___13:
 2649|      0|                ;
 2650|      0|                goto switch_break___3;
 2651|      0|switch_default___1:
 2652|      0|                goto switch_break___3;
 2653|      0|switch_break___3:
 2654|      0|                ;
 2655|      0|                goto switch_break___0;
 2656|      0|case_125:
 2657|      0|                goto switch_break___0;
 2658|      0|switch_default___2:
 2659|      0|                if (unibyte_locale) {
 2660|      0|                    {
 2661|      0|                        m = (size_t)1;
 2662|      0|                        tmp___3 = __ctype_b_loc();
 2663|      0|                        printable = (int)((int const) * (*tmp___3 + (int)c) & 16384);
 2664|      0|                    }
 2665|      0|                }
 2666|      0|                else {
 2667|      0|                    {
 2668|      0|                        memset((void *)(&mbstate), 0, sizeof(mbstate));
 2669|      0|                        m = (size_t)0;
 2670|      0|                        printable = 1;
 2671|      0|                    }
 2672|      0|                    if (argsize == 0xffffffffffffffffUL) {
 2673|      0|                        {
 2674|      0|                            argsize = strlen(arg);
 2675|      0|                        }
 2676|      0|                    }
 2677|      0|                    {
 2678|      0|                        while (1) {
 2679|      0|while_continue___14: /* CIL Label */
 2680|      0|                            ;
 2681|      0|                            {
 2682|      0|                                tmp___4 =
 2683|      0|                                    mbrtowc((wchar_t * /* __restrict  */)(&w),
 2684|      0|                                            (char const * /* __restrict  */)(arg + (i + m)),
 2685|      0|                                            argsize - (i + m),
 2686|      0|                                            (mbstate_t * /* __restrict  */)(&mbstate));
 2687|      0|                                bytes = tmp___4;
 2688|      0|                            }
 2689|      0|                            if (bytes == 0UL) {
 2690|      0|                                goto while_break___14;
 2691|      0|                            }
 2692|      0|                            else {
 2693|      0|                                if (bytes == 0xffffffffffffffffUL) {
 2694|      0|                                    printable = 0;
 2695|      0|                                    goto while_break___14;
 2696|      0|                                }
 2697|      0|                                else {
 2698|      0|                                    if (bytes == 0xfffffffffffffffeUL) {
 2699|      0|                                        printable = 0;
 2700|      0|                                        {
 2701|      0|                                            while (1) {
 2702|      0|while_continue___15: /* CIL Label */
 2703|      0|                                                ;
 2704|       |
 2705|      0|                                                if (i + m < argsize) {
 2706|      0|                                                    if (!*(arg + (i + m))) {
 2707|      0|                                                        goto while_break___15;
 2708|      0|                                                    }
 2709|      0|                                                }
 2710|      0|                                                else {
 2711|      0|                                                    goto while_break___15;
 2712|      0|                                                }
 2713|      0|                                                m++;
 2714|      0|                                            }
 2715|      0|while_break___41: /* CIL Label */
 2716|      0|                                            ;
 2717|      0|                                        }
 2718|      0|while_break___15:
 2719|      0|                                        ;
 2720|      0|                                        goto while_break___14;
 2721|      0|                                    }
 2722|      0|                                    else {
 2723|      0|                                        {
 2724|      0|                                            tmp___5 = iswprint((wint_t)w);
 2725|      0|                                        }
 2726|      0|                                        if (!tmp___5) {
 2727|      0|                                            printable = 0;
 2728|      0|                                        }
 2729|      0|                                        m += bytes;
 2730|      0|                                    }
 2731|      0|                                }
 2732|      0|                            }
 2733|      0|                            {
 2734|      0|                                tmp___6 = mbsinit((mbstate_t const *)(&mbstate));
 2735|      0|                            }
 2736|      0|                            if (tmp___6) {
 2737|      0|                                goto while_break___14;
 2738|      0|                            }
 2739|      0|                        }
 2740|      0|while_break___40: /* CIL Label */
 2741|      0|                        ;
 2742|      0|                    }
 2743|      0|while_break___14:
 2744|      0|                    ;
 2745|      0|                }
 2746|      0|                if (1UL < m) {
 2747|      0|                    goto _L;
 2748|      0|                }
 2749|      0|                else {
 2750|      0|                    if (backslash_escapes) {
 2751|      0|                        if (!printable) {
 2752|      0|_L:
 2753|      0|                            ilim = i + m;
 2754|      0|                            {
 2755|      0|                                while (1) {
 2756|      0|while_continue___16: /* CIL Label */
 2757|      0|                                    ;
 2758|       |
 2759|      0|                                    if (backslash_escapes) {
 2760|      0|                                        if (!printable) {
 2761|      0|                                            {
 2762|      0|                                                while (1) {
 2763|      0|while_continue___17: /* CIL Label */
 2764|      0|                                                    ;
 2765|       |
 2766|      0|                                                    if (len < buffersize) {
 2767|      0|                                                        *(buffer + len) = (char)'\\';
 2768|      0|                                                    }
 2769|      0|                                                    len++;
 2770|      0|                                                    goto while_break___17;
 2771|      0|                                                }
 2772|      0|while_break___43: /* CIL Label */
 2773|      0|                                                ;
 2774|      0|                                            }
 2775|      0|while_break___17:
 2776|      0|                                            ;
 2777|      0|                                            {
 2778|      0|                                                while (1) {
 2779|      0|while_continue___18: /* CIL Label */
 2780|      0|                                                    ;
 2781|       |
 2782|      0|                                                    if (len < buffersize) {
 2783|      0|                                                        *(buffer + len) = (char)(48 + ((int)c >> 6));
 2784|      0|                                                    }
 2785|      0|                                                    len++;
 2786|      0|                                                    goto while_break___18;
 2787|      0|                                                }
 2788|      0|while_break___44: /* CIL Label */
 2789|      0|                                                ;
 2790|      0|                                            }
 2791|      0|while_break___18:
 2792|      0|                                            ;
 2793|      0|                                            {
 2794|      0|                                                while (1) {
 2795|      0|while_continue___19: /* CIL Label */
 2796|      0|                                                    ;
 2797|       |
 2798|      0|                                                    if (len < buffersize) {
 2799|      0|                                                        *(buffer + len) = (char)(48 + (((int)c >> 3) & 7));
 2800|      0|                                                    }
 2801|      0|                                                    len++;
 2802|      0|                                                    goto while_break___19;
 2803|      0|                                                }
 2804|      0|while_break___45: /* CIL Label */
 2805|      0|                                                ;
 2806|      0|                                            }
 2807|      0|while_break___19:
 2808|      0|                                            c = (unsigned char)(48 + ((int)c & 7));
 2809|      0|                                        }
 2810|      0|                                    }
 2811|      0|                                    if (ilim <= i + 1UL) {
 2812|      0|                                        goto while_break___16;
 2813|      0|                                    }
 2814|      0|                                    {
 2815|      0|                                        while (1) {
 2816|      0|while_continue___20: /* CIL Label */
 2817|      0|                                            ;
 2818|       |
 2819|      0|                                            if (len < buffersize) {
 2820|      0|                                                *(buffer + len) = (char)c;
 2821|      0|                                            }
 2822|      0|                                            len++;
 2823|      0|                                            goto while_break___20;
 2824|      0|                                        }
 2825|      0|while_break___46: /* CIL Label */
 2826|      0|                                        ;
 2827|      0|                                    }
 2828|      0|while_break___20:
 2829|      0|                                    i++;
 2830|      0|                                    c = (unsigned char)*(arg + i);
 2831|      0|                                }
 2832|      0|while_break___42: /* CIL Label */
 2833|      0|                                ;
 2834|      0|                            }
 2835|      0|while_break___16:
 2836|      0|                            ;
 2837|      0|                            goto store_c;
 2838|      0|                        }
 2839|      0|                    }
 2840|      0|                }
 2841|      0|switch_break___0:
 2842|      0|                ;
 2843|      0|                if (backslash_escapes) {
 2844|      0|                    if (!(o->quote_these_too[(unsigned long)c / (sizeof(int) * 8UL)] &
 2845|      0|                            (1 << (unsigned long)c % (sizeof(int) * 8UL)))) {
 2846|      0|                        goto store_c;
 2847|      0|                    }
 2848|      0|                }
 2849|      0|                else {
 2850|      0|                    goto store_c;
 2851|      0|                }
 2852|      0|store_escape : {
 2853|      0|                    while (1) {
 2854|      0|while_continue___21: /* CIL Label */
 2855|      0|                        ;
 2856|       |
 2857|      0|                        if (len < buffersize) {
 2858|      0|                            *(buffer + len) = (char)'\\';
 2859|      0|                        }
 2860|      0|                        len++;
 2861|      0|                        goto while_break___21;
 2862|      0|                    }
 2863|      0|while_break___47: /* CIL Label */
 2864|      0|                    ;
 2865|      0|                }
 2866|      0|while_break___21:
 2867|      0|                ;
 2868|      0|store_c : {
 2869|      0|                    while (1) {
 2870|      0|while_continue___22: /* CIL Label */
 2871|      0|                        ;
 2872|       |
 2873|      0|                        if (len < buffersize) {
 2874|      0|                            *(buffer + len) = (char)c;
 2875|      0|                        }
 2876|      0|                        len++;
 2877|      0|                        goto while_break___22;
 2878|      0|                    }
 2879|      0|while_break___48: /* CIL Label */
 2880|      0|                    ;
 2881|      0|                }
 2882|      0|while_break___22:
 2883|      0|                i++;
 2884|      0|            }
 2885|      0|while_break___29: /* CIL Label */
 2886|      0|            ;
 2887|      0|        }
 2888|      0|while_break___3:
 2889|      0|        ;
 2890|      0|        if (quote_string) {
 2891|      0|            {
 2892|      0|                while (1) {
 2893|      0|while_continue___23: /* CIL Label */
 2894|      0|                    ;
 2895|       |
 2896|      0|                    if (!*quote_string) {
 2897|      0|                        goto while_break___23;
 2898|      0|                    }
 2899|      0|                    {
 2900|      0|                        while (1) {
 2901|      0|while_continue___24: /* CIL Label */
 2902|      0|                            ;
 2903|       |
 2904|      0|                            if (len < buffersize) {
 2905|      0|                                *(buffer + len) = (char)*quote_string;
 2906|      0|                            }
 2907|      0|                            len++;
 2908|      0|                            goto while_break___24;
 2909|      0|                        }
 2910|      0|while_break___50: /* CIL Label */
 2911|      0|                        ;
 2912|      0|                    }
 2913|      0|while_break___24:
 2914|      0|                    quote_string++;
 2915|      0|                }
 2916|      0|while_break___49: /* CIL Label */
 2917|      0|                ;
 2918|      0|            }
 2919|      0|while_break___23:
 2920|      0|            ;
 2921|      0|        }
 2922|      0|        if (len < buffersize) {
 2923|      0|            *(buffer + len) = (char)'\000';
 2924|      0|        }
 2925|      0|        return (len);
 2926|      0|use_shell_always_quoting_style : {
 2927|      0|            tmp___8 = quotearg_buffer_restyled(buffer, buffersize, arg, argsize,
 2928|      0|                                               (enum quoting_style)2, o);
 2929|      0|        }
 2930|      0|        return (tmp___8);
 2931|      0|    }
 2932|      0|}
 2933|       |size_t quotearg_buffer(char *buffer, size_t buffersize, char const *arg,
 2934|       |                       size_t argsize, struct quoting_options const *o)
 2935|      0|{
 2936|      0|    struct quoting_options const *p;
 2937|      0|    struct quoting_options const *tmp;
 2938|      0|    int e;
 2939|      0|    int *tmp___0;
 2940|      0|    size_t r;
 2941|      0|    size_t tmp___1;
 2942|      0|    int *tmp___2;
 2943|       |
 2944|      0|    {
 2945|      0|        if (o) {
 2946|      0|            tmp = o;
 2947|      0|        }
 2948|      0|        else {
 2949|      0|            tmp = (struct quoting_options const *)(&default_quoting_options);
 2950|      0|        }
 2951|      0|        {
 2952|      0|            p = tmp;
 2953|      0|            tmp___0 = __errno_location();
 2954|      0|            e = *tmp___0;
 2955|      0|            tmp___1 = quotearg_buffer_restyled(buffer, buffersize, arg, argsize,
 2956|      0|                                               (enum quoting_style)p->style, p);
 2957|      0|            r = tmp___1;
 2958|      0|            tmp___2 = __errno_location();
 2959|      0|            *tmp___2 = e;
 2960|      0|        }
 2961|      0|        return (r);
 2962|      0|    }
 2963|      0|}
 2964|       |static char slot0[256];
 2965|       |static char *quotearg_n_options(int n, char const *arg, size_t argsize,
 2966|       |                                struct quoting_options const *options);
 2967|       |static unsigned int nslots = 1U;
 2968|       |static struct slotvec slotvec0 = {sizeof(slot0), slot0};
 2969|       |static struct slotvec *slotvec = &slotvec0;
 2970|       |static char *quotearg_n_options(int n, char const *arg, size_t argsize,
 2971|       |                                struct quoting_options const *options)
 2972|      0|{
 2973|      0|    int e;
 2974|      0|    int *tmp;
 2975|      0|    unsigned int n0;
 2976|      0|    unsigned int n1;
 2977|      0|    int tmp___0;
 2978|      0|    void *tmp___1;
 2979|      0|    void *tmp___2;
 2980|      0|    size_t size;
 2981|      0|    char *val;
 2982|      0|    size_t qsize;
 2983|      0|    size_t tmp___3;
 2984|      0|    void *tmp___4;
 2985|      0|    int *tmp___5;
 2986|       |
 2987|      0|    {
 2988|      0|        {
 2989|      0|            tmp = __errno_location();
 2990|      0|            e = *tmp;
 2991|      0|            n0 = (unsigned int)n;
 2992|      0|        }
 2993|      0|        if (n < 0) {
 2994|      0|            {
 2995|      0|                abort();
 2996|      0|            }
 2997|      0|        }
 2998|      0|        if (nslots <= n0) {
 2999|      0|            n1 = n0 + 1U;
 3000|      0|            if (sizeof(ptrdiff_t) <= sizeof(size_t)) {
 3001|      0|                tmp___0 = -1;
 3002|      0|            }
 3003|      0|            else {
 3004|      0|                tmp___0 = -2;
 3005|      0|            }
 3006|      0|            if ((size_t)tmp___0 / sizeof(*slotvec) < (size_t)n1) {
 3007|      0|                {
 3008|      0|                    xalloc_die();
 3009|      0|                }
 3010|      0|            }
 3011|      0|            if ((unsigned long)slotvec == (unsigned long)(&slotvec0)) {
 3012|      0|                {
 3013|      0|                    tmp___1 = xmalloc(sizeof(*slotvec));
 3014|      0|                    slotvec = (struct slotvec *)tmp___1;
 3015|      0|                    *slotvec = slotvec0;
 3016|      0|                }
 3017|      0|            }
 3018|      0|            {
 3019|      0|                tmp___2 =
 3020|      0|                    xrealloc((void *)slotvec, (unsigned long)n1 * sizeof(*slotvec));
 3021|      0|                slotvec = (struct slotvec *)tmp___2;
 3022|      0|                memset((void *)(slotvec + nslots), 0,
 3023|      0|                       (unsigned long)(n1 - nslots) * sizeof(*slotvec));
 3024|      0|                nslots = n1;
 3025|      0|            }
 3026|      0|        }
 3027|      0|        {
 3028|      0|            size = (slotvec + n)->size;
 3029|      0|            val = (slotvec + n)->val;
 3030|      0|            tmp___3 = quotearg_buffer(val, size, arg, argsize, options);
 3031|      0|            qsize = tmp___3;
 3032|      0|        }
 3033|      0|        if (size <= qsize) {
 3034|      0|            size = qsize + 1UL;
 3035|      0|            (slotvec + n)->size = size;
 3036|      0|            if ((unsigned long)val != (unsigned long)(slot0)) {
 3037|      0|                {
 3038|      0|                    rpl_free((void *)val);
 3039|      0|                }
 3040|      0|            }
 3041|      0|            {
 3042|      0|                tmp___4 = xmalloc(size);
 3043|      0|                val = (char *)tmp___4;
 3044|      0|                (slotvec + n)->val = val;
 3045|      0|                quotearg_buffer(val, size, arg, argsize, options);
 3046|      0|            }
 3047|      0|        }
 3048|      0|        {
 3049|      0|            tmp___5 = __errno_location();
 3050|      0|            *tmp___5 = e;
 3051|      0|        }
 3052|      0|        return (val);
 3053|      0|    }
 3054|      0|}
 3055|       |static struct quoting_options
 3056|       |quoting_options_from_style(enum quoting_style style)
 3057|      0|{
 3058|      0|    struct quoting_options o;
 3059|      0|    void *__cil_tmp3;
 3060|       |
 3061|      0|    {
 3062|      0|        {
 3063|      0|            o.style = style;
 3064|      0|            memset((void *)(o.quote_these_too), 0, sizeof(o.quote_these_too));
 3065|      0|        }
 3066|      0|        return (o);
 3067|      0|    }
 3068|      0|}
 3069|       |char *quotearg_n_style(int n, enum quoting_style s, char const *arg)
 3070|      0|{
 3071|      0|    struct quoting_options o;
 3072|      0|    struct quoting_options tmp;
 3073|      0|    char *tmp___0;
 3074|      0|    void *__cil_tmp7;
 3075|      0|    void *__cil_tmp8;
 3076|       |
 3077|      0|    {
 3078|      0|        {
 3079|      0|            tmp = quoting_options_from_style(s);
 3080|      0|            o = tmp;
 3081|      0|            tmp___0 = quotearg_n_options(n, arg, (size_t)-1,
 3082|      0|                                         (struct quoting_options const *)(&o));
 3083|      0|        }
 3084|      0|        return (tmp___0);
 3085|      0|    }
 3086|      0|}
 3087|       |char *quotearg_char(char const *arg, char ch)
 3088|      0|{
 3089|      0|    struct quoting_options options;
 3090|      0|    char *tmp;
 3091|      0|    void *__cil_tmp5;
 3092|       |
 3093|      0|    {
 3094|      0|        {
 3095|      0|            options = default_quoting_options;
 3096|      0|            set_char_quoting(&options, ch, 1);
 3097|      0|            tmp = quotearg_n_options(0, arg, (size_t)-1,
 3098|      0|                                     (struct quoting_options const *)(&options));
 3099|      0|        }
 3100|      0|        return (tmp);
 3101|      0|    }
 3102|      0|}
 3103|       |char *quotearg_colon(char const *arg)
 3104|      0|{
 3105|      0|    char *tmp;
 3106|       |
 3107|      0|    {
 3108|      0|        {
 3109|      0|            tmp = quotearg_char(arg, (char)':');
 3110|      0|        }
 3111|      0|        return (tmp);
 3112|      0|    }
 3113|      0|}
 3114|       |char const *quote_n(int n, char const *name);
 3115|       |char const *quote_n(int n, char const *name)
 3116|      0|{
 3117|      0|    char *tmp;
 3118|       |
 3119|      0|    {
 3120|      0|        {
 3121|      0|            tmp = quotearg_n_style(n, (enum quoting_style)5, name);
 3122|      0|        }
 3123|      0|        return ((char const *)tmp);
 3124|      0|    }
 3125|      0|}
 3126|       |char const *quote(char const *name)
 3127|      0|{
 3128|      0|    char const *tmp;
 3129|       |
 3130|      0|    {
 3131|      0|        {
 3132|      0|            tmp = quote_n(0, name);
 3133|      0|        }
 3134|      0|        return (tmp);
 3135|      0|    }
 3136|      0|}
 3137|       |extern __attribute__((__nothrow__)) char *(__attribute__((__nonnull__(1),
 3138|       |        __leaf__))
 3139|       |        getenv)(char const *__name);
 3140|       |extern __attribute__((__nothrow__))
 3141|       |time_t(__attribute__((__leaf__)) time)(time_t *__timer);
 3142|       |extern __attribute__((__nothrow__)) long(__attribute__((__leaf__))
 3143|       |        sysconf)(int __name);
 3144|       |extern __attribute__((__nothrow__)) void *(
 3145|       |    __attribute__((__nonnull__(1, 2), __leaf__))
 3146|       |    mempcpy)(void *__restrict __dest, void const *__restrict __src, size_t __n);
 3147|       |extern __attribute__((__nothrow__)) char *(
 3148|       |    __attribute__((__nonnull__(1, 2), __leaf__))
 3149|       |    strstr)(char const *__haystack, char const *__needle)
 3150|       |__attribute__((__pure__));
 3151|       |extern __attribute__((__nothrow__))
 3152|       |FILE *(__attribute__((__leaf__)) setmntent)(char const *__file,
 3153|       |        char const *__mode);
 3154|       |extern __attribute__((__nothrow__)) struct mntent *(__attribute__((__leaf__))
 3155|       |        getmntent)(FILE *__stream);
 3156|       |extern __attribute__((__nothrow__)) int(__attribute__((__leaf__))
 3157|       |                                        endmntent)(FILE *__stream);
 3158|       |struct mode_change *mode_compile(char const *mode_string___0,
 3159|       |                                 unsigned int masked_ops);
 3160|       |mode_t mode_adjust(mode_t oldmode, struct mode_change const *changes);
 3161|       |void mode_free(struct mode_change *changes);
 3162|       |extern __attribute__((__nothrow__))
 3163|       |__mode_t(__attribute__((__leaf__)) umask)(__mode_t __mask);
 3164|       |static struct mode_change *make_node_op_equals(mode_t new_mode)
 3165|      0|{
 3166|      0|    struct mode_change *p;
 3167|      0|    void *tmp;
 3168|       |
 3169|      0|    {
 3170|      0|        {
 3171|      0|            tmp = malloc(sizeof(struct mode_change));
 3172|      0|            p = (struct mode_change *)tmp;
 3173|      0|        }
 3174|      0|        if ((unsigned long)p == (unsigned long)((void *)0)) {
 3175|      0|            return (p);
 3176|      0|        }
 3177|      0|        p->next = (struct mode_change *)((void *)0);
 3178|      0|        p->op = (char)'=';
 3179|      0|        p->flags = (char)0;
 3180|      0|        p->value = new_mode;
 3181|      0|        p->affected = (mode_t)((4032 | (448 >> 3)) | ((448 >> 3) >> 3));
 3182|      0|        return (p);
 3183|      0|    }
 3184|      0|}
 3185|       |static void mode_append_entry(struct mode_change **head,
 3186|       |                              struct mode_change **tail,
 3187|       |                              struct mode_change *e)
 3188|      0|{
 3189|      0|    struct mode_change *tmp;
 3190|       |
 3191|      0|    {
 3192|      0|        if ((unsigned long)*head == (unsigned long)((void *)0)) {
 3193|      0|            tmp = e;
 3194|      0|            *tail = tmp;
 3195|      0|            *head = tmp;
 3196|      0|        }
 3197|      0|        else {
 3198|      0|            (*tail)->next = e;
 3199|      0|            *tail = e;
 3200|      0|        }
 3201|      0|        return;
 3202|      0|    }
 3203|      0|}
 3204|       |struct mode_change *mode_compile(char const *mode_string___0,
 3205|       |                                 unsigned int masked_ops)
 3206|      0|{
 3207|      0|    struct mode_change *head;
 3208|      0|    struct mode_change *tail;
 3209|      0|    unsigned long octal_value;
 3210|      0|    mode_t umask_value;
 3211|      0|    struct mode_change *p;
 3212|      0|    mode_t mode;
 3213|      0|    int tmp;
 3214|      0|    int tmp___0;
 3215|      0|    int tmp___1;
 3216|      0|    int tmp___2;
 3217|      0|    int tmp___3;
 3218|      0|    int tmp___4;
 3219|      0|    int tmp___5;
 3220|      0|    int tmp___6;
 3221|      0|    int tmp___7;
 3222|      0|    int tmp___8;
 3223|      0|    int tmp___9;
 3224|      0|    int tmp___10;
 3225|      0|    strtol_error tmp___11;
 3226|      0|    mode_t affected_bits;
 3227|      0|    mode_t affected_masked;
 3228|      0|    unsigned int ops_to_mask;
 3229|      0|    int who_specified_p;
 3230|      0|    struct mode_change *change;
 3231|      0|    void *tmp___12;
 3232|      0|    struct mode_change *p___0;
 3233|      0|    struct mode_change *tmp___13;
 3234|      0|    int tmp___14;
 3235|      0|    int tmp___15;
 3236|      0|    int tmp___16;
 3237|      0|    char *__cil_tmp33;
 3238|       |
 3239|      0|    {
 3240|      0|        {
 3241|      0|            head = (struct mode_change *)((void *)0);
 3242|      0|            tmp___11 =
 3243|      0|                xstrtoul(mode_string___0, (char **)((void *)0), 8, &octal_value, "");
 3244|      0|        }
 3245|      0|        if ((unsigned int)tmp___11 == 0U) {
 3246|      0|            if (octal_value != (octal_value & 4095UL)) {
 3247|      0|                return ((struct mode_change *)0);
 3248|      0|            }
 3249|      0|            if (256 >> 3 == 32) {
 3250|      0|                if (128 >> 3 == 16) {
 3251|      0|                    if (64 >> 3 == 8) {
 3252|      0|                        if ((256 >> 3) >> 3 == 4) {
 3253|      0|                            if ((128 >> 3) >> 3 == 2) {
 3254|      0|                                if ((64 >> 3) >> 3 == 1) {
 3255|      0|                                    mode = (mode_t)octal_value;
 3256|      0|                                }
 3257|      0|                                else {
 3258|      0|                                    goto _L___3;
 3259|      0|                                }
 3260|      0|                            }
 3261|      0|                            else {
 3262|      0|                                goto _L___3;
 3263|      0|                            }
 3264|      0|                        }
 3265|      0|                        else {
 3266|      0|                            goto _L___3;
 3267|      0|                        }
 3268|      0|                    }
 3269|      0|                    else {
 3270|      0|                        goto _L___3;
 3271|      0|                    }
 3272|      0|                }
 3273|      0|                else {
 3274|      0|                    goto _L___3;
 3275|      0|                }
 3276|      0|            }
 3277|      0|            else {
 3278|      0|_L___3:
 3279|      0|                if (octal_value & 2048UL) {
 3280|      0|                    tmp = 2048;
 3281|      0|                }
 3282|      0|                else {
 3283|      0|                    tmp = 0;
 3284|      0|                }
 3285|      0|                if (octal_value & 1024UL) {
 3286|      0|                    tmp___0 = 1024;
 3287|      0|                }
 3288|      0|                else {
 3289|      0|                    tmp___0 = 0;
 3290|      0|                }
 3291|      0|                if (octal_value & 512UL) {
 3292|      0|                    tmp___1 = 512;
 3293|      0|                }
 3294|      0|                else {
 3295|      0|                    tmp___1 = 0;
 3296|      0|                }
 3297|      0|                if (octal_value & 256UL) {
 3298|      0|                    tmp___2 = 256;
 3299|      0|                }
 3300|      0|                else {
 3301|      0|                    tmp___2 = 0;
 3302|      0|                }
 3303|      0|                if (octal_value & 128UL) {
 3304|      0|                    tmp___3 = 128;
 3305|      0|                }
 3306|      0|                else {
 3307|      0|                    tmp___3 = 0;
 3308|      0|                }
 3309|      0|                if (octal_value & 64UL) {
 3310|      0|                    tmp___4 = 64;
 3311|      0|                }
 3312|      0|                else {
 3313|      0|                    tmp___4 = 0;
 3314|      0|                }
 3315|      0|                if (octal_value & 32UL) {
 3316|      0|                    tmp___5 = 256 >> 3;
 3317|      0|                }
 3318|      0|                else {
 3319|      0|                    tmp___5 = 0;
 3320|      0|                }
 3321|      0|                if (octal_value & 16UL) {
 3322|      0|                    tmp___6 = 128 >> 3;
 3323|      0|                }
 3324|      0|                else {
 3325|      0|                    tmp___6 = 0;
 3326|      0|                }
 3327|      0|                if (octal_value & 8UL) {
 3328|      0|                    tmp___7 = 64 >> 3;
 3329|      0|                }
 3330|      0|                else {
 3331|      0|                    tmp___7 = 0;
 3332|      0|                }
 3333|      0|                if (octal_value & 4UL) {
 3334|      0|                    tmp___8 = (256 >> 3) >> 3;
 3335|      0|                }
 3336|      0|                else {
 3337|      0|                    tmp___8 = 0;
 3338|      0|                }
 3339|      0|                if (octal_value & 2UL) {
 3340|      0|                    tmp___9 = (128 >> 3) >> 3;
 3341|      0|                }
 3342|      0|                else {
 3343|      0|                    tmp___9 = 0;
 3344|      0|                }
 3345|      0|                if (octal_value & 1UL) {
 3346|      0|                    tmp___10 = (64 >> 3) >> 3;
 3347|      0|                }
 3348|      0|                else {
 3349|      0|                    tmp___10 = 0;
 3350|      0|                }
 3351|      0|                mode =
 3352|      0|                    (mode_t)(((((((((((tmp | tmp___0) | tmp___1) | tmp___2) | tmp___3) |
 3353|      0|                                   tmp___4) |
 3354|      0|                                  tmp___5) |
 3355|      0|                                 tmp___6) |
 3356|      0|                                tmp___7) |
 3357|      0|                               tmp___8) |
 3358|      0|                              tmp___9) |
 3359|      0|                             tmp___10);
 3360|      0|            }
 3361|      0|            {
 3362|      0|                p = make_node_op_equals(mode);
 3363|      0|            }
 3364|      0|            if ((unsigned long)p == (unsigned long)((void *)0)) {
 3365|      0|                return ((struct mode_change *)1);
 3366|      0|            }
 3367|      0|            {
 3368|      0|                mode_append_entry(&head, &tail, p);
 3369|      0|            }
 3370|      0|            return (head);
 3371|      0|        }
 3372|      0|        {
 3373|      0|            umask_value = umask((__mode_t)0);
 3374|      0|            umask(umask_value);
 3375|      0|            mode_string___0--;
 3376|      0|        }
 3377|      0|        {
 3378|      0|            while (1) {
 3379|      0|while_continue: /* CIL Label */
 3380|      0|                ;
 3381|      0|                affected_bits = (mode_t)0;
 3382|      0|                ops_to_mask = 0U;
 3383|      0|                affected_bits = (mode_t)0;
 3384|      0|                ops_to_mask = 0U;
 3385|      0|                mode_string___0++;
 3386|      0|                {
 3387|      0|                    while (1) {
 3388|      0|while_continue___0: /* CIL Label */
 3389|      0|                        ;
 3390|       |
 3391|      0|                        if ((int const) * mode_string___0 == 117) {
 3392|      0|                            goto case_117;
 3393|      0|                        }
 3394|      0|                        if ((int const) * mode_string___0 == 103) {
 3395|      0|                            goto case_103;
 3396|      0|                        }
 3397|      0|                        if ((int const) * mode_string___0 == 111) {
 3398|      0|                            goto case_111;
 3399|      0|                        }
 3400|      0|                        if ((int const) * mode_string___0 == 97) {
 3401|      0|                            goto case_97;
 3402|      0|                        }
 3403|      0|                        goto switch_default;
 3404|      0|case_117:
 3405|      0|                        affected_bits |= 2496U;
 3406|      0|                        goto switch_break;
 3407|      0|case_103:
 3408|      0|                        affected_bits |= (unsigned int)(1024 | (448 >> 3));
 3409|      0|                        goto switch_break;
 3410|      0|case_111:
 3411|      0|                        affected_bits |= (unsigned int)(512 | ((448 >> 3) >> 3));
 3412|      0|                        goto switch_break;
 3413|      0|case_97:
 3414|      0|                        affected_bits |=
 3415|      0|                            (unsigned int)((4032 | (448 >> 3)) | ((448 >> 3) >> 3));
 3416|      0|                        goto switch_break;
 3417|      0|switch_default:
 3418|      0|                        goto no_more_affected;
 3419|      0|switch_break:
 3420|      0|                        mode_string___0++;
 3421|      0|                    }
 3422|      0|while_break___3: /* CIL Label */
 3423|      0|                    ;
 3424|      0|                }
 3425|       |
 3426|      0|no_more_affected:
 3427|      0|                if (affected_bits) {
 3428|      0|                    who_specified_p = 1;
 3429|      0|                }
 3430|      0|                else {
 3431|      0|                    who_specified_p = 0;
 3432|      0|                    affected_bits = (mode_t)((4032 | (448 >> 3)) | ((448 >> 3) >> 3));
 3433|      0|                    ops_to_mask = masked_ops;
 3434|      0|                }
 3435|      0|                {
 3436|      0|                    while (1) {
 3437|      0|while_continue___1: /* CIL Label */
 3438|      0|                        ;
 3439|       |
 3440|      0|                        if (!((int const) * mode_string___0 == 61)) {
 3441|      0|                            if (!((int const) * mode_string___0 == 43)) {
 3442|      0|                                if (!((int const) * mode_string___0 == 45)) {
 3443|      0|                                    goto while_break___1;
 3444|      0|                                }
 3445|      0|                            }
 3446|      0|                        }
 3447|      0|                        {
 3448|      0|                            tmp___12 = malloc(sizeof(struct mode_change));
 3449|      0|                            change = (struct mode_change *)tmp___12;
 3450|      0|                        }
 3451|      0|                        if ((unsigned long)change == (unsigned long)((void *)0)) {
 3452|      0|                            {
 3453|      0|                                mode_free(head);
 3454|      0|                            }
 3455|      0|                            return ((struct mode_change *)1);
 3456|      0|                        }
 3457|      0|                        change->next = (struct mode_change *)((void *)0);
 3458|      0|                        change->op = (char)*mode_string___0;
 3459|      0|                        affected_masked = affected_bits;
 3460|      0|                        if (!who_specified_p) {
 3461|      0|                            if ((int const) * mode_string___0 == 61) {
 3462|      0|                                tmp___14 = 1;
 3463|      0|                            }
 3464|      0|                            else {
 3465|      0|                                tmp___14 = 0;
 3466|      0|                            }
 3467|      0|                            if (ops_to_mask & (unsigned int)tmp___14) {
 3468|      0|                                {
 3469|      0|                                    tmp___13 = make_node_op_equals((mode_t)0);
 3470|      0|                                    p___0 = tmp___13;
 3471|      0|                                }
 3472|      0|                                if ((unsigned long)p___0 == (unsigned long)((void *)0)) {
 3473|      0|                                    return ((struct mode_change *)1);
 3474|      0|                                }
 3475|      0|                                {
 3476|      0|                                    mode_append_entry(&head, &tail, p___0);
 3477|      0|                                }
 3478|      0|                            }
 3479|      0|                        }
 3480|      0|                        if ((int const) * mode_string___0 == 61) {
 3481|      0|                            tmp___16 = 1;
 3482|      0|                        }
 3483|      0|                        else {
 3484|      0|                            if ((int const) * mode_string___0 == 43) {
 3485|      0|                                tmp___15 = 2;
 3486|      0|                            }
 3487|      0|                            else {
 3488|      0|                                tmp___15 = 4;
 3489|      0|                            }
 3490|      0|                            tmp___16 = tmp___15;
 3491|      0|                        }
 3492|      0|                        if (ops_to_mask & (unsigned int)tmp___16) {
 3493|      0|                            affected_masked &= ~umask_value;
 3494|      0|                        }
 3495|      0|                        {
 3496|      0|                            change->affected = affected_masked;
 3497|      0|                            change->value = (mode_t)0;
 3498|      0|                            change->flags = (char)0;
 3499|      0|                            mode_append_entry(&head, &tail, change);
 3500|      0|                            mode_string___0++;
 3501|      0|                        }
 3502|      0|                        {
 3503|      0|                            while (1) {
 3504|      0|while_continue___2: /* CIL Label */
 3505|      0|                                ;
 3506|       |
 3507|      0|                                if ((int const) * mode_string___0 == 114) {
 3508|      0|                                    goto case_114;
 3509|      0|                                }
 3510|      0|                                if ((int const) * mode_string___0 == 119) {
 3511|      0|                                    goto case_119;
 3512|      0|                                }
 3513|      0|                                if ((int const) * mode_string___0 == 88) {
 3514|      0|                                    goto case_88;
 3515|      0|                                }
 3516|      0|                                if ((int const) * mode_string___0 == 120) {
 3517|      0|                                    goto case_120;
 3518|      0|                                }
 3519|      0|                                if ((int const) * mode_string___0 == 115) {
 3520|      0|                                    goto case_115;
 3521|      0|                                }
 3522|      0|                                if ((int const) * mode_string___0 == 116) {
 3523|      0|                                    goto case_116;
 3524|      0|                                }
 3525|      0|                                if ((int const) * mode_string___0 == 117) {
 3526|      0|                                    goto case_117___0;
 3527|      0|                                }
 3528|      0|                                if ((int const) * mode_string___0 == 103) {
 3529|      0|                                    goto case_103___0;
 3530|      0|                                }
 3531|      0|                                if ((int const) * mode_string___0 == 111) {
 3532|      0|                                    goto case_111___0;
 3533|      0|                                }
 3534|      0|                                goto switch_default___0;
 3535|      0|case_114:
 3536|      0|                                change->value |=
 3537|      0|                                    (unsigned int)((256 | (256 >> 3)) | ((256 >> 3) >> 3)) &
 3538|      0|                                    affected_masked;
 3539|      0|                                goto switch_break___0;
 3540|      0|case_119:
 3541|      0|                                change->value |=
 3542|      0|                                    (unsigned int)((128 | (128 >> 3)) | ((128 >> 3) >> 3)) &
 3543|      0|                                    affected_masked;
 3544|      0|                                goto switch_break___0;
 3545|      0|case_88:
 3546|      0|                                change->flags = (char)((int)change->flags | 1);
 3547|      0|case_120:
 3548|      0|                                change->value |=
 3549|      0|                                    (unsigned int)((64 | (64 >> 3)) | ((64 >> 3) >> 3)) &
 3550|      0|                                    affected_masked;
 3551|      0|                                goto switch_break___0;
 3552|      0|case_115:
 3553|      0|                                change->value |= 3072U & affected_masked;
 3554|      0|                                goto switch_break___0;
 3555|      0|case_116:
 3556|      0|                                change->value |= 512U & affected_masked;
 3557|      0|                                goto switch_break___0;
 3558|      0|case_117___0:
 3559|      0|                                if (change->value) {
 3560|      0|                                    goto invalid;
 3561|      0|                                }
 3562|      0|                                change->value = (mode_t)448;
 3563|      0|                                change->flags = (char)((int)change->flags | 2);
 3564|      0|                                goto switch_break___0;
 3565|      0|case_103___0:
 3566|      0|                                if (change->value) {
 3567|      0|                                    goto invalid;
 3568|      0|                                }
 3569|      0|                                change->value = (mode_t)(448 >> 3);
 3570|      0|                                change->flags = (char)((int)change->flags | 2);
 3571|      0|                                goto switch_break___0;
 3572|      0|case_111___0:
 3573|      0|                                if (change->value) {
 3574|      0|                                    goto invalid;
 3575|      0|                                }
 3576|      0|                                change->value = (mode_t)((448 >> 3) >> 3);
 3577|      0|                                change->flags = (char)((int)change->flags | 2);
 3578|      0|                                goto switch_break___0;
 3579|      0|switch_default___0:
 3580|      0|                                goto no_more_values;
 3581|      0|switch_break___0:
 3582|      0|                                mode_string___0++;
 3583|      0|                            }
 3584|      0|while_break___5: /* CIL Label */
 3585|      0|                            ;
 3586|      0|                        }
 3587|       |
 3588|      0|no_more_values:
 3589|      0|                        ;
 3590|      0|                    }
 3591|      0|while_break___4: /* CIL Label */
 3592|      0|                    ;
 3593|      0|                }
 3594|      0|while_break___1:
 3595|      0|                ;
 3596|      0|                if (!((int const) * mode_string___0 == 44)) {
 3597|      0|                    goto while_break;
 3598|      0|                }
 3599|      0|            }
 3600|      0|while_break___2: /* CIL Label */
 3601|      0|            ;
 3602|      0|        }
 3603|      0|while_break:
 3604|      0|        ;
 3605|      0|        if ((int const) * mode_string___0 == 0) {
 3606|      0|            return (head);
 3607|      0|        }
 3608|      0|invalid : {
 3609|      0|            mode_free(head);
 3610|      0|        }
 3611|      0|        return ((struct mode_change *)0);
 3612|      0|    }
 3613|      0|}
 3614|       |mode_t mode_adjust(mode_t oldmode, struct mode_change const *changes)
 3615|      0|{
 3616|      0|    mode_t newmode;
 3617|      0|    mode_t value;
 3618|      0|    int tmp;
 3619|      0|    int tmp___0;
 3620|      0|    int tmp___1;
 3621|      0|    int tmp___2;
 3622|      0|    int tmp___3;
 3623|      0|    int tmp___4;
 3624|      0|    int tmp___5;
 3625|      0|    int tmp___6;
 3626|      0|    int tmp___7;
 3627|       |
 3628|      0|    {
 3629|      0|        newmode = oldmode & (unsigned int)((4032 | (448 >> 3)) | ((448 >> 3) >> 3));
 3630|      0|        {
 3631|      0|            while (1) {
 3632|      0|while_continue: /* CIL Label */
 3633|      0|                ;
 3634|       |
 3635|      0|                if (!changes) {
 3636|      0|                    goto while_break;
 3637|      0|                }
 3638|      0|                if ((int const)changes->flags & 2) {
 3639|      0|                    value = newmode & (unsigned int)changes->value;
 3640|      0|                    if (changes->value & 448U) {
 3641|      0|                        if (value & 256U) {
 3642|      0|                            tmp = (256 >> 3) | ((256 >> 3) >> 3);
 3643|      0|                        }
 3644|      0|                        else {
 3645|      0|                            tmp = 0;
 3646|      0|                        }
 3647|      0|                        if (value & 128U) {
 3648|      0|                            tmp___0 = (128 >> 3) | ((128 >> 3) >> 3);
 3649|      0|                        }
 3650|      0|                        else {
 3651|      0|                            tmp___0 = 0;
 3652|      0|                        }
 3653|      0|                        if (value & 64U) {
 3654|      0|                            tmp___1 = (64 >> 3) | ((64 >> 3) >> 3);
 3655|      0|                        }
 3656|      0|                        else {
 3657|      0|                            tmp___1 = 0;
 3658|      0|                        }
 3659|      0|                        value |= (unsigned int)((tmp | tmp___0) | tmp___1);
 3660|      0|                    }
 3661|      0|                    else {
 3662|      0|                        if (changes->value & (unsigned int const)(448 >> 3)) {
 3663|      0|                            if (value & (unsigned int)(256 >> 3)) {
 3664|      0|                                tmp___2 = 256 | ((256 >> 3) >> 3);
 3665|      0|                            }
 3666|      0|                            else {
 3667|      0|                                tmp___2 = 0;
 3668|      0|                            }
 3669|      0|                            if (value & (unsigned int)(128 >> 3)) {
 3670|      0|                                tmp___3 = 128 | ((128 >> 3) >> 3);
 3671|      0|                            }
 3672|      0|                            else {
 3673|      0|                                tmp___3 = 0;
 3674|      0|                            }
 3675|      0|                            if (value & (unsigned int)(64 >> 3)) {
 3676|      0|                                tmp___4 = 64 | ((64 >> 3) >> 3);
 3677|      0|                            }
 3678|      0|                            else {
 3679|      0|                                tmp___4 = 0;
 3680|      0|                            }
 3681|      0|                            value |= (unsigned int)((tmp___2 | tmp___3) | tmp___4);
 3682|      0|                        }
 3683|      0|                        else {
 3684|      0|                            if (value & (unsigned int)((256 >> 3) >> 3)) {
 3685|      0|                                tmp___5 = 256 | (256 >> 3);
 3686|      0|                            }
 3687|      0|                            else {
 3688|      0|                                tmp___5 = 0;
 3689|      0|                            }
 3690|      0|                            if (value & (unsigned int)((128 >> 3) >> 3)) {
 3691|      0|                                tmp___6 = 128 | (128 >> 3);
 3692|      0|                            }
 3693|      0|                            else {
 3694|      0|                                tmp___6 = 0;
 3695|      0|                            }
 3696|      0|                            if (value & (unsigned int)((64 >> 3) >> 3)) {
 3697|      0|                                tmp___7 = 64 | (64 >> 3);
 3698|      0|                            }
 3699|      0|                            else {
 3700|      0|                                tmp___7 = 0;
 3701|      0|                            }
 3702|      0|                            value |= (unsigned int)((tmp___5 | tmp___6) | tmp___7);
 3703|      0|                        }
 3704|      0|                    }
 3705|      0|                    value &= (unsigned int)changes->affected;
 3706|      0|                }
 3707|      0|                else {
 3708|      0|                    value = (mode_t)changes->value;
 3709|      0|                    if ((int const)changes->flags & 1) {
 3710|      0|                        if (!((oldmode & 61440U) == 16384U)) {
 3711|      0|                            if ((newmode &
 3712|      0|                                    (unsigned int)((64 | (64 >> 3)) | ((64 >> 3) >> 3))) == 0U) {
 3713|      0|                                value &= (unsigned int)(~((64 | (64 >> 3)) | ((64 >> 3) >> 3)));
 3714|      0|                            }
 3715|      0|                        }
 3716|      0|                    }
 3717|      0|                }
 3718|      0|                if ((int const)changes->op == 61) {
 3719|      0|                    goto case_61;
 3720|      0|                }
 3721|      0|                if ((int const)changes->op == 43) {
 3722|      0|                    goto case_43;
 3723|      0|                }
 3724|      0|                if ((int const)changes->op == 45) {
 3725|      0|                    goto case_45;
 3726|      0|                }
 3727|      0|                goto switch_break;
 3728|      0|case_61:
 3729|      0|                newmode = (newmode & (unsigned int)(~changes->affected)) | value;
 3730|      0|                goto switch_break;
 3731|      0|case_43:
 3732|      0|                newmode |= value;
 3733|      0|                goto switch_break;
 3734|      0|case_45:
 3735|      0|                newmode &= ~value;
 3736|      0|                goto switch_break;
 3737|      0|switch_break:
 3738|      0|                changes = (struct mode_change const *)changes->next;
 3739|      0|            }
 3740|      0|while_break___0: /* CIL Label */
 3741|      0|            ;
 3742|      0|        }
 3743|      0|while_break:
 3744|      0|        ;
 3745|      0|        return (newmode);
 3746|      0|    }
 3747|      0|}
 3748|       |void mode_free(struct mode_change *changes)
 3749|      0|{
 3750|      0|    register struct mode_change *next;
 3751|       |
 3752|      0|    {
 3753|      0|        {
 3754|      0|            while (1) {
 3755|      0|while_continue: /* CIL Label */
 3756|      0|                ;
 3757|       |
 3758|      0|                if (!changes) {
 3759|      0|                    goto while_break;
 3760|      0|                }
 3761|      0|                {
 3762|      0|                    next = changes->next;
 3763|      0|                    rpl_free((void *)changes);
 3764|      0|                    changes = next;
 3765|      0|                }
 3766|      0|            }
 3767|      0|while_break___0: /* CIL Label */
 3768|      0|            ;
 3769|      0|        }
 3770|      0|while_break:
 3771|      0|        ;
 3772|      0|        return;
 3773|      0|    }
 3774|      0|}
 3775|       |static unsigned short const __mon_yday[2][13] = {
 3776|       |    {
 3777|       |        (unsigned short const)0, (unsigned short const)31,
 3778|       |        (unsigned short const)59, (unsigned short const)90,
 3779|       |        (unsigned short const)120, (unsigned short const)151,
 3780|       |        (unsigned short const)181, (unsigned short const)212,
 3781|       |        (unsigned short const)243, (unsigned short const)273,
 3782|       |        (unsigned short const)304, (unsigned short const)334,
 3783|       |        (unsigned short const)365
 3784|       |    },
 3785|       |    {
 3786|       |        (unsigned short const)0, (unsigned short const)31,
 3787|       |        (unsigned short const)60, (unsigned short const)91,
 3788|       |        (unsigned short const)121, (unsigned short const)152,
 3789|       |        (unsigned short const)182, (unsigned short const)213,
 3790|       |        (unsigned short const)244, (unsigned short const)274,
 3791|       |        (unsigned short const)305, (unsigned short const)335,
 3792|       |        (unsigned short const)366
 3793|       |    }
 3794|       |};
 3795|       |static time_t localtime_offset;
 3796|       |extern __attribute__((__nothrow__)) int(
 3797|       |    __attribute__((__nonnull__(1, 2), __leaf__))
 3798|       |    strcoll)(char const *__s1, char const *__s2) __attribute__((__pure__));
 3799|       |static unsigned char const fillbuf___0[64] = {(unsigned char const)128,
 3800|       |                                              (unsigned char const)0
 3801|       |                                             };
 3802|       |extern __attribute__((__nothrow__)) int(__attribute__((__leaf__))
 3803|       |                                        wcwidth)(wchar_t __c);
 3804|       |extern __attribute__((__nothrow__)) int(__attribute__((__leaf__))
 3805|       |                                        iswcntrl)(wint_t __wc);
 3806|       |int make_path(char const *argpath, int mode, int parent_mode, uid_t owner,
 3807|       |              gid_t group, int preserve_existing,
 3808|       |              char const *verbose_fmt_string);
 3809|       |int make_dir(char const *dir, char const *dirpath, mode_t mode,
 3810|       |             int *created_dir_p);
 3811|       |extern
 3812|       |__attribute__((__nothrow__)) int(__attribute__((__nonnull__(1), __leaf__))
 3813|       |                                 chmod)(char const *__file,
 3814|       |                                        __mode_t __mode);
 3815|       |extern
 3816|       |__attribute__((__nothrow__)) int(__attribute__((__nonnull__(1), __leaf__))
 3817|       |                                 mkdir)(char const *__path,
 3818|       |                                        __mode_t __mode);
 3819|       |extern
 3820|       |__attribute__((__nothrow__)) int(__attribute__((__nonnull__(1), __leaf__))
 3821|       |                                 chown)(char const *__file, __uid_t __owner,
 3822|       |                                        __gid_t __group);
 3823|       |int make_dir(char const *dir, char const *dirpath, mode_t mode,
 3824|       |             int *created_dir_p)
 3825|      7|{
 3826|      7|    int fail;
 3827|      7|    int created_dir;
 3828|      7|    int tmp;
 3829|      7|    struct stat stats;
 3830|      7|    int saved_errno;
 3831|      7|    int *tmp___0;
 3832|      7|    char const *tmp___1;
 3833|      7|    char *tmp___2;
 3834|      7|    char const *tmp___3;
 3835|      7|    char *tmp___4;
 3836|      7|    int tmp___5;
 3837|      7|    void *__cil_tmp16;
 3838|      7|    char *__cil_tmp17;
 3839|      7|    char *__cil_tmp18;
 3840|       |
 3841|      7|    {
 3842|      7|        {
 3843|      7|            fail = 0;
 3844|      7|            tmp = mkdir(dir, mode);
 3845|      7|            created_dir = tmp == 0;
 3846|      7|        }
 3847|      7|        if (!created_dir) {
 3848|      0|            {
 3849|      0|                tmp___0 = __errno_location();
 3850|      0|                saved_errno = *tmp___0;
 3851|      0|                tmp___5 = stat((char const * /* __restrict  */)dir,
 3852|      0|                               (struct stat * /* __restrict  */)(&stats));
 3853|      0|            }
 3854|      0|            if (tmp___5) {
 3855|      0|                {
 3856|      0|                    tmp___1 = quote(dirpath);
 3857|      0|                    tmp___2 = gettext("cannot create directory %s");
 3858|      0|                    error(0, saved_errno, (char const *)tmp___2, tmp___1);
 3859|      0|                    fail = 1;
 3860|      0|                }
 3861|      0|            }
 3862|      0|            else {
 3863|      0|                if (!((stats.st_mode & 61440U) == 16384U)) {
 3864|      0|                    {
 3865|      0|                        tmp___3 = quote(dirpath);
 3866|      0|                        tmp___4 = gettext("%s exists but is not a directory");
 3867|      0|                        error(0, 0, (char const *)tmp___4, tmp___3);
 3868|      0|                        fail = 1;
 3869|      0|                    }
 3870|      0|                }
 3871|      0|            }
 3872|      0|        }
 3873|      7|        if (created_dir_p) {
 3874|      5|            *created_dir_p = created_dir;
 3875|      5|        }
 3876|      7|        return (fail);
 3877|      7|    }
 3878|      7|}
 3879|       |int make_path(char const *argpath, int mode, int parent_mode, uid_t owner,
 3880|       |              gid_t group, int preserve_existing,
 3881|       |              char const *verbose_fmt_string)
 3882|      2|{
 3883|      2|    struct stat stats;
 3884|      2|    int retval;
 3885|      2|    char *slash;
 3886|      2|    int tmp_mode;
 3887|      2|    int re_protect;
 3888|      2|    struct ptr_list *p;
 3889|      2|    struct ptr_list *leading_dirs;
 3890|      2|    int do_chdir;
 3891|      2|    struct saved_cwd cwd;
 3892|      2|    char *basename_dir;
 3893|      2|    char *dirpath;
 3894|      2|    mode_t oldmask;
 3895|      2|    __mode_t tmp;
 3896|      2|    size_t tmp___0;
 3897|      2|    void *tmp___1;
 3898|      2|    int tmp___2;
 3899|      2|    int tmp___3;
 3900|      2|    int tmp___4;
 3901|      2|    int newly_created_dir;
 3902|      2|    int fail;
 3903|      2|    int _saved_errno;
 3904|      2|    int *tmp___5;
 3905|      2|    char *tmp___6;
 3906|      2|    int *tmp___7;
 3907|      2|    int *tmp___8;
 3908|      2|    int tmp___9;
 3909|      2|    char const *tmp___10;
 3910|      2|    char const *tmp___11;
 3911|      2|    char *tmp___12;
 3912|      2|    int *tmp___13;
 3913|      2|    int _saved_errno___0;
 3914|      2|    int *tmp___14;
 3915|      2|    char *tmp___15;
 3916|      2|    int *tmp___16;
 3917|      2|    int *tmp___17;
 3918|      2|    int tmp___18;
 3919|      2|    int tmp___19;
 3920|      2|    struct ptr_list *new;
 3921|      2|    void *tmp___20;
 3922|      2|    char const *tmp___21;
 3923|      2|    char *tmp___22;
 3924|      2|    int *tmp___23;
 3925|      2|    int _saved_errno___1;
 3926|      2|    int *tmp___24;
 3927|      2|    char *tmp___25;
 3928|      2|    int *tmp___26;
 3929|      2|    int *tmp___27;
 3930|      2|    int tmp___28;
 3931|      2|    int tmp___29;
 3932|      2|    char *tmp___30;
 3933|      2|    int _saved_errno___2;
 3934|      2|    int *tmp___31;
 3935|      2|    char *tmp___32;
 3936|      2|    int *tmp___33;
 3937|      2|    int *tmp___34;
 3938|      2|    int tmp___35;
 3939|      2|    int tmp___36;
 3940|      2|    char const *tmp___37;
 3941|      2|    char const *tmp___38;
 3942|      2|    char *tmp___39;
 3943|      2|    int *tmp___40;
 3944|      2|    int tmp___41;
 3945|      2|    char const *tmp___42;
 3946|      2|    char *tmp___43;
 3947|      2|    int *tmp___44;
 3948|      2|    int tmp___45;
 3949|      2|    int _saved_errno___3;
 3950|      2|    int *tmp___46;
 3951|      2|    char *tmp___47;
 3952|      2|    int *tmp___48;
 3953|      2|    int *tmp___49;
 3954|      2|    int tmp___50;
 3955|      2|    char const *tmp___51;
 3956|      2|    char *tmp___52;
 3957|      2|    int *tmp___53;
 3958|      2|    int tmp___54;
 3959|      2|    char const *dirpath___0;
 3960|      2|    char const *tmp___55;
 3961|      2|    char *tmp___56;
 3962|      2|    char const *tmp___57;
 3963|      2|    char *tmp___58;
 3964|      2|    int *tmp___59;
 3965|      2|    int tmp___60;
 3966|      2|    char const *tmp___61;
 3967|      2|    char *tmp___62;
 3968|      2|    int *tmp___63;
 3969|      2|    int tmp___64;
 3970|      2|    int tmp___65;
 3971|      2|    void *__cil_tmp96;
 3972|      2|    char *__cil_tmp97;
 3973|      2|    char *__cil_tmp98;
 3974|      2|    char *__cil_tmp99;
 3975|      2|    char *__cil_tmp100;
 3976|      2|    char *__cil_tmp101;
 3977|      2|    char *__cil_tmp102;
 3978|      2|    char *__cil_tmp103;
 3979|      2|    char *__cil_tmp104;
 3980|      2|    char *__cil_tmp105;
 3981|      2|    char *__cil_tmp106;
 3982|      2|    char *__cil_tmp107;
 3983|      2|    char *__cil_tmp108;
 3984|      2|    char *__cil_tmp109;
 3985|       |
 3986|      2|    {
 3987|      2|        {
 3988|      2|            retval = 0;
 3989|      2|            tmp___65 = stat((char const * /* __restrict  */)argpath,
 3990|      2|                            (struct stat * /* __restrict  */)(&stats));
 3991|      2|        }
 3992|      2|        if (tmp___65) {
 3993|      2|            {
 3994|      2|                leading_dirs = (struct ptr_list *)((void *)0);
 3995|      2|                tmp = umask((__mode_t)0);
 3996|      2|                oldmask = tmp;
 3997|      2|                tmp___0 = strlen(argpath);
 3998|      2|                tmp___1 = __builtin_alloca(tmp___0 + 1UL);
 3999|      2|                dirpath = (char *)tmp___1;
 4000|      2|                strcpy((char * /* __restrict  */)dirpath,
 4001|      2|                       (char const * /* __restrict  */)argpath);
 4002|      2|                strip_trailing_slashes(dirpath);
 4003|      2|            }
 4004|      2|            if ((parent_mode & 192) != 192) {
 4005|      0|                tmp_mode = 448;
 4006|      0|                re_protect = 1;
 4007|      0|            }
 4008|      2|            else {
 4009|      2|                if (owner != 4294967295U) {
 4010|      0|                    goto _L;
 4011|      0|                }
 4012|      2|                else {
 4013|      2|                    if (group != 4294967295U) {
 4014|      0|_L:
 4015|      0|                        if ((parent_mode & 3584) != 0) {
 4016|      0|                            tmp_mode = 448;
 4017|      0|                            re_protect = 1;
 4018|      0|                        }
 4019|      0|                        else {
 4020|      0|                            tmp_mode = parent_mode;
 4021|      0|                            re_protect = 0;
 4022|      0|                        }
 4023|      0|                    }
 4024|      2|                    else {
 4025|      2|                        tmp_mode = parent_mode;
 4026|      2|                        re_protect = 0;
 4027|      2|                    }
 4028|      2|                }
 4029|      2|            }
 4030|      2|            {
 4031|      2|                tmp___2 = save_cwd(&cwd);
 4032|      2|            }
 4033|      2|            if (tmp___2) {
 4034|      0|                tmp___3 = 0;
 4035|      0|            }
 4036|      2|            else {
 4037|      2|                tmp___3 = 1;
 4038|      2|            }
 4039|      2|            do_chdir = tmp___3;
 4040|      2|            if (do_chdir) {
 4041|      2|                if ((int)*dirpath == 47) {
 4042|      0|                    {
 4043|      0|                        tmp___4 = chdir("/");
 4044|      0|                    }
 4045|      0|                    if (tmp___4 < 0) {
 4046|      0|                        do_chdir = 0;
 4047|      0|                    }
 4048|      0|                }
 4049|      2|            }
 4050|      2|            slash = dirpath;
 4051|      2|            {
 4052|      2|                while (1) {
 4053|      2|while_continue: /* CIL Label */
 4054|      2|                    ;
 4055|       |
 4056|      2|                    if (!((int)*slash == 47)) {
 4057|      2|                        goto while_break;
 4058|      2|                    }
 4059|      0|                    slash++;
 4060|      0|                }
 4061|      0|while_break___12: /* CIL Label */
 4062|      0|                ;
 4063|      0|            }
 4064|      2|while_break:
 4065|      2|            ;
 4066|      2|            {
 4067|      7|                while (1) {
 4068|      7|while_continue___0: /* CIL Label */
 4069|      7|                    ;
 4070|      7|                    {
 4071|      7|                        basename_dir = slash;
 4072|      7|                        slash = strchr((char const *)slash, '/');
 4073|      7|                    }
 4074|      7|                    if ((unsigned long)slash == (unsigned long)((void *)0)) {
 4075|      2|                        goto while_break___0;
 4076|      2|                    }
 4077|      5|                    if (!do_chdir) {
 4078|      0|                        basename_dir = dirpath;
 4079|      0|                    }
 4080|      5|                    {
 4081|      5|                        *slash = (char)'\000';
 4082|      5|                        fail = make_dir((char const *)basename_dir, (char const *)dirpath,
 4083|      5|                                        (mode_t)tmp_mode, &newly_created_dir);
 4084|      5|                    }
 4085|      5|                    if (fail) {
 4086|      0|                        {
 4087|      0|                            while (1) {
 4088|      0|while_continue___1: /* CIL Label */
 4089|      0|                                ;
 4090|      0|                                {
 4091|      0|                                    umask(oldmask);
 4092|      0|                                }
 4093|      0|                                {
 4094|      0|                                    while (1) {
 4095|      0|while_continue___2: /* CIL Label */
 4096|      0|                                        ;
 4097|       |
 4098|      0|                                        if (do_chdir) {
 4099|      0|                                            {
 4100|      0|                                                tmp___9 = restore_cwd((struct saved_cwd const *)(&cwd));
 4101|      0|                                            }
 4102|      0|                                            if (tmp___9 != 0) {
 4103|      0|                                                {
 4104|      0|                                                    tmp___5 = __errno_location();
 4105|      0|                                                    _saved_errno = *tmp___5;
 4106|      0|                                                    tmp___6 = gettext(
 4107|      0|                                                                  "failed to return to initial working directory");
 4108|      0|                                                    tmp___7 = __errno_location();
 4109|      0|                                                    error(0, *tmp___7, (char const *)tmp___6);
 4110|      0|                                                    free_cwd(&cwd);
 4111|      0|                                                    tmp___8 = __errno_location();
 4112|      0|                                                    *tmp___8 = _saved_errno;
 4113|      0|                                                }
 4114|      0|                                                return (1);
 4115|      0|                                            }
 4116|      0|                                            {
 4117|      0|                                                free_cwd(&cwd);
 4118|      0|                                            }
 4119|      0|                                        }
 4120|      0|                                        goto while_break___2;
 4121|      0|                                    }
 4122|      0|while_break___15: /* CIL Label */
 4123|      0|                                    ;
 4124|      0|                                }
 4125|      0|while_break___2:
 4126|      0|                                ;
 4127|      0|                                goto while_break___1;
 4128|      0|                            }
 4129|      0|while_break___14: /* CIL Label */
 4130|      0|                            ;
 4131|      0|                        }
 4132|      0|while_break___1:
 4133|      0|                        ;
 4134|      0|                        return (1);
 4135|      0|                    }
 4136|      5|                    if (newly_created_dir) {
 4137|      5|                        if (verbose_fmt_string) {
 4138|      0|                            {
 4139|      0|                                tmp___10 = quote((char const *)dirpath);
 4140|      0|                                error(0, 0, verbose_fmt_string, tmp___10);
 4141|      0|                            }
 4142|      0|                        }
 4143|      5|                        if (owner != 4294967295U) {
 4144|      0|                            goto _L___0;
 4145|      0|                        }
 4146|      5|                        else {
 4147|      5|                            if (group != 4294967295U) {
 4148|      0|_L___0 : {
 4149|      0|                                    tmp___19 = chown((char const *)basename_dir, owner, group);
 4150|      0|                                }
 4151|      0|                                if (tmp___19) {
 4152|      0|                                    {
 4153|      0|                                        tmp___11 = quote((char const *)dirpath);
 4154|      0|                                        tmp___12 =
 4155|      0|                                            gettext("cannot change owner and/or group of %s");
 4156|      0|                                        tmp___13 = __errno_location();
 4157|      0|                                        error(0, *tmp___13, (char const *)tmp___12, tmp___11);
 4158|      0|                                    }
 4159|      0|                                    {
 4160|      0|                                        while (1) {
 4161|      0|while_continue___3: /* CIL Label */
 4162|      0|                                            ;
 4163|      0|                                            {
 4164|      0|                                                umask(oldmask);
 4165|      0|                                            }
 4166|      0|                                            {
 4167|      0|                                                while (1) {
 4168|      0|while_continue___4: /* CIL Label */
 4169|      0|                                                    ;
 4170|       |
 4171|      0|                                                    if (do_chdir) {
 4172|      0|                                                        {
 4173|      0|                                                            tmp___18 =
 4174|      0|                                                                restore_cwd((struct saved_cwd const *)(&cwd));
 4175|      0|                                                        }
 4176|      0|                                                        if (tmp___18 != 0) {
 4177|      0|                                                            {
 4178|      0|                                                                tmp___14 = __errno_location();
 4179|      0|                                                                _saved_errno___0 = *tmp___14;
 4180|      0|                                                                tmp___15 = gettext("failed to return to "
 4181|      0|                                                                                   "initial working directory");
 4182|      0|                                                                tmp___16 = __errno_location();
 4183|      0|                                                                error(0, *tmp___16, (char const *)tmp___15);
 4184|      0|                                                                free_cwd(&cwd);
 4185|      0|                                                                tmp___17 = __errno_location();
 4186|      0|                                                                *tmp___17 = _saved_errno___0;
 4187|      0|                                                            }
 4188|      0|                                                            return (1);
 4189|      0|                                                        }
 4190|      0|                                                        {
 4191|      0|                                                            free_cwd(&cwd);
 4192|      0|                                                        }
 4193|      0|                                                    }
 4194|      0|                                                    goto while_break___4;
 4195|      0|                                                }
 4196|      0|while_break___17: /* CIL Label */
 4197|      0|                                                ;
 4198|      0|                                            }
 4199|      0|while_break___4:
 4200|      0|                                            ;
 4201|      0|                                            goto while_break___3;
 4202|      0|                                        }
 4203|      0|while_break___16: /* CIL Label */
 4204|      0|                                        ;
 4205|      0|                                    }
 4206|      0|while_break___3:
 4207|      0|                                    ;
 4208|      0|                                    return (1);
 4209|      0|                                }
 4210|      0|                            }
 4211|      5|                        }
 4212|      5|                        if (re_protect) {
 4213|      0|                            {
 4214|      0|                                tmp___20 = __builtin_alloca(sizeof(struct ptr_list));
 4215|      0|                                new = (struct ptr_list *)tmp___20;
 4216|      0|                                new->dirname_end = slash;
 4217|      0|                                new->next = leading_dirs;
 4218|      0|                                leading_dirs = new;
 4219|      0|                            }
 4220|      0|                        }
 4221|      5|                    }
 4222|      5|                    if (do_chdir) {
 4223|      5|                        {
 4224|      5|                            tmp___29 = chdir((char const *)basename_dir);
 4225|      5|                        }
 4226|      5|                        if (tmp___29 < 0) {
 4227|      0|                            {
 4228|      0|                                tmp___21 = quote((char const *)dirpath);
 4229|      0|                                tmp___22 = gettext("cannot chdir to directory %s");
 4230|      0|                                tmp___23 = __errno_location();
 4231|      0|                                error(0, *tmp___23, (char const *)tmp___22, tmp___21);
 4232|      0|                            }
 4233|      0|                            {
 4234|      0|                                while (1) {
 4235|      0|while_continue___5: /* CIL Label */
 4236|      0|                                    ;
 4237|      0|                                    {
 4238|      0|                                        umask(oldmask);
 4239|      0|                                    }
 4240|      0|                                    {
 4241|      0|                                        while (1) {
 4242|      0|while_continue___6: /* CIL Label */
 4243|      0|                                            ;
 4244|       |
 4245|      0|                                            if (do_chdir) {
 4246|      0|                                                {
 4247|      0|                                                    tmp___28 =
 4248|      0|                                                        restore_cwd((struct saved_cwd const *)(&cwd));
 4249|      0|                                                }
 4250|      0|                                                if (tmp___28 != 0) {
 4251|      0|                                                    {
 4252|      0|                                                        tmp___24 = __errno_location();
 4253|      0|                                                        _saved_errno___1 = *tmp___24;
 4254|      0|                                                        tmp___25 = gettext("failed to return to initial "
 4255|      0|                                                                           "working directory");
 4256|      0|                                                        tmp___26 = __errno_location();
 4257|      0|                                                        error(0, *tmp___26, (char const *)tmp___25);
 4258|      0|                                                        free_cwd(&cwd);
 4259|      0|                                                        tmp___27 = __errno_location();
 4260|      0|                                                        *tmp___27 = _saved_errno___1;
 4261|      0|                                                    }
 4262|      0|                                                    return (1);
 4263|      0|                                                }
 4264|      0|                                                {
 4265|      0|                                                    free_cwd(&cwd);
 4266|      0|                                                }
 4267|      0|                                            }
 4268|      0|                                            goto while_break___6;
 4269|      0|                                        }
 4270|      0|while_break___19: /* CIL Label */
 4271|      0|                                        ;
 4272|      0|                                    }
 4273|      0|while_break___6:
 4274|      0|                                    ;
 4275|      0|                                    goto while_break___5;
 4276|      0|                                }
 4277|      0|while_break___18: /* CIL Label */
 4278|      0|                                ;
 4279|      0|                            }
 4280|      0|while_break___5:
 4281|      0|                            ;
 4282|      0|                            return (1);
 4283|      0|                        }
 4284|      5|                    }
 4285|      5|                    tmp___30 = slash;
 4286|      5|                    slash++;
 4287|      5|                    *tmp___30 = (char)'/';
 4288|      5|                    {
 4289|      5|                        while (1) {
 4290|      5|while_continue___7: /* CIL Label */
 4291|      5|                            ;
 4292|       |
 4293|      5|                            if (!((int)*slash == 47)) {
 4294|      5|                                goto while_break___7;
 4295|      5|                            }
 4296|      0|                            slash++;
 4297|      0|                        }
 4298|      0|while_break___20: /* CIL Label */
 4299|      0|                        ;
 4300|      0|                    }
 4301|      5|while_break___7:
 4302|      5|                    ;
 4303|      5|                }
 4304|      0|while_break___13: /* CIL Label */
 4305|      0|                ;
 4306|      0|            }
 4307|      2|while_break___0:
 4308|      2|            ;
 4309|      2|            if (!do_chdir) {
 4310|      0|                basename_dir = dirpath;
 4311|      0|            }
 4312|      2|            {
 4313|      2|                umask(oldmask);
 4314|      2|                tmp___36 = make_dir((char const *)basename_dir, (char const *)dirpath,
 4315|      2|                                    (mode_t)mode, (int *)((void *)0));
 4316|      2|            }
 4317|      2|            if (tmp___36) {
 4318|      0|                {
 4319|      0|                    while (1) {
 4320|      0|while_continue___8: /* CIL Label */
 4321|      0|                        ;
 4322|      0|                        {
 4323|      0|                            umask(oldmask);
 4324|      0|                        }
 4325|      0|                        {
 4326|      0|                            while (1) {
 4327|      0|while_continue___9: /* CIL Label */
 4328|      0|                                ;
 4329|       |
 4330|      0|                                if (do_chdir) {
 4331|      0|                                    {
 4332|      0|                                        tmp___35 = restore_cwd((struct saved_cwd const *)(&cwd));
 4333|      0|                                    }
 4334|      0|                                    if (tmp___35 != 0) {
 4335|      0|                                        {
 4336|      0|                                            tmp___31 = __errno_location();
 4337|      0|                                            _saved_errno___2 = *tmp___31;
 4338|      0|                                            tmp___32 = gettext(
 4339|      0|                                                           "failed to return to initial working directory");
 4340|      0|                                            tmp___33 = __errno_location();
 4341|      0|                                            error(0, *tmp___33, (char const *)tmp___32);
 4342|      0|                                            free_cwd(&cwd);
 4343|      0|                                            tmp___34 = __errno_location();
 4344|      0|                                            *tmp___34 = _saved_errno___2;
 4345|      0|                                        }
 4346|      0|                                        return (1);
 4347|      0|                                    }
 4348|      0|                                    {
 4349|      0|                                        free_cwd(&cwd);
 4350|      0|                                    }
 4351|      0|                                }
 4352|      0|                                goto while_break___9;
 4353|      0|                            }
 4354|      0|while_break___22: /* CIL Label */
 4355|      0|                            ;
 4356|      0|                        }
 4357|      0|while_break___9:
 4358|      0|                        ;
 4359|      0|                        goto while_break___8;
 4360|      0|                    }
 4361|      0|while_break___21: /* CIL Label */
 4362|      0|                    ;
 4363|      0|                }
 4364|      0|while_break___8:
 4365|      0|                ;
 4366|      0|                return (1);
 4367|      0|            }
 4368|      2|            if ((unsigned long)verbose_fmt_string != (unsigned long)((void *)0)) {
 4369|      0|                {
 4370|      0|                    tmp___37 = quote((char const *)dirpath);
 4371|      0|                    error(0, 0, verbose_fmt_string, tmp___37);
 4372|      0|                }
 4373|      0|            }
 4374|      2|            if (owner != 4294967295U) {
 4375|      0|                goto _L___1;
 4376|      0|            }
 4377|      2|            else {
 4378|      2|                if (group != 4294967295U) {
 4379|      0|_L___1 : {
 4380|      0|                        tmp___41 = chown((char const *)basename_dir, owner, group);
 4381|      0|                    }
 4382|      0|                    if (tmp___41) {
 4383|      0|                        {
 4384|      0|                            tmp___38 = quote((char const *)dirpath);
 4385|      0|                            tmp___39 = gettext("cannot change owner and/or group of %s");
 4386|      0|                            tmp___40 = __errno_location();
 4387|      0|                            error(0, *tmp___40, (char const *)tmp___39, tmp___38);
 4388|      0|                            retval = 1;
 4389|      0|                        }
 4390|      0|                    }
 4391|      0|                }
 4392|      2|            }
 4393|      2|            if (mode & ~((448 | (448 >> 3)) | ((448 >> 3) >> 3))) {
 4394|      0|                {
 4395|      0|                    tmp___45 = chmod((char const *)basename_dir, (__mode_t)mode);
 4396|      0|                }
 4397|      0|                if (tmp___45) {
 4398|      0|                    {
 4399|      0|                        tmp___42 = quote((char const *)dirpath);
 4400|      0|                        tmp___43 = gettext("cannot change permissions of %s");
 4401|      0|                        tmp___44 = __errno_location();
 4402|      0|                        error(0, *tmp___44, (char const *)tmp___43, tmp___42);
 4403|      0|                        retval = 1;
 4404|      0|                    }
 4405|      0|                }
 4406|      0|            }
 4407|      2|            {
 4408|      2|                while (1) {
 4409|      2|while_continue___10: /* CIL Label */
 4410|      2|                    ;
 4411|       |
 4412|      2|                    if (do_chdir) {
 4413|      2|                        {
 4414|      2|                            tmp___50 = restore_cwd((struct saved_cwd const *)(&cwd));
 4415|      2|                        }
 4416|      2|                        if (tmp___50 != 0) {
 4417|      0|                            {
 4418|      0|                                tmp___46 = __errno_location();
 4419|      0|                                _saved_errno___3 = *tmp___46;
 4420|      0|                                tmp___47 =
 4421|      0|                                    gettext("failed to return to initial working directory");
 4422|      0|                                tmp___48 = __errno_location();
 4423|      0|                                error(0, *tmp___48, (char const *)tmp___47);
 4424|      0|                                free_cwd(&cwd);
 4425|      0|                                tmp___49 = __errno_location();
 4426|      0|                                *tmp___49 = _saved_errno___3;
 4427|      0|                            }
 4428|      0|                            return (1);
 4429|      0|                        }
 4430|      2|                        {
 4431|      2|                            free_cwd(&cwd);
 4432|      2|                        }
 4433|      2|                    }
 4434|      2|                    goto while_break___10;
 4435|      2|                }
 4436|      0|while_break___23: /* CIL Label */
 4437|      0|                ;
 4438|      0|            }
 4439|      2|while_break___10:
 4440|      2|            p = leading_dirs;
 4441|      2|            {
 4442|      2|                while (1) {
 4443|      2|while_continue___11: /* CIL Label */
 4444|      2|                    ;
 4445|       |
 4446|      2|                    if (!((unsigned long)p != (unsigned long)((void *)0))) {
 4447|      2|                        goto while_break___11;
 4448|      2|                    }
 4449|      0|                    {
 4450|      0|                        *(p->dirname_end) = (char)'\000';
 4451|      0|                        tmp___54 = chmod((char const *)dirpath, (__mode_t)parent_mode);
 4452|      0|                    }
 4453|      0|                    if (tmp___54) {
 4454|      0|                        {
 4455|      0|                            tmp___51 = quote((char const *)dirpath);
 4456|      0|                            tmp___52 = gettext("cannot change permissions of %s");
 4457|      0|                            tmp___53 = __errno_location();
 4458|      0|                            error(0, *tmp___53, (char const *)tmp___52, tmp___51);
 4459|      0|                            retval = 1;
 4460|      0|                        }
 4461|      0|                    }
 4462|      0|                    p = p->next;
 4463|      0|                }
 4464|      0|while_break___24: /* CIL Label */
 4465|      0|                ;
 4466|      0|            }
 4467|      2|while_break___11:
 4468|      2|            ;
 4469|      2|        }
 4470|      0|        else {
 4471|      0|            dirpath___0 = argpath;
 4472|      0|            if (!((stats.st_mode & 61440U) == 16384U)) {
 4473|      0|                {
 4474|      0|                    tmp___55 = quote(dirpath___0);
 4475|      0|                    tmp___56 = gettext("%s exists but is not a directory");
 4476|      0|                    error(0, 0, (char const *)tmp___56, tmp___55);
 4477|      0|                }
 4478|      0|                return (1);
 4479|      0|            }
 4480|      0|            if (!preserve_existing) {
 4481|      0|                if (owner != 4294967295U) {
 4482|      0|                    goto _L___2;
 4483|      0|                }
 4484|      0|                else {
 4485|      0|                    if (group != 4294967295U) {
 4486|      0|_L___2 : {
 4487|      0|                            tmp___60 = chown(dirpath___0, owner, group);
 4488|      0|                        }
 4489|      0|                        if (tmp___60) {
 4490|      0|                            {
 4491|      0|                                tmp___57 = quote(dirpath___0);
 4492|      0|                                tmp___58 = gettext("cannot change owner and/or group of %s");
 4493|      0|                                tmp___59 = __errno_location();
 4494|      0|                                error(0, *tmp___59, (char const *)tmp___58, tmp___57);
 4495|      0|                                retval = 1;
 4496|      0|                            }
 4497|      0|                        }
 4498|      0|                    }
 4499|      0|                }
 4500|      0|                {
 4501|      0|                    tmp___64 = chmod(dirpath___0, (__mode_t)mode);
 4502|      0|                }
 4503|      0|                if (tmp___64) {
 4504|      0|                    {
 4505|      0|                        tmp___61 = quote(dirpath___0);
 4506|      0|                        tmp___62 = gettext("cannot change permissions of %s");
 4507|      0|                        tmp___63 = __errno_location();
 4508|      0|                        error(0, *tmp___63, (char const *)tmp___62, tmp___61);
 4509|      0|                        retval = 1;
 4510|      0|                    }
 4511|      0|                }
 4512|      0|            }
 4513|      0|        }
 4514|      2|        return (retval);
 4515|      2|    }
 4516|      2|}
 4517|       |extern struct _IO_FILE *stdout;
 4518|       |extern __attribute__((__nothrow__, __noreturn__)) void(__attribute__((__leaf__))
 4519|       |        exit)(int __status);
 4520|       |extern int optind;
 4521|       |extern int opterr;
 4522|       |extern int getopt_long(int ___argc, char *const *___argv,
 4523|       |                       char const *__shortopts, struct option const *__longopts,
 4524|       |                       int *__longind);
 4525|       |static struct option const long_options[3] = {
 4526|       |    {"help", 0, (int *)0, 'h'},
 4527|       |    {"version", 0, (int *)0, 'v'},
 4528|       |    {(char const *)0, 0, (int *)0, 0}
 4529|       |};
 4530|       |extern int fclose(FILE *__stream);
 4531|       |extern FILE *fopen(char const *__restrict __filename,
 4532|       |                   char const *__restrict __modes);
 4533|       |extern int fscanf(FILE *__restrict __stream, char const *__restrict __format,
 4534|       |                  ...);
 4535|       |extern int ungetc(int __c, FILE *__stream);
 4536|       |extern __attribute__((__nothrow__)) char *(__attribute__((__leaf__))
 4537|       |        nl_langinfo)(nl_item __item);
 4538|       |static char const *volatile charset_aliases;
 4539|       |extern struct passwd *getpwuid(__uid_t __uid);
 4540|       |static struct userid *user_alist;
 4541|       |static struct userid *nouser_alist;
 4542|       |static struct userid *group_alist;
 4543|       |static struct userid *nogroup_alist;
 4544|       |extern __attribute__((__nothrow__)) struct lconv *(__attribute__((__leaf__))
 4545|       |        localeconv)(void);
 4546|       |extern __attribute__((__nothrow__)) void *(
 4547|       |    __attribute__((__nonnull__(1, 2), __leaf__))
 4548|       |    memmove)(void *__dest, void const *__src, size_t __n);
 4549|       |static char const power_letter[9] = {
 4550|       |    (char const)0,   (char const)'K', (char const)'M',
 4551|       |    (char const)'G', (char const)'T', (char const)'P',
 4552|       |    (char const)'E', (char const)'Z', (char const)'Y'
 4553|       |};
 4554|       |static char const *const block_size_args[3] = {
 4555|       |    (char const * /* const  */) "human-readable",
 4556|       |    (char const * /* const  */) "si",
 4557|       |    (char const * /* const  */)((char const *)0)
 4558|       |};
 4559|       |static int const block_size_opts[2] = {(int const)112, (int const)80};
 4560|       |static struct hash_tuning const default_tuning = {
 4561|       |    (float)0.0, (float)1.0, (float)0.8, (float)1.414, (_Bool)0
 4562|       |};
 4563|       |extern __attribute__((__nothrow__)) char *(__attribute__((__leaf__))
 4564|       |        setlocale)(int __category,
 4565|       |                   char const *__locale);
 4566|       |extern void setgrent(void);
 4567|       |extern struct group *getgrent(void);
 4568|       |extern __attribute__((__nothrow__)) int(
 4569|       |    __attribute__((__nonnull__(1), __leaf__))
 4570|       |    gettimeofday)(struct timeval *__restrict __tv, __timezone_ptr_t __tz);
 4571|       |extern __attribute__((__nothrow__)) int(__attribute__((__leaf__))
 4572|       |                                        clock_gettime)(clockid_t __clock_id,
 4573|       |                                                struct timespec *__tp);
 4574|       |static unsigned char const yytranslate[274] = {
 4575|       |    (unsigned char const)0,  (unsigned char const)2,  (unsigned char const)2,
 4576|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4577|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4578|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4579|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4580|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4581|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4582|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4583|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4584|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4585|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4586|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4587|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4588|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4589|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)20,
 4590|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)21,
 4591|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4592|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4593|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4594|       |    (unsigned char const)2,  (unsigned char const)19, (unsigned char const)2,
 4595|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4596|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4597|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4598|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4599|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4600|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4601|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4602|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4603|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4604|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4605|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4606|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4607|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4608|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4609|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4610|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4611|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4612|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4613|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4614|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4615|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4616|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4617|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4618|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4619|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4620|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4621|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4622|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4623|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4624|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4625|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4626|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4627|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4628|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4629|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4630|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4631|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4632|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4633|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4634|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4635|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4636|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4637|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4638|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4639|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4640|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4641|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4642|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4643|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4644|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4645|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4646|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4647|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4648|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4649|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4650|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4651|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4652|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4653|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4654|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4655|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4656|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4657|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4658|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4659|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4660|       |    (unsigned char const)2,  (unsigned char const)1,  (unsigned char const)2,
 4661|       |    (unsigned char const)3,  (unsigned char const)4,  (unsigned char const)5,
 4662|       |    (unsigned char const)6,  (unsigned char const)7,  (unsigned char const)8,
 4663|       |    (unsigned char const)9,  (unsigned char const)10, (unsigned char const)11,
 4664|       |    (unsigned char const)12, (unsigned char const)13, (unsigned char const)14,
 4665|       |    (unsigned char const)15, (unsigned char const)16, (unsigned char const)17,
 4666|       |    (unsigned char const)18
 4667|       |};
 4668|       |static unsigned char const yyr1[56] = {
 4669|       |    (unsigned char const)0,  (unsigned char const)22, (unsigned char const)23,
 4670|       |    (unsigned char const)23, (unsigned char const)24, (unsigned char const)24,
 4671|       |    (unsigned char const)24, (unsigned char const)24, (unsigned char const)24,
 4672|       |    (unsigned char const)24, (unsigned char const)24, (unsigned char const)25,
 4673|       |    (unsigned char const)25, (unsigned char const)25, (unsigned char const)25,
 4674|       |    (unsigned char const)25, (unsigned char const)26, (unsigned char const)26,
 4675|       |    (unsigned char const)27, (unsigned char const)27, (unsigned char const)27,
 4676|       |    (unsigned char const)28, (unsigned char const)28, (unsigned char const)28,
 4677|       |    (unsigned char const)29, (unsigned char const)29, (unsigned char const)29,
 4678|       |    (unsigned char const)29, (unsigned char const)29, (unsigned char const)29,
 4679|       |    (unsigned char const)29, (unsigned char const)29, (unsigned char const)29,
 4680|       |    (unsigned char const)30, (unsigned char const)30, (unsigned char const)31,
 4681|       |    (unsigned char const)31, (unsigned char const)31, (unsigned char const)31,
 4682|       |    (unsigned char const)31, (unsigned char const)31, (unsigned char const)31,
 4683|       |    (unsigned char const)31, (unsigned char const)31, (unsigned char const)31,
 4684|       |    (unsigned char const)31, (unsigned char const)31, (unsigned char const)31,
 4685|       |    (unsigned char const)31, (unsigned char const)31, (unsigned char const)31,
 4686|       |    (unsigned char const)31, (unsigned char const)31, (unsigned char const)32,
 4687|       |    (unsigned char const)33, (unsigned char const)33
 4688|       |};
 4689|       |static unsigned char const yyr2[56] = {
 4690|       |    (unsigned char const)0, (unsigned char const)2, (unsigned char const)0,
 4691|       |    (unsigned char const)2, (unsigned char const)1, (unsigned char const)1,
 4692|       |    (unsigned char const)1, (unsigned char const)1, (unsigned char const)1,
 4693|       |    (unsigned char const)1, (unsigned char const)1, (unsigned char const)2,
 4694|       |    (unsigned char const)4, (unsigned char const)4, (unsigned char const)6,
 4695|       |    (unsigned char const)6, (unsigned char const)1, (unsigned char const)2,
 4696|       |    (unsigned char const)1, (unsigned char const)1, (unsigned char const)2,
 4697|       |    (unsigned char const)1, (unsigned char const)2, (unsigned char const)2,
 4698|       |    (unsigned char const)3, (unsigned char const)5, (unsigned char const)3,
 4699|       |    (unsigned char const)3, (unsigned char const)3, (unsigned char const)2,
 4700|       |    (unsigned char const)4, (unsigned char const)2, (unsigned char const)3,
 4701|       |    (unsigned char const)2, (unsigned char const)1, (unsigned char const)2,
 4702|       |    (unsigned char const)2, (unsigned char const)1, (unsigned char const)2,
 4703|       |    (unsigned char const)2, (unsigned char const)1, (unsigned char const)2,
 4704|       |    (unsigned char const)2, (unsigned char const)1, (unsigned char const)2,
 4705|       |    (unsigned char const)2, (unsigned char const)1, (unsigned char const)2,
 4706|       |    (unsigned char const)2, (unsigned char const)1, (unsigned char const)2,
 4707|       |    (unsigned char const)2, (unsigned char const)1, (unsigned char const)1,
 4708|       |    (unsigned char const)0, (unsigned char const)1
 4709|       |};
 4710|       |static unsigned char const yydefact[66] = {
 4711|       |    (unsigned char const)2,  (unsigned char const)0,  (unsigned char const)1,
 4712|       |    (unsigned char const)21, (unsigned char const)43, (unsigned char const)19,
 4713|       |    (unsigned char const)46, (unsigned char const)16, (unsigned char const)49,
 4714|       |    (unsigned char const)0,  (unsigned char const)40, (unsigned char const)52,
 4715|       |    (unsigned char const)37, (unsigned char const)18, (unsigned char const)0,
 4716|       |    (unsigned char const)53, (unsigned char const)3,  (unsigned char const)4,
 4717|       |    (unsigned char const)5,  (unsigned char const)6,  (unsigned char const)8,
 4718|       |    (unsigned char const)7,  (unsigned char const)9,  (unsigned char const)34,
 4719|       |    (unsigned char const)10, (unsigned char const)22, (unsigned char const)17,
 4720|       |    (unsigned char const)0,  (unsigned char const)29, (unsigned char const)20,
 4721|       |    (unsigned char const)42, (unsigned char const)45, (unsigned char const)48,
 4722|       |    (unsigned char const)39, (unsigned char const)51, (unsigned char const)36,
 4723|       |    (unsigned char const)23, (unsigned char const)41, (unsigned char const)44,
 4724|       |    (unsigned char const)11, (unsigned char const)47, (unsigned char const)31,
 4725|       |    (unsigned char const)38, (unsigned char const)50, (unsigned char const)35,
 4726|       |    (unsigned char const)0,  (unsigned char const)0,  (unsigned char const)0,
 4727|       |    (unsigned char const)33, (unsigned char const)28, (unsigned char const)0,
 4728|       |    (unsigned char const)27, (unsigned char const)32, (unsigned char const)26,
 4729|       |    (unsigned char const)54, (unsigned char const)24, (unsigned char const)30,
 4730|       |    (unsigned char const)55, (unsigned char const)13, (unsigned char const)0,
 4731|       |    (unsigned char const)12, (unsigned char const)0,  (unsigned char const)54,
 4732|       |    (unsigned char const)25, (unsigned char const)15, (unsigned char const)14
 4733|       |};
 4734|       |static yysigned_char const yydefgoto[12] = {
 4735|       |    (yysigned_char const)-1, (yysigned_char const)1,  (yysigned_char const)16,
 4736|       |    (yysigned_char const)17, (yysigned_char const)18, (yysigned_char const)19,
 4737|       |    (yysigned_char const)20, (yysigned_char const)21, (yysigned_char const)22,
 4738|       |    (yysigned_char const)23, (yysigned_char const)24, (yysigned_char const)60
 4739|       |};
 4740|       |static yysigned_char const yypact[66] = {
 4741|       |    (yysigned_char const)-17, (yysigned_char const)0,
 4742|       |    (yysigned_char const)-17, (yysigned_char const)1,
 4743|       |    (yysigned_char const)-17, (yysigned_char const)-17,
 4744|       |    (yysigned_char const)-17, (yysigned_char const)19,
 4745|       |    (yysigned_char const)-17, (yysigned_char const)-16,
 4746|       |    (yysigned_char const)-17, (yysigned_char const)-17,
 4747|       |    (yysigned_char const)-17, (yysigned_char const)32,
 4748|       |    (yysigned_char const)26,  (yysigned_char const)14,
 4749|       |    (yysigned_char const)-17, (yysigned_char const)-17,
 4750|       |    (yysigned_char const)-17, (yysigned_char const)-17,
 4751|       |    (yysigned_char const)-17, (yysigned_char const)-17,
 4752|       |    (yysigned_char const)-17, (yysigned_char const)27,
 4753|       |    (yysigned_char const)-17, (yysigned_char const)-17,
 4754|       |    (yysigned_char const)-17, (yysigned_char const)-13,
 4755|       |    (yysigned_char const)24,  (yysigned_char const)-17,
 4756|       |    (yysigned_char const)-17, (yysigned_char const)-17,
 4757|       |    (yysigned_char const)-17, (yysigned_char const)-17,
 4758|       |    (yysigned_char const)-17, (yysigned_char const)-17,
 4759|       |    (yysigned_char const)-17, (yysigned_char const)-17,
 4760|       |    (yysigned_char const)-17, (yysigned_char const)-17,
 4761|       |    (yysigned_char const)-17, (yysigned_char const)25,
 4762|       |    (yysigned_char const)-17, (yysigned_char const)-17,
 4763|       |    (yysigned_char const)-17, (yysigned_char const)29,
 4764|       |    (yysigned_char const)30,  (yysigned_char const)31,
 4765|       |    (yysigned_char const)-17, (yysigned_char const)-17,
 4766|       |    (yysigned_char const)33,  (yysigned_char const)-17,
 4767|       |    (yysigned_char const)-17, (yysigned_char const)-17,
 4768|       |    (yysigned_char const)28,  (yysigned_char const)34,
 4769|       |    (yysigned_char const)-17, (yysigned_char const)-17,
 4770|       |    (yysigned_char const)-17, (yysigned_char const)35,
 4771|       |    (yysigned_char const)-17, (yysigned_char const)36,
 4772|       |    (yysigned_char const)-7,  (yysigned_char const)-17,
 4773|       |    (yysigned_char const)-17, (yysigned_char const)-17
 4774|       |};
 4775|       |static yysigned_char const yypgoto[12] = {
 4776|       |    (yysigned_char const)-17, (yysigned_char const)-17,
 4777|       |    (yysigned_char const)-17, (yysigned_char const)-17,
 4778|       |    (yysigned_char const)-17, (yysigned_char const)-17,
 4779|       |    (yysigned_char const)-17, (yysigned_char const)-17,
 4780|       |    (yysigned_char const)-17, (yysigned_char const)-17,
 4781|       |    (yysigned_char const)-17, (yysigned_char const)-12
 4782|       |};
 4783|       |static unsigned char const yytable[56] = {
 4784|       |    (unsigned char const)2,  (unsigned char const)27, (unsigned char const)28,
 4785|       |    (unsigned char const)57, (unsigned char const)49, (unsigned char const)3,
 4786|       |    (unsigned char const)4,  (unsigned char const)5,  (unsigned char const)6,
 4787|       |    (unsigned char const)7,  (unsigned char const)64, (unsigned char const)8,
 4788|       |    (unsigned char const)9,  (unsigned char const)10, (unsigned char const)11,
 4789|       |    (unsigned char const)12, (unsigned char const)13, (unsigned char const)14,
 4790|       |    (unsigned char const)15, (unsigned char const)36, (unsigned char const)37,
 4791|       |    (unsigned char const)25, (unsigned char const)38, (unsigned char const)26,
 4792|       |    (unsigned char const)39, (unsigned char const)40, (unsigned char const)41,
 4793|       |    (unsigned char const)42, (unsigned char const)43, (unsigned char const)44,
 4794|       |    (unsigned char const)48, (unsigned char const)45, (unsigned char const)30,
 4795|       |    (unsigned char const)46, (unsigned char const)31, (unsigned char const)47,
 4796|       |    (unsigned char const)29, (unsigned char const)32, (unsigned char const)57,
 4797|       |    (unsigned char const)33, (unsigned char const)34, (unsigned char const)35,
 4798|       |    (unsigned char const)51, (unsigned char const)52, (unsigned char const)50,
 4799|       |    (unsigned char const)58, (unsigned char const)53, (unsigned char const)59,
 4800|       |    (unsigned char const)54, (unsigned char const)55, (unsigned char const)65,
 4801|       |    (unsigned char const)56, (unsigned char const)0,  (unsigned char const)62,
 4802|       |    (unsigned char const)63, (unsigned char const)61
 4803|       |};
 4804|       |static yysigned_char const yycheck[56] = {
 4805|       |    (yysigned_char const)0,  (yysigned_char const)17, (yysigned_char const)18,
 4806|       |    (yysigned_char const)10, (yysigned_char const)17, (yysigned_char const)5,
 4807|       |    (yysigned_char const)6,  (yysigned_char const)7,  (yysigned_char const)8,
 4808|       |    (yysigned_char const)9,  (yysigned_char const)17, (yysigned_char const)11,
 4809|       |    (yysigned_char const)12, (yysigned_char const)13, (yysigned_char const)14,
 4810|       |    (yysigned_char const)15, (yysigned_char const)16, (yysigned_char const)17,
 4811|       |    (yysigned_char const)18, (yysigned_char const)5,  (yysigned_char const)6,
 4812|       |    (yysigned_char const)20, (yysigned_char const)8,  (yysigned_char const)4,
 4813|       |    (yysigned_char const)10, (yysigned_char const)11, (yysigned_char const)12,
 4814|       |    (yysigned_char const)13, (yysigned_char const)14, (yysigned_char const)15,
 4815|       |    (yysigned_char const)3,  (yysigned_char const)17, (yysigned_char const)6,
 4816|       |    (yysigned_char const)19, (yysigned_char const)8,  (yysigned_char const)21,
 4817|       |    (yysigned_char const)4,  (yysigned_char const)11, (yysigned_char const)10,
 4818|       |    (yysigned_char const)13, (yysigned_char const)14, (yysigned_char const)15,
 4819|       |    (yysigned_char const)17, (yysigned_char const)18, (yysigned_char const)20,
 4820|       |    (yysigned_char const)17, (yysigned_char const)17, (yysigned_char const)19,
 4821|       |    (yysigned_char const)18, (yysigned_char const)18, (yysigned_char const)62,
 4822|       |    (yysigned_char const)18, (yysigned_char const)-1, (yysigned_char const)18,
 4823|       |    (yysigned_char const)18, (yysigned_char const)21
 4824|       |};
 4825|       |static unsigned char const yystos[66] = {
 4826|       |    (unsigned char const)0,  (unsigned char const)23, (unsigned char const)0,
 4827|       |    (unsigned char const)5,  (unsigned char const)6,  (unsigned char const)7,
 4828|       |    (unsigned char const)8,  (unsigned char const)9,  (unsigned char const)11,
 4829|       |    (unsigned char const)12, (unsigned char const)13, (unsigned char const)14,
 4830|       |    (unsigned char const)15, (unsigned char const)16, (unsigned char const)17,
 4831|       |    (unsigned char const)18, (unsigned char const)24, (unsigned char const)25,
 4832|       |    (unsigned char const)26, (unsigned char const)27, (unsigned char const)28,
 4833|       |    (unsigned char const)29, (unsigned char const)30, (unsigned char const)31,
 4834|       |    (unsigned char const)32, (unsigned char const)20, (unsigned char const)4,
 4835|       |    (unsigned char const)17, (unsigned char const)18, (unsigned char const)4,
 4836|       |    (unsigned char const)6,  (unsigned char const)8,  (unsigned char const)11,
 4837|       |    (unsigned char const)13, (unsigned char const)14, (unsigned char const)15,
 4838|       |    (unsigned char const)5,  (unsigned char const)6,  (unsigned char const)8,
 4839|       |    (unsigned char const)10, (unsigned char const)11, (unsigned char const)12,
 4840|       |    (unsigned char const)13, (unsigned char const)14, (unsigned char const)15,
 4841|       |    (unsigned char const)17, (unsigned char const)19, (unsigned char const)21,
 4842|       |    (unsigned char const)3,  (unsigned char const)17, (unsigned char const)20,
 4843|       |    (unsigned char const)17, (unsigned char const)18, (unsigned char const)17,
 4844|       |    (unsigned char const)18, (unsigned char const)18, (unsigned char const)18,
 4845|       |    (unsigned char const)10, (unsigned char const)17, (unsigned char const)19,
 4846|       |    (unsigned char const)33, (unsigned char const)21, (unsigned char const)18,
 4847|       |    (unsigned char const)18, (unsigned char const)17, (unsigned char const)33
 4848|       |};
 4849|       |static table const meridian_table[5] = {{"AM", 265, 0},
 4850|       |    {"A.M.", 265, 0},
 4851|       |    {"PM", 265, 1},
 4852|       |    {"P.M.", 265, 1},
 4853|       |    {(char const *)0, 0, 0}
 4854|       |};
 4855|       |static table const dst_table[1] = {{"DST", 259, 0}};
 4856|       |static table const month_and_day_table[25] = {
 4857|       |    {"JANUARY", 267, 1},    {"FEBRUARY", 267, 2}, {"MARCH", 267, 3},
 4858|       |    {"APRIL", 267, 4},      {"MAY", 267, 5},      {"JUNE", 267, 6},
 4859|       |    {"JULY", 267, 7},       {"AUGUST", 267, 8},   {"SEPTEMBER", 267, 9},
 4860|       |    {"SEPT", 267, 9},       {"OCTOBER", 267, 10}, {"NOVEMBER", 267, 11},
 4861|       |    {"DECEMBER", 267, 12},  {"SUNDAY", 260, 0},   {"MONDAY", 260, 1},
 4862|       |    {"TUESDAY", 260, 2},    {"TUES", 260, 2},     {"WEDNESDAY", 260, 3},
 4863|       |    {"WEDNES", 260, 3},     {"THURSDAY", 260, 4}, {"THUR", 260, 4},
 4864|       |    {"THURS", 260, 4},      {"FRIDAY", 260, 5},   {"SATURDAY", 260, 6},
 4865|       |    {(char const *)0, 0, 0}
 4866|       |};
 4867|       |static table const time_units_table[11] = {
 4868|       |    {"YEAR", 270, 1},   {"MONTH", 268, 1},      {"FORTNIGHT", 261, 14},
 4869|       |    {"WEEK", 261, 7},   {"DAY", 261, 1},        {"HOUR", 263, 1},
 4870|       |    {"MINUTE", 266, 1}, {"MIN", 266, 1},        {"SECOND", 269, 1},
 4871|       |    {"SEC", 269, 1},    {(char const *)0, 0, 0}
 4872|       |};
 4873|       |static table const relative_time_table[20] = {
 4874|       |    {"TOMORROW", 261, 1}, {"YESTERDAY", 261, -1}, {"TODAY", 261, 0},
 4875|       |    {"NOW", 261, 0},      {"LAST", 273, -1},      {"THIS", 273, 0},
 4876|       |    {"NEXT", 273, 1},     {"FIRST", 273, 1},      {"THIRD", 273, 3},
 4877|       |    {"FOURTH", 273, 4},   {"FIFTH", 273, 5},      {"SIXTH", 273, 6},
 4878|       |    {"SEVENTH", 273, 7},  {"EIGHTH", 273, 8},     {"NINTH", 273, 9},
 4879|       |    {"TENTH", 273, 10},   {"ELEVENTH", 273, 11},  {"TWELFTH", 273, 12},
 4880|       |    {"AGO", 258, 1},      {(char const *)0, 0, 0}
 4881|       |};
 4882|       |static table const time_zone_table[51] = {
 4883|       |    {"GMT", 271, 0},     {"UT", 271, 0},     {"UTC", 271, 0},
 4884|       |    {"WET", 271, 0},     {"WEST", 262, 0},   {"BST", 262, 0},
 4885|       |    {"ART", 271, -180},  {"BRT", 271, -180}, {"BRST", 262, -180},
 4886|       |    {"NST", 271, -210},  {"NDT", 262, -210}, {"AST", 271, -240},
 4887|       |    {"ADT", 262, -240},  {"CLT", 271, -240}, {"CLST", 262, -240},
 4888|       |    {"EST", 271, -300},  {"EDT", 262, -300}, {"CST", 271, -360},
 4889|       |    {"CDT", 262, -360},  {"MST", 271, -420}, {"MDT", 262, -420},
 4890|       |    {"PST", 271, -480},  {"PDT", 262, -480}, {"AKST", 271, -540},
 4891|       |    {"AKDT", 262, -540}, {"HST", 271, -600}, {"HAST", 271, -600},
 4892|       |    {"HADT", 262, -600}, {"SST", 271, -720}, {"WAT", 271, 60},
 4893|       |    {"CET", 271, 60},    {"CEST", 262, 60},  {"MET", 271, 60},
 4894|       |    {"MEZ", 271, 60},    {"MEST", 262, 60},  {"MESZ", 262, 60},
 4895|       |    {"EET", 271, 120},   {"EEST", 262, 120}, {"CAT", 271, 120},
 4896|       |    {"SAST", 271, 120},  {"EAT", 271, 180},  {"MSK", 271, 180},
 4897|       |    {"MSD", 262, 180},   {"IST", 271, 330},  {"SGT", 271, 480},
 4898|       |    {"KST", 271, 540},   {"JST", 271, 540},  {"GST", 271, 600},
 4899|       |    {"NZST", 271, 720},  {"NZDT", 262, 720}, {(char const *)0, 0, 0}
 4900|       |};
 4901|       |static table const military_table[26] = {
 4902|       |    {"A", 271, -60},  {"B", 271, -120},       {"C", 271, -180},
 4903|       |    {"D", 271, -240}, {"E", 271, -300},       {"F", 271, -360},
 4904|       |    {"G", 271, -420}, {"H", 271, -480},       {"I", 271, -540},
 4905|       |    {"K", 271, -600}, {"L", 271, -660},       {"M", 271, -720},
 4906|       |    {"N", 271, 60},   {"O", 271, 120},        {"P", 271, 180},
 4907|       |    {"Q", 271, 240},  {"R", 271, 300},        {"S", 271, 360},
 4908|       |    {"T", 271, 420},  {"U", 271, 480},        {"V", 271, 540},
 4909|       |    {"W", 271, 600},  {"X", 271, 660},        {"Y", 271, 720},
 4910|       |    {"Z", 271, 0},    {(char const *)0, 0, 0}
 4911|       |};
 4912|       |extern char *getcwd(char *buf, size_t size);
 4913|       |__attribute__((__nothrow__)) char *(__attribute__((__leaf__))
 4914|       |                                    rpl_getcwd)(char *buf, size_t size);
 4915|       |char *(__attribute__((__leaf__)) rpl_getcwd)(char *buf, size_t size)
 4916|      0|{
 4917|      0|    char *cwd;
 4918|      0|    char *tmp;
 4919|      0|    size_t tmp___0;
 4920|      0|    int tmp___1;
 4921|      0|    int *tmp___2;
 4922|      0|    char *__cil_tmp8;
 4923|       |
 4924|      0|    {
 4925|      0|        {
 4926|      0|            tmp = getcwd(buf, size);
 4927|      0|            cwd = tmp;
 4928|      0|        }
 4929|      0|        if ((unsigned long)cwd == (unsigned long)((void *)0)) {
 4930|      0|            return ((char *)((void *)0));
 4931|      0|        }
 4932|      0|        {
 4933|      0|            tmp___0 = strlen((char const *)cwd);
 4934|      0|        }
 4935|      0|        if (tmp___0 <= 3839UL) {
 4936|      0|            return (cwd);
 4937|      0|        }
 4938|      0|        else {
 4939|      0|            {
 4940|      0|                tmp___1 = same_name((char const *)cwd, ".");
 4941|      0|            }
 4942|      0|            if (tmp___1) {
 4943|      0|                return (cwd);
 4944|      0|            }
 4945|      0|        }
 4946|      0|        {
 4947|      0|            rpl_free((void *)cwd);
 4948|      0|            tmp___2 = __errno_location();
 4949|      0|            *tmp___2 = 36;
 4950|      0|        }
 4951|      0|        return ((char *)((void *)0));
 4952|      0|    }
 4953|      0|}
 4954|       |extern
 4955|       |__attribute__((__nothrow__)) int(__attribute__((__nonnull__(2), __leaf__))
 4956|       |                                 fstat)(int __fd, struct stat *__buf);
 4957|       |extern void(__attribute__((__nonnull__(1, 4)))
 4958|       |            qsort)(void *__base, size_t __nmemb, size_t __size,
 4959|       |                   int (*__compar)(void const *, void const *));
 4960|       |extern char *(__attribute__((__nonnull__(1))) strrchr)(char const *__s, int __c)
 4961|       |__attribute__((__pure__));
 4962|       |extern int(__attribute__((__nonnull__(1))) dirfd)(DIR *__dirp);
 4963|       |extern __attribute__((__nothrow__)) int(
 4964|       |    __attribute__((__nonnull__(1, 2), __leaf__))
 4965|       |    statfs)(char const *__file, struct statfs *__buf);
 4966|       |extern __attribute__((__nothrow__)) void(__attribute__((__leaf__))
 4967|       |        free)(void *__ptr);
 4968|       |__attribute__((__nothrow__)) void(__attribute__((__leaf__)) rpl_free)(void *p);
 4969|       |void(__attribute__((__leaf__)) rpl_free)(void *p)
 4970|      0|{
 4971|       |
 4972|      0|    {
 4973|      0|        if (p) {
 4974|      0|            {
 4975|      0|                free(p);
 4976|      0|            }
 4977|      0|        }
 4978|      0|        return;
 4979|      0|    }
 4980|      0|}
 4981|       |extern __attribute__((__nothrow__))
 4982|       |FILE *(__attribute__((__leaf__)) fdopen)(int __fd, char const *__modes);
 4983|       |extern __attribute__((__nothrow__)) int(__attribute__((__leaf__))
 4984|       |                                        fileno)(FILE *__stream);
 4985|       |int volatile exit_failure = (int volatile)1;
 4986|       |extern struct _IO_FILE *stdin;
 4987|       |extern __attribute__((__nothrow__)) int(
 4988|       |    __attribute__((__nonnull__(1, 2), __leaf__))
 4989|       |    strcasecmp)(char const *__s1, char const *__s2) __attribute__((__pure__));
 4990|       |extern __attribute__((__nothrow__)) int(
 4991|       |    __attribute__((__nonnull__(1, 2), __leaf__))
 4992|       |    strncasecmp)(char const *__s1, char const *__s2, size_t __n)
 4993|       |__attribute__((__pure__));
 4994|       |extern int fnmatch(char const *__pattern, char const *__name, int __flags);
 4995|       |extern int fcntl(int __fd, int __cmd, ...);
 4996|       |size_t dir_len(char const *path);
 4997|       |size_t dir_len(char const *path)
 4998|      0|{
 4999|      0|    size_t prefix_length;
 5000|      0|    size_t length;
 5001|      0|    char *tmp;
 5002|       |
 5003|      0|    {
 5004|      0|        {
 5005|      0|            prefix_length = (size_t)0;
 5006|      0|            tmp = base_name(path);
 5007|      0|            length = (size_t)(tmp - (char *)path);
 5008|      0|        }
 5009|      0|        {
 5010|      0|            while (1) {
 5011|      0|while_continue: /* CIL Label */
 5012|      0|                ;
 5013|       |
 5014|      0|                if (!(prefix_length < length)) {
 5015|      0|                    goto while_break;
 5016|      0|                }
 5017|      0|                if (!((int const) * (path + (length - 1UL)) == 47)) {
 5018|      0|                    return (length);
 5019|      0|                }
 5020|      0|                length--;
 5021|      0|            }
 5022|      0|while_break___0: /* CIL Label */
 5023|      0|            ;
 5024|      0|        }
 5025|      0|while_break:
 5026|      0|        ;
 5027|      0|        return (prefix_length +
 5028|      0|                (size_t)((int const) * (path + prefix_length) == 47));
 5029|      0|    }
 5030|      0|}
 5031|       |char *dir_name(char const *path)
 5032|      0|{
 5033|      0|    size_t length;
 5034|      0|    size_t tmp;
 5035|      0|    int append_dot;
 5036|      0|    char *newpath;
 5037|      0|    void *tmp___0;
 5038|      0|    size_t tmp___1;
 5039|       |
 5040|      0|    {
 5041|      0|        {
 5042|      0|            tmp = dir_len(path);
 5043|      0|            length = tmp;
 5044|      0|            append_dot = length == 0UL;
 5045|      0|            tmp___0 = xmalloc((length + (size_t)append_dot) + 1UL);
 5046|      0|            newpath = (char *)tmp___0;
 5047|      0|            memcpy((void * /* __restrict  */)((void *)newpath),
 5048|      0|                   (void const * /* __restrict  */)((void const *)path), length);
 5049|      0|        }
 5050|      0|        if (append_dot) {
 5051|      0|            tmp___1 = length;
 5052|      0|            length++;
 5053|      0|            *(newpath + tmp___1) = (char)'.';
 5054|      0|        }
 5055|      0|        *(newpath + length) = (char)0;
 5056|      0|        return (newpath);
 5057|      0|    }
 5058|      0|}
 5059|       |char const diacrit_base[256];
 5060|       |char const diacrit_diac[256];
 5061|       |char const diacrit_base[256] = {
 5062|       |    (char const)0,   (char const)0,   (char const)0,   (char const)0,
 5063|       |    (char const)0,   (char const)0,   (char const)0,   (char const)0,
 5064|       |    (char const)0,   (char const)0,   (char const)0,   (char const)0,
 5065|       |    (char const)0,   (char const)0,   (char const)0,   (char const)0,
 5066|       |    (char const)0,   (char const)0,   (char const)0,   (char const)0,
 5067|       |    (char const)0,   (char const)0,   (char const)0,   (char const)0,
 5068|       |    (char const)0,   (char const)0,   (char const)0,   (char const)0,
 5069|       |    (char const)0,   (char const)0,   (char const)0,   (char const)0,
 5070|       |    (char const)0,   (char const)0,   (char const)0,   (char const)0,
 5071|       |    (char const)0,   (char const)0,   (char const)0,   (char const)0,
 5072|       |    (char const)0,   (char const)0,   (char const)0,   (char const)0,
 5073|       |    (char const)0,   (char const)0,   (char const)0,   (char const)0,
 5074|       |    (char const)0,   (char const)0,   (char const)0,   (char const)0,
 5075|       |    (char const)0,   (char const)0,   (char const)0,   (char const)0,
 5076|       |    (char const)0,   (char const)0,   (char const)0,   (char const)0,
 5077|       |    (char const)0,   (char const)0,   (char const)0,   (char const)0,
 5078|       |    (char const)0,   (char const)'A', (char const)'B', (char const)'C',
 5079|       |    (char const)'D', (char const)'E', (char const)'F', (char const)'G',
 5080|       |    (char const)'H', (char const)'I', (char const)'J', (char const)'K',
 5081|       |    (char const)'L', (char const)'M', (char const)'N', (char const)'O',
 5082|       |    (char const)'P', (char const)'Q', (char const)'R', (char const)'S',
 5083|       |    (char const)'T', (char const)'U', (char const)'V', (char const)'W',
 5084|       |    (char const)'X', (char const)'Y', (char const)'Z', (char const)0,
 5085|       |    (char const)0,   (char const)0,   (char const)0,   (char const)0,
 5086|       |    (char const)0,   (char const)'a', (char const)'b', (char const)'c',
 5087|       |    (char const)'d', (char const)'e', (char const)'f', (char const)'g',
 5088|       |    (char const)'h', (char const)'i', (char const)'j', (char const)'k',
 5089|       |    (char const)'l', (char const)'m', (char const)'n', (char const)'o',
 5090|       |    (char const)'p', (char const)'q', (char const)'r', (char const)'s',
 5091|       |    (char const)'t', (char const)'u', (char const)'v', (char const)'w',
 5092|       |    (char const)'x', (char const)'y', (char const)'z', (char const)0,
 5093|       |    (char const)0,   (char const)0,   (char const)0,   (char const)0,
 5094|       |    (char const)0,   (char const)0,   (char const)0,   (char const)0,
 5095|       |    (char const)0,   (char const)0,   (char const)0,   (char const)0,
 5096|       |    (char const)0,   (char const)0,   (char const)0,   (char const)0,
 5097|       |    (char const)0,   (char const)0,   (char const)0,   (char const)0,
 5098|       |    (char const)0,   (char const)0,   (char const)0,   (char const)0,
 5099|       |    (char const)0,   (char const)0,   (char const)0,   (char const)0,
 5100|       |    (char const)0,   (char const)0,   (char const)0,   (char const)0,
 5101|       |    (char const)0,   (char const)0,   (char const)0,   (char const)0,
 5102|       |    (char const)0,   (char const)0,   (char const)0,   (char const)0,
 5103|       |    (char const)0,   (char const)0,   (char const)0,   (char const)0,
 5104|       |    (char const)0,   (char const)0,   (char const)0,   (char const)0,
 5105|       |    (char const)0,   (char const)0,   (char const)0,   (char const)0,
 5106|       |    (char const)0,   (char const)0,   (char const)0,   (char const)0,
 5107|       |    (char const)0,   (char const)0,   (char const)0,   (char const)0,
 5108|       |    (char const)0,   (char const)0,   (char const)0,   (char const)0,
 5109|       |    (char const)0,   (char const)0,   (char const)0,   (char const)0,
 5110|       |    (char const)'A', (char const)'A', (char const)'A', (char const)'A',
 5111|       |    (char const)'A', (char const)'A', (char const)'A', (char const)'C',
 5112|       |    (char const)'E', (char const)'E', (char const)'E', (char const)'E',
 5113|       |    (char const)'I', (char const)'I', (char const)'I', (char const)'I',
 5114|       |    (char const)0,   (char const)'N', (char const)'O', (char const)'O',
 5115|       |    (char const)'O', (char const)'O', (char const)'O', (char const)0,
 5116|       |    (char const)'O', (char const)'U', (char const)'U', (char const)'U',
 5117|       |    (char const)'U', (char const)'Y', (char const)0,   (char const)0,
 5118|       |    (char const)'a', (char const)'a', (char const)'a', (char const)'a',
 5119|       |    (char const)'a', (char const)'a', (char const)'a', (char const)'c',
 5120|       |    (char const)'e', (char const)'e', (char const)'e', (char const)'e',
 5121|       |    (char const)'i', (char const)'i', (char const)'i', (char const)'i',
 5122|       |    (char const)0,   (char const)'n', (char const)'o', (char const)'o',
 5123|       |    (char const)'o', (char const)'o', (char const)'o', (char const)0,
 5124|       |    (char const)'o', (char const)'u', (char const)'u', (char const)'u',
 5125|       |    (char const)'u', (char const)'y', (char const)0,   (char const)'y'
 5126|       |};
 5127|       |char const diacrit_diac[256] = {
 5128|       |    (char const)0, (char const)0, (char const)0, (char const)0, (char const)0,
 5129|       |    (char const)0, (char const)0, (char const)0, (char const)0, (char const)0,
 5130|       |    (char const)0, (char const)0, (char const)0, (char const)0, (char const)0,
 5131|       |    (char const)0, (char const)0, (char const)0, (char const)0, (char const)0,
 5132|       |    (char const)0, (char const)0, (char const)0, (char const)0, (char const)0,
 5133|       |    (char const)0, (char const)0, (char const)0, (char const)0, (char const)0,
 5134|       |    (char const)0, (char const)0, (char const)0, (char const)0, (char const)0,
 5135|       |    (char const)0, (char const)0, (char const)0, (char const)0, (char const)0,
 5136|       |    (char const)0, (char const)0, (char const)0, (char const)0, (char const)0,
 5137|       |    (char const)0, (char const)0, (char const)0, (char const)0, (char const)0,
 5138|       |    (char const)0, (char const)0, (char const)0, (char const)0, (char const)0,
 5139|       |    (char const)0, (char const)0, (char const)0, (char const)0, (char const)0,
 5140|       |    (char const)0, (char const)0, (char const)0, (char const)0, (char const)0,
 5141|       |    (char const)0, (char const)0, (char const)0, (char const)0, (char const)0,
 5142|       |    (char const)0, (char const)0, (char const)0, (char const)0, (char const)0,
 5143|       |    (char const)0, (char const)0, (char const)0, (char const)0, (char const)0,
 5144|       |    (char const)0, (char const)0, (char const)0, (char const)0, (char const)0,
 5145|       |    (char const)0, (char const)0, (char const)0, (char const)0, (char const)0,
 5146|       |    (char const)0, (char const)0, (char const)0, (char const)0, (char const)4,
 5147|       |    (char const)0, (char const)3, (char const)0, (char const)0, (char const)0,
 5148|       |    (char const)0, (char const)0, (char const)0, (char const)0, (char const)0,
 5149|       |    (char const)0, (char const)0, (char const)0, (char const)0, (char const)0,
 5150|       |    (char const)0, (char const)0, (char const)0, (char const)0, (char const)0,
 5151|       |    (char const)0, (char const)0, (char const)0, (char const)0, (char const)0,
 5152|       |    (char const)0, (char const)0, (char const)0, (char const)0, (char const)0,
 5153|       |    (char const)0, (char const)6, (char const)0, (char const)0, (char const)0,
 5154|       |    (char const)0, (char const)0, (char const)0, (char const)0, (char const)0,
 5155|       |    (char const)0, (char const)0, (char const)0, (char const)0, (char const)0,
 5156|       |    (char const)0, (char const)0, (char const)0, (char const)0, (char const)0,
 5157|       |    (char const)0, (char const)0, (char const)0, (char const)0, (char const)0,
 5158|       |    (char const)0, (char const)0, (char const)0, (char const)0, (char const)0,
 5159|       |    (char const)0, (char const)0, (char const)0, (char const)0, (char const)0,
 5160|       |    (char const)0, (char const)0, (char const)0, (char const)0, (char const)0,
 5161|       |    (char const)0, (char const)0, (char const)0, (char const)0, (char const)0,
 5162|       |    (char const)0, (char const)0, (char const)0, (char const)0, (char const)0,
 5163|       |    (char const)0, (char const)0, (char const)0, (char const)0, (char const)0,
 5164|       |    (char const)0, (char const)0, (char const)0, (char const)0, (char const)0,
 5165|       |    (char const)0, (char const)0, (char const)0, (char const)0, (char const)0,
 5166|       |    (char const)0, (char const)0, (char const)3, (char const)2, (char const)4,
 5167|       |    (char const)6, (char const)5, (char const)8, (char const)1, (char const)7,
 5168|       |    (char const)3, (char const)2, (char const)4, (char const)5, (char const)3,
 5169|       |    (char const)2, (char const)4, (char const)5, (char const)0, (char const)6,
 5170|       |    (char const)3, (char const)2, (char const)4, (char const)6, (char const)5,
 5171|       |    (char const)0, (char const)9, (char const)3, (char const)2, (char const)4,
 5172|       |    (char const)5, (char const)2, (char const)0, (char const)0, (char const)3,
 5173|       |    (char const)2, (char const)4, (char const)6, (char const)5, (char const)8,
 5174|       |    (char const)1, (char const)7, (char const)3, (char const)2, (char const)4,
 5175|       |    (char const)5, (char const)3, (char const)2, (char const)4, (char const)5,
 5176|       |    (char const)0, (char const)6, (char const)3, (char const)2, (char const)4,
 5177|       |    (char const)6, (char const)5, (char const)0, (char const)9, (char const)3,
 5178|       |    (char const)2, (char const)4, (char const)5, (char const)2, (char const)0,
 5179|       |    (char const)0
 5180|       |};
 5181|       |void close_stdout(void);
 5182|       |extern __attribute__((__nothrow__))
 5183|       |size_t(__attribute__((__leaf__)) __fpending)(FILE *__fp);
 5184|       |static char const *file_name;
 5185|       |void close_stdout(void)
 5186|      2|{
 5187|      2|    int e;
 5188|      2|    int tmp___0;
 5189|      2|    int tmp___1;
 5190|      2|    size_t tmp___2;
 5191|      2|    int *tmp___3;
 5192|      2|    int tmp___4;
 5193|      2|    char const *write_error;
 5194|      2|    char *tmp___5;
 5195|      2|    char *tmp___6;
 5196|      2|    char *__cil_tmp10;
 5197|       |
 5198|      2|    {
 5199|      2|        {
 5200|      2|            tmp___1 = ferror_unlocked(stdout);
 5201|      2|        }
 5202|      2|        if (tmp___1) {
 5203|      0|            tmp___0 = 0;
 5204|      0|        }
 5205|      2|        else {
 5206|      2|            tmp___0 = -1;
 5207|      2|        }
 5208|      2|        e = tmp___0;
 5209|      2|        if (e) {
 5210|      2|            {
 5211|      2|                tmp___2 = __fpending(stdout);
 5212|      2|            }
 5213|      2|            if (tmp___2 == 0UL) {
 5214|      2|                return;
 5215|      2|            }
 5216|      2|        }
 5217|      0|        {
 5218|      0|            tmp___4 = fclose(stdout);
 5219|      0|        }
 5220|      0|        if (tmp___4 != 0) {
 5221|      0|            {
 5222|      0|                tmp___3 = __errno_location();
 5223|      0|                e = *tmp___3;
 5224|      0|            }
 5225|      0|        }
 5226|      0|        if (0 <= e) {
 5227|      0|            {
 5228|      0|                tmp___5 = gettext("write error");
 5229|      0|                write_error = (char const *)tmp___5;
 5230|      0|            }
 5231|      0|            if (file_name) {
 5232|      0|                {
 5233|      0|                    tmp___6 = quotearg_colon(file_name);
 5234|      0|                    error((int)exit_failure, e, "%s: %s", tmp___6, write_error);
 5235|      0|                }
 5236|      0|            }
 5237|      0|            else {
 5238|      0|                {
 5239|      0|                    error((int)exit_failure, e, "%s", write_error);
 5240|      0|                }
 5241|      0|            }
 5242|      0|        }
 5243|      0|        return;
 5244|      2|    }
 5245|      2|}
 5246|       |extern struct hostent *gethostbyaddr(void const *__addr, __socklen_t __len,
 5247|       |                                     int __type);
 5248|       |extern struct hostent *gethostbyname(char const *__name);
 5249|       |extern __attribute__((__nothrow__)) char *(__attribute__((__leaf__))
 5250|       |        inet_ntoa)(struct in_addr __in);
 5251|       |extern __attribute__((__nothrow__)) double(
 5252|       |    __attribute__((__nonnull__(1), __leaf__))
 5253|       |    strtod)(char const *__restrict __nptr, char **__restrict __endptr);
 5254|       |char *base_name(char const *name)
 5255|      2|{
 5256|      2|    char const *base;
 5257|      2|    char const *p;
 5258|       |
 5259|      2|    {
 5260|      2|        base = name + 0;
 5261|      2|        p = base;
 5262|      2|        {
 5263|     59|            while (1) {
 5264|     59|while_continue: /* CIL Label */
 5265|     59|                ;
 5266|       |
 5267|     59|                if (!*p) {
 5268|      2|                    goto while_break;
 5269|      2|                }
 5270|     57|                if ((int const) * p == 47) {
 5271|      5|                    {
 5272|      5|                        while (1) {
 5273|      5|while_continue___0: /* CIL Label */
 5274|      5|                            ;
 5275|      5|                            p++;
 5276|      5|                            if (!((int const) * p == 47)) {
 5277|      5|                                goto while_break___0;
 5278|      5|                            }
 5279|      5|                        }
 5280|      0|while_break___2: /* CIL Label */
 5281|      0|                        ;
 5282|      0|                    }
 5283|      5|while_break___0:
 5284|      5|                    ;
 5285|      5|                    if (!*p) {
 5286|      0|                        if ((int const) * base == 47) {
 5287|      0|                            base = p - 1;
 5288|      0|                        }
 5289|      0|                        goto while_break;
 5290|      0|                    }
 5291|      5|                    base = p;
 5292|      5|                }
 5293|     57|                p++;
 5294|     57|            }
 5295|      0|while_break___1: /* CIL Label */
 5296|      0|            ;
 5297|      0|        }
 5298|      2|while_break:
 5299|      2|        ;
 5300|      2|        return ((char *)base);
 5301|      0|    }
 5302|      0|}
 5303|       |size_t base_len(char const *name)
 5304|      2|{
 5305|      2|    size_t len;
 5306|       |
 5307|      2|    {
 5308|      2|        {
 5309|      2|            len = strlen(name);
 5310|      2|        }
 5311|      2|        {
 5312|      2|            while (1) {
 5313|      2|while_continue: /* CIL Label */
 5314|      2|                ;
 5315|       |
 5316|      2|                if (1UL < len) {
 5317|      2|                    if (!((int const) * (name + (len - 1UL)) == 47)) {
 5318|      2|                        goto while_break;
 5319|      2|                    }
 5320|      2|                }
 5321|      0|                else {
 5322|      0|                    goto while_break;
 5323|      0|                }
 5324|      0|                goto __Cont;
 5325|      0|__Cont:
 5326|      0|                len--;
 5327|      0|            }
 5328|      0|while_break___0: /* CIL Label */
 5329|      0|            ;
 5330|      0|        }
 5331|      2|while_break:
 5332|      2|        ;
 5333|      2|        return (len);
 5334|      0|    }
 5335|      0|}
 5336|       |void (*argmatch_die)(void);
 5337|       |char const *simple_backup_suffix;
 5338|       |char const *simple_backup_suffix = "~";
 5339|       |static char const *const backup_args[9] = {
 5340|       |    (char const * /* const  */) "none",
 5341|       |    (char const * /* const  */) "off",
 5342|       |    (char const * /* const  */) "simple",
 5343|       |    (char const * /* const  */) "never",
 5344|       |    (char const * /* const  */) "existing",
 5345|       |    (char const * /* const  */) "nil",
 5346|       |    (char const * /* const  */) "numbered",
 5347|       |    (char const * /* const  */) "t",
 5348|       |    (char const * /* const  */)((char const *)0)
 5349|       |};
 5350|       |static enum backup_type const backup_types[8] = {
 5351|       |    (enum backup_type const)0, (enum backup_type const)0,
 5352|       |    (enum backup_type const)1, (enum backup_type const)1,
 5353|       |    (enum backup_type const)2, (enum backup_type const)2,
 5354|       |    (enum backup_type const)3, (enum backup_type const)3
 5355|       |};
 5356|       |extern struct _IO_FILE *stderr;
 5357|       |void usage(int status);
 5358|       |extern
 5359|       |__attribute__((__nothrow__)) long(__attribute__((__nonnull__(1), __leaf__))
 5360|       |                                  pathconf)(char const *__path, int __name);
 5361|       |extern int printf(char const *__restrict __format, ...);
 5362|       |extern char *optarg;
 5363|       |extern
 5364|       |__attribute__((__nothrow__)) int(__attribute__((__nonnull__(1), __leaf__))
 5365|       |                                 atexit)(void (*__func)(void));
 5366|       |extern
 5367|       |__attribute__((__nothrow__)) char *(__attribute__((__leaf__))
 5368|       |                                    textdomain)(char const *__domainname);
 5369|       |extern __attribute__((__nothrow__)) char *(__attribute__((
 5370|       |            __leaf__)) bindtextdomain)(char const *__domainname, char const *__dirname);
 5371|       |char *program_name;
 5372|       |static int create_parents;
 5373|       |static struct option const longopts[6] = {
 5374|       |    {"mode", 1, (int *)((void *)0), 'm'},
 5375|       |    {"parents", 0, (int *)((void *)0), 'p'},
 5376|       |    {"verbose", 0, (int *)((void *)0), 'v'},
 5377|       |    {"help", 0, (int *)0, -130},
 5378|       |    {"version", 0, (int *)0, -131},
 5379|       |    {(char const *)((void *)0), 0, (int *)((void *)0), 0}
 5380|       |};
 5381|       |void usage(int status)
 5382|      0|{
 5383|      0|    char *tmp;
 5384|      0|    char *tmp___0;
 5385|      0|    char *tmp___1;
 5386|      0|    char *tmp___2;
 5387|      0|    char *tmp___3;
 5388|      0|    char *tmp___4;
 5389|      0|    char *tmp___5;
 5390|      0|    char *tmp___6;
 5391|      0|    char *__cil_tmp10;
 5392|      0|    char *__cil_tmp11;
 5393|      0|    char *__cil_tmp12;
 5394|      0|    char *__cil_tmp13;
 5395|      0|    char *__cil_tmp14;
 5396|      0|    char *__cil_tmp15;
 5397|      0|    char *__cil_tmp16;
 5398|      0|    char *__cil_tmp17;
 5399|       |
 5400|      0|    {
 5401|      0|        if (status != 0) {
 5402|      0|            {
 5403|      0|                tmp = gettext("Try `%s --help\' for more information.\n");
 5404|      0|                fprintf((FILE * /* __restrict  */) stderr,
 5405|      0|                        (char const * /* __restrict  */)((char const *)tmp),
 5406|      0|                        program_name);
 5407|      0|            }
 5408|      0|        }
 5409|      0|        else {
 5410|      0|            {
 5411|      0|                tmp___0 = gettext("Usage: %s [OPTION] DIRECTORY...\n");
 5412|      0|                printf((char const * /* __restrict  */)((char const *)tmp___0),
 5413|      0|                       program_name);
 5414|      0|                tmp___1 = gettext(
 5415|      0|                              "Create the DIRECTORY(ies), if they do not already exist.\n\n");
 5416|      0|                fputs_unlocked((char const * /* __restrict  */)((char const *)tmp___1),
 5417|      0|                               (FILE * /* __restrict  */) stdout);
 5418|      0|                tmp___2 = gettext("Mandatory arguments to long options are mandatory "
 5419|      0|                                  "for short options too.\n");
 5420|      0|                fputs_unlocked((char const * /* __restrict  */)((char const *)tmp___2),
 5421|      0|                               (FILE * /* __restrict  */) stdout);
 5422|      0|                tmp___3 = gettext(
 5423|      0|                              "  -m, --mode=MODE   set permission mode (as in chmod), not "
 5424|      0|                              "rwxrwxrwx - umask\n  -p, --parents     no error if existing, make "
 5425|      0|                              "parent directories as needed\n  -v, --verbose     print a message "
 5426|      0|                              "for each created directory\n");
 5427|      0|                fputs_unlocked((char const * /* __restrict  */)((char const *)tmp___3),
 5428|      0|                               (FILE * /* __restrict  */) stdout);
 5429|      0|                tmp___4 = gettext("      --help     display this help and exit\n");
 5430|      0|                fputs_unlocked((char const * /* __restrict  */)((char const *)tmp___4),
 5431|      0|                               (FILE * /* __restrict  */) stdout);
 5432|      0|                tmp___5 =
 5433|      0|                    gettext("      --version  output version information and exit\n");
 5434|      0|                fputs_unlocked((char const * /* __restrict  */)((char const *)tmp___5),
 5435|      0|                               (FILE * /* __restrict  */) stdout);
 5436|      0|                tmp___6 = gettext("\nReport bugs to <%s>.\n");
 5437|      0|                printf((char const * /* __restrict  */)((char const *)tmp___6),
 5438|      0|                       "bug-coreutils@gnu.org");
 5439|      0|            }
 5440|      0|        }
 5441|      0|        {
 5442|      0|            exit(status);
 5443|      0|        }
 5444|      0|    }
 5445|      0|}
 5446|       |int main(int argc, char **argv)
 5447|      2|{
 5448|      2|    mode_t newmode;
 5449|      2|    mode_t parent_mode;
 5450|      2|    char const *specified_mode;
 5451|      2|    char const *verbose_fmt_string;
 5452|      2|    int errors;
 5453|      2|    int optc;
 5454|      2|    char *tmp;
 5455|      2|    char *tmp___0;
 5456|      2|    mode_t umask_value;
 5457|      2|    __mode_t tmp___1;
 5458|      2|    struct mode_change *change;
 5459|      2|    struct mode_change *tmp___2;
 5460|      2|    __mode_t tmp___3;
 5461|      2|    char const *tmp___4;
 5462|      2|    char *tmp___5;
 5463|      2|    int fail;
 5464|      2|    char *dir;
 5465|      2|    char const *dir___0;
 5466|      2|    int dir_created;
 5467|      2|    char const *tmp___6;
 5468|      2|    char *tmp___7;
 5469|      2|    char const *tmp___8;
 5470|      2|    char const *tmp___9;
 5471|      2|    char *tmp___10;
 5472|      2|    int *tmp___11;
 5473|      2|    char *__cil_tmp28;
 5474|      2|    char *__cil_tmp29;
 5475|      2|    char *__cil_tmp30;
 5476|      2|    char *__cil_tmp31;
 5477|      2|    char *__cil_tmp32;
 5478|      2|    char *__cil_tmp33;
 5479|      2|    char *__cil_tmp34;
 5480|      2|    char *__cil_tmp35;
 5481|      2|    char *__cil_tmp36;
 5482|       |
 5483|      2|    {
 5484|      2|        {
 5485|      2|            specified_mode = (char const *)((void *)0);
 5486|      2|            verbose_fmt_string = (char const *)((void *)0);
 5487|      2|            errors = 0;
 5488|      2|            program_name = *(argv + 0);
 5489|      2|            setlocale(6, "");
 5490|      2|            bindtextdomain("coreutils", "/usr/local/share/locale");
 5491|      2|            textdomain("coreutils");
 5492|      2|            atexit(&close_stdout);
 5493|      2|            create_parents = 0;
 5494|      2|        }
 5495|      2|        {
 5496|      4|            while (1) {
 5497|      4|while_continue: /* CIL Label */
 5498|      4|                ;
 5499|      4|                {
 5500|      4|                    optc = getopt_long(argc, (char *const *)argv, "pm:v", longopts,
 5501|      4|                                       (int *)((void *)0));
 5502|      4|                }
 5503|      4|                if (!(optc != -1)) {
 5504|      2|                    goto while_break;
 5505|      2|                }
 5506|      2|                if (optc == 0) {
 5507|      0|                    goto case_0;
 5508|      0|                }
 5509|      2|                if (optc == 112) {
 5510|      2|                    goto case_112;
 5511|      2|                }
 5512|      0|                if (optc == 109) {
 5513|      0|                    goto case_109;
 5514|      0|                }
 5515|      0|                if (optc == 118) {
 5516|      0|                    goto case_118;
 5517|      0|                }
 5518|      0|                if (optc == -130) {
 5519|      0|                    goto case_neg_130;
 5520|      0|                }
 5521|      0|                if (optc == -131) {
 5522|      0|                    goto case_neg_131;
 5523|      0|                }
 5524|      0|                goto switch_default;
 5525|      0|case_0:
 5526|      0|                goto switch_break;
 5527|      2|case_112:
 5528|      2|                create_parents = 1;
 5529|      2|                goto switch_break;
 5530|      0|case_109:
 5531|      0|                specified_mode = (char const *)optarg;
 5532|      0|                goto switch_break;
 5533|      0|case_118 : {
 5534|      0|                    tmp = gettext("created directory %s");
 5535|      0|                    verbose_fmt_string = (char const *)tmp;
 5536|      0|                }
 5537|      0|                goto switch_break;
 5538|      0|case_neg_130 : {
 5539|      0|                    usage(0);
 5540|      0|                }
 5541|      0|                goto switch_break;
 5542|      0|case_neg_131 : {
 5543|      0|                    version_etc(stdout, "mkdir", "coreutils", "5.2.1", "David MacKenzie",
 5544|      0|                                (char *)((void *)0));
 5545|      0|                    exit(0);
 5546|      0|                }
 5547|      0|                goto switch_break;
 5548|      0|switch_default : {
 5549|      0|                    usage(1);
 5550|      0|                }
 5551|      2|switch_break:
 5552|      2|                ;
 5553|      2|            }
 5554|      0|while_break___1: /* CIL Label */
 5555|      0|            ;
 5556|      0|        }
 5557|      2|while_break:
 5558|      2|        ;
 5559|      2|        if (optind == argc) {
 5560|      0|            {
 5561|      0|                tmp___0 = gettext("too few arguments");
 5562|      0|                error(0, 0, (char const *)tmp___0);
 5563|      0|                usage(1);
 5564|      0|            }
 5565|      0|        }
 5566|      2|        {
 5567|      2|            newmode = (mode_t)((448 | (448 >> 3)) | ((448 >> 3) >> 3));
 5568|      2|            tmp___1 = umask((__mode_t)0);
 5569|      2|            umask_value = tmp___1;
 5570|      2|            umask(umask_value);
 5571|      2|            parent_mode = ((newmode & ~umask_value) | 128U) | 64U;
 5572|      2|        }
 5573|      2|        if (specified_mode) {
 5574|      0|            {
 5575|      0|                tmp___2 = mode_compile(specified_mode, 0U);
 5576|      0|                change = tmp___2;
 5577|      0|                tmp___3 = umask((__mode_t)0);
 5578|      0|                newmode &= ~tmp___3;
 5579|      0|            }
 5580|      0|            if ((unsigned long)change == (unsigned long)((struct mode_change *)0)) {
 5581|      0|                {
 5582|      0|                    tmp___4 = quote(specified_mode);
 5583|      0|                    tmp___5 = gettext("invalid mode %s");
 5584|      0|                    error(1, 0, (char const *)tmp___5, tmp___4);
 5585|      0|                }
 5586|      0|            }
 5587|      0|            else {
 5588|      0|                if ((unsigned long)change == (unsigned long)((struct mode_change *)1)) {
 5589|      0|                    {
 5590|      0|                        xalloc_die();
 5591|      0|                    }
 5592|      0|                }
 5593|      0|            }
 5594|      0|            {
 5595|      0|                newmode = mode_adjust(newmode, (struct mode_change const *)change);
 5596|      0|            }
 5597|      0|        }
 5598|      2|        {
 5599|      4|            while (1) {
 5600|      4|while_continue___0: /* CIL Label */
 5601|      4|                ;
 5602|       |
 5603|      4|                if (!(optind < argc)) {
 5604|      2|                    goto while_break___0;
 5605|      2|                }
 5606|      2|                fail = 0;
 5607|      2|                if (create_parents) {
 5608|      2|                    {
 5609|      2|                        dir = *(argv + optind);
 5610|      2|                        fail = make_path((char const *)dir, (int)newmode, (int)parent_mode,
 5611|      2|                                         (uid_t)-1, (gid_t)-1, 1, verbose_fmt_string);
 5612|      2|                    }
 5613|      2|                }
 5614|      0|                else {
 5615|      0|                    {
 5616|      0|                        dir___0 = (char const *)*(argv + optind);
 5617|      0|                        fail = make_dir(dir___0, dir___0, newmode, &dir_created);
 5618|      0|                    }
 5619|      0|                    if (!fail) {
 5620|      0|                        if (!create_parents) {
 5621|      0|                            if (!dir_created) {
 5622|      0|                                {
 5623|      0|                                    tmp___6 = quote(dir___0);
 5624|      0|                                    tmp___7 = gettext("cannot create directory %s");
 5625|      0|                                    error(0, 17, (char const *)tmp___7, tmp___6);
 5626|      0|                                    fail = 1;
 5627|      0|                                }
 5628|      0|                            }
 5629|      0|                            else {
 5630|      0|                                goto _L;
 5631|      0|                            }
 5632|      0|                        }
 5633|      0|                        else {
 5634|      0|_L:
 5635|      0|                            if (verbose_fmt_string) {
 5636|      0|                                {
 5637|      0|                                    tmp___8 = quote(dir___0);
 5638|      0|                                    error(0, 0, verbose_fmt_string, tmp___8);
 5639|      0|                                }
 5640|      0|                            }
 5641|      0|                        }
 5642|      0|                    }
 5643|      0|                    if (fail == 0) {
 5644|      0|                        if (specified_mode) {
 5645|      0|                            if (dir_created) {
 5646|      0|                                {
 5647|      0|                                    fail = chmod(dir___0, newmode);
 5648|      0|                                }
 5649|      0|                                if (fail) {
 5650|      0|                                    {
 5651|      0|                                        tmp___9 = quote(dir___0);
 5652|      0|                                        tmp___10 =
 5653|      0|                                            gettext("cannot set permissions of directory %s");
 5654|      0|                                        tmp___11 = __errno_location();
 5655|      0|                                        error(0, *tmp___11, (char const *)tmp___10, tmp___9);
 5656|      0|                                    }
 5657|      0|                                }
 5658|      0|                            }
 5659|      0|                        }
 5660|      0|                    }
 5661|      0|                }
 5662|      2|                if (fail) {
 5663|      0|                    errors = 1;
 5664|      0|                }
 5665|      2|                optind++;
 5666|      2|            }
 5667|      0|while_break___2: /* CIL Label */
 5668|      0|            ;
 5669|      0|        }
 5670|      2|while_break___0 : {
 5671|      2|            exit(errors);
 5672|      0|        }
 5673|      0|    }
 5674|      0|}

