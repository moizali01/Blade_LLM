    1|       |typedef unsigned long __dev_t;
    2|       |typedef unsigned int __uid_t;
    3|       |typedef unsigned int __gid_t;
    4|       |typedef unsigned long __ino_t;
    5|       |typedef unsigned int __mode_t;
    6|       |typedef unsigned long __nlink_t;
    7|       |typedef long __off_t;
    8|       |typedef long __off64_t;
    9|       |typedef int __pid_t;
   10|       |typedef long __time_t;
   11|       |typedef int __clockid_t;
   12|       |typedef long __blksize_t;
   13|       |typedef long __blkcnt_t;
   14|       |typedef long __ssize_t;
   15|       |typedef long __syscall_slong_t;
   16|       |typedef __mode_t mode_t;
   17|       |typedef __off_t off_t;
   18|       |typedef __pid_t pid_t;
   19|       |typedef __ssize_t ssize_t;
   20|       |typedef __time_t time_t;
   21|       |typedef __clockid_t clockid_t;
   22|       |typedef unsigned long size_t;
   23|       |struct timespec {
   24|       |    __time_t tv_sec;
   25|       |    __syscall_slong_t tv_nsec;
   26|       |};
   27|       |struct stat {
   28|       |    __dev_t st_dev;
   29|       |    __ino_t st_ino;
   30|       |    __nlink_t st_nlink;
   31|       |    __mode_t st_mode;
   32|       |    __uid_t st_uid;
   33|       |    __gid_t st_gid;
   34|       |    int __pad0;
   35|       |    __dev_t st_rdev;
   36|       |    __off_t st_size;
   37|       |    __blksize_t st_blksize;
   38|       |    __blkcnt_t st_blocks;
   39|       |    struct timespec st_atim;
   40|       |    struct timespec st_mtim;
   41|       |    struct timespec st_ctim;
   42|       |    __syscall_slong_t __glibc_reserved[3];
   43|       |};
   44|       |struct mtop {
   45|       |    short mt_op;
   46|       |    int mt_count;
   47|       |};
   48|       |struct _IO_FILE;
   49|       |struct _IO_FILE;
   50|       |typedef struct _IO_FILE FILE;
   51|       |typedef void _IO_lock_t;
   52|       |struct _IO_marker {
   53|       |    struct _IO_marker *_next;
   54|       |    struct _IO_FILE *_sbuf;
   55|       |    int _pos;
   56|       |};
   57|       |struct _IO_FILE {
   58|       |    int _flags;
   59|       |    char *_IO_read_ptr;
   60|       |    char *_IO_read_end;
   61|       |    char *_IO_read_base;
   62|       |    char *_IO_write_base;
   63|       |    char *_IO_write_ptr;
   64|       |    char *_IO_write_end;
   65|       |    char *_IO_buf_base;
   66|       |    char *_IO_buf_end;
   67|       |    char *_IO_save_base;
   68|       |    char *_IO_backup_base;
   69|       |    char *_IO_save_end;
   70|       |    struct _IO_marker *_markers;
   71|       |    struct _IO_FILE *_chain;
   72|       |    int _fileno;
   73|       |    int _flags2;
   74|       |    __off_t _old_offset;
   75|       |    unsigned short _cur_column;
   76|       |    signed char _vtable_offset;
   77|       |    char _shortbuf[1];
   78|       |    _IO_lock_t *_lock;
   79|       |    __off64_t _offset;
   80|       |    void *__pad1;
   81|       |    void *__pad2;
   82|       |    void *__pad3;
   83|       |    void *__pad4;
   84|       |    size_t __pad5;
   85|       |    int _mode;
   86|       |    char _unused2[(15UL * sizeof(int) - 4UL * sizeof(void *)) - sizeof(size_t)];
   87|       |};
   88|       |typedef unsigned long uintmax_t;
   89|       |struct posix_header {
   90|       |    char name[100];
   91|       |    char mode[8];
   92|       |    char uid[8];
   93|       |    char gid[8];
   94|       |    char size[12];
   95|       |    char mtime[12];
   96|       |    char chksum[8];
   97|       |    char typeflag;
   98|       |    char linkname[100];
   99|       |    char magic[6];
  100|       |    char version[2];
  101|       |    char uname[32];
  102|       |    char gname[32];
  103|       |    char devmajor[8];
  104|       |    char devminor[8];
  105|       |    char prefix[155];
  106|       |};
  107|       |struct sparse {
  108|       |    char offset[12];
  109|       |    char numbytes[12];
  110|       |};
  111|       |struct sparse_header {
  112|       |    struct sparse sp[21];
  113|       |    char isextended;
  114|       |};
  115|       |struct oldgnu_header {
  116|       |    char unused_pad1[345];
  117|       |    char atime[12];
  118|       |    char ctime[12];
  119|       |    char offset[12];
  120|       |    char longnames[4];
  121|       |    char unused_pad2;
  122|       |    struct sparse sp[4];
  123|       |    char isextended;
  124|       |    char realsize[12];
  125|       |};
  126|       |struct star_header {
  127|       |    char name[100];
  128|       |    char mode[8];
  129|       |    char uid[8];
  130|       |    char gid[8];
  131|       |    char size[12];
  132|       |    char mtime[12];
  133|       |    char chksum[8];
  134|       |    char typeflag;
  135|       |    char linkname[100];
  136|       |    char magic[6];
  137|       |    char version[2];
  138|       |    char uname[32];
  139|       |    char gname[32];
  140|       |    char devmajor[8];
  141|       |    char devminor[8];
  142|       |    char prefix[131];
  143|       |    char atime[12];
  144|       |    char ctime[12];
  145|       |};
  146|       |struct star_in_header {
  147|       |    char fill[345];
  148|       |    char prefix[1];
  149|       |    char fill2;
  150|       |    char fill3[8];
  151|       |    char isextended;
  152|       |    struct sparse sp[4];
  153|       |    char realsize[12];
  154|       |    char offset[12];
  155|       |    char atime[12];
  156|       |    char ctime[12];
  157|       |    char mfill[8];
  158|       |    char xmagic[4];
  159|       |};
  160|       |struct star_ext_header {
  161|       |    struct sparse sp[21];
  162|       |    char isextended;
  163|       |};
  164|       |struct sp_array {
  165|       |    off_t offset;
  166|       |    size_t numbytes;
  167|       |};
  168|       |struct tar_stat_info {
  169|       |    char *orig_file_name;
  170|       |    char *file_name;
  171|       |    int had_trailing_slash;
  172|       |    char *link_name;
  173|       |    unsigned int devminor;
  174|       |    unsigned int devmajor;
  175|       |    char *uname;
  176|       |    char *gname;
  177|       |    struct stat stat;
  178|       |    unsigned long atime_nsec;
  179|       |    unsigned long mtime_nsec;
  180|       |    unsigned long ctime_nsec;
  181|       |    off_t archive_file_size;
  182|       |    _Bool is_sparse;
  183|       |    size_t sparse_map_avail;
  184|       |    size_t sparse_map_size;
  185|       |    struct sp_array *sparse_map;
  186|       |};
  187|       |union block {
  188|       |    char buffer[512];
  189|       |    struct posix_header header;
  190|       |    struct star_header star_header;
  191|       |    struct oldgnu_header oldgnu_header;
  192|       |    struct sparse_header sparse_header;
  193|       |    struct star_in_header star_in_header;
  194|       |    struct star_ext_header star_ext_header;
  195|       |};
  196|       |typedef double tarlong;
  197|       |enum subcommand {
  198|       |    UNKNOWN_SUBCOMMAND = 0,
  199|       |    APPEND_SUBCOMMAND = 1,
  200|       |    CAT_SUBCOMMAND = 2,
  201|       |    CREATE_SUBCOMMAND = 3,
  202|       |    DELETE_SUBCOMMAND = 4,
  203|       |    DIFF_SUBCOMMAND = 5,
  204|       |    EXTRACT_SUBCOMMAND = 6,
  205|       |    LIST_SUBCOMMAND = 7,
  206|       |    UPDATE_SUBCOMMAND = 8
  207|       |};
  208|       |enum access_mode { ACCESS_READ = 0, ACCESS_WRITE = 1, ACCESS_UPDATE = 2 };
  209|       |typedef __dev_t dev_t;
  210|       |typedef __builtin_va_list __gnuc_va_list;
  211|       |typedef __gnuc_va_list va_list;
  212|       |struct utimbuf {
  213|       |    __time_t actime;
  214|       |    __time_t modtime;
  215|       |};
  216|       |enum archive_format {
  217|       |    DEFAULT_FORMAT = 0,
  218|       |    V7_FORMAT = 1,
  219|       |    OLDGNU_FORMAT = 2,
  220|       |    USTAR_FORMAT = 3,
  221|       |    POSIX_FORMAT = 4,
  222|       |    STAR_FORMAT = 5,
  223|       |    GNU_FORMAT = 6
  224|       |};
  225|       |enum read_header {
  226|       |    HEADER_STILL_UNREAD = 0,
  227|       |    HEADER_SUCCESS = 1,
  228|       |    HEADER_SUCCESS_EXTENDED = 2,
  229|       |    HEADER_ZERO_BLOCK = 3,
  230|       |    HEADER_END_OF_FILE = 4,
  231|       |    HEADER_FAILURE = 5
  232|       |};
  233|       |typedef __ino_t ino_t;
  234|       |typedef __gid_t gid_t;
  235|       |typedef __uid_t uid_t;
  236|       |struct obstack;
  237|       |struct obstack;
  238|       |struct mode_change {
  239|       |    char op;
  240|       |    char flags;
  241|       |    mode_t affected;
  242|       |    mode_t value;
  243|       |    struct mode_change *next;
  244|       |};
  245|       |struct name {
  246|       |    struct name *next;
  247|       |    size_t length;
  248|       |    uintmax_t found_count;
  249|       |    int isdir;
  250|       |    char firstch;
  251|       |    char regexp;
  252|       |    int change_dir;
  253|       |    char const *dir_contents;
  254|       |    char fake;
  255|       |    char name[1];
  256|       |};
  257|       |enum dump_status {
  258|       |    dump_status_ok = 0,
  259|       |    dump_status_short = 1,
  260|       |    dump_status_fail = 2,
  261|       |    dump_status_not_implemented = 3
  262|       |};
  263|       |struct xheader {
  264|       |    struct obstack *stk;
  265|       |    size_t size;
  266|       |    char *buffer;
  267|       |};
  268|       |struct hash_tuning {
  269|       |    float shrink_threshold;
  270|       |    float shrink_factor;
  271|       |    float growth_threshold;
  272|       |    float growth_factor;
  273|       |    _Bool is_n_buckets;
  274|       |};
  275|       |typedef struct hash_tuning Hash_tuning;
  276|       |struct hash_table;
  277|       |struct hash_table;
  278|       |typedef struct hash_table Hash_table;
  279|       |struct link {
  280|       |    dev_t dev;
  281|       |    ino_t ino;
  282|       |    size_t nlink;
  283|       |    char name[1];
  284|       |};
  285|       |enum old_files {
  286|       |    DEFAULT_OLD_FILES = 0,
  287|       |    NO_OVERWRITE_DIR_OLD_FILES = 1,
  288|       |    OVERWRITE_OLD_FILES = 2,
  289|       |    UNLINK_FIRST_OLD_FILES = 3,
  290|       |    KEEP_OLD_FILES = 4,
  291|       |    KEEP_NEWER_FILES = 5
  292|       |};
  293|       |enum remove_option {
  294|       |    ORDINARY_REMOVE_OPTION = 0,
  295|       |    RECURSIVE_REMOVE_OPTION = 1,
  296|       |    WANT_DIRECTORY_REMOVE_OPTION = 2
  297|       |};
  298|       |enum permstatus {
  299|       |    UNKNOWN_PERMSTATUS = 0,
  300|       |    ARCHIVED_PERMSTATUS = 1,
  301|       |    INTERDIR_PERMSTATUS = 2
  302|       |};
  303|       |struct delayed_set_stat {
  304|       |    struct delayed_set_stat *next;
  305|       |    struct stat stat_info;
  306|       |    size_t file_name_len;
  307|       |    mode_t invert_permissions;
  308|       |    enum permstatus permstatus;
  309|       |    _Bool after_symlinks;
  310|       |    char file_name[1];
  311|       |};
  312|       |struct string_list;
  313|       |struct string_list;
  314|       |struct delayed_symlink {
  315|       |    struct delayed_symlink *next;
  316|       |    dev_t dev;
  317|       |    ino_t ino;
  318|       |    time_t mtime;
  319|       |    uid_t uid;
  320|       |    gid_t gid;
  321|       |    struct string_list *sources;
  322|       |    char target[1];
  323|       |};
  324|       |struct string_list {
  325|       |    struct string_list *next;
  326|       |    char string[1];
  327|       |};
  328|       |enum strtol_error {
  329|       |    LONGINT_OK = 0,
  330|       |    LONGINT_OVERFLOW = 1,
  331|       |    LONGINT_INVALID_SUFFIX_CHAR = 2,
  332|       |    LONGINT_INVALID_SUFFIX_CHAR_WITH_OVERFLOW = 3,
  333|       |    LONGINT_INVALID = 4
  334|       |};
  335|       |typedef enum strtol_error strtol_error;
  336|       |struct _obstack_chunk {
  337|       |    char *limit;
  338|       |    struct _obstack_chunk *prev;
  339|       |    char contents[4];
  340|       |};
  341|       |struct obstack {
  342|       |    long chunk_size;
  343|       |    struct _obstack_chunk *chunk;
  344|       |    char *object_base;
  345|       |    char *next_free;
  346|       |    char *chunk_limit;
  347|       |    long temp;
  348|       |    int alignment_mask;
  349|       |    struct _obstack_chunk *(*chunkfun)(void *, long);
  350|       |    void (*freefun)(void *, struct _obstack_chunk *);
  351|       |    void *extra_arg;
  352|       |    unsigned int use_extra_arg : 1;
  353|       |    unsigned int maybe_empty_object : 1;
  354|       |    unsigned int alloc_failed : 1;
  355|       |};
  356|       |struct keyword_list {
  357|       |    struct keyword_list *next;
  358|       |    char *pattern;
  359|       |    char *value;
  360|       |};
  361|       |struct xhdr_tab {
  362|       |    char const *keyword;
  363|       |    void (*coder)(struct tar_stat_info const *, char const *, struct xheader *,
  364|       |                  void *data);
  365|       |    void (*decoder)(struct tar_stat_info *, char const *);
  366|       |    _Bool protect;
  367|       |};
  368|       |enum children { NO_CHILDREN = 0, CHANGED_CHILDREN = 1, ALL_CHILDREN = 2 };
  369|       |struct directory {
  370|       |    dev_t device_number;
  371|       |    ino_t inode_number;
  372|       |    enum children children;
  373|       |    _Bool nfs;
  374|       |    _Bool found;
  375|       |    char name[1];
  376|       |};
  377|       |struct tm {
  378|       |    int tm_sec;
  379|       |    int tm_min;
  380|       |    int tm_hour;
  381|       |    int tm_mday;
  382|       |    int tm_mon;
  383|       |    int tm_year;
  384|       |    int tm_wday;
  385|       |    int tm_yday;
  386|       |    int tm_isdst;
  387|       |    long tm_gmtoff;
  388|       |    char const *tm_zone;
  389|       |};
  390|       |enum quoting_style {
  391|       |    literal_quoting_style = 0,
  392|       |    shell_quoting_style = 1,
  393|       |    shell_always_quoting_style = 2,
  394|       |    c_quoting_style = 3,
  395|       |    escape_quoting_style = 4,
  396|       |    locale_quoting_style = 5,
  397|       |    clocale_quoting_style = 6
  398|       |};
  399|       |struct quoting_options;
  400|       |struct quoting_options;
  401|       |enum backup_type { none = 0, simple = 1, numbered_existing = 2, numbered = 3 };
  402|       |struct saved_cwd {
  403|       |    int desc;
  404|       |    char *name;
  405|       |};
  406|       |struct wd {
  407|       |    char const *name;
  408|       |    int saved;
  409|       |    struct saved_cwd saved_cwd;
  410|       |};
  411|       |struct passwd {
  412|       |    char *pw_name;
  413|       |    char *pw_passwd;
  414|       |    __uid_t pw_uid;
  415|       |    __gid_t pw_gid;
  416|       |    char *pw_gecos;
  417|       |    char *pw_dir;
  418|       |    char *pw_shell;
  419|       |};
  420|       |struct group {
  421|       |    char *gr_name;
  422|       |    char *gr_passwd;
  423|       |    __gid_t gr_gid;
  424|       |    char **gr_mem;
  425|       |};
  426|       |struct exclude;
  427|       |struct exclude;
  428|       |typedef int __daddr_t;
  429|       |typedef void (*__sighandler_t)(int);
  430|       |struct mtget {
  431|       |    long mt_type;
  432|       |    long mt_resid;
  433|       |    long mt_dsreg;
  434|       |    long mt_gstat;
  435|       |    long mt_erreg;
  436|       |    __daddr_t mt_fileno;
  437|       |    __daddr_t mt_blkno;
  438|       |};
  439|       |struct tar_sparse_file;
  440|       |struct tar_sparse_file;
  441|       |enum sparse_scan_state { scan_begin = 0, scan_block = 1, scan_end = 2 };
  442|       |struct tar_sparse_optab {
  443|       |    _Bool (*init)(struct tar_sparse_file *);
  444|       |    _Bool (*done)(struct tar_sparse_file *);
  445|       |    _Bool (*sparse_member_p)(struct tar_sparse_file *);
  446|       |    _Bool (*dump_header)(struct tar_sparse_file *);
  447|       |    _Bool (*fixup_header)(struct tar_sparse_file *);
  448|       |    _Bool (*decode_header)(struct tar_sparse_file *);
  449|       |    _Bool (*scan_block)(struct tar_sparse_file *, enum sparse_scan_state, void *);
  450|       |    _Bool (*dump_region)(struct tar_sparse_file *, size_t);
  451|       |    _Bool (*extract_region)(struct tar_sparse_file *, size_t);
  452|       |};
  453|       |struct tar_sparse_file {
  454|       |    int fd;
  455|       |    size_t dumped_size;
  456|       |    struct tar_stat_info *stat_info;
  457|       |    struct tar_sparse_optab *optab;
  458|       |    void *closure;
  459|       |};
  460|       |enum oldgnu_add_status { add_ok = 0, add_finish = 1, add_fail = 2 };
  461|       |union __anonunion_56 {
  462|       |    int __in;
  463|       |    int __i;
  464|       |};
  465|       |union __anonunion_57 {
  466|       |    int __in;
  467|       |    int __i;
  468|       |};
  469|       |union __anonunion_58 {
  470|       |    int __in;
  471|       |    int __i;
  472|       |};
  473|       |union __anonunion_59 {
  474|       |    int __in;
  475|       |    int __i;
  476|       |};
  477|       |union __anonunion_60 {
  478|       |    int __in;
  479|       |    int __i;
  480|       |};
  481|       |union __anonunion_61 {
  482|       |    int __in;
  483|       |    int __i;
  484|       |};
  485|       |union __anonunion_62 {
  486|       |    int __in;
  487|       |    int __i;
  488|       |};
  489|       |union __anonunion_63 {
  490|       |    int __in;
  491|       |    int __i;
  492|       |};
  493|       |union __anonunion_64 {
  494|       |    int __in;
  495|       |    int __i;
  496|       |};
  497|       |union __anonunion_65 {
  498|       |    int __in;
  499|       |    int __i;
  500|       |};
  501|       |union __anonunion_66 {
  502|       |    int __in;
  503|       |    int __i;
  504|       |};
  505|       |union __anonunion_67 {
  506|       |    int __in;
  507|       |    int __i;
  508|       |};
  509|       |struct option {
  510|       |    char const *name;
  511|       |    int has_arg;
  512|       |    int *flag;
  513|       |    int val;
  514|       |};
  515|       |struct fmttab {
  516|       |    char const *name;
  517|       |    enum archive_format fmt;
  518|       |};
  519|       |typedef void *iconv_t;
  520|       |struct dirent {
  521|       |    __ino_t d_ino;
  522|       |    __off_t d_off;
  523|       |    unsigned short d_reclen;
  524|       |    unsigned char d_type;
  525|       |    char d_name[256];
  526|       |};
  527|       |struct __dirstream;
  528|       |struct __dirstream;
  529|       |typedef struct __dirstream DIR;
  530|       |struct patopts {
  531|       |    char const *pattern;
  532|       |    int options;
  533|       |};
  534|       |struct exclude {
  535|       |    struct patopts *exclude;
  536|       |    size_t exclude_alloc;
  537|       |    size_t exclude_count;
  538|       |};
  539|       |struct __anonstruct_textint_27 {
  540|       |    long value;
  541|       |    size_t digits;
  542|       |};
  543|       |typedef struct __anonstruct_textint_27 textint;
  544|       |struct __anonstruct_table_28 {
  545|       |    char const *name;
  546|       |    int type;
  547|       |    int value;
  548|       |};
  549|       |typedef struct __anonstruct_table_28 table;
  550|       |struct __anonstruct_parser_control_31 {
  551|       |    char const *input;
  552|       |    long day_ordinal;
  553|       |    int day_number;
  554|       |    int local_isdst;
  555|       |    long time_zone;
  556|       |    int meridian;
  557|       |    textint year;
  558|       |    long month;
  559|       |    long day;
  560|       |    long hour;
  561|       |    long minutes;
  562|       |    struct timespec seconds;
  563|       |    long rel_year;
  564|       |    long rel_month;
  565|       |    long rel_day;
  566|       |    long rel_hour;
  567|       |    long rel_minutes;
  568|       |    long rel_seconds;
  569|       |    long rel_ns;
  570|       |    _Bool timespec_seen;
  571|       |    size_t dates_seen;
  572|       |    size_t days_seen;
  573|       |    size_t local_zones_seen;
  574|       |    size_t rels_seen;
  575|       |    size_t times_seen;
  576|       |    size_t zones_seen;
  577|       |    table local_time_zone_table[3];
  578|       |};
  579|       |typedef struct __anonstruct_parser_control_31 parser_control;
  580|       |union __anonunion_YYSTYPE_32 {
  581|       |    long intval;
  582|       |    textint textintval;
  583|       |    struct timespec timespec;
  584|       |};
  585|       |typedef union __anonunion_YYSTYPE_32 YYSTYPE;
  586|       |typedef long __suseconds_t;
  587|       |struct timeval {
  588|       |    __time_t tv_sec;
  589|       |    __suseconds_t tv_usec;
  590|       |};
  591|       |struct timezone {
  592|       |    int tz_minuteswest;
  593|       |    int tz_dsttime;
  594|       |};
  595|       |typedef struct timezone *__restrict __timezone_ptr_t;
  596|       |struct hash_entry {
  597|       |    void *data;
  598|       |    struct hash_entry *next;
  599|       |};
  600|       |typedef long ptrdiff_t;
  601|       |struct hash_table {
  602|       |    struct hash_entry *bucket;
  603|       |    struct hash_entry const *bucket_limit;
  604|       |    size_t n_buckets;
  605|       |    size_t n_buckets_used;
  606|       |    size_t n_entries;
  607|       |    Hash_tuning const *tuning;
  608|       |    size_t (*hasher)(void const *, size_t);
  609|       |    _Bool (*comparator)(void const *, void const *);
  610|       |    void (*data_freer)(void *);
  611|       |    struct hash_entry *free_entry_list;
  612|       |};
  613|       |struct lconv {
  614|       |    char *decimal_point;
  615|       |    char *thousands_sep;
  616|       |    char *grouping;
  617|       |    char *int_curr_symbol;
  618|       |    char *currency_symbol;
  619|       |    char *mon_decimal_point;
  620|       |    char *mon_thousands_sep;
  621|       |    char *mon_grouping;
  622|       |    char *positive_sign;
  623|       |    char *negative_sign;
  624|       |    char int_frac_digits;
  625|       |    char frac_digits;
  626|       |    char p_cs_precedes;
  627|       |    char p_sep_by_space;
  628|       |    char n_cs_precedes;
  629|       |    char n_sep_by_space;
  630|       |    char p_sign_posn;
  631|       |    char n_sign_posn;
  632|       |    char int_p_cs_precedes;
  633|       |    char int_p_sep_by_space;
  634|       |    char int_n_cs_precedes;
  635|       |    char int_n_sep_by_space;
  636|       |    char int_p_sign_posn;
  637|       |    char int_n_sign_posn;
  638|       |};
  639|       |typedef int wchar_t;
  640|       |union __anonunion___value_23 {
  641|       |    unsigned int __wch;
  642|       |    char __wchb[4];
  643|       |};
  644|       |struct __anonstruct___mbstate_t_22 {
  645|       |    int __count;
  646|       |    union __anonunion___value_23 __value;
  647|       |};
  648|       |typedef struct __anonstruct___mbstate_t_22 __mbstate_t;
  649|       |typedef unsigned int wint_t;
  650|       |typedef __mbstate_t mbstate_t;
  651|       |struct quoting_options {
  652|       |    enum quoting_style style;
  653|       |    int quote_these_too[255UL / (sizeof(int) * 8UL) + 1UL];
  654|       |};
  655|       |struct slotvec {
  656|       |    size_t size;
  657|       |    char *val;
  658|       |};
  659|       |/* #pragma merger("0","000.buffer.o.i","") */
  660|       |extern __attribute__((__nothrow__)) void *(
  661|       |    __attribute__((__nonnull__(1, 2), __leaf__))
  662|       |    memcpy)(void *__restrict __dest, void const *__restrict __src, size_t __n);
  663|       |extern
  664|       |__attribute__((__nothrow__)) void *(__attribute__((__nonnull__(1),
  665|       |                                    __leaf__))
  666|       |                                    memset)(void *__s, int __c, size_t __n);
  667|       |extern __attribute__((__nothrow__)) void *(
  668|       |    __attribute__((__nonnull__(1), __leaf__))
  669|       |    memchr)(void const *__s, int __c, size_t __n) __attribute__((__pure__));
  670|       |extern __attribute__((__nothrow__)) char *(
  671|       |    __attribute__((__nonnull__(1, 2), __leaf__))
  672|       |    strcpy)(char *__restrict __dest, char const *__restrict __src);
  673|       |extern __attribute__((__nothrow__)) char *(
  674|       |    __attribute__((__nonnull__(1, 2), __leaf__))
  675|       |    strcat)(char *__restrict __dest, char const *__restrict __src);
  676|       |extern __attribute__((__nothrow__)) int(
  677|       |    __attribute__((__nonnull__(1, 2), __leaf__))
  678|       |    strcmp)(char const *__s1, char const *__s2) __attribute__((__pure__));
  679|       |extern __attribute__((__nothrow__)) char *(__attribute__((__nonnull__(1),
  680|       |        __leaf__))
  681|       |        strchr)(char const *__s, int __c)
  682|       |__attribute__((__pure__));
  683|       |extern __attribute__((__nothrow__))
  684|       |size_t(__attribute__((__nonnull__(1), __leaf__)) strlen)(char const *__s)
  685|       |__attribute__((__pure__));
  686|       |extern __attribute__((__nothrow__)) int *(
  687|       |    __attribute__((__leaf__)) __errno_location)(void)__attribute__((__const__));
  688|       |extern int(__attribute__((__nonnull__(1))) open)(char const *__file,
  689|       |        int __oflag, ...);
  690|       |extern int(__attribute__((__nonnull__(1))) creat)(char const *__file,
  691|       |        mode_t __mode);
  692|       |extern __attribute__((__nothrow__))
  693|       |__off_t(__attribute__((__leaf__)) lseek)(int __fd, __off_t __offset,
  694|       |        int __whence);
  695|       |extern int close(int __fd);
  696|       |extern __attribute__((__nothrow__)) int(__attribute__((__leaf__))
  697|       |                                        ioctl)(int __fd,
  698|       |                                                unsigned long __request, ...);
  699|       |extern __attribute__((__nothrow__)) void(__attribute__((__leaf__))
  700|       |        free)(void *__ptr);
  701|       |extern __attribute__((__nothrow__)) void *(__attribute__((__leaf__))
  702|       |        valloc)(size_t __size)
  703|       |__attribute__((__malloc__));
  704|       |extern __attribute__((__nothrow__, __noreturn__)) void(__attribute__((__leaf__))
  705|       |        abort)(void);
  706|       |extern int system(char const *__command);
  707|       |extern struct _IO_FILE *stdin;
  708|       |extern struct _IO_FILE *stdout;
  709|       |extern struct _IO_FILE *stderr;
  710|       |extern int fclose(FILE *__stream);
  711|       |extern int fflush_unlocked(FILE *__stream);
  712|       |extern FILE *fopen(char const *__restrict __filename,
  713|       |                   char const *__restrict __modes);
  714|       |extern int fprintf(FILE *__restrict __stream, char const *__restrict __format,
  715|       |                   ...);
  716|       |extern __attribute__((__nothrow__)) int
  717|       |sprintf(char *__restrict __s, char const *__restrict __format, ...);
  718|       |extern int fscanf(FILE *__restrict __stream, char const *__restrict __format,
  719|       |                  ...);
  720|       |extern int fputc_unlocked(int __c, FILE *__stream);
  721|       |extern char *fgets_unlocked(char *__restrict __s, int __n,
  722|       |                            FILE *__restrict __stream);
  723|       |extern __attribute__((__nothrow__)) int(__attribute__((__leaf__))
  724|       |                                        ferror_unlocked)(FILE *__stream);
  725|       |extern __attribute__((__nothrow__))
  726|       |time_t(__attribute__((__leaf__)) time)(time_t *__timer);
  727|       |extern __attribute__((__nothrow__)) int(__attribute__((__leaf__))
  728|       |                                        clock_gettime)(clockid_t __clock_id,
  729|       |                                                struct timespec *__tp);
  730|       |int strip_trailing_slashes(char *path);
  731|       |extern void error(int __status, int __errnum, char const *__format, ...);
  732|       |void *xmalloc(size_t n);
  733|       |char *xstrdup(char const *string);
  734|       |extern __attribute__((__nothrow__)) char *(__attribute__((__leaf__))
  735|       |        gettext)(char const *__msgid)
  736|       |__attribute__((__format_arg__(1)));
  737|       |extern __attribute__((__nothrow__)) char *(__attribute__((__leaf__))
  738|       |        ngettext)(char const *__msgid1,
  739|       |                  char const *__msgid2,
  740|       |                  unsigned long __n)
  741|       |__attribute__((__format_arg__(1), __format_arg__(2)));
  742|       |extern int fnmatch(char const *__pattern, char const *__name, int __flags);
  743|       |char *human_readable(uintmax_t n, char *buf, int opts,
  744|       |                     uintmax_t from_block_size, uintmax_t to_block_size);
  745|       |char *quotearg_colon(char const *arg);
  746|       |char const *quote_n(int n, char const *name);
  747|       |char const *quote(char const *name);
  748|       |size_t safe_read(int fd, void *buf, size_t count);
  749|       |enum subcommand subcommand_option;
  750|       |int blocking_factor;
  751|       |size_t record_size;
  752|       |_Bool backup_option;
  753|       |_Bool checkpoint_option;
  754|       |char const *use_compress_program_option;
  755|       |_Bool force_local_option;
  756|       |char const *info_script_option;
  757|       |_Bool multi_volume_option;
  758|       |_Bool read_full_records_option;
  759|       |char const *rsh_command_option;
  760|       |tarlong tape_length_option;
  761|       |_Bool to_stdout_option;
  762|       |_Bool totals_option;
  763|       |int verbose_option;
  764|       |_Bool verify_option;
  765|       |char const *volno_file_option;
  766|       |char const *volume_label_option;
  767|       |int archive;
  768|       |_Bool dev_null_output;
  769|       |struct timespec start_timespec;
  770|       |struct tar_stat_info current_stat_info;
  771|       |char const **archive_name_array;
  772|       |int archive_names;
  773|       |char const **archive_name_cursor;
  774|       |char const *index_file_name;
  775|       |enum access_mode access_mode;
  776|       |FILE *stdlis;
  777|       |char *save_name;
  778|       |off_t save_sizeleft;
  779|       |off_t save_totsize;
  780|       |_Bool write_archive_to_stdout;
  781|       |size_t available_space_after(union block *pointer);
  782|       |off_t current_block_ordinal(void);
  783|       |void close_archive(void);
  784|       |void closeout_volume_number(void);
  785|       |union block *find_next_block(void);
  786|       |void flush_read(void);
  787|       |void flush_write(void);
  788|       |void flush_archive(void);
  789|       |void init_volume_number(void);
  790|       |void open_archive(enum access_mode wanted_access);
  791|       |void print_total_written(void);
  792|       |void reset_eof(void);
  793|       |void set_next_block_after(union block *block);
  794|       |void clear_read_error_count(void);
  795|       |void xclose(int fd);
  796|       |__attribute__((__noreturn__)) void archive_write_error(ssize_t status);
  797|       |void archive_read_error(void);
  798|       |void finish_header(struct tar_stat_info *st, union block *header,
  799|       |                   off_t block_ordinal);
  800|       |void off_to_chars(off_t v, char *p, size_t s);
  801|       |void time_to_chars(time_t v, char *p, size_t s);
  802|       |_Bool now_verifying;
  803|       |void verify_volume(void);
  804|       |__attribute__((__noreturn__)) void fatal_exit(void);
  805|       |char *stringify_uintmax_t_backwards(uintmax_t o___0, char *buf);
  806|       |off_t off_from_header(char const *p, size_t s);
  807|       |uintmax_t uintmax_from_header(char const *p, size_t s);
  808|       |void assign_string(char **string, char const *value);
  809|       |_Bool maybe_backup_file(char const *path, int this_is_the_archive);
  810|       |void undo_last_backup(void);
  811|       |void close_error(char const *name);
  812|       |void close_warn(char const *name);
  813|       |void open_error(char const *name);
  814|       |__attribute__((__noreturn__)) void open_fatal(char const *name);
  815|       |void open_warn(char const *name);
  816|       |void read_error(char const *name);
  817|       |void write_error(char const *name);
  818|       |__attribute__((__noreturn__)) void
  819|       |write_fatal_details(char const *name, ssize_t status, size_t size);
  820|       |char *safer_name_suffix(char const *file_name, _Bool link_target);
  821|       |void tar_stat_destroy(struct tar_stat_info *st);
  822|       |char *output_start;
  823|       |void sys_detect_dev_null_output(void);
  824|       |void sys_save_archive_dev_ino(void);
  825|       |void sys_drain_input_pipe(void);
  826|       |void sys_wait_for_child(pid_t child_pid___0);
  827|       |void sys_spawn_shell(void);
  828|       |pid_t sys_child_open_for_compress(void);
  829|       |pid_t sys_child_open_for_uncompress(void);
  830|       |size_t sys_write_archive_buffer(void);
  831|       |_Bool sys_get_archive_stat(void);
  832|       |char *rmt_path__;
  833|       |int rmt_open__(char const *path, int open_mode, int bias,
  834|       |               char const *remote_shell);
  835|       |int rmt_close__(int handle);
  836|       |size_t rmt_read__(int handle, char *buffer___2, size_t length);
  837|       |off_t rmt_lseek__(int handle, off_t offset, int whence);
  838|       |int rmt_ioctl__(int handle, int operation, char *argument);
  839|       |static tarlong prev_written;
  840|       |static tarlong bytes_written;
  841|       |union block *record_start;
  842|       |union block *record_end;
  843|       |union block *current_block;
  844|       |off_t records_read;
  845|       |off_t records_written;
  846|       |static off_t record_start_block;
  847|       |static void backspace_output(void);
  848|       |static _Bool new_volume(enum access_mode mode);
  849|       |static pid_t child_pid;
  850|       |static int read_error_count;
  851|       |static int hit_eof;
  852|       |static int checkpoint;
  853|       |_Bool time_to_start_writing;
  854|       |static int volno = 1;
  855|       |static int global_volno = 1;
  856|       |static char *real_s_name;
  857|       |static off_t real_s_totsize;
  858|       |static off_t real_s_sizeleft;
  859|       |void clear_read_error_count(void)
  860|      0|{
  861|       |
  862|      0|    {
  863|      0|        read_error_count = 0;
  864|      0|        return;
  865|      0|    }
  866|      0|}
  867|       |void print_total_written(void)
  868|      0|{
  869|      0|    tarlong written;
  870|      0|    char bytes[sizeof(tarlong) * 8UL];
  871|      0|    char abbr[((((((2UL * sizeof(uintmax_t)) * 8UL) * 302UL) / 1000UL + 1UL) *
  872|      0|                                               17UL -
  873|      0|                                               16UL) +
  874|      0|                                              3UL) +
  875|      0|                                             1UL];
  876|      0|    char rate[((((((2UL * sizeof(uintmax_t)) * 8UL) * 302UL) / 1000UL + 1UL) *
  877|      0|                                               17UL -
  878|      0|                                               16UL) +
  879|      0|                                              3UL) +
  880|      0|                                             1UL];
  881|      0|    double seconds;
  882|      0|    int human_opts;
  883|      0|    struct timespec now;
  884|      0|    time_t tmp;
  885|      0|    int tmp___0;
  886|      0|    char *tmp___1;
  887|      0|    char const *tmp___2;
  888|      0|    char *tmp___3;
  889|      0|    char *tmp___4;
  890|      0|    void *__cil_tmp14;
  891|      0|    void *__cil_tmp15;
  892|      0|    void *__cil_tmp16;
  893|      0|    char *__cil_tmp17;
  894|      0|    char *__cil_tmp18;
  895|      0|    char *__cil_tmp19;
  896|      0|    char *__cil_tmp20;
  897|       |
  898|      0|    {
  899|      0|        {
  900|      0|            written = prev_written + bytes_written;
  901|      0|            human_opts = 240;
  902|      0|            tmp___0 = clock_gettime(0, &now);
  903|      0|        }
  904|      0|        if (tmp___0 == 0) {
  905|      0|            seconds = (double)(now.tv_sec - start_timespec.tv_sec) +
  906|      0|                      (double)(now.tv_nsec - start_timespec.tv_nsec) / 1e9;
  907|      0|        }
  908|      0|        else {
  909|      0|            {
  910|      0|                tmp = time((time_t *)0);
  911|      0|                seconds = (double)(tmp - start_timespec.tv_sec);
  912|      0|            }
  913|      0|        }
  914|      0|        {
  915|      0|            sprintf((char * /* __restrict  */)(bytes),
  916|      0|                    (char const * /* __restrict  */) "%.0f", written);
  917|      0|        }
  918|      0|        if ((double)0 < seconds) {
  919|      0|            if (written / seconds < (tarlong)0xffffffffffffffffUL) {
  920|      0|                {
  921|      0|                    tmp___1 = human_readable((uintmax_t)(written / seconds), rate,
  922|      0|                                             human_opts, (uintmax_t)1, (uintmax_t)1);
  923|      0|                    tmp___2 = (char const *)tmp___1;
  924|      0|                }
  925|      0|            }
  926|      0|            else {
  927|      0|                tmp___2 = "?";
  928|      0|            }
  929|      0|        }
  930|      0|        else {
  931|      0|            tmp___2 = "?";
  932|      0|        }
  933|      0|        {
  934|      0|            tmp___3 = human_readable((uintmax_t)written, abbr, human_opts,
  935|      0|                                     (uintmax_t)1, (uintmax_t)1);
  936|      0|            tmp___4 = gettext("Total bytes written: %s (%s, %s/s)\n");
  937|      0|            fprintf((FILE * /* __restrict  */) stderr,
  938|      0|                    (char const * /* __restrict  */)tmp___4, bytes, tmp___3, tmp___2);
  939|      0|        }
  940|      0|        return;
  941|      0|    }
  942|      0|}
  943|       |off_t current_block_ordinal(void)
  944|      0|{
  945|       |
  946|      0|    {
  947|      0|        return (record_start_block + (current_block - record_start));
  948|      0|    }
  949|      0|}
  950|       |void reset_eof(void)
  951|      0|{
  952|       |
  953|      0|    {
  954|      0|        if (hit_eof) {
  955|      0|            hit_eof = 0;
  956|      0|            current_block = record_start;
  957|      0|            record_end = record_start + blocking_factor;
  958|      0|            access_mode = (enum access_mode)1;
  959|      0|        }
  960|      0|        return;
  961|      0|    }
  962|      0|}
  963|       |union block *find_next_block(void)
  964|      0|{
  965|       |
  966|      0|    {
  967|      0|        if ((unsigned long)current_block == (unsigned long)record_end) {
  968|      0|            if (hit_eof) {
  969|      0|                return ((union block *)0);
  970|      0|            }
  971|      0|            {
  972|      0|                flush_archive();
  973|      0|            }
  974|      0|            if ((unsigned long)current_block == (unsigned long)record_end) {
  975|      0|                hit_eof = 1;
  976|      0|                return ((union block *)0);
  977|      0|            }
  978|      0|        }
  979|      0|        return (current_block);
  980|      0|    }
  981|      0|}
  982|       |void set_next_block_after(union block *block)
  983|      0|{
  984|       |
  985|      0|    {
  986|      0|        {
  987|      0|            while (1) {
  988|      0|while_continue: /* CIL Label */
  989|      0|                ;
  990|      0|                if (!((unsigned long)block >= (unsigned long)current_block)) {
  991|      0|                    goto while_break;
  992|      0|                }
  993|      0|                current_block++;
  994|      0|            }
  995|      0|while_break: /* CIL Label */
  996|      0|            ;
  997|      0|        }
  998|      0|        if ((unsigned long)current_block > (unsigned long)record_end) {
  999|      0|            {
 1000|      0|                abort();
 1001|      0|            }
 1002|      0|        }
 1003|      0|        return;
 1004|      0|    }
 1005|      0|}
 1006|       |size_t available_space_after(union block *pointer)
 1007|      0|{
 1008|       |
 1009|      0|    {
 1010|      0|        return ((size_t)(record_end->buffer - pointer->buffer));
 1011|      0|    }
 1012|      0|}
 1013|       |void xclose(int fd)
 1014|      0|{
 1015|      0|    char *tmp;
 1016|      0|    int tmp___0;
 1017|      0|    char *__cil_tmp4;
 1018|       |
 1019|      0|    {
 1020|      0|        {
 1021|      0|            tmp___0 = close(fd);
 1022|      0|        }
 1023|      0|        if (tmp___0 != 0) {
 1024|      0|            {
 1025|      0|                tmp = gettext("(pipe)");
 1026|      0|                close_error((char const *)tmp);
 1027|      0|            }
 1028|      0|        }
 1029|      0|        return;
 1030|      0|    }
 1031|      0|}
 1032|       |static _Bool check_label_pattern(union block *label)
 1033|      0|{
 1034|      0|    char *string;
 1035|      0|    _Bool result;
 1036|      0|    void *tmp;
 1037|      0|    int tmp___0;
 1038|      0|    size_t tmp___1;
 1039|      0|    void *tmp___2;
 1040|      0|    int tmp___3;
 1041|      0|    char *__cil_tmp9;
 1042|      0|    char *__cil_tmp10;
 1043|       |
 1044|      0|    {
 1045|      0|        {
 1046|      0|            tmp = memchr((void const *)(label->header.name), '\000',
 1047|      0|                         sizeof(label->header.name));
 1048|      0|        }
 1049|      0|        if (!tmp) {
 1050|      0|            return ((_Bool)0);
 1051|      0|        }
 1052|      0|        {
 1053|      0|            tmp___0 =
 1054|      0|                fnmatch(volume_label_option, (char const *)(label->header.name), 0);
 1055|      0|        }
 1056|      0|        if (tmp___0 == 0) {
 1057|      0|            return ((_Bool)1);
 1058|      0|        }
 1059|      0|        if (!multi_volume_option) {
 1060|      0|            return ((_Bool)0);
 1061|      0|        }
 1062|      0|        {
 1063|      0|            tmp___1 = strlen(volume_label_option);
 1064|      0|            tmp___2 = xmalloc((tmp___1 + sizeof(" Volume [1-9]*")) + 1UL);
 1065|      0|            string = (char *)tmp___2;
 1066|      0|            strcpy((char * /* __restrict  */)string,
 1067|      0|                   (char const * /* __restrict  */)volume_label_option);
 1068|      0|            strcat((char * /* __restrict  */)string,
 1069|      0|                   (char const * /* __restrict  */) " Volume [1-9]*");
 1070|      0|            tmp___3 =
 1071|      0|                fnmatch((char const *)string, (char const *)(label->header.name), 0);
 1072|      0|            result = (_Bool)(tmp___3 == 0);
 1073|      0|            free((void *)string);
 1074|      0|        }
 1075|      0|        return (result);
 1076|      0|    }
 1077|      0|}
 1078|       |void open_archive(enum access_mode wanted_access)
 1079|      0|{
 1080|      0|    int backed_up_flag;
 1081|      0|    char *tmp;
 1082|      0|    char *tmp___0;
 1083|      0|    void *tmp___1;
 1084|      0|    void *tmp___2;
 1085|      0|    char *tmp___3;
 1086|      0|    int tmp___4;
 1087|      0|    char *tmp___5;
 1088|      0|    int tmp___7;
 1089|      0|    int tmp___8;
 1090|      0|    void *tmp___9;
 1091|      0|    int tmp___11;
 1092|      0|    int tmp___12;
 1093|      0|    void *tmp___13;
 1094|      0|    int tmp___15;
 1095|      0|    int tmp___16;
 1096|      0|    void *tmp___17;
 1097|      0|    int tmp___19;
 1098|      0|    int tmp___20;
 1099|      0|    void *tmp___21;
 1100|      0|    int tmp___22;
 1101|      0|    int saved_errno;
 1102|      0|    int *tmp___23;
 1103|      0|    int *tmp___24;
 1104|      0|    _Bool tmp___25;
 1105|      0|    union block *label;
 1106|      0|    union block *tmp___26;
 1107|      0|    char const *tmp___27;
 1108|      0|    char *tmp___28;
 1109|      0|    char const *tmp___29;
 1110|      0|    char const *tmp___30;
 1111|      0|    char *tmp___31;
 1112|      0|    _Bool tmp___32;
 1113|      0|    unsigned int tmp___33;
 1114|      0|    char *__cil_tmp36;
 1115|      0|    char *__cil_tmp37;
 1116|      0|    char *__cil_tmp38;
 1117|      0|    char *__cil_tmp39;
 1118|      0|    char *__cil_tmp40;
 1119|      0|    char *__cil_tmp41;
 1120|      0|    char *__cil_tmp42;
 1121|       |
 1122|      0|    {
 1123|      0|        backed_up_flag = 0;
 1124|      0|        if (index_file_name) {
 1125|      0|            {
 1126|      0|                stdlis = fopen((char const * /* __restrict  */)index_file_name,
 1127|      0|                               (char const * /* __restrict  */) "w");
 1128|      0|            }
 1129|      0|            if (!stdlis) {
 1130|      0|                {
 1131|      0|                    open_error(index_file_name);
 1132|      0|                }
 1133|      0|            }
 1134|      0|        }
 1135|      0|        else {
 1136|      0|            if (to_stdout_option) {
 1137|      0|                stdlis = stderr;
 1138|      0|            }
 1139|      0|            else {
 1140|      0|                stdlis = stdout;
 1141|      0|            }
 1142|      0|        }
 1143|      0|        if (record_size == 0UL) {
 1144|      0|            {
 1145|      0|                tmp = gettext("Invalid value for record_size");
 1146|      0|                error(0, 0, (char const *)tmp);
 1147|      0|                fatal_exit();
 1148|      0|            }
 1149|      0|        }
 1150|      0|        if (archive_names == 0) {
 1151|      0|            {
 1152|      0|                tmp___0 = gettext("No archive name given");
 1153|      0|                error(0, 0, (char const *)tmp___0);
 1154|      0|                fatal_exit();
 1155|      0|            }
 1156|      0|        }
 1157|      0|        {
 1158|      0|            tar_stat_destroy(&current_stat_info);
 1159|      0|            save_name = (char *)0;
 1160|      0|            real_s_name = (char *)0;
 1161|      0|        }
 1162|      0|        if (multi_volume_option) {
 1163|      0|            {
 1164|      0|                tmp___1 = valloc(record_size + 1024UL);
 1165|      0|                record_start = (union block *)tmp___1;
 1166|      0|            }
 1167|      0|            if (record_start) {
 1168|      0|                record_start += 2;
 1169|      0|            }
 1170|      0|        }
 1171|      0|        else {
 1172|      0|            {
 1173|      0|                tmp___2 = valloc(record_size);
 1174|      0|                record_start = (union block *)tmp___2;
 1175|      0|            }
 1176|      0|        }
 1177|      0|        if (!record_start) {
 1178|      0|            {
 1179|      0|                tmp___3 = gettext("Cannot allocate memory for blocking factor %d");
 1180|      0|                error(0, 0, (char const *)tmp___3, blocking_factor);
 1181|      0|                fatal_exit();
 1182|      0|            }
 1183|      0|        }
 1184|      0|        current_block = record_start;
 1185|      0|        record_end = record_start + blocking_factor;
 1186|      0|        if ((unsigned int)wanted_access == 2U) {
 1187|      0|            tmp___33 = 0U;
 1188|      0|        }
 1189|      0|        else {
 1190|      0|            tmp___33 = (unsigned int)wanted_access;
 1191|      0|        }
 1192|      0|        access_mode = (enum access_mode)tmp___33;
 1193|      0|        if (use_compress_program_option) {
 1194|      0|            {
 1195|      0|                if ((unsigned int)wanted_access == 0U) {
 1196|      0|                    goto case_0;
 1197|      0|                }
 1198|      0|                if ((unsigned int)wanted_access == 1U) {
 1199|      0|                    goto case_1;
 1200|      0|                }
 1201|      0|                if ((unsigned int)wanted_access == 2U) {
 1202|      0|                    goto case_2;
 1203|      0|                }
 1204|      0|                goto switch_break;
 1205|      0|case_0 : { /* CIL Label */
 1206|      0|                    child_pid = sys_child_open_for_uncompress();
 1207|      0|                    read_full_records_option = (_Bool)0;
 1208|      0|                }
 1209|      0|                goto switch_break;
 1210|      0|case_1 : { /* CIL Label */
 1211|      0|                    child_pid = sys_child_open_for_compress();
 1212|      0|                }
 1213|      0|                goto switch_break;
 1214|      0|case_2 : { /* CIL Label */
 1215|      0|                    abort();
 1216|      0|                }
 1217|      0|                goto switch_break;
 1218|      0|switch_break: /* CIL Label */
 1219|      0|                ;
 1220|      0|            }
 1221|      0|            if ((unsigned int)wanted_access == 1U) {
 1222|      0|                {
 1223|      0|                    tmp___4 = strcmp(*(archive_name_array + 0), "-");
 1224|      0|                }
 1225|      0|                if (tmp___4 == 0) {
 1226|      0|                    stdlis = stderr;
 1227|      0|                }
 1228|      0|            }
 1229|      0|        }
 1230|      0|        else {
 1231|      0|            {
 1232|      0|                tmp___22 = strcmp(*(archive_name_array + 0), "-");
 1233|      0|            }
 1234|      0|            if (tmp___22 == 0) {
 1235|      0|                read_full_records_option = (_Bool)1;
 1236|      0|                if (verify_option) {
 1237|      0|                    {
 1238|      0|                        tmp___5 = gettext("Cannot verify stdin/stdout archive");
 1239|      0|                        error(0, 0, (char const *)tmp___5);
 1240|      0|                        fatal_exit();
 1241|      0|                    }
 1242|      0|                }
 1243|      0|                {
 1244|      0|                    if ((unsigned int)wanted_access == 0U) {
 1245|      0|                        goto case_0___0;
 1246|      0|                    }
 1247|      0|                    if ((unsigned int)wanted_access == 1U) {
 1248|      0|                        goto case_1___0;
 1249|      0|                    }
 1250|      0|                    if ((unsigned int)wanted_access == 2U) {
 1251|      0|                        goto case_2___0;
 1252|      0|                    }
 1253|      0|                    goto switch_break___0;
 1254|      0|case_0___0: /* CIL Label */
 1255|      0|                    archive = 0;
 1256|      0|                    goto switch_break___0;
 1257|      0|case_1___0: /* CIL Label */
 1258|      0|                    archive = 1;
 1259|      0|                    stdlis = stderr;
 1260|      0|                    goto switch_break___0;
 1261|      0|case_2___0: /* CIL Label */
 1262|      0|                    archive = 0;
 1263|      0|                    stdlis = stderr;
 1264|      0|                    write_archive_to_stdout = (_Bool)1;
 1265|      0|                    goto switch_break___0;
 1266|      0|switch_break___0: /* CIL Label */
 1267|      0|                    ;
 1268|      0|                }
 1269|      0|            }
 1270|      0|            else {
 1271|      0|                if (verify_option) {
 1272|      0|                    if (!force_local_option) {
 1273|      0|                        {
 1274|      0|                            rmt_path__ = strchr(*(archive_name_array + 0), ':');
 1275|      0|                        }
 1276|      0|                        if (rmt_path__) {
 1277|      0|                            if ((unsigned long)rmt_path__ >
 1278|      0|                                    (unsigned long)*(archive_name_array + 0)) {
 1279|      0|                                {
 1280|      0|                                    tmp___9 = memchr(
 1281|      0|                                                  (void const *)*(archive_name_array + 0), '/',
 1282|      0|                                                  (size_t)(rmt_path__ - (char *)*(archive_name_array + 0)));
 1283|      0|                                }
 1284|      0|                                if (tmp___9) {
 1285|      0|                                    {
 1286|      0|                                        tmp___8 =
 1287|      0|                                            open(*(archive_name_array + 0), 66,
 1288|      0|                                                 ((128 | (128 >> 3)) | ((128 >> 3) >> 3)) |
 1289|      0|                                                 ((256 | (256 >> 3)) | ((256 >> 3) >> 3)));
 1290|      0|                                        archive = tmp___8;
 1291|      0|                                    }
 1292|      0|                                }
 1293|      0|                                else {
 1294|      0|                                    {
 1295|      0|                                        tmp___7 = rmt_open__(*(archive_name_array + 0), 66, 1 << 30,
 1296|      0|                                                             rsh_command_option);
 1297|      0|                                        archive = tmp___7;
 1298|      0|                                    }
 1299|      0|                                }
 1300|      0|                            }
 1301|      0|                            else {
 1302|      0|                                {
 1303|      0|                                    tmp___8 = open(*(archive_name_array + 0), 66,
 1304|      0|                                                   ((128 | (128 >> 3)) | ((128 >> 3) >> 3)) |
 1305|      0|                                                   ((256 | (256 >> 3)) | ((256 >> 3) >> 3)));
 1306|      0|                                    archive = tmp___8;
 1307|      0|                                }
 1308|      0|                            }
 1309|      0|                        }
 1310|      0|                        else {
 1311|      0|                            {
 1312|      0|                                tmp___8 = open(*(archive_name_array + 0), 66,
 1313|      0|                                               ((128 | (128 >> 3)) | ((128 >> 3) >> 3)) |
 1314|      0|                                               ((256 | (256 >> 3)) | ((256 >> 3) >> 3)));
 1315|      0|                                archive = tmp___8;
 1316|      0|                            }
 1317|      0|                        }
 1318|      0|                    }
 1319|      0|                    else {
 1320|      0|                        {
 1321|      0|                            tmp___8 = open(*(archive_name_array + 0), 66,
 1322|      0|                                           ((128 | (128 >> 3)) | ((128 >> 3) >> 3)) |
 1323|      0|                                           ((256 | (256 >> 3)) | ((256 >> 3) >> 3)));
 1324|      0|                            archive = tmp___8;
 1325|      0|                        }
 1326|      0|                    }
 1327|      0|                }
 1328|      0|                else {
 1329|      0|                    {
 1330|      0|                        if ((unsigned int)wanted_access == 0U) {
 1331|      0|                            goto case_0___1;
 1332|      0|                        }
 1333|      0|                        if ((unsigned int)wanted_access == 1U) {
 1334|      0|                            goto case_1___1;
 1335|      0|                        }
 1336|      0|                        if ((unsigned int)wanted_access == 2U) {
 1337|      0|                            goto case_2___1;
 1338|      0|                        }
 1339|      0|                        goto switch_break___1;
 1340|      0|case_0___1: /* CIL Label */
 1341|      0|                        if (!force_local_option) {
 1342|      0|                            {
 1343|      0|                                rmt_path__ = strchr(*(archive_name_array + 0), ':');
 1344|      0|                            }
 1345|      0|                            if (rmt_path__) {
 1346|      0|                                if ((unsigned long)rmt_path__ >
 1347|      0|                                        (unsigned long)*(archive_name_array + 0)) {
 1348|      0|                                    {
 1349|      0|                                        tmp___13 =
 1350|      0|                                            memchr((void const *)*(archive_name_array + 0), '/',
 1351|      0|                                                   (size_t)(rmt_path__ -
 1352|      0|                                                            (char *)*(archive_name_array + 0)));
 1353|      0|                                    }
 1354|      0|                                    if (tmp___13) {
 1355|      0|                                        {
 1356|      0|                                            tmp___12 =
 1357|      0|                                                open(*(archive_name_array + 0), 0,
 1358|      0|                                                     ((128 | (128 >> 3)) | ((128 >> 3) >> 3)) |
 1359|      0|                                                     ((256 | (256 >> 3)) | ((256 >> 3) >> 3)));
 1360|      0|                                            archive = tmp___12;
 1361|      0|                                        }
 1362|      0|                                    }
 1363|      0|                                    else {
 1364|      0|                                        {
 1365|      0|                                            tmp___11 = rmt_open__(*(archive_name_array + 0), 0,
 1366|      0|                                                                  1 << 30, rsh_command_option);
 1367|      0|                                            archive = tmp___11;
 1368|      0|                                        }
 1369|      0|                                    }
 1370|      0|                                }
 1371|      0|                                else {
 1372|      0|                                    {
 1373|      0|                                        tmp___12 =
 1374|      0|                                            open(*(archive_name_array + 0), 0,
 1375|      0|                                                 ((128 | (128 >> 3)) | ((128 >> 3) >> 3)) |
 1376|      0|                                                 ((256 | (256 >> 3)) | ((256 >> 3) >> 3)));
 1377|      0|                                        archive = tmp___12;
 1378|      0|                                    }
 1379|      0|                                }
 1380|      0|                            }
 1381|      0|                            else {
 1382|      0|                                {
 1383|      0|                                    tmp___12 = open(*(archive_name_array + 0), 0,
 1384|      0|                                                    ((128 | (128 >> 3)) | ((128 >> 3) >> 3)) |
 1385|      0|                                                    ((256 | (256 >> 3)) | ((256 >> 3) >> 3)));
 1386|      0|                                    archive = tmp___12;
 1387|      0|                                }
 1388|      0|                            }
 1389|      0|                        }
 1390|      0|                        else {
 1391|      0|                            {
 1392|      0|                                tmp___12 = open(*(archive_name_array + 0), 0,
 1393|      0|                                                ((128 | (128 >> 3)) | ((128 >> 3) >> 3)) |
 1394|      0|                                                ((256 | (256 >> 3)) | ((256 >> 3) >> 3)));
 1395|      0|                                archive = tmp___12;
 1396|      0|                            }
 1397|      0|                        }
 1398|      0|                        goto switch_break___1;
 1399|      0|case_1___1: /* CIL Label */
 1400|      0|                        if (backup_option) {
 1401|      0|                            {
 1402|      0|                                maybe_backup_file(*(archive_name_array + 0), 1);
 1403|      0|                                backed_up_flag = 1;
 1404|      0|                            }
 1405|      0|                        }
 1406|      0|                        if (!force_local_option) {
 1407|      0|                            {
 1408|      0|                                rmt_path__ = strchr(*(archive_name_array + 0), ':');
 1409|      0|                            }
 1410|      0|                            if (rmt_path__) {
 1411|      0|                                if ((unsigned long)rmt_path__ >
 1412|      0|                                        (unsigned long)*(archive_name_array + 0)) {
 1413|      0|                                    {
 1414|      0|                                        tmp___17 =
 1415|      0|                                            memchr((void const *)*(archive_name_array + 0), '/',
 1416|      0|                                                   (size_t)(rmt_path__ -
 1417|      0|                                                            (char *)*(archive_name_array + 0)));
 1418|      0|                                    }
 1419|      0|                                    if (tmp___17) {
 1420|      0|                                        {
 1421|      0|                                            tmp___16 = creat(
 1422|      0|                                                           *(archive_name_array + 0),
 1423|      0|                                                           (mode_t)(((128 | (128 >> 3)) | ((128 >> 3) >> 3)) |
 1424|      0|                                                                    ((256 | (256 >> 3)) | ((256 >> 3) >> 3))));
 1425|      0|                                            archive = tmp___16;
 1426|      0|                                        }
 1427|      0|                                    }
 1428|      0|                                    else {
 1429|      0|                                        {
 1430|      0|                                            tmp___15 = rmt_open__(*(archive_name_array + 0), 65,
 1431|      0|                                                                  1 << 30, rsh_command_option);
 1432|      0|                                            archive = tmp___15;
 1433|      0|                                        }
 1434|      0|                                    }
 1435|      0|                                }
 1436|      0|                                else {
 1437|      0|                                    {
 1438|      0|                                        tmp___16 = creat(
 1439|      0|                                                       *(archive_name_array + 0),
 1440|      0|                                                       (mode_t)(((128 | (128 >> 3)) | ((128 >> 3) >> 3)) |
 1441|      0|                                                                ((256 | (256 >> 3)) | ((256 >> 3) >> 3))));
 1442|      0|                                        archive = tmp___16;
 1443|      0|                                    }
 1444|      0|                                }
 1445|      0|                            }
 1446|      0|                            else {
 1447|      0|                                {
 1448|      0|                                    tmp___16 =
 1449|      0|                                        creat(*(archive_name_array + 0),
 1450|      0|                                              (mode_t)(((128 | (128 >> 3)) | ((128 >> 3) >> 3)) |
 1451|      0|                                                       ((256 | (256 >> 3)) | ((256 >> 3) >> 3))));
 1452|      0|                                    archive = tmp___16;
 1453|      0|                                }
 1454|      0|                            }
 1455|      0|                        }
 1456|      0|                        else {
 1457|      0|                            {
 1458|      0|                                tmp___16 =
 1459|      0|                                    creat(*(archive_name_array + 0),
 1460|      0|                                          (mode_t)(((128 | (128 >> 3)) | ((128 >> 3) >> 3)) |
 1461|      0|                                                   ((256 | (256 >> 3)) | ((256 >> 3) >> 3))));
 1462|      0|                                archive = tmp___16;
 1463|      0|                            }
 1464|      0|                        }
 1465|      0|                        goto switch_break___1;
 1466|      0|case_2___1: /* CIL Label */
 1467|      0|                        if (!force_local_option) {
 1468|      0|                            {
 1469|      0|                                rmt_path__ = strchr(*(archive_name_array + 0), ':');
 1470|      0|                            }
 1471|      0|                            if (rmt_path__) {
 1472|      0|                                if ((unsigned long)rmt_path__ >
 1473|      0|                                        (unsigned long)*(archive_name_array + 0)) {
 1474|      0|                                    {
 1475|      0|                                        tmp___21 =
 1476|      0|                                            memchr((void const *)*(archive_name_array + 0), '/',
 1477|      0|                                                   (size_t)(rmt_path__ -
 1478|      0|                                                            (char *)*(archive_name_array + 0)));
 1479|      0|                                    }
 1480|      0|                                    if (tmp___21) {
 1481|      0|                                        {
 1482|      0|                                            tmp___20 =
 1483|      0|                                                open(*(archive_name_array + 0), 66,
 1484|      0|                                                     ((128 | (128 >> 3)) | ((128 >> 3) >> 3)) |
 1485|      0|                                                     ((256 | (256 >> 3)) | ((256 >> 3) >> 3)));
 1486|      0|                                            archive = tmp___20;
 1487|      0|                                        }
 1488|      0|                                    }
 1489|      0|                                    else {
 1490|      0|                                        {
 1491|      0|                                            tmp___19 = rmt_open__(*(archive_name_array + 0), 66,
 1492|      0|                                                                  1 << 30, rsh_command_option);
 1493|      0|                                            archive = tmp___19;
 1494|      0|                                        }
 1495|      0|                                    }
 1496|      0|                                }
 1497|      0|                                else {
 1498|      0|                                    {
 1499|      0|                                        tmp___20 =
 1500|      0|                                            open(*(archive_name_array + 0), 66,
 1501|      0|                                                 ((128 | (128 >> 3)) | ((128 >> 3) >> 3)) |
 1502|      0|                                                 ((256 | (256 >> 3)) | ((256 >> 3) >> 3)));
 1503|      0|                                        archive = tmp___20;
 1504|      0|                                    }
 1505|      0|                                }
 1506|      0|                            }
 1507|      0|                            else {
 1508|      0|                                {
 1509|      0|                                    tmp___20 = open(*(archive_name_array + 0), 66,
 1510|      0|                                                    ((128 | (128 >> 3)) | ((128 >> 3) >> 3)) |
 1511|      0|                                                    ((256 | (256 >> 3)) | ((256 >> 3) >> 3)));
 1512|      0|                                    archive = tmp___20;
 1513|      0|                                }
 1514|      0|                            }
 1515|      0|                        }
 1516|      0|                        else {
 1517|      0|                            {
 1518|      0|                                tmp___20 = open(*(archive_name_array + 0), 66,
 1519|      0|                                                ((128 | (128 >> 3)) | ((128 >> 3) >> 3)) |
 1520|      0|                                                ((256 | (256 >> 3)) | ((256 >> 3) >> 3)));
 1521|      0|                                archive = tmp___20;
 1522|      0|                            }
 1523|      0|                        }
 1524|      0|                        goto switch_break___1;
 1525|      0|switch_break___1: /* CIL Label */
 1526|      0|                        ;
 1527|      0|                    }
 1528|      0|                }
 1529|      0|            }
 1530|      0|        }
 1531|      0|        if (archive < 0) {
 1532|      0|            goto _L;
 1533|      0|        }
 1534|      0|        else {
 1535|      0|            if (!(archive >= 1 << 30)) {
 1536|      0|                {
 1537|      0|                    tmp___25 = sys_get_archive_stat();
 1538|      0|                }
 1539|      0|                if (!tmp___25) {
 1540|      0|_L : {
 1541|      0|                        tmp___23 = __errno_location();
 1542|      0|                        saved_errno = *tmp___23;
 1543|      0|                    }
 1544|      0|                    if (backed_up_flag) {
 1545|      0|                        {
 1546|      0|                            undo_last_backup();
 1547|      0|                        }
 1548|      0|                    }
 1549|      0|                    {
 1550|      0|                        tmp___24 = __errno_location();
 1551|      0|                        *tmp___24 = saved_errno;
 1552|      0|                        open_fatal(*(archive_name_array + 0));
 1553|      0|                    }
 1554|      0|                }
 1555|      0|            }
 1556|      0|        }
 1557|      0|        {
 1558|      0|            sys_detect_dev_null_output();
 1559|      0|            sys_save_archive_dev_ino();
 1560|      0|        }
 1561|      0|        {
 1562|      0|            if ((unsigned int)wanted_access == 2U) {
 1563|      0|                goto case_2___2;
 1564|      0|            }
 1565|      0|            if ((unsigned int)wanted_access == 0U) {
 1566|      0|                goto case_0___2;
 1567|      0|            }
 1568|      0|            if ((unsigned int)wanted_access == 1U) {
 1569|      0|                goto case_1___2;
 1570|      0|            }
 1571|      0|            goto switch_break___2;
 1572|      0|case_2___2: /* CIL Label */
 1573|      0|            records_written = (off_t)0;
 1574|      0|case_0___2 : { /* CIL Label */
 1575|      0|                records_read = (off_t)0;
 1576|      0|                record_end = record_start;
 1577|      0|                find_next_block();
 1578|      0|            }
 1579|      0|            if (volume_label_option) {
 1580|      0|                {
 1581|      0|                    tmp___26 = find_next_block();
 1582|      0|                    label = tmp___26;
 1583|      0|                }
 1584|      0|                if (!label) {
 1585|      0|                    {
 1586|      0|                        tmp___27 = quote(volume_label_option);
 1587|      0|                        tmp___28 = gettext("Archive not labeled to match %s");
 1588|      0|                        error(0, 0, (char const *)tmp___28, tmp___27);
 1589|      0|                        fatal_exit();
 1590|      0|                    }
 1591|      0|                }
 1592|      0|                {
 1593|      0|                    tmp___32 = check_label_pattern(label);
 1594|      0|                }
 1595|      0|                if (!tmp___32) {
 1596|      0|                    {
 1597|      0|                        tmp___29 = quote_n(1, volume_label_option);
 1598|      0|                        tmp___30 = quote_n(0, (char const *)(label->header.name));
 1599|      0|                        tmp___31 = gettext("Volume %s does not match %s");
 1600|      0|                        error(0, 0, (char const *)tmp___31, tmp___30, tmp___29);
 1601|      0|                        fatal_exit();
 1602|      0|                    }
 1603|      0|                }
 1604|      0|            }
 1605|      0|            goto switch_break___2;
 1606|      0|case_1___2: /* CIL Label */
 1607|      0|            records_written = (off_t)0;
 1608|      0|            if (volume_label_option) {
 1609|      0|                {
 1610|      0|                    memset((void *)record_start, 0, (size_t)512);
 1611|      0|                }
 1612|      0|                if (multi_volume_option) {
 1613|      0|                    {
 1614|      0|                        sprintf((char * /* __restrict  */)(record_start->header.name),
 1615|      0|                                (char const * /* __restrict  */) "%s Volume 1",
 1616|      0|                                volume_label_option);
 1617|      0|                    }
 1618|      0|                }
 1619|      0|                else {
 1620|      0|                    {
 1621|      0|                        strcpy((char * /* __restrict  */)(record_start->header.name),
 1622|      0|                               (char const * /* __restrict  */)volume_label_option);
 1623|      0|                    }
 1624|      0|                }
 1625|      0|                {
 1626|      0|                    assign_string(&current_stat_info.file_name,
 1627|      0|                                  (char const *)(record_start->header.name));
 1628|      0|                    current_stat_info.had_trailing_slash =
 1629|      0|                        strip_trailing_slashes(current_stat_info.file_name);
 1630|      0|                    record_start->header.typeflag = (char)'V';
 1631|      0|                    time_to_chars(start_timespec.tv_sec, record_start->header.mtime,
 1632|      0|                                  sizeof(record_start->header.mtime));
 1633|      0|                    finish_header(&current_stat_info, record_start, (off_t)-1);
 1634|      0|                }
 1635|      0|            }
 1636|      0|            goto switch_break___2;
 1637|      0|switch_break___2: /* CIL Label */
 1638|      0|            ;
 1639|      0|        }
 1640|      0|        return;
 1641|      0|    }
 1642|      0|}
 1643|       |void flush_write(void)
 1644|      0|{
 1645|      0|    int copy_back;
 1646|      0|    ssize_t status;
 1647|      0|    char *tmp;
 1648|      0|    int *tmp___0;
 1649|      0|    size_t tmp___1;
 1650|      0|    char *tmp___2;
 1651|      0|    int *tmp___3;
 1652|      0|    int *tmp___4;
 1653|      0|    int *tmp___5;
 1654|      0|    _Bool tmp___6;
 1655|      0|    int tmp___7;
 1656|      0|    size_t tmp___8;
 1657|      0|    char *tmp___9;
 1658|      0|    char *__cil_tmp14;
 1659|      0|    char *__cil_tmp15;
 1660|       |
 1661|      0|    {
 1662|      0|        if (checkpoint_option) {
 1663|      0|            checkpoint++;
 1664|      0|            if (!(checkpoint % 10)) {
 1665|      0|                {
 1666|      0|                    tmp = gettext("Write checkpoint %d");
 1667|      0|                    error(0, 0, (char const *)tmp, checkpoint);
 1668|      0|                }
 1669|      0|            }
 1670|      0|        }
 1671|      0|        if (tape_length_option) {
 1672|      0|            if (tape_length_option <= bytes_written) {
 1673|      0|                {
 1674|      0|                    tmp___0 = __errno_location();
 1675|      0|                    *tmp___0 = 28;
 1676|      0|                    status = (ssize_t)0;
 1677|      0|                }
 1678|      0|            }
 1679|      0|            else {
 1680|      0|                goto _L___0;
 1681|      0|            }
 1682|      0|        }
 1683|      0|        else {
 1684|      0|_L___0: /* CIL Label */
 1685|      0|            if (dev_null_output) {
 1686|      0|                status = (ssize_t)record_size;
 1687|      0|            }
 1688|      0|            else {
 1689|      0|                {
 1690|      0|                    tmp___1 = sys_write_archive_buffer();
 1691|      0|                    status = (ssize_t)tmp___1;
 1692|      0|                }
 1693|      0|            }
 1694|      0|        }
 1695|      0|        if ((size_t)status != record_size) {
 1696|      0|            if (!multi_volume_option) {
 1697|      0|                {
 1698|      0|                    archive_write_error(status);
 1699|      0|                }
 1700|      0|            }
 1701|      0|        }
 1702|      0|        if (status > 0L) {
 1703|      0|            records_written++;
 1704|      0|            bytes_written += (tarlong)status;
 1705|      0|        }
 1706|      0|        if ((size_t)status == record_size) {
 1707|      0|            if (multi_volume_option) {
 1708|      0|                if (save_name) {
 1709|      0|                    {
 1710|      0|                        tmp___2 = safer_name_suffix((char const *)save_name, (_Bool)0);
 1711|      0|                        assign_string(&real_s_name, (char const *)tmp___2);
 1712|      0|                        real_s_totsize = save_totsize;
 1713|      0|                        real_s_sizeleft = save_sizeleft;
 1714|      0|                    }
 1715|      0|                }
 1716|      0|                else {
 1717|      0|                    {
 1718|      0|                        assign_string(&real_s_name, (char const *)0);
 1719|      0|                        real_s_totsize = (off_t)0;
 1720|      0|                        real_s_sizeleft = (off_t)0;
 1721|      0|                    }
 1722|      0|                }
 1723|      0|            }
 1724|      0|            return;
 1725|      0|        }
 1726|      0|        if (status < 0L) {
 1727|      0|            {
 1728|      0|                tmp___3 = __errno_location();
 1729|      0|            }
 1730|      0|            if (*tmp___3 != 28) {
 1731|      0|                {
 1732|      0|                    tmp___4 = __errno_location();
 1733|      0|                }
 1734|      0|                if (*tmp___4 != 5) {
 1735|      0|                    {
 1736|      0|                        tmp___5 = __errno_location();
 1737|      0|                    }
 1738|      0|                    if (*tmp___5 != 6) {
 1739|      0|                        {
 1740|      0|                            archive_write_error(status);
 1741|      0|                        }
 1742|      0|                    }
 1743|      0|                }
 1744|      0|            }
 1745|      0|        }
 1746|      0|        {
 1747|      0|            tmp___6 = new_volume((enum access_mode)1);
 1748|      0|        }
 1749|      0|        if (!tmp___6) {
 1750|      0|            return;
 1751|      0|        }
 1752|      0|        if (totals_option) {
 1753|      0|            prev_written += bytes_written;
 1754|      0|        }
 1755|      0|        bytes_written = (tarlong)0;
 1756|      0|        if (volume_label_option) {
 1757|      0|            if (real_s_name) {
 1758|      0|                copy_back = 2;
 1759|      0|                record_start -= 2;
 1760|      0|            }
 1761|      0|            else {
 1762|      0|                goto _L___1;
 1763|      0|            }
 1764|      0|        }
 1765|      0|        else {
 1766|      0|_L___1: /* CIL Label */
 1767|      0|            if (volume_label_option) {
 1768|      0|                copy_back = 1;
 1769|      0|                record_start--;
 1770|      0|            }
 1771|      0|            else {
 1772|      0|                if (real_s_name) {
 1773|      0|                    copy_back = 1;
 1774|      0|                    record_start--;
 1775|      0|                }
 1776|      0|                else {
 1777|      0|                    copy_back = 0;
 1778|      0|                }
 1779|      0|            }
 1780|      0|        }
 1781|      0|        if (volume_label_option) {
 1782|      0|            {
 1783|      0|                memset((void *)record_start, 0, (size_t)512);
 1784|      0|                sprintf((char * /* __restrict  */)(record_start->header.name),
 1785|      0|                        (char const * /* __restrict  */) "%s Volume %d",
 1786|      0|                        volume_label_option, volno);
 1787|      0|                time_to_chars(start_timespec.tv_sec, record_start->header.mtime,
 1788|      0|                              sizeof(record_start->header.mtime));
 1789|      0|                record_start->header.typeflag = (char)'V';
 1790|      0|                finish_header(&current_stat_info, record_start, (off_t)-1);
 1791|      0|            }
 1792|      0|        }
 1793|      0|        if (real_s_name) {
 1794|      0|            if (volume_label_option) {
 1795|      0|                record_start++;
 1796|      0|            }
 1797|      0|            {
 1798|      0|                memset((void *)record_start, 0, (size_t)512);
 1799|      0|                strcpy((char * /* __restrict  */)(record_start->header.name),
 1800|      0|                       (char const * /* __restrict  */)real_s_name);
 1801|      0|                record_start->header.typeflag = (char)'M';
 1802|      0|                off_to_chars(real_s_sizeleft, record_start->header.size,
 1803|      0|                             sizeof(record_start->header.size));
 1804|      0|                off_to_chars(real_s_totsize - real_s_sizeleft,
 1805|      0|                             record_start->oldgnu_header.offset,
 1806|      0|                             sizeof(record_start->oldgnu_header.offset));
 1807|      0|                tmp___7 = verbose_option;
 1808|      0|                verbose_option = 0;
 1809|      0|                finish_header(&current_stat_info, record_start, (off_t)-1);
 1810|      0|                verbose_option = tmp___7;
 1811|      0|            }
 1812|      0|            if (volume_label_option) {
 1813|      0|                record_start--;
 1814|      0|            }
 1815|      0|        }
 1816|      0|        {
 1817|      0|            tmp___8 = sys_write_archive_buffer();
 1818|      0|            status = (ssize_t)tmp___8;
 1819|      0|        }
 1820|      0|        if ((size_t)status != record_size) {
 1821|      0|            {
 1822|      0|                archive_write_error(status);
 1823|      0|            }
 1824|      0|        }
 1825|      0|        bytes_written += (tarlong)status;
 1826|      0|        if (copy_back) {
 1827|      0|            {
 1828|      0|                record_start += copy_back;
 1829|      0|                memcpy((void * /* __restrict  */)current_block,
 1830|      0|                       (void const * /* __restrict  */)(
 1831|      0|                           (record_start + blocking_factor) - copy_back),
 1832|      0|                       (size_t)(copy_back * 512));
 1833|      0|                current_block += copy_back;
 1834|      0|            }
 1835|      0|            if (real_s_sizeleft >= (off_t)(copy_back * 512)) {
 1836|      0|                real_s_sizeleft -= (off_t)(copy_back * 512);
 1837|      0|            }
 1838|      0|            else {
 1839|      0|                if (((real_s_sizeleft + 512L) - 1L) / 512L <= (off_t)copy_back) {
 1840|      0|                    {
 1841|      0|                        assign_string(&real_s_name, (char const *)0);
 1842|      0|                    }
 1843|      0|                }
 1844|      0|                else {
 1845|      0|                    {
 1846|      0|                        tmp___9 = safer_name_suffix((char const *)save_name, (_Bool)0);
 1847|      0|                        assign_string(&real_s_name, (char const *)tmp___9);
 1848|      0|                        real_s_sizeleft = save_sizeleft;
 1849|      0|                        real_s_totsize = save_totsize;
 1850|      0|                    }
 1851|      0|                }
 1852|      0|            }
 1853|      0|            copy_back = 0;
 1854|      0|        }
 1855|      0|        return;
 1856|      0|    }
 1857|      0|}
 1858|       |__attribute__((__noreturn__)) void archive_write_error(ssize_t status);
 1859|       |void archive_write_error(ssize_t status)
 1860|      0|{
 1861|      0|    int e;
 1862|      0|    int *tmp;
 1863|      0|    int *tmp___0;
 1864|       |
 1865|      0|    {
 1866|      0|        if (totals_option) {
 1867|      0|            {
 1868|      0|                tmp = __errno_location();
 1869|      0|                e = *tmp;
 1870|      0|                print_total_written();
 1871|      0|                tmp___0 = __errno_location();
 1872|      0|                *tmp___0 = e;
 1873|      0|            }
 1874|      0|        }
 1875|      0|        {
 1876|      0|            write_fatal_details(*archive_name_cursor, status, record_size);
 1877|      0|        }
 1878|      0|    }
 1879|      0|}
 1880|       |void archive_read_error(void)
 1881|      0|{
 1882|      0|    char *tmp;
 1883|      0|    char *tmp___0;
 1884|      0|    int tmp___1;
 1885|      0|    char *__cil_tmp4;
 1886|      0|    char *__cil_tmp5;
 1887|       |
 1888|      0|    {
 1889|      0|        {
 1890|      0|            read_error(*archive_name_cursor);
 1891|      0|        }
 1892|      0|        if (record_start_block == 0L) {
 1893|      0|            {
 1894|      0|                tmp = gettext("At beginning of tape, quitting now");
 1895|      0|                error(0, 0, (char const *)tmp);
 1896|      0|                fatal_exit();
 1897|      0|            }
 1898|      0|        }
 1899|      0|        tmp___1 = read_error_count;
 1900|      0|        read_error_count++;
 1901|      0|        if (tmp___1 > 10) {
 1902|      0|            {
 1903|      0|                tmp___0 = gettext("Too many errors, quitting");
 1904|      0|                error(0, 0, (char const *)tmp___0);
 1905|      0|                fatal_exit();
 1906|      0|            }
 1907|      0|        }
 1908|      0|        return;
 1909|      0|    }
 1910|      0|}
 1911|       |static void short_read(size_t status)
 1912|      0|{
 1913|      0|    size_t left;
 1914|      0|    char *more;
 1915|      0|    size_t tmp;
 1916|      0|    size_t tmp___0;
 1917|      0|    char buf[(((sizeof(uintmax_t) * 8UL) * 302UL) / 1000UL + 1UL) + 1UL];
 1918|      0|    char *tmp___1;
 1919|      0|    char *tmp___2;
 1920|      0|    unsigned long rest;
 1921|      0|    char *tmp___3;
 1922|      0|    unsigned long rsize;
 1923|      0|    char *tmp___4;
 1924|      0|    void *__cil_tmp13;
 1925|      0|    char *__cil_tmp14;
 1926|       |
 1927|      0|    {
 1928|      0|        more = record_start->buffer + status;
 1929|      0|        left = record_size - status;
 1930|      0|        {
 1931|      0|            while (1) {
 1932|      0|while_continue: /* CIL Label */
 1933|      0|                ;
 1934|      0|                if (!(left % 512UL != 0UL)) {
 1935|      0|                    if (left) {
 1936|      0|                        if (status) {
 1937|      0|                            if (!read_full_records_option) {
 1938|      0|                                goto while_break;
 1939|      0|                            }
 1940|      0|                        }
 1941|      0|                        else {
 1942|      0|                            goto while_break;
 1943|      0|                        }
 1944|      0|                    }
 1945|      0|                    else {
 1946|      0|                        goto while_break;
 1947|      0|                    }
 1948|      0|                }
 1949|      0|                if (status) {
 1950|      0|                    {
 1951|      0|                        while (1) {
 1952|      0|while_continue___0: /* CIL Label */
 1953|      0|                            ;
 1954|      0|                            if (archive >= 1 << 30) {
 1955|      0|                                {
 1956|      0|                                    tmp = rmt_read__(archive - (1 << 30), more, left);
 1957|      0|                                    status = tmp;
 1958|      0|                                }
 1959|      0|                            }
 1960|      0|                            else {
 1961|      0|                                {
 1962|      0|                                    tmp___0 = safe_read(archive, (void *)more, left);
 1963|      0|                                    status = tmp___0;
 1964|      0|                                }
 1965|      0|                            }
 1966|      0|                            if (!(status == 0xffffffffffffffffUL)) {
 1967|      0|                                goto while_break___0;
 1968|      0|                            }
 1969|      0|                            {
 1970|      0|                                archive_read_error();
 1971|      0|                            }
 1972|      0|                        }
 1973|      0|while_break___0: /* CIL Label */
 1974|      0|                        ;
 1975|      0|                    }
 1976|      0|                }
 1977|      0|                if (status == 0UL) {
 1978|      0|                    {
 1979|      0|                        tmp___1 = stringify_uintmax_t_backwards(
 1980|      0|                                      record_size - left,
 1981|      0|                                      buf + ((((sizeof(uintmax_t) * 8UL) * 302UL) / 1000UL + 1UL) +
 1982|      0|                                             1UL));
 1983|      0|                        tmp___2 = gettext("Read %s bytes from %s");
 1984|      0|                        error(0, 0, (char const *)tmp___2, tmp___1, *archive_name_cursor);
 1985|      0|                    }
 1986|      0|                    goto while_break;
 1987|      0|                }
 1988|      0|                if (!read_full_records_option) {
 1989|      0|                    {
 1990|      0|                        rest = record_size - left;
 1991|      0|                        tmp___3 = ngettext("Unaligned block (%lu byte) in archive",
 1992|      0|                                           "Unaligned block (%lu bytes) in archive", rest);
 1993|      0|                        error(0, 0, (char const *)tmp___3, rest);
 1994|      0|                        fatal_exit();
 1995|      0|                    }
 1996|      0|                }
 1997|      0|                left -= status;
 1998|      0|                more += status;
 1999|      0|            }
 2000|      0|while_break: /* CIL Label */
 2001|      0|            ;
 2002|      0|        }
 2003|      0|        if (!read_full_records_option) {
 2004|      0|            if (verbose_option > 1) {
 2005|      0|                if (record_start_block == 0L) {
 2006|      0|                    if (status != 0UL) {
 2007|      0|                        {
 2008|      0|                            rsize = (record_size - left) / 512UL;
 2009|      0|                            tmp___4 = ngettext("Record size = %lu block",
 2010|      0|                                               "Record size = %lu blocks", rsize);
 2011|      0|                            error(0, 0, (char const *)tmp___4, rsize);
 2012|      0|                        }
 2013|      0|                    }
 2014|      0|                }
 2015|      0|            }
 2016|      0|        }
 2017|      0|        record_end = record_start + (record_size - left) / 512UL;
 2018|      0|        records_read++;
 2019|      0|        return;
 2020|      0|    }
 2021|      0|}
 2022|       |void flush_read(void)
 2023|      0|{
 2024|      0|    size_t status;
 2025|      0|    char *tmp;
 2026|      0|    char *tmp___0;
 2027|      0|    size_t tmp___1;
 2028|      0|    size_t tmp___2;
 2029|      0|    union block *cursor;
 2030|      0|    _Bool tmp___3;
 2031|      0|    _Bool tmp___4;
 2032|      0|    size_t tmp___5;
 2033|      0|    size_t tmp___6;
 2034|      0|    char const *tmp___7;
 2035|      0|    char const *tmp___8;
 2036|      0|    char *tmp___9;
 2037|      0|    _Bool tmp___10;
 2038|      0|    char const *tmp___11;
 2039|      0|    char *tmp___12;
 2040|      0|    char *tmp___13;
 2041|      0|    uintmax_t s1;
 2042|      0|    uintmax_t s2;
 2043|      0|    char const *tmp___14;
 2044|      0|    char *tmp___15;
 2045|      0|    int tmp___16;
 2046|      0|    char totsizebuf[(((sizeof(uintmax_t) * 8UL) * 302UL) / 1000UL + 1UL) + 1UL];
 2047|      0|    char s1buf[(((sizeof(uintmax_t) * 8UL) * 302UL) / 1000UL + 1UL) + 1UL];
 2048|      0|    char s2buf[(((sizeof(uintmax_t) * 8UL) * 302UL) / 1000UL + 1UL) + 1UL];
 2049|      0|    char *tmp___17;
 2050|      0|    char *tmp___18;
 2051|      0|    char *tmp___19;
 2052|      0|    char const *tmp___20;
 2053|      0|    char *tmp___21;
 2054|      0|    char *tmp___22;
 2055|      0|    off_t tmp___23;
 2056|      0|    int *tmp___24;
 2057|      0|    void *__cil_tmp34;
 2058|      0|    void *__cil_tmp35;
 2059|      0|    void *__cil_tmp36;
 2060|      0|    char *__cil_tmp37;
 2061|      0|    char *__cil_tmp38;
 2062|      0|    char *__cil_tmp39;
 2063|      0|    char *__cil_tmp40;
 2064|      0|    char *__cil_tmp41;
 2065|      0|    char *__cil_tmp42;
 2066|      0|    char *__cil_tmp43;
 2067|       |
 2068|      0|    {
 2069|      0|        if (checkpoint_option) {
 2070|      0|            checkpoint++;
 2071|      0|            if (!(checkpoint % 10)) {
 2072|      0|                {
 2073|      0|                    tmp = gettext("Read checkpoint %d");
 2074|      0|                    error(0, 0, (char const *)tmp, checkpoint);
 2075|      0|                }
 2076|      0|            }
 2077|      0|        }
 2078|      0|        read_error_count = 0;
 2079|      0|        if (write_archive_to_stdout) {
 2080|      0|            if (record_start_block != 0L) {
 2081|      0|                {
 2082|      0|                    archive = 1;
 2083|      0|                    status = sys_write_archive_buffer();
 2084|      0|                    archive = 0;
 2085|      0|                }
 2086|      0|                if (status != record_size) {
 2087|      0|                    {
 2088|      0|                        archive_write_error((ssize_t)status);
 2089|      0|                    }
 2090|      0|                }
 2091|      0|            }
 2092|      0|        }
 2093|      0|        if (multi_volume_option) {
 2094|      0|            if (save_name) {
 2095|      0|                {
 2096|      0|                    tmp___0 = safer_name_suffix((char const *)save_name, (_Bool)0);
 2097|      0|                    assign_string(&real_s_name, (char const *)tmp___0);
 2098|      0|                    real_s_sizeleft = save_sizeleft;
 2099|      0|                    real_s_totsize = save_totsize;
 2100|      0|                }
 2101|      0|            }
 2102|      0|            else {
 2103|      0|                {
 2104|      0|                    assign_string(&real_s_name, (char const *)0);
 2105|      0|                    real_s_totsize = (off_t)0;
 2106|      0|                    real_s_sizeleft = (off_t)0;
 2107|      0|                }
 2108|      0|            }
 2109|      0|        }
 2110|      0|error_loop:
 2111|      0|        if (archive >= 1 << 30) {
 2112|      0|            {
 2113|      0|                tmp___1 =
 2114|      0|                    rmt_read__(archive - (1 << 30), record_start->buffer, record_size);
 2115|      0|                status = tmp___1;
 2116|      0|            }
 2117|      0|        }
 2118|      0|        else {
 2119|      0|            {
 2120|      0|                tmp___2 =
 2121|      0|                    safe_read(archive, (void *)(record_start->buffer), record_size);
 2122|      0|                status = tmp___2;
 2123|      0|            }
 2124|      0|        }
 2125|      0|        if (status == record_size) {
 2126|      0|            records_read++;
 2127|      0|            return;
 2128|      0|        }
 2129|      0|        if (status == 0UL) {
 2130|      0|            goto _L___1;
 2131|      0|        }
 2132|      0|        else {
 2133|      0|            if (status == 0xffffffffffffffffUL) {
 2134|      0|                {
 2135|      0|                    tmp___24 = __errno_location();
 2136|      0|                }
 2137|      0|                if (*tmp___24 == 28) {
 2138|      0|_L___1:
 2139|      0|                    if (multi_volume_option) {
 2140|      0|try_volume : {
 2141|      0|                            if ((unsigned int)subcommand_option == 1U) {
 2142|      0|                                goto case_1;
 2143|      0|                            }
 2144|      0|                            if ((unsigned int)subcommand_option == 2U) {
 2145|      0|                                goto case_1;
 2146|      0|                            }
 2147|      0|                            if ((unsigned int)subcommand_option == 8U) {
 2148|      0|                                goto case_1;
 2149|      0|                            }
 2150|      0|                            goto switch_default;
 2151|      0|case_1:  /* CIL Label */
 2152|      0|case_2:  /* CIL Label */
 2153|      0|case_8 : { /* CIL Label */
 2154|      0|                                tmp___3 = new_volume((enum access_mode)2);
 2155|      0|                            }
 2156|      0|                            if (!tmp___3) {
 2157|      0|                                return;
 2158|      0|                            }
 2159|      0|                            goto switch_break;
 2160|      0|switch_default : { /* CIL Label */
 2161|      0|                                tmp___4 = new_volume((enum access_mode)0);
 2162|      0|                            }
 2163|      0|                            if (!tmp___4) {
 2164|      0|                                return;
 2165|      0|                            }
 2166|      0|                            goto switch_break;
 2167|      0|switch_break: /* CIL Label */
 2168|      0|                            ;
 2169|      0|                        }
 2170|      0|                        {
 2171|      0|                            while (1) {
 2172|      0|while_continue: /* CIL Label */
 2173|      0|                                ;
 2174|      0|                                if (archive >= 1 << 30) {
 2175|      0|                                    {
 2176|      0|                                        tmp___5 = rmt_read__(archive - (1 << 30),
 2177|      0|                                                             record_start->buffer, record_size);
 2178|      0|                                        status = tmp___5;
 2179|      0|                                    }
 2180|      0|                                }
 2181|      0|                                else {
 2182|      0|                                    {
 2183|      0|                                        tmp___6 = safe_read(archive, (void *)(record_start->buffer),
 2184|      0|                                                            record_size);
 2185|      0|                                        status = tmp___6;
 2186|      0|                                    }
 2187|      0|                                }
 2188|      0|                                if (!(status == 0xffffffffffffffffUL)) {
 2189|      0|                                    goto while_break;
 2190|      0|                                }
 2191|      0|                                {
 2192|      0|                                    archive_read_error();
 2193|      0|                                }
 2194|      0|                            }
 2195|      0|while_break: /* CIL Label */
 2196|      0|                            ;
 2197|      0|                        }
 2198|      0|                        if (status != record_size) {
 2199|      0|                            {
 2200|      0|                                short_read(status);
 2201|      0|                            }
 2202|      0|                        }
 2203|      0|                        cursor = record_start;
 2204|      0|                        if ((int)cursor->header.typeflag == 86) {
 2205|      0|                            if (volume_label_option) {
 2206|      0|                                {
 2207|      0|                                    tmp___10 = check_label_pattern(cursor);
 2208|      0|                                }
 2209|      0|                                if (!tmp___10) {
 2210|      0|                                    {
 2211|      0|                                        tmp___7 = quote_n(1, volume_label_option);
 2212|      0|                                        tmp___8 = quote_n(0, (char const *)(cursor->header.name));
 2213|      0|                                        tmp___9 = gettext("Volume %s does not match %s");
 2214|      0|                                        error(0, 0, (char const *)tmp___9, tmp___8, tmp___7);
 2215|      0|                                        volno--;
 2216|      0|                                        global_volno--;
 2217|      0|                                    }
 2218|      0|                                    goto try_volume;
 2219|      0|                                }
 2220|      0|                            }
 2221|      0|                            if (verbose_option) {
 2222|      0|                                {
 2223|      0|                                    tmp___11 = quote((char const *)(cursor->header.name));
 2224|      0|                                    tmp___12 = gettext("Reading %s\n");
 2225|      0|                                    fprintf((FILE * /* __restrict  */) stdlis,
 2226|      0|                                            (char const * /* __restrict  */)tmp___12, tmp___11);
 2227|      0|                                }
 2228|      0|                            }
 2229|      0|                            cursor++;
 2230|      0|                        }
 2231|      0|                        else {
 2232|      0|                            if (volume_label_option) {
 2233|      0|                                {
 2234|      0|                                    tmp___13 = gettext("WARNING: No volume header");
 2235|      0|                                    error(0, 0, (char const *)tmp___13);
 2236|      0|                                }
 2237|      0|                            }
 2238|      0|                        }
 2239|      0|                        if (real_s_name) {
 2240|      0|                            if ((int)cursor->header.typeflag != 77) {
 2241|      0|                                goto _L;
 2242|      0|                            }
 2243|      0|                            else {
 2244|      0|                                {
 2245|      0|                                    tmp___16 = strcmp((char const *)(cursor->header.name),
 2246|      0|                                                      (char const *)real_s_name);
 2247|      0|                                }
 2248|      0|                                if (tmp___16) {
 2249|      0|_L : {
 2250|      0|                                        tmp___14 = quote((char const *)real_s_name);
 2251|      0|                                        tmp___15 = gettext("%s is not continued on this volume");
 2252|      0|                                        error(0, 0, (char const *)tmp___15, tmp___14);
 2253|      0|                                        volno--;
 2254|      0|                                        global_volno--;
 2255|      0|                                    }
 2256|      0|                                    goto try_volume;
 2257|      0|                                }
 2258|      0|                            }
 2259|      0|                            {
 2260|      0|                                s1 = uintmax_from_header((char const *)(cursor->header.size),
 2261|      0|                                                         sizeof(cursor->header.size));
 2262|      0|                                s2 = uintmax_from_header(
 2263|      0|                                         (char const *)(cursor->oldgnu_header.offset),
 2264|      0|                                         sizeof(cursor->oldgnu_header.offset));
 2265|      0|                            }
 2266|      0|                            if ((uintmax_t)real_s_totsize != s1 + s2) {
 2267|      0|                                goto _L___3;
 2268|      0|                            }
 2269|      0|                            else {
 2270|      0|                                if (s1 + s2 < s2) {
 2271|      0|_L___3 : { /* CIL Label */
 2272|      0|                                        tmp___17 = stringify_uintmax_t_backwards(
 2273|      0|                                                       s2,
 2274|      0|                                                       s2buf + ((((sizeof(uintmax_t) * 8UL) * 302UL) / 1000UL +
 2275|      0|                                                                 1UL) +
 2276|      0|                                                                1UL));
 2277|      0|                                        tmp___18 = stringify_uintmax_t_backwards(
 2278|      0|                                                       s1,
 2279|      0|                                                       s1buf + ((((sizeof(uintmax_t) * 8UL) * 302UL) / 1000UL +
 2280|      0|                                                                 1UL) +
 2281|      0|                                                                1UL));
 2282|      0|                                        tmp___19 = stringify_uintmax_t_backwards(
 2283|      0|                                                       (uintmax_t)save_totsize,
 2284|      0|                                                       totsizebuf +
 2285|      0|                                                       ((((sizeof(uintmax_t) * 8UL) * 302UL) / 1000UL +
 2286|      0|                                                         1UL) +
 2287|      0|                                                        1UL));
 2288|      0|                                        tmp___20 = quote((char const *)(cursor->header.name));
 2289|      0|                                        tmp___21 = gettext("%s is the wrong size (%s != %s + %s)");
 2290|      0|                                        error(0, 0, (char const *)tmp___21, tmp___20, tmp___19,
 2291|      0|                                              tmp___18, tmp___17);
 2292|      0|                                        volno--;
 2293|      0|                                        global_volno--;
 2294|      0|                                    }
 2295|      0|                                    goto try_volume;
 2296|      0|                                }
 2297|      0|                            }
 2298|      0|                            {
 2299|      0|                                tmp___23 = off_from_header(
 2300|      0|                                               (char const *)(cursor->oldgnu_header.offset),
 2301|      0|                                               sizeof(cursor->oldgnu_header.offset));
 2302|      0|                            }
 2303|      0|                            if (real_s_totsize - real_s_sizeleft != tmp___23) {
 2304|      0|                                {
 2305|      0|                                    tmp___22 = gettext("This volume is out of sequence");
 2306|      0|                                    error(0, 0, (char const *)tmp___22);
 2307|      0|                                    volno--;
 2308|      0|                                    global_volno--;
 2309|      0|                                }
 2310|      0|                                goto try_volume;
 2311|      0|                            }
 2312|      0|                            cursor++;
 2313|      0|                        }
 2314|      0|                        current_block = cursor;
 2315|      0|                        records_read++;
 2316|      0|                        return;
 2317|      0|                    }
 2318|      0|                    else {
 2319|      0|                        goto _L___2;
 2320|      0|                    }
 2321|      0|                }
 2322|      0|                else {
 2323|      0|                    goto _L___2;
 2324|      0|                }
 2325|      0|            }
 2326|      0|            else {
 2327|      0|_L___2:
 2328|      0|                if (status == 0xffffffffffffffffUL) {
 2329|      0|                    {
 2330|      0|                        archive_read_error();
 2331|      0|                    }
 2332|      0|                    goto error_loop;
 2333|      0|                }
 2334|      0|            }
 2335|      0|        }
 2336|      0|        {
 2337|      0|            short_read(status);
 2338|      0|        }
 2339|      0|        return;
 2340|      0|    }
 2341|      0|}
 2342|       |void flush_archive(void)
 2343|      0|{
 2344|       |
 2345|      0|    {
 2346|      0|        record_start_block += record_end - record_start;
 2347|      0|        current_block = record_start;
 2348|      0|        record_end = record_start + blocking_factor;
 2349|      0|        if ((unsigned int)access_mode == 0U) {
 2350|      0|            if (time_to_start_writing) {
 2351|      0|                {
 2352|      0|                    access_mode = (enum access_mode)1;
 2353|      0|                    time_to_start_writing = (_Bool)0;
 2354|      0|                    backspace_output();
 2355|      0|                }
 2356|      0|            }
 2357|      0|        }
 2358|      0|        {
 2359|      0|            if ((unsigned int)access_mode == 0U) {
 2360|      0|                goto case_0;
 2361|      0|            }
 2362|      0|            if ((unsigned int)access_mode == 1U) {
 2363|      0|                goto case_1;
 2364|      0|            }
 2365|      0|            if ((unsigned int)access_mode == 2U) {
 2366|      0|                goto case_2;
 2367|      0|            }
 2368|      0|            goto switch_break;
 2369|      0|case_0 : { /* CIL Label */
 2370|      0|                flush_read();
 2371|      0|            }
 2372|      0|            goto switch_break;
 2373|      0|case_1 : { /* CIL Label */
 2374|      0|                flush_write();
 2375|      0|            }
 2376|      0|            goto switch_break;
 2377|      0|case_2 : { /* CIL Label */
 2378|      0|                abort();
 2379|      0|            }
 2380|      0|switch_break: /* CIL Label */
 2381|      0|            ;
 2382|      0|        }
 2383|      0|        return;
 2384|      0|    }
 2385|      0|}
 2386|       |static void backspace_output(void)
 2387|      0|{
 2388|      0|    struct mtop operation;
 2389|      0|    int tmp;
 2390|      0|    int tmp___0;
 2391|      0|    int tmp___1;
 2392|      0|    int *tmp___2;
 2393|      0|    int tmp___3;
 2394|      0|    int tmp___4;
 2395|      0|    int tmp___5;
 2396|      0|    off_t position;
 2397|      0|    off_t tmp___6;
 2398|      0|    __off_t tmp___7;
 2399|      0|    off_t tmp___8;
 2400|      0|    char *tmp___9;
 2401|      0|    off_t tmp___10;
 2402|      0|    __off_t tmp___11;
 2403|      0|    off_t tmp___12;
 2404|      0|    char *__cil_tmp17;
 2405|       |
 2406|      0|    {
 2407|      0|        operation.mt_op = (short)4;
 2408|      0|        operation.mt_count = 1;
 2409|      0|        if (archive >= 1 << 30) {
 2410|      0|            {
 2411|      0|                tmp = rmt_ioctl__(
 2412|      0|                          archive - (1 << 30),
 2413|      0|                          (int)((unsigned long)(((1U << 30) | (unsigned int)(109 << 8)) |
 2414|      0|                                                1U) |
 2415|      0|                                (sizeof(struct mtop) << 16)),
 2416|      0|                          (char *)(&operation));
 2417|      0|                tmp___1 = tmp;
 2418|      0|            }
 2419|      0|        }
 2420|      0|        else {
 2421|      0|            {
 2422|      0|                tmp___0 = ioctl(
 2423|      0|                              archive,
 2424|      0|                              (unsigned long)(((1U << 30) | (unsigned int)(109 << 8)) | 1U) |
 2425|      0|                              (sizeof(struct mtop) << 16),
 2426|      0|                              (char *)(&operation));
 2427|      0|                tmp___1 = tmp___0;
 2428|      0|            }
 2429|      0|        }
 2430|      0|        if (tmp___1 >= 0) {
 2431|      0|            return;
 2432|      0|        }
 2433|      0|        {
 2434|      0|            tmp___2 = __errno_location();
 2435|      0|        }
 2436|      0|        if (*tmp___2 == 5) {
 2437|      0|            if (archive >= 1 << 30) {
 2438|      0|                {
 2439|      0|                    tmp___3 = rmt_ioctl__(
 2440|      0|                                  archive - (1 << 30),
 2441|      0|                                  (int)((unsigned long)(((1U << 30) | (unsigned int)(109 << 8)) |
 2442|      0|                                                        1U) |
 2443|      0|                                        (sizeof(struct mtop) << 16)),
 2444|      0|                                  (char *)(&operation));
 2445|      0|                    tmp___5 = tmp___3;
 2446|      0|                }
 2447|      0|            }
 2448|      0|            else {
 2449|      0|                {
 2450|      0|                    tmp___4 = ioctl(
 2451|      0|                                  archive,
 2452|      0|                                  (unsigned long)(((1U << 30) | (unsigned int)(109 << 8)) | 1U) |
 2453|      0|                                  (sizeof(struct mtop) << 16),
 2454|      0|                                  (char *)(&operation));
 2455|      0|                    tmp___5 = tmp___4;
 2456|      0|                }
 2457|      0|            }
 2458|      0|            if (tmp___5 >= 0) {
 2459|      0|                return;
 2460|      0|            }
 2461|      0|        }
 2462|      0|        if (archive >= 1 << 30) {
 2463|      0|            {
 2464|      0|                tmp___6 = rmt_lseek__(archive - (1 << 30), (off_t)0, 1);
 2465|      0|                tmp___8 = tmp___6;
 2466|      0|            }
 2467|      0|        }
 2468|      0|        else {
 2469|      0|            {
 2470|      0|                tmp___7 = lseek(archive, (off_t)0, 1);
 2471|      0|                tmp___8 = tmp___7;
 2472|      0|            }
 2473|      0|        }
 2474|      0|        position = tmp___8;
 2475|      0|        position = (off_t)((size_t)position - record_size);
 2476|      0|        if (position < 0L) {
 2477|      0|            position = (off_t)0;
 2478|      0|        }
 2479|      0|        if (archive >= 1 << 30) {
 2480|      0|            {
 2481|      0|                tmp___10 = rmt_lseek__(archive - (1 << 30), position, 0);
 2482|      0|                tmp___12 = tmp___10;
 2483|      0|            }
 2484|      0|        }
 2485|      0|        else {
 2486|      0|            {
 2487|      0|                tmp___11 = lseek(archive, position, 0);
 2488|      0|                tmp___12 = tmp___11;
 2489|      0|            }
 2490|      0|        }
 2491|      0|        if (tmp___12 != position) {
 2492|      0|            {
 2493|      0|                tmp___9 = gettext(
 2494|      0|                              "Cannot backspace archive file; it may be unreadable without -i");
 2495|      0|                error(0, 0, (char const *)tmp___9);
 2496|      0|            }
 2497|      0|            if ((unsigned long)(record_start->buffer) !=
 2498|      0|                    (unsigned long)output_start) {
 2499|      0|                {
 2500|      0|                    memset((void *)(record_start->buffer), 0,
 2501|      0|                           (size_t)(output_start - record_start->buffer));
 2502|      0|                }
 2503|      0|            }
 2504|      0|        }
 2505|      0|        return;
 2506|      0|    }
 2507|      0|}
 2508|       |void close_archive(void)
 2509|      0|{
 2510|      0|    int tmp;
 2511|      0|    int tmp___0;
 2512|      0|    int tmp___1;
 2513|      0|    union block *tmp___2;
 2514|       |
 2515|      0|    {
 2516|      0|        if (time_to_start_writing) {
 2517|      0|            {
 2518|      0|                flush_archive();
 2519|      0|            }
 2520|      0|        }
 2521|      0|        else {
 2522|      0|            if ((unsigned int)access_mode == 1U) {
 2523|      0|                {
 2524|      0|                    flush_archive();
 2525|      0|                }
 2526|      0|            }
 2527|      0|        }
 2528|      0|        {
 2529|      0|            sys_drain_input_pipe();
 2530|      0|        }
 2531|      0|        if (verify_option) {
 2532|      0|            {
 2533|      0|                verify_volume();
 2534|      0|            }
 2535|      0|        }
 2536|      0|        if (archive >= 1 << 30) {
 2537|      0|            {
 2538|      0|                tmp = rmt_close__(archive - (1 << 30));
 2539|      0|                tmp___1 = tmp;
 2540|      0|            }
 2541|      0|        }
 2542|      0|        else {
 2543|      0|            {
 2544|      0|                tmp___0 = close(archive);
 2545|      0|                tmp___1 = tmp___0;
 2546|      0|            }
 2547|      0|        }
 2548|      0|        if (tmp___1 != 0) {
 2549|      0|            {
 2550|      0|                close_warn(*archive_name_cursor);
 2551|      0|            }
 2552|      0|        }
 2553|      0|        {
 2554|      0|            sys_wait_for_child(child_pid);
 2555|      0|            tar_stat_destroy(&current_stat_info);
 2556|      0|        }
 2557|      0|        if (save_name) {
 2558|      0|            {
 2559|      0|                free((void *)save_name);
 2560|      0|            }
 2561|      0|        }
 2562|      0|        if (real_s_name) {
 2563|      0|            {
 2564|      0|                free((void *)real_s_name);
 2565|      0|            }
 2566|      0|        }
 2567|      0|        if (multi_volume_option) {
 2568|      0|            tmp___2 = record_start - 2;
 2569|      0|        }
 2570|      0|        else {
 2571|      0|            tmp___2 = record_start;
 2572|      0|        }
 2573|      0|        {
 2574|      0|            free((void *)tmp___2);
 2575|      0|        }
 2576|      0|        return;
 2577|      0|    }
 2578|      0|}
 2579|       |void init_volume_number(void)
 2580|      0|{
 2581|      0|    FILE *file;
 2582|      0|    FILE *tmp;
 2583|      0|    char *tmp___0;
 2584|      0|    char *tmp___1;
 2585|      0|    int tmp___2;
 2586|      0|    int tmp___3;
 2587|      0|    int tmp___4;
 2588|      0|    int *tmp___5;
 2589|      0|    char *__cil_tmp9;
 2590|      0|    char *__cil_tmp10;
 2591|       |
 2592|      0|    {
 2593|      0|        {
 2594|      0|            tmp = fopen((char const * /* __restrict  */)volno_file_option,
 2595|      0|                        (char const * /* __restrict  */) "r");
 2596|      0|            file = tmp;
 2597|      0|        }
 2598|      0|        if (file) {
 2599|      0|            {
 2600|      0|                tmp___2 = fscanf((FILE * /* __restrict  */) file,
 2601|      0|                                 (char const * /* __restrict  */) "%d", &global_volno);
 2602|      0|            }
 2603|      0|            if (tmp___2 != 1) {
 2604|      0|                {
 2605|      0|                    tmp___0 = quotearg_colon(volno_file_option);
 2606|      0|                    tmp___1 = gettext("%s: contains invalid volume number");
 2607|      0|                    error(0, 0, (char const *)tmp___1, tmp___0);
 2608|      0|                    fatal_exit();
 2609|      0|                }
 2610|      0|            }
 2611|      0|            else {
 2612|      0|                if (global_volno < 0) {
 2613|      0|                    {
 2614|      0|                        tmp___0 = quotearg_colon(volno_file_option);
 2615|      0|                        tmp___1 = gettext("%s: contains invalid volume number");
 2616|      0|                        error(0, 0, (char const *)tmp___1, tmp___0);
 2617|      0|                        fatal_exit();
 2618|      0|                    }
 2619|      0|                }
 2620|      0|            }
 2621|      0|            {
 2622|      0|                tmp___3 = ferror_unlocked(file);
 2623|      0|            }
 2624|      0|            if (tmp___3) {
 2625|      0|                {
 2626|      0|                    read_error(volno_file_option);
 2627|      0|                }
 2628|      0|            }
 2629|      0|            {
 2630|      0|                tmp___4 = fclose(file);
 2631|      0|            }
 2632|      0|            if (tmp___4 != 0) {
 2633|      0|                {
 2634|      0|                    close_error(volno_file_option);
 2635|      0|                }
 2636|      0|            }
 2637|      0|        }
 2638|      0|        else {
 2639|      0|            {
 2640|      0|                tmp___5 = __errno_location();
 2641|      0|            }
 2642|      0|            if (*tmp___5 != 2) {
 2643|      0|                {
 2644|      0|                    open_error(volno_file_option);
 2645|      0|                }
 2646|      0|            }
 2647|      0|        }
 2648|      0|        return;
 2649|      0|    }
 2650|      0|}
 2651|       |void closeout_volume_number(void)
 2652|      0|{
 2653|      0|    FILE *file;
 2654|      0|    FILE *tmp;
 2655|      0|    int tmp___0;
 2656|      0|    int tmp___1;
 2657|       |
 2658|      0|    {
 2659|      0|        {
 2660|      0|            tmp = fopen((char const * /* __restrict  */)volno_file_option,
 2661|      0|                        (char const * /* __restrict  */) "w");
 2662|      0|            file = tmp;
 2663|      0|        }
 2664|      0|        if (file) {
 2665|      0|            {
 2666|      0|                fprintf((FILE * /* __restrict  */) file,
 2667|      0|                        (char const * /* __restrict  */) "%d\n", global_volno);
 2668|      0|                tmp___0 = ferror_unlocked(file);
 2669|      0|            }
 2670|      0|            if (tmp___0) {
 2671|      0|                {
 2672|      0|                    write_error(volno_file_option);
 2673|      0|                }
 2674|      0|            }
 2675|      0|            {
 2676|      0|                tmp___1 = fclose(file);
 2677|      0|            }
 2678|      0|            if (tmp___1 != 0) {
 2679|      0|                {
 2680|      0|                    close_error(volno_file_option);
 2681|      0|                }
 2682|      0|            }
 2683|      0|        }
 2684|      0|        else {
 2685|      0|            {
 2686|      0|                open_error(volno_file_option);
 2687|      0|            }
 2688|      0|        }
 2689|      0|        return;
 2690|      0|    }
 2691|      0|}
 2692|       |static FILE *read_file;
 2693|       |static int looped;
 2694|       |static _Bool new_volume(enum access_mode mode)
 2695|      0|{
 2696|      0|    FILE *tmp;
 2697|      0|    int tmp___0;
 2698|      0|    int tmp___1;
 2699|      0|    int tmp___2;
 2700|      0|    char *tmp___3;
 2701|      0|    char *tmp___4;
 2702|      0|    int tmp___5;
 2703|      0|    char input_buffer[80];
 2704|      0|    char const *tmp___6;
 2705|      0|    char *tmp___7;
 2706|      0|    char *tmp___8;
 2707|      0|    char *tmp___9;
 2708|      0|    char *tmp___10;
 2709|      0|    char *tmp___11;
 2710|      0|    char *tmp___12;
 2711|      0|    char *tmp___13;
 2712|      0|    char *name;
 2713|      0|    char *cursor;
 2714|      0|    char *tmp___14;
 2715|      0|    int tmp___16;
 2716|      0|    int tmp___17;
 2717|      0|    void *tmp___18;
 2718|      0|    int tmp___20;
 2719|      0|    int tmp___21;
 2720|      0|    void *tmp___22;
 2721|      0|    int tmp___24;
 2722|      0|    int tmp___25;
 2723|      0|    void *tmp___26;
 2724|      0|    int tmp___28;
 2725|      0|    int tmp___29;
 2726|      0|    void *tmp___30;
 2727|      0|    int tmp___31;
 2728|      0|    void *__cil_tmp34;
 2729|      0|    char *__cil_tmp35;
 2730|      0|    char *__cil_tmp36;
 2731|      0|    char *__cil_tmp37;
 2732|      0|    char *__cil_tmp38;
 2733|      0|    char *__cil_tmp39;
 2734|      0|    char *__cil_tmp40;
 2735|      0|    char *__cil_tmp41;
 2736|      0|    char *__cil_tmp42;
 2737|       |
 2738|      0|    {
 2739|      0|        if (!read_file) {
 2740|      0|            if (!info_script_option) {
 2741|      0|                if (archive == 0) {
 2742|      0|                    {
 2743|      0|                        tmp = fopen((char const * /* __restrict  */) "/dev/tty",
 2744|      0|                                    (char const * /* __restrict  */) "r");
 2745|      0|                        read_file = tmp;
 2746|      0|                    }
 2747|      0|                }
 2748|      0|                else {
 2749|      0|                    read_file = stdin;
 2750|      0|                }
 2751|      0|            }
 2752|      0|        }
 2753|      0|        if (now_verifying) {
 2754|      0|            return ((_Bool)0);
 2755|      0|        }
 2756|      0|        if (verify_option) {
 2757|      0|            {
 2758|      0|                verify_volume();
 2759|      0|            }
 2760|      0|        }
 2761|      0|        if (archive >= 1 << 30) {
 2762|      0|            {
 2763|      0|                tmp___0 = rmt_close__(archive - (1 << 30));
 2764|      0|                tmp___2 = tmp___0;
 2765|      0|            }
 2766|      0|        }
 2767|      0|        else {
 2768|      0|            {
 2769|      0|                tmp___1 = close(archive);
 2770|      0|                tmp___2 = tmp___1;
 2771|      0|            }
 2772|      0|        }
 2773|      0|        if (tmp___2 != 0) {
 2774|      0|            {
 2775|      0|                close_warn(*archive_name_cursor);
 2776|      0|            }
 2777|      0|        }
 2778|      0|        global_volno++;
 2779|      0|        if (global_volno < 0) {
 2780|      0|            {
 2781|      0|                tmp___3 = gettext("Volume number overflow");
 2782|      0|                error(0, 0, (char const *)tmp___3);
 2783|      0|                fatal_exit();
 2784|      0|            }
 2785|      0|        }
 2786|      0|        volno++;
 2787|      0|        archive_name_cursor++;
 2788|      0|        if ((unsigned long)archive_name_cursor ==
 2789|      0|                (unsigned long)(archive_name_array + archive_names)) {
 2790|      0|            archive_name_cursor = archive_name_array;
 2791|      0|            looped = 1;
 2792|      0|        }
 2793|      0|tryagain:
 2794|      0|        if (looped) {
 2795|      0|            if (info_script_option) {
 2796|      0|                if (volno_file_option) {
 2797|      0|                    {
 2798|      0|                        closeout_volume_number();
 2799|      0|                    }
 2800|      0|                }
 2801|      0|                {
 2802|      0|                    tmp___5 = system(info_script_option);
 2803|      0|                }
 2804|      0|                if (tmp___5 != 0) {
 2805|      0|                    {
 2806|      0|                        tmp___4 = gettext("`%s\' command failed");
 2807|      0|                        error(0, 0, (char const *)tmp___4, info_script_option);
 2808|      0|                        fatal_exit();
 2809|      0|                    }
 2810|      0|                }
 2811|      0|            }
 2812|      0|            else {
 2813|      0|                {
 2814|      0|                    while (1) {
 2815|      0|while_continue: /* CIL Label */
 2816|      0|                        ;
 2817|      0|                        {
 2818|      0|                            fputc_unlocked('\a', stderr);
 2819|      0|                            tmp___6 = quote(*archive_name_cursor);
 2820|      0|                            tmp___7 = gettext("Prepare volume #%d for %s and hit return: ");
 2821|      0|                            fprintf((FILE * /* __restrict  */) stderr,
 2822|      0|                                    (char const * /* __restrict  */)tmp___7, global_volno,
 2823|      0|                                    tmp___6);
 2824|      0|                            fflush_unlocked(stderr);
 2825|      0|                            tmp___10 =
 2826|      0|                                fgets_unlocked((char * /* __restrict  */)(input_buffer),
 2827|      0|                                               (int)sizeof(input_buffer),
 2828|      0|                                               (FILE * /* __restrict  */) read_file);
 2829|      0|                        }
 2830|      0|                        if ((unsigned long)tmp___10 == (unsigned long)((char *)0)) {
 2831|      0|                            {
 2832|      0|                                tmp___8 = gettext("EOF where user reply was expected");
 2833|      0|                                error(0, 0, (char const *)tmp___8);
 2834|      0|                            }
 2835|      0|                            if ((unsigned int)subcommand_option != 6U) {
 2836|      0|                                if ((unsigned int)subcommand_option != 7U) {
 2837|      0|                                    if ((unsigned int)subcommand_option != 5U) {
 2838|      0|                                        {
 2839|      0|                                            tmp___9 = gettext("WARNING: Archive is incomplete");
 2840|      0|                                            error(0, 0, (char const *)tmp___9);
 2841|      0|                                        }
 2842|      0|                                    }
 2843|      0|                                }
 2844|      0|                            }
 2845|      0|                            {
 2846|      0|                                fatal_exit();
 2847|      0|                            }
 2848|      0|                        }
 2849|      0|                        if ((int)input_buffer[0] == 10) {
 2850|      0|                            goto while_break;
 2851|      0|                        }
 2852|      0|                        else {
 2853|      0|                            if ((int)input_buffer[0] == 121) {
 2854|      0|                                goto while_break;
 2855|      0|                            }
 2856|      0|                            else {
 2857|      0|                                if ((int)input_buffer[0] == 89) {
 2858|      0|                                    goto while_break;
 2859|      0|                                }
 2860|      0|                            }
 2861|      0|                        }
 2862|      0|                        {
 2863|      0|                            if ((int)input_buffer[0] == 63) {
 2864|      0|                                goto case_63;
 2865|      0|                            }
 2866|      0|                            if ((int)input_buffer[0] == 113) {
 2867|      0|                                goto case_113;
 2868|      0|                            }
 2869|      0|                            if ((int)input_buffer[0] == 110) {
 2870|      0|                                goto case_110;
 2871|      0|                            }
 2872|      0|                            if ((int)input_buffer[0] == 33) {
 2873|      0|                                goto case_33;
 2874|      0|                            }
 2875|      0|                            goto switch_break;
 2876|      0|case_63 : { /* CIL Label */
 2877|      0|                                tmp___11 = gettext(
 2878|      0|                                               " n [name]   Give a new file name for the next (and "
 2879|      0|                                               "subsequent) volume(s)\n q          Abort tar\n !          "
 2880|      0|                                               "Spawn a subshell\n ?          Print this list\n");
 2881|      0|                                fprintf((FILE * /* __restrict  */) stderr,
 2882|      0|                                        (char const * /* __restrict  */)tmp___11);
 2883|      0|                            }
 2884|      0|                            goto switch_break;
 2885|      0|case_113 : { /* CIL Label */
 2886|      0|                                tmp___12 = gettext("No new volume; exiting.\n");
 2887|      0|                                error(0, 0, (char const *)tmp___12);
 2888|      0|                            }
 2889|      0|                            if ((unsigned int)subcommand_option != 6U) {
 2890|      0|                                if ((unsigned int)subcommand_option != 7U) {
 2891|      0|                                    if ((unsigned int)subcommand_option != 5U) {
 2892|      0|                                        {
 2893|      0|                                            tmp___13 = gettext("WARNING: Archive is incomplete");
 2894|      0|                                            error(0, 0, (char const *)tmp___13);
 2895|      0|                                        }
 2896|      0|                                    }
 2897|      0|                                }
 2898|      0|                            }
 2899|      0|                            {
 2900|      0|                                fatal_exit();
 2901|      0|                            }
 2902|      0|case_110: /* CIL Label */
 2903|      0|                            name = &input_buffer[1];
 2904|      0|                            name = input_buffer + 1;
 2905|      0|                            {
 2906|      0|                                while (1) {
 2907|      0|while_continue___0: /* CIL Label */
 2908|      0|                                    ;
 2909|      0|                                    if (!((int)*name == 32)) {
 2910|      0|                                        if (!((int)*name == 9)) {
 2911|      0|                                            goto while_break___0;
 2912|      0|                                        }
 2913|      0|                                    }
 2914|      0|                                    name++;
 2915|      0|                                }
 2916|      0|while_break___0: /* CIL Label */
 2917|      0|                                ;
 2918|      0|                            }
 2919|      0|                            cursor = name;
 2920|      0|                            {
 2921|      0|                                while (1) {
 2922|      0|while_continue___1: /* CIL Label */
 2923|      0|                                    ;
 2924|      0|                                    if (*cursor) {
 2925|      0|                                        if (!((int)*cursor != 10)) {
 2926|      0|                                            goto while_break___1;
 2927|      0|                                        }
 2928|      0|                                    }
 2929|      0|                                    else {
 2930|      0|                                        goto while_break___1;
 2931|      0|                                    }
 2932|      0|                                    cursor++;
 2933|      0|                                }
 2934|      0|while_break___1: /* CIL Label */
 2935|      0|                                ;
 2936|      0|                            }
 2937|      0|                            {
 2938|      0|                                *cursor = (char)'\000';
 2939|      0|                                tmp___14 = xstrdup((char const *)name);
 2940|      0|                                *archive_name_cursor = (char const *)tmp___14;
 2941|      0|                            }
 2942|      0|                            goto switch_break;
 2943|      0|case_33 : { /* CIL Label */
 2944|      0|                                sys_spawn_shell();
 2945|      0|                            }
 2946|      0|                            goto switch_break;
 2947|      0|switch_break: /* CIL Label */
 2948|      0|                            ;
 2949|      0|                        }
 2950|      0|                    }
 2951|      0|while_break: /* CIL Label */
 2952|      0|                    ;
 2953|      0|                }
 2954|      0|            }
 2955|      0|        }
 2956|      0|        {
 2957|      0|            tmp___31 = strcmp(*(archive_name_cursor + 0), "-");
 2958|      0|        }
 2959|      0|        if (tmp___31 == 0) {
 2960|      0|            read_full_records_option = (_Bool)1;
 2961|      0|            archive = 0;
 2962|      0|        }
 2963|      0|        else {
 2964|      0|            if (verify_option) {
 2965|      0|                if (!force_local_option) {
 2966|      0|                    {
 2967|      0|                        rmt_path__ = strchr(*archive_name_cursor, ':');
 2968|      0|                    }
 2969|      0|                    if (rmt_path__) {
 2970|      0|                        if ((unsigned long)rmt_path__ >
 2971|      0|                                (unsigned long)*archive_name_cursor) {
 2972|      0|                            {
 2973|      0|                                tmp___18 =
 2974|      0|                                    memchr((void const *)*archive_name_cursor, '/',
 2975|      0|                                           (size_t)(rmt_path__ - (char *)*archive_name_cursor));
 2976|      0|                            }
 2977|      0|                            if (tmp___18) {
 2978|      0|                                {
 2979|      0|                                    tmp___17 = open(*archive_name_cursor, 66,
 2980|      0|                                                    ((128 | (128 >> 3)) | ((128 >> 3) >> 3)) |
 2981|      0|                                                    ((256 | (256 >> 3)) | ((256 >> 3) >> 3)));
 2982|      0|                                    archive = tmp___17;
 2983|      0|                                }
 2984|      0|                            }
 2985|      0|                            else {
 2986|      0|                                {
 2987|      0|                                    tmp___16 = rmt_open__(*archive_name_cursor, 66, 1 << 30,
 2988|      0|                                                          rsh_command_option);
 2989|      0|                                    archive = tmp___16;
 2990|      0|                                }
 2991|      0|                            }
 2992|      0|                        }
 2993|      0|                        else {
 2994|      0|                            {
 2995|      0|                                tmp___17 = open(*archive_name_cursor, 66,
 2996|      0|                                                ((128 | (128 >> 3)) | ((128 >> 3) >> 3)) |
 2997|      0|                                                ((256 | (256 >> 3)) | ((256 >> 3) >> 3)));
 2998|      0|                                archive = tmp___17;
 2999|      0|                            }
 3000|      0|                        }
 3001|      0|                    }
 3002|      0|                    else {
 3003|      0|                        {
 3004|      0|                            tmp___17 = open(*archive_name_cursor, 66,
 3005|      0|                                            ((128 | (128 >> 3)) | ((128 >> 3) >> 3)) |
 3006|      0|                                            ((256 | (256 >> 3)) | ((256 >> 3) >> 3)));
 3007|      0|                            archive = tmp___17;
 3008|      0|                        }
 3009|      0|                    }
 3010|      0|                }
 3011|      0|                else {
 3012|      0|                    {
 3013|      0|                        tmp___17 = open(*archive_name_cursor, 66,
 3014|      0|                                        ((128 | (128 >> 3)) | ((128 >> 3) >> 3)) |
 3015|      0|                                        ((256 | (256 >> 3)) | ((256 >> 3) >> 3)));
 3016|      0|                        archive = tmp___17;
 3017|      0|                    }
 3018|      0|                }
 3019|      0|            }
 3020|      0|            else {
 3021|      0|                {
 3022|      0|                    if ((unsigned int)mode == 0U) {
 3023|      0|                        goto case_0;
 3024|      0|                    }
 3025|      0|                    if ((unsigned int)mode == 1U) {
 3026|      0|                        goto case_1;
 3027|      0|                    }
 3028|      0|                    if ((unsigned int)mode == 2U) {
 3029|      0|                        goto case_2;
 3030|      0|                    }
 3031|      0|                    goto switch_break___0;
 3032|      0|case_0: /* CIL Label */
 3033|      0|                    if (!force_local_option) {
 3034|      0|                        {
 3035|      0|                            rmt_path__ = strchr(*archive_name_cursor, ':');
 3036|      0|                        }
 3037|      0|                        if (rmt_path__) {
 3038|      0|                            if ((unsigned long)rmt_path__ >
 3039|      0|                                    (unsigned long)*archive_name_cursor) {
 3040|      0|                                {
 3041|      0|                                    tmp___22 = memchr(
 3042|      0|                                                   (void const *)*archive_name_cursor, '/',
 3043|      0|                                                   (size_t)(rmt_path__ - (char *)*archive_name_cursor));
 3044|      0|                                }
 3045|      0|                                if (tmp___22) {
 3046|      0|                                    {
 3047|      0|                                        tmp___21 =
 3048|      0|                                            open(*archive_name_cursor, 0,
 3049|      0|                                                 ((128 | (128 >> 3)) | ((128 >> 3) >> 3)) |
 3050|      0|                                                 ((256 | (256 >> 3)) | ((256 >> 3) >> 3)));
 3051|      0|                                        archive = tmp___21;
 3052|      0|                                    }
 3053|      0|                                }
 3054|      0|                                else {
 3055|      0|                                    {
 3056|      0|                                        tmp___20 = rmt_open__(*archive_name_cursor, 0, 1 << 30,
 3057|      0|                                                              rsh_command_option);
 3058|      0|                                        archive = tmp___20;
 3059|      0|                                    }
 3060|      0|                                }
 3061|      0|                            }
 3062|      0|                            else {
 3063|      0|                                {
 3064|      0|                                    tmp___21 = open(*archive_name_cursor, 0,
 3065|      0|                                                    ((128 | (128 >> 3)) | ((128 >> 3) >> 3)) |
 3066|      0|                                                    ((256 | (256 >> 3)) | ((256 >> 3) >> 3)));
 3067|      0|                                    archive = tmp___21;
 3068|      0|                                }
 3069|      0|                            }
 3070|      0|                        }
 3071|      0|                        else {
 3072|      0|                            {
 3073|      0|                                tmp___21 = open(*archive_name_cursor, 0,
 3074|      0|                                                ((128 | (128 >> 3)) | ((128 >> 3) >> 3)) |
 3075|      0|                                                ((256 | (256 >> 3)) | ((256 >> 3) >> 3)));
 3076|      0|                                archive = tmp___21;
 3077|      0|                            }
 3078|      0|                        }
 3079|      0|                    }
 3080|      0|                    else {
 3081|      0|                        {
 3082|      0|                            tmp___21 = open(*archive_name_cursor, 0,
 3083|      0|                                            ((128 | (128 >> 3)) | ((128 >> 3) >> 3)) |
 3084|      0|                                            ((256 | (256 >> 3)) | ((256 >> 3) >> 3)));
 3085|      0|                            archive = tmp___21;
 3086|      0|                        }
 3087|      0|                    }
 3088|      0|                    goto switch_break___0;
 3089|      0|case_1: /* CIL Label */
 3090|      0|                    if (backup_option) {
 3091|      0|                        {
 3092|      0|                            maybe_backup_file(*archive_name_cursor, 1);
 3093|      0|                        }
 3094|      0|                    }
 3095|      0|                    if (!force_local_option) {
 3096|      0|                        {
 3097|      0|                            rmt_path__ = strchr(*archive_name_cursor, ':');
 3098|      0|                        }
 3099|      0|                        if (rmt_path__) {
 3100|      0|                            if ((unsigned long)rmt_path__ >
 3101|      0|                                    (unsigned long)*archive_name_cursor) {
 3102|      0|                                {
 3103|      0|                                    tmp___26 = memchr(
 3104|      0|                                                   (void const *)*archive_name_cursor, '/',
 3105|      0|                                                   (size_t)(rmt_path__ - (char *)*archive_name_cursor));
 3106|      0|                                }
 3107|      0|                                if (tmp___26) {
 3108|      0|                                    {
 3109|      0|                                        tmp___25 = creat(
 3110|      0|                                                       *archive_name_cursor,
 3111|      0|                                                       (mode_t)(((128 | (128 >> 3)) | ((128 >> 3) >> 3)) |
 3112|      0|                                                                ((256 | (256 >> 3)) | ((256 >> 3) >> 3))));
 3113|      0|                                        archive = tmp___25;
 3114|      0|                                    }
 3115|      0|                                }
 3116|      0|                                else {
 3117|      0|                                    {
 3118|      0|                                        tmp___24 = rmt_open__(*archive_name_cursor, 65, 1 << 30,
 3119|      0|                                                              rsh_command_option);
 3120|      0|                                        archive = tmp___24;
 3121|      0|                                    }
 3122|      0|                                }
 3123|      0|                            }
 3124|      0|                            else {
 3125|      0|                                {
 3126|      0|                                    tmp___25 =
 3127|      0|                                        creat(*archive_name_cursor,
 3128|      0|                                              (mode_t)(((128 | (128 >> 3)) | ((128 >> 3) >> 3)) |
 3129|      0|                                                       ((256 | (256 >> 3)) | ((256 >> 3) >> 3))));
 3130|      0|                                    archive = tmp___25;
 3131|      0|                                }
 3132|      0|                            }
 3133|      0|                        }
 3134|      0|                        else {
 3135|      0|                            {
 3136|      0|                                tmp___25 =
 3137|      0|                                    creat(*archive_name_cursor,
 3138|      0|                                          (mode_t)(((128 | (128 >> 3)) | ((128 >> 3) >> 3)) |
 3139|      0|                                                   ((256 | (256 >> 3)) | ((256 >> 3) >> 3))));
 3140|      0|                                archive = tmp___25;
 3141|      0|                            }
 3142|      0|                        }
 3143|      0|                    }
 3144|      0|                    else {
 3145|      0|                        {
 3146|      0|                            tmp___25 =
 3147|      0|                                creat(*archive_name_cursor,
 3148|      0|                                      (mode_t)(((128 | (128 >> 3)) | ((128 >> 3) >> 3)) |
 3149|      0|                                               ((256 | (256 >> 3)) | ((256 >> 3) >> 3))));
 3150|      0|                            archive = tmp___25;
 3151|      0|                        }
 3152|      0|                    }
 3153|      0|                    goto switch_break___0;
 3154|      0|case_2: /* CIL Label */
 3155|      0|                    if (!force_local_option) {
 3156|      0|                        {
 3157|      0|                            rmt_path__ = strchr(*archive_name_cursor, ':');
 3158|      0|                        }
 3159|      0|                        if (rmt_path__) {
 3160|      0|                            if ((unsigned long)rmt_path__ >
 3161|      0|                                    (unsigned long)*archive_name_cursor) {
 3162|      0|                                {
 3163|      0|                                    tmp___30 = memchr(
 3164|      0|                                                   (void const *)*archive_name_cursor, '/',
 3165|      0|                                                   (size_t)(rmt_path__ - (char *)*archive_name_cursor));
 3166|      0|                                }
 3167|      0|                                if (tmp___30) {
 3168|      0|                                    {
 3169|      0|                                        tmp___29 =
 3170|      0|                                            open(*archive_name_cursor, 66,
 3171|      0|                                                 ((128 | (128 >> 3)) | ((128 >> 3) >> 3)) |
 3172|      0|                                                 ((256 | (256 >> 3)) | ((256 >> 3) >> 3)));
 3173|      0|                                        archive = tmp___29;
 3174|      0|                                    }
 3175|      0|                                }
 3176|      0|                                else {
 3177|      0|                                    {
 3178|      0|                                        tmp___28 = rmt_open__(*archive_name_cursor, 66, 1 << 30,
 3179|      0|                                                              rsh_command_option);
 3180|      0|                                        archive = tmp___28;
 3181|      0|                                    }
 3182|      0|                                }
 3183|      0|                            }
 3184|      0|                            else {
 3185|      0|                                {
 3186|      0|                                    tmp___29 = open(*archive_name_cursor, 66,
 3187|      0|                                                    ((128 | (128 >> 3)) | ((128 >> 3) >> 3)) |
 3188|      0|                                                    ((256 | (256 >> 3)) | ((256 >> 3) >> 3)));
 3189|      0|                                    archive = tmp___29;
 3190|      0|                                }
 3191|      0|                            }
 3192|      0|                        }
 3193|      0|                        else {
 3194|      0|                            {
 3195|      0|                                tmp___29 = open(*archive_name_cursor, 66,
 3196|      0|                                                ((128 | (128 >> 3)) | ((128 >> 3) >> 3)) |
 3197|      0|                                                ((256 | (256 >> 3)) | ((256 >> 3) >> 3)));
 3198|      0|                                archive = tmp___29;
 3199|      0|                            }
 3200|      0|                        }
 3201|      0|                    }
 3202|      0|                    else {
 3203|      0|                        {
 3204|      0|                            tmp___29 = open(*archive_name_cursor, 66,
 3205|      0|                                            ((128 | (128 >> 3)) | ((128 >> 3) >> 3)) |
 3206|      0|                                            ((256 | (256 >> 3)) | ((256 >> 3) >> 3)));
 3207|      0|                            archive = tmp___29;
 3208|      0|                        }
 3209|      0|                    }
 3210|      0|                    goto switch_break___0;
 3211|      0|switch_break___0: /* CIL Label */
 3212|      0|                    ;
 3213|      0|                }
 3214|      0|            }
 3215|      0|        }
 3216|      0|        if (archive < 0) {
 3217|      0|            {
 3218|      0|                open_warn(*archive_name_cursor);
 3219|      0|            }
 3220|      0|            if (!verify_option) {
 3221|      0|                if ((unsigned int)mode == 1U) {
 3222|      0|                    if (backup_option) {
 3223|      0|                        {
 3224|      0|                            undo_last_backup();
 3225|      0|                        }
 3226|      0|                    }
 3227|      0|                }
 3228|      0|            }
 3229|      0|            goto tryagain;
 3230|      0|        }
 3231|      0|        return ((_Bool)1);
 3232|      0|    }
 3233|      0|}
 3234|       |/* #pragma merger("0","001.compare.o.i","") */
 3235|       |extern __attribute__((__nothrow__)) int(
 3236|       |    __attribute__((__nonnull__(1, 2), __leaf__))
 3237|       |    memcmp)(void const *__s1, void const *__s2, size_t __n)
 3238|       |__attribute__((__pure__));
 3239|       |extern __attribute__((__nothrow__)) int(
 3240|       |    __attribute__((__nonnull__(1, 2), __leaf__))
 3241|       |    strncmp)(char const *__s1, char const *__s2, size_t __n)
 3242|       |__attribute__((__pure__));
 3243|       |extern __attribute__((__nothrow__))
 3244|       |ssize_t(__attribute__((__nonnull__(1, 2), __leaf__))
 3245|       |        readlink)(char const *__restrict __path, char *__restrict __buf,
 3246|       |                  size_t __len);
 3247|       |extern int fsync(int __fd);
 3248|       |extern int vfprintf(FILE *__restrict __s, char const *__restrict __format,
 3249|       |                    __gnuc_va_list __arg);
 3250|       |extern
 3251|       |__attribute__((__nothrow__)) int(__attribute__((__nonnull__(1), __leaf__))
 3252|       |                                 utime)(char const *__file,
 3253|       |                                        struct utimbuf const *__file_times);
 3254|       |__attribute__((__noreturn__)) void xalloc_die(void);
 3255|       |int exit_status;
 3256|       |_Bool atime_preserve_option;
 3257|       |_Bool dereference_option;
 3258|       |void diff_archive(void);
 3259|       |void diff_init(void);
 3260|       |char *get_directory_contents(char *path, dev_t device);
 3261|       |union block *current_header;
 3262|       |enum archive_format current_format;
 3263|       |void decode_header(union block *header, struct tar_stat_info *stat_info,
 3264|       |                   enum archive_format *format_pointer, int do_user_group);
 3265|       |void print_header(struct tar_stat_info *st, off_t block_ordinal);
 3266|       |enum read_header read_header(_Bool raw_extended_headers);
 3267|       |void skip_member(void);
 3268|       |int deref_stat(_Bool deref, char const *name, struct stat *buf);
 3269|       |void readlink_error(char const *name);
 3270|       |void readlink_warn(char const *name);
 3271|       |void seek_error_details(char const *name, off_t offset);
 3272|       |void seek_warn(char const *name);
 3273|       |void stat_error(char const *name);
 3274|       |void stat_warn(char const *name);
 3275|       |_Bool sys_compare_uid(struct stat *a, struct stat *b);
 3276|       |_Bool sys_compare_gid(struct stat *a, struct stat *b);
 3277|       |_Bool sys_compare_links(struct stat *link_data, struct stat *stat_data);
 3278|       |void report_difference(struct tar_stat_info *st __attribute__((__unused__)),
 3279|       |                       char const *fmt, ...);
 3280|       |_Bool sparse_diff_file(int fd, struct tar_stat_info *st);
 3281|       |static int diff_handle;
 3282|       |static char *diff_buffer;
 3283|       |void diff_init(void)
 3284|      0|{
 3285|      0|    void *tmp;
 3286|       |
 3287|      0|    {
 3288|      0|        {
 3289|      0|            tmp = valloc(record_size);
 3290|      0|            diff_buffer = (char *)tmp;
 3291|      0|        }
 3292|      0|        if (!diff_buffer) {
 3293|      0|            {
 3294|      0|                xalloc_die();
 3295|      0|            }
 3296|      0|        }
 3297|      0|        return;
 3298|      0|    }
 3299|      0|}
 3300|       |void report_difference(struct tar_stat_info *st __attribute__((__unused__)),
 3301|       |                       char const *fmt, ...)
 3302|      0|{
 3303|      0|    va_list ap;
 3304|      0|    char *tmp;
 3305|       |
 3306|      0|    {
 3307|      0|        if (fmt) {
 3308|      0|            {
 3309|      0|                tmp = quotearg_colon((char const *)current_stat_info.file_name);
 3310|      0|                fprintf((FILE * /* __restrict  */) stdlis,
 3311|      0|                        (char const * /* __restrict  */) "%s: ", tmp);
 3312|      0|                __builtin_va_start(ap, fmt);
 3313|      0|                vfprintf((FILE * /* __restrict  */) stdlis,
 3314|      0|                         (char const * /* __restrict  */)fmt, ap);
 3315|      0|                __builtin_va_end(ap);
 3316|      0|                fprintf((FILE * /* __restrict  */) stdlis,
 3317|      0|                        (char const * /* __restrict  */) "\n");
 3318|      0|            }
 3319|      0|        }
 3320|      0|        if (exit_status == 0) {
 3321|      0|            exit_status = 1;
 3322|      0|        }
 3323|      0|        return;
 3324|      0|    }
 3325|      0|}
 3326|       |static int process_noop(size_t size __attribute__((__unused__)),
 3327|       |                        char *data __attribute__((__unused__)))
 3328|      0|{
 3329|       |
 3330|      0|    {
 3331|      0|        return (1);
 3332|      0|    }
 3333|      0|}
 3334|       |static int process_rawdata(size_t bytes, char *buffer___2)
 3335|      0|{
 3336|      0|    size_t status;
 3337|      0|    size_t tmp;
 3338|      0|    char *tmp___0;
 3339|      0|    char *tmp___1;
 3340|      0|    int tmp___2;
 3341|      0|    char *__cil_tmp8;
 3342|       |
 3343|      0|    {
 3344|      0|        {
 3345|      0|            tmp = safe_read(diff_handle, (void *)diff_buffer, bytes);
 3346|      0|            status = tmp;
 3347|      0|        }
 3348|      0|        if (status != bytes) {
 3349|      0|            if (status == 0xffffffffffffffffUL) {
 3350|      0|                {
 3351|      0|                    read_error((char const *)current_stat_info.file_name);
 3352|      0|                    report_difference(&current_stat_info, (char const *)((void *)0));
 3353|      0|                }
 3354|      0|            }
 3355|      0|            else {
 3356|      0|                {
 3357|      0|                    tmp___0 = ngettext("Could only read %lu of %lu byte",
 3358|      0|                                       "Could only read %lu of %lu bytes", bytes);
 3359|      0|                    report_difference(&current_stat_info, (char const *)tmp___0, status,
 3360|      0|                                      bytes);
 3361|      0|                }
 3362|      0|            }
 3363|      0|            return (0);
 3364|      0|        }
 3365|      0|        {
 3366|      0|            tmp___2 =
 3367|      0|                memcmp((void const *)buffer___2, (void const *)diff_buffer, bytes);
 3368|      0|        }
 3369|      0|        if (tmp___2) {
 3370|      0|            {
 3371|      0|                tmp___1 = gettext("Contents differ");
 3372|      0|                report_difference(&current_stat_info, (char const *)tmp___1);
 3373|      0|            }
 3374|      0|            return (0);
 3375|      0|        }
 3376|      0|        return (1);
 3377|      0|    }
 3378|      0|}
 3379|       |static char *dumpdir_cursor;
 3380|       |static int process_dumpdir(size_t bytes, char *buffer___2)
 3381|      0|{
 3382|      0|    char *tmp;
 3383|      0|    int tmp___0;
 3384|      0|    char *__cil_tmp5;
 3385|       |
 3386|      0|    {
 3387|      0|        {
 3388|      0|            tmp___0 =
 3389|      0|                memcmp((void const *)buffer___2, (void const *)dumpdir_cursor, bytes);
 3390|      0|        }
 3391|      0|        if (tmp___0) {
 3392|      0|            {
 3393|      0|                tmp = gettext("Contents differ");
 3394|      0|                report_difference(&current_stat_info, (char const *)tmp);
 3395|      0|            }
 3396|      0|            return (0);
 3397|      0|        }
 3398|      0|        dumpdir_cursor += bytes;
 3399|      0|        return (1);
 3400|      0|    }
 3401|      0|}
 3402|       |static void read_and_process(off_t size, int (*processor)(size_t, char *))
 3403|      0|{
 3404|      0|    union block *data_block;
 3405|      0|    size_t data_size;
 3406|      0|    char *tmp;
 3407|      0|    int tmp___0;
 3408|      0|    char *__cil_tmp7;
 3409|       |
 3410|      0|    {
 3411|      0|        if (multi_volume_option) {
 3412|      0|            save_sizeleft = size;
 3413|      0|        }
 3414|      0|        {
 3415|      0|            while (1) {
 3416|      0|while_continue: /* CIL Label */
 3417|      0|                ;
 3418|      0|                if (!size) {
 3419|      0|                    goto while_break;
 3420|      0|                }
 3421|      0|                {
 3422|      0|                    data_block = find_next_block();
 3423|      0|                }
 3424|      0|                if (!data_block) {
 3425|      0|                    {
 3426|      0|                        tmp = gettext("Unexpected EOF in archive");
 3427|      0|                        error(0, 0, (char const *)tmp);
 3428|      0|                        exit_status = 2;
 3429|      0|                    }
 3430|      0|                    return;
 3431|      0|                }
 3432|      0|                {
 3433|      0|                    data_size = available_space_after(data_block);
 3434|      0|                }
 3435|      0|                if (data_size > (size_t)size) {
 3436|      0|                    data_size = (size_t)size;
 3437|      0|                }
 3438|      0|                {
 3439|      0|                    tmp___0 = (*processor)(data_size, data_block->buffer);
 3440|      0|                }
 3441|      0|                if (!tmp___0) {
 3442|      0|                    processor = &process_noop;
 3443|      0|                }
 3444|      0|                {
 3445|      0|                    set_next_block_after(
 3446|      0|                        (union block *)((data_block->buffer + data_size) - 1));
 3447|      0|                    size = (off_t)((size_t)size - data_size);
 3448|      0|                }
 3449|      0|                if (multi_volume_option) {
 3450|      0|                    save_sizeleft = (off_t)((size_t)save_sizeleft - data_size);
 3451|      0|                }
 3452|      0|            }
 3453|      0|while_break: /* CIL Label */
 3454|      0|            ;
 3455|      0|        }
 3456|      0|        return;
 3457|      0|    }
 3458|      0|}
 3459|       |static int get_stat_data(char const *file_name, struct stat *stat_data)
 3460|      0|{
 3461|      0|    int status;
 3462|      0|    int tmp;
 3463|      0|    int *tmp___0;
 3464|       |
 3465|      0|    {
 3466|      0|        {
 3467|      0|            tmp = deref_stat(dereference_option, file_name, stat_data);
 3468|      0|            status = tmp;
 3469|      0|        }
 3470|      0|        if (status != 0) {
 3471|      0|            {
 3472|      0|                tmp___0 = __errno_location();
 3473|      0|            }
 3474|      0|            if (*tmp___0 == 2) {
 3475|      0|                {
 3476|      0|                    stat_warn(file_name);
 3477|      0|                }
 3478|      0|            }
 3479|      0|            else {
 3480|      0|                {
 3481|      0|                    stat_error(file_name);
 3482|      0|                }
 3483|      0|            }
 3484|      0|            {
 3485|      0|                report_difference(&current_stat_info, (char const *)((void *)0));
 3486|      0|            }
 3487|      0|            return (0);
 3488|      0|        }
 3489|      0|        return (1);
 3490|      0|    }
 3491|      0|}
 3492|       |void diff_archive(void)
 3493|      0|{
 3494|      0|    struct stat stat_data;
 3495|      0|    int status;
 3496|      0|    struct utimbuf restore_times;
 3497|      0|    char *tmp;
 3498|      0|    char *tmp___0;
 3499|      0|    char *tmp___1;
 3500|      0|    int tmp___2;
 3501|      0|    char *tmp___3;
 3502|      0|    char *tmp___4;
 3503|      0|    char *tmp___5;
 3504|      0|    _Bool tmp___6;
 3505|      0|    char *tmp___7;
 3506|      0|    _Bool tmp___8;
 3507|      0|    char *tmp___9;
 3508|      0|    char *tmp___10;
 3509|      0|    struct stat file_data;
 3510|      0|    struct stat link_data;
 3511|      0|    int tmp___11;
 3512|      0|    int tmp___12;
 3513|      0|    char const *tmp___13;
 3514|      0|    char *tmp___14;
 3515|      0|    _Bool tmp___15;
 3516|      0|    size_t len;
 3517|      0|    size_t tmp___16;
 3518|      0|    char *linkbuf;
 3519|      0|    void *tmp___17;
 3520|      0|    ssize_t tmp___18;
 3521|      0|    int *tmp___19;
 3522|      0|    char *tmp___20;
 3523|      0|    int tmp___21;
 3524|      0|    int tmp___22;
 3525|      0|    char *tmp___23;
 3526|      0|    char *tmp___24;
 3527|      0|    char *tmp___25;
 3528|      0|    char *dumpdir_buffer;
 3529|      0|    char *tmp___26;
 3530|      0|    int tmp___27;
 3531|      0|    char *tmp___28;
 3532|      0|    char *tmp___29;
 3533|      0|    off_t offset;
 3534|      0|    int tmp___30;
 3535|      0|    char *tmp___31;
 3536|      0|    char *tmp___32;
 3537|      0|    __off_t tmp___33;
 3538|      0|    int tmp___34;
 3539|      0|    int tmp___35;
 3540|      0|    void *__cil_tmp47;
 3541|      0|    void *__cil_tmp48;
 3542|      0|    void *__cil_tmp49;
 3543|      0|    char *__cil_tmp50;
 3544|      0|    char *__cil_tmp51;
 3545|      0|    char *__cil_tmp52;
 3546|      0|    char *__cil_tmp53;
 3547|      0|    char *__cil_tmp54;
 3548|      0|    char *__cil_tmp55;
 3549|      0|    char *__cil_tmp56;
 3550|      0|    char *__cil_tmp57;
 3551|      0|    char *__cil_tmp58;
 3552|      0|    char *__cil_tmp59;
 3553|      0|    char *__cil_tmp60;
 3554|      0|    char *__cil_tmp61;
 3555|      0|    char *__cil_tmp62;
 3556|      0|    char *__cil_tmp63;
 3557|      0|    char *__cil_tmp64;
 3558|      0|    char *__cil_tmp65;
 3559|      0|    char *__cil_tmp66;
 3560|      0|    char *__cil_tmp67;
 3561|       |
 3562|      0|    {
 3563|      0|        {
 3564|      0|            set_next_block_after(current_header);
 3565|      0|            decode_header(current_header, &current_stat_info, &current_format, 1);
 3566|      0|        }
 3567|      0|        if (verbose_option) {
 3568|      0|            if (now_verifying) {
 3569|      0|                {
 3570|      0|                    tmp = gettext("Verify ");
 3571|      0|                    fprintf((FILE * /* __restrict  */) stdlis,
 3572|      0|                            (char const * /* __restrict  */)tmp);
 3573|      0|                }
 3574|      0|            }
 3575|      0|            {
 3576|      0|                print_header(&current_stat_info, (off_t)-1);
 3577|      0|            }
 3578|      0|        }
 3579|      0|        {
 3580|      0|            if ((int)current_header->header.typeflag == 0) {
 3581|      0|                goto case_0;
 3582|      0|            }
 3583|      0|            if ((int)current_header->header.typeflag == 48) {
 3584|      0|                goto case_0;
 3585|      0|            }
 3586|      0|            if ((int)current_header->header.typeflag == 83) {
 3587|      0|                goto case_0;
 3588|      0|            }
 3589|      0|            if ((int)current_header->header.typeflag == 55) {
 3590|      0|                goto case_0;
 3591|      0|            }
 3592|      0|            if ((int)current_header->header.typeflag == 49) {
 3593|      0|                goto case_49;
 3594|      0|            }
 3595|      0|            if ((int)current_header->header.typeflag == 50) {
 3596|      0|                goto case_50;
 3597|      0|            }
 3598|      0|            if ((int)current_header->header.typeflag == 51) {
 3599|      0|                goto case_51;
 3600|      0|            }
 3601|      0|            if ((int)current_header->header.typeflag == 52) {
 3602|      0|                goto case_51;
 3603|      0|            }
 3604|      0|            if ((int)current_header->header.typeflag == 54) {
 3605|      0|                goto case_51;
 3606|      0|            }
 3607|      0|            if ((int)current_header->header.typeflag == 68) {
 3608|      0|                goto case_68;
 3609|      0|            }
 3610|      0|            if ((int)current_header->header.typeflag == 53) {
 3611|      0|                goto really_dir;
 3612|      0|            }
 3613|      0|            if ((int)current_header->header.typeflag == 86) {
 3614|      0|                goto case_86;
 3615|      0|            }
 3616|      0|            if ((int)current_header->header.typeflag == 77) {
 3617|      0|                goto case_77;
 3618|      0|            }
 3619|      0|            goto switch_default;
 3620|      0|switch_default : { /* CIL Label */
 3621|      0|                tmp___0 = quotearg_colon((char const *)current_stat_info.file_name);
 3622|      0|                tmp___1 = gettext("%s: Unknown file type \'%c\', diffed as normal file");
 3623|      0|                error(0, 0, (char const *)tmp___1, tmp___0,
 3624|      0|                      (int)current_header->header.typeflag);
 3625|      0|                exit_status = 2;
 3626|      0|            }
 3627|      0|case_0:  /* CIL Label */
 3628|      0|case_48: /* CIL Label */
 3629|      0|case_83: /* CIL Label */
 3630|      0|case_55: /* CIL Label */
 3631|      0|            if (current_stat_info.had_trailing_slash) {
 3632|      0|                goto really_dir;
 3633|      0|            }
 3634|      0|            {
 3635|      0|                tmp___2 = get_stat_data((char const *)current_stat_info.file_name,
 3636|      0|                                        &stat_data);
 3637|      0|            }
 3638|      0|            if (!tmp___2) {
 3639|      0|                {
 3640|      0|                    skip_member();
 3641|      0|                }
 3642|      0|                goto quit;
 3643|      0|            }
 3644|      0|            if (!((stat_data.st_mode & 61440U) == 32768U)) {
 3645|      0|                {
 3646|      0|                    tmp___3 = gettext("File type differs");
 3647|      0|                    report_difference(&current_stat_info, (char const *)tmp___3);
 3648|      0|                    skip_member();
 3649|      0|                }
 3650|      0|                goto quit;
 3651|      0|            }
 3652|      0|            if ((current_stat_info.stat.st_mode &
 3653|      0|                    (unsigned int)(3584 |
 3654|      0|                                   (((64 | (64 >> 3)) | ((64 >> 3) >> 3)) |
 3655|      0|                                    (((128 | (128 >> 3)) | ((128 >> 3) >> 3)) |
 3656|      0|                                     ((256 | (256 >> 3)) | ((256 >> 3) >> 3)))))) !=
 3657|      0|                    (stat_data.st_mode &
 3658|      0|                     (unsigned int)(3584 |
 3659|      0|                                    (((64 | (64 >> 3)) | ((64 >> 3) >> 3)) |
 3660|      0|                                     (((128 | (128 >> 3)) | ((128 >> 3) >> 3)) |
 3661|      0|                                      ((256 | (256 >> 3)) | ((256 >> 3) >> 3))))))) {
 3662|      0|                {
 3663|      0|                    tmp___4 = gettext("Mode differs");
 3664|      0|                    report_difference(&current_stat_info, (char const *)tmp___4);
 3665|      0|                }
 3666|      0|            }
 3667|      0|            {
 3668|      0|                tmp___6 = sys_compare_uid(&stat_data, &current_stat_info.stat);
 3669|      0|            }
 3670|      0|            if (!tmp___6) {
 3671|      0|                {
 3672|      0|                    tmp___5 = gettext("Uid differs");
 3673|      0|                    report_difference(&current_stat_info, (char const *)tmp___5);
 3674|      0|                }
 3675|      0|            }
 3676|      0|            {
 3677|      0|                tmp___8 = sys_compare_gid(&stat_data, &current_stat_info.stat);
 3678|      0|            }
 3679|      0|            if (!tmp___8) {
 3680|      0|                {
 3681|      0|                    tmp___7 = gettext("Gid differs");
 3682|      0|                    report_difference(&current_stat_info, (char const *)tmp___7);
 3683|      0|                }
 3684|      0|            }
 3685|      0|            if (stat_data.st_mtim.tv_sec != current_stat_info.stat.st_mtim.tv_sec) {
 3686|      0|                {
 3687|      0|                    tmp___9 = gettext("Mod time differs");
 3688|      0|                    report_difference(&current_stat_info, (char const *)tmp___9);
 3689|      0|                }
 3690|      0|            }
 3691|      0|            if ((int)current_header->header.typeflag != 83) {
 3692|      0|                if (stat_data.st_size != current_stat_info.stat.st_size) {
 3693|      0|                    {
 3694|      0|                        tmp___10 = gettext("Size differs");
 3695|      0|                        report_difference(&current_stat_info, (char const *)tmp___10);
 3696|      0|                        skip_member();
 3697|      0|                    }
 3698|      0|                    goto quit;
 3699|      0|                }
 3700|      0|            }
 3701|      0|            {
 3702|      0|                diff_handle = open((char const *)current_stat_info.file_name, 0);
 3703|      0|            }
 3704|      0|            if (diff_handle < 0) {
 3705|      0|                {
 3706|      0|                    open_error((char const *)current_stat_info.file_name);
 3707|      0|                    skip_member();
 3708|      0|                    report_difference(&current_stat_info, (char const *)((void *)0));
 3709|      0|                }
 3710|      0|                goto quit;
 3711|      0|            }
 3712|      0|            restore_times.actime = stat_data.st_atim.tv_sec;
 3713|      0|            restore_times.modtime = stat_data.st_mtim.tv_sec;
 3714|      0|            if (current_stat_info.is_sparse) {
 3715|      0|                {
 3716|      0|                    sparse_diff_file(diff_handle, &current_stat_info);
 3717|      0|                }
 3718|      0|            }
 3719|      0|            else {
 3720|      0|                if (multi_volume_option) {
 3721|      0|                    {
 3722|      0|                        assign_string(&save_name,
 3723|      0|                                      (char const *)current_stat_info.file_name);
 3724|      0|                        save_totsize = current_stat_info.stat.st_size;
 3725|      0|                    }
 3726|      0|                }
 3727|      0|                {
 3728|      0|                    read_and_process(current_stat_info.stat.st_size, &process_rawdata);
 3729|      0|                }
 3730|      0|                if (multi_volume_option) {
 3731|      0|                    {
 3732|      0|                        assign_string(&save_name, (char const *)0);
 3733|      0|                    }
 3734|      0|                }
 3735|      0|            }
 3736|      0|            {
 3737|      0|                status = close(diff_handle);
 3738|      0|            }
 3739|      0|            if (status != 0) {
 3740|      0|                {
 3741|      0|                    close_error((char const *)current_stat_info.file_name);
 3742|      0|                }
 3743|      0|            }
 3744|      0|            if (atime_preserve_option) {
 3745|      0|                {
 3746|      0|                    utime((char const *)current_stat_info.file_name,
 3747|      0|                          (struct utimbuf const *)(&restore_times));
 3748|      0|                }
 3749|      0|            }
 3750|      0|quit:
 3751|      0|            goto switch_break;
 3752|      0|case_49 : { /* CIL Label */
 3753|      0|                tmp___11 =
 3754|      0|                    get_stat_data((char const *)current_stat_info.file_name, &file_data);
 3755|      0|            }
 3756|      0|            if (!tmp___11) {
 3757|      0|                goto switch_break;
 3758|      0|            }
 3759|      0|            {
 3760|      0|                tmp___12 = get_stat_data((char const *)current_stat_info.link_name,
 3761|      0|                                         &link_data);
 3762|      0|            }
 3763|      0|            if (!tmp___12) {
 3764|      0|                goto switch_break;
 3765|      0|            }
 3766|      0|            {
 3767|      0|                tmp___15 = sys_compare_links(&file_data, &link_data);
 3768|      0|            }
 3769|      0|            if (!tmp___15) {
 3770|      0|                {
 3771|      0|                    tmp___13 = quote((char const *)current_stat_info.link_name);
 3772|      0|                    tmp___14 = gettext("Not linked to %s");
 3773|      0|                    report_difference(&current_stat_info, (char const *)tmp___14,
 3774|      0|                                      tmp___13);
 3775|      0|                }
 3776|      0|            }
 3777|      0|            goto switch_break;
 3778|      0|case_50 : { /* CIL Label */
 3779|      0|                tmp___16 = strlen((char const *)current_stat_info.link_name);
 3780|      0|                len = tmp___16;
 3781|      0|                tmp___17 = __builtin_alloca(len + 1UL);
 3782|      0|                linkbuf = (char *)tmp___17;
 3783|      0|                tmp___18 =
 3784|      0|                    readlink((char const * /* __restrict  */)current_stat_info.file_name,
 3785|      0|                             (char * /* __restrict  */)linkbuf, len + 1UL);
 3786|      0|                status = (int)tmp___18;
 3787|      0|            }
 3788|      0|            if (status < 0) {
 3789|      0|                {
 3790|      0|                    tmp___19 = __errno_location();
 3791|      0|                }
 3792|      0|                if (*tmp___19 == 2) {
 3793|      0|                    {
 3794|      0|                        readlink_warn((char const *)current_stat_info.file_name);
 3795|      0|                    }
 3796|      0|                }
 3797|      0|                else {
 3798|      0|                    {
 3799|      0|                        readlink_error((char const *)current_stat_info.file_name);
 3800|      0|                    }
 3801|      0|                }
 3802|      0|                {
 3803|      0|                    report_difference(&current_stat_info, (char const *)((void *)0));
 3804|      0|                }
 3805|      0|            }
 3806|      0|            else {
 3807|      0|                if ((size_t)status != len) {
 3808|      0|                    {
 3809|      0|                        tmp___20 = gettext("Symlink differs");
 3810|      0|                        report_difference(&current_stat_info, (char const *)tmp___20);
 3811|      0|                    }
 3812|      0|                }
 3813|      0|                else {
 3814|      0|                    {
 3815|      0|                        tmp___21 = strncmp((char const *)current_stat_info.link_name,
 3816|      0|                                           (char const *)linkbuf, len);
 3817|      0|                    }
 3818|      0|                    if (tmp___21 != 0) {
 3819|      0|                        {
 3820|      0|                            tmp___20 = gettext("Symlink differs");
 3821|      0|                            report_difference(&current_stat_info, (char const *)tmp___20);
 3822|      0|                        }
 3823|      0|                    }
 3824|      0|                }
 3825|      0|            }
 3826|      0|            goto switch_break;
 3827|      0|case_51:  /* CIL Label */
 3828|      0|case_52:  /* CIL Label */
 3829|      0|case_54 : { /* CIL Label */
 3830|      0|                tmp___22 =
 3831|      0|                    get_stat_data((char const *)current_stat_info.file_name, &stat_data);
 3832|      0|            }
 3833|      0|            if (!tmp___22) {
 3834|      0|                goto switch_break;
 3835|      0|            }
 3836|      0|            if ((int)current_header->header.typeflag == 51) {
 3837|      0|                tmp___35 = !((stat_data.st_mode & 61440U) == 8192U);
 3838|      0|            }
 3839|      0|            else {
 3840|      0|                if ((int)current_header->header.typeflag == 52) {
 3841|      0|                    tmp___34 = !((stat_data.st_mode & 61440U) == 24576U);
 3842|      0|                }
 3843|      0|                else {
 3844|      0|                    tmp___34 = !((stat_data.st_mode & 61440U) == 4096U);
 3845|      0|                }
 3846|      0|                tmp___35 = tmp___34;
 3847|      0|            }
 3848|      0|            if (tmp___35) {
 3849|      0|                {
 3850|      0|                    tmp___23 = gettext("File type differs");
 3851|      0|                    report_difference(&current_stat_info, (char const *)tmp___23);
 3852|      0|                }
 3853|      0|                goto switch_break;
 3854|      0|            }
 3855|      0|            if ((int)current_header->header.typeflag == 51) {
 3856|      0|                goto _L___3;
 3857|      0|            }
 3858|      0|            else {
 3859|      0|                if ((int)current_header->header.typeflag == 52) {
 3860|      0|_L___3: /* CIL Label */
 3861|      0|                    if (current_stat_info.stat.st_rdev != stat_data.st_rdev) {
 3862|      0|                        {
 3863|      0|                            tmp___24 = gettext("Device number differs");
 3864|      0|                            report_difference(&current_stat_info, (char const *)tmp___24);
 3865|      0|                        }
 3866|      0|                        goto switch_break;
 3867|      0|                    }
 3868|      0|                }
 3869|      0|            }
 3870|      0|            if ((current_stat_info.stat.st_mode &
 3871|      0|                    (unsigned int)(3584 |
 3872|      0|                                   (((64 | (64 >> 3)) | ((64 >> 3) >> 3)) |
 3873|      0|                                    (((128 | (128 >> 3)) | ((128 >> 3) >> 3)) |
 3874|      0|                                     ((256 | (256 >> 3)) | ((256 >> 3) >> 3)))))) !=
 3875|      0|                    (stat_data.st_mode &
 3876|      0|                     (unsigned int)(3584 |
 3877|      0|                                    (((64 | (64 >> 3)) | ((64 >> 3) >> 3)) |
 3878|      0|                                     (((128 | (128 >> 3)) | ((128 >> 3) >> 3)) |
 3879|      0|                                      ((256 | (256 >> 3)) | ((256 >> 3) >> 3))))))) {
 3880|      0|                {
 3881|      0|                    tmp___25 = gettext("Mode differs");
 3882|      0|                    report_difference(&current_stat_info, (char const *)tmp___25);
 3883|      0|                }
 3884|      0|                goto switch_break;
 3885|      0|            }
 3886|      0|            goto switch_break;
 3887|      0|case_68 : { /* CIL Label */
 3888|      0|                tmp___26 = get_directory_contents(current_stat_info.file_name, (dev_t)0);
 3889|      0|                dumpdir_buffer = tmp___26;
 3890|      0|            }
 3891|      0|            if (multi_volume_option) {
 3892|      0|                {
 3893|      0|                    assign_string(&save_name, (char const *)current_stat_info.file_name);
 3894|      0|                    save_totsize = current_stat_info.stat.st_size;
 3895|      0|                }
 3896|      0|            }
 3897|      0|            if (dumpdir_buffer) {
 3898|      0|                {
 3899|      0|                    dumpdir_cursor = dumpdir_buffer;
 3900|      0|                    read_and_process(current_stat_info.stat.st_size, &process_dumpdir);
 3901|      0|                    free((void *)dumpdir_buffer);
 3902|      0|                }
 3903|      0|            }
 3904|      0|            else {
 3905|      0|                {
 3906|      0|                    read_and_process(current_stat_info.stat.st_size, &process_noop);
 3907|      0|                }
 3908|      0|            }
 3909|      0|            if (multi_volume_option) {
 3910|      0|                {
 3911|      0|                    assign_string(&save_name, (char const *)0);
 3912|      0|                }
 3913|      0|            }
 3914|      0|really_dir:
 3915|      0|case_53 : { /* CIL Label */
 3916|      0|                tmp___27 =
 3917|      0|                    get_stat_data((char const *)current_stat_info.file_name, &stat_data);
 3918|      0|            }
 3919|      0|            if (!tmp___27) {
 3920|      0|                goto switch_break;
 3921|      0|            }
 3922|      0|            if (!((stat_data.st_mode & 61440U) == 16384U)) {
 3923|      0|                {
 3924|      0|                    tmp___28 = gettext("File type differs");
 3925|      0|                    report_difference(&current_stat_info, (char const *)tmp___28);
 3926|      0|                }
 3927|      0|                goto switch_break;
 3928|      0|            }
 3929|      0|            if ((current_stat_info.stat.st_mode &
 3930|      0|                    (unsigned int)(3584 |
 3931|      0|                                   (((64 | (64 >> 3)) | ((64 >> 3) >> 3)) |
 3932|      0|                                    (((128 | (128 >> 3)) | ((128 >> 3) >> 3)) |
 3933|      0|                                     ((256 | (256 >> 3)) | ((256 >> 3) >> 3)))))) !=
 3934|      0|                    (stat_data.st_mode &
 3935|      0|                     (unsigned int)(3584 |
 3936|      0|                                    (((64 | (64 >> 3)) | ((64 >> 3) >> 3)) |
 3937|      0|                                     (((128 | (128 >> 3)) | ((128 >> 3) >> 3)) |
 3938|      0|                                      ((256 | (256 >> 3)) | ((256 >> 3) >> 3))))))) {
 3939|      0|                {
 3940|      0|                    tmp___29 = gettext("Mode differs");
 3941|      0|                    report_difference(&current_stat_info, (char const *)tmp___29);
 3942|      0|                }
 3943|      0|                goto switch_break;
 3944|      0|            }
 3945|      0|            goto switch_break;
 3946|      0|case_86: /* CIL Label */
 3947|      0|            goto switch_break;
 3948|      0|case_77: /* CIL Label */
 3949|      0|            if (current_stat_info.had_trailing_slash) {
 3950|      0|                goto really_dir;
 3951|      0|            }
 3952|      0|            {
 3953|      0|                tmp___30 = get_stat_data((char const *)current_stat_info.file_name,
 3954|      0|                                         &stat_data);
 3955|      0|            }
 3956|      0|            if (!tmp___30) {
 3957|      0|                goto switch_break;
 3958|      0|            }
 3959|      0|            if (!((stat_data.st_mode & 61440U) == 32768U)) {
 3960|      0|                {
 3961|      0|                    tmp___31 = gettext("File type differs");
 3962|      0|                    report_difference(&current_stat_info, (char const *)tmp___31);
 3963|      0|                    skip_member();
 3964|      0|                }
 3965|      0|                goto switch_break;
 3966|      0|            }
 3967|      0|            {
 3968|      0|                offset = off_from_header(
 3969|      0|                             (char const *)(current_header->oldgnu_header.offset),
 3970|      0|                             sizeof(current_header->oldgnu_header.offset));
 3971|      0|            }
 3972|      0|            if (stat_data.st_size != current_stat_info.stat.st_size + offset) {
 3973|      0|                {
 3974|      0|                    tmp___32 = gettext("Size differs");
 3975|      0|                    report_difference(&current_stat_info, (char const *)tmp___32);
 3976|      0|                    skip_member();
 3977|      0|                }
 3978|      0|                goto switch_break;
 3979|      0|            }
 3980|      0|            {
 3981|      0|                diff_handle = open((char const *)current_stat_info.file_name, 0);
 3982|      0|            }
 3983|      0|            if (diff_handle < 0) {
 3984|      0|                {
 3985|      0|                    open_error((char const *)current_stat_info.file_name);
 3986|      0|                    report_difference(&current_stat_info, (char const *)((void *)0));
 3987|      0|                    skip_member();
 3988|      0|                }
 3989|      0|                goto switch_break;
 3990|      0|            }
 3991|      0|            {
 3992|      0|                tmp___33 = lseek(diff_handle, offset, 0);
 3993|      0|            }
 3994|      0|            if (tmp___33 < 0L) {
 3995|      0|                {
 3996|      0|                    seek_error_details((char const *)current_stat_info.file_name, offset);
 3997|      0|                    report_difference(&current_stat_info, (char const *)((void *)0));
 3998|      0|                }
 3999|      0|                goto switch_break;
 4000|      0|            }
 4001|      0|            if (multi_volume_option) {
 4002|      0|                {
 4003|      0|                    assign_string(&save_name, (char const *)current_stat_info.file_name);
 4004|      0|                    save_totsize = stat_data.st_size;
 4005|      0|                }
 4006|      0|            }
 4007|      0|            {
 4008|      0|                read_and_process(current_stat_info.stat.st_size, &process_rawdata);
 4009|      0|            }
 4010|      0|            if (multi_volume_option) {
 4011|      0|                {
 4012|      0|                    assign_string(&save_name, (char const *)0);
 4013|      0|                }
 4014|      0|            }
 4015|      0|            {
 4016|      0|                status = close(diff_handle);
 4017|      0|            }
 4018|      0|            if (status != 0) {
 4019|      0|                {
 4020|      0|                    close_error((char const *)current_stat_info.file_name);
 4021|      0|                }
 4022|      0|            }
 4023|      0|            goto switch_break;
 4024|      0|switch_break: /* CIL Label */
 4025|      0|            ;
 4026|      0|        }
 4027|      0|        return;
 4028|      0|    }
 4029|      0|}
 4030|       |void verify_volume(void)
 4031|      0|{
 4032|      0|    struct mtop operation;
 4033|      0|    int status;
 4034|      0|    off_t tmp;
 4035|      0|    __off_t tmp___0;
 4036|      0|    off_t tmp___1;
 4037|      0|    int *tmp___2;
 4038|      0|    int tmp___3;
 4039|      0|    int tmp___4;
 4040|      0|    int tmp___5;
 4041|      0|    int tmp___6;
 4042|      0|    enum read_header status___0;
 4043|      0|    enum read_header tmp___7;
 4044|      0|    int counter;
 4045|      0|    char *tmp___8;
 4046|       |
 4047|      0|    {
 4048|      0|        if (!diff_buffer) {
 4049|      0|            {
 4050|      0|                diff_init();
 4051|      0|            }
 4052|      0|        }
 4053|      0|        {
 4054|      0|            fsync(archive);
 4055|      0|            ioctl(archive, (unsigned long)((unsigned int)(2 << 8) | 75U));
 4056|      0|            operation.mt_op = (short)2;
 4057|      0|            operation.mt_count = 1;
 4058|      0|        }
 4059|      0|        if (archive >= 1 << 30) {
 4060|      0|            {
 4061|      0|                tmp___5 = rmt_ioctl__(
 4062|      0|                              archive - (1 << 30),
 4063|      0|                              (int)((unsigned long)(((1U << 30) | (unsigned int)(109 << 8)) |
 4064|      0|                                                    1U) |
 4065|      0|                                    (sizeof(struct mtop) << 16)),
 4066|      0|                              (char *)(&operation));
 4067|      0|                status = tmp___5;
 4068|      0|            }
 4069|      0|        }
 4070|      0|        else {
 4071|      0|            {
 4072|      0|                tmp___6 = ioctl(
 4073|      0|                              archive,
 4074|      0|                              (unsigned long)(((1U << 30) | (unsigned int)(109 << 8)) | 1U) |
 4075|      0|                              (sizeof(struct mtop) << 16),
 4076|      0|                              (char *)(&operation));
 4077|      0|                status = tmp___6;
 4078|      0|            }
 4079|      0|        }
 4080|      0|        if (status < 0) {
 4081|      0|            {
 4082|      0|                tmp___2 = __errno_location();
 4083|      0|            }
 4084|      0|            if (*tmp___2 != 5) {
 4085|      0|                goto _L;
 4086|      0|            }
 4087|      0|            else {
 4088|      0|                if (archive >= 1 << 30) {
 4089|      0|                    {
 4090|      0|                        tmp___3 = rmt_ioctl__(
 4091|      0|                                      archive - (1 << 30),
 4092|      0|                                      (int)((unsigned long)(((1U << 30) | (unsigned int)(109 << 8)) |
 4093|      0|                                                            1U) |
 4094|      0|                                            (sizeof(struct mtop) << 16)),
 4095|      0|                                      (char *)(&operation));
 4096|      0|                        status = tmp___3;
 4097|      0|                    }
 4098|      0|                }
 4099|      0|                else {
 4100|      0|                    {
 4101|      0|                        tmp___4 = ioctl(
 4102|      0|                                      archive,
 4103|      0|                                      (unsigned long)(((1U << 30) | (unsigned int)(109 << 8)) | 1U) |
 4104|      0|                                      (sizeof(struct mtop) << 16),
 4105|      0|                                      (char *)(&operation));
 4106|      0|                        status = tmp___4;
 4107|      0|                    }
 4108|      0|                }
 4109|      0|                if (status < 0) {
 4110|      0|_L:
 4111|      0|                    if (archive >= 1 << 30) {
 4112|      0|                        {
 4113|      0|                            tmp = rmt_lseek__(archive - (1 << 30), (off_t)0, 0);
 4114|      0|                            tmp___1 = tmp;
 4115|      0|                        }
 4116|      0|                    }
 4117|      0|                    else {
 4118|      0|                        {
 4119|      0|                            tmp___0 = lseek(archive, (off_t)0, 0);
 4120|      0|                            tmp___1 = tmp___0;
 4121|      0|                        }
 4122|      0|                    }
 4123|      0|                    if (tmp___1 != 0L) {
 4124|      0|                        {
 4125|      0|                            seek_warn(*(archive_name_array + 0));
 4126|      0|                        }
 4127|      0|                        return;
 4128|      0|                    }
 4129|      0|                }
 4130|      0|            }
 4131|      0|        }
 4132|      0|        {
 4133|      0|            access_mode = (enum access_mode)0;
 4134|      0|            now_verifying = (_Bool)1;
 4135|      0|            flush_read();
 4136|      0|        }
 4137|      0|        {
 4138|      0|            while (1) {
 4139|      0|while_continue: /* CIL Label */
 4140|      0|                ;
 4141|      0|                {
 4142|      0|                    tmp___7 = read_header((_Bool)0);
 4143|      0|                    status___0 = tmp___7;
 4144|      0|                }
 4145|      0|                if ((unsigned int)status___0 == 5U) {
 4146|      0|                    counter = 0;
 4147|      0|                    {
 4148|      0|                        while (1) {
 4149|      0|while_continue___0: /* CIL Label */
 4150|      0|                            ;
 4151|      0|                            {
 4152|      0|                                counter++;
 4153|      0|                                status___0 = read_header((_Bool)0);
 4154|      0|                            }
 4155|      0|                            if (!((unsigned int)status___0 == 5U)) {
 4156|      0|                                goto while_break___0;
 4157|      0|                            }
 4158|      0|                        }
 4159|      0|while_break___0: /* CIL Label */
 4160|      0|                        ;
 4161|      0|                    }
 4162|      0|                    {
 4163|      0|                        tmp___8 = ngettext("VERIFY FAILURE: %d invalid header detected",
 4164|      0|                                           "VERIFY FAILURE: %d invalid headers detected",
 4165|      0|                                           (unsigned long)counter);
 4166|      0|                        error(0, 0, (char const *)tmp___8, counter);
 4167|      0|                        exit_status = 2;
 4168|      0|                    }
 4169|      0|                }
 4170|      0|                if ((unsigned int)status___0 == 3U) {
 4171|      0|                    goto while_break;
 4172|      0|                }
 4173|      0|                else {
 4174|      0|                    if ((unsigned int)status___0 == 4U) {
 4175|      0|                        goto while_break;
 4176|      0|                    }
 4177|      0|                }
 4178|      0|                {
 4179|      0|                    diff_archive();
 4180|      0|                }
 4181|      0|            }
 4182|      0|while_break: /* CIL Label */
 4183|      0|            ;
 4184|      0|        }
 4185|      0|        access_mode = (enum access_mode)1;
 4186|      0|        now_verifying = (_Bool)0;
 4187|      0|        return;
 4188|      0|    }
 4189|      0|}
 4190|       |/* #pragma merger("0","002.create.o.i","") */
 4191|       |extern __attribute__((__nothrow__)) unsigned int(
 4192|       |    __attribute__((__leaf__)) gnu_dev_major)(unsigned long long __dev)
 4193|       |__attribute__((__const__));
 4194|       |extern __attribute__((__nothrow__)) unsigned int(
 4195|       |    __attribute__((__leaf__)) gnu_dev_minor)(unsigned long long __dev)
 4196|       |__attribute__((__const__));
 4197|       |extern __attribute__((__nothrow__)) char *(
 4198|       |    __attribute__((__nonnull__(1, 2), __leaf__))
 4199|       |    strncpy)(char *__restrict __dest, char const *__restrict __src, size_t __n);
 4200|       |extern __attribute__((__nothrow__)) char *(__attribute__((__nonnull__(1),
 4201|       |        __leaf__))
 4202|       |        strdup)(char const *__s)
 4203|       |__attribute__((__malloc__));
 4204|       |extern
 4205|       |__attribute__((__nothrow__)) int(__attribute__((__nonnull__(2), __leaf__))
 4206|       |                                 fstat)(int __fd, struct stat *__buf);
 4207|       |extern __attribute__((__nothrow__))
 4208|       |__uid_t(__attribute__((__leaf__)) getuid)(void);
 4209|       |extern __attribute__((__nothrow__))
 4210|       |__gid_t(__attribute__((__leaf__)) getgid)(void);
 4211|       |extern
 4212|       |__attribute__((__nothrow__)) int(__attribute__((__nonnull__(1), __leaf__))
 4213|       |                                 unlink)(char const *__name);
 4214|       |char *savedir(char const *dir);
 4215|       |void *xrealloc(void *p, size_t n);
 4216|       |mode_t mode_adjust(mode_t oldmode, struct mode_change const *changes);
 4217|       |enum archive_format archive_format;
 4218|       |int after_date_option;
 4219|       |gid_t group_option;
 4220|       |_Bool ignore_failed_read_option;
 4221|       |_Bool incremental_option;
 4222|       |_Bool interactive_option;
 4223|       |char const *listed_incremental_option;
 4224|       |struct mode_change *mode_option;
 4225|       |struct timespec newer_mtime_option;
 4226|       |int recursion_option;
 4227|       |_Bool numeric_owner_option;
 4228|       |_Bool one_file_system_option;
 4229|       |uid_t owner_option;
 4230|       |_Bool remove_files_option;
 4231|       |_Bool sparse_option;
 4232|       |_Bool file_dumpable_p(struct tar_stat_info *st);
 4233|       |void create_archive(void);
 4234|       |void pad_archive(off_t size_left);
 4235|       |void dump_file(char *p, int top_level, dev_t parent_device);
 4236|       |union block *start_header(struct tar_stat_info *st);
 4237|       |void simple_finish_header(union block *header);
 4238|       |union block *start_private_header(char const *name, size_t size);
 4239|       |void write_eot(void);
 4240|       |void check_links(void);
 4241|       |void gid_to_chars(gid_t v, char *p, size_t s);
 4242|       |void major_to_chars(int v, char *p, size_t s);
 4243|       |void minor_to_chars(int v, char *p, size_t s);
 4244|       |void mode_to_chars(mode_t v, char *p, size_t s);
 4245|       |void size_to_chars(size_t v, char *p, size_t s);
 4246|       |void uid_to_chars(uid_t v, char *p, size_t s);
 4247|       |void uintmax_to_chars(uintmax_t v, char *p, size_t s);
 4248|       |void string_to_chars(char *str, char *p, size_t s);
 4249|       |void write_directory_file(void);
 4250|       |struct xheader extended_header;
 4251|       |void close_diag(char const *name);
 4252|       |void open_diag(char const *name);
 4253|       |void read_diag_details(char const *name, off_t offset, size_t size);
 4254|       |void readlink_diag(char const *name);
 4255|       |void savedir_diag(char const *name);
 4256|       |void stat_diag(char const *name);
 4257|       |void unlink_error(char const *name);
 4258|       |struct name *gnu_list_name;
 4259|       |void gid_to_gname(gid_t gid, char **gname);
 4260|       |int gname_to_gid(char const *gname, gid_t *gidp);
 4261|       |void uid_to_uname(uid_t uid, char **uname);
 4262|       |int uname_to_uid(char const *uname, uid_t *uidp);
 4263|       |char *name_next(int change_dirs);
 4264|       |void collect_and_sort_names(void);
 4265|       |char *name_from_list(void);
 4266|       |void blank_name_list(void);
 4267|       |_Bool excluded_name(char const *name);
 4268|       |_Bool is_avoided_name(char const *name);
 4269|       |int confirm(char const *message_action, char const *message_name);
 4270|       |void tar_stat_init(struct tar_stat_info *st);
 4271|       |void xheader_store(char const *keyword, struct tar_stat_info const *st,
 4272|       |                   void *data);
 4273|       |void xheader_write(char type, char *name, struct xheader *xhdr);
 4274|       |void xheader_write_global(void);
 4275|       |void xheader_finish(struct xheader *xhdr);
 4276|       |char *xheader_xhdr_name(struct tar_stat_info *st);
 4277|       |void sys_stat_nanoseconds(struct tar_stat_info *st);
 4278|       |_Bool sys_file_is_archive(struct tar_stat_info *p);
 4279|       |_Bool sparse_file_p(struct tar_stat_info *st);
 4280|       |enum dump_status sparse_dump_file(int fd, struct tar_stat_info *st);
 4281|       |_Bool string_ascii_p(char const *str);
 4282|       |void *hash_lookup(Hash_table const *table___0, void const *entry);
 4283|       |void *hash_get_first(Hash_table const *table___0);
 4284|       |void *hash_get_next(Hash_table const *table___0, void const *entry);
 4285|       |Hash_table *hash_initialize(size_t candidate, Hash_tuning const *tuning,
 4286|       |                            size_t (*hasher)(void const *, size_t),
 4287|       |                            _Bool (*comparator)(void const *, void const *),
 4288|       |                            void (*data_freer)(void *));
 4289|       |void *hash_insert(Hash_table *table___0, void const *entry);
 4290|       |static void to_octal(uintmax_t value, char *where, size_t size)
 4291|      0|{
 4292|      0|    uintmax_t v;
 4293|      0|    size_t i;
 4294|       |
 4295|      0|    {
 4296|      0|        v = value;
 4297|      0|        i = size;
 4298|      0|        {
 4299|      0|            while (1) {
 4300|      0|while_continue: /* CIL Label */
 4301|      0|                ;
 4302|      0|                i--;
 4303|      0|                *(where + i) = (char)(48UL + (v & (unsigned long)((1 << 3) - 1)));
 4304|      0|                v >>= 3;
 4305|      0|                if (!i) {
 4306|      0|                    goto while_break;
 4307|      0|                }
 4308|      0|            }
 4309|      0|while_break: /* CIL Label */
 4310|      0|            ;
 4311|      0|        }
 4312|      0|        return;
 4313|      0|    }
 4314|      0|}
 4315|       |static void to_base256(int negative, uintmax_t value, char *where,
 4316|       |                       size_t size)
 4317|      0|{
 4318|      0|    uintmax_t v;
 4319|      0|    uintmax_t propagated_sign_bits;
 4320|      0|    size_t i;
 4321|       |
 4322|      0|    {
 4323|      0|        v = value;
 4324|      0|        propagated_sign_bits = (uintmax_t)(-negative) << (8UL * sizeof(v) - 8UL);
 4325|      0|        i = size;
 4326|      0|        {
 4327|      0|            while (1) {
 4328|      0|while_continue: /* CIL Label */
 4329|      0|                ;
 4330|      0|                i--;
 4331|      0|                *(where + i) = (char)(v & (unsigned long)((1 << 8) - 1));
 4332|      0|                v = propagated_sign_bits | (v >> 8);
 4333|      0|                if (!i) {
 4334|      0|                    goto while_break;
 4335|      0|                }
 4336|      0|            }
 4337|      0|while_break: /* CIL Label */
 4338|      0|            ;
 4339|      0|        }
 4340|      0|        return;
 4341|      0|    }
 4342|      0|}
 4343|       |static int warned_once;
 4344|       |static void to_chars(int negative, uintmax_t value, size_t valsize,
 4345|       |                     uintmax_t (*substitute)(int *), char *where, size_t size,
 4346|       |                     char const *type)
 4347|      0|{
 4348|      0|    int base256_allowed;
 4349|      0|    char *tmp;
 4350|      0|    uintmax_t maxval;
 4351|      0|    char valbuf[((((sizeof(uintmax_t) * 8UL) * 302UL) / 1000UL + 1UL) + 1UL) +
 4352|      0|                                      1UL];
 4353|      0|    char maxbuf[(((sizeof(uintmax_t) * 8UL) * 302UL) / 1000UL + 1UL) + 1UL];
 4354|      0|    char minbuf[((((sizeof(uintmax_t) * 8UL) * 302UL) / 1000UL + 1UL) + 1UL) +
 4355|      0|                                      1UL];
 4356|      0|    char const *minval_string;
 4357|      0|    char const *maxval_string;
 4358|      0|    char *tmp___0;
 4359|      0|    char const *value_string;
 4360|      0|    uintmax_t m;
 4361|      0|    char *p;
 4362|      0|    char *tmp___1;
 4363|      0|    char *p___0;
 4364|      0|    char *tmp___2;
 4365|      0|    char *tmp___3;
 4366|      0|    int negsub;
 4367|      0|    uintmax_t sub;
 4368|      0|    uintmax_t tmp___4;
 4369|      0|    uintmax_t s;
 4370|      0|    char subbuf[((((sizeof(uintmax_t) * 8UL) * 302UL) / 1000UL + 1UL) + 1UL) +
 4371|      0|                                      1UL];
 4372|      0|    char *sub_string;
 4373|      0|    char *tmp___5;
 4374|      0|    char *tmp___6;
 4375|      0|    char *tmp___7;
 4376|      0|    int tmp___8;
 4377|      0|    int tmp___9;
 4378|      0|    unsigned long tmp___10;
 4379|      0|    unsigned long tmp___11;
 4380|      0|    unsigned long tmp___12;
 4381|      0|    unsigned long tmp___13;
 4382|      0|    unsigned long tmp___14;
 4383|      0|    unsigned long tmp___15;
 4384|      0|    void *__cil_tmp41;
 4385|      0|    void *__cil_tmp42;
 4386|      0|    void *__cil_tmp43;
 4387|      0|    void *__cil_tmp44;
 4388|      0|    char *__cil_tmp45;
 4389|      0|    char *__cil_tmp46;
 4390|      0|    char *__cil_tmp47;
 4391|      0|    char *__cil_tmp48;
 4392|       |
 4393|      0|    {
 4394|      0|        if ((unsigned int)archive_format == 6U) {
 4395|      0|            tmp___8 = 1;
 4396|      0|        }
 4397|      0|        else {
 4398|      0|            if ((unsigned int)archive_format == 2U) {
 4399|      0|                tmp___8 = 1;
 4400|      0|            }
 4401|      0|            else {
 4402|      0|                tmp___8 = 0;
 4403|      0|            }
 4404|      0|        }
 4405|      0|        base256_allowed = tmp___8;
 4406|      0|        if (!negative) {
 4407|      0|            if ((size - 1UL) * 3UL < sizeof(uintmax_t) * 8UL) {
 4408|      0|                tmp___15 = (1UL << (size - 1UL) * 3UL) - 1UL;
 4409|      0|            }
 4410|      0|            else {
 4411|      0|                tmp___15 = (uintmax_t)-1;
 4412|      0|            }
 4413|      0|            if (value <= tmp___15) {
 4414|      0|                {
 4415|      0|                    *(where + (size - 1UL)) = (char)'\000';
 4416|      0|                    to_octal(value, where, size - 1UL);
 4417|      0|                }
 4418|      0|            }
 4419|      0|            else {
 4420|      0|                goto _L___5;
 4421|      0|            }
 4422|      0|        }
 4423|      0|        else {
 4424|      0|_L___5: /* CIL Label */
 4425|      0|            if (negative) {
 4426|      0|                tmp___13 = 0xffffffffffffffffUL - value;
 4427|      0|            }
 4428|      0|            else {
 4429|      0|                tmp___13 = value;
 4430|      0|            }
 4431|      0|            if ((size - 1UL) * 8UL < sizeof(uintmax_t) * 8UL) {
 4432|      0|                tmp___14 = (1UL << (size - 1UL) * 8UL) - 1UL;
 4433|      0|            }
 4434|      0|            else {
 4435|      0|                tmp___14 = (uintmax_t)-1;
 4436|      0|            }
 4437|      0|            if (tmp___13 <= tmp___14) {
 4438|      0|                if (base256_allowed) {
 4439|      0|                    if (negative) {
 4440|      0|                        tmp___9 = -1;
 4441|      0|                    }
 4442|      0|                    else {
 4443|      0|                        tmp___9 = 1 << 7;
 4444|      0|                    }
 4445|      0|                    {
 4446|      0|                        *(where + 0) = (char)tmp___9;
 4447|      0|                        to_base256(negative, value, where + 1, size - 1UL);
 4448|      0|                    }
 4449|      0|                }
 4450|      0|                else {
 4451|      0|                    goto _L___4;
 4452|      0|                }
 4453|      0|            }
 4454|      0|            else {
 4455|      0|_L___4: /* CIL Label */
 4456|      0|                if (negative) {
 4457|      0|                    if (valsize * 8UL <= (size - 1UL) * 3UL) {
 4458|      0|                        if (!warned_once) {
 4459|      0|                            {
 4460|      0|                                warned_once = 1;
 4461|      0|                                tmp = gettext("Generating negative octal headers");
 4462|      0|                                error(0, 0, (char const *)tmp);
 4463|      0|                            }
 4464|      0|                        }
 4465|      0|                        *(where + (size - 1UL)) = (char)'\000';
 4466|      0|                        if (valsize * 8UL < sizeof(uintmax_t) * 8UL) {
 4467|      0|                            tmp___10 = (1UL << valsize * 8UL) - 1UL;
 4468|      0|                        }
 4469|      0|                        else {
 4470|      0|                            tmp___10 = (uintmax_t)-1;
 4471|      0|                        }
 4472|      0|                        {
 4473|      0|                            to_octal(value & tmp___10, where, size - 1UL);
 4474|      0|                        }
 4475|      0|                    }
 4476|      0|                    else {
 4477|      0|                        goto _L___3;
 4478|      0|                    }
 4479|      0|                }
 4480|      0|                else {
 4481|      0|_L___3: /* CIL Label */
 4482|      0|                    if (base256_allowed) {
 4483|      0|                        if ((size - 1UL) * 8UL < sizeof(uintmax_t) * 8UL) {
 4484|      0|                            tmp___11 = (1UL << (size - 1UL) * 8UL) - 1UL;
 4485|      0|                        }
 4486|      0|                        else {
 4487|      0|                            tmp___11 = (uintmax_t)-1;
 4488|      0|                        }
 4489|      0|                        maxval = tmp___11;
 4490|      0|                    }
 4491|      0|                    else {
 4492|      0|                        if ((size - 1UL) * 3UL < sizeof(uintmax_t) * 8UL) {
 4493|      0|                            tmp___12 = (1UL << (size - 1UL) * 3UL) - 1UL;
 4494|      0|                        }
 4495|      0|                        else {
 4496|      0|                            tmp___12 = (uintmax_t)-1;
 4497|      0|                        }
 4498|      0|                        maxval = tmp___12;
 4499|      0|                    }
 4500|      0|                    {
 4501|      0|                        tmp___0 = stringify_uintmax_t_backwards(
 4502|      0|                                      maxval,
 4503|      0|                                      maxbuf + ((((sizeof(uintmax_t) * 8UL) * 302UL) / 1000UL + 1UL) +
 4504|      0|                                                1UL));
 4505|      0|                        maxval_string = (char const *)tmp___0;
 4506|      0|                    }
 4507|      0|                    if (base256_allowed) {
 4508|      0|                        if (maxval + 1UL) {
 4509|      0|                            m = maxval + 1UL;
 4510|      0|                        }
 4511|      0|                        else {
 4512|      0|                            m = maxval / 2UL + 1UL;
 4513|      0|                        }
 4514|      0|                        {
 4515|      0|                            tmp___1 = stringify_uintmax_t_backwards(
 4516|      0|                                          m, (minbuf + 1) +
 4517|      0|                                          ((((sizeof(uintmax_t) * 8UL) * 302UL) / 1000UL + 1UL) +
 4518|      0|                                           1UL));
 4519|      0|                            p = tmp___1;
 4520|      0|                            p--;
 4521|      0|                            *p = (char)'-';
 4522|      0|                            minval_string = (char const *)p;
 4523|      0|                        }
 4524|      0|                    }
 4525|      0|                    else {
 4526|      0|                        minval_string = "0";
 4527|      0|                    }
 4528|      0|                    if (negative) {
 4529|      0|                        {
 4530|      0|                            tmp___2 = stringify_uintmax_t_backwards(
 4531|      0|                                          -value,
 4532|      0|                                          (valbuf + 1) +
 4533|      0|                                          ((((sizeof(uintmax_t) * 8UL) * 302UL) / 1000UL + 1UL) +
 4534|      0|                                           1UL));
 4535|      0|                            p___0 = tmp___2;
 4536|      0|                            p___0--;
 4537|      0|                            *p___0 = (char)'-';
 4538|      0|                            value_string = (char const *)p___0;
 4539|      0|                        }
 4540|      0|                    }
 4541|      0|                    else {
 4542|      0|                        {
 4543|      0|                            tmp___3 = stringify_uintmax_t_backwards(
 4544|      0|                                          value,
 4545|      0|                                          valbuf +
 4546|      0|                                          ((((sizeof(uintmax_t) * 8UL) * 302UL) / 1000UL + 1UL) +
 4547|      0|                                           1UL));
 4548|      0|                            value_string = (char const *)tmp___3;
 4549|      0|                        }
 4550|      0|                    }
 4551|      0|                    if (substitute) {
 4552|      0|                        {
 4553|      0|                            tmp___4 = (*substitute)(&negsub);
 4554|      0|                            sub = tmp___4 & maxval;
 4555|      0|                            negsub &= (unsigned int)archive_format == 6U;
 4556|      0|                        }
 4557|      0|                        if (negsub) {
 4558|      0|                            s = -sub;
 4559|      0|                        }
 4560|      0|                        else {
 4561|      0|                            s = sub;
 4562|      0|                        }
 4563|      0|                        {
 4564|      0|                            tmp___5 = stringify_uintmax_t_backwards(
 4565|      0|                                          s, (subbuf + 1) +
 4566|      0|                                          ((((sizeof(uintmax_t) * 8UL) * 302UL) / 1000UL + 1UL) +
 4567|      0|                                           1UL));
 4568|      0|                            sub_string = tmp___5;
 4569|      0|                        }
 4570|      0|                        if (negsub) {
 4571|      0|                            sub_string--;
 4572|      0|                            *sub_string = (char)'-';
 4573|      0|                        }
 4574|      0|                        {
 4575|      0|                            tmp___6 =
 4576|      0|                                gettext("value %s out of %s range %s..%s; substituting %s");
 4577|      0|                            error(0, 0, (char const *)tmp___6, value_string, type,
 4578|      0|                                  minval_string, maxval_string, sub_string);
 4579|      0|                            to_chars(negsub, s, valsize, (uintmax_t(*)(int *))0, where, size,
 4580|      0|                                     type);
 4581|      0|                        }
 4582|      0|                    }
 4583|      0|                    else {
 4584|      0|                        {
 4585|      0|                            tmp___7 = gettext("value %s out of %s range %s..%s");
 4586|      0|                            error(0, 0, (char const *)tmp___7, value_string, type,
 4587|      0|                                  minval_string, maxval_string);
 4588|      0|                            exit_status = 2;
 4589|      0|                        }
 4590|      0|                    }
 4591|      0|                }
 4592|      0|            }
 4593|      0|        }
 4594|      0|        return;
 4595|      0|    }
 4596|      0|}
 4597|       |static gid_t gid_nobody;
 4598|       |static uintmax_t gid_substitute(int *negative)
 4599|      0|{
 4600|      0|    gid_t r;
 4601|      0|    int tmp;
 4602|      0|    char *__cil_tmp4;
 4603|       |
 4604|      0|    {
 4605|      0|        if (!gid_nobody) {
 4606|      0|            {
 4607|      0|                tmp = gname_to_gid("nobody", &gid_nobody);
 4608|      0|            }
 4609|      0|            if (!tmp) {
 4610|      0|                gid_nobody = (gid_t)-2;
 4611|      0|            }
 4612|      0|        }
 4613|      0|        r = gid_nobody;
 4614|      0|        *negative = r < 0U;
 4615|      0|        return ((uintmax_t)r);
 4616|      0|    }
 4617|      0|}
 4618|       |void gid_to_chars(gid_t v, char *p, size_t s)
 4619|      0|{
 4620|      0|    char *__cil_tmp4;
 4621|       |
 4622|      0|    {
 4623|      0|        {
 4624|      0|            to_chars(v < 0U, (uintmax_t)v, sizeof(v), &gid_substitute, p, s, "gid_t");
 4625|      0|        }
 4626|      0|        return;
 4627|      0|    }
 4628|      0|}
 4629|       |void major_to_chars(int v, char *p, size_t s)
 4630|      0|{
 4631|      0|    char *__cil_tmp4;
 4632|       |
 4633|      0|    {
 4634|      0|        {
 4635|      0|            to_chars(v < 0, (uintmax_t)v, sizeof(v), (uintmax_t(*)(int *))0, p, s,
 4636|      0|                     "major_t");
 4637|      0|        }
 4638|      0|        return;
 4639|      0|    }
 4640|      0|}
 4641|       |void minor_to_chars(int v, char *p, size_t s)
 4642|      0|{
 4643|      0|    char *__cil_tmp4;
 4644|       |
 4645|      0|    {
 4646|      0|        {
 4647|      0|            to_chars(v < 0, (uintmax_t)v, sizeof(v), (uintmax_t(*)(int *))0, p, s,
 4648|      0|                     "minor_t");
 4649|      0|        }
 4650|      0|        return;
 4651|      0|    }
 4652|      0|}
 4653|       |void mode_to_chars(mode_t v, char *p, size_t s)
 4654|      0|{
 4655|      0|    int negative;
 4656|      0|    uintmax_t u;
 4657|      0|    int tmp;
 4658|      0|    int tmp___0;
 4659|      0|    int tmp___1;
 4660|      0|    int tmp___2;
 4661|      0|    int tmp___3;
 4662|      0|    int tmp___4;
 4663|      0|    int tmp___5;
 4664|      0|    int tmp___6;
 4665|      0|    int tmp___7;
 4666|      0|    int tmp___8;
 4667|      0|    int tmp___9;
 4668|      0|    int tmp___10;
 4669|      0|    char *__cil_tmp18;
 4670|       |
 4671|      0|    {
 4672|      0|        if (256 >> 3 == 32) {
 4673|      0|            if (128 >> 3 == 16) {
 4674|      0|                if (64 >> 3 == 8) {
 4675|      0|                    if ((256 >> 3) >> 3 == 4) {
 4676|      0|                        if ((128 >> 3) >> 3 == 2) {
 4677|      0|                            if ((64 >> 3) >> 3 == 1) {
 4678|      0|                                if ((unsigned int)archive_format != 4U) {
 4679|      0|                                    if ((unsigned int)archive_format != 3U) {
 4680|      0|                                        if ((unsigned int)archive_format != 6U) {
 4681|      0|                                            negative = v < 0U;
 4682|      0|                                            u = (uintmax_t)v;
 4683|      0|                                        }
 4684|      0|                                        else {
 4685|      0|                                            goto _L___10;
 4686|      0|                                        }
 4687|      0|                                    }
 4688|      0|                                    else {
 4689|      0|                                        goto _L___10;
 4690|      0|                                    }
 4691|      0|                                }
 4692|      0|                                else {
 4693|      0|                                    goto _L___10;
 4694|      0|                                }
 4695|      0|                            }
 4696|      0|                            else {
 4697|      0|                                goto _L___10;
 4698|      0|                            }
 4699|      0|                        }
 4700|      0|                        else {
 4701|      0|                            goto _L___10;
 4702|      0|                        }
 4703|      0|                    }
 4704|      0|                    else {
 4705|      0|                        goto _L___10;
 4706|      0|                    }
 4707|      0|                }
 4708|      0|                else {
 4709|      0|                    goto _L___10;
 4710|      0|                }
 4711|      0|            }
 4712|      0|            else {
 4713|      0|                goto _L___10;
 4714|      0|            }
 4715|      0|        }
 4716|      0|        else {
 4717|      0|_L___10: /* CIL Label */
 4718|      0|            negative = 0;
 4719|      0|            if (v & 2048U) {
 4720|      0|                tmp = 2048;
 4721|      0|            }
 4722|      0|            else {
 4723|      0|                tmp = 0;
 4724|      0|            }
 4725|      0|            if (v & 1024U) {
 4726|      0|                tmp___0 = 1024;
 4727|      0|            }
 4728|      0|            else {
 4729|      0|                tmp___0 = 0;
 4730|      0|            }
 4731|      0|            if (v & 512U) {
 4732|      0|                tmp___1 = 512;
 4733|      0|            }
 4734|      0|            else {
 4735|      0|                tmp___1 = 0;
 4736|      0|            }
 4737|      0|            if (v & 256U) {
 4738|      0|                tmp___2 = 256;
 4739|      0|            }
 4740|      0|            else {
 4741|      0|                tmp___2 = 0;
 4742|      0|            }
 4743|      0|            if (v & 128U) {
 4744|      0|                tmp___3 = 128;
 4745|      0|            }
 4746|      0|            else {
 4747|      0|                tmp___3 = 0;
 4748|      0|            }
 4749|      0|            if (v & 64U) {
 4750|      0|                tmp___4 = 64;
 4751|      0|            }
 4752|      0|            else {
 4753|      0|                tmp___4 = 0;
 4754|      0|            }
 4755|      0|            if (v & (unsigned int)(256 >> 3)) {
 4756|      0|                tmp___5 = 32;
 4757|      0|            }
 4758|      0|            else {
 4759|      0|                tmp___5 = 0;
 4760|      0|            }
 4761|      0|            if (v & (unsigned int)(128 >> 3)) {
 4762|      0|                tmp___6 = 16;
 4763|      0|            }
 4764|      0|            else {
 4765|      0|                tmp___6 = 0;
 4766|      0|            }
 4767|      0|            if (v & (unsigned int)(64 >> 3)) {
 4768|      0|                tmp___7 = 8;
 4769|      0|            }
 4770|      0|            else {
 4771|      0|                tmp___7 = 0;
 4772|      0|            }
 4773|      0|            if (v & (unsigned int)((256 >> 3) >> 3)) {
 4774|      0|                tmp___8 = 4;
 4775|      0|            }
 4776|      0|            else {
 4777|      0|                tmp___8 = 0;
 4778|      0|            }
 4779|      0|            if (v & (unsigned int)((128 >> 3) >> 3)) {
 4780|      0|                tmp___9 = 2;
 4781|      0|            }
 4782|      0|            else {
 4783|      0|                tmp___9 = 0;
 4784|      0|            }
 4785|      0|            if (v & (unsigned int)((64 >> 3) >> 3)) {
 4786|      0|                tmp___10 = 1;
 4787|      0|            }
 4788|      0|            else {
 4789|      0|                tmp___10 = 0;
 4790|      0|            }
 4791|      0|            u = (uintmax_t)(
 4792|      0|                    ((((((((((tmp | tmp___0) | tmp___1) | tmp___2) | tmp___3) | tmp___4) |
 4793|      0|                         tmp___5) |
 4794|      0|                        tmp___6) |
 4795|      0|                       tmp___7) |
 4796|      0|                      tmp___8) |
 4797|      0|                     tmp___9) |
 4798|      0|                    tmp___10);
 4799|      0|        }
 4800|      0|        {
 4801|      0|            to_chars(negative, u, sizeof(v), (uintmax_t(*)(int *))0, p, s, "mode_t");
 4802|      0|        }
 4803|      0|        return;
 4804|      0|    }
 4805|      0|}
 4806|       |void off_to_chars(off_t v, char *p, size_t s)
 4807|      0|{
 4808|      0|    char *__cil_tmp4;
 4809|       |
 4810|      0|    {
 4811|      0|        {
 4812|      0|            to_chars(v < 0L, (uintmax_t)v, sizeof(v), (uintmax_t(*)(int *))0, p, s,
 4813|      0|                     "off_t");
 4814|      0|        }
 4815|      0|        return;
 4816|      0|    }
 4817|      0|}
 4818|       |void size_to_chars(size_t v, char *p, size_t s)
 4819|      0|{
 4820|      0|    char *__cil_tmp4;
 4821|       |
 4822|      0|    {
 4823|      0|        {
 4824|      0|            to_chars(0, v, sizeof(v), (uintmax_t(*)(int *))0, p, s, "size_t");
 4825|      0|        }
 4826|      0|        return;
 4827|      0|    }
 4828|      0|}
 4829|       |void time_to_chars(time_t v, char *p, size_t s)
 4830|      0|{
 4831|      0|    char *__cil_tmp4;
 4832|       |
 4833|      0|    {
 4834|      0|        {
 4835|      0|            to_chars(v < 0L, (uintmax_t)v, sizeof(v), (uintmax_t(*)(int *))0, p, s,
 4836|      0|                     "time_t");
 4837|      0|        }
 4838|      0|        return;
 4839|      0|    }
 4840|      0|}
 4841|       |static uid_t uid_nobody;
 4842|       |static uintmax_t uid_substitute(int *negative)
 4843|      0|{
 4844|      0|    uid_t r;
 4845|      0|    int tmp;
 4846|      0|    char *__cil_tmp4;
 4847|       |
 4848|      0|    {
 4849|      0|        if (!uid_nobody) {
 4850|      0|            {
 4851|      0|                tmp = uname_to_uid("nobody", &uid_nobody);
 4852|      0|            }
 4853|      0|            if (!tmp) {
 4854|      0|                uid_nobody = (uid_t)-2;
 4855|      0|            }
 4856|      0|        }
 4857|      0|        r = uid_nobody;
 4858|      0|        *negative = r < 0U;
 4859|      0|        return ((uintmax_t)r);
 4860|      0|    }
 4861|      0|}
 4862|       |void uid_to_chars(uid_t v, char *p, size_t s)
 4863|      0|{
 4864|      0|    char *__cil_tmp4;
 4865|       |
 4866|      0|    {
 4867|      0|        {
 4868|      0|            to_chars(v < 0U, (uintmax_t)v, sizeof(v), &uid_substitute, p, s, "uid_t");
 4869|      0|        }
 4870|      0|        return;
 4871|      0|    }
 4872|      0|}
 4873|       |void uintmax_to_chars(uintmax_t v, char *p, size_t s)
 4874|      0|{
 4875|      0|    char *__cil_tmp4;
 4876|       |
 4877|      0|    {
 4878|      0|        {
 4879|      0|            to_chars(0, v, sizeof(v), (uintmax_t(*)(int *))0, p, s, "uintmax_t");
 4880|      0|        }
 4881|      0|        return;
 4882|      0|    }
 4883|      0|}
 4884|       |void string_to_chars(char *str, char *p, size_t s)
 4885|      0|{
 4886|       |
 4887|      0|    {
 4888|      0|        {
 4889|      0|            strncpy((char * /* __restrict  */)p, (char const * /* __restrict  */)str,
 4890|      0|                    s);
 4891|      0|            *(p + (s - 1UL)) = (char)0;
 4892|      0|        }
 4893|      0|        return;
 4894|      0|    }
 4895|      0|}
 4896|       |_Bool file_dumpable_p(struct tar_stat_info *st)
 4897|      0|{
 4898|      0|    int tmp;
 4899|       |
 4900|      0|    {
 4901|      0|        if (dev_null_output) {
 4902|      0|            tmp = 0;
 4903|      0|        }
 4904|      0|        else {
 4905|      0|            if (st->archive_file_size == 0L) {
 4906|      0|                if ((st->stat.st_mode &
 4907|      0|                        (unsigned int)((256 | (256 >> 3)) | ((256 >> 3) >> 3))) ==
 4908|      0|                        (unsigned int)((256 | (256 >> 3)) | ((256 >> 3) >> 3))) {
 4909|      0|                    tmp = 0;
 4910|      0|                }
 4911|      0|                else {
 4912|      0|                    tmp = 1;
 4913|      0|                }
 4914|      0|            }
 4915|      0|            else {
 4916|      0|                tmp = 1;
 4917|      0|            }
 4918|      0|        }
 4919|      0|        return ((_Bool)tmp);
 4920|      0|    }
 4921|      0|}
 4922|       |void write_eot(void)
 4923|      0|{
 4924|      0|    union block *pointer;
 4925|      0|    union block *tmp;
 4926|      0|    size_t tmp___0;
 4927|       |
 4928|      0|    {
 4929|      0|        {
 4930|      0|            tmp = find_next_block();
 4931|      0|            pointer = tmp;
 4932|      0|            memset((void *)(pointer->buffer), 0, (size_t)512);
 4933|      0|            set_next_block_after(pointer);
 4934|      0|            pointer = find_next_block();
 4935|      0|            tmp___0 = available_space_after(pointer);
 4936|      0|            memset((void *)(pointer->buffer), 0, tmp___0);
 4937|      0|            set_next_block_after(pointer);
 4938|      0|        }
 4939|      0|        return;
 4940|      0|    }
 4941|      0|}
 4942|       |static void tar_copy_str(char *dst, char const *src, size_t len)
 4943|      0|{
 4944|       |
 4945|      0|    {
 4946|      0|        {
 4947|      0|            *(dst + (len - 1UL)) = (char)0;
 4948|      0|            strncpy((char * /* __restrict  */)dst,
 4949|      0|                    (char const * /* __restrict  */)src, len);
 4950|      0|        }
 4951|      0|        return;
 4952|      0|    }
 4953|      0|}
 4954|       |union block *start_private_header(char const *name, size_t size)
 4955|      0|{
 4956|      0|    time_t t;
 4957|      0|    union block *header;
 4958|      0|    union block *tmp;
 4959|      0|    __uid_t tmp___0;
 4960|      0|    __gid_t tmp___1;
 4961|      0|    char *__cil_tmp8;
 4962|      0|    char *__cil_tmp9;
 4963|       |
 4964|      0|    {
 4965|      0|        {
 4966|      0|            tmp = find_next_block();
 4967|      0|            header = tmp;
 4968|      0|            memset((void *)(header->buffer), 0, sizeof(union block));
 4969|      0|            tar_copy_str(header->header.name, name, (size_t)100);
 4970|      0|            off_to_chars((off_t)size, header->header.size,
 4971|      0|                         sizeof(header->header.size));
 4972|      0|            time(&t);
 4973|      0|            time_to_chars(t, header->header.mtime, sizeof(header->header.mtime));
 4974|      0|            mode_to_chars((mode_t)((33152 | (256 >> 3)) | ((256 >> 3) >> 3)),
 4975|      0|                          header->header.mode, sizeof(header->header.mode));
 4976|      0|            tmp___0 = getuid();
 4977|      0|            uid_to_chars(tmp___0, header->header.uid, sizeof(header->header.uid));
 4978|      0|            tmp___1 = getgid();
 4979|      0|            gid_to_chars(tmp___1, header->header.gid, sizeof(header->header.gid));
 4980|      0|            major_to_chars(0, header->header.devmajor,
 4981|      0|                           sizeof(header->header.devmajor));
 4982|      0|            major_to_chars(0, header->header.devminor,
 4983|      0|                           sizeof(header->header.devminor));
 4984|      0|            strncpy((char * /* __restrict  */)(header->header.magic),
 4985|      0|                    (char const * /* __restrict  */) "ustar", (size_t)6);
 4986|      0|            strncpy((char * /* __restrict  */)(header->header.version),
 4987|      0|                    (char const * /* __restrict  */) "00", (size_t)2);
 4988|      0|        }
 4989|      0|        return (header);
 4990|      0|    }
 4991|      0|}
 4992|       |static union block *write_short_name(struct tar_stat_info *st)
 4993|      0|{
 4994|      0|    union block *header;
 4995|      0|    union block *tmp;
 4996|       |
 4997|      0|    {
 4998|      0|        {
 4999|      0|            tmp = find_next_block();
 5000|      0|            header = tmp;
 5001|      0|            memset((void *)(header->buffer), 0, sizeof(union block));
 5002|      0|            tar_copy_str(header->header.name, (char const *)st->file_name,
 5003|      0|                         (size_t)100);
 5004|      0|        }
 5005|      0|        return (header);
 5006|      0|    }
 5007|      0|}
 5008|       |static void write_gnu_long_link(struct tar_stat_info *st, char const *p,
 5009|       |                                char type)
 5010|      0|{
 5011|      0|    size_t size;
 5012|      0|    size_t tmp;
 5013|      0|    size_t bufsize;
 5014|      0|    union block *header;
 5015|      0|    char *__cil_tmp8;
 5016|      0|    char *__cil_tmp9;
 5017|       |
 5018|      0|    {
 5019|      0|        {
 5020|      0|            tmp = strlen(p);
 5021|      0|            size = tmp + 1UL;
 5022|      0|            header = start_private_header("././@LongLink", size);
 5023|      0|            strcpy((char * /* __restrict  */)(header->header.magic),
 5024|      0|                   (char const * /* __restrict  */) "ustar  ");
 5025|      0|            header->header.typeflag = type;
 5026|      0|            finish_header(st, header, (off_t)-1);
 5027|      0|            header = find_next_block();
 5028|      0|            bufsize = available_space_after(header);
 5029|      0|        }
 5030|      0|        {
 5031|      0|            while (1) {
 5032|      0|while_continue: /* CIL Label */
 5033|      0|                ;
 5034|      0|                if (!(bufsize < size)) {
 5035|      0|                    goto while_break;
 5036|      0|                }
 5037|      0|                {
 5038|      0|                    memcpy((void * /* __restrict  */)(header->buffer),
 5039|      0|                           (void const * /* __restrict  */)p, bufsize);
 5040|      0|                    p += bufsize;
 5041|      0|                    size -= bufsize;
 5042|      0|                    set_next_block_after(header + (bufsize - 1UL) / 512UL);
 5043|      0|                    header = find_next_block();
 5044|      0|                    bufsize = available_space_after(header);
 5045|      0|                }
 5046|      0|            }
 5047|      0|while_break: /* CIL Label */
 5048|      0|            ;
 5049|      0|        }
 5050|      0|        {
 5051|      0|            memcpy((void * /* __restrict  */)(header->buffer),
 5052|      0|                   (void const * /* __restrict  */)p, size);
 5053|      0|            memset((void *)(header->buffer + size), 0, bufsize - size);
 5054|      0|            set_next_block_after(header + (size - 1UL) / 512UL);
 5055|      0|        }
 5056|      0|        return;
 5057|      0|    }
 5058|      0|}
 5059|       |static size_t split_long_name(char const *name, size_t length)
 5060|      0|{
 5061|      0|    size_t i;
 5062|       |
 5063|      0|    {
 5064|      0|        if (length > 155UL) {
 5065|      0|            length = (size_t)157;
 5066|      0|        }
 5067|      0|        i = length - 1UL;
 5068|      0|        {
 5069|      0|            while (1) {
 5070|      0|while_continue: /* CIL Label */
 5071|      0|                ;
 5072|      0|                if (!(i > 0UL)) {
 5073|      0|                    goto while_break;
 5074|      0|                }
 5075|      0|                if ((int const) * (name + i) == 47) {
 5076|      0|                    goto while_break;
 5077|      0|                }
 5078|      0|                i--;
 5079|      0|            }
 5080|      0|while_break: /* CIL Label */
 5081|      0|            ;
 5082|      0|        }
 5083|      0|        return (i);
 5084|      0|    }
 5085|      0|}
 5086|       |static union block *write_ustar_long_name(char const *name)
 5087|      0|{
 5088|      0|    size_t length;
 5089|      0|    size_t tmp;
 5090|      0|    size_t i;
 5091|      0|    union block *header;
 5092|      0|    char *tmp___0;
 5093|      0|    char *tmp___1;
 5094|      0|    char *tmp___2;
 5095|      0|    char *tmp___3;
 5096|      0|    char *__cil_tmp10;
 5097|      0|    char *__cil_tmp11;
 5098|      0|    char *__cil_tmp12;
 5099|       |
 5100|      0|    {
 5101|      0|        {
 5102|      0|            tmp = strlen(name);
 5103|      0|            length = tmp;
 5104|      0|        }
 5105|      0|        if (length > 256UL) {
 5106|      0|            {
 5107|      0|                tmp___0 = quotearg_colon(name);
 5108|      0|                tmp___1 = gettext("%s: file name is too long (max %d); not dumped");
 5109|      0|                error(0, 0, (char const *)tmp___1, tmp___0, 256);
 5110|      0|                exit_status = 2;
 5111|      0|            }
 5112|      0|            return ((union block *)((void *)0));
 5113|      0|        }
 5114|      0|        {
 5115|      0|            i = split_long_name(name, length);
 5116|      0|        }
 5117|      0|        if (i == 0UL) {
 5118|      0|            {
 5119|      0|                tmp___2 = quotearg_colon(name);
 5120|      0|                tmp___3 =
 5121|      0|                    gettext("%s: file name is too long (cannot be split); not dumped");
 5122|      0|                error(0, 0, (char const *)tmp___3, tmp___2);
 5123|      0|                exit_status = 2;
 5124|      0|            }
 5125|      0|            return ((union block *)((void *)0));
 5126|      0|        }
 5127|      0|        else {
 5128|      0|            if ((length - i) - 1UL > 100UL) {
 5129|      0|                {
 5130|      0|                    tmp___2 = quotearg_colon(name);
 5131|      0|                    tmp___3 = gettext(
 5132|      0|                                  "%s: file name is too long (cannot be split); not dumped");
 5133|      0|                    error(0, 0, (char const *)tmp___3, tmp___2);
 5134|      0|                    exit_status = 2;
 5135|      0|                }
 5136|      0|                return ((union block *)((void *)0));
 5137|      0|            }
 5138|      0|        }
 5139|      0|        {
 5140|      0|            header = find_next_block();
 5141|      0|            memset((void *)(header->buffer), 0, sizeof(header->buffer));
 5142|      0|            memcpy((void * /* __restrict  */)(header->header.prefix),
 5143|      0|                   (void const * /* __restrict  */)name, i);
 5144|      0|            memcpy((void * /* __restrict  */)(header->header.name),
 5145|      0|                   (void const * /* __restrict  */)((name + i) + 1),
 5146|      0|                   (length - i) - 1UL);
 5147|      0|        }
 5148|      0|        return (header);
 5149|      0|    }
 5150|      0|}
 5151|       |static void write_long_link(struct tar_stat_info *st)
 5152|      0|{
 5153|      0|    char *tmp;
 5154|      0|    char *tmp___0;
 5155|      0|    char *__cil_tmp4;
 5156|      0|    char *__cil_tmp5;
 5157|       |
 5158|      0|    {
 5159|      0|        {
 5160|      0|            if ((unsigned int)archive_format == 4U) {
 5161|      0|                goto case_4;
 5162|      0|            }
 5163|      0|            if ((unsigned int)archive_format == 1U) {
 5164|      0|                goto case_1;
 5165|      0|            }
 5166|      0|            if ((unsigned int)archive_format == 3U) {
 5167|      0|                goto case_1;
 5168|      0|            }
 5169|      0|            if ((unsigned int)archive_format == 5U) {
 5170|      0|                goto case_1;
 5171|      0|            }
 5172|      0|            if ((unsigned int)archive_format == 2U) {
 5173|      0|                goto case_2;
 5174|      0|            }
 5175|      0|            if ((unsigned int)archive_format == 6U) {
 5176|      0|                goto case_2;
 5177|      0|            }
 5178|      0|            goto switch_default;
 5179|      0|case_4 : { /* CIL Label */
 5180|      0|                xheader_store("linkpath", (struct tar_stat_info const *)st, (void *)0);
 5181|      0|            }
 5182|      0|            goto switch_break;
 5183|      0|case_1:  /* CIL Label */
 5184|      0|case_3:  /* CIL Label */
 5185|      0|case_5 : { /* CIL Label */
 5186|      0|                tmp = quotearg_colon((char const *)st->link_name);
 5187|      0|                tmp___0 = gettext("%s: link name is too long; not dumped");
 5188|      0|                error(0, 0, (char const *)tmp___0, tmp);
 5189|      0|                exit_status = 2;
 5190|      0|            }
 5191|      0|            goto switch_break;
 5192|      0|case_2:  /* CIL Label */
 5193|      0|case_6 : { /* CIL Label */
 5194|      0|                write_gnu_long_link(st, (char const *)st->link_name, (char)'K');
 5195|      0|            }
 5196|      0|            goto switch_break;
 5197|      0|switch_default : { /* CIL Label */
 5198|      0|                abort();
 5199|      0|            }
 5200|      0|switch_break: /* CIL Label */
 5201|      0|            ;
 5202|      0|        }
 5203|      0|        return;
 5204|      0|    }
 5205|      0|}
 5206|       |static union block *write_long_name(struct tar_stat_info *st)
 5207|      0|{
 5208|      0|    char *tmp;
 5209|      0|    char *tmp___0;
 5210|      0|    size_t tmp___1;
 5211|      0|    union block *tmp___2;
 5212|      0|    union block *tmp___3;
 5213|      0|    char *__cil_tmp7;
 5214|      0|    char *__cil_tmp8;
 5215|       |
 5216|      0|    {
 5217|      0|        {
 5218|      0|            if ((unsigned int)archive_format == 4U) {
 5219|      0|                goto case_4;
 5220|      0|            }
 5221|      0|            if ((unsigned int)archive_format == 1U) {
 5222|      0|                goto case_1;
 5223|      0|            }
 5224|      0|            if ((unsigned int)archive_format == 3U) {
 5225|      0|                goto case_3;
 5226|      0|            }
 5227|      0|            if ((unsigned int)archive_format == 5U) {
 5228|      0|                goto case_3;
 5229|      0|            }
 5230|      0|            if ((unsigned int)archive_format == 2U) {
 5231|      0|                goto case_2;
 5232|      0|            }
 5233|      0|            if ((unsigned int)archive_format == 6U) {
 5234|      0|                goto case_2;
 5235|      0|            }
 5236|      0|            goto switch_default;
 5237|      0|case_4 : { /* CIL Label */
 5238|      0|                xheader_store("path", (struct tar_stat_info const *)st, (void *)0);
 5239|      0|            }
 5240|      0|            goto switch_break;
 5241|      0|case_1 : { /* CIL Label */
 5242|      0|                tmp___1 = strlen((char const *)st->file_name);
 5243|      0|            }
 5244|      0|            if (tmp___1 > 99UL) {
 5245|      0|                {
 5246|      0|                    tmp = quotearg_colon((char const *)st->file_name);
 5247|      0|                    tmp___0 = gettext("%s: file name is too long (max %d); not dumped");
 5248|      0|                    error(0, 0, (char const *)tmp___0, tmp, 99);
 5249|      0|                    exit_status = 2;
 5250|      0|                }
 5251|      0|                return ((union block *)((void *)0));
 5252|      0|            }
 5253|      0|            goto switch_break;
 5254|      0|case_3:  /* CIL Label */
 5255|      0|case_5 : { /* CIL Label */
 5256|      0|                tmp___2 = write_ustar_long_name((char const *)st->file_name);
 5257|      0|            }
 5258|      0|            return (tmp___2);
 5259|      0|case_2:  /* CIL Label */
 5260|      0|case_6 : { /* CIL Label */
 5261|      0|                write_gnu_long_link(st, (char const *)st->file_name, (char)'L');
 5262|      0|            }
 5263|      0|            goto switch_break;
 5264|      0|switch_default : { /* CIL Label */
 5265|      0|                abort();
 5266|      0|            }
 5267|      0|switch_break: /* CIL Label */
 5268|      0|            ;
 5269|      0|        }
 5270|      0|        {
 5271|      0|            tmp___3 = write_short_name(st);
 5272|      0|        }
 5273|      0|        return (tmp___3);
 5274|      0|    }
 5275|      0|}
 5276|       |static union block *write_extended(struct tar_stat_info *st,
 5277|       |                                       union block *old_header)
 5278|      0|{
 5279|      0|    union block *header;
 5280|      0|    union block hp;
 5281|      0|    char *p;
 5282|      0|    void *__cil_tmp6;
 5283|      0|    void *__cil_tmp7;
 5284|      0|    void *__cil_tmp8;
 5285|      0|    void *__cil_tmp9;
 5286|      0|    void *__cil_tmp10;
 5287|      0|    void *__cil_tmp11;
 5288|      0|    void *__cil_tmp12;
 5289|      0|    void *__cil_tmp13;
 5290|      0|    void *__cil_tmp14;
 5291|      0|    void *__cil_tmp15;
 5292|      0|    void *__cil_tmp16;
 5293|      0|    void *__cil_tmp17;
 5294|      0|    void *__cil_tmp18;
 5295|      0|    void *__cil_tmp19;
 5296|      0|    void *__cil_tmp20;
 5297|      0|    void *__cil_tmp21;
 5298|      0|    void *__cil_tmp22;
 5299|      0|    void *__cil_tmp23;
 5300|      0|    void *__cil_tmp24;
 5301|      0|    void *__cil_tmp25;
 5302|      0|    void *__cil_tmp26;
 5303|      0|    void *__cil_tmp27;
 5304|      0|    void *__cil_tmp28;
 5305|      0|    void *__cil_tmp29;
 5306|      0|    void *__cil_tmp30;
 5307|      0|    void *__cil_tmp31;
 5308|      0|    void *__cil_tmp32;
 5309|      0|    void *__cil_tmp33;
 5310|      0|    void *__cil_tmp34;
 5311|      0|    void *__cil_tmp35;
 5312|      0|    void *__cil_tmp36;
 5313|      0|    void *__cil_tmp37;
 5314|      0|    void *__cil_tmp38;
 5315|      0|    void *__cil_tmp39;
 5316|      0|    void *__cil_tmp40;
 5317|      0|    void *__cil_tmp41;
 5318|      0|    void *__cil_tmp42;
 5319|      0|    void *__cil_tmp43;
 5320|      0|    void *__cil_tmp44;
 5321|      0|    int __cil_tmp45;
 5322|      0|    void *__cil_tmp46;
 5323|      0|    void *__cil_tmp47;
 5324|      0|    void *__cil_tmp48;
 5325|      0|    void *__cil_tmp49;
 5326|      0|    int __cil_tmp50;
 5327|      0|    void *__cil_tmp51;
 5328|      0|    void *__cil_tmp52;
 5329|      0|    void *__cil_tmp53;
 5330|      0|    void *__cil_tmp54;
 5331|      0|    void *__cil_tmp55;
 5332|      0|    void *__cil_tmp56;
 5333|      0|    int __cil_tmp57;
 5334|      0|    void *__cil_tmp58;
 5335|      0|    void *__cil_tmp59;
 5336|      0|    void *__cil_tmp60;
 5337|      0|    void *__cil_tmp61;
 5338|      0|    void *__cil_tmp62;
 5339|      0|    void *__cil_tmp63;
 5340|      0|    void *__cil_tmp64;
 5341|      0|    void *__cil_tmp65;
 5342|      0|    void *__cil_tmp66;
 5343|      0|    int __cil_tmp67;
 5344|      0|    void *__cil_tmp68;
 5345|      0|    void *__cil_tmp69;
 5346|       |
 5347|      0|    {
 5348|      0|        if (extended_header.buffer) {
 5349|      0|            return (old_header);
 5350|      0|        }
 5351|      0|        else {
 5352|      0|            if ((unsigned long)extended_header.stk == (unsigned long)((void *)0)) {
 5353|      0|                return (old_header);
 5354|      0|            }
 5355|      0|        }
 5356|      0|        {
 5357|      0|            xheader_finish(&extended_header);
 5358|      0|            memcpy((void * /* __restrict  */)(hp.buffer),
 5359|      0|                   (void const * /* __restrict  */)old_header, sizeof(hp));
 5360|      0|            p = xheader_xhdr_name(st);
 5361|      0|            xheader_write((char)'x', p, &extended_header);
 5362|      0|            free((void *)p);
 5363|      0|            header = find_next_block();
 5364|      0|            memcpy((void * /* __restrict  */)header,
 5365|      0|                   (void const * /* __restrict  */)(&hp.buffer), sizeof(hp.buffer));
 5366|      0|        }
 5367|      0|        return (header);
 5368|      0|    }
 5369|      0|}
 5370|       |static union block *write_header_name(struct tar_stat_info *st)
 5371|      0|{
 5372|      0|    union block *tmp;
 5373|      0|    union block *tmp___0;
 5374|      0|    union block *tmp___1;
 5375|      0|    size_t tmp___2;
 5376|      0|    _Bool tmp___3;
 5377|      0|    char *__cil_tmp7;
 5378|       |
 5379|      0|    {
 5380|      0|        if ((unsigned int)archive_format == 4U) {
 5381|      0|            {
 5382|      0|                tmp___3 = string_ascii_p((char const *)st->file_name);
 5383|      0|            }
 5384|      0|            if (tmp___3) {
 5385|      0|                goto _L;
 5386|      0|            }
 5387|      0|            else {
 5388|      0|                {
 5389|      0|                    xheader_store("path", (struct tar_stat_info const *)st, (void *)0);
 5390|      0|                    tmp = write_short_name(st);
 5391|      0|                }
 5392|      0|                return (tmp);
 5393|      0|            }
 5394|      0|        }
 5395|      0|        else {
 5396|      0|_L : {
 5397|      0|                tmp___2 = strlen((char const *)st->file_name);
 5398|      0|            }
 5399|      0|            if (100UL < tmp___2) {
 5400|      0|                {
 5401|      0|                    tmp___0 = write_long_name(st);
 5402|      0|                }
 5403|      0|                return (tmp___0);
 5404|      0|            }
 5405|      0|            else {
 5406|      0|                {
 5407|      0|                    tmp___1 = write_short_name(st);
 5408|      0|                }
 5409|      0|                return (tmp___1);
 5410|      0|            }
 5411|      0|        }
 5412|      0|    }
 5413|      0|}
 5414|       |union block *start_header(struct tar_stat_info *st)
 5415|      0|{
 5416|      0|    union block *header;
 5417|      0|    mode_t tmp;
 5418|      0|    size_t tmp___0;
 5419|      0|    _Bool tmp___1;
 5420|      0|    size_t tmp___2;
 5421|      0|    _Bool tmp___3;
 5422|      0|    int tmp___4;
 5423|      0|    char *__cil_tmp9;
 5424|      0|    char *__cil_tmp10;
 5425|      0|    char *__cil_tmp11;
 5426|      0|    char *__cil_tmp12;
 5427|      0|    char *__cil_tmp13;
 5428|      0|    char *__cil_tmp14;
 5429|      0|    char *__cil_tmp15;
 5430|      0|    char *__cil_tmp16;
 5431|      0|    char *__cil_tmp17;
 5432|      0|    char *__cil_tmp18;
 5433|      0|    char *__cil_tmp19;
 5434|      0|    char *__cil_tmp20;
 5435|      0|    char *__cil_tmp21;
 5436|      0|    char *__cil_tmp22;
 5437|       |
 5438|      0|    {
 5439|      0|        {
 5440|      0|            header = write_header_name(st);
 5441|      0|        }
 5442|      0|        if (!header) {
 5443|      0|            return ((union block *)((void *)0));
 5444|      0|        }
 5445|      0|        if (owner_option != 4294967295U) {
 5446|      0|            st->stat.st_uid = owner_option;
 5447|      0|        }
 5448|      0|        if (group_option != 4294967295U) {
 5449|      0|            st->stat.st_gid = group_option;
 5450|      0|        }
 5451|      0|        if (mode_option) {
 5452|      0|            {
 5453|      0|                tmp = mode_adjust(st->stat.st_mode,
 5454|      0|                                  (struct mode_change const *)mode_option);
 5455|      0|                st->stat.st_mode =
 5456|      0|                    (st->stat.st_mode &
 5457|      0|                     (unsigned int)(~(3584 |
 5458|      0|                                      (((64 | (64 >> 3)) | ((64 >> 3) >> 3)) |
 5459|      0|                                       (((128 | (128 >> 3)) | ((128 >> 3) >> 3)) |
 5460|      0|                                        ((256 | (256 >> 3)) | ((256 >> 3) >> 3))))))) |
 5461|      0|                    tmp;
 5462|      0|            }
 5463|      0|        }
 5464|      0|        if ((unsigned int)archive_format == 1U) {
 5465|      0|            {
 5466|      0|                mode_to_chars(
 5467|      0|                    st->stat.st_mode &
 5468|      0|                    (unsigned int)(3584 |
 5469|      0|                                   (((64 | (64 >> 3)) | ((64 >> 3) >> 3)) |
 5470|      0|                                    (((128 | (128 >> 3)) | ((128 >> 3) >> 3)) |
 5471|      0|                                     ((256 | (256 >> 3)) | ((256 >> 3) >> 3))))),
 5472|      0|                    header->header.mode, sizeof(header->header.mode));
 5473|      0|            }
 5474|      0|        }
 5475|      0|        else {
 5476|      0|            if ((unsigned int)archive_format == 3U) {
 5477|      0|                {
 5478|      0|                    mode_to_chars(
 5479|      0|                        st->stat.st_mode &
 5480|      0|                        (unsigned int)(3584 |
 5481|      0|                                       (((64 | (64 >> 3)) | ((64 >> 3) >> 3)) |
 5482|      0|                                        (((128 | (128 >> 3)) | ((128 >> 3) >> 3)) |
 5483|      0|                                         ((256 | (256 >> 3)) | ((256 >> 3) >> 3))))),
 5484|      0|                        header->header.mode, sizeof(header->header.mode));
 5485|      0|                }
 5486|      0|            }
 5487|      0|            else {
 5488|      0|                {
 5489|      0|                    mode_to_chars(st->stat.st_mode, header->header.mode,
 5490|      0|                                  sizeof(header->header.mode));
 5491|      0|                }
 5492|      0|            }
 5493|      0|        }
 5494|      0|        if (st->stat.st_uid > 2097151U) {
 5495|      0|            if ((unsigned int)archive_format == 4U) {
 5496|      0|                {
 5497|      0|                    xheader_store("uid", (struct tar_stat_info const *)st, (void *)0);
 5498|      0|                }
 5499|      0|            }
 5500|      0|            else {
 5501|      0|                {
 5502|      0|                    uid_to_chars(st->stat.st_uid, header->header.uid,
 5503|      0|                                 sizeof(header->header.uid));
 5504|      0|                }
 5505|      0|            }
 5506|      0|        }
 5507|      0|        else {
 5508|      0|            {
 5509|      0|                uid_to_chars(st->stat.st_uid, header->header.uid,
 5510|      0|                             sizeof(header->header.uid));
 5511|      0|            }
 5512|      0|        }
 5513|      0|        if (st->stat.st_gid > 2097151U) {
 5514|      0|            if ((unsigned int)archive_format == 4U) {
 5515|      0|                {
 5516|      0|                    xheader_store("gid", (struct tar_stat_info const *)st, (void *)0);
 5517|      0|                }
 5518|      0|            }
 5519|      0|            else {
 5520|      0|                {
 5521|      0|                    gid_to_chars(st->stat.st_gid, header->header.gid,
 5522|      0|                                 sizeof(header->header.gid));
 5523|      0|                }
 5524|      0|            }
 5525|      0|        }
 5526|      0|        else {
 5527|      0|            {
 5528|      0|                gid_to_chars(st->stat.st_gid, header->header.gid,
 5529|      0|                             sizeof(header->header.gid));
 5530|      0|            }
 5531|      0|        }
 5532|      0|        if (st->stat.st_size > 2147483647L) {
 5533|      0|            if ((unsigned int)archive_format == 4U) {
 5534|      0|                {
 5535|      0|                    xheader_store("size", (struct tar_stat_info const *)st, (void *)0);
 5536|      0|                }
 5537|      0|            }
 5538|      0|            else {
 5539|      0|                {
 5540|      0|                    off_to_chars(st->stat.st_size, header->header.size,
 5541|      0|                                 sizeof(header->header.size));
 5542|      0|                }
 5543|      0|            }
 5544|      0|        }
 5545|      0|        else {
 5546|      0|            {
 5547|      0|                off_to_chars(st->stat.st_size, header->header.size,
 5548|      0|                             sizeof(header->header.size));
 5549|      0|            }
 5550|      0|        }
 5551|      0|        {
 5552|      0|            time_to_chars(st->stat.st_mtim.tv_sec, header->header.mtime,
 5553|      0|                          sizeof(header->header.mtime));
 5554|      0|        }
 5555|      0|        if ((st->stat.st_mode & 61440U) == 8192U) {
 5556|      0|            goto _L___3;
 5557|      0|        }
 5558|      0|        else {
 5559|      0|            if ((st->stat.st_mode & 61440U) == 24576U) {
 5560|      0|_L___3 : { /* CIL Label */
 5561|      0|                    st->devmajor = gnu_dev_major((unsigned long long)st->stat.st_rdev);
 5562|      0|                    st->devminor = gnu_dev_minor((unsigned long long)st->stat.st_rdev);
 5563|      0|                }
 5564|      0|                if (st->devmajor > 2097151U) {
 5565|      0|                    if ((unsigned int)archive_format == 4U) {
 5566|      0|                        {
 5567|      0|                            xheader_store("devmajor", (struct tar_stat_info const *)st,
 5568|      0|                                          (void *)0);
 5569|      0|                        }
 5570|      0|                    }
 5571|      0|                    else {
 5572|      0|                        {
 5573|      0|                            major_to_chars((int)st->devmajor, header->header.devmajor,
 5574|      0|                                           sizeof(header->header.devmajor));
 5575|      0|                        }
 5576|      0|                    }
 5577|      0|                }
 5578|      0|                else {
 5579|      0|                    {
 5580|      0|                        major_to_chars((int)st->devmajor, header->header.devmajor,
 5581|      0|                                       sizeof(header->header.devmajor));
 5582|      0|                    }
 5583|      0|                }
 5584|      0|                if (st->devminor > 2097151U) {
 5585|      0|                    if ((unsigned int)archive_format == 4U) {
 5586|      0|                        {
 5587|      0|                            xheader_store("devminor", (struct tar_stat_info const *)st,
 5588|      0|                                          (void *)0);
 5589|      0|                        }
 5590|      0|                    }
 5591|      0|                    else {
 5592|      0|                        {
 5593|      0|                            major_to_chars((int)st->devminor, header->header.devminor,
 5594|      0|                                           sizeof(header->header.devminor));
 5595|      0|                        }
 5596|      0|                    }
 5597|      0|                }
 5598|      0|                else {
 5599|      0|                    {
 5600|      0|                        major_to_chars((int)st->devminor, header->header.devminor,
 5601|      0|                                       sizeof(header->header.devminor));
 5602|      0|                    }
 5603|      0|                }
 5604|      0|            }
 5605|      0|            else {
 5606|      0|                {
 5607|      0|                    major_to_chars(0, header->header.devmajor,
 5608|      0|                                   sizeof(header->header.devmajor));
 5609|      0|                    minor_to_chars(0, header->header.devminor,
 5610|      0|                                   sizeof(header->header.devminor));
 5611|      0|                }
 5612|      0|            }
 5613|      0|        }
 5614|      0|        if ((unsigned int)archive_format == 4U) {
 5615|      0|            {
 5616|      0|                xheader_store("atime", (struct tar_stat_info const *)st, (void *)0);
 5617|      0|                xheader_store("ctime", (struct tar_stat_info const *)st, (void *)0);
 5618|      0|            }
 5619|      0|        }
 5620|      0|        else {
 5621|      0|            if (incremental_option) {
 5622|      0|                if ((unsigned int)archive_format == 2U) {
 5623|      0|                    {
 5624|      0|                        time_to_chars(st->stat.st_atim.tv_sec, header->oldgnu_header.atime,
 5625|      0|                                      sizeof(header->oldgnu_header.atime));
 5626|      0|                        time_to_chars(st->stat.st_ctim.tv_sec, header->oldgnu_header.ctime,
 5627|      0|                                      sizeof(header->oldgnu_header.ctime));
 5628|      0|                    }
 5629|      0|                }
 5630|      0|                else {
 5631|      0|                    if ((unsigned int)archive_format == 6U) {
 5632|      0|                        {
 5633|      0|                            time_to_chars(st->stat.st_atim.tv_sec,
 5634|      0|                                          header->oldgnu_header.atime,
 5635|      0|                                          sizeof(header->oldgnu_header.atime));
 5636|      0|                            time_to_chars(st->stat.st_ctim.tv_sec,
 5637|      0|                                          header->oldgnu_header.ctime,
 5638|      0|                                          sizeof(header->oldgnu_header.ctime));
 5639|      0|                        }
 5640|      0|                    }
 5641|      0|                }
 5642|      0|            }
 5643|      0|        }
 5644|      0|        if ((unsigned int)archive_format == 1U) {
 5645|      0|            tmp___4 = '\000';
 5646|      0|        }
 5647|      0|        else {
 5648|      0|            tmp___4 = '0';
 5649|      0|        }
 5650|      0|        header->header.typeflag = (char)tmp___4;
 5651|      0|        {
 5652|      0|            if ((unsigned int)archive_format == 1U) {
 5653|      0|                goto case_1;
 5654|      0|            }
 5655|      0|            if ((unsigned int)archive_format == 2U) {
 5656|      0|                goto case_2;
 5657|      0|            }
 5658|      0|            if ((unsigned int)archive_format == 6U) {
 5659|      0|                goto case_2;
 5660|      0|            }
 5661|      0|            if ((unsigned int)archive_format == 4U) {
 5662|      0|                goto case_4;
 5663|      0|            }
 5664|      0|            if ((unsigned int)archive_format == 3U) {
 5665|      0|                goto case_4;
 5666|      0|            }
 5667|      0|            goto switch_default;
 5668|      0|case_1: /* CIL Label */
 5669|      0|            goto switch_break;
 5670|      0|case_2:  /* CIL Label */
 5671|      0|case_6 : { /* CIL Label */
 5672|      0|                strcpy((char * /* __restrict  */)(header->header.magic),
 5673|      0|                       (char const * /* __restrict  */) "ustar  ");
 5674|      0|            }
 5675|      0|            goto switch_break;
 5676|      0|case_4:  /* CIL Label */
 5677|      0|case_3 : { /* CIL Label */
 5678|      0|                strncpy((char * /* __restrict  */)(header->header.magic),
 5679|      0|                        (char const * /* __restrict  */) "ustar", (size_t)6);
 5680|      0|                strncpy((char * /* __restrict  */)(header->header.version),
 5681|      0|                        (char const * /* __restrict  */) "00", (size_t)2);
 5682|      0|            }
 5683|      0|            goto switch_break;
 5684|      0|switch_default : { /* CIL Label */
 5685|      0|                abort();
 5686|      0|            }
 5687|      0|switch_break: /* CIL Label */
 5688|      0|            ;
 5689|      0|        }
 5690|      0|        if (!((unsigned int)archive_format == 1U)) {
 5691|      0|            if (!numeric_owner_option) {
 5692|      0|                {
 5693|      0|                    uid_to_uname(st->stat.st_uid, &st->uname);
 5694|      0|                    gid_to_gname(st->stat.st_gid, &st->gname);
 5695|      0|                }
 5696|      0|                if ((unsigned int)archive_format == 4U) {
 5697|      0|                    {
 5698|      0|                        tmp___0 = strlen((char const *)st->uname);
 5699|      0|                    }
 5700|      0|                    if (tmp___0 > 32UL) {
 5701|      0|                        {
 5702|      0|                            xheader_store("uname", (struct tar_stat_info const *)st,
 5703|      0|                                          (void *)0);
 5704|      0|                        }
 5705|      0|                    }
 5706|      0|                    else {
 5707|      0|                        {
 5708|      0|                            tmp___1 = string_ascii_p((char const *)st->uname);
 5709|      0|                        }
 5710|      0|                        if (tmp___1) {
 5711|      0|                            {
 5712|      0|                                string_to_chars(st->uname, header->header.uname,
 5713|      0|                                                sizeof(header->header.uname));
 5714|      0|                            }
 5715|      0|                        }
 5716|      0|                        else {
 5717|      0|                            {
 5718|      0|                                xheader_store("uname", (struct tar_stat_info const *)st,
 5719|      0|                                              (void *)0);
 5720|      0|                            }
 5721|      0|                        }
 5722|      0|                    }
 5723|      0|                }
 5724|      0|                else {
 5725|      0|                    {
 5726|      0|                        string_to_chars(st->uname, header->header.uname,
 5727|      0|                                        sizeof(header->header.uname));
 5728|      0|                    }
 5729|      0|                }
 5730|      0|                if ((unsigned int)archive_format == 4U) {
 5731|      0|                    {
 5732|      0|                        tmp___2 = strlen((char const *)st->gname);
 5733|      0|                    }
 5734|      0|                    if (tmp___2 > 32UL) {
 5735|      0|                        {
 5736|      0|                            xheader_store("gname", (struct tar_stat_info const *)st,
 5737|      0|                                          (void *)0);
 5738|      0|                        }
 5739|      0|                    }
 5740|      0|                    else {
 5741|      0|                        {
 5742|      0|                            tmp___3 = string_ascii_p((char const *)st->gname);
 5743|      0|                        }
 5744|      0|                        if (tmp___3) {
 5745|      0|                            {
 5746|      0|                                string_to_chars(st->gname, header->header.gname,
 5747|      0|                                                sizeof(header->header.gname));
 5748|      0|                            }
 5749|      0|                        }
 5750|      0|                        else {
 5751|      0|                            {
 5752|      0|                                xheader_store("gname", (struct tar_stat_info const *)st,
 5753|      0|                                              (void *)0);
 5754|      0|                            }
 5755|      0|                        }
 5756|      0|                    }
 5757|      0|                }
 5758|      0|                else {
 5759|      0|                    {
 5760|      0|                        string_to_chars(st->gname, header->header.gname,
 5761|      0|                                        sizeof(header->header.gname));
 5762|      0|                    }
 5763|      0|                }
 5764|      0|            }
 5765|      0|        }
 5766|      0|        return (header);
 5767|      0|    }
 5768|      0|}
 5769|       |void simple_finish_header(union block *header)
 5770|      0|{
 5771|      0|    size_t i;
 5772|      0|    int sum;
 5773|      0|    char *p;
 5774|      0|    char *tmp;
 5775|      0|    size_t tmp___0;
 5776|      0|    char *__cil_tmp7;
 5777|       |
 5778|      0|    {
 5779|      0|        {
 5780|      0|            memcpy((void * /* __restrict  */)(header->header.chksum),
 5781|      0|                   (void const * /* __restrict  */) "        ",
 5782|      0|                   sizeof(header->header.chksum));
 5783|      0|            sum = 0;
 5784|      0|            p = header->buffer;
 5785|      0|            i = sizeof(*header);
 5786|      0|        }
 5787|      0|        {
 5788|      0|            while (1) {
 5789|      0|while_continue: /* CIL Label */
 5790|      0|                ;
 5791|      0|                tmp___0 = i;
 5792|      0|                i--;
 5793|      0|                if (!(tmp___0 != 0UL)) {
 5794|      0|                    goto while_break;
 5795|      0|                }
 5796|      0|                tmp = p;
 5797|      0|                p++;
 5798|      0|                sum += 255 & (int)*tmp;
 5799|      0|            }
 5800|      0|while_break: /* CIL Label */
 5801|      0|            ;
 5802|      0|        }
 5803|      0|        {
 5804|      0|            uintmax_to_chars((uintmax_t)sum, header->header.chksum, (size_t)7);
 5805|      0|            set_next_block_after(header);
 5806|      0|        }
 5807|      0|        return;
 5808|      0|    }
 5809|      0|}
 5810|       |void finish_header(struct tar_stat_info *st, union block *header,
 5811|       |                   off_t block_ordinal)
 5812|      0|{
 5813|       |
 5814|      0|    {
 5815|      0|        if (verbose_option) {
 5816|      0|            if ((int)header->header.typeflag != 75) {
 5817|      0|                if ((int)header->header.typeflag != 76) {
 5818|      0|                    if ((int)header->header.typeflag != 120) {
 5819|      0|                        if ((int)header->header.typeflag != 103) {
 5820|      0|                            {
 5821|      0|                                current_header = header;
 5822|      0|                                current_format = archive_format;
 5823|      0|                                print_header(st, block_ordinal);
 5824|      0|                            }
 5825|      0|                        }
 5826|      0|                    }
 5827|      0|                }
 5828|      0|            }
 5829|      0|        }
 5830|      0|        {
 5831|      0|            header = write_extended(st, header);
 5832|      0|            simple_finish_header(header);
 5833|      0|        }
 5834|      0|        return;
 5835|      0|    }
 5836|      0|}
 5837|       |void pad_archive(off_t size_left)
 5838|      0|{
 5839|      0|    union block *blk;
 5840|       |
 5841|      0|    {
 5842|      0|        {
 5843|      0|            while (1) {
 5844|      0|while_continue: /* CIL Label */
 5845|      0|                ;
 5846|      0|                if (!(size_left > 0L)) {
 5847|      0|                    goto while_break;
 5848|      0|                }
 5849|      0|                {
 5850|      0|                    save_sizeleft = size_left;
 5851|      0|                    blk = find_next_block();
 5852|      0|                    memset((void *)(blk->buffer), 0, (size_t)512);
 5853|      0|                    set_next_block_after(blk);
 5854|      0|                    size_left -= 512L;
 5855|      0|                }
 5856|      0|            }
 5857|      0|while_break: /* CIL Label */
 5858|      0|            ;
 5859|      0|        }
 5860|      0|        return;
 5861|      0|    }
 5862|      0|}
 5863|       |static enum dump_status dump_regular_file(int fd, struct tar_stat_info *st)
 5864|      0|{
 5865|      0|    off_t size_left;
 5866|      0|    off_t block_ordinal;
 5867|      0|    union block *blk;
 5868|      0|    size_t bufsize;
 5869|      0|    size_t count;
 5870|      0|    size_t tmp;
 5871|      0|    char buf[(((sizeof(uintmax_t) * 8UL) * 302UL) / 1000UL + 1UL) + 1UL];
 5872|      0|    char *tmp___0;
 5873|      0|    char *tmp___1;
 5874|      0|    char *tmp___2;
 5875|      0|    void *__cil_tmp13;
 5876|       |
 5877|      0|    {
 5878|      0|        {
 5879|      0|            size_left = st->stat.st_size;
 5880|      0|            block_ordinal = current_block_ordinal();
 5881|      0|            blk = start_header(st);
 5882|      0|        }
 5883|      0|        if (!blk) {
 5884|      0|            return ((enum dump_status)2);
 5885|      0|        }
 5886|      0|        if ((unsigned int)archive_format != 1U) {
 5887|      0|        }
 5888|      0|        {
 5889|      0|            finish_header(st, blk, block_ordinal);
 5890|      0|        }
 5891|      0|        {
 5892|      0|            while (1) {
 5893|      0|while_continue: /* CIL Label */
 5894|      0|                ;
 5895|      0|                if (!(size_left > 0L)) {
 5896|      0|                    goto while_break;
 5897|      0|                }
 5898|      0|                if (multi_volume_option) {
 5899|      0|                    {
 5900|      0|                        assign_string(&save_name, (char const *)st->file_name);
 5901|      0|                        save_sizeleft = size_left;
 5902|      0|                        save_totsize = st->stat.st_size;
 5903|      0|                    }
 5904|      0|                }
 5905|      0|                {
 5906|      0|                    blk = find_next_block();
 5907|      0|                    bufsize = available_space_after(blk);
 5908|      0|                }
 5909|      0|                if ((size_t)size_left < bufsize) {
 5910|      0|                    bufsize = (size_t)size_left;
 5911|      0|                    count = bufsize % 512UL;
 5912|      0|                    if (count) {
 5913|      0|                        {
 5914|      0|                            memset((void *)(blk->buffer + size_left), 0, 512UL - count);
 5915|      0|                        }
 5916|      0|                    }
 5917|      0|                }
 5918|      0|                if (fd < 0) {
 5919|      0|                    count = bufsize;
 5920|      0|                }
 5921|      0|                else {
 5922|      0|                    {
 5923|      0|                        tmp = safe_read(fd, (void *)(blk->buffer), bufsize);
 5924|      0|                        count = tmp;
 5925|      0|                    }
 5926|      0|                }
 5927|      0|                if (count == 0xffffffffffffffffUL) {
 5928|      0|                    {
 5929|      0|                        read_diag_details((char const *)st->orig_file_name,
 5930|      0|                                          st->stat.st_size - size_left, bufsize);
 5931|      0|                        pad_archive(size_left);
 5932|      0|                    }
 5933|      0|                    return ((enum dump_status)1);
 5934|      0|                }
 5935|      0|                {
 5936|      0|                    size_left = (off_t)((size_t)size_left - count);
 5937|      0|                    set_next_block_after(blk + (bufsize - 1UL) / 512UL);
 5938|      0|                }
 5939|      0|                if (count != bufsize) {
 5940|      0|                    {
 5941|      0|                        memset((void *)(blk->buffer + count), 0, bufsize - count);
 5942|      0|                        tmp___0 = stringify_uintmax_t_backwards(
 5943|      0|                                      (uintmax_t)size_left,
 5944|      0|                                      buf + ((((sizeof(uintmax_t) * 8UL) * 302UL) / 1000UL + 1UL) +
 5945|      0|                                             1UL));
 5946|      0|                        tmp___1 = quotearg_colon((char const *)st->orig_file_name);
 5947|      0|                        tmp___2 =
 5948|      0|                            ngettext("%s: File shrank by %s byte; padding with zeros",
 5949|      0|                                     "%s: File shrank by %s bytes; padding with zeros",
 5950|      0|                                     (unsigned long)size_left);
 5951|      0|                        error(0, 0, (char const *)tmp___2, tmp___1, tmp___0);
 5952|      0|                    }
 5953|      0|                    if (!ignore_failed_read_option) {
 5954|      0|                        exit_status = 2;
 5955|      0|                    }
 5956|      0|                    {
 5957|      0|                        pad_archive(size_left);
 5958|      0|                    }
 5959|      0|                    return ((enum dump_status)1);
 5960|      0|                }
 5961|      0|            }
 5962|      0|while_break: /* CIL Label */
 5963|      0|            ;
 5964|      0|        }
 5965|      0|        return ((enum dump_status)0);
 5966|      0|    }
 5967|      0|}
 5968|       |static void dump_regular_finish(int fd, struct tar_stat_info *st,
 5969|       |                                time_t original_ctime)
 5970|      0|{
 5971|      0|    struct stat final_stat;
 5972|      0|    char *tmp;
 5973|      0|    char *tmp___0;
 5974|      0|    int tmp___1;
 5975|      0|    int tmp___2;
 5976|      0|    int tmp___3;
 5977|      0|    void *__cil_tmp10;
 5978|      0|    char *__cil_tmp11;
 5979|       |
 5980|      0|    {
 5981|      0|        if (fd >= 0) {
 5982|      0|            {
 5983|      0|                tmp___1 = fstat(fd, &final_stat);
 5984|      0|            }
 5985|      0|            if (tmp___1 != 0) {
 5986|      0|                {
 5987|      0|                    stat_diag((char const *)st->orig_file_name);
 5988|      0|                }
 5989|      0|            }
 5990|      0|            else {
 5991|      0|                if (final_stat.st_ctim.tv_sec != original_ctime) {
 5992|      0|                    {
 5993|      0|                        tmp = quotearg_colon((char const *)st->orig_file_name);
 5994|      0|                        tmp___0 = gettext("%s: file changed as we read it");
 5995|      0|                        error(0, 0, (char const *)tmp___0, tmp);
 5996|      0|                    }
 5997|      0|                }
 5998|      0|            }
 5999|      0|            {
 6000|      0|                tmp___2 = close(fd);
 6001|      0|            }
 6002|      0|            if (tmp___2 != 0) {
 6003|      0|                {
 6004|      0|                    close_diag((char const *)st->orig_file_name);
 6005|      0|                }
 6006|      0|            }
 6007|      0|        }
 6008|      0|        if (remove_files_option) {
 6009|      0|            {
 6010|      0|                tmp___3 = unlink((char const *)st->orig_file_name);
 6011|      0|            }
 6012|      0|            if (tmp___3 == -1) {
 6013|      0|                {
 6014|      0|                    unlink_error((char const *)st->orig_file_name);
 6015|      0|                }
 6016|      0|            }
 6017|      0|        }
 6018|      0|        return;
 6019|      0|    }
 6020|      0|}
 6021|       |static void dump_dir0(char *directory, struct tar_stat_info *st, int top_level,
 6022|       |                      dev_t parent_device)
 6023|      0|{
 6024|      0|    dev_t our_device;
 6025|      0|    union block *blk;
 6026|      0|    off_t block_ordinal;
 6027|      0|    off_t tmp;
 6028|      0|    off_t size_left;
 6029|      0|    off_t totsize;
 6030|      0|    size_t bufsize;
 6031|      0|    ssize_t count;
 6032|      0|    char const *buffer___2;
 6033|      0|    char const *p_buffer;
 6034|      0|    size_t size;
 6035|      0|    size_t tmp___0;
 6036|      0|    _Bool tmp___1;
 6037|      0|    char *tmp___2;
 6038|      0|    char *tmp___3;
 6039|      0|    char const *entry;
 6040|      0|    size_t entry_len;
 6041|      0|    char *name_buf;
 6042|      0|    char *tmp___4;
 6043|      0|    size_t name_size;
 6044|      0|    size_t tmp___5;
 6045|      0|    size_t name_len;
 6046|      0|    void *tmp___6;
 6047|      0|    _Bool tmp___7;
 6048|      0|    char *__cil_tmp29;
 6049|       |
 6050|      0|    {
 6051|      0|        {
 6052|      0|            our_device = st->stat.st_dev;
 6053|      0|            tmp___1 = is_avoided_name((char const *)st->orig_file_name);
 6054|      0|        }
 6055|      0|        if (!tmp___1) {
 6056|      0|            {
 6057|      0|                blk = (union block *)((void *)0);
 6058|      0|                tmp = current_block_ordinal();
 6059|      0|                block_ordinal = tmp;
 6060|      0|                st->stat.st_size = (__off_t)0;
 6061|      0|                blk = start_header(st);
 6062|      0|            }
 6063|      0|            if (!blk) {
 6064|      0|                return;
 6065|      0|            }
 6066|      0|            if (incremental_option) {
 6067|      0|                blk->header.typeflag = (char)'D';
 6068|      0|            }
 6069|      0|            else {
 6070|      0|                blk->header.typeflag = (char)'5';
 6071|      0|            }
 6072|      0|            if (!incremental_option) {
 6073|      0|                {
 6074|      0|                    finish_header(st, blk, block_ordinal);
 6075|      0|                }
 6076|      0|            }
 6077|      0|            else {
 6078|      0|                if (gnu_list_name->dir_contents) {
 6079|      0|                    {
 6080|      0|                        block_ordinal = current_block_ordinal();
 6081|      0|                        buffer___2 = gnu_list_name->dir_contents;
 6082|      0|                        totsize = (off_t)0;
 6083|      0|                    }
 6084|      0|                    if (buffer___2) {
 6085|      0|                        p_buffer = buffer___2;
 6086|      0|                        {
 6087|      0|                            while (1) {
 6088|      0|while_continue: /* CIL Label */
 6089|      0|                                ;
 6090|      0|                                if (!*p_buffer) {
 6091|      0|                                    goto while_break;
 6092|      0|                                }
 6093|      0|                                {
 6094|      0|                                    tmp___0 = strlen(p_buffer);
 6095|      0|                                    size = tmp___0 + 1UL;
 6096|      0|                                    totsize = (off_t)((size_t)totsize + size);
 6097|      0|                                    p_buffer += size;
 6098|      0|                                }
 6099|      0|                            }
 6100|      0|while_break: /* CIL Label */
 6101|      0|                            ;
 6102|      0|                        }
 6103|      0|                    }
 6104|      0|                    {
 6105|      0|                        totsize++;
 6106|      0|                        off_to_chars(totsize, blk->header.size, sizeof(blk->header.size));
 6107|      0|                        finish_header(st, blk, block_ordinal);
 6108|      0|                        p_buffer = buffer___2;
 6109|      0|                        size_left = totsize;
 6110|      0|                    }
 6111|      0|                    {
 6112|      0|                        while (1) {
 6113|      0|while_continue___0: /* CIL Label */
 6114|      0|                            ;
 6115|      0|                            if (!(size_left > 0L)) {
 6116|      0|                                goto while_break___0;
 6117|      0|                            }
 6118|      0|                            if (multi_volume_option) {
 6119|      0|                                {
 6120|      0|                                    assign_string(&save_name, (char const *)st->orig_file_name);
 6121|      0|                                    save_sizeleft = size_left;
 6122|      0|                                    save_totsize = totsize;
 6123|      0|                                }
 6124|      0|                            }
 6125|      0|                            {
 6126|      0|                                blk = find_next_block();
 6127|      0|                                bufsize = available_space_after(blk);
 6128|      0|                            }
 6129|      0|                            if ((size_t)size_left < bufsize) {
 6130|      0|                                bufsize = (size_t)size_left;
 6131|      0|                                count = (ssize_t)(bufsize % 512UL);
 6132|      0|                                if (count) {
 6133|      0|                                    {
 6134|      0|                                        memset((void *)(blk->buffer + size_left), 0,
 6135|      0|                                               (size_t)(512L - count));
 6136|      0|                                    }
 6137|      0|                                }
 6138|      0|                            }
 6139|      0|                            {
 6140|      0|                                memcpy((void * /* __restrict  */)(blk->buffer),
 6141|      0|                                       (void const * /* __restrict  */)p_buffer, bufsize);
 6142|      0|                                size_left = (off_t)((size_t)size_left - bufsize);
 6143|      0|                                p_buffer += bufsize;
 6144|      0|                                set_next_block_after(blk + (bufsize - 1UL) / 512UL);
 6145|      0|                            }
 6146|      0|                        }
 6147|      0|while_break___0: /* CIL Label */
 6148|      0|                        ;
 6149|      0|                    }
 6150|      0|                    if (multi_volume_option) {
 6151|      0|                        {
 6152|      0|                            assign_string(&save_name, (char const *)0);
 6153|      0|                        }
 6154|      0|                    }
 6155|      0|                    return;
 6156|      0|                }
 6157|      0|            }
 6158|      0|        }
 6159|      0|        if (!recursion_option) {
 6160|      0|            return;
 6161|      0|        }
 6162|      0|        if (one_file_system_option) {
 6163|      0|            if (!top_level) {
 6164|      0|                if (parent_device != st->stat.st_dev) {
 6165|      0|                    if (verbose_option) {
 6166|      0|                        {
 6167|      0|                            tmp___2 = quotearg_colon((char const *)st->orig_file_name);
 6168|      0|                            tmp___3 =
 6169|      0|                                gettext("%s: file is on a different filesystem; not dumped");
 6170|      0|                            error(0, 0, (char const *)tmp___3, tmp___2);
 6171|      0|                        }
 6172|      0|                    }
 6173|      0|                    return;
 6174|      0|                }
 6175|      0|            }
 6176|      0|        }
 6177|      0|        {
 6178|      0|            tmp___4 = strdup((char const *)st->orig_file_name);
 6179|      0|            name_buf = tmp___4;
 6180|      0|            tmp___5 = strlen((char const *)name_buf);
 6181|      0|            name_size = tmp___5;
 6182|      0|            name_len = name_size;
 6183|      0|            entry = (char const *)directory;
 6184|      0|        }
 6185|      0|        {
 6186|      0|            while (1) {
 6187|      0|while_continue___1: /* CIL Label */
 6188|      0|                ;
 6189|      0|                {
 6190|      0|                    entry_len = strlen(entry);
 6191|      0|                }
 6192|      0|                if (!(entry_len != 0UL)) {
 6193|      0|                    goto while_break___1;
 6194|      0|                }
 6195|      0|                if (name_size < name_len + entry_len) {
 6196|      0|                    {
 6197|      0|                        name_size = name_len + entry_len;
 6198|      0|                        tmp___6 = xrealloc((void *)name_buf, name_size + 1UL);
 6199|      0|                        name_buf = (char *)tmp___6;
 6200|      0|                    }
 6201|      0|                }
 6202|      0|                {
 6203|      0|                    strcpy((char * /* __restrict  */)(name_buf + name_len),
 6204|      0|                           (char const * /* __restrict  */)entry);
 6205|      0|                    tmp___7 = excluded_name((char const *)name_buf);
 6206|      0|                }
 6207|      0|                if (!tmp___7) {
 6208|      0|                    {
 6209|      0|                        dump_file(name_buf, 0, our_device);
 6210|      0|                    }
 6211|      0|                }
 6212|      0|                entry += entry_len + 1UL;
 6213|      0|            }
 6214|      0|while_break___1: /* CIL Label */
 6215|      0|            ;
 6216|      0|        }
 6217|      0|        {
 6218|      0|            free((void *)name_buf);
 6219|      0|        }
 6220|      0|        return;
 6221|      0|    }
 6222|      0|}
 6223|       |static void ensure_slash(char **pstr)
 6224|      0|{
 6225|      0|    size_t len;
 6226|      0|    size_t tmp;
 6227|      0|    void *tmp___0;
 6228|      0|    size_t tmp___1;
 6229|       |
 6230|      0|    {
 6231|      0|        {
 6232|      0|            tmp = strlen((char const *)*pstr);
 6233|      0|            len = tmp;
 6234|      0|        }
 6235|      0|        {
 6236|      0|            while (1) {
 6237|      0|while_continue: /* CIL Label */
 6238|      0|                ;
 6239|      0|                if (len >= 1UL) {
 6240|      0|                    if (!((int)*(*pstr + (len - 1UL)) == 47)) {
 6241|      0|                        goto while_break;
 6242|      0|                    }
 6243|      0|                }
 6244|      0|                else {
 6245|      0|                    goto while_break;
 6246|      0|                }
 6247|      0|                len--;
 6248|      0|            }
 6249|      0|while_break: /* CIL Label */
 6250|      0|            ;
 6251|      0|        }
 6252|      0|        if (!((int)*(*pstr + len) == 47)) {
 6253|      0|            {
 6254|      0|                tmp___0 = xrealloc((void *)*pstr, len + 2UL);
 6255|      0|                *pstr = (char *)tmp___0;
 6256|      0|            }
 6257|      0|        }
 6258|      0|        tmp___1 = len;
 6259|      0|        len++;
 6260|      0|        *(*pstr + tmp___1) = (char)'/';
 6261|      0|        *(*pstr + len) = (char)'\000';
 6262|      0|        return;
 6263|      0|    }
 6264|      0|}
 6265|       |static _Bool dump_dir(struct tar_stat_info *st, int top_level,
 6266|       |                      dev_t parent_device)
 6267|      0|{
 6268|      0|    char *directory;
 6269|       |
 6270|      0|    {
 6271|      0|        {
 6272|      0|            directory = savedir((char const *)st->orig_file_name);
 6273|      0|        }
 6274|      0|        if (!directory) {
 6275|      0|            {
 6276|      0|                savedir_diag((char const *)st->orig_file_name);
 6277|      0|            }
 6278|      0|            return ((_Bool)0);
 6279|      0|        }
 6280|      0|        {
 6281|      0|            ensure_slash(&st->orig_file_name);
 6282|      0|            ensure_slash(&st->file_name);
 6283|      0|            dump_dir0(directory, st, top_level, parent_device);
 6284|      0|            free((void *)directory);
 6285|      0|        }
 6286|      0|        return ((_Bool)1);
 6287|      0|    }
 6288|      0|}
 6289|       |void create_archive(void)
 6290|      0|{
 6291|      0|    char *p;
 6292|      0|    size_t buffer_size;
 6293|      0|    char *buffer___2;
 6294|      0|    void *tmp;
 6295|      0|    char const *q;
 6296|      0|    _Bool tmp___0;
 6297|      0|    size_t plen;
 6298|      0|    size_t tmp___1;
 6299|      0|    void *tmp___2;
 6300|      0|    size_t tmp___3;
 6301|      0|    size_t qlen;
 6302|      0|    size_t tmp___4;
 6303|      0|    void *tmp___5;
 6304|      0|    _Bool tmp___6;
 6305|      0|    _Bool tmp___7;
 6306|       |
 6307|      0|    {
 6308|      0|        {
 6309|      0|            open_archive((enum access_mode)1);
 6310|      0|            xheader_write_global();
 6311|      0|        }
 6312|      0|        if (incremental_option) {
 6313|      0|            {
 6314|      0|                buffer_size = (size_t)1000;
 6315|      0|                tmp = xmalloc(buffer_size);
 6316|      0|                buffer___2 = (char *)tmp;
 6317|      0|                collect_and_sort_names();
 6318|      0|            }
 6319|      0|            {
 6320|      0|                while (1) {
 6321|      0|while_continue: /* CIL Label */
 6322|      0|                    ;
 6323|      0|                    {
 6324|      0|                        p = name_from_list();
 6325|      0|                    }
 6326|      0|                    if (!((unsigned long)p != (unsigned long)((void *)0))) {
 6327|      0|                        goto while_break;
 6328|      0|                    }
 6329|      0|                    {
 6330|      0|                        tmp___0 = excluded_name((char const *)p);
 6331|      0|                    }
 6332|      0|                    if (!tmp___0) {
 6333|      0|                        {
 6334|      0|                            dump_file(p, -1, (dev_t)0);
 6335|      0|                        }
 6336|      0|                    }
 6337|      0|                }
 6338|      0|while_break: /* CIL Label */
 6339|      0|                ;
 6340|      0|            }
 6341|      0|            {
 6342|      0|                blank_name_list();
 6343|      0|            }
 6344|      0|            {
 6345|      0|                while (1) {
 6346|      0|while_continue___0: /* CIL Label */
 6347|      0|                    ;
 6348|      0|                    {
 6349|      0|                        p = name_from_list();
 6350|      0|                    }
 6351|      0|                    if (!((unsigned long)p != (unsigned long)((void *)0))) {
 6352|      0|                        goto while_break___0;
 6353|      0|                    }
 6354|      0|                    {
 6355|      0|                        tmp___6 = excluded_name((char const *)p);
 6356|      0|                    }
 6357|      0|                    if (!tmp___6) {
 6358|      0|                        {
 6359|      0|                            tmp___1 = strlen((char const *)p);
 6360|      0|                            plen = tmp___1;
 6361|      0|                        }
 6362|      0|                        if (buffer_size <= plen) {
 6363|      0|                            {
 6364|      0|                                while (1) {
 6365|      0|while_continue___1: /* CIL Label */
 6366|      0|                                    ;
 6367|      0|                                    buffer_size *= 2UL;
 6368|      0|                                    if (!(buffer_size <= plen)) {
 6369|      0|                                        goto while_break___1;
 6370|      0|                                    }
 6371|      0|                                    goto while_continue___1;
 6372|      0|                                }
 6373|      0|while_break___1: /* CIL Label */
 6374|      0|                                ;
 6375|      0|                            }
 6376|      0|                            {
 6377|      0|                                tmp___2 = xrealloc((void *)buffer___2, buffer_size);
 6378|      0|                                buffer___2 = (char *)tmp___2;
 6379|      0|                            }
 6380|      0|                        }
 6381|      0|                        {
 6382|      0|                            memcpy((void * /* __restrict  */)buffer___2,
 6383|      0|                                   (void const * /* __restrict  */)p, plen);
 6384|      0|                        }
 6385|      0|                        if (!((int)*(buffer___2 + (plen - 1UL)) == 47)) {
 6386|      0|                            tmp___3 = plen;
 6387|      0|                            plen++;
 6388|      0|                            *(buffer___2 + tmp___3) = (char)'/';
 6389|      0|                        }
 6390|      0|                        q = gnu_list_name->dir_contents;
 6391|      0|                        if (q) {
 6392|      0|                            {
 6393|      0|                                while (1) {
 6394|      0|while_continue___2: /* CIL Label */
 6395|      0|                                    ;
 6396|      0|                                    if (!*q) {
 6397|      0|                                        goto while_break___2;
 6398|      0|                                    }
 6399|      0|                                    {
 6400|      0|                                        tmp___4 = strlen(q);
 6401|      0|                                        qlen = tmp___4;
 6402|      0|                                    }
 6403|      0|                                    if ((int const) * q == 89) {
 6404|      0|                                        if (buffer_size < plen + qlen) {
 6405|      0|                                            {
 6406|      0|                                                while (1) {
 6407|      0|while_continue___3: /* CIL Label */
 6408|      0|                                                    ;
 6409|      0|                                                    buffer_size *= 2UL;
 6410|      0|                                                    if (!(buffer_size < plen + qlen)) {
 6411|      0|                                                        goto while_break___3;
 6412|      0|                                                    }
 6413|      0|                                                    goto while_continue___3;
 6414|      0|                                                }
 6415|      0|while_break___3: /* CIL Label */
 6416|      0|                                                ;
 6417|      0|                                            }
 6418|      0|                                            {
 6419|      0|                                                tmp___5 = xrealloc((void *)buffer___2, buffer_size);
 6420|      0|                                                buffer___2 = (char *)tmp___5;
 6421|      0|                                            }
 6422|      0|                                        }
 6423|      0|                                        {
 6424|      0|                                            strcpy((char * /* __restrict  */)(buffer___2 + plen),
 6425|      0|                                                   (char const * /* __restrict  */)(q + 1));
 6426|      0|                                            dump_file(buffer___2, -1, (dev_t)0);
 6427|      0|                                        }
 6428|      0|                                    }
 6429|      0|                                    q += qlen + 1UL;
 6430|      0|                                }
 6431|      0|while_break___2: /* CIL Label */
 6432|      0|                                ;
 6433|      0|                            }
 6434|      0|                        }
 6435|      0|                    }
 6436|      0|                }
 6437|      0|while_break___0: /* CIL Label */
 6438|      0|                ;
 6439|      0|            }
 6440|      0|            {
 6441|      0|                free((void *)buffer___2);
 6442|      0|            }
 6443|      0|        }
 6444|      0|        else {
 6445|      0|            {
 6446|      0|                while (1) {
 6447|      0|while_continue___4: /* CIL Label */
 6448|      0|                    ;
 6449|      0|                    {
 6450|      0|                        p = name_next(1);
 6451|      0|                    }
 6452|      0|                    if (!((unsigned long)p != (unsigned long)((void *)0))) {
 6453|      0|                        goto while_break___4;
 6454|      0|                    }
 6455|      0|                    {
 6456|      0|                        tmp___7 = excluded_name((char const *)p);
 6457|      0|                    }
 6458|      0|                    if (!tmp___7) {
 6459|      0|                        {
 6460|      0|                            dump_file(p, 1, (dev_t)0);
 6461|      0|                        }
 6462|      0|                    }
 6463|      0|                }
 6464|      0|while_break___4: /* CIL Label */
 6465|      0|                ;
 6466|      0|            }
 6467|      0|        }
 6468|      0|        {
 6469|      0|            write_eot();
 6470|      0|            close_archive();
 6471|      0|        }
 6472|      0|        if (listed_incremental_option) {
 6473|      0|            {
 6474|      0|                write_directory_file();
 6475|      0|            }
 6476|      0|        }
 6477|      0|        return;
 6478|      0|    }
 6479|      0|}
 6480|       |static unsigned int hash_link(void const *entry, unsigned int n_buckets)
 6481|      0|{
 6482|      0|    struct link const *l;
 6483|      0|    uintmax_t num;
 6484|       |
 6485|      0|    {
 6486|      0|        l = (struct link const *)entry;
 6487|      0|        num = (uintmax_t)(l->dev ^ l->ino);
 6488|      0|        return ((unsigned int)(num % (unsigned long)n_buckets));
 6489|      0|    }
 6490|      0|}
 6491|       |static _Bool compare_links(void const *entry1, void const *entry2)
 6492|      0|{
 6493|      0|    struct link const *link1;
 6494|      0|    struct link const *link2;
 6495|       |
 6496|      0|    {
 6497|      0|        link1 = (struct link const *)entry1;
 6498|      0|        link2 = (struct link const *)entry2;
 6499|      0|        return ((_Bool)(((link1->dev ^ link2->dev) | (link1->ino ^ link2->ino)) ==
 6500|      0|                        0UL));
 6501|      0|    }
 6502|      0|}
 6503|       |static void unknown_file_error(char *p)
 6504|      0|{
 6505|      0|    char *tmp;
 6506|      0|    char *tmp___0;
 6507|      0|    char *__cil_tmp4;
 6508|       |
 6509|      0|    {
 6510|      0|        {
 6511|      0|            tmp = quotearg_colon((char const *)p);
 6512|      0|            tmp___0 = gettext("%s: Unknown file type; file ignored");
 6513|      0|            error(0, 0, (char const *)tmp___0, tmp);
 6514|      0|        }
 6515|      0|        if (!ignore_failed_read_option) {
 6516|      0|            exit_status = 2;
 6517|      0|        }
 6518|      0|        return;
 6519|      0|    }
 6520|      0|}
 6521|       |static Hash_table *link_table;
 6522|       |static _Bool dump_hard_link(struct tar_stat_info *st)
 6523|      0|{
 6524|      0|    struct link lp;
 6525|      0|    struct link *duplicate;
 6526|      0|    off_t block_ordinal;
 6527|      0|    union block *blk;
 6528|      0|    char const *link_name;
 6529|      0|    char *tmp;
 6530|      0|    size_t tmp___0;
 6531|      0|    int tmp___1;
 6532|      0|    void *tmp___2;
 6533|      0|    void *__cil_tmp11;
 6534|       |
 6535|      0|    {
 6536|      0|        if (link_table) {
 6537|      0|            if (st->stat.st_nlink > 1UL) {
 6538|      0|                {
 6539|      0|                    lp.ino = st->stat.st_ino;
 6540|      0|                    lp.dev = st->stat.st_dev;
 6541|      0|                    tmp___2 =
 6542|      0|                        hash_lookup((Hash_table const *)link_table, (void const *)(&lp));
 6543|      0|                    duplicate = (struct link *)tmp___2;
 6544|      0|                }
 6545|      0|                if (duplicate) {
 6546|      0|                    {
 6547|      0|                        tmp = safer_name_suffix((char const *)(duplicate->name), (_Bool)1);
 6548|      0|                        link_name = (char const *)tmp;
 6549|      0|                        (duplicate->nlink)--;
 6550|      0|                        block_ordinal = current_block_ordinal();
 6551|      0|                        assign_string(&st->link_name, link_name);
 6552|      0|                        tmp___0 = strlen(link_name);
 6553|      0|                    }
 6554|      0|                    if (100UL < tmp___0) {
 6555|      0|                        {
 6556|      0|                            write_long_link(st);
 6557|      0|                        }
 6558|      0|                    }
 6559|      0|                    {
 6560|      0|                        st->stat.st_size = (__off_t)0;
 6561|      0|                        blk = start_header(st);
 6562|      0|                    }
 6563|      0|                    if (!blk) {
 6564|      0|                        return ((_Bool)1);
 6565|      0|                    }
 6566|      0|                    {
 6567|      0|                        tar_copy_str(blk->header.linkname, link_name, (size_t)100);
 6568|      0|                        blk->header.typeflag = (char)'1';
 6569|      0|                        finish_header(st, blk, block_ordinal);
 6570|      0|                    }
 6571|      0|                    if (remove_files_option) {
 6572|      0|                        {
 6573|      0|                            tmp___1 = unlink((char const *)st->orig_file_name);
 6574|      0|                        }
 6575|      0|                        if (tmp___1 != 0) {
 6576|      0|                            {
 6577|      0|                                unlink_error((char const *)st->orig_file_name);
 6578|      0|                            }
 6579|      0|                        }
 6580|      0|                    }
 6581|      0|                    return ((_Bool)1);
 6582|      0|                }
 6583|      0|            }
 6584|      0|        }
 6585|      0|        return ((_Bool)0);
 6586|      0|    }
 6587|      0|}
 6588|       |static void file_count_links(struct tar_stat_info *st)
 6589|      0|{
 6590|      0|    struct link *duplicate;
 6591|      0|    struct link *lp;
 6592|      0|    size_t tmp;
 6593|      0|    void *tmp___0;
 6594|      0|    void *tmp___1;
 6595|       |
 6596|      0|    {
 6597|      0|        if (st->stat.st_nlink > 1UL) {
 6598|      0|            {
 6599|      0|                tmp = strlen((char const *)st->orig_file_name);
 6600|      0|                tmp___0 =
 6601|      0|                    xmalloc(((unsigned long)(&((struct link *)0)->name) + tmp) + 1UL);
 6602|      0|                lp = (struct link *)tmp___0;
 6603|      0|                lp->ino = st->stat.st_ino;
 6604|      0|                lp->dev = st->stat.st_dev;
 6605|      0|                lp->nlink = st->stat.st_nlink;
 6606|      0|                strcpy((char * /* __restrict  */)(lp->name),
 6607|      0|                       (char const * /* __restrict  */)st->orig_file_name);
 6608|      0|            }
 6609|      0|            if (link_table) {
 6610|      0|                goto _L;
 6611|      0|            }
 6612|      0|            else {
 6613|      0|                {
 6614|      0|                    link_table =
 6615|      0|                        hash_initialize((size_t)0, (Hash_tuning const *)0,
 6616|      0|                                        (size_t(*)(void const *, size_t))(&hash_link),
 6617|      0|                                        &compare_links, (void (*)(void *))0);
 6618|      0|                }
 6619|      0|                if (link_table) {
 6620|      0|_L : {
 6621|      0|                        tmp___1 = hash_insert(link_table, (void const *)lp);
 6622|      0|                        duplicate = (struct link *)tmp___1;
 6623|      0|                    }
 6624|      0|                    if (!duplicate) {
 6625|      0|                        {
 6626|      0|                            xalloc_die();
 6627|      0|                        }
 6628|      0|                    }
 6629|      0|                }
 6630|      0|                else {
 6631|      0|                    {
 6632|      0|                        xalloc_die();
 6633|      0|                    }
 6634|      0|                }
 6635|      0|            }
 6636|      0|            if ((unsigned long)duplicate != (unsigned long)lp) {
 6637|      0|                {
 6638|      0|                    abort();
 6639|      0|                }
 6640|      0|            }
 6641|      0|            (lp->nlink)--;
 6642|      0|        }
 6643|      0|        return;
 6644|      0|    }
 6645|      0|}
 6646|       |void check_links(void)
 6647|      0|{
 6648|      0|    struct link *lp;
 6649|      0|    void *tmp;
 6650|      0|    void *tmp___0;
 6651|      0|    char *tmp___1;
 6652|      0|    char *__cil_tmp5;
 6653|       |
 6654|      0|    {
 6655|      0|        if (!link_table) {
 6656|      0|            return;
 6657|      0|        }
 6658|      0|        {
 6659|      0|            tmp = hash_get_first((Hash_table const *)link_table);
 6660|      0|            lp = (struct link *)tmp;
 6661|      0|        }
 6662|      0|        {
 6663|      0|            while (1) {
 6664|      0|while_continue: /* CIL Label */
 6665|      0|                ;
 6666|      0|                if (!lp) {
 6667|      0|                    goto while_break;
 6668|      0|                }
 6669|      0|                if (lp->nlink) {
 6670|      0|                    {
 6671|      0|                        tmp___1 = gettext("Missing links to \'%s\'.\n");
 6672|      0|                        error(0, 0, (char const *)tmp___1, lp->name);
 6673|      0|                    }
 6674|      0|                }
 6675|      0|                {
 6676|      0|                    tmp___0 =
 6677|      0|                        hash_get_next((Hash_table const *)link_table, (void const *)lp);
 6678|      0|                    lp = (struct link *)tmp___0;
 6679|      0|                }
 6680|      0|            }
 6681|      0|while_break: /* CIL Label */
 6682|      0|            ;
 6683|      0|        }
 6684|      0|        return;
 6685|      0|    }
 6686|      0|}
 6687|       |static void dump_file0(struct tar_stat_info *st, char *p, int top_level,
 6688|       |                       dev_t parent_device)
 6689|      0|{
 6690|      0|    union block *header;
 6691|      0|    char type;
 6692|      0|    time_t original_ctime;
 6693|      0|    struct utimbuf restore_times;
 6694|      0|    off_t block_ordinal;
 6695|      0|    int tmp;
 6696|      0|    char *tmp___0;
 6697|      0|    int tmp___1;
 6698|      0|    char *tmp___2;
 6699|      0|    char *tmp___3;
 6700|      0|    char *tmp___4;
 6701|      0|    char *tmp___5;
 6702|      0|    _Bool tmp___6;
 6703|      0|    _Bool tmp___7;
 6704|      0|    int fd;
 6705|      0|    enum dump_status status;
 6706|      0|    char *tmp___8;
 6707|      0|    char *tmp___9;
 6708|      0|    int *tmp___10;
 6709|      0|    _Bool tmp___11;
 6710|      0|    _Bool tmp___12;
 6711|      0|    char *buffer___2;
 6712|      0|    int size;
 6713|      0|    size_t linklen;
 6714|      0|    void *tmp___13;
 6715|      0|    ssize_t tmp___14;
 6716|      0|    int tmp___15;
 6717|      0|    char *tmp___16;
 6718|      0|    char *tmp___17;
 6719|      0|    _Bool tmp___20;
 6720|      0|    unsigned int tmp___21;
 6721|      0|    unsigned int tmp___22;
 6722|      0|    int tmp___23;
 6723|      0|    char *__cil_tmp38;
 6724|      0|    char *__cil_tmp39;
 6725|      0|    char *__cil_tmp40;
 6726|      0|    char *__cil_tmp41;
 6727|      0|    char *__cil_tmp42;
 6728|       |
 6729|      0|    {
 6730|      0|        block_ordinal = (off_t)-1;
 6731|      0|        if (interactive_option) {
 6732|      0|            {
 6733|      0|                tmp = confirm("add", (char const *)p);
 6734|      0|            }
 6735|      0|            if (!tmp) {
 6736|      0|                return;
 6737|      0|            }
 6738|      0|        }
 6739|      0|        {
 6740|      0|            assign_string(&st->orig_file_name, (char const *)p);
 6741|      0|            tmp___0 = safer_name_suffix((char const *)p, (_Bool)0);
 6742|      0|            assign_string(&st->file_name, (char const *)tmp___0);
 6743|      0|            tmp___1 = deref_stat(dereference_option, (char const *)p, &st->stat);
 6744|      0|        }
 6745|      0|        if (tmp___1 != 0) {
 6746|      0|            {
 6747|      0|                stat_diag((char const *)p);
 6748|      0|            }
 6749|      0|            return;
 6750|      0|        }
 6751|      0|        {
 6752|      0|            st->archive_file_size = st->stat.st_size;
 6753|      0|            sys_stat_nanoseconds(st);
 6754|      0|            original_ctime = st->stat.st_ctim.tv_sec;
 6755|      0|            restore_times.actime = st->stat.st_atim.tv_sec;
 6756|      0|            restore_times.modtime = st->stat.st_mtim.tv_sec;
 6757|      0|        }
 6758|      0|        if (!((st->stat.st_mode & 61440U) == 16384U)) {
 6759|      0|            if (st->stat.st_mtim.tv_sec < newer_mtime_option.tv_sec) {
 6760|      0|                goto _L___5;
 6761|      0|            }
 6762|      0|            else {
 6763|      0|                if (st->stat.st_mtim.tv_sec == newer_mtime_option.tv_sec) {
 6764|      0|                    if (st->stat.st_mtim.tv_nsec < newer_mtime_option.tv_nsec) {
 6765|      0|_L___5: /* CIL Label */
 6766|      0|                        if (!after_date_option) {
 6767|      0|                            goto _L___4;
 6768|      0|                        }
 6769|      0|                        else {
 6770|      0|                            if (st->stat.st_ctim.tv_sec < newer_mtime_option.tv_sec) {
 6771|      0|                                goto _L___4;
 6772|      0|                            }
 6773|      0|                            else {
 6774|      0|                                if (st->stat.st_ctim.tv_sec == newer_mtime_option.tv_sec) {
 6775|      0|                                    if (st->stat.st_ctim.tv_nsec < newer_mtime_option.tv_nsec) {
 6776|      0|_L___4: /* CIL Label */
 6777|      0|                                        if (0 < top_level) {
 6778|      0|                                            {
 6779|      0|                                                tmp___2 = quotearg_colon((char const *)p);
 6780|      0|                                                tmp___3 = gettext("%s: file is unchanged; not dumped");
 6781|      0|                                                error(0, 0, (char const *)tmp___3, tmp___2);
 6782|      0|                                            }
 6783|      0|                                        }
 6784|      0|                                        return;
 6785|      0|                                    }
 6786|      0|                                }
 6787|      0|                            }
 6788|      0|                        }
 6789|      0|                    }
 6790|      0|                }
 6791|      0|            }
 6792|      0|        }
 6793|      0|        {
 6794|      0|            tmp___6 = sys_file_is_archive(st);
 6795|      0|        }
 6796|      0|        if (tmp___6) {
 6797|      0|            {
 6798|      0|                tmp___4 = quotearg_colon((char const *)p);
 6799|      0|                tmp___5 = gettext("%s: file is the archive; not dumped");
 6800|      0|                error(0, 0, (char const *)tmp___5, tmp___4);
 6801|      0|            }
 6802|      0|            return;
 6803|      0|        }
 6804|      0|        if ((st->stat.st_mode & 61440U) == 16384U) {
 6805|      0|            {
 6806|      0|                dump_dir(st, top_level, parent_device);
 6807|      0|            }
 6808|      0|            if (atime_preserve_option) {
 6809|      0|                {
 6810|      0|                    utime((char const *)p, (struct utimbuf const *)(&restore_times));
 6811|      0|                }
 6812|      0|            }
 6813|      0|            return;
 6814|      0|        }
 6815|      0|        else {
 6816|      0|            {
 6817|      0|                tmp___20 = is_avoided_name((char const *)p);
 6818|      0|            }
 6819|      0|            if (tmp___20) {
 6820|      0|                return;
 6821|      0|            }
 6822|      0|            else {
 6823|      0|                {
 6824|      0|                    tmp___7 = dump_hard_link(st);
 6825|      0|                }
 6826|      0|                if (tmp___7) {
 6827|      0|                    return;
 6828|      0|                }
 6829|      0|                if ((st->stat.st_mode & 61440U) == 32768U) {
 6830|      0|                    goto _L___6;
 6831|      0|                }
 6832|      0|                else {
 6833|      0|                    if (0) {
 6834|      0|_L___6 : { /* CIL Label */
 6835|      0|                            tmp___11 = file_dumpable_p(st);
 6836|      0|                        }
 6837|      0|                        if (tmp___11) {
 6838|      0|                            {
 6839|      0|                                fd = open((char const *)st->orig_file_name, 0);
 6840|      0|                            }
 6841|      0|                            if (fd < 0) {
 6842|      0|                                if (!top_level) {
 6843|      0|                                    {
 6844|      0|                                        tmp___10 = __errno_location();
 6845|      0|                                    }
 6846|      0|                                    if (*tmp___10 == 2) {
 6847|      0|                                        {
 6848|      0|                                            tmp___8 =
 6849|      0|                                                quotearg_colon((char const *)st->orig_file_name);
 6850|      0|                                            tmp___9 = gettext("%s: File removed before we read it");
 6851|      0|                                            error(0, 0, (char const *)tmp___9, tmp___8);
 6852|      0|                                        }
 6853|      0|                                    }
 6854|      0|                                    else {
 6855|      0|                                        {
 6856|      0|                                            open_diag((char const *)st->orig_file_name);
 6857|      0|                                        }
 6858|      0|                                    }
 6859|      0|                                }
 6860|      0|                                else {
 6861|      0|                                    {
 6862|      0|                                        open_diag((char const *)st->orig_file_name);
 6863|      0|                                    }
 6864|      0|                                }
 6865|      0|                                return;
 6866|      0|                            }
 6867|      0|                        }
 6868|      0|                        else {
 6869|      0|                            fd = -1;
 6870|      0|                        }
 6871|      0|                        if (sparse_option) {
 6872|      0|                            {
 6873|      0|                                tmp___12 = sparse_file_p(st);
 6874|      0|                            }
 6875|      0|                            if (tmp___12) {
 6876|      0|                                {
 6877|      0|                                    status = sparse_dump_file(fd, st);
 6878|      0|                                }
 6879|      0|                                if ((unsigned int)status == 3U) {
 6880|      0|                                    {
 6881|      0|                                        status = dump_regular_file(fd, st);
 6882|      0|                                    }
 6883|      0|                                }
 6884|      0|                            }
 6885|      0|                            else {
 6886|      0|                                {
 6887|      0|                                    status = dump_regular_file(fd, st);
 6888|      0|                                }
 6889|      0|                            }
 6890|      0|                        }
 6891|      0|                        else {
 6892|      0|                            {
 6893|      0|                                status = dump_regular_file(fd, st);
 6894|      0|                            }
 6895|      0|                        }
 6896|      0|                        {
 6897|      0|                            if ((unsigned int)status == 0U) {
 6898|      0|                                goto case_0;
 6899|      0|                            }
 6900|      0|                            if ((unsigned int)status == 1U) {
 6901|      0|                                goto case_1;
 6902|      0|                            }
 6903|      0|                            if ((unsigned int)status == 2U) {
 6904|      0|                                goto case_2;
 6905|      0|                            }
 6906|      0|                            if ((unsigned int)status == 3U) {
 6907|      0|                                goto case_3;
 6908|      0|                            }
 6909|      0|                            goto switch_break;
 6910|      0|case_0: /* CIL Label */
 6911|      0|                            if (multi_volume_option) {
 6912|      0|                                {
 6913|      0|                                    assign_string(&save_name, (char const *)0);
 6914|      0|                                }
 6915|      0|                            }
 6916|      0|                            {
 6917|      0|                                dump_regular_finish(fd, st, original_ctime);
 6918|      0|                            }
 6919|      0|                            goto switch_break;
 6920|      0|case_1: /* CIL Label */
 6921|      0|                            if (multi_volume_option) {
 6922|      0|                                {
 6923|      0|                                    assign_string(&save_name, (char const *)0);
 6924|      0|                                }
 6925|      0|                            }
 6926|      0|                            {
 6927|      0|                                close(fd);
 6928|      0|                            }
 6929|      0|                            goto switch_break;
 6930|      0|case_2 : { /* CIL Label */
 6931|      0|                                close(fd);
 6932|      0|                            }
 6933|      0|                            return;
 6934|      0|case_3 : { /* CIL Label */
 6935|      0|                                abort();
 6936|      0|                            }
 6937|      0|switch_break: /* CIL Label */
 6938|      0|                            ;
 6939|      0|                        }
 6940|      0|                        if (atime_preserve_option) {
 6941|      0|                            {
 6942|      0|                                utime((char const *)st->orig_file_name,
 6943|      0|                                      (struct utimbuf const *)(&restore_times));
 6944|      0|                            }
 6945|      0|                        }
 6946|      0|                        {
 6947|      0|                            file_count_links(st);
 6948|      0|                        }
 6949|      0|                        return;
 6950|      0|                    }
 6951|      0|                    else {
 6952|      0|                        if ((st->stat.st_mode & 61440U) == 40960U) {
 6953|      0|                            linklen = (size_t)st->stat.st_size;
 6954|      0|                            if (linklen != (size_t)st->stat.st_size) {
 6955|      0|                                {
 6956|      0|                                    xalloc_die();
 6957|      0|                                }
 6958|      0|                            }
 6959|      0|                            else {
 6960|      0|                                if (linklen + 1UL == 0UL) {
 6961|      0|                                    {
 6962|      0|                                        xalloc_die();
 6963|      0|                                    }
 6964|      0|                                }
 6965|      0|                            }
 6966|      0|                            {
 6967|      0|                                tmp___13 = __builtin_alloca(linklen + 1UL);
 6968|      0|                                buffer___2 = (char *)tmp___13;
 6969|      0|                                tmp___14 = readlink((char const * /* __restrict  */)p,
 6970|      0|                                                    (char * /* __restrict  */)buffer___2,
 6971|      0|                                                    linklen + 1UL);
 6972|      0|                                size = (int)tmp___14;
 6973|      0|                            }
 6974|      0|                            if (size < 0) {
 6975|      0|                                {
 6976|      0|                                    readlink_diag((char const *)p);
 6977|      0|                                }
 6978|      0|                                return;
 6979|      0|                            }
 6980|      0|                            {
 6981|      0|                                *(buffer___2 + size) = (char)'\000';
 6982|      0|                                assign_string(&st->link_name, (char const *)buffer___2);
 6983|      0|                            }
 6984|      0|                            if (size > 100) {
 6985|      0|                                {
 6986|      0|                                    write_long_link(st);
 6987|      0|                                }
 6988|      0|                            }
 6989|      0|                            {
 6990|      0|                                block_ordinal = current_block_ordinal();
 6991|      0|                                st->stat.st_size = (__off_t)0;
 6992|      0|                                header = start_header(st);
 6993|      0|                            }
 6994|      0|                            if (!header) {
 6995|      0|                                return;
 6996|      0|                            }
 6997|      0|                            {
 6998|      0|                                tar_copy_str(header->header.linkname, (char const *)buffer___2,
 6999|      0|                                             (size_t)100);
 7000|      0|                                header->header.typeflag = (char)'2';
 7001|      0|                                finish_header(st, header, block_ordinal);
 7002|      0|                            }
 7003|      0|                            if (remove_files_option) {
 7004|      0|                                {
 7005|      0|                                    tmp___15 = unlink((char const *)p);
 7006|      0|                                }
 7007|      0|                                if (tmp___15 == -1) {
 7008|      0|                                    {
 7009|      0|                                        unlink_error((char const *)p);
 7010|      0|                                    }
 7011|      0|                                }
 7012|      0|                            }
 7013|      0|                            {
 7014|      0|                                file_count_links(st);
 7015|      0|                            }
 7016|      0|                            return;
 7017|      0|                        }
 7018|      0|                        else {
 7019|      0|                            if ((st->stat.st_mode & 61440U) == 8192U) {
 7020|      0|                                type = (char)'3';
 7021|      0|                            }
 7022|      0|                            else {
 7023|      0|                                if ((st->stat.st_mode & 61440U) == 24576U) {
 7024|      0|                                    type = (char)'4';
 7025|      0|                                }
 7026|      0|                                else {
 7027|      0|                                    if ((st->stat.st_mode & 61440U) == 4096U) {
 7028|      0|                                        type = (char)'6';
 7029|      0|                                    }
 7030|      0|                                    else {
 7031|      0|                                        if ((st->stat.st_mode & 61440U) == 49152U) {
 7032|      0|                                            {
 7033|      0|                                                tmp___16 = quotearg_colon((char const *)p);
 7034|      0|                                                tmp___17 = gettext("%s: socket ignored");
 7035|      0|                                                error(0, 0, (char const *)tmp___17, tmp___16);
 7036|      0|                                            }
 7037|      0|                                            return;
 7038|      0|                                        }
 7039|      0|                                        else {
 7040|      0|                                            {
 7041|      0|                                                unknown_file_error(p);
 7042|      0|                                            }
 7043|      0|                                            return;
 7044|      0|                                        }
 7045|      0|                                    }
 7046|      0|                                }
 7047|      0|                            }
 7048|      0|                        }
 7049|      0|                    }
 7050|      0|                }
 7051|      0|            }
 7052|      0|        }
 7053|      0|        if ((unsigned int)archive_format == 1U) {
 7054|      0|            {
 7055|      0|                unknown_file_error(p);
 7056|      0|            }
 7057|      0|            return;
 7058|      0|        }
 7059|      0|        {
 7060|      0|            block_ordinal = current_block_ordinal();
 7061|      0|            st->stat.st_size = (__off_t)0;
 7062|      0|            header = start_header(st);
 7063|      0|        }
 7064|      0|        if (!header) {
 7065|      0|            return;
 7066|      0|        }
 7067|      0|        header->header.typeflag = type;
 7068|      0|        if ((int)type != 54) {
 7069|      0|            {
 7070|      0|                tmp___21 = gnu_dev_major((unsigned long long)st->stat.st_rdev);
 7071|      0|                major_to_chars((int)tmp___21, header->header.devmajor,
 7072|      0|                               sizeof(header->header.devmajor));
 7073|      0|                tmp___22 = gnu_dev_minor((unsigned long long)st->stat.st_rdev);
 7074|      0|                minor_to_chars((int)tmp___22, header->header.devminor,
 7075|      0|                               sizeof(header->header.devminor));
 7076|      0|            }
 7077|      0|        }
 7078|      0|        {
 7079|      0|            finish_header(st, header, block_ordinal);
 7080|      0|        }
 7081|      0|        if (remove_files_option) {
 7082|      0|            {
 7083|      0|                tmp___23 = unlink((char const *)p);
 7084|      0|            }
 7085|      0|            if (tmp___23 == -1) {
 7086|      0|                {
 7087|      0|                    unlink_error((char const *)p);
 7088|      0|                }
 7089|      0|            }
 7090|      0|        }
 7091|      0|        return;
 7092|      0|    }
 7093|      0|}
 7094|       |void dump_file(char *p, int top_level, dev_t parent_device)
 7095|      0|{
 7096|      0|    struct tar_stat_info st;
 7097|      0|    void *__cil_tmp5;
 7098|       |
 7099|      0|    {
 7100|      0|        {
 7101|      0|            tar_stat_init(&st);
 7102|      0|            dump_file0(&st, p, top_level, parent_device);
 7103|      0|            tar_stat_destroy(&st);
 7104|      0|        }
 7105|      0|        return;
 7106|      0|    }
 7107|      0|}
 7108|       |/* #pragma merger("0","003.delete.o.i","") */
 7109|       |_Bool ignore_zeros_option;
 7110|       |uintmax_t occurrence_option;
 7111|       |void delete_archive_members(void);
 7112|       |size_t recent_long_name_blocks;
 7113|       |size_t recent_long_link_blocks;
 7114|       |void truncate_warn(char const *name);
 7115|       |void name_gather(void);
 7116|       |void names_notfound(void);
 7117|       |struct name *name_scan(char const *path);
 7118|       |void xheader_decode(struct tar_stat_info *st);
 7119|       |int sys_truncate(int fd);
 7120|       |static union block *new_record;
 7121|       |static int new_blocks;
 7122|       |static _Bool acting_as_filter;
 7123|       |union block *recent_long_name;
 7124|       |union block *recent_long_link;
 7125|       |static off_t records_skipped;
 7126|       |static void move_archive(off_t count)
 7127|      0|{
 7128|      0|    struct mtop operation;
 7129|      0|    int tmp;
 7130|      0|    int tmp___0;
 7131|      0|    int tmp___1;
 7132|      0|    int *tmp___2;
 7133|      0|    int tmp___3;
 7134|      0|    int tmp___4;
 7135|      0|    int tmp___5;
 7136|      0|    int tmp___6;
 7137|      0|    off_t position0;
 7138|      0|    off_t tmp___7;
 7139|      0|    __off_t tmp___8;
 7140|      0|    off_t tmp___9;
 7141|      0|    off_t increment;
 7142|      0|    off_t position;
 7143|      0|    off_t tmp___10;
 7144|      0|    __off_t tmp___11;
 7145|      0|    off_t tmp___12;
 7146|       |
 7147|      0|    {
 7148|      0|        if (count == 0L) {
 7149|      0|            return;
 7150|      0|        }
 7151|      0|        if (count < 0L) {
 7152|      0|            operation.mt_op = (short)4;
 7153|      0|            operation.mt_count = (int)(-count);
 7154|      0|            tmp___6 = (off_t)operation.mt_count == -count;
 7155|      0|        }
 7156|      0|        else {
 7157|      0|            operation.mt_op = (short)3;
 7158|      0|            operation.mt_count = (int)count;
 7159|      0|            tmp___6 = (off_t)operation.mt_count == count;
 7160|      0|        }
 7161|      0|        if (tmp___6) {
 7162|      0|            if (archive >= 1 << 30) {
 7163|      0|                {
 7164|      0|                    tmp = rmt_ioctl__(
 7165|      0|                              archive - (1 << 30),
 7166|      0|                              (int)((unsigned long)(((1U << 30) | (unsigned int)(109 << 8)) |
 7167|      0|                                                    1U) |
 7168|      0|                                    (sizeof(struct mtop) << 16)),
 7169|      0|                              (char *)(&operation));
 7170|      0|                    tmp___1 = tmp;
 7171|      0|                }
 7172|      0|            }
 7173|      0|            else {
 7174|      0|                {
 7175|      0|                    tmp___0 = ioctl(
 7176|      0|                                  archive,
 7177|      0|                                  (unsigned long)(((1U << 30) | (unsigned int)(109 << 8)) | 1U) |
 7178|      0|                                  (sizeof(struct mtop) << 16),
 7179|      0|                                  (char *)(&operation));
 7180|      0|                    tmp___1 = tmp___0;
 7181|      0|                }
 7182|      0|            }
 7183|      0|            if (0 <= tmp___1) {
 7184|      0|                return;
 7185|      0|            }
 7186|      0|            {
 7187|      0|                tmp___2 = __errno_location();
 7188|      0|            }
 7189|      0|            if (*tmp___2 == 5) {
 7190|      0|                if (archive >= 1 << 30) {
 7191|      0|                    {
 7192|      0|                        tmp___3 = rmt_ioctl__(
 7193|      0|                                      archive - (1 << 30),
 7194|      0|                                      (int)((unsigned long)(((1U << 30) | (unsigned int)(109 << 8)) |
 7195|      0|                                                            1U) |
 7196|      0|                                            (sizeof(struct mtop) << 16)),
 7197|      0|                                      (char *)(&operation));
 7198|      0|                        tmp___5 = tmp___3;
 7199|      0|                    }
 7200|      0|                }
 7201|      0|                else {
 7202|      0|                    {
 7203|      0|                        tmp___4 = ioctl(
 7204|      0|                                      archive,
 7205|      0|                                      (unsigned long)(((1U << 30) | (unsigned int)(109 << 8)) | 1U) |
 7206|      0|                                      (sizeof(struct mtop) << 16),
 7207|      0|                                      (char *)(&operation));
 7208|      0|                        tmp___5 = tmp___4;
 7209|      0|                    }
 7210|      0|                }
 7211|      0|                if (0 <= tmp___5) {
 7212|      0|                    return;
 7213|      0|                }
 7214|      0|            }
 7215|      0|        }
 7216|      0|        if (archive >= 1 << 30) {
 7217|      0|            {
 7218|      0|                tmp___7 = rmt_lseek__(archive - (1 << 30), (off_t)0, 1);
 7219|      0|                tmp___9 = tmp___7;
 7220|      0|            }
 7221|      0|        }
 7222|      0|        else {
 7223|      0|            {
 7224|      0|                tmp___8 = lseek(archive, (off_t)0, 1);
 7225|      0|                tmp___9 = tmp___8;
 7226|      0|            }
 7227|      0|        }
 7228|      0|        position0 = tmp___9;
 7229|      0|        increment = (off_t)(record_size * (size_t)count);
 7230|      0|        position = position0 + increment;
 7231|      0|        if ((size_t)(increment / count) != record_size) {
 7232|      0|            {
 7233|      0|                seek_error_details(*(archive_name_array + 0), position);
 7234|      0|            }
 7235|      0|        }
 7236|      0|        else {
 7237|      0|            if ((position < position0) != (increment < 0L)) {
 7238|      0|                {
 7239|      0|                    seek_error_details(*(archive_name_array + 0), position);
 7240|      0|                }
 7241|      0|            }
 7242|      0|            else {
 7243|      0|                if (position < 0L) {
 7244|      0|                    position = (off_t)0;
 7245|      0|                }
 7246|      0|                else {
 7247|      0|                    position = position;
 7248|      0|                }
 7249|      0|                if (archive >= 1 << 30) {
 7250|      0|                    {
 7251|      0|                        tmp___10 = rmt_lseek__(archive - (1 << 30), position, 0);
 7252|      0|                        tmp___12 = tmp___10;
 7253|      0|                    }
 7254|      0|                }
 7255|      0|                else {
 7256|      0|                    {
 7257|      0|                        tmp___11 = lseek(archive, position, 0);
 7258|      0|                        tmp___12 = tmp___11;
 7259|      0|                    }
 7260|      0|                }
 7261|      0|                if (tmp___12 != position) {
 7262|      0|                    {
 7263|      0|                        seek_error_details(*(archive_name_array + 0), position);
 7264|      0|                    }
 7265|      0|                }
 7266|      0|            }
 7267|      0|        }
 7268|      0|        return;
 7269|      0|    }
 7270|      0|}
 7271|       |static void write_record(int move_back_flag)
 7272|      0|{
 7273|      0|    union block *save_record;
 7274|       |
 7275|      0|    {
 7276|      0|        save_record = record_start;
 7277|      0|        record_start = new_record;
 7278|      0|        if (acting_as_filter) {
 7279|      0|            {
 7280|      0|                archive = 1;
 7281|      0|                flush_write();
 7282|      0|                archive = 0;
 7283|      0|            }
 7284|      0|        }
 7285|      0|        else {
 7286|      0|            {
 7287|      0|                move_archive((records_written + records_skipped) - records_read);
 7288|      0|                flush_write();
 7289|      0|            }
 7290|      0|        }
 7291|      0|        record_start = save_record;
 7292|      0|        if (move_back_flag) {
 7293|      0|            if (!acting_as_filter) {
 7294|      0|                {
 7295|      0|                    move_archive(records_read - (records_written + records_skipped));
 7296|      0|                }
 7297|      0|            }
 7298|      0|        }
 7299|      0|        new_blocks = 0;
 7300|      0|        return;
 7301|      0|    }
 7302|      0|}
 7303|       |static void write_recent_blocks(union block *h, size_t blocks)
 7304|      0|{
 7305|      0|    size_t i;
 7306|      0|    int tmp;
 7307|       |
 7308|      0|    {
 7309|      0|        i = (size_t)0;
 7310|      0|        {
 7311|      0|            while (1) {
 7312|      0|while_continue: /* CIL Label */
 7313|      0|                ;
 7314|      0|                if (!(i < blocks)) {
 7315|      0|                    goto while_break;
 7316|      0|                }
 7317|      0|                tmp = new_blocks;
 7318|      0|                new_blocks++;
 7319|      0|                *(new_record + tmp) = *(h + i);
 7320|      0|                if (new_blocks == blocking_factor) {
 7321|      0|                    {
 7322|      0|                        write_record(1);
 7323|      0|                    }
 7324|      0|                }
 7325|      0|                i++;
 7326|      0|            }
 7327|      0|while_break: /* CIL Label */
 7328|      0|            ;
 7329|      0|        }
 7330|      0|        return;
 7331|      0|    }
 7332|      0|}
 7333|       |static void write_recent_bytes(char *data, size_t bytes)
 7334|      0|{
 7335|      0|    size_t blocks;
 7336|      0|    size_t rest;
 7337|       |
 7338|      0|    {
 7339|      0|        {
 7340|      0|            blocks = bytes / 512UL;
 7341|      0|            rest = bytes - blocks * 512UL;
 7342|      0|            write_recent_blocks((union block *)data, blocks);
 7343|      0|            memcpy((void * /* __restrict  */)((new_record + new_blocks)->buffer),
 7344|      0|                   (void const * /* __restrict  */)(data + blocks * 512UL), rest);
 7345|      0|        }
 7346|      0|        if (rest < 512UL) {
 7347|      0|            {
 7348|      0|                memset((void *)((new_record + new_blocks)->buffer + rest), 0,
 7349|      0|                       512UL - rest);
 7350|      0|            }
 7351|      0|        }
 7352|      0|        new_blocks++;
 7353|      0|        if (new_blocks == blocking_factor) {
 7354|      0|            {
 7355|      0|                write_record(1);
 7356|      0|            }
 7357|      0|        }
 7358|      0|        return;
 7359|      0|    }
 7360|      0|}
 7361|       |void delete_archive_members(void)
 7362|      0|{
 7363|      0|    enum read_header logical_status;
 7364|      0|    enum read_header previous_status;
 7365|      0|    struct name *name;
 7366|      0|    off_t blocks_to_skip;
 7367|      0|    off_t blocks_to_keep;
 7368|      0|    int kept_blocks_in_record;
 7369|      0|    int tmp;
 7370|      0|    enum read_header status;
 7371|      0|    enum read_header tmp___0;
 7372|      0|    char *tmp___1;
 7373|      0|    char *tmp___2;
 7374|      0|    void *tmp___3;
 7375|      0|    enum read_header status___0;
 7376|      0|    char *tmp___4;
 7377|      0|    int count;
 7378|      0|    int total_zero_blocks;
 7379|      0|    int zero_blocks;
 7380|      0|    int tmp___5;
 7381|      0|    uintmax_t tmp___6;
 7382|      0|    uintmax_t tmp___7;
 7383|      0|    char *__cil_tmp21;
 7384|      0|    char *__cil_tmp22;
 7385|      0|    char *__cil_tmp23;
 7386|       |
 7387|      0|    {
 7388|      0|        {
 7389|      0|            logical_status = (enum read_header)0;
 7390|      0|            previous_status = (enum read_header)0;
 7391|      0|            blocks_to_skip = (off_t)0;
 7392|      0|            blocks_to_keep = (off_t)0;
 7393|      0|            name_gather();
 7394|      0|            open_archive((enum access_mode)2);
 7395|      0|            tmp = strcmp(*(archive_name_array + 0), "-");
 7396|      0|            acting_as_filter = (_Bool)(tmp == 0);
 7397|      0|        }
 7398|      0|        {
 7399|      0|            while (1) {
 7400|      0|while_continue: /* CIL Label */
 7401|      0|                ;
 7402|      0|                {
 7403|      0|                    tmp___0 = read_header((_Bool)1);
 7404|      0|                    status = tmp___0;
 7405|      0|                }
 7406|      0|                {
 7407|      0|                    if ((unsigned int)status == 0U) {
 7408|      0|                        goto case_0;
 7409|      0|                    }
 7410|      0|                    if ((unsigned int)status == 1U) {
 7411|      0|                        goto case_1;
 7412|      0|                    }
 7413|      0|                    if ((unsigned int)status == 2U) {
 7414|      0|                        goto case_2;
 7415|      0|                    }
 7416|      0|                    if ((unsigned int)status == 3U) {
 7417|      0|                        goto case_3;
 7418|      0|                    }
 7419|      0|                    if ((unsigned int)status == 4U) {
 7420|      0|                        goto case_4;
 7421|      0|                    }
 7422|      0|                    if ((unsigned int)status == 5U) {
 7423|      0|                        goto case_5;
 7424|      0|                    }
 7425|      0|                    goto switch_break;
 7426|      0|case_0 : { /* CIL Label */
 7427|      0|                        abort();
 7428|      0|                    }
 7429|      0|case_1 : { /* CIL Label */
 7430|      0|                        name = name_scan((char const *)current_stat_info.file_name);
 7431|      0|                    }
 7432|      0|                    if ((unsigned long)name == (unsigned long)((void *)0)) {
 7433|      0|                        {
 7434|      0|                            skip_member();
 7435|      0|                        }
 7436|      0|                        goto switch_break;
 7437|      0|                    }
 7438|      0|                    (name->found_count)++;
 7439|      0|                    if (occurrence_option == 0UL) {
 7440|      0|                        tmp___6 = name->found_count;
 7441|      0|                    }
 7442|      0|                    else {
 7443|      0|                        tmp___6 = (uintmax_t)(name->found_count == occurrence_option);
 7444|      0|                    }
 7445|      0|                    if (!tmp___6) {
 7446|      0|                        {
 7447|      0|                            skip_member();
 7448|      0|                        }
 7449|      0|                        goto switch_break;
 7450|      0|                    }
 7451|      0|case_2: /* CIL Label */
 7452|      0|                    logical_status = status;
 7453|      0|                    goto switch_break;
 7454|      0|case_3: /* CIL Label */
 7455|      0|                    if (ignore_zeros_option) {
 7456|      0|                        {
 7457|      0|                            set_next_block_after(current_header);
 7458|      0|                        }
 7459|      0|                        goto switch_break;
 7460|      0|                    }
 7461|      0|case_4: /* CIL Label */
 7462|      0|                    logical_status = (enum read_header)4;
 7463|      0|                    goto switch_break;
 7464|      0|case_5 : { /* CIL Label */
 7465|      0|                        set_next_block_after(current_header);
 7466|      0|                    }
 7467|      0|                    {
 7468|      0|                        if ((unsigned int)previous_status == 0U) {
 7469|      0|                            goto case_0___0;
 7470|      0|                        }
 7471|      0|                        if ((unsigned int)previous_status == 1U) {
 7472|      0|                            goto case_1___0;
 7473|      0|                        }
 7474|      0|                        if ((unsigned int)previous_status == 2U) {
 7475|      0|                            goto case_1___0;
 7476|      0|                        }
 7477|      0|                        if ((unsigned int)previous_status == 3U) {
 7478|      0|                            goto case_1___0;
 7479|      0|                        }
 7480|      0|                        if ((unsigned int)previous_status == 5U) {
 7481|      0|                            goto case_5___0;
 7482|      0|                        }
 7483|      0|                        if ((unsigned int)previous_status == 4U) {
 7484|      0|                            goto case_4___0;
 7485|      0|                        }
 7486|      0|                        goto switch_break___0;
 7487|      0|case_0___0 : { /* CIL Label */
 7488|      0|                            tmp___1 = gettext("This does not look like a tar archive");
 7489|      0|                            error(0, 0, (char const *)tmp___1);
 7490|      0|                        }
 7491|      0|case_1___0:  /* CIL Label */
 7492|      0|case_2___0:  /* CIL Label */
 7493|      0|case_3___0 : { /* CIL Label */
 7494|      0|                            tmp___2 = gettext("Skipping to next header");
 7495|      0|                            error(0, 0, (char const *)tmp___2);
 7496|      0|                            exit_status = 2;
 7497|      0|                        }
 7498|      0|case_5___0: /* CIL Label */
 7499|      0|                        goto switch_break___0;
 7500|      0|case_4___0 : { /* CIL Label */
 7501|      0|                            abort();
 7502|      0|                        }
 7503|      0|switch_break___0: /* CIL Label */
 7504|      0|                        ;
 7505|      0|                    }
 7506|      0|                    goto switch_break;
 7507|      0|switch_break: /* CIL Label */
 7508|      0|                    ;
 7509|      0|                }
 7510|      0|                previous_status = status;
 7511|      0|                if (!((unsigned int)logical_status == 0U)) {
 7512|      0|                    goto while_break;
 7513|      0|                }
 7514|      0|            }
 7515|      0|while_break: /* CIL Label */
 7516|      0|            ;
 7517|      0|        }
 7518|      0|        {
 7519|      0|            records_skipped = records_read - 1L;
 7520|      0|            tmp___3 = xmalloc(record_size);
 7521|      0|            new_record = (union block *)tmp___3;
 7522|      0|        }
 7523|      0|        if ((unsigned int)logical_status == 1U) {
 7524|      0|            goto _L___3;
 7525|      0|        }
 7526|      0|        else {
 7527|      0|            if ((unsigned int)logical_status == 2U) {
 7528|      0|_L___3: /* CIL Label */
 7529|      0|                write_archive_to_stdout = (_Bool)0;
 7530|      0|                new_blocks = (int)(current_block - record_start);
 7531|      0|                if (new_blocks) {
 7532|      0|                    {
 7533|      0|                        memcpy((void * /* __restrict  */)new_record,
 7534|      0|                               (void const * /* __restrict  */)record_start,
 7535|      0|                               (size_t)(new_blocks * 512));
 7536|      0|                    }
 7537|      0|                }
 7538|      0|                if ((unsigned int)logical_status == 1U) {
 7539|      0|                    logical_status = (enum read_header)0;
 7540|      0|                    goto flush_file;
 7541|      0|                }
 7542|      0|                {
 7543|      0|                    while (1) {
 7544|      0|while_continue___0: /* CIL Label */
 7545|      0|                        ;
 7546|      0|                        if ((unsigned long)current_block == (unsigned long)record_end) {
 7547|      0|                            {
 7548|      0|                                flush_archive();
 7549|      0|                            }
 7550|      0|                        }
 7551|      0|                        {
 7552|      0|                            status___0 = read_header((_Bool)0);
 7553|      0|                            xheader_decode(&current_stat_info);
 7554|      0|                        }
 7555|      0|                        if ((unsigned int)status___0 == 3U) {
 7556|      0|                            if (ignore_zeros_option) {
 7557|      0|                                {
 7558|      0|                                    set_next_block_after(current_header);
 7559|      0|                                }
 7560|      0|                                goto while_continue___0;
 7561|      0|                            }
 7562|      0|                        }
 7563|      0|                        if ((unsigned int)status___0 == 4U) {
 7564|      0|                            logical_status = (enum read_header)4;
 7565|      0|                            goto while_break___0;
 7566|      0|                        }
 7567|      0|                        else {
 7568|      0|                            if ((unsigned int)status___0 == 3U) {
 7569|      0|                                logical_status = (enum read_header)4;
 7570|      0|                                goto while_break___0;
 7571|      0|                            }
 7572|      0|                        }
 7573|      0|                        if ((unsigned int)status___0 == 5U) {
 7574|      0|                            {
 7575|      0|                                tmp___4 = gettext("Deleting non-header from archive");
 7576|      0|                                error(0, 0, (char const *)tmp___4);
 7577|      0|                                exit_status = 2;
 7578|      0|                                set_next_block_after(current_header);
 7579|      0|                            }
 7580|      0|                            goto while_continue___0;
 7581|      0|                        }
 7582|      0|                        {
 7583|      0|                            name = name_scan((char const *)current_stat_info.file_name);
 7584|      0|                        }
 7585|      0|                        if ((unsigned long)name != (unsigned long)((void *)0)) {
 7586|      0|                            (name->found_count)++;
 7587|      0|                            if (occurrence_option == 0UL) {
 7588|      0|                                tmp___7 = name->found_count;
 7589|      0|                            }
 7590|      0|                            else {
 7591|      0|                                tmp___7 = (uintmax_t)(name->found_count == occurrence_option);
 7592|      0|                            }
 7593|      0|                            if (tmp___7) {
 7594|      0|flush_file : {
 7595|      0|                                    set_next_block_after(current_header);
 7596|      0|                                    blocks_to_skip =
 7597|      0|                                        ((current_stat_info.stat.st_size + 512L) - 1L) / 512L;
 7598|      0|                                }
 7599|      0|                                {
 7600|      0|                                    while (1) {
 7601|      0|while_continue___1: /* CIL Label */
 7602|      0|                                        ;
 7603|      0|                                        if (!(record_end - current_block <= blocks_to_skip)) {
 7604|      0|                                            goto while_break___1;
 7605|      0|                                        }
 7606|      0|                                        {
 7607|      0|                                            blocks_to_skip -= record_end - current_block;
 7608|      0|                                            flush_archive();
 7609|      0|                                        }
 7610|      0|                                    }
 7611|      0|while_break___1: /* CIL Label */
 7612|      0|                                    ;
 7613|      0|                                }
 7614|      0|                                current_block += blocks_to_skip;
 7615|      0|                                blocks_to_skip = (off_t)0;
 7616|      0|                                goto while_continue___0;
 7617|      0|                            }
 7618|      0|                        }
 7619|      0|                        if (extended_header.size) {
 7620|      0|                            {
 7621|      0|                                write_recent_bytes(extended_header.buffer,
 7622|      0|                                                   extended_header.size);
 7623|      0|                            }
 7624|      0|                        }
 7625|      0|                        else {
 7626|      0|                            {
 7627|      0|                                write_recent_blocks(recent_long_name, recent_long_name_blocks);
 7628|      0|                                write_recent_blocks(recent_long_link, recent_long_link_blocks);
 7629|      0|                            }
 7630|      0|                        }
 7631|      0|                        {
 7632|      0|                            *(new_record + new_blocks) = *current_header;
 7633|      0|                            new_blocks++;
 7634|      0|                            blocks_to_keep =
 7635|      0|                                ((current_stat_info.stat.st_size + 512L) - 1L) / 512L;
 7636|      0|                            set_next_block_after(current_header);
 7637|      0|                        }
 7638|      0|                        if (new_blocks == blocking_factor) {
 7639|      0|                            {
 7640|      0|                                write_record(1);
 7641|      0|                            }
 7642|      0|                        }
 7643|      0|                        kept_blocks_in_record = (int)(record_end - current_block);
 7644|      0|                        if ((off_t)kept_blocks_in_record > blocks_to_keep) {
 7645|      0|                            kept_blocks_in_record = (int)blocks_to_keep;
 7646|      0|                        }
 7647|      0|                        {
 7648|      0|                            while (1) {
 7649|      0|while_continue___2: /* CIL Label */
 7650|      0|                                ;
 7651|      0|                                if (!blocks_to_keep) {
 7652|      0|                                    goto while_break___2;
 7653|      0|                                }
 7654|      0|                                if ((unsigned long)current_block == (unsigned long)record_end) {
 7655|      0|                                    {
 7656|      0|                                        flush_read();
 7657|      0|                                        current_block = record_start;
 7658|      0|                                        kept_blocks_in_record = blocking_factor;
 7659|      0|                                    }
 7660|      0|                                    if ((off_t)kept_blocks_in_record > blocks_to_keep) {
 7661|      0|                                        kept_blocks_in_record = (int)blocks_to_keep;
 7662|      0|                                    }
 7663|      0|                                }
 7664|      0|                                count = kept_blocks_in_record;
 7665|      0|                                if (blocking_factor - new_blocks < count) {
 7666|      0|                                    count = blocking_factor - new_blocks;
 7667|      0|                                }
 7668|      0|                                if (!count) {
 7669|      0|                                    {
 7670|      0|                                        abort();
 7671|      0|                                    }
 7672|      0|                                }
 7673|      0|                                {
 7674|      0|                                    memcpy((void * /* __restrict  */)(new_record + new_blocks),
 7675|      0|                                           (void const * /* __restrict  */)current_block,
 7676|      0|                                           (size_t)(count * 512));
 7677|      0|                                    new_blocks += count;
 7678|      0|                                    current_block += count;
 7679|      0|                                    blocks_to_keep -= (off_t)count;
 7680|      0|                                    kept_blocks_in_record -= count;
 7681|      0|                                }
 7682|      0|                                if (new_blocks == blocking_factor) {
 7683|      0|                                    {
 7684|      0|                                        write_record(1);
 7685|      0|                                    }
 7686|      0|                                }
 7687|      0|                            }
 7688|      0|while_break___2: /* CIL Label */
 7689|      0|                            ;
 7690|      0|                        }
 7691|      0|                    }
 7692|      0|while_break___0: /* CIL Label */
 7693|      0|                    ;
 7694|      0|                }
 7695|      0|            }
 7696|      0|        }
 7697|      0|        if ((unsigned int)logical_status == 4U) {
 7698|      0|            total_zero_blocks = 0;
 7699|      0|            {
 7700|      0|                while (1) {
 7701|      0|while_continue___3: /* CIL Label */
 7702|      0|                    ;
 7703|      0|                    {
 7704|      0|                        zero_blocks = blocking_factor - new_blocks;
 7705|      0|                        memset((void *)(new_record + new_blocks), 0,
 7706|      0|                               (size_t)(512 * zero_blocks));
 7707|      0|                        total_zero_blocks += zero_blocks;
 7708|      0|                        write_record(total_zero_blocks < 2);
 7709|      0|                    }
 7710|      0|                    if (!(total_zero_blocks < 2)) {
 7711|      0|                        goto while_break___3;
 7712|      0|                    }
 7713|      0|                }
 7714|      0|while_break___3: /* CIL Label */
 7715|      0|                ;
 7716|      0|            }
 7717|      0|        }
 7718|      0|        {
 7719|      0|            free((void *)new_record);
 7720|      0|        }
 7721|      0|        if (!acting_as_filter) {
 7722|      0|            if (!(archive >= 1 << 30)) {
 7723|      0|                {
 7724|      0|                    tmp___5 = sys_truncate(archive);
 7725|      0|                }
 7726|      0|                if (tmp___5) {
 7727|      0|                    {
 7728|      0|                        truncate_warn(*(archive_name_array + 0));
 7729|      0|                    }
 7730|      0|                }
 7731|      0|            }
 7732|      0|        }
 7733|      0|        {
 7734|      0|            close_archive();
 7735|      0|            names_notfound();
 7736|      0|        }
 7737|      0|        return;
 7738|      0|    }
 7739|      0|}
 7740|       |/* #pragma merger("0","004.extract.o.i","") */
 7741|       |extern __attribute__((__nothrow__)) int(
 7742|       |    __attribute__((__nonnull__(1, 2), __leaf__))
 7743|       |    stat)(char const *__restrict __file, struct stat *__restrict __buf);
 7744|       |extern __attribute__((__nothrow__)) int(
 7745|       |    __attribute__((__nonnull__(1, 2), __leaf__))
 7746|       |    lstat)(char const *__restrict __file, struct stat *__restrict __buf);
 7747|       |extern
 7748|       |__attribute__((__nothrow__)) int(__attribute__((__nonnull__(1), __leaf__))
 7749|       |                                 chmod)(char const *__file,
 7750|       |                                        __mode_t __mode);
 7751|       |extern __attribute__((__nothrow__))
 7752|       |__mode_t(__attribute__((__leaf__)) umask)(__mode_t __mask);
 7753|       |extern
 7754|       |__attribute__((__nothrow__)) int(__attribute__((__nonnull__(1), __leaf__))
 7755|       |                                 mkdir)(char const *__path,
 7756|       |                                        __mode_t __mode);
 7757|       |extern
 7758|       |__attribute__((__nothrow__)) int(__attribute__((__nonnull__(1), __leaf__))
 7759|       |                                 mknod)(char const *__path, __mode_t __mode,
 7760|       |                                        __dev_t __dev);
 7761|       |extern
 7762|       |__attribute__((__nothrow__)) int(__attribute__((__nonnull__(1), __leaf__))
 7763|       |                                 mkfifo)(char const *__path,
 7764|       |                                         __mode_t __mode);
 7765|       |extern
 7766|       |__attribute__((__nothrow__)) int(__attribute__((__nonnull__(1), __leaf__))
 7767|       |                                 access)(char const *__name, int __type);
 7768|       |extern
 7769|       |__attribute__((__nothrow__)) int(__attribute__((__nonnull__(1), __leaf__))
 7770|       |                                 chown)(char const *__file, __uid_t __owner,
 7771|       |                                        __gid_t __group);
 7772|       |extern
 7773|       |__attribute__((__nothrow__)) int(__attribute__((__nonnull__(1), __leaf__))
 7774|       |                                 lchown)(char const *__file,
 7775|       |                                         __uid_t __owner, __gid_t __group);
 7776|       |extern __attribute__((__nothrow__))
 7777|       |__uid_t(__attribute__((__leaf__)) geteuid)(void);
 7778|       |extern __attribute__((__nothrow__)) int(__attribute__((
 7779|       |        __nonnull__(1, 2), __leaf__)) link)(char const *__from, char const *__to);
 7780|       |extern __attribute__((__nothrow__)) int(
 7781|       |    __attribute__((__nonnull__(1, 2), __leaf__))
 7782|       |    symlink)(char const *__from, char const *__to);
 7783|       |char *base_name(char const *name);
 7784|       |void (*xalloc_fail_func)(void);
 7785|       |size_t full_write(int fd, void const *buf, size_t count);
 7786|       |_Bool absolute_names_option;
 7787|       |enum old_files old_files_option;
 7788|       |_Bool recursive_unlink_option;
 7789|       |int same_owner_option;
 7790|       |int same_permissions_option;
 7791|       |size_t strip_path_elements;
 7792|       |_Bool touch_option;
 7793|       |_Bool we_are_root;
 7794|       |void extr_init(void);
 7795|       |void extract_archive(void);
 7796|       |void extract_finish(void);
 7797|       |void gnu_restore(char const *directory_name);
 7798|       |char const *tartime(time_t t);
 7799|       |void print_for_mkdir(char *pathname, int length, mode_t mode);
 7800|       |void skip_file(off_t size);
 7801|       |void extract_mangle(void);
 7802|       |int remove_any_file(char const *path, enum remove_option option);
 7803|       |void chmod_error_details(char const *name, mode_t mode);
 7804|       |void chown_error_details(char const *name, uid_t uid, gid_t gid);
 7805|       |void link_error(char const *target, char const *source);
 7806|       |void mkdir_error(char const *name);
 7807|       |void mkfifo_error(char const *name);
 7808|       |void mknod_error(char const *name);
 7809|       |void symlink_error(char const *contents, char const *name);
 7810|       |void utime_error(char const *name);
 7811|       |void write_error_details(char const *name, size_t status, size_t size);
 7812|       |size_t stripped_prefix_len(char const *file_name, size_t num);
 7813|       |_Bool contains_dot_dot(char const *name);
 7814|       |_Bool sparse_member_p(struct tar_stat_info *st);
 7815|       |enum dump_status sparse_extract_file(int fd, struct tar_stat_info *st,
 7816|       |                                     off_t *size);
 7817|       |static mode_t newdir_umask;
 7818|       |static mode_t current_umask;
 7819|       |static struct delayed_set_stat *delayed_set_stat_head;
 7820|       |static struct delayed_symlink *delayed_symlink_head;
 7821|       |void extr_init(void)
 7822|      0|{
 7823|      0|    __uid_t tmp;
 7824|       |
 7825|      0|    {
 7826|      0|        {
 7827|      0|            tmp = geteuid();
 7828|      0|            we_are_root = (_Bool)(tmp == 0U);
 7829|      0|            same_permissions_option += (int)we_are_root;
 7830|      0|            same_owner_option += (int)we_are_root;
 7831|      0|            xalloc_fail_func = &extract_finish;
 7832|      0|            newdir_umask = umask((__mode_t)0);
 7833|      0|        }
 7834|      0|        if (0 < same_permissions_option) {
 7835|      0|            current_umask = (mode_t)0;
 7836|      0|        }
 7837|      0|        else {
 7838|      0|            {
 7839|      0|                umask(newdir_umask);
 7840|      0|                current_umask = newdir_umask;
 7841|      0|            }
 7842|      0|        }
 7843|      0|        return;
 7844|      0|    }
 7845|      0|}
 7846|       |static void set_mode(char const *file_name, struct stat const *stat_info,
 7847|       |                     struct stat const *cur_info, mode_t invert_permissions,
 7848|       |                     enum permstatus permstatus, char typeflag)
 7849|      0|{
 7850|      0|    mode_t mode;
 7851|      0|    struct stat st;
 7852|      0|    int tmp;
 7853|      0|    int tmp___0;
 7854|      0|    void *__cil_tmp11;
 7855|       |
 7856|      0|    {
 7857|      0|        if (0 < same_permissions_option) {
 7858|      0|            if ((unsigned int)permstatus != 2U) {
 7859|      0|                mode = (mode_t)stat_info->st_mode;
 7860|      0|                if ((unsigned int)permstatus == 1U) {
 7861|      0|                    if (!(mode & (unsigned int)(~(
 7862|      0|                                                    ((64 | (64 >> 3)) | ((64 >> 3) >> 3)) |
 7863|      0|                                                    (((128 | (128 >> 3)) | ((128 >> 3) >> 3)) |
 7864|      0|                                                     ((256 | (256 >> 3)) | ((256 >> 3) >> 3))))))) {
 7865|      0|                        if ((int)typeflag != 53) {
 7866|      0|                            if ((int)typeflag != 68) {
 7867|      0|                                return;
 7868|      0|                            }
 7869|      0|                        }
 7870|      0|                    }
 7871|      0|                }
 7872|      0|            }
 7873|      0|            else {
 7874|      0|                goto _L___3;
 7875|      0|            }
 7876|      0|        }
 7877|      0|        else {
 7878|      0|_L___3: /* CIL Label */
 7879|      0|            if (!invert_permissions) {
 7880|      0|                return;
 7881|      0|            }
 7882|      0|            else {
 7883|      0|                if (!cur_info) {
 7884|      0|                    {
 7885|      0|                        tmp = stat((char const * /* __restrict  */)file_name,
 7886|      0|                                   (struct stat * /* __restrict  */)(&st));
 7887|      0|                    }
 7888|      0|                    if (tmp != 0) {
 7889|      0|                        {
 7890|      0|                            stat_error(file_name);
 7891|      0|                        }
 7892|      0|                        return;
 7893|      0|                    }
 7894|      0|                    cur_info = (struct stat const *)(&st);
 7895|      0|                }
 7896|      0|                mode = (mode_t)(cur_info->st_mode ^
 7897|      0|                                (unsigned int const)invert_permissions);
 7898|      0|            }
 7899|      0|        }
 7900|      0|        {
 7901|      0|            tmp___0 = chmod(file_name, mode);
 7902|      0|        }
 7903|      0|        if (tmp___0 != 0) {
 7904|      0|            {
 7905|      0|                chmod_error_details(file_name, mode);
 7906|      0|            }
 7907|      0|        }
 7908|      0|        return;
 7909|      0|    }
 7910|      0|}
 7911|       |static void check_time(char const *file_name, time_t t)
 7912|      0|{
 7913|      0|    time_t now;
 7914|      0|    char const *tmp;
 7915|      0|    char *tmp___0;
 7916|      0|    char const *tmp___1;
 7917|      0|    char *tmp___2;
 7918|      0|    char *__cil_tmp8;
 7919|      0|    char *__cil_tmp9;
 7920|       |
 7921|      0|    {
 7922|      0|        if (t <= 0L) {
 7923|      0|            {
 7924|      0|                tmp = tartime(t);
 7925|      0|                tmp___0 = gettext("%s: implausibly old time stamp %s");
 7926|      0|                error(0, 0, (char const *)tmp___0, file_name, tmp);
 7927|      0|            }
 7928|      0|        }
 7929|      0|        else {
 7930|      0|            if (start_timespec.tv_sec < t) {
 7931|      0|                {
 7932|      0|                    now = time((time_t *)0);
 7933|      0|                }
 7934|      0|                if (now < t) {
 7935|      0|                    {
 7936|      0|                        tmp___1 = tartime(t);
 7937|      0|                        tmp___2 = gettext("%s: time stamp %s is %lu s in the future");
 7938|      0|                        error(0, 0, (char const *)tmp___2, file_name, tmp___1,
 7939|      0|                              (unsigned long)(t - now));
 7940|      0|                    }
 7941|      0|                }
 7942|      0|            }
 7943|      0|        }
 7944|      0|        return;
 7945|      0|    }
 7946|      0|}
 7947|       |static void set_stat(char const *file_name, struct stat const *stat_info,
 7948|       |                     struct stat const *cur_info, mode_t invert_permissions,
 7949|       |                     enum permstatus permstatus, char typeflag)
 7950|      0|{
 7951|      0|    struct utimbuf utimbuf;
 7952|      0|    int tmp;
 7953|      0|    int tmp___0;
 7954|      0|    int tmp___1;
 7955|       |
 7956|      0|    {
 7957|      0|        if ((int)typeflag != 50) {
 7958|      0|            if (!touch_option) {
 7959|      0|                if ((unsigned int)permstatus != 2U) {
 7960|      0|                    if (incremental_option) {
 7961|      0|                        utimbuf.actime = (__time_t)stat_info->st_atim.tv_sec;
 7962|      0|                    }
 7963|      0|                    else {
 7964|      0|                        utimbuf.actime = start_timespec.tv_sec;
 7965|      0|                    }
 7966|      0|                    {
 7967|      0|                        utimbuf.modtime = (__time_t)stat_info->st_mtim.tv_sec;
 7968|      0|                        tmp = utime(file_name, (struct utimbuf const *)(&utimbuf));
 7969|      0|                    }
 7970|      0|                    if (tmp < 0) {
 7971|      0|                        {
 7972|      0|                            utime_error(file_name);
 7973|      0|                        }
 7974|      0|                    }
 7975|      0|                    else {
 7976|      0|                        {
 7977|      0|                            check_time(file_name, utimbuf.actime);
 7978|      0|                            check_time(file_name, utimbuf.modtime);
 7979|      0|                        }
 7980|      0|                    }
 7981|      0|                }
 7982|      0|            }
 7983|      0|            {
 7984|      0|                set_mode(file_name, stat_info, cur_info, invert_permissions, permstatus,
 7985|      0|                         typeflag);
 7986|      0|            }
 7987|      0|        }
 7988|      0|        if (0 < same_owner_option) {
 7989|      0|            if ((unsigned int)permstatus != 2U) {
 7990|      0|                if ((int)typeflag == 50) {
 7991|      0|                    {
 7992|      0|                        tmp___0 = lchown(file_name, (__uid_t)stat_info->st_uid,
 7993|      0|                                         (__gid_t)stat_info->st_gid);
 7994|      0|                    }
 7995|      0|                    if (tmp___0 < 0) {
 7996|      0|                        {
 7997|      0|                            chown_error_details(file_name, (uid_t)stat_info->st_uid,
 7998|      0|                                                (gid_t)stat_info->st_gid);
 7999|      0|                        }
 8000|      0|                    }
 8001|      0|                }
 8002|      0|                else {
 8003|      0|                    {
 8004|      0|                        tmp___1 = chown(file_name, (__uid_t)stat_info->st_uid,
 8005|      0|                                        (__gid_t)stat_info->st_gid);
 8006|      0|                    }
 8007|      0|                    if (tmp___1 < 0) {
 8008|      0|                        {
 8009|      0|                            chown_error_details(file_name, (uid_t)stat_info->st_uid,
 8010|      0|                                                (gid_t)stat_info->st_gid);
 8011|      0|                        }
 8012|      0|                    }
 8013|      0|                    if (stat_info->st_mode & 3584U) {
 8014|      0|                        {
 8015|      0|                            set_mode(file_name, stat_info, (struct stat const *)0,
 8016|      0|                                     invert_permissions, permstatus, typeflag);
 8017|      0|                        }
 8018|      0|                    }
 8019|      0|                }
 8020|      0|            }
 8021|      0|        }
 8022|      0|        return;
 8023|      0|    }
 8024|      0|}
 8025|       |static void delay_set_stat(char const *file_name, struct stat const *stat_info,
 8026|       |                           mode_t invert_permissions,
 8027|       |                           enum permstatus permstatus)
 8028|      0|{
 8029|      0|    size_t file_name_len;
 8030|      0|    size_t tmp;
 8031|      0|    struct delayed_set_stat *data;
 8032|      0|    void *tmp___0;
 8033|       |
 8034|      0|    {
 8035|      0|        {
 8036|      0|            tmp = strlen(file_name);
 8037|      0|            file_name_len = tmp;
 8038|      0|            tmp___0 =
 8039|      0|                xmalloc(((unsigned long)(&((struct delayed_set_stat *)0)->file_name) +
 8040|      0|                         file_name_len) +
 8041|      0|                        1UL);
 8042|      0|            data = (struct delayed_set_stat *)tmp___0;
 8043|      0|            data->file_name_len = file_name_len;
 8044|      0|            strcpy((char * /* __restrict  */)(data->file_name),
 8045|      0|                   (char const * /* __restrict  */)file_name);
 8046|      0|            data->invert_permissions = invert_permissions;
 8047|      0|            data->permstatus = permstatus;
 8048|      0|            data->after_symlinks = (_Bool)0;
 8049|      0|            data->stat_info = (struct stat) * stat_info;
 8050|      0|            data->next = delayed_set_stat_head;
 8051|      0|            delayed_set_stat_head = data;
 8052|      0|        }
 8053|      0|        return;
 8054|      0|    }
 8055|      0|}
 8056|       |static void repair_delayed_set_stat(char const *dir,
 8057|       |                                    struct stat const *dir_stat_info)
 8058|      0|{
 8059|      0|    struct delayed_set_stat *data;
 8060|      0|    struct stat st;
 8061|      0|    int tmp;
 8062|      0|    char *tmp___0;
 8063|      0|    char *tmp___1;
 8064|      0|    void *__cil_tmp8;
 8065|      0|    char *__cil_tmp9;
 8066|       |
 8067|      0|    {
 8068|      0|        data = delayed_set_stat_head;
 8069|      0|        {
 8070|      0|            while (1) {
 8071|      0|while_continue: /* CIL Label */
 8072|      0|                ;
 8073|      0|                if (!data) {
 8074|      0|                    goto while_break;
 8075|      0|                }
 8076|      0|                {
 8077|      0|                    tmp = stat((char const * /* __restrict  */)(data->file_name),
 8078|      0|                               (struct stat * /* __restrict  */)(&st));
 8079|      0|                }
 8080|      0|                if (tmp != 0) {
 8081|      0|                    {
 8082|      0|                        stat_error((char const *)(data->file_name));
 8083|      0|                    }
 8084|      0|                    return;
 8085|      0|                }
 8086|      0|                if (st.st_dev == (__dev_t)dir_stat_info->st_dev) {
 8087|      0|                    if (st.st_ino == (__ino_t)dir_stat_info->st_ino) {
 8088|      0|                        data->stat_info = current_stat_info.stat;
 8089|      0|                        data->invert_permissions =
 8090|      0|                            (unsigned int)(((64 | (64 >> 3)) | ((64 >> 3) >> 3)) |
 8091|      0|                                           (((128 | (128 >> 3)) | ((128 >> 3) >> 3)) |
 8092|      0|                                            ((256 | (256 >> 3)) | ((256 >> 3) >> 3)))) &
 8093|      0|                            (current_stat_info.stat.st_mode ^ st.st_mode);
 8094|      0|                        data->permstatus = (enum permstatus)1;
 8095|      0|                        return;
 8096|      0|                    }
 8097|      0|                }
 8098|      0|                data = data->next;
 8099|      0|            }
 8100|      0|while_break: /* CIL Label */
 8101|      0|            ;
 8102|      0|        }
 8103|      0|        {
 8104|      0|            tmp___0 = quotearg_colon(dir);
 8105|      0|            tmp___1 = gettext("%s: Unexpected inconsistency when making directory");
 8106|      0|            error(0, 0, (char const *)tmp___1, tmp___0);
 8107|      0|            exit_status = 2;
 8108|      0|        }
 8109|      0|        return;
 8110|      0|    }
 8111|      0|}
 8112|       |static int make_directories(char *file_name)
 8113|      0|{
 8114|      0|    char *cursor0;
 8115|      0|    char *cursor;
 8116|      0|    int did_something;
 8117|      0|    int mode;
 8118|      0|    int invert_permissions;
 8119|      0|    int status;
 8120|      0|    int *tmp;
 8121|      0|    int tmp___0;
 8122|      0|    int *tmp___1;
 8123|       |
 8124|      0|    {
 8125|      0|        cursor0 = file_name + 0;
 8126|      0|        did_something = 0;
 8127|      0|        cursor = cursor0;
 8128|      0|        {
 8129|      0|            while (1) {
 8130|      0|while_continue: /* CIL Label */
 8131|      0|                ;
 8132|      0|                if (!*cursor) {
 8133|      0|                    goto while_break;
 8134|      0|                }
 8135|      0|                if (!((int)*cursor == 47)) {
 8136|      0|                    goto __Cont;
 8137|      0|                }
 8138|      0|                if ((unsigned long)cursor == (unsigned long)cursor0) {
 8139|      0|                    goto __Cont;
 8140|      0|                }
 8141|      0|                else {
 8142|      0|                    if ((int)*(cursor + -1) == 47) {
 8143|      0|                        goto __Cont;
 8144|      0|                    }
 8145|      0|                }
 8146|      0|                if ((int)*(cursor + -1) == 46) {
 8147|      0|                    if ((unsigned long)cursor == (unsigned long)(cursor0 + 1)) {
 8148|      0|                        goto __Cont;
 8149|      0|                    }
 8150|      0|                    else {
 8151|      0|                        if ((int)*(cursor + -2) == 47) {
 8152|      0|                            goto __Cont;
 8153|      0|                        }
 8154|      0|                        else {
 8155|      0|                            if ((int)*(cursor + -2) == 46) {
 8156|      0|                                if ((unsigned long)cursor == (unsigned long)(cursor0 + 2)) {
 8157|      0|                                    goto __Cont;
 8158|      0|                                }
 8159|      0|                                else {
 8160|      0|                                    if ((int)*(cursor + -3) == 47) {
 8161|      0|                                        goto __Cont;
 8162|      0|                                    }
 8163|      0|                                }
 8164|      0|                            }
 8165|      0|                        }
 8166|      0|                    }
 8167|      0|                }
 8168|      0|                *cursor = (char)'\000';
 8169|      0|                mode =
 8170|      0|                    (int)((unsigned int)(((64 | (64 >> 3)) | ((64 >> 3) >> 3)) |
 8171|      0|                                         (((128 | (128 >> 3)) | ((128 >> 3) >> 3)) |
 8172|      0|                                          ((256 | (256 >> 3)) | ((256 >> 3) >> 3)))) &
 8173|      0|                          ~newdir_umask);
 8174|      0|                if (we_are_root) {
 8175|      0|                    invert_permissions = 0;
 8176|      0|                }
 8177|      0|                else {
 8178|      0|                    invert_permissions = 192 & ~mode;
 8179|      0|                }
 8180|      0|                {
 8181|      0|                    status = mkdir((char const *)file_name,
 8182|      0|                                   (__mode_t)(mode ^ invert_permissions));
 8183|      0|                }
 8184|      0|                if (status == 0) {
 8185|      0|                    {
 8186|      0|                        delay_set_stat((char const *)file_name,
 8187|      0|                                       (struct stat const *)(&current_stat_info.stat),
 8188|      0|                                       (mode_t)invert_permissions, (enum permstatus)2);
 8189|      0|                        print_for_mkdir(file_name, (int)(cursor - file_name), (mode_t)mode);
 8190|      0|                        did_something = 1;
 8191|      0|                        *cursor = (char)'/';
 8192|      0|                    }
 8193|      0|                    goto __Cont;
 8194|      0|                }
 8195|      0|                {
 8196|      0|                    *cursor = (char)'/';
 8197|      0|                    tmp___1 = __errno_location();
 8198|      0|                }
 8199|      0|                if (*tmp___1 == 17) {
 8200|      0|                    goto __Cont;
 8201|      0|                }
 8202|      0|                else {
 8203|      0|                    {
 8204|      0|                        tmp = __errno_location();
 8205|      0|                    }
 8206|      0|                    if (*tmp == 38) {
 8207|      0|                        goto _L___3;
 8208|      0|                    }
 8209|      0|                    else {
 8210|      0|                        if (0) {
 8211|      0|_L___3 : { /* CIL Label */
 8212|      0|                                tmp___0 = access((char const *)file_name, 2);
 8213|      0|                            }
 8214|      0|                            if (tmp___0 == 0) {
 8215|      0|                                goto __Cont;
 8216|      0|                            }
 8217|      0|                        }
 8218|      0|                    }
 8219|      0|                }
 8220|      0|                goto while_break;
 8221|      0|__Cont:
 8222|      0|                cursor++;
 8223|      0|            }
 8224|      0|while_break: /* CIL Label */
 8225|      0|            ;
 8226|      0|        }
 8227|      0|        return (did_something);
 8228|      0|    }
 8229|      0|}
 8230|       |static _Bool file_newer_p(char const *file_name,
 8231|       |                          struct tar_stat_info *tar_stat)
 8232|      0|{
 8233|      0|    struct stat st;
 8234|      0|    int tmp;
 8235|      0|    void *__cil_tmp5;
 8236|       |
 8237|      0|    {
 8238|      0|        {
 8239|      0|            tmp = stat((char const * /* __restrict  */)file_name,
 8240|      0|                       (struct stat * /* __restrict  */)(&st));
 8241|      0|        }
 8242|      0|        if (tmp) {
 8243|      0|            {
 8244|      0|                stat_warn(file_name);
 8245|      0|            }
 8246|      0|            return ((_Bool)1);
 8247|      0|        }
 8248|      0|        if (!((st.st_mode & 61440U) == 16384U)) {
 8249|      0|            if (st.st_mtim.tv_sec >= tar_stat->stat.st_mtim.tv_sec) {
 8250|      0|                return ((_Bool)1);
 8251|      0|            }
 8252|      0|        }
 8253|      0|        return ((_Bool)0);
 8254|      0|    }
 8255|      0|}
 8256|       |static int prepare_to_extract(char const *file_name)
 8257|      0|{
 8258|      0|    int tmp;
 8259|      0|    int *tmp___0;
 8260|      0|    int *tmp___1;
 8261|      0|    char *tmp___2;
 8262|      0|    _Bool tmp___3;
 8263|      0|    char *__cil_tmp7;
 8264|       |
 8265|      0|    {
 8266|      0|        if (to_stdout_option) {
 8267|      0|            return (0);
 8268|      0|        }
 8269|      0|        {
 8270|      0|            if ((unsigned int)old_files_option == 3U) {
 8271|      0|                goto case_3;
 8272|      0|            }
 8273|      0|            if ((unsigned int)old_files_option == 5U) {
 8274|      0|                goto case_5;
 8275|      0|            }
 8276|      0|            goto switch_default;
 8277|      0|case_3 : { /* CIL Label */
 8278|      0|                tmp = remove_any_file(file_name,
 8279|      0|                                      (enum remove_option)recursive_unlink_option);
 8280|      0|            }
 8281|      0|            if (!tmp) {
 8282|      0|                {
 8283|      0|                    tmp___0 = __errno_location();
 8284|      0|                }
 8285|      0|                if (*tmp___0) {
 8286|      0|                    {
 8287|      0|                        tmp___1 = __errno_location();
 8288|      0|                    }
 8289|      0|                    if (*tmp___1 != 2) {
 8290|      0|                        {
 8291|      0|                            unlink_error(file_name);
 8292|      0|                        }
 8293|      0|                        return (0);
 8294|      0|                    }
 8295|      0|                }
 8296|      0|            }
 8297|      0|            goto switch_break;
 8298|      0|case_5 : { /* CIL Label */
 8299|      0|                tmp___3 = file_newer_p(file_name, &current_stat_info);
 8300|      0|            }
 8301|      0|            if (tmp___3) {
 8302|      0|                {
 8303|      0|                    tmp___2 = gettext("Current `%s\' is newer");
 8304|      0|                    error(0, 0, (char const *)tmp___2, file_name);
 8305|      0|                }
 8306|      0|                return (0);
 8307|      0|            }
 8308|      0|            goto switch_break;
 8309|      0|switch_default: /* CIL Label */
 8310|      0|            goto switch_break;
 8311|      0|switch_break: /* CIL Label */
 8312|      0|            ;
 8313|      0|        }
 8314|      0|        return (1);
 8315|      0|    }
 8316|      0|}
 8317|       |static int maybe_recoverable(char *file_name, int *interdir_made)
 8318|      0|{
 8319|      0|    int e;
 8320|      0|    int *tmp;
 8321|      0|    int *tmp___0;
 8322|      0|    int *tmp___1;
 8323|      0|    _Bool tmp___2;
 8324|      0|    int r;
 8325|      0|    int tmp___3;
 8326|      0|    int *tmp___4;
 8327|      0|    int *tmp___5;
 8328|      0|    int tmp___6;
 8329|       |
 8330|      0|    {
 8331|      0|        {
 8332|      0|            tmp = __errno_location();
 8333|      0|            e = *tmp;
 8334|      0|        }
 8335|      0|        if (*interdir_made) {
 8336|      0|            return (0);
 8337|      0|        }
 8338|      0|        {
 8339|      0|            tmp___0 = __errno_location();
 8340|      0|        }
 8341|      0|        {
 8342|      0|            if (*tmp___0 == 17) {
 8343|      0|                goto case_17;
 8344|      0|            }
 8345|      0|            if (*tmp___0 == 2) {
 8346|      0|                goto case_2___0;
 8347|      0|            }
 8348|      0|            goto switch_default;
 8349|      0|case_17 : { /* CIL Label */
 8350|      0|                if ((unsigned int)old_files_option == 4U) {
 8351|      0|                    goto case_4;
 8352|      0|                }
 8353|      0|                if ((unsigned int)old_files_option == 5U) {
 8354|      0|                    goto case_5;
 8355|      0|                }
 8356|      0|                if ((unsigned int)old_files_option == 0U) {
 8357|      0|                    goto case_0;
 8358|      0|                }
 8359|      0|                if ((unsigned int)old_files_option == 1U) {
 8360|      0|                    goto case_0;
 8361|      0|                }
 8362|      0|                if ((unsigned int)old_files_option == 2U) {
 8363|      0|                    goto case_0;
 8364|      0|                }
 8365|      0|                if ((unsigned int)old_files_option == 3U) {
 8366|      0|                    goto case_3;
 8367|      0|                }
 8368|      0|                goto switch_break___0;
 8369|      0|case_4: /* CIL Label */
 8370|      0|                return (0);
 8371|      0|case_5 : { /* CIL Label */
 8372|      0|                    tmp___2 = file_newer_p((char const *)file_name, &current_stat_info);
 8373|      0|                }
 8374|      0|                if (tmp___2) {
 8375|      0|                    {
 8376|      0|                        tmp___1 = __errno_location();
 8377|      0|                        *tmp___1 = e;
 8378|      0|                    }
 8379|      0|                    return (0);
 8380|      0|                }
 8381|      0|case_0:  /* CIL Label */
 8382|      0|case_1:  /* CIL Label */
 8383|      0|case_2 : { /* CIL Label */
 8384|      0|                    tmp___3 = remove_any_file((char const *)file_name, (enum remove_option)0);
 8385|      0|                    r = tmp___3;
 8386|      0|                    tmp___4 = __errno_location();
 8387|      0|                    *tmp___4 = 17;
 8388|      0|                }
 8389|      0|                return (r);
 8390|      0|case_3: /* CIL Label */
 8391|      0|                goto switch_break___0;
 8392|      0|switch_break___0: /* CIL Label */
 8393|      0|                ;
 8394|      0|            }
 8395|      0|case_2___0 : { /* CIL Label */
 8396|      0|                tmp___6 = make_directories(file_name);
 8397|      0|            }
 8398|      0|            if (!tmp___6) {
 8399|      0|                {
 8400|      0|                    tmp___5 = __errno_location();
 8401|      0|                    *tmp___5 = 2;
 8402|      0|                }
 8403|      0|                return (0);
 8404|      0|            }
 8405|      0|            *interdir_made = 1;
 8406|      0|            return (1);
 8407|      0|switch_default: /* CIL Label */
 8408|      0|            return (0);
 8409|      0|switch_break: /* CIL Label */
 8410|      0|            ;
 8411|      0|        }
 8412|      0|    }
 8413|      0|}
 8414|       |static void apply_nonancestor_delayed_set_stat(char const *file_name,
 8415|       |        _Bool after_symlinks)
 8416|      0|{
 8417|      0|    size_t file_name_len;
 8418|      0|    size_t tmp;
 8419|      0|    _Bool check_for_renamed_directories;
 8420|      0|    struct delayed_set_stat *data;
 8421|      0|    _Bool skip_this_one;
 8422|      0|    struct stat st;
 8423|      0|    struct stat const *cur_info;
 8424|      0|    int tmp___0;
 8425|      0|    char *tmp___1;
 8426|      0|    char *tmp___2;
 8427|      0|    int tmp___3;
 8428|      0|    void *__cil_tmp14;
 8429|      0|    char *__cil_tmp15;
 8430|      0|    char *__cil_tmp16;
 8431|       |
 8432|      0|    {
 8433|      0|        {
 8434|      0|            tmp = strlen(file_name);
 8435|      0|            file_name_len = tmp;
 8436|      0|            check_for_renamed_directories = (_Bool)0;
 8437|      0|        }
 8438|      0|        {
 8439|      0|            while (1) {
 8440|      0|while_continue: /* CIL Label */
 8441|      0|                ;
 8442|      0|                if (!delayed_set_stat_head) {
 8443|      0|                    goto while_break;
 8444|      0|                }
 8445|      0|                data = delayed_set_stat_head;
 8446|      0|                skip_this_one = (_Bool)0;
 8447|      0|                cur_info = (struct stat const *)0;
 8448|      0|                check_for_renamed_directories = (_Bool)(
 8449|      0|                                                    (int)check_for_renamed_directories | (int)data->after_symlinks);
 8450|      0|                if ((int)after_symlinks < (int)data->after_symlinks) {
 8451|      0|                    goto while_break;
 8452|      0|                }
 8453|      0|                else {
 8454|      0|                    if (data->file_name_len < file_name_len) {
 8455|      0|                        if (*(file_name + data->file_name_len)) {
 8456|      0|                            if ((int const) * (file_name + data->file_name_len) == 47) {
 8457|      0|                                goto _L___3;
 8458|      0|                            }
 8459|      0|                            else {
 8460|      0|                                if ((int const) * (file_name + (data->file_name_len - 1UL)) ==
 8461|      0|                                        47) {
 8462|      0|_L___3 : { /* CIL Label */
 8463|      0|                                        tmp___0 = memcmp((void const *)file_name,
 8464|      0|                                                         (void const *)(data->file_name),
 8465|      0|                                                         data->file_name_len);
 8466|      0|                                    }
 8467|      0|                                    if (tmp___0 == 0) {
 8468|      0|                                        goto while_break;
 8469|      0|                                    }
 8470|      0|                                }
 8471|      0|                            }
 8472|      0|                        }
 8473|      0|                    }
 8474|      0|                }
 8475|      0|                if (check_for_renamed_directories) {
 8476|      0|                    {
 8477|      0|                        cur_info = (struct stat const *)(&st);
 8478|      0|                        tmp___3 = stat((char const * /* __restrict  */)(data->file_name),
 8479|      0|                                       (struct stat * /* __restrict  */)(&st));
 8480|      0|                    }
 8481|      0|                    if (tmp___3 != 0) {
 8482|      0|                        {
 8483|      0|                            stat_error((char const *)(data->file_name));
 8484|      0|                            skip_this_one = (_Bool)1;
 8485|      0|                        }
 8486|      0|                    }
 8487|      0|                    else {
 8488|      0|                        if (st.st_dev == data->stat_info.st_dev) {
 8489|      0|                            if (!(st.st_ino == data->stat_info.st_ino)) {
 8490|      0|                                {
 8491|      0|                                    tmp___1 = quotearg_colon((char const *)(data->file_name));
 8492|      0|                                    tmp___2 = gettext("%s: Directory renamed before its status "
 8493|      0|                                                      "could be extracted");
 8494|      0|                                    error(0, 0, (char const *)tmp___2, tmp___1);
 8495|      0|                                    exit_status = 2;
 8496|      0|                                    skip_this_one = (_Bool)1;
 8497|      0|                                }
 8498|      0|                            }
 8499|      0|                        }
 8500|      0|                        else {
 8501|      0|                            {
 8502|      0|                                tmp___1 = quotearg_colon((char const *)(data->file_name));
 8503|      0|                                tmp___2 = gettext("%s: Directory renamed before its status "
 8504|      0|                                                  "could be extracted");
 8505|      0|                                error(0, 0, (char const *)tmp___2, tmp___1);
 8506|      0|                                exit_status = 2;
 8507|      0|                                skip_this_one = (_Bool)1;
 8508|      0|                            }
 8509|      0|                        }
 8510|      0|                    }
 8511|      0|                }
 8512|      0|                if (!skip_this_one) {
 8513|      0|                    {
 8514|      0|                        set_stat((char const *)(data->file_name),
 8515|      0|                                 (struct stat const *)(&data->stat_info), cur_info,
 8516|      0|                                 data->invert_permissions, data->permstatus, (char)'5');
 8517|      0|                    }
 8518|      0|                }
 8519|      0|                {
 8520|      0|                    delayed_set_stat_head = data->next;
 8521|      0|                    free((void *)data);
 8522|      0|                }
 8523|      0|            }
 8524|      0|while_break: /* CIL Label */
 8525|      0|            ;
 8526|      0|        }
 8527|      0|        return;
 8528|      0|    }
 8529|      0|}
 8530|       |static int conttype_diagnosed;
 8531|       |void extract_archive(void)
 8532|      0|{
 8533|      0|    union block *data_block;
 8534|      0|    int fd;
 8535|      0|    int status;
 8536|      0|    size_t count;
 8537|      0|    size_t written;
 8538|      0|    int openflag;
 8539|      0|    mode_t mode;
 8540|      0|    off_t size;
 8541|      0|    int interdir_made;
 8542|      0|    char typeflag;
 8543|      0|    char *file_name;
 8544|      0|    int tmp;
 8545|      0|    size_t prefix_len;
 8546|      0|    size_t tmp___0;
 8547|      0|    int e;
 8548|      0|    int *tmp___1;
 8549|      0|    char *tmp___2;
 8550|      0|    char *tmp___3;
 8551|      0|    _Bool tmp___4;
 8552|      0|    _Bool tmp___5;
 8553|      0|    int tmp___6;
 8554|      0|    char *tmp___7;
 8555|      0|    int tmp___8;
 8556|      0|    char *tmp___9;
 8557|      0|    int *tmp___10;
 8558|      0|    int tmp___11;
 8559|      0|    int tmp___12;
 8560|      0|    struct stat st;
 8561|      0|    int tmp___13;
 8562|      0|    struct delayed_set_stat *h;
 8563|      0|    struct delayed_symlink *p;
 8564|      0|    size_t tmp___14;
 8565|      0|    void *tmp___15;
 8566|      0|    size_t tmp___16;
 8567|      0|    void *tmp___17;
 8568|      0|    int tmp___18;
 8569|      0|    int tmp___19;
 8570|      0|    char *tmp___20;
 8571|      0|    int tmp___21;
 8572|      0|    int tmp___22;
 8573|      0|    _Bool tmp___23;
 8574|      0|    int tmp___24;
 8575|      0|    char const *link_name;
 8576|      0|    char *tmp___25;
 8577|      0|    struct stat st1;
 8578|      0|    struct stat st2;
 8579|      0|    int e___0;
 8580|      0|    struct delayed_symlink *ds;
 8581|      0|    struct string_list *p___0;
 8582|      0|    size_t tmp___26;
 8583|      0|    void *tmp___27;
 8584|      0|    int tmp___28;
 8585|      0|    int tmp___29;
 8586|      0|    int *tmp___30;
 8587|      0|    int *tmp___31;
 8588|      0|    int tmp___32;
 8589|      0|    int tmp___33;
 8590|      0|    int tmp___34;
 8591|      0|    int tmp___35;
 8592|      0|    int tmp___36;
 8593|      0|    int tmp___37;
 8594|      0|    struct stat st___0;
 8595|      0|    int tmp___38;
 8596|      0|    int *tmp___39;
 8597|      0|    int *tmp___40;
 8598|      0|    int tmp___41;
 8599|      0|    int *tmp___42;
 8600|      0|    char const *tmp___43;
 8601|      0|    char *tmp___44;
 8602|      0|    char *tmp___45;
 8603|      0|    char *tmp___46;
 8604|      0|    char *tmp___47;
 8605|      0|    char *tmp___48;
 8606|      0|    char *tmp___49;
 8607|      0|    int tmp___50;
 8608|      0|    int tmp___51;
 8609|      0|    int tmp___52;
 8610|      0|    int tmp___53;
 8611|      0|    int tmp___54;
 8612|      0|    void *__cil_tmp80;
 8613|      0|    void *__cil_tmp81;
 8614|      0|    void *__cil_tmp82;
 8615|      0|    void *__cil_tmp83;
 8616|      0|    char *__cil_tmp84;
 8617|      0|    char *__cil_tmp85;
 8618|      0|    char *__cil_tmp86;
 8619|      0|    char *__cil_tmp87;
 8620|      0|    char *__cil_tmp88;
 8621|      0|    char *__cil_tmp89;
 8622|      0|    char *__cil_tmp90;
 8623|      0|    char *__cil_tmp91;
 8624|       |
 8625|      0|    {
 8626|      0|        {
 8627|      0|            interdir_made = 0;
 8628|      0|            set_next_block_after(current_header);
 8629|      0|            decode_header(current_header, &current_stat_info, &current_format, 1);
 8630|      0|        }
 8631|      0|        if (interactive_option) {
 8632|      0|            {
 8633|      0|                tmp = confirm("extract", (char const *)current_stat_info.file_name);
 8634|      0|            }
 8635|      0|            if (!tmp) {
 8636|      0|                {
 8637|      0|                    skip_member();
 8638|      0|                }
 8639|      0|                return;
 8640|      0|            }
 8641|      0|        }
 8642|      0|        if (verbose_option) {
 8643|      0|            {
 8644|      0|                print_header(&current_stat_info, (off_t)-1);
 8645|      0|            }
 8646|      0|        }
 8647|      0|        {
 8648|      0|            file_name = safer_name_suffix((char const *)current_stat_info.file_name,
 8649|      0|                                          (_Bool)0);
 8650|      0|        }
 8651|      0|        if (strip_path_elements) {
 8652|      0|            {
 8653|      0|                tmp___0 =
 8654|      0|                    stripped_prefix_len((char const *)file_name, strip_path_elements);
 8655|      0|                prefix_len = tmp___0;
 8656|      0|            }
 8657|      0|            if (prefix_len == 0xffffffffffffffffUL) {
 8658|      0|                {
 8659|      0|                    skip_member();
 8660|      0|                }
 8661|      0|                return;
 8662|      0|            }
 8663|      0|            file_name += prefix_len;
 8664|      0|        }
 8665|      0|        {
 8666|      0|            apply_nonancestor_delayed_set_stat((char const *)file_name, (_Bool)0);
 8667|      0|        }
 8668|      0|        if (backup_option) {
 8669|      0|            if (!to_stdout_option) {
 8670|      0|                {
 8671|      0|                    tmp___4 = maybe_backup_file((char const *)file_name, 0);
 8672|      0|                }
 8673|      0|                if (!tmp___4) {
 8674|      0|                    {
 8675|      0|                        tmp___1 = __errno_location();
 8676|      0|                        e = *tmp___1;
 8677|      0|                        tmp___2 = quotearg_colon((char const *)file_name);
 8678|      0|                        tmp___3 = gettext("%s: Was unable to backup this file");
 8679|      0|                        error(0, e, (char const *)tmp___3, tmp___2);
 8680|      0|                        exit_status = 2;
 8681|      0|                        skip_member();
 8682|      0|                    }
 8683|      0|                    return;
 8684|      0|                }
 8685|      0|            }
 8686|      0|        }
 8687|      0|        {
 8688|      0|            tmp___5 = sparse_member_p(&current_stat_info);
 8689|      0|        }
 8690|      0|        if (tmp___5) {
 8691|      0|            tmp___50 = 'S';
 8692|      0|        }
 8693|      0|        else {
 8694|      0|            tmp___50 = (int)current_header->header.typeflag;
 8695|      0|        }
 8696|      0|        typeflag = (char)tmp___50;
 8697|      0|        {
 8698|      0|            if ((int)typeflag == 83) {
 8699|      0|                goto case_83;
 8700|      0|            }
 8701|      0|            if ((int)typeflag == 0) {
 8702|      0|                goto case_83;
 8703|      0|            }
 8704|      0|            if ((int)typeflag == 48) {
 8705|      0|                goto case_83;
 8706|      0|            }
 8707|      0|            if ((int)typeflag == 55) {
 8708|      0|                goto case_83;
 8709|      0|            }
 8710|      0|            if ((int)typeflag == 50) {
 8711|      0|                goto case_50;
 8712|      0|            }
 8713|      0|            if ((int)typeflag == 49) {
 8714|      0|                goto case_49;
 8715|      0|            }
 8716|      0|            if ((int)typeflag == 51) {
 8717|      0|                goto case_51;
 8718|      0|            }
 8719|      0|            if ((int)typeflag == 52) {
 8720|      0|                goto case_52;
 8721|      0|            }
 8722|      0|            if ((int)typeflag == 54) {
 8723|      0|                goto case_54;
 8724|      0|            }
 8725|      0|            if ((int)typeflag == 53) {
 8726|      0|                goto really_dir;
 8727|      0|            }
 8728|      0|            if ((int)typeflag == 68) {
 8729|      0|                goto really_dir;
 8730|      0|            }
 8731|      0|            if ((int)typeflag == 86) {
 8732|      0|                goto case_86;
 8733|      0|            }
 8734|      0|            if ((int)typeflag == 78) {
 8735|      0|                goto case_78;
 8736|      0|            }
 8737|      0|            if ((int)typeflag == 77) {
 8738|      0|                goto case_77;
 8739|      0|            }
 8740|      0|            if ((int)typeflag == 76) {
 8741|      0|                goto case_76;
 8742|      0|            }
 8743|      0|            if ((int)typeflag == 75) {
 8744|      0|                goto case_76;
 8745|      0|            }
 8746|      0|            goto switch_default;
 8747|      0|case_83: /* CIL Label */
 8748|      0|case_0:  /* CIL Label */
 8749|      0|case_48: /* CIL Label */
 8750|      0|case_55: /* CIL Label */
 8751|      0|            if (current_stat_info.had_trailing_slash) {
 8752|      0|                goto really_dir;
 8753|      0|            }
 8754|      0|again_file:
 8755|      0|            if ((unsigned int)old_files_option == 2U) {
 8756|      0|                tmp___51 = 512;
 8757|      0|            }
 8758|      0|            else {
 8759|      0|                tmp___51 = 128;
 8760|      0|            }
 8761|      0|            openflag = 65 | tmp___51;
 8762|      0|            mode = (current_stat_info.stat.st_mode &
 8763|      0|                    (unsigned int)(((64 | (64 >> 3)) | ((64 >> 3) >> 3)) |
 8764|      0|                                   (((128 | (128 >> 3)) | ((128 >> 3) >> 3)) |
 8765|      0|                                    ((256 | (256 >> 3)) | ((256 >> 3) >> 3))))) &
 8766|      0|                   ~current_umask;
 8767|      0|            if (to_stdout_option) {
 8768|      0|                fd = 1;
 8769|      0|                goto extract_file;
 8770|      0|            }
 8771|      0|            {
 8772|      0|                tmp___6 = prepare_to_extract((char const *)file_name);
 8773|      0|            }
 8774|      0|            if (!tmp___6) {
 8775|      0|                {
 8776|      0|                    skip_member();
 8777|      0|                }
 8778|      0|                if (backup_option) {
 8779|      0|                    {
 8780|      0|                        undo_last_backup();
 8781|      0|                    }
 8782|      0|                }
 8783|      0|                goto switch_break;
 8784|      0|            }
 8785|      0|            if ((int)typeflag == 55) {
 8786|      0|                if (!conttype_diagnosed) {
 8787|      0|                    {
 8788|      0|                        conttype_diagnosed = 1;
 8789|      0|                        tmp___7 = gettext("Extracting contiguous files as regular files");
 8790|      0|                        error(0, 0, (char const *)tmp___7);
 8791|      0|                    }
 8792|      0|                }
 8793|      0|            }
 8794|      0|            {
 8795|      0|                fd = open((char const *)file_name, openflag, mode);
 8796|      0|            }
 8797|      0|            if (fd < 0) {
 8798|      0|                {
 8799|      0|                    tmp___8 = maybe_recoverable(file_name, &interdir_made);
 8800|      0|                }
 8801|      0|                if (tmp___8) {
 8802|      0|                    goto again_file;
 8803|      0|                }
 8804|      0|                {
 8805|      0|                    open_error((char const *)file_name);
 8806|      0|                    skip_member();
 8807|      0|                }
 8808|      0|                if (backup_option) {
 8809|      0|                    {
 8810|      0|                        undo_last_backup();
 8811|      0|                    }
 8812|      0|                }
 8813|      0|                goto switch_break;
 8814|      0|            }
 8815|      0|extract_file:
 8816|      0|            if (current_stat_info.is_sparse) {
 8817|      0|                {
 8818|      0|                    sparse_extract_file(fd, &current_stat_info, &size);
 8819|      0|                }
 8820|      0|            }
 8821|      0|            else {
 8822|      0|                size = current_stat_info.stat.st_size;
 8823|      0|                {
 8824|      0|                    while (1) {
 8825|      0|while_continue: /* CIL Label */
 8826|      0|                        ;
 8827|      0|                        if (!(size > 0L)) {
 8828|      0|                            goto while_break;
 8829|      0|                        }
 8830|      0|                        if (multi_volume_option) {
 8831|      0|                            {
 8832|      0|                                assign_string(&save_name,
 8833|      0|                                              (char const *)current_stat_info.file_name);
 8834|      0|                                save_totsize = current_stat_info.stat.st_size;
 8835|      0|                                save_sizeleft = size;
 8836|      0|                            }
 8837|      0|                        }
 8838|      0|                        {
 8839|      0|                            data_block = find_next_block();
 8840|      0|                        }
 8841|      0|                        if (!data_block) {
 8842|      0|                            {
 8843|      0|                                tmp___9 = gettext("Unexpected EOF in archive");
 8844|      0|                                error(0, 0, (char const *)tmp___9);
 8845|      0|                                exit_status = 2;
 8846|      0|                            }
 8847|      0|                            goto while_break;
 8848|      0|                        }
 8849|      0|                        {
 8850|      0|                            written = available_space_after(data_block);
 8851|      0|                        }
 8852|      0|                        if (written > (size_t)size) {
 8853|      0|                            written = (size_t)size;
 8854|      0|                        }
 8855|      0|                        {
 8856|      0|                            tmp___10 = __errno_location();
 8857|      0|                            *tmp___10 = 0;
 8858|      0|                            count =
 8859|      0|                                full_write(fd, (void const *)(data_block->buffer), written);
 8860|      0|                            size = (off_t)((size_t)size - count);
 8861|      0|                            set_next_block_after(
 8862|      0|                                (union block *)((data_block->buffer + written) - 1));
 8863|      0|                        }
 8864|      0|                        if (count != written) {
 8865|      0|                            {
 8866|      0|                                write_error_details((char const *)file_name, count, written);
 8867|      0|                            }
 8868|      0|                            goto while_break;
 8869|      0|                        }
 8870|      0|                    }
 8871|      0|while_break: /* CIL Label */
 8872|      0|                    ;
 8873|      0|                }
 8874|      0|            }
 8875|      0|            {
 8876|      0|                skip_file(size);
 8877|      0|            }
 8878|      0|            if (multi_volume_option) {
 8879|      0|                {
 8880|      0|                    assign_string(&save_name, (char const *)0);
 8881|      0|                }
 8882|      0|            }
 8883|      0|            if (to_stdout_option) {
 8884|      0|                goto switch_break;
 8885|      0|            }
 8886|      0|            {
 8887|      0|                status = close(fd);
 8888|      0|            }
 8889|      0|            if (status < 0) {
 8890|      0|                {
 8891|      0|                    close_error((char const *)file_name);
 8892|      0|                }
 8893|      0|                if (backup_option) {
 8894|      0|                    {
 8895|      0|                        undo_last_backup();
 8896|      0|                    }
 8897|      0|                }
 8898|      0|            }
 8899|      0|            if ((unsigned int)old_files_option == 2U) {
 8900|      0|                tmp___52 = 0;
 8901|      0|            }
 8902|      0|            else {
 8903|      0|                tmp___52 = 1;
 8904|      0|            }
 8905|      0|            {
 8906|      0|                set_stat((char const *)file_name,
 8907|      0|                         (struct stat const *)(&current_stat_info.stat),
 8908|      0|                         (struct stat const *)0, (mode_t)0, (enum permstatus)tmp___52,
 8909|      0|                         typeflag);
 8910|      0|            }
 8911|      0|            goto switch_break;
 8912|      0|case_50 : { /* CIL Label */
 8913|      0|                tmp___11 = prepare_to_extract((char const *)file_name);
 8914|      0|            }
 8915|      0|            if (!tmp___11) {
 8916|      0|                goto switch_break;
 8917|      0|            }
 8918|      0|            if (absolute_names_option) {
 8919|      0|                goto _L;
 8920|      0|            }
 8921|      0|            else {
 8922|      0|                if ((int)*(current_stat_info.link_name + 0) == 47) {
 8923|      0|                    goto _L___0;
 8924|      0|                }
 8925|      0|                else {
 8926|      0|                    {
 8927|      0|                        tmp___23 =
 8928|      0|                            contains_dot_dot((char const *)current_stat_info.link_name);
 8929|      0|                    }
 8930|      0|                    if (tmp___23) {
 8931|      0|_L___0 : {
 8932|      0|                            while (1) {
 8933|      0|while_continue___0: /* CIL Label */
 8934|      0|                                ;
 8935|      0|                                {
 8936|      0|                                    fd = open((char const *)file_name, 193, 0);
 8937|      0|                                }
 8938|      0|                                if (!(fd < 0)) {
 8939|      0|                                    goto while_break___0;
 8940|      0|                                }
 8941|      0|                                {
 8942|      0|                                    tmp___13 = maybe_recoverable(file_name, &interdir_made);
 8943|      0|                                }
 8944|      0|                                if (!tmp___13) {
 8945|      0|                                    goto while_break___0;
 8946|      0|                                }
 8947|      0|                            }
 8948|      0|while_break___0: /* CIL Label */
 8949|      0|                            ;
 8950|      0|                        }
 8951|      0|                        status = -1;
 8952|      0|                        if (fd < 0) {
 8953|      0|                            {
 8954|      0|                                open_error((char const *)file_name);
 8955|      0|                            }
 8956|      0|                        }
 8957|      0|                        else {
 8958|      0|                            {
 8959|      0|                                tmp___22 = fstat(fd, &st);
 8960|      0|                            }
 8961|      0|                            if (tmp___22 != 0) {
 8962|      0|                                {
 8963|      0|                                    stat_error((char const *)file_name);
 8964|      0|                                    close(fd);
 8965|      0|                                }
 8966|      0|                            }
 8967|      0|                            else {
 8968|      0|                                {
 8969|      0|                                    tmp___21 = close(fd);
 8970|      0|                                }
 8971|      0|                                if (tmp___21 != 0) {
 8972|      0|                                    {
 8973|      0|                                        close_error((char const *)file_name);
 8974|      0|                                    }
 8975|      0|                                }
 8976|      0|                                else {
 8977|      0|                                    {
 8978|      0|                                        tmp___14 =
 8979|      0|                                            strlen((char const *)current_stat_info.link_name);
 8980|      0|                                        tmp___15 =
 8981|      0|                                            xmalloc(((unsigned long)(&((struct delayed_symlink *)0)
 8982|      0|                                                                     ->target) +
 8983|      0|                                                     tmp___14) +
 8984|      0|                                                    1UL);
 8985|      0|                                        p = (struct delayed_symlink *)tmp___15;
 8986|      0|                                        p->next = delayed_symlink_head;
 8987|      0|                                        delayed_symlink_head = p;
 8988|      0|                                        p->dev = st.st_dev;
 8989|      0|                                        p->ino = st.st_ino;
 8990|      0|                                        p->mtime = st.st_mtim.tv_sec;
 8991|      0|                                        p->uid = current_stat_info.stat.st_uid;
 8992|      0|                                        p->gid = current_stat_info.stat.st_gid;
 8993|      0|                                        tmp___16 = strlen((char const *)file_name);
 8994|      0|                                        tmp___17 = xmalloc(
 8995|      0|                                                       ((unsigned long)(&((struct string_list *)0)->string) +
 8996|      0|                                                        tmp___16) +
 8997|      0|                                                       1UL);
 8998|      0|                                        p->sources = (struct string_list *)tmp___17;
 8999|      0|                                        (p->sources)->next = (struct string_list *)0;
 9000|      0|                                        strcpy((char * /* __restrict  */)((p->sources)->string),
 9001|      0|                                               (char const * /* __restrict  */)file_name);
 9002|      0|                                        strcpy((char * /* __restrict  */)(p->target),
 9003|      0|                                               (char const * /* __restrict  */)
 9004|      0|                                               current_stat_info.link_name);
 9005|      0|                                        h = delayed_set_stat_head;
 9006|      0|                                    }
 9007|      0|                                    if (h) {
 9008|      0|                                        if (!h->after_symlinks) {
 9009|      0|                                            {
 9010|      0|                                                tmp___19 = strncmp((char const *)file_name,
 9011|      0|                                                                   (char const *)(h->file_name),
 9012|      0|                                                                   h->file_name_len);
 9013|      0|                                            }
 9014|      0|                                            if (tmp___19 == 0) {
 9015|      0|                                                if ((int)*(file_name + h->file_name_len) == 47) {
 9016|      0|                                                    {
 9017|      0|                                                        tmp___20 = base_name((char const *)file_name);
 9018|      0|                                                    }
 9019|      0|                                                    if ((unsigned long)tmp___20 ==
 9020|      0|                                                            (unsigned long)((file_name + h->file_name_len) +
 9021|      0|                                                                            1)) {
 9022|      0|                                                        {
 9023|      0|                                                            while (1) {
 9024|      0|while_continue___1: /* CIL Label */
 9025|      0|                                                                ;
 9026|      0|                                                                {
 9027|      0|                                                                    h->after_symlinks = (_Bool)1;
 9028|      0|                                                                    tmp___18 = stat(
 9029|      0|                                                                                   (char const * /* __restrict  */)(
 9030|      0|                                                                                       h->file_name),
 9031|      0|                                                                                   (struct stat * /* __restrict  */)(&st));
 9032|      0|                                                                }
 9033|      0|                                                                if (tmp___18 != 0) {
 9034|      0|                                                                    {
 9035|      0|                                                                        stat_error((char const *)(h->file_name));
 9036|      0|                                                                    }
 9037|      0|                                                                }
 9038|      0|                                                                else {
 9039|      0|                                                                    h->stat_info.st_dev = st.st_dev;
 9040|      0|                                                                    h->stat_info.st_ino = st.st_ino;
 9041|      0|                                                                }
 9042|      0|                                                                h = h->next;
 9043|      0|                                                                if (h) {
 9044|      0|                                                                    if (!(!h->after_symlinks)) {
 9045|      0|                                                                        goto while_break___1;
 9046|      0|                                                                    }
 9047|      0|                                                                }
 9048|      0|                                                                else {
 9049|      0|                                                                    goto while_break___1;
 9050|      0|                                                                }
 9051|      0|                                                            }
 9052|      0|while_break___1: /* CIL Label */
 9053|      0|                                                            ;
 9054|      0|                                                        }
 9055|      0|                                                    }
 9056|      0|                                                }
 9057|      0|                                            }
 9058|      0|                                        }
 9059|      0|                                    }
 9060|      0|                                    status = 0;
 9061|      0|                                }
 9062|      0|                            }
 9063|      0|                        }
 9064|      0|                    }
 9065|      0|                    else {
 9066|      0|_L : {
 9067|      0|                            while (1) {
 9068|      0|while_continue___2: /* CIL Label */
 9069|      0|                                ;
 9070|      0|                                {
 9071|      0|                                    status = symlink((char const *)current_stat_info.link_name,
 9072|      0|                                                     (char const *)file_name);
 9073|      0|                                }
 9074|      0|                                if (!(status != 0)) {
 9075|      0|                                    goto while_break___2;
 9076|      0|                                }
 9077|      0|                                {
 9078|      0|                                    tmp___12 = maybe_recoverable(file_name, &interdir_made);
 9079|      0|                                }
 9080|      0|                                if (!tmp___12) {
 9081|      0|                                    goto while_break___2;
 9082|      0|                                }
 9083|      0|                            }
 9084|      0|while_break___2: /* CIL Label */
 9085|      0|                            ;
 9086|      0|                        }
 9087|      0|                        if (status == 0) {
 9088|      0|                            {
 9089|      0|                                set_stat((char const *)file_name,
 9090|      0|                                         (struct stat const *)(&current_stat_info.stat),
 9091|      0|                                         (struct stat const *)0, (mode_t)0, (enum permstatus)0,
 9092|      0|                                         (char)'2');
 9093|      0|                            }
 9094|      0|                        }
 9095|      0|                        else {
 9096|      0|                            {
 9097|      0|                                symlink_error((char const *)current_stat_info.link_name,
 9098|      0|                                              (char const *)file_name);
 9099|      0|                            }
 9100|      0|                        }
 9101|      0|                    }
 9102|      0|                }
 9103|      0|            }
 9104|      0|            if (status != 0) {
 9105|      0|                if (backup_option) {
 9106|      0|                    {
 9107|      0|                        undo_last_backup();
 9108|      0|                    }
 9109|      0|                }
 9110|      0|            }
 9111|      0|            goto switch_break;
 9112|      0|case_49 : { /* CIL Label */
 9113|      0|                tmp___24 = prepare_to_extract((char const *)file_name);
 9114|      0|            }
 9115|      0|            if (!tmp___24) {
 9116|      0|                goto switch_break;
 9117|      0|            }
 9118|      0|again_link : {
 9119|      0|                tmp___25 = safer_name_suffix((char const *)current_stat_info.link_name,
 9120|      0|                                             (_Bool)1);
 9121|      0|                link_name = (char const *)tmp___25;
 9122|      0|                status = link(link_name, (char const *)file_name);
 9123|      0|            }
 9124|      0|            if (status == 0) {
 9125|      0|                ds = delayed_symlink_head;
 9126|      0|                if (ds) {
 9127|      0|                    {
 9128|      0|                        tmp___28 = stat((char const * /* __restrict  */)link_name,
 9129|      0|                                        (struct stat * /* __restrict  */)(&st1));
 9130|      0|                    }
 9131|      0|                    if (tmp___28 == 0) {
 9132|      0|                        {
 9133|      0|                            while (1) {
 9134|      0|while_continue___3: /* CIL Label */
 9135|      0|                                ;
 9136|      0|                                if (!ds) {
 9137|      0|                                    goto while_break___3;
 9138|      0|                                }
 9139|      0|                                if (ds->dev == st1.st_dev) {
 9140|      0|                                    if (ds->ino == st1.st_ino) {
 9141|      0|                                        if (ds->mtime == st1.st_mtim.tv_sec) {
 9142|      0|                                            {
 9143|      0|                                                tmp___26 = strlen((char const *)file_name);
 9144|      0|                                                tmp___27 =
 9145|      0|                                                    xmalloc(((unsigned long)(&((struct string_list *)0)
 9146|      0|                                                                             ->string) +
 9147|      0|                                                             tmp___26) +
 9148|      0|                                                            1UL);
 9149|      0|                                                p___0 = (struct string_list *)tmp___27;
 9150|      0|                                                strcpy((char * /* __restrict  */)(p___0->string),
 9151|      0|                                                       (char const * /* __restrict  */)file_name);
 9152|      0|                                                p___0->next = ds->sources;
 9153|      0|                                                ds->sources = p___0;
 9154|      0|                                            }
 9155|      0|                                            goto while_break___3;
 9156|      0|                                        }
 9157|      0|                                    }
 9158|      0|                                }
 9159|      0|                                ds = ds->next;
 9160|      0|                            }
 9161|      0|while_break___3: /* CIL Label */
 9162|      0|                            ;
 9163|      0|                        }
 9164|      0|                    }
 9165|      0|                }
 9166|      0|                goto switch_break;
 9167|      0|            }
 9168|      0|            {
 9169|      0|                tmp___29 = maybe_recoverable(file_name, &interdir_made);
 9170|      0|            }
 9171|      0|            if (tmp___29) {
 9172|      0|                goto again_link;
 9173|      0|            }
 9174|      0|            if (incremental_option) {
 9175|      0|                {
 9176|      0|                    tmp___30 = __errno_location();
 9177|      0|                }
 9178|      0|                if (*tmp___30 == 17) {
 9179|      0|                    goto switch_break;
 9180|      0|                }
 9181|      0|            }
 9182|      0|            {
 9183|      0|                tmp___31 = __errno_location();
 9184|      0|                e___0 = *tmp___31;
 9185|      0|                tmp___32 = stat((char const * /* __restrict  */)link_name,
 9186|      0|                                (struct stat * /* __restrict  */)(&st1));
 9187|      0|            }
 9188|      0|            if (tmp___32 == 0) {
 9189|      0|                {
 9190|      0|                    tmp___33 = stat((char const * /* __restrict  */)file_name,
 9191|      0|                                    (struct stat * /* __restrict  */)(&st2));
 9192|      0|                }
 9193|      0|                if (tmp___33 == 0) {
 9194|      0|                    if (st1.st_dev == st2.st_dev) {
 9195|      0|                        if (st1.st_ino == st2.st_ino) {
 9196|      0|                            goto switch_break;
 9197|      0|                        }
 9198|      0|                    }
 9199|      0|                }
 9200|      0|            }
 9201|      0|            {
 9202|      0|                link_error(link_name, (char const *)file_name);
 9203|      0|            }
 9204|      0|            if (backup_option) {
 9205|      0|                {
 9206|      0|                    undo_last_backup();
 9207|      0|                }
 9208|      0|            }
 9209|      0|            goto switch_break;
 9210|      0|case_51: /* CIL Label */
 9211|      0|            current_stat_info.stat.st_mode |= 8192U;
 9212|      0|            goto make_node;
 9213|      0|case_52: /* CIL Label */
 9214|      0|            current_stat_info.stat.st_mode |= 24576U;
 9215|      0|make_node : {
 9216|      0|                tmp___34 = prepare_to_extract((char const *)file_name);
 9217|      0|            }
 9218|      0|            if (!tmp___34) {
 9219|      0|                goto switch_break;
 9220|      0|            }
 9221|      0|            {
 9222|      0|                status = mknod((char const *)file_name, current_stat_info.stat.st_mode,
 9223|      0|                               current_stat_info.stat.st_rdev);
 9224|      0|            }
 9225|      0|            if (status != 0) {
 9226|      0|                {
 9227|      0|                    tmp___35 = maybe_recoverable(file_name, &interdir_made);
 9228|      0|                }
 9229|      0|                if (tmp___35) {
 9230|      0|                    goto make_node;
 9231|      0|                }
 9232|      0|                {
 9233|      0|                    mknod_error((char const *)file_name);
 9234|      0|                }
 9235|      0|                if (backup_option) {
 9236|      0|                    {
 9237|      0|                        undo_last_backup();
 9238|      0|                    }
 9239|      0|                }
 9240|      0|                goto switch_break;
 9241|      0|            }
 9242|      0|            {
 9243|      0|                set_stat((char const *)file_name,
 9244|      0|                         (struct stat const *)(&current_stat_info.stat),
 9245|      0|                         (struct stat const *)0, (mode_t)0, (enum permstatus)1,
 9246|      0|                         typeflag);
 9247|      0|            }
 9248|      0|            goto switch_break;
 9249|      0|case_54 : { /* CIL Label */
 9250|      0|                tmp___36 = prepare_to_extract((char const *)file_name);
 9251|      0|            }
 9252|      0|            if (!tmp___36) {
 9253|      0|                goto switch_break;
 9254|      0|            }
 9255|      0|            {
 9256|      0|                while (1) {
 9257|      0|while_continue___4: /* CIL Label */
 9258|      0|                    ;
 9259|      0|                    {
 9260|      0|                        status =
 9261|      0|                            mkfifo((char const *)file_name, current_stat_info.stat.st_mode);
 9262|      0|                    }
 9263|      0|                    if (!(status != 0)) {
 9264|      0|                        goto while_break___4;
 9265|      0|                    }
 9266|      0|                    {
 9267|      0|                        tmp___37 = maybe_recoverable(file_name, &interdir_made);
 9268|      0|                    }
 9269|      0|                    if (!tmp___37) {
 9270|      0|                        goto while_break___4;
 9271|      0|                    }
 9272|      0|                }
 9273|      0|while_break___4: /* CIL Label */
 9274|      0|                ;
 9275|      0|            }
 9276|      0|            if (status == 0) {
 9277|      0|                {
 9278|      0|                    set_stat((char const *)file_name,
 9279|      0|                             (struct stat const *)(&current_stat_info.stat),
 9280|      0|                             (struct stat const *)((void *)0), (mode_t)0,
 9281|      0|                             (enum permstatus)1, typeflag);
 9282|      0|                }
 9283|      0|            }
 9284|      0|            else {
 9285|      0|                {
 9286|      0|                    mkfifo_error((char const *)file_name);
 9287|      0|                }
 9288|      0|                if (backup_option) {
 9289|      0|                    {
 9290|      0|                        undo_last_backup();
 9291|      0|                    }
 9292|      0|                }
 9293|      0|            }
 9294|      0|            goto switch_break;
 9295|      0|really_dir:
 9296|      0|case_53: /* CIL Label */
 9297|      0|case_68: /* CIL Label */
 9298|      0|            if (incremental_option) {
 9299|      0|                {
 9300|      0|                    gnu_restore((char const *)file_name);
 9301|      0|                }
 9302|      0|            }
 9303|      0|            else {
 9304|      0|                if ((int)typeflag == 68) {
 9305|      0|                    {
 9306|      0|                        skip_member();
 9307|      0|                    }
 9308|      0|                }
 9309|      0|            }
 9310|      0|            if (we_are_root) {
 9311|      0|                tmp___53 = 0;
 9312|      0|            }
 9313|      0|            else {
 9314|      0|                tmp___53 = 192;
 9315|      0|            }
 9316|      0|            {
 9317|      0|                mode = (current_stat_info.stat.st_mode | (unsigned int)tmp___53) &
 9318|      0|                       (unsigned int)(((64 | (64 >> 3)) | ((64 >> 3) >> 3)) |
 9319|      0|                                      (((128 | (128 >> 3)) | ((128 >> 3) >> 3)) |
 9320|      0|                                       ((256 | (256 >> 3)) | ((256 >> 3) >> 3))));
 9321|      0|                status = prepare_to_extract((char const *)file_name);
 9322|      0|            }
 9323|      0|            if (status == 0) {
 9324|      0|                goto switch_break;
 9325|      0|            }
 9326|      0|            if (status < 0) {
 9327|      0|                goto directory_exists;
 9328|      0|            }
 9329|      0|again_dir : {
 9330|      0|                status = mkdir((char const *)file_name, mode);
 9331|      0|            }
 9332|      0|            if (status != 0) {
 9333|      0|                {
 9334|      0|                    tmp___40 = __errno_location();
 9335|      0|                }
 9336|      0|                if (*tmp___40 == 17) {
 9337|      0|                    if (interdir_made) {
 9338|      0|                        goto _L___3;
 9339|      0|                    }
 9340|      0|                    else {
 9341|      0|                        if ((unsigned int)old_files_option == 0U) {
 9342|      0|                            goto _L___3;
 9343|      0|                        }
 9344|      0|                        else {
 9345|      0|                            if ((unsigned int)old_files_option == 2U) {
 9346|      0|_L___3 : { /* CIL Label */
 9347|      0|                                    tmp___38 = stat((char const * /* __restrict  */)file_name,
 9348|      0|                                                    (struct stat * /* __restrict  */)(&st___0));
 9349|      0|                                }
 9350|      0|                                if (tmp___38 == 0) {
 9351|      0|                                    if (interdir_made) {
 9352|      0|                                        {
 9353|      0|                                            repair_delayed_set_stat((char const *)file_name,
 9354|      0|                                                                    (struct stat const *)(&st___0));
 9355|      0|                                        }
 9356|      0|                                        goto switch_break;
 9357|      0|                                    }
 9358|      0|                                    if ((st___0.st_mode & 61440U) == 16384U) {
 9359|      0|                                        mode = st___0.st_mode & ~current_umask;
 9360|      0|                                        goto directory_exists;
 9361|      0|                                    }
 9362|      0|                                }
 9363|      0|                                {
 9364|      0|                                    tmp___39 = __errno_location();
 9365|      0|                                    *tmp___39 = 17;
 9366|      0|                                }
 9367|      0|                            }
 9368|      0|                        }
 9369|      0|                    }
 9370|      0|                }
 9371|      0|                {
 9372|      0|                    tmp___41 = maybe_recoverable(file_name, &interdir_made);
 9373|      0|                }
 9374|      0|                if (tmp___41) {
 9375|      0|                    goto again_dir;
 9376|      0|                }
 9377|      0|                {
 9378|      0|                    tmp___42 = __errno_location();
 9379|      0|                }
 9380|      0|                if (*tmp___42 != 17) {
 9381|      0|                    {
 9382|      0|                        mkdir_error((char const *)file_name);
 9383|      0|                    }
 9384|      0|                    if (backup_option) {
 9385|      0|                        {
 9386|      0|                            undo_last_backup();
 9387|      0|                        }
 9388|      0|                    }
 9389|      0|                    goto switch_break;
 9390|      0|                }
 9391|      0|            }
 9392|      0|directory_exists:
 9393|      0|            if (status == 0) {
 9394|      0|                goto _L___4;
 9395|      0|            }
 9396|      0|            else {
 9397|      0|                if ((unsigned int)old_files_option == 0U) {
 9398|      0|                    goto _L___4;
 9399|      0|                }
 9400|      0|                else {
 9401|      0|                    if ((unsigned int)old_files_option == 2U) {
 9402|      0|_L___4: /* CIL Label */
 9403|      0|                        if (status == 0) {
 9404|      0|                            tmp___54 = 1;
 9405|      0|                        }
 9406|      0|                        else {
 9407|      0|                            tmp___54 = 0;
 9408|      0|                        }
 9409|      0|                        {
 9410|      0|                            delay_set_stat(
 9411|      0|                                (char const *)file_name,
 9412|      0|                                (struct stat const *)(&current_stat_info.stat),
 9413|      0|                                (unsigned int)(((64 | (64 >> 3)) | ((64 >> 3) >> 3)) |
 9414|      0|                                               (((128 | (128 >> 3)) | ((128 >> 3) >> 3)) |
 9415|      0|                                                ((256 | (256 >> 3)) | ((256 >> 3) >> 3)))) &
 9416|      0|                                (mode ^ current_stat_info.stat.st_mode),
 9417|      0|                                (enum permstatus)tmp___54);
 9418|      0|                        }
 9419|      0|                    }
 9420|      0|                }
 9421|      0|            }
 9422|      0|            goto switch_break;
 9423|      0|case_86: /* CIL Label */
 9424|      0|            if (verbose_option) {
 9425|      0|                {
 9426|      0|                    tmp___43 = quote((char const *)current_stat_info.file_name);
 9427|      0|                    tmp___44 = gettext("Reading %s\n");
 9428|      0|                    fprintf((FILE * /* __restrict  */) stdlis,
 9429|      0|                            (char const * /* __restrict  */)tmp___44, tmp___43);
 9430|      0|                }
 9431|      0|            }
 9432|      0|            goto switch_break;
 9433|      0|case_78 : { /* CIL Label */
 9434|      0|                extract_mangle();
 9435|      0|            }
 9436|      0|            goto switch_break;
 9437|      0|case_77 : { /* CIL Label */
 9438|      0|                tmp___45 = quotearg_colon((char const *)current_stat_info.file_name);
 9439|      0|                tmp___46 = gettext(
 9440|      0|                               "%s: Cannot extract -- file is continued from another volume");
 9441|      0|                error(0, 0, (char const *)tmp___46, tmp___45);
 9442|      0|                exit_status = 2;
 9443|      0|                skip_member();
 9444|      0|            }
 9445|      0|            if (backup_option) {
 9446|      0|                {
 9447|      0|                    undo_last_backup();
 9448|      0|                }
 9449|      0|            }
 9450|      0|            goto switch_break;
 9451|      0|case_76:  /* CIL Label */
 9452|      0|case_75 : { /* CIL Label */
 9453|      0|                tmp___47 = gettext("Visible long name error");
 9454|      0|                error(0, 0, (char const *)tmp___47);
 9455|      0|                exit_status = 2;
 9456|      0|                skip_member();
 9457|      0|            }
 9458|      0|            if (backup_option) {
 9459|      0|                {
 9460|      0|                    undo_last_backup();
 9461|      0|                }
 9462|      0|            }
 9463|      0|            goto switch_break;
 9464|      0|switch_default : { /* CIL Label */
 9465|      0|                tmp___48 = quotearg_colon((char const *)file_name);
 9466|      0|                tmp___49 =
 9467|      0|                    gettext("%s: Unknown file type \'%c\', extracted as normal file");
 9468|      0|                error(0, 0, (char const *)tmp___49, tmp___48, (int)typeflag);
 9469|      0|            }
 9470|      0|            goto again_file;
 9471|      0|switch_break: /* CIL Label */
 9472|      0|            ;
 9473|      0|        }
 9474|      0|        return;
 9475|      0|    }
 9476|      0|}
 9477|       |static void apply_delayed_symlinks(void)
 9478|      0|{
 9479|      0|    struct delayed_symlink *ds;
 9480|      0|    struct string_list *sources;
 9481|      0|    char const *valid_source;
 9482|      0|    char const *source;
 9483|      0|    struct stat st;
 9484|      0|    int tmp;
 9485|      0|    int tmp___0;
 9486|      0|    int tmp___1;
 9487|      0|    int tmp___2;
 9488|      0|    struct string_list *next;
 9489|      0|    struct delayed_symlink *next___0;
 9490|      0|    void *__cil_tmp12;
 9491|       |
 9492|      0|    {
 9493|      0|        ds = delayed_symlink_head;
 9494|      0|        {
 9495|      0|            while (1) {
 9496|      0|while_continue: /* CIL Label */
 9497|      0|                ;
 9498|      0|                if (!ds) {
 9499|      0|                    goto while_break;
 9500|      0|                }
 9501|      0|                sources = ds->sources;
 9502|      0|                valid_source = (char const *)0;
 9503|      0|                sources = ds->sources;
 9504|      0|                {
 9505|      0|                    while (1) {
 9506|      0|while_continue___0: /* CIL Label */
 9507|      0|                        ;
 9508|      0|                        if (!sources) {
 9509|      0|                            goto while_break___0;
 9510|      0|                        }
 9511|      0|                        {
 9512|      0|                            source = (char const *)(sources->string);
 9513|      0|                            tmp___2 = lstat((char const * /* __restrict  */)source,
 9514|      0|                                            (struct stat * /* __restrict  */)(&st));
 9515|      0|                        }
 9516|      0|                        if (tmp___2 == 0) {
 9517|      0|                            if (st.st_dev == ds->dev) {
 9518|      0|                                if (st.st_ino == ds->ino) {
 9519|      0|                                    if (st.st_mtim.tv_sec == ds->mtime) {
 9520|      0|                                        {
 9521|      0|                                            tmp___1 = unlink(source);
 9522|      0|                                        }
 9523|      0|                                        if (tmp___1 != 0) {
 9524|      0|                                            {
 9525|      0|                                                unlink_error(source);
 9526|      0|                                            }
 9527|      0|                                        }
 9528|      0|                                        else {
 9529|      0|                                            if (valid_source) {
 9530|      0|                                                {
 9531|      0|                                                    tmp___0 = link(valid_source, source);
 9532|      0|                                                }
 9533|      0|                                                if (!(tmp___0 == 0)) {
 9534|      0|                                                    goto _L;
 9535|      0|                                                }
 9536|      0|                                            }
 9537|      0|                                            else {
 9538|      0|_L : {
 9539|      0|                                                    tmp = symlink((char const *)(ds->target), source);
 9540|      0|                                                }
 9541|      0|                                                if (tmp != 0) {
 9542|      0|                                                    {
 9543|      0|                                                        symlink_error((char const *)(ds->target), source);
 9544|      0|                                                    }
 9545|      0|                                                }
 9546|      0|                                                else {
 9547|      0|                                                    {
 9548|      0|                                                        valid_source = source;
 9549|      0|                                                        st.st_uid = ds->uid;
 9550|      0|                                                        st.st_gid = ds->gid;
 9551|      0|                                                        set_stat(source, (struct stat const *)(&st),
 9552|      0|                                                                 (struct stat const *)0, (mode_t)0,
 9553|      0|                                                                 (enum permstatus)0, (char)'2');
 9554|      0|                                                    }
 9555|      0|                                                }
 9556|      0|                                            }
 9557|      0|                                        }
 9558|      0|                                    }
 9559|      0|                                }
 9560|      0|                            }
 9561|      0|                        }
 9562|      0|                        sources = sources->next;
 9563|      0|                    }
 9564|      0|while_break___0: /* CIL Label */
 9565|      0|                    ;
 9566|      0|                }
 9567|      0|                sources = ds->sources;
 9568|      0|                {
 9569|      0|                    while (1) {
 9570|      0|while_continue___1: /* CIL Label */
 9571|      0|                        ;
 9572|      0|                        if (!sources) {
 9573|      0|                            goto while_break___1;
 9574|      0|                        }
 9575|      0|                        {
 9576|      0|                            next = sources->next;
 9577|      0|                            free((void *)sources);
 9578|      0|                            sources = next;
 9579|      0|                        }
 9580|      0|                    }
 9581|      0|while_break___1: /* CIL Label */
 9582|      0|                    ;
 9583|      0|                }
 9584|      0|                {
 9585|      0|                    next___0 = ds->next;
 9586|      0|                    free((void *)ds);
 9587|      0|                    ds = next___0;
 9588|      0|                }
 9589|      0|            }
 9590|      0|while_break: /* CIL Label */
 9591|      0|            ;
 9592|      0|        }
 9593|      0|        delayed_symlink_head = (struct delayed_symlink *)0;
 9594|      0|        return;
 9595|      0|    }
 9596|      0|}
 9597|       |void extract_finish(void)
 9598|      0|{
 9599|      0|    char *__cil_tmp1;
 9600|      0|    char *__cil_tmp2;
 9601|       |
 9602|      0|    {
 9603|      0|        {
 9604|      0|            apply_nonancestor_delayed_set_stat("", (_Bool)0);
 9605|      0|            apply_delayed_symlinks();
 9606|      0|            apply_nonancestor_delayed_set_stat("", (_Bool)1);
 9607|      0|        }
 9608|      0|        return;
 9609|      0|    }
 9610|      0|}
 9611|       |__attribute__((__noreturn__)) void fatal_exit(void);
 9612|       |void fatal_exit(void)
 9613|      0|{
 9614|      0|    char *tmp;
 9615|      0|    char *__cil_tmp2;
 9616|       |
 9617|      0|    {
 9618|      0|        {
 9619|      0|            extract_finish();
 9620|      0|            tmp = gettext("Error is not recoverable: exiting now");
 9621|      0|            error(2, 0, (char const *)tmp);
 9622|      0|            abort();
 9623|      0|        }
 9624|      0|    }
 9625|      0|}
 9626|       |/* #pragma merger("0","005.xheader.o.i","") */
 9627|       |extern __attribute__((__nothrow__)) unsigned short const **(
 9628|       |    __attribute__((__leaf__)) __ctype_b_loc)(void)__attribute__((__const__));
 9629|       |extern __attribute__((__nothrow__)) char *(
 9630|       |    __attribute__((__nonnull__(2), __leaf__))
 9631|       |    strtok)(char *__restrict __s, char const *__restrict __delim);
 9632|       |extern __attribute__((__nothrow__)) char *(
 9633|       |    __attribute__((__nonnull__(1, 2), __leaf__))
 9634|       |    stpcpy)(char *__restrict __dest, char const *__restrict __src);
 9635|       |extern __attribute__((__nothrow__))
 9636|       |__pid_t(__attribute__((__leaf__)) getpid)(void);
 9637|       |extern __attribute__((__nothrow__)) unsigned long(__attribute__((
 9638|       |            __nonnull__(1), __leaf__)) strtoul)(char const *__restrict __nptr,
 9639|       |                    char **__restrict __endptr, int __base);
 9640|       |extern
 9641|       |__attribute__((__nothrow__)) void *(__attribute__((__leaf__))
 9642|       |                                    calloc)(size_t __nmemb, size_t __size)
 9643|       |__attribute__((__malloc__));
 9644|       |extern __attribute__((__nothrow__)) char *(__attribute__((__nonnull__(1),
 9645|       |        __leaf__))
 9646|       |        getenv)(char const *__name);
 9647|       |char *dir_name(char const *path);
 9648|       |strtol_error xstrtoumax(char const *s, char **ptr, int strtol_base,
 9649|       |                        uintmax_t *val, char const *valid_suffixes);
 9650|       |__attribute__((__noreturn__)) void usage(int status);
 9651|       |void xheader_decode_global(void);
 9652|       |void xheader_read(union block *p, size_t size);
 9653|       |void xheader_destroy(struct xheader *xhdr);
 9654|       |char *xheader_ghdr_name(void);
 9655|       |void xheader_set_option(char *string);
 9656|       |_Bool utf8_convert(_Bool to_utf, char const *input, char **output);
 9657|       |extern void _obstack_newchunk(struct obstack *, int);
 9658|       |extern int _obstack_begin(struct obstack *, int, int, void *(*)(long),
 9659|       |                          void (*)(void *));
 9660|       |extern void obstack_free(struct obstack *obstack, void *block);
 9661|       |static _Bool xheader_protected_pattern_p(char const *pattern);
 9662|       |static _Bool xheader_protected_keyword_p(char const *keyword);
 9663|       |static __attribute__((__noreturn__)) void xheader_set_single_keyword(char *kw);
 9664|       |static void code_string(char const *string, char const *keyword,
 9665|       |                        struct xheader *xhdr);
 9666|       |static void extended_header_init(void);
 9667|       |static size_t global_header_count;
 9668|       |static struct keyword_list *keyword_pattern_list;
 9669|       |static struct keyword_list *keyword_global_override_list;
 9670|       |static struct keyword_list *keyword_override_list;
 9671|       |static struct keyword_list *global_header_override_list;
 9672|       |static char *exthdr_name;
 9673|       |static char *globexthdr_name;
 9674|       |static _Bool xheader_keyword_deleted_p(char const *kw)
 9675|      0|{
 9676|      0|    struct keyword_list *kp;
 9677|      0|    int tmp;
 9678|       |
 9679|      0|    {
 9680|      0|        kp = keyword_pattern_list;
 9681|      0|        {
 9682|      0|            while (1) {
 9683|      0|while_continue: /* CIL Label */
 9684|      0|                ;
 9685|      0|                if (!kp) {
 9686|      0|                    goto while_break;
 9687|      0|                }
 9688|      0|                {
 9689|      0|                    tmp = fnmatch((char const *)kp->pattern, kw, 0);
 9690|      0|                }
 9691|      0|                if (tmp == 0) {
 9692|      0|                    return ((_Bool)1);
 9693|      0|                }
 9694|      0|                kp = kp->next;
 9695|      0|            }
 9696|      0|while_break: /* CIL Label */
 9697|      0|            ;
 9698|      0|        }
 9699|      0|        return ((_Bool)0);
 9700|      0|    }
 9701|      0|}
 9702|       |static _Bool xheader_keyword_override_p(char const *keyword)
 9703|      0|{
 9704|      0|    struct keyword_list *kp;
 9705|      0|    int tmp;
 9706|       |
 9707|      0|    {
 9708|      0|        kp = keyword_override_list;
 9709|      0|        {
 9710|      0|            while (1) {
 9711|      0|while_continue: /* CIL Label */
 9712|      0|                ;
 9713|      0|                if (!kp) {
 9714|      0|                    goto while_break;
 9715|      0|                }
 9716|      0|                {
 9717|      0|                    tmp = strcmp((char const *)kp->pattern, keyword);
 9718|      0|                }
 9719|      0|                if (tmp == 0) {
 9720|      0|                    return ((_Bool)1);
 9721|      0|                }
 9722|      0|                kp = kp->next;
 9723|      0|            }
 9724|      0|while_break: /* CIL Label */
 9725|      0|            ;
 9726|      0|        }
 9727|      0|        return ((_Bool)0);
 9728|      0|    }
 9729|      0|}
 9730|       |static void xheader_list_append(struct keyword_list **root, char const *kw,
 9731|       |                                char const *value)
 9732|      0|{
 9733|      0|    struct keyword_list *kp;
 9734|      0|    void *tmp;
 9735|      0|    char *tmp___0;
 9736|       |
 9737|      0|    {
 9738|      0|        {
 9739|      0|            tmp = xmalloc(sizeof(*kp));
 9740|      0|            kp = (struct keyword_list *)tmp;
 9741|      0|            kp->pattern = xstrdup(kw);
 9742|      0|        }
 9743|      0|        if (value) {
 9744|      0|            {
 9745|      0|                tmp___0 = xstrdup(value);
 9746|      0|                kp->value = tmp___0;
 9747|      0|            }
 9748|      0|        }
 9749|      0|        else {
 9750|      0|            kp->value = (char *)((void *)0);
 9751|      0|        }
 9752|      0|        kp->next = *root;
 9753|      0|        *root = kp;
 9754|      0|        return;
 9755|      0|    }
 9756|      0|}
 9757|       |static void xheader_list_destroy(struct keyword_list **root)
 9758|      0|{
 9759|      0|    struct keyword_list *kw;
 9760|      0|    struct keyword_list *next;
 9761|       |
 9762|      0|    {
 9763|      0|        if (root) {
 9764|      0|            kw = *root;
 9765|      0|            {
 9766|      0|                while (1) {
 9767|      0|while_continue: /* CIL Label */
 9768|      0|                    ;
 9769|      0|                    if (!kw) {
 9770|      0|                        goto while_break;
 9771|      0|                    }
 9772|      0|                    {
 9773|      0|                        next = kw->next;
 9774|      0|                        free((void *)kw->pattern);
 9775|      0|                        free((void *)kw->value);
 9776|      0|                        free((void *)kw);
 9777|      0|                        kw = next;
 9778|      0|                    }
 9779|      0|                }
 9780|      0|while_break: /* CIL Label */
 9781|      0|                ;
 9782|      0|            }
 9783|      0|            *root = (struct keyword_list *)((void *)0);
 9784|      0|        }
 9785|      0|        return;
 9786|      0|    }
 9787|      0|}
 9788|       |static __attribute__((__noreturn__)) void xheader_set_single_keyword(char *kw);
 9789|       |static void xheader_set_single_keyword(char *kw)
 9790|      0|{
 9791|      0|    char *tmp;
 9792|      0|    char *__cil_tmp3;
 9793|       |
 9794|      0|    {
 9795|      0|        {
 9796|      0|            tmp = gettext("Keyword %s is unknown or not yet imlemented");
 9797|      0|            error(0, 0, (char const *)tmp, kw);
 9798|      0|            usage(2);
 9799|      0|        }
 9800|      0|    }
 9801|      0|}
 9802|       |static void xheader_set_keyword_equal(char *kw, char *eq)
 9803|      0|{
 9804|      0|    _Bool global;
 9805|      0|    char *p;
 9806|      0|    unsigned short const **tmp;
 9807|      0|    unsigned short const **tmp___0;
 9808|      0|    char *tmp___1;
 9809|      0|    _Bool tmp___2;
 9810|      0|    char *tmp___3;
 9811|      0|    _Bool tmp___4;
 9812|      0|    int tmp___5;
 9813|      0|    int tmp___6;
 9814|      0|    int tmp___7;
 9815|      0|    char *__cil_tmp14;
 9816|      0|    char *__cil_tmp15;
 9817|       |
 9818|      0|    {
 9819|      0|        global = (_Bool)1;
 9820|      0|        p = eq;
 9821|      0|        if ((int)*(eq + -1) == 58) {
 9822|      0|            p--;
 9823|      0|            global = (_Bool)0;
 9824|      0|        }
 9825|      0|        {
 9826|      0|            while (1) {
 9827|      0|while_continue: /* CIL Label */
 9828|      0|                ;
 9829|      0|                if ((unsigned long)p > (unsigned long)kw) {
 9830|      0|                    {
 9831|      0|                        tmp = __ctype_b_loc();
 9832|      0|                    }
 9833|      0|                    if (!((int const) * (*tmp + (int)*p) & 8192)) {
 9834|      0|                        goto while_break;
 9835|      0|                    }
 9836|      0|                }
 9837|      0|                else {
 9838|      0|                    goto while_break;
 9839|      0|                }
 9840|      0|                p--;
 9841|      0|            }
 9842|      0|while_break: /* CIL Label */
 9843|      0|            ;
 9844|      0|        }
 9845|      0|        *p = (char)0;
 9846|      0|        p = eq + 1;
 9847|      0|        {
 9848|      0|            while (1) {
 9849|      0|while_continue___0: /* CIL Label */
 9850|      0|                ;
 9851|      0|                if (*p) {
 9852|      0|                    {
 9853|      0|                        tmp___0 = __ctype_b_loc();
 9854|      0|                    }
 9855|      0|                    if (!((int const) * (*tmp___0 + (int)*p) & 8192)) {
 9856|      0|                        goto while_break___0;
 9857|      0|                    }
 9858|      0|                }
 9859|      0|                else {
 9860|      0|                    goto while_break___0;
 9861|      0|                }
 9862|      0|                p++;
 9863|      0|            }
 9864|      0|while_break___0: /* CIL Label */
 9865|      0|            ;
 9866|      0|        }
 9867|      0|        {
 9868|      0|            tmp___7 = strcmp((char const *)kw, "delete");
 9869|      0|        }
 9870|      0|        if (tmp___7 == 0) {
 9871|      0|            {
 9872|      0|                tmp___2 = xheader_protected_pattern_p((char const *)p);
 9873|      0|            }
 9874|      0|            if (tmp___2) {
 9875|      0|                {
 9876|      0|                    tmp___1 = gettext("Pattern %s cannot be used");
 9877|      0|                    error(0, 0, (char const *)tmp___1, p);
 9878|      0|                    usage(2);
 9879|      0|                }
 9880|      0|            }
 9881|      0|            {
 9882|      0|                xheader_list_append(&keyword_pattern_list, (char const *)p,
 9883|      0|                                    (char const *)((void *)0));
 9884|      0|            }
 9885|      0|        }
 9886|      0|        else {
 9887|      0|            {
 9888|      0|                tmp___6 = strcmp((char const *)kw, "exthdr.name");
 9889|      0|            }
 9890|      0|            if (tmp___6 == 0) {
 9891|      0|                {
 9892|      0|                    assign_string(&exthdr_name, (char const *)p);
 9893|      0|                }
 9894|      0|            }
 9895|      0|            else {
 9896|      0|                {
 9897|      0|                    tmp___5 = strcmp((char const *)kw, "globexthdr.name");
 9898|      0|                }
 9899|      0|                if (tmp___5 == 0) {
 9900|      0|                    {
 9901|      0|                        assign_string(&globexthdr_name, (char const *)p);
 9902|      0|                    }
 9903|      0|                }
 9904|      0|                else {
 9905|      0|                    {
 9906|      0|                        tmp___4 = xheader_protected_keyword_p((char const *)kw);
 9907|      0|                    }
 9908|      0|                    if (tmp___4) {
 9909|      0|                        {
 9910|      0|                            tmp___3 = gettext("Keyword %s cannot be overridden");
 9911|      0|                            error(0, 0, (char const *)tmp___3, kw);
 9912|      0|                            usage(2);
 9913|      0|                        }
 9914|      0|                    }
 9915|      0|                    if (global) {
 9916|      0|                        {
 9917|      0|                            xheader_list_append(&keyword_global_override_list,
 9918|      0|                                                (char const *)kw, (char const *)p);
 9919|      0|                        }
 9920|      0|                    }
 9921|      0|                    else {
 9922|      0|                        {
 9923|      0|                            xheader_list_append(&keyword_override_list, (char const *)kw,
 9924|      0|                                                (char const *)p);
 9925|      0|                        }
 9926|      0|                    }
 9927|      0|                }
 9928|      0|            }
 9929|      0|        }
 9930|      0|        return;
 9931|      0|    }
 9932|      0|}
 9933|       |void xheader_set_option(char *string)
 9934|      0|{
 9935|      0|    char *token;
 9936|      0|    char *p;
 9937|      0|    char *tmp;
 9938|       |
 9939|      0|    {
 9940|      0|        {
 9941|      0|            token = strtok((char * /* __restrict  */)string,
 9942|      0|                           (char const * /* __restrict  */) ",");
 9943|      0|        }
 9944|      0|        {
 9945|      0|            while (1) {
 9946|      0|while_continue: /* CIL Label */
 9947|      0|                ;
 9948|      0|                if (!token) {
 9949|      0|                    goto while_break;
 9950|      0|                }
 9951|      0|                {
 9952|      0|                    tmp = strchr((char const *)token, '=');
 9953|      0|                    p = tmp;
 9954|      0|                }
 9955|      0|                if (!p) {
 9956|      0|                    {
 9957|      0|                        xheader_set_single_keyword(token);
 9958|      0|                    }
 9959|      0|                }
 9960|      0|                else {
 9961|      0|                    {
 9962|      0|                        xheader_set_keyword_equal(token, p);
 9963|      0|                    }
 9964|      0|                }
 9965|      0|                {
 9966|      0|                    token = strtok((char * /* __restrict  */)((void *)0),
 9967|      0|                                   (char const * /* __restrict  */) ",");
 9968|      0|                }
 9969|      0|            }
 9970|      0|while_break: /* CIL Label */
 9971|      0|            ;
 9972|      0|        }
 9973|      0|        return;
 9974|      0|    }
 9975|      0|}
 9976|       |static void to_decimal(uintmax_t value, char *where, size_t size)
 9977|      0|{
 9978|      0|    size_t i;
 9979|      0|    size_t j;
 9980|      0|    size_t tmp;
 9981|      0|    size_t tmp___0;
 9982|      0|    char c;
 9983|       |
 9984|      0|    {
 9985|      0|        i = (size_t)0;
 9986|      0|        tmp = i;
 9987|      0|        i++;
 9988|      0|        *(where + tmp) = (char)0;
 9989|      0|        {
 9990|      0|            while (1) {
 9991|      0|while_continue: /* CIL Label */
 9992|      0|                ;
 9993|      0|                tmp___0 = i;
 9994|      0|                i++;
 9995|      0|                *(where + tmp___0) = (char)(48UL + value % 10UL);
 9996|      0|                value /= 10UL;
 9997|      0|                if (i < size) {
 9998|      0|                    if (!value) {
 9999|      0|                        goto while_break;
10000|      0|                    }
10001|      0|                }
10002|      0|                else {
10003|      0|                    goto while_break;
10004|      0|                }
10005|      0|            }
10006|      0|while_break: /* CIL Label */
10007|      0|            ;
10008|      0|        }
10009|      0|        j = (size_t)0;
10010|      0|        i--;
10011|      0|        {
10012|      0|            while (1) {
10013|      0|while_continue___0: /* CIL Label */
10014|      0|                ;
10015|      0|                if (!(j < i)) {
10016|      0|                    goto while_break___0;
10017|      0|                }
10018|      0|                c = *(where + j);
10019|      0|                *(where + j) = *(where + i);
10020|      0|                *(where + i) = c;
10021|      0|                j++;
10022|      0|                i--;
10023|      0|            }
10024|      0|while_break___0: /* CIL Label */
10025|      0|            ;
10026|      0|        }
10027|      0|        return;
10028|      0|    }
10029|      0|}
10030|       |static char *xheader_format_name(struct tar_stat_info *st, char const *fmt,
10031|       |                                 _Bool allow_n)
10032|      0|{
10033|      0|    char *buf;
10034|      0|    size_t len;
10035|      0|    size_t tmp;
10036|      0|    char *q;
10037|      0|    char const *p;
10038|      0|    char *dir;
10039|      0|    char *base;
10040|      0|    char pidbuf[64];
10041|      0|    char nbuf[64];
10042|      0|    char *tmp___0;
10043|      0|    size_t tmp___1;
10044|      0|    size_t tmp___2;
10045|      0|    __pid_t tmp___3;
10046|      0|    size_t tmp___4;
10047|      0|    size_t tmp___5;
10048|      0|    char *tmp___6;
10049|      0|    void *tmp___7;
10050|      0|    char *tmp___8;
10051|      0|    char const *tmp___9;
10052|      0|    char *tmp___10;
10053|      0|    char const *tmp___11;
10054|      0|    char *tmp___12;
10055|      0|    char const *tmp___13;
10056|      0|    char *tmp___14;
10057|      0|    char const *tmp___15;
10058|      0|    void *__cil_tmp29;
10059|      0|    void *__cil_tmp30;
10060|       |
10061|      0|    {
10062|      0|        {
10063|      0|            tmp = strlen(fmt);
10064|      0|            len = tmp;
10065|      0|            dir = (char *)((void *)0);
10066|      0|            base = (char *)((void *)0);
10067|      0|            p = fmt;
10068|      0|        }
10069|      0|        {
10070|      0|            while (1) {
10071|      0|while_continue: /* CIL Label */
10072|      0|                ;
10073|      0|                if (*p) {
10074|      0|                    {
10075|      0|                        tmp___6 = strchr(p, '%');
10076|      0|                        p = (char const *)tmp___6;
10077|      0|                    }
10078|      0|                    if (!p) {
10079|      0|                        goto while_break;
10080|      0|                    }
10081|      0|                }
10082|      0|                else {
10083|      0|                    goto while_break;
10084|      0|                }
10085|      0|                {
10086|      0|                    if ((int const) * (p + 1) == 37) {
10087|      0|                        goto case_37;
10088|      0|                    }
10089|      0|                    if ((int const) * (p + 1) == 100) {
10090|      0|                        goto case_100;
10091|      0|                    }
10092|      0|                    if ((int const) * (p + 1) == 102) {
10093|      0|                        goto case_102;
10094|      0|                    }
10095|      0|                    if ((int const) * (p + 1) == 112) {
10096|      0|                        goto case_112;
10097|      0|                    }
10098|      0|                    if ((int const) * (p + 1) == 110) {
10099|      0|                        goto case_110;
10100|      0|                    }
10101|      0|                    goto switch_break;
10102|      0|case_37: /* CIL Label */
10103|      0|                    len--;
10104|      0|                    goto switch_break;
10105|      0|case_100: /* CIL Label */
10106|      0|                    if (st) {
10107|      0|                        {
10108|      0|                            tmp___0 = dir_name((char const *)st->orig_file_name);
10109|      0|                            dir = safer_name_suffix((char const *)tmp___0, (_Bool)0);
10110|      0|                            tmp___1 = strlen((char const *)dir);
10111|      0|                            len += tmp___1 - 1UL;
10112|      0|                        }
10113|      0|                    }
10114|      0|                    goto switch_break;
10115|      0|case_102: /* CIL Label */
10116|      0|                    if (st) {
10117|      0|                        {
10118|      0|                            base = base_name((char const *)st->orig_file_name);
10119|      0|                            tmp___2 = strlen((char const *)base);
10120|      0|                            len += tmp___2 - 1UL;
10121|      0|                        }
10122|      0|                    }
10123|      0|                    goto switch_break;
10124|      0|case_112 : { /* CIL Label */
10125|      0|                        tmp___3 = getpid();
10126|      0|                        to_decimal((uintmax_t)tmp___3, pidbuf, sizeof(pidbuf));
10127|      0|                        tmp___4 = strlen((char const *)(pidbuf));
10128|      0|                        len += tmp___4 - 1UL;
10129|      0|                    }
10130|      0|                    goto switch_break;
10131|      0|case_110: /* CIL Label */
10132|      0|                    if (allow_n) {
10133|      0|                        {
10134|      0|                            to_decimal(global_header_count + 1UL, pidbuf, sizeof(pidbuf));
10135|      0|                            tmp___5 = strlen((char const *)(nbuf));
10136|      0|                            len += tmp___5 - 1UL;
10137|      0|                        }
10138|      0|                    }
10139|      0|                    goto switch_break;
10140|      0|switch_break: /* CIL Label */
10141|      0|                    ;
10142|      0|                }
10143|      0|                p++;
10144|      0|            }
10145|      0|while_break: /* CIL Label */
10146|      0|            ;
10147|      0|        }
10148|      0|        {
10149|      0|            tmp___7 = xmalloc(len + 1UL);
10150|      0|            buf = (char *)tmp___7;
10151|      0|            q = buf;
10152|      0|            p = fmt;
10153|      0|        }
10154|      0|        {
10155|      0|            while (1) {
10156|      0|while_continue___0: /* CIL Label */
10157|      0|                ;
10158|      0|                if (!*p) {
10159|      0|                    goto while_break___0;
10160|      0|                }
10161|      0|                if ((int const) * p == 37) {
10162|      0|                    {
10163|      0|                        if ((int const) * (p + 1) == 37) {
10164|      0|                            goto case_37___0;
10165|      0|                        }
10166|      0|                        if ((int const) * (p + 1) == 100) {
10167|      0|                            goto case_100___0;
10168|      0|                        }
10169|      0|                        if ((int const) * (p + 1) == 102) {
10170|      0|                            goto case_102___0;
10171|      0|                        }
10172|      0|                        if ((int const) * (p + 1) == 112) {
10173|      0|                            goto case_112___0;
10174|      0|                        }
10175|      0|                        if ((int const) * (p + 1) == 110) {
10176|      0|                            goto case_110___0;
10177|      0|                        }
10178|      0|                        goto switch_default;
10179|      0|case_37___0: /* CIL Label */
10180|      0|                        tmp___8 = q;
10181|      0|                        q++;
10182|      0|                        tmp___9 = p;
10183|      0|                        p++;
10184|      0|                        *tmp___8 = (char)*tmp___9;
10185|      0|                        p++;
10186|      0|                        goto switch_break___0;
10187|      0|case_100___0: /* CIL Label */
10188|      0|                        if (dir) {
10189|      0|                            {
10190|      0|                                q = stpcpy((char * /* __restrict  */)q,
10191|      0|                                           (char const * /* __restrict  */)dir);
10192|      0|                            }
10193|      0|                        }
10194|      0|                        p += 2;
10195|      0|                        goto switch_break___0;
10196|      0|case_102___0: /* CIL Label */
10197|      0|                        if (base) {
10198|      0|                            {
10199|      0|                                q = stpcpy((char * /* __restrict  */)q,
10200|      0|                                           (char const * /* __restrict  */)base);
10201|      0|                            }
10202|      0|                        }
10203|      0|                        p += 2;
10204|      0|                        goto switch_break___0;
10205|      0|case_112___0 : { /* CIL Label */
10206|      0|                            q = stpcpy((char * /* __restrict  */)q,
10207|      0|                                       (char const * /* __restrict  */)(pidbuf));
10208|      0|                            p += 2;
10209|      0|                        }
10210|      0|                        goto switch_break___0;
10211|      0|case_110___0: /* CIL Label */
10212|      0|                        if (allow_n) {
10213|      0|                            {
10214|      0|                                q = stpcpy((char * /* __restrict  */)q,
10215|      0|                                           (char const * /* __restrict  */)(nbuf));
10216|      0|                                p += 2;
10217|      0|                            }
10218|      0|                        }
10219|      0|switch_default: /* CIL Label */
10220|      0|                        tmp___10 = q;
10221|      0|                        q++;
10222|      0|                        tmp___11 = p;
10223|      0|                        p++;
10224|      0|                        *tmp___10 = (char)*tmp___11;
10225|      0|                        if (*p) {
10226|      0|                            tmp___12 = q;
10227|      0|                            q++;
10228|      0|                            tmp___13 = p;
10229|      0|                            p++;
10230|      0|                            *tmp___12 = (char)*tmp___13;
10231|      0|                        }
10232|      0|switch_break___0: /* CIL Label */
10233|      0|                        ;
10234|      0|                    }
10235|      0|                }
10236|      0|                else {
10237|      0|                    tmp___14 = q;
10238|      0|                    q++;
10239|      0|                    tmp___15 = p;
10240|      0|                    p++;
10241|      0|                    *tmp___14 = (char)*tmp___15;
10242|      0|                }
10243|      0|            }
10244|      0|while_break___0: /* CIL Label */
10245|      0|            ;
10246|      0|        }
10247|      0|        {
10248|      0|            while (1) {
10249|      0|while_continue___1: /* CIL Label */
10250|      0|                ;
10251|      0|                if ((unsigned long)q > (unsigned long)buf) {
10252|      0|                    if (!((int)*(q + -1) == 47)) {
10253|      0|                        goto while_break___1;
10254|      0|                    }
10255|      0|                }
10256|      0|                else {
10257|      0|                    goto while_break___1;
10258|      0|                }
10259|      0|                q--;
10260|      0|            }
10261|      0|while_break___1: /* CIL Label */
10262|      0|            ;
10263|      0|        }
10264|      0|        *q = (char)0;
10265|      0|        return (buf);
10266|      0|    }
10267|      0|}
10268|       |char *xheader_xhdr_name(struct tar_stat_info *st)
10269|      0|{
10270|      0|    char *tmp;
10271|      0|    char *__cil_tmp3;
10272|       |
10273|      0|    {
10274|      0|        if (!exthdr_name) {
10275|      0|            {
10276|      0|                assign_string(&exthdr_name, "%d/PaxHeaders.%p/%f");
10277|      0|            }
10278|      0|        }
10279|      0|        {
10280|      0|            tmp = xheader_format_name(st, (char const *)exthdr_name, (_Bool)0);
10281|      0|        }
10282|      0|        return (tmp);
10283|      0|    }
10284|      0|}
10285|       |char *xheader_ghdr_name(void)
10286|      0|{
10287|      0|    size_t len;
10288|      0|    char const *tmp;
10289|      0|    char *tmp___0;
10290|      0|    size_t tmp___1;
10291|      0|    void *tmp___2;
10292|      0|    char *tmp___3;
10293|      0|    char *__cil_tmp7;
10294|      0|    char *__cil_tmp8;
10295|      0|    char *__cil_tmp9;
10296|      0|    char *__cil_tmp10;
10297|       |
10298|      0|    {
10299|      0|        if (!globexthdr_name) {
10300|      0|            {
10301|      0|                tmp___0 = getenv("TMPDIR");
10302|      0|                tmp = (char const *)tmp___0;
10303|      0|            }
10304|      0|            if (!tmp) {
10305|      0|                tmp = "/tmp";
10306|      0|            }
10307|      0|            {
10308|      0|                tmp___1 = strlen(tmp);
10309|      0|                len = tmp___1 + sizeof("/GlobalHead.%p.%n");
10310|      0|                tmp___2 = xmalloc(len);
10311|      0|                globexthdr_name = (char *)tmp___2;
10312|      0|                strcpy((char * /* __restrict  */)globexthdr_name,
10313|      0|                       (char const * /* __restrict  */)tmp);
10314|      0|                strcat((char * /* __restrict  */)globexthdr_name,
10315|      0|                       (char const * /* __restrict  */) "/GlobalHead.%p.%n");
10316|      0|            }
10317|      0|        }
10318|      0|        {
10319|      0|            tmp___3 = xheader_format_name((struct tar_stat_info *)((void *)0),
10320|      0|                                          (char const *)globexthdr_name, (_Bool)1);
10321|      0|        }
10322|      0|        return (tmp___3);
10323|      0|    }
10324|      0|}
10325|       |void xheader_write(char type, char *name, struct xheader *xhdr)
10326|      0|{
10327|      0|    union block *header;
10328|      0|    size_t size;
10329|      0|    char *p;
10330|      0|    size_t len;
10331|       |
10332|      0|    {
10333|      0|        {
10334|      0|            size = xhdr->size;
10335|      0|            header = start_private_header((char const *)name, size);
10336|      0|            header->header.typeflag = type;
10337|      0|            simple_finish_header(header);
10338|      0|            p = xhdr->buffer;
10339|      0|        }
10340|      0|        {
10341|      0|            while (1) {
10342|      0|while_continue: /* CIL Label */
10343|      0|                ;
10344|      0|                {
10345|      0|                    header = find_next_block();
10346|      0|                    len = (size_t)512;
10347|      0|                }
10348|      0|                if (len > size) {
10349|      0|                    len = size;
10350|      0|                }
10351|      0|                {
10352|      0|                    memcpy((void * /* __restrict  */)(header->buffer),
10353|      0|                           (void const * /* __restrict  */)p, len);
10354|      0|                }
10355|      0|                if (len < 512UL) {
10356|      0|                    {
10357|      0|                        memset((void *)(header->buffer + len), 0, 512UL - len);
10358|      0|                    }
10359|      0|                }
10360|      0|                {
10361|      0|                    p += len;
10362|      0|                    size -= len;
10363|      0|                    set_next_block_after(header);
10364|      0|                }
10365|      0|                if (!(size > 0UL)) {
10366|      0|                    goto while_break;
10367|      0|                }
10368|      0|            }
10369|      0|while_break: /* CIL Label */
10370|      0|            ;
10371|      0|        }
10372|      0|        {
10373|      0|            xheader_destroy(xhdr);
10374|      0|        }
10375|      0|        return;
10376|      0|    }
10377|      0|}
10378|       |void xheader_write_global(void)
10379|      0|{
10380|      0|    char *name;
10381|      0|    struct keyword_list *kp;
10382|       |
10383|      0|    {
10384|      0|        if (!keyword_global_override_list) {
10385|      0|            return;
10386|      0|        }
10387|      0|        {
10388|      0|            extended_header_init();
10389|      0|            kp = keyword_global_override_list;
10390|      0|        }
10391|      0|        {
10392|      0|            while (1) {
10393|      0|while_continue: /* CIL Label */
10394|      0|                ;
10395|      0|                if (!kp) {
10396|      0|                    goto while_break;
10397|      0|                }
10398|      0|                {
10399|      0|                    code_string((char const *)kp->value, (char const *)kp->pattern,
10400|      0|                                &extended_header);
10401|      0|                    kp = kp->next;
10402|      0|                }
10403|      0|            }
10404|      0|while_break: /* CIL Label */
10405|      0|            ;
10406|      0|        }
10407|      0|        {
10408|      0|            xheader_finish(&extended_header);
10409|      0|            name = xheader_ghdr_name();
10410|      0|            xheader_write((char)'g', name, &extended_header);
10411|      0|            free((void *)name);
10412|      0|            global_header_count++;
10413|      0|        }
10414|      0|        return;
10415|      0|    }
10416|      0|}
10417|       |struct xhdr_tab const xhdr_tab[17];
10418|       |static struct xhdr_tab const *locate_handler(char const *keyword)
10419|      0|{
10420|      0|    struct xhdr_tab const *p;
10421|      0|    int tmp;
10422|       |
10423|      0|    {
10424|      0|        p = xhdr_tab;
10425|      0|        {
10426|      0|            while (1) {
10427|      0|while_continue: /* CIL Label */
10428|      0|                ;
10429|      0|                if (!p->keyword) {
10430|      0|                    goto while_break;
10431|      0|                }
10432|      0|                {
10433|      0|                    tmp = strcmp((char const *)p->keyword, keyword);
10434|      0|                }
10435|      0|                if (tmp == 0) {
10436|      0|                    return (p);
10437|      0|                }
10438|      0|                p++;
10439|      0|            }
10440|      0|while_break: /* CIL Label */
10441|      0|            ;
10442|      0|        }
10443|      0|        return ((struct xhdr_tab const *)((void *)0));
10444|      0|    }
10445|      0|}
10446|       |static _Bool xheader_protected_pattern_p(char const *pattern)
10447|      0|{
10448|      0|    struct xhdr_tab const *p;
10449|      0|    int tmp;
10450|       |
10451|      0|    {
10452|      0|        p = xhdr_tab;
10453|      0|        {
10454|      0|            while (1) {
10455|      0|while_continue: /* CIL Label */
10456|      0|                ;
10457|      0|                if (!p->keyword) {
10458|      0|                    goto while_break;
10459|      0|                }
10460|      0|                if (p->protect) {
10461|      0|                    {
10462|      0|                        tmp = fnmatch(pattern, (char const *)p->keyword, 0);
10463|      0|                    }
10464|      0|                    if (tmp == 0) {
10465|      0|                        return ((_Bool)1);
10466|      0|                    }
10467|      0|                }
10468|      0|                p++;
10469|      0|            }
10470|      0|while_break: /* CIL Label */
10471|      0|            ;
10472|      0|        }
10473|      0|        return ((_Bool)0);
10474|      0|    }
10475|      0|}
10476|       |static _Bool xheader_protected_keyword_p(char const *keyword)
10477|      0|{
10478|      0|    struct xhdr_tab const *p;
10479|      0|    int tmp;
10480|       |
10481|      0|    {
10482|      0|        p = xhdr_tab;
10483|      0|        {
10484|      0|            while (1) {
10485|      0|while_continue: /* CIL Label */
10486|      0|                ;
10487|      0|                if (!p->keyword) {
10488|      0|                    goto while_break;
10489|      0|                }
10490|      0|                if (p->protect) {
10491|      0|                    {
10492|      0|                        tmp = strcmp((char const *)p->keyword, keyword);
10493|      0|                    }
10494|      0|                    if (tmp == 0) {
10495|      0|                        return ((_Bool)1);
10496|      0|                    }
10497|      0|                }
10498|      0|                p++;
10499|      0|            }
10500|      0|while_break: /* CIL Label */
10501|      0|            ;
10502|      0|        }
10503|      0|        return ((_Bool)0);
10504|      0|    }
10505|      0|}
10506|       |static _Bool decode_record(char **p,
10507|       |                           void (*handler)(void *, char const *, char const *),
10508|       |                           void *data)
10509|      0|{
10510|      0|    size_t len;
10511|      0|    char const *keyword;
10512|      0|    char *start;
10513|      0|    char endc;
10514|      0|    char *tmp;
10515|      0|    char *tmp___0;
10516|      0|    char *__cil_tmp10;
10517|      0|    char *__cil_tmp11;
10518|       |
10519|      0|    {
10520|      0|        start = *p;
10521|      0|        if ((int)*(*p) == 0) {
10522|      0|            return ((_Bool)0);
10523|      0|        }
10524|      0|        {
10525|      0|            len = strtoul((char const * /* __restrict  */) * p,
10526|      0|                          (char ** /* __restrict  */)p, 10);
10527|      0|        }
10528|      0|        if ((int)*(*p) != 32) {
10529|      0|            {
10530|      0|                tmp = gettext(
10531|      0|                          "Malformed extended header: missing whitespace after the length");
10532|      0|                error(0, 0, (char const *)tmp);
10533|      0|                exit_status = 2;
10534|      0|            }
10535|      0|            return ((_Bool)0);
10536|      0|        }
10537|      0|        (*p)++;
10538|      0|        keyword = (char const *)*p;
10539|      0|        {
10540|      0|            while (1) {
10541|      0|while_continue: /* CIL Label */
10542|      0|                ;
10543|      0|                if (!((unsigned long)*p < (unsigned long)(start + len))) {
10544|      0|                    goto while_break;
10545|      0|                }
10546|      0|                if ((int)*(*p) == 61) {
10547|      0|                    goto while_break;
10548|      0|                }
10549|      0|                (*p)++;
10550|      0|            }
10551|      0|while_break: /* CIL Label */
10552|      0|            ;
10553|      0|        }
10554|      0|        if ((int)*(*p) != 61) {
10555|      0|            {
10556|      0|                tmp___0 = gettext("Malformed extended header: missing equal sign");
10557|      0|                error(0, 0, (char const *)tmp___0);
10558|      0|                exit_status = 2;
10559|      0|            }
10560|      0|            return ((_Bool)0);
10561|      0|        }
10562|      0|        {
10563|      0|            *(*p) = (char)0;
10564|      0|            endc = *(start + (len - 1UL));
10565|      0|            *(start + (len - 1UL)) = (char)0;
10566|      0|            (*handler)(data, keyword, (char const *)(*p + 1));
10567|      0|            *(start + (len - 1UL)) = endc;
10568|      0|            *(*p) = (char)'=';
10569|      0|            *p = start + len;
10570|      0|        }
10571|      0|        return ((_Bool)1);
10572|      0|    }
10573|      0|}
10574|       |static void run_override_list(struct keyword_list *kp,
10575|       |                              struct tar_stat_info *st)
10576|      0|{
10577|      0|    struct xhdr_tab const *t;
10578|      0|    struct xhdr_tab const *tmp;
10579|       |
10580|      0|    {
10581|      0|        {
10582|      0|            while (1) {
10583|      0|while_continue: /* CIL Label */
10584|      0|                ;
10585|      0|                if (!kp) {
10586|      0|                    goto while_break;
10587|      0|                }
10588|      0|                {
10589|      0|                    tmp = locate_handler((char const *)kp->pattern);
10590|      0|                    t = tmp;
10591|      0|                }
10592|      0|                if (t) {
10593|      0|                    {
10594|      0|                        (*(t->decoder))(st, (char const *)kp->value);
10595|      0|                    }
10596|      0|                }
10597|      0|                kp = kp->next;
10598|      0|            }
10599|      0|while_break: /* CIL Label */
10600|      0|            ;
10601|      0|        }
10602|      0|        return;
10603|      0|    }
10604|      0|}
10605|       |static void decx(void *data, char const *keyword, char const *value)
10606|      0|{
10607|      0|    struct xhdr_tab const *t;
10608|      0|    struct tar_stat_info *st;
10609|      0|    _Bool tmp;
10610|      0|    _Bool tmp___0;
10611|       |
10612|      0|    {
10613|      0|        {
10614|      0|            st = (struct tar_stat_info *)data;
10615|      0|            tmp = xheader_keyword_deleted_p(keyword);
10616|      0|        }
10617|      0|        if (tmp) {
10618|      0|            return;
10619|      0|        }
10620|      0|        else {
10621|      0|            {
10622|      0|                tmp___0 = xheader_keyword_override_p(keyword);
10623|      0|            }
10624|      0|            if (tmp___0) {
10625|      0|                return;
10626|      0|            }
10627|      0|        }
10628|      0|        {
10629|      0|            t = locate_handler(keyword);
10630|      0|        }
10631|      0|        if (t) {
10632|      0|            {
10633|      0|                (*(t->decoder))(st, value);
10634|      0|            }
10635|      0|        }
10636|      0|        return;
10637|      0|    }
10638|      0|}
10639|       |void xheader_decode(struct tar_stat_info *st)
10640|      0|{
10641|      0|    char *p;
10642|      0|    char *endp;
10643|      0|    _Bool tmp;
10644|       |
10645|      0|    {
10646|      0|        {
10647|      0|            run_override_list(keyword_global_override_list, st);
10648|      0|            run_override_list(global_header_override_list, st);
10649|      0|        }
10650|      0|        if (extended_header.size) {
10651|      0|            p = extended_header.buffer + 512;
10652|      0|            endp = extended_header.buffer + (extended_header.size - 1UL);
10653|      0|            {
10654|      0|                while (1) {
10655|      0|while_continue: /* CIL Label */
10656|      0|                    ;
10657|      0|                    if (!((unsigned long)p < (unsigned long)endp)) {
10658|      0|                        goto while_break;
10659|      0|                    }
10660|      0|                    {
10661|      0|                        tmp = decode_record(&p, &decx, (void *)st);
10662|      0|                    }
10663|      0|                    if (!tmp) {
10664|      0|                        goto while_break;
10665|      0|                    }
10666|      0|                }
10667|      0|while_break: /* CIL Label */
10668|      0|                ;
10669|      0|            }
10670|      0|        }
10671|      0|        {
10672|      0|            run_override_list(keyword_override_list, st);
10673|      0|        }
10674|      0|        return;
10675|      0|    }
10676|      0|}
10677|       |static void decg(void *data, char const *keyword, char const *value)
10678|      0|{
10679|      0|    struct keyword_list **kwl;
10680|       |
10681|      0|    {
10682|      0|        {
10683|      0|            kwl = (struct keyword_list **)data;
10684|      0|            xheader_list_append(kwl, keyword, value);
10685|      0|        }
10686|      0|        return;
10687|      0|    }
10688|      0|}
10689|       |void xheader_decode_global(void)
10690|      0|{
10691|      0|    char *p;
10692|      0|    char *endp;
10693|      0|    _Bool tmp;
10694|       |
10695|      0|    {
10696|      0|        if (extended_header.size) {
10697|      0|            {
10698|      0|                p = extended_header.buffer + 512;
10699|      0|                endp = extended_header.buffer + (extended_header.size - 1UL);
10700|      0|                xheader_list_destroy(&global_header_override_list);
10701|      0|            }
10702|      0|            {
10703|      0|                while (1) {
10704|      0|while_continue: /* CIL Label */
10705|      0|                    ;
10706|      0|                    if (!((unsigned long)p < (unsigned long)endp)) {
10707|      0|                        goto while_break;
10708|      0|                    }
10709|      0|                    {
10710|      0|                        tmp = decode_record(&p, &decg,
10711|      0|                                            (void *)(&global_header_override_list));
10712|      0|                    }
10713|      0|                    if (!tmp) {
10714|      0|                        goto while_break;
10715|      0|                    }
10716|      0|                }
10717|      0|while_break: /* CIL Label */
10718|      0|                ;
10719|      0|            }
10720|      0|        }
10721|      0|        return;
10722|      0|    }
10723|      0|}
10724|       |static void extended_header_init(void)
10725|      0|{
10726|      0|    void *tmp;
10727|       |
10728|      0|    {
10729|      0|        if (!extended_header.stk) {
10730|      0|            {
10731|      0|                tmp = xmalloc(sizeof(*(extended_header.stk)));
10732|      0|                extended_header.stk = (struct obstack *)tmp;
10733|      0|                _obstack_begin(extended_header.stk, 0, 0, (void *(*)(long))(&xmalloc),
10734|      0|                               (void (*)(void *))(&free));
10735|      0|            }
10736|      0|        }
10737|      0|        return;
10738|      0|    }
10739|      0|}
10740|       |void xheader_store(char const *keyword, struct tar_stat_info const *st,
10741|       |                   void *data)
10742|      0|{
10743|      0|    struct xhdr_tab const *t;
10744|      0|    _Bool tmp;
10745|      0|    _Bool tmp___0;
10746|       |
10747|      0|    {
10748|      0|        if (extended_header.buffer) {
10749|      0|            return;
10750|      0|        }
10751|      0|        {
10752|      0|            t = locate_handler(keyword);
10753|      0|        }
10754|      0|        if (!t) {
10755|      0|            return;
10756|      0|        }
10757|      0|        {
10758|      0|            tmp = xheader_keyword_deleted_p(keyword);
10759|      0|        }
10760|      0|        if (tmp) {
10761|      0|            return;
10762|      0|        }
10763|      0|        else {
10764|      0|            {
10765|      0|                tmp___0 = xheader_keyword_override_p(keyword);
10766|      0|            }
10767|      0|            if (tmp___0) {
10768|      0|                return;
10769|      0|            }
10770|      0|        }
10771|      0|        {
10772|      0|            extended_header_init();
10773|      0|            (*(t->coder))(st, keyword, &extended_header, data);
10774|      0|        }
10775|      0|        return;
10776|      0|    }
10777|      0|}
10778|       |void xheader_read(union block *p, size_t size)
10779|      0|{
10780|      0|    size_t j;
10781|      0|    size_t nblocks;
10782|      0|    void *tmp;
10783|      0|    size_t len;
10784|       |
10785|      0|    {
10786|      0|        {
10787|      0|            j = (size_t)0;
10788|      0|            free((void *)extended_header.buffer);
10789|      0|            size += 512UL;
10790|      0|            extended_header.size = size;
10791|      0|            nblocks = ((size + 512UL) - 1UL) / 512UL;
10792|      0|            tmp = xmalloc(size + 1UL);
10793|      0|            extended_header.buffer = (char *)tmp;
10794|      0|        }
10795|      0|        {
10796|      0|            while (1) {
10797|      0|while_continue: /* CIL Label */
10798|      0|                ;
10799|      0|                len = size;
10800|      0|                if (len > 512UL) {
10801|      0|                    len = (size_t)512;
10802|      0|                }
10803|      0|                {
10804|      0|                    memcpy((void * /* __restrict  */)(extended_header.buffer + j),
10805|      0|                           (void const * /* __restrict  */)(p->buffer), len);
10806|      0|                    set_next_block_after(p);
10807|      0|                    p = find_next_block();
10808|      0|                    j += len;
10809|      0|                    size -= len;
10810|      0|                }
10811|      0|                if (!(size > 0UL)) {
10812|      0|                    goto while_break;
10813|      0|                }
10814|      0|            }
10815|      0|while_break: /* CIL Label */
10816|      0|            ;
10817|      0|        }
10818|      0|        return;
10819|      0|    }
10820|      0|}
10821|       |static size_t format_uintmax(uintmax_t val, char *buf, size_t s)
10822|      0|{
10823|      0|    char *p;
10824|      0|    char *tmp;
10825|      0|    char *tmp___0;
10826|       |
10827|      0|    {
10828|      0|        if (!buf) {
10829|      0|            s = (size_t)0;
10830|      0|            {
10831|      0|                while (1) {
10832|      0|while_continue: /* CIL Label */
10833|      0|                    ;
10834|      0|                    s++;
10835|      0|                    val /= 10UL;
10836|      0|                    if (!(val != 0UL)) {
10837|      0|                        goto while_break;
10838|      0|                    }
10839|      0|                }
10840|      0|while_break: /* CIL Label */
10841|      0|                ;
10842|      0|            }
10843|      0|        }
10844|      0|        else {
10845|      0|            p = (buf + s) - 1;
10846|      0|            {
10847|      0|                while (1) {
10848|      0|while_continue___0: /* CIL Label */
10849|      0|                    ;
10850|      0|                    tmp = p;
10851|      0|                    p--;
10852|      0|                    *tmp = (char)(val % 10UL + 48UL);
10853|      0|                    val /= 10UL;
10854|      0|                    if (!(val != 0UL)) {
10855|      0|                        goto while_break___0;
10856|      0|                    }
10857|      0|                }
10858|      0|while_break___0: /* CIL Label */
10859|      0|                ;
10860|      0|            }
10861|      0|            {
10862|      0|                while (1) {
10863|      0|while_continue___1: /* CIL Label */
10864|      0|                    ;
10865|      0|                    if (!((unsigned long)p >= (unsigned long)buf)) {
10866|      0|                        goto while_break___1;
10867|      0|                    }
10868|      0|                    tmp___0 = p;
10869|      0|                    p--;
10870|      0|                    *tmp___0 = (char)'0';
10871|      0|                }
10872|      0|while_break___1: /* CIL Label */
10873|      0|                ;
10874|      0|            }
10875|      0|        }
10876|      0|        return (s);
10877|      0|    }
10878|      0|}
10879|       |static void xheader_print(struct xheader *xhdr, char const *keyword,
10880|       |                          char const *value)
10881|      0|{
10882|      0|    size_t len;
10883|      0|    size_t tmp;
10884|      0|    size_t tmp___0;
10885|      0|    size_t p;
10886|      0|    size_t n;
10887|      0|    char nbuf[100];
10888|      0|    struct obstack *__o;
10889|      0|    int __len;
10890|      0|    struct obstack *__o___0;
10891|      0|    char *tmp___1;
10892|      0|    struct obstack *__o___1;
10893|      0|    int __len___0;
10894|      0|    size_t tmp___2;
10895|      0|    struct obstack *__o___2;
10896|      0|    char *tmp___3;
10897|      0|    struct obstack *__o___3;
10898|      0|    int __len___1;
10899|      0|    size_t tmp___4;
10900|      0|    struct obstack *__o___4;
10901|      0|    char *tmp___5;
10902|      0|    void *__cil_tmp24;
10903|       |
10904|      0|    {
10905|      0|        {
10906|      0|            tmp = strlen(keyword);
10907|      0|            tmp___0 = strlen(value);
10908|      0|            len = (tmp + tmp___0) + 3UL;
10909|      0|            n = (size_t)0;
10910|      0|        }
10911|      0|        {
10912|      0|            while (1) {
10913|      0|while_continue: /* CIL Label */
10914|      0|                ;
10915|      0|                {
10916|      0|                    p = n;
10917|      0|                    n = format_uintmax(len + p, (char *)((void *)0), (size_t)0);
10918|      0|                }
10919|      0|                if (!(n != p)) {
10920|      0|                    goto while_break;
10921|      0|                }
10922|      0|            }
10923|      0|while_break: /* CIL Label */
10924|      0|            ;
10925|      0|        }
10926|      0|        {
10927|      0|            format_uintmax(len + n, nbuf, n);
10928|      0|            __o = xhdr->stk;
10929|      0|            __len = (int)n;
10930|      0|        }
10931|      0|        if ((unsigned long)(__o->next_free + __len) >
10932|      0|                (unsigned long)__o->chunk_limit) {
10933|      0|            {
10934|      0|                _obstack_newchunk(__o, __len);
10935|      0|            }
10936|      0|        }
10937|      0|        {
10938|      0|            memcpy((void * /* __restrict  */)__o->next_free,
10939|      0|                   (void const * /* __restrict  */)(nbuf), (size_t)__len);
10940|      0|            __o->next_free += __len;
10941|      0|            __o___0 = xhdr->stk;
10942|      0|        }
10943|      0|        if ((unsigned long)(__o___0->next_free + 1) >
10944|      0|                (unsigned long)__o___0->chunk_limit) {
10945|      0|            {
10946|      0|                _obstack_newchunk(__o___0, 1);
10947|      0|            }
10948|      0|        }
10949|      0|        {
10950|      0|            tmp___1 = __o___0->next_free;
10951|      0|            (__o___0->next_free)++;
10952|      0|            *tmp___1 = (char)' ';
10953|      0|            __o___1 = xhdr->stk;
10954|      0|            tmp___2 = strlen(keyword);
10955|      0|            __len___0 = (int)tmp___2;
10956|      0|        }
10957|      0|        if ((unsigned long)(__o___1->next_free + __len___0) >
10958|      0|                (unsigned long)__o___1->chunk_limit) {
10959|      0|            {
10960|      0|                _obstack_newchunk(__o___1, __len___0);
10961|      0|            }
10962|      0|        }
10963|      0|        {
10964|      0|            memcpy((void * /* __restrict  */)__o___1->next_free,
10965|      0|                   (void const * /* __restrict  */)keyword, (size_t)__len___0);
10966|      0|            __o___1->next_free += __len___0;
10967|      0|            __o___2 = xhdr->stk;
10968|      0|        }
10969|      0|        if ((unsigned long)(__o___2->next_free + 1) >
10970|      0|                (unsigned long)__o___2->chunk_limit) {
10971|      0|            {
10972|      0|                _obstack_newchunk(__o___2, 1);
10973|      0|            }
10974|      0|        }
10975|      0|        {
10976|      0|            tmp___3 = __o___2->next_free;
10977|      0|            (__o___2->next_free)++;
10978|      0|            *tmp___3 = (char)'=';
10979|      0|            __o___3 = xhdr->stk;
10980|      0|            tmp___4 = strlen(value);
10981|      0|            __len___1 = (int)tmp___4;
10982|      0|        }
10983|      0|        if ((unsigned long)(__o___3->next_free + __len___1) >
10984|      0|                (unsigned long)__o___3->chunk_limit) {
10985|      0|            {
10986|      0|                _obstack_newchunk(__o___3, __len___1);
10987|      0|            }
10988|      0|        }
10989|      0|        {
10990|      0|            memcpy((void * /* __restrict  */)__o___3->next_free,
10991|      0|                   (void const * /* __restrict  */)value, (size_t)__len___1);
10992|      0|            __o___3->next_free += __len___1;
10993|      0|            __o___4 = xhdr->stk;
10994|      0|        }
10995|      0|        if ((unsigned long)(__o___4->next_free + 1) >
10996|      0|                (unsigned long)__o___4->chunk_limit) {
10997|      0|            {
10998|      0|                _obstack_newchunk(__o___4, 1);
10999|      0|            }
11000|      0|        }
11001|      0|        tmp___5 = __o___4->next_free;
11002|      0|        (__o___4->next_free)++;
11003|      0|        *tmp___5 = (char)'\n';
11004|      0|        return;
11005|      0|    }
11006|      0|}
11007|       |void xheader_finish(struct xheader *xhdr)
11008|      0|{
11009|      0|    struct keyword_list *kp;
11010|      0|    struct obstack *__o;
11011|      0|    char *tmp;
11012|      0|    struct obstack *__o1;
11013|      0|    void *value;
11014|       |
11015|      0|    {
11016|      0|        kp = keyword_override_list;
11017|      0|        {
11018|      0|            while (1) {
11019|      0|while_continue: /* CIL Label */
11020|      0|                ;
11021|      0|                if (!kp) {
11022|      0|                    goto while_break;
11023|      0|                }
11024|      0|                {
11025|      0|                    code_string((char const *)kp->value, (char const *)kp->pattern, xhdr);
11026|      0|                    kp = kp->next;
11027|      0|                }
11028|      0|            }
11029|      0|while_break: /* CIL Label */
11030|      0|            ;
11031|      0|        }
11032|      0|        __o = xhdr->stk;
11033|      0|        if ((unsigned long)(__o->next_free + 1) > (unsigned long)__o->chunk_limit) {
11034|      0|            {
11035|      0|                _obstack_newchunk(__o, 1);
11036|      0|            }
11037|      0|        }
11038|      0|        tmp = __o->next_free;
11039|      0|        (__o->next_free)++;
11040|      0|        *tmp = (char)0;
11041|      0|        __o1 = xhdr->stk;
11042|      0|        value = (void *)__o1->object_base;
11043|      0|        if ((unsigned long)__o1->next_free == (unsigned long)value) {
11044|      0|            __o1->maybe_empty_object = 1U;
11045|      0|        }
11046|      0|        __o1->next_free =
11047|      0|            (char *)0 +
11048|      0|            (((__o1->next_free - (char *)0) + (long)__o1->alignment_mask) &
11049|      0|             (long)(~__o1->alignment_mask));
11050|      0|        if (__o1->next_free - (char *)__o1->chunk >
11051|      0|                __o1->chunk_limit - (char *)__o1->chunk) {
11052|      0|            __o1->next_free = __o1->chunk_limit;
11053|      0|        }
11054|      0|        {
11055|      0|            __o1->object_base = __o1->next_free;
11056|      0|            xhdr->buffer = (char *)value;
11057|      0|            xhdr->size = strlen((char const *)xhdr->buffer);
11058|      0|        }
11059|      0|        return;
11060|      0|    }
11061|      0|}
11062|       |void xheader_destroy(struct xheader *xhdr)
11063|      0|{
11064|      0|    struct obstack *__o;
11065|      0|    void *__obj;
11066|      0|    char *tmp;
11067|       |
11068|      0|    {
11069|      0|        if (xhdr->stk) {
11070|      0|            __o = xhdr->stk;
11071|      0|            __obj = (void *)0;
11072|      0|            if ((unsigned long)__obj > (unsigned long)((void *)__o->chunk)) {
11073|      0|                if ((unsigned long)__obj < (unsigned long)((void *)__o->chunk_limit)) {
11074|      0|                    tmp = (char *)__obj;
11075|      0|                    __o->object_base = tmp;
11076|      0|                    __o->next_free = tmp;
11077|      0|                }
11078|      0|                else {
11079|      0|                    {
11080|      0|                        obstack_free(__o, __obj);
11081|      0|                    }
11082|      0|                }
11083|      0|            }
11084|      0|            else {
11085|      0|                {
11086|      0|                    obstack_free(__o, __obj);
11087|      0|                }
11088|      0|            }
11089|      0|            {
11090|      0|                free((void *)xhdr->stk);
11091|      0|                xhdr->stk = (struct obstack *)((void *)0);
11092|      0|            }
11093|      0|        }
11094|      0|        else {
11095|      0|            {
11096|      0|                free((void *)xhdr->buffer);
11097|      0|            }
11098|      0|        }
11099|      0|        xhdr->buffer = (char *)0;
11100|      0|        xhdr->size = (size_t)0;
11101|      0|        return;
11102|      0|    }
11103|      0|}
11104|       |static void code_string(char const *string, char const *keyword,
11105|       |                        struct xheader *xhdr)
11106|      0|{
11107|      0|    char *outstr;
11108|      0|    _Bool tmp;
11109|       |
11110|      0|    {
11111|      0|        {
11112|      0|            tmp = utf8_convert((_Bool)1, string, &outstr);
11113|      0|        }
11114|      0|        if (!tmp) {
11115|      0|            {
11116|      0|                outstr = xstrdup(string);
11117|      0|            }
11118|      0|        }
11119|      0|        {
11120|      0|            xheader_print(xhdr, keyword, (char const *)outstr);
11121|      0|            free((void *)outstr);
11122|      0|        }
11123|      0|        return;
11124|      0|    }
11125|      0|}
11126|       |static void decode_string(char **string, char const *arg)
11127|      0|{
11128|      0|    _Bool tmp;
11129|       |
11130|      0|    {
11131|      0|        if (*string) {
11132|      0|            {
11133|      0|                free((void *)*string);
11134|      0|                *string = (char *)((void *)0);
11135|      0|            }
11136|      0|        }
11137|      0|        {
11138|      0|            tmp = utf8_convert((_Bool)0, arg, string);
11139|      0|        }
11140|      0|        if (!tmp) {
11141|      0|            {
11142|      0|                assign_string(string, arg);
11143|      0|            }
11144|      0|        }
11145|      0|        return;
11146|      0|    }
11147|      0|}
11148|       |static void code_time(time_t t, unsigned long nano, char const *keyword,
11149|       |                      struct xheader *xhdr)
11150|      0|{
11151|      0|    char sbuf[200];
11152|      0|    size_t s;
11153|      0|    size_t tmp;
11154|      0|    size_t tmp___0;
11155|      0|    size_t tmp___1;
11156|      0|    void *__cil_tmp10;
11157|       |
11158|      0|    {
11159|      0|        {
11160|      0|            tmp = format_uintmax((uintmax_t)t, (char *)((void *)0), (size_t)0);
11161|      0|            s = tmp;
11162|      0|        }
11163|      0|        if (s + 11UL >= sizeof(sbuf)) {
11164|      0|            return;
11165|      0|        }
11166|      0|        {
11167|      0|            format_uintmax((uintmax_t)t, sbuf, s);
11168|      0|            tmp___0 = s;
11169|      0|            s++;
11170|      0|            sbuf[tmp___0] = (char)'.';
11171|      0|            tmp___1 = format_uintmax(nano, sbuf + s, (size_t)9);
11172|      0|            s += tmp___1;
11173|      0|            sbuf[s] = (char)0;
11174|      0|            xheader_print(xhdr, keyword, (char const *)(sbuf));
11175|      0|        }
11176|      0|        return;
11177|      0|    }
11178|      0|}
11179|       |static void decode_time(char const *arg, time_t *secs, unsigned long *nsecs)
11180|      0|{
11181|      0|    uintmax_t u;
11182|      0|    char *p;
11183|      0|    strtol_error tmp;
11184|      0|    strtol_error tmp___0;
11185|      0|    char *__cil_tmp8;
11186|      0|    char *__cil_tmp9;
11187|       |
11188|      0|    {
11189|      0|        {
11190|      0|            tmp___0 = xstrtoumax(arg, &p, 10, &u, "");
11191|      0|        }
11192|      0|        if ((unsigned int)tmp___0 == 0U) {
11193|      0|            *secs = (time_t)u;
11194|      0|            if ((int)*p == 46) {
11195|      0|                {
11196|      0|                    tmp = xstrtoumax((char const *)(p + 1), (char **)((void *)0), 10, &u,
11197|      0|                                     "");
11198|      0|                }
11199|      0|                if ((unsigned int)tmp == 0U) {
11200|      0|                    *nsecs = u;
11201|      0|                }
11202|      0|            }
11203|      0|        }
11204|      0|        return;
11205|      0|    }
11206|      0|}
11207|       |static void code_num(uintmax_t value, char const *keyword,
11208|       |                     struct xheader *xhdr)
11209|      0|{
11210|      0|    char sbuf[100];
11211|      0|    size_t s;
11212|      0|    size_t tmp;
11213|      0|    void *__cil_tmp7;
11214|       |
11215|      0|    {
11216|      0|        {
11217|      0|            tmp = format_uintmax(value, (char *)((void *)0), (size_t)0);
11218|      0|            s = tmp;
11219|      0|            format_uintmax(value, sbuf, s);
11220|      0|            sbuf[s] = (char)0;
11221|      0|            xheader_print(xhdr, keyword, (char const *)(sbuf));
11222|      0|        }
11223|      0|        return;
11224|      0|    }
11225|      0|}
11226|       |static void dummy_coder(struct tar_stat_info const *st
11227|       |                        __attribute__((__unused__)),
11228|       |                        char const *keyword __attribute__((__unused__)),
11229|       |                        struct xheader *xhdr __attribute__((__unused__)),
11230|       |                        void *data __attribute__((__unused__)))
11231|      0|{
11232|       |
11233|      0|    {
11234|      0|        return;
11235|      0|    }
11236|      0|}
11237|       |static void dummy_decoder(struct tar_stat_info *st __attribute__((__unused__)),
11238|       |                          char const *arg __attribute__((__unused__)))
11239|      0|{
11240|       |
11241|      0|    {
11242|      0|        return;
11243|      0|    }
11244|      0|}
11245|       |static void atime_coder(struct tar_stat_info const *st, char const *keyword,
11246|       |                        struct xheader *xhdr,
11247|       |                        void *data __attribute__((__unused__)))
11248|      0|{
11249|       |
11250|      0|    {
11251|      0|        {
11252|      0|            code_time((time_t)st->stat.st_atim.tv_sec, (unsigned long)st->atime_nsec,
11253|      0|                      keyword, xhdr);
11254|      0|        }
11255|      0|        return;
11256|      0|    }
11257|      0|}
11258|       |static void atime_decoder(struct tar_stat_info *st, char const *arg)
11259|      0|{
11260|       |
11261|      0|    {
11262|      0|        {
11263|      0|            decode_time(arg, &st->stat.st_atim.tv_sec, &st->atime_nsec);
11264|      0|        }
11265|      0|        return;
11266|      0|    }
11267|      0|}
11268|       |static void gid_coder(struct tar_stat_info const *st, char const *keyword,
11269|       |                      struct xheader *xhdr,
11270|       |                      void *data __attribute__((__unused__)))
11271|      0|{
11272|       |
11273|      0|    {
11274|      0|        {
11275|      0|            code_num((uintmax_t)st->stat.st_gid, keyword, xhdr);
11276|      0|        }
11277|      0|        return;
11278|      0|    }
11279|      0|}
11280|       |static void gid_decoder(struct tar_stat_info *st, char const *arg)
11281|      0|{
11282|      0|    uintmax_t u;
11283|      0|    strtol_error tmp;
11284|      0|    char *__cil_tmp5;
11285|       |
11286|      0|    {
11287|      0|        {
11288|      0|            tmp = xstrtoumax(arg, (char **)((void *)0), 10, &u, "");
11289|      0|        }
11290|      0|        if ((unsigned int)tmp == 0U) {
11291|      0|            st->stat.st_gid = (__gid_t)u;
11292|      0|        }
11293|      0|        return;
11294|      0|    }
11295|      0|}
11296|       |static void gname_coder(struct tar_stat_info const *st, char const *keyword,
11297|       |                        struct xheader *xhdr,
11298|       |                        void *data __attribute__((__unused__)))
11299|      0|{
11300|       |
11301|      0|    {
11302|      0|        {
11303|      0|            code_string((char const *)st->gname, keyword, xhdr);
11304|      0|        }
11305|      0|        return;
11306|      0|    }
11307|      0|}
11308|       |static void gname_decoder(struct tar_stat_info *st, char const *arg)
11309|      0|{
11310|       |
11311|      0|    {
11312|      0|        {
11313|      0|            decode_string(&st->gname, arg);
11314|      0|        }
11315|      0|        return;
11316|      0|    }
11317|      0|}
11318|       |static void linkpath_coder(struct tar_stat_info const *st, char const *keyword,
11319|       |                           struct xheader *xhdr,
11320|       |                           void *data __attribute__((__unused__)))
11321|      0|{
11322|       |
11323|      0|    {
11324|      0|        {
11325|      0|            code_string((char const *)st->link_name, keyword, xhdr);
11326|      0|        }
11327|      0|        return;
11328|      0|    }
11329|      0|}
11330|       |static void linkpath_decoder(struct tar_stat_info *st, char const *arg)
11331|      0|{
11332|       |
11333|      0|    {
11334|      0|        {
11335|      0|            decode_string(&st->link_name, arg);
11336|      0|        }
11337|      0|        return;
11338|      0|    }
11339|      0|}
11340|       |static void ctime_coder(struct tar_stat_info const *st, char const *keyword,
11341|       |                        struct xheader *xhdr,
11342|       |                        void *data __attribute__((__unused__)))
11343|      0|{
11344|       |
11345|      0|    {
11346|      0|        {
11347|      0|            code_time((time_t)st->stat.st_ctim.tv_sec, (unsigned long)st->ctime_nsec,
11348|      0|                      keyword, xhdr);
11349|      0|        }
11350|      0|        return;
11351|      0|    }
11352|      0|}
11353|       |static void ctime_decoder(struct tar_stat_info *st, char const *arg)
11354|      0|{
11355|       |
11356|      0|    {
11357|      0|        {
11358|      0|            decode_time(arg, &st->stat.st_ctim.tv_sec, &st->ctime_nsec);
11359|      0|        }
11360|      0|        return;
11361|      0|    }
11362|      0|}
11363|       |static void mtime_coder(struct tar_stat_info const *st, char const *keyword,
11364|       |                        struct xheader *xhdr,
11365|       |                        void *data __attribute__((__unused__)))
11366|      0|{
11367|       |
11368|      0|    {
11369|      0|        {
11370|      0|            code_time((time_t)st->stat.st_mtim.tv_sec, (unsigned long)st->mtime_nsec,
11371|      0|                      keyword, xhdr);
11372|      0|        }
11373|      0|        return;
11374|      0|    }
11375|      0|}
11376|       |static void mtime_decoder(struct tar_stat_info *st, char const *arg)
11377|      0|{
11378|       |
11379|      0|    {
11380|      0|        {
11381|      0|            decode_time(arg, &st->stat.st_mtim.tv_sec, &st->mtime_nsec);
11382|      0|        }
11383|      0|        return;
11384|      0|    }
11385|      0|}
11386|       |static void path_coder(struct tar_stat_info const *st, char const *keyword,
11387|       |                       struct xheader *xhdr,
11388|       |                       void *data __attribute__((__unused__)))
11389|      0|{
11390|       |
11391|      0|    {
11392|      0|        {
11393|      0|            code_string((char const *)st->file_name, keyword, xhdr);
11394|      0|        }
11395|      0|        return;
11396|      0|    }
11397|      0|}
11398|       |static void path_decoder(struct tar_stat_info *st, char const *arg)
11399|      0|{
11400|       |
11401|      0|    {
11402|      0|        {
11403|      0|            decode_string(&st->orig_file_name, arg);
11404|      0|            decode_string(&st->file_name, arg);
11405|      0|            st->had_trailing_slash = strip_trailing_slashes(st->file_name);
11406|      0|        }
11407|      0|        return;
11408|      0|    }
11409|      0|}
11410|       |static void size_coder(struct tar_stat_info const *st, char const *keyword,
11411|       |                       struct xheader *xhdr,
11412|       |                       void *data __attribute__((__unused__)))
11413|      0|{
11414|       |
11415|      0|    {
11416|      0|        {
11417|      0|            code_num((uintmax_t)st->stat.st_size, keyword, xhdr);
11418|      0|        }
11419|      0|        return;
11420|      0|    }
11421|      0|}
11422|       |static void size_decoder(struct tar_stat_info *st, char const *arg)
11423|      0|{
11424|      0|    uintmax_t u;
11425|      0|    __off_t tmp;
11426|      0|    strtol_error tmp___0;
11427|      0|    char *__cil_tmp6;
11428|       |
11429|      0|    {
11430|      0|        {
11431|      0|            tmp___0 = xstrtoumax(arg, (char **)((void *)0), 10, &u, "");
11432|      0|        }
11433|      0|        if ((unsigned int)tmp___0 == 0U) {
11434|      0|            tmp = (__off_t)u;
11435|      0|            st->stat.st_size = tmp;
11436|      0|            st->archive_file_size = tmp;
11437|      0|        }
11438|      0|        return;
11439|      0|    }
11440|      0|}
11441|       |static void uid_coder(struct tar_stat_info const *st, char const *keyword,
11442|       |                      struct xheader *xhdr,
11443|       |                      void *data __attribute__((__unused__)))
11444|      0|{
11445|       |
11446|      0|    {
11447|      0|        {
11448|      0|            code_num((uintmax_t)st->stat.st_uid, keyword, xhdr);
11449|      0|        }
11450|      0|        return;
11451|      0|    }
11452|      0|}
11453|       |static void uid_decoder(struct tar_stat_info *st, char const *arg)
11454|      0|{
11455|      0|    uintmax_t u;
11456|      0|    strtol_error tmp;
11457|      0|    char *__cil_tmp5;
11458|       |
11459|      0|    {
11460|      0|        {
11461|      0|            tmp = xstrtoumax(arg, (char **)((void *)0), 10, &u, "");
11462|      0|        }
11463|      0|        if ((unsigned int)tmp == 0U) {
11464|      0|            st->stat.st_uid = (__uid_t)u;
11465|      0|        }
11466|      0|        return;
11467|      0|    }
11468|      0|}
11469|       |static void uname_coder(struct tar_stat_info const *st, char const *keyword,
11470|       |                        struct xheader *xhdr,
11471|       |                        void *data __attribute__((__unused__)))
11472|      0|{
11473|       |
11474|      0|    {
11475|      0|        {
11476|      0|            code_string((char const *)st->uname, keyword, xhdr);
11477|      0|        }
11478|      0|        return;
11479|      0|    }
11480|      0|}
11481|       |static void uname_decoder(struct tar_stat_info *st, char const *arg)
11482|      0|{
11483|       |
11484|      0|    {
11485|      0|        {
11486|      0|            decode_string(&st->uname, arg);
11487|      0|        }
11488|      0|        return;
11489|      0|    }
11490|      0|}
11491|       |static void sparse_size_coder(struct tar_stat_info const *st,
11492|       |                              char const *keyword, struct xheader *xhdr,
11493|       |                              void *data)
11494|      0|{
11495|       |
11496|      0|    {
11497|      0|        {
11498|      0|            size_coder(st, keyword, xhdr, data);
11499|      0|        }
11500|      0|        return;
11501|      0|    }
11502|      0|}
11503|       |static void sparse_size_decoder(struct tar_stat_info *st, char const *arg)
11504|      0|{
11505|      0|    uintmax_t u;
11506|      0|    strtol_error tmp;
11507|      0|    char *__cil_tmp5;
11508|       |
11509|      0|    {
11510|      0|        {
11511|      0|            tmp = xstrtoumax(arg, (char **)((void *)0), 10, &u, "");
11512|      0|        }
11513|      0|        if ((unsigned int)tmp == 0U) {
11514|      0|            st->stat.st_size = (__off_t)u;
11515|      0|        }
11516|      0|        return;
11517|      0|    }
11518|      0|}
11519|       |static void sparse_numblocks_coder(struct tar_stat_info const *st,
11520|       |                                   char const *keyword, struct xheader *xhdr,
11521|       |                                   void *data __attribute__((__unused__)))
11522|      0|{
11523|       |
11524|      0|    {
11525|      0|        {
11526|      0|            code_num((uintmax_t)st->sparse_map_avail, keyword, xhdr);
11527|      0|        }
11528|      0|        return;
11529|      0|    }
11530|      0|}
11531|       |static void sparse_numblocks_decoder(struct tar_stat_info *st,
11532|       |                                     char const *arg)
11533|      0|{
11534|      0|    uintmax_t u;
11535|      0|    void *tmp;
11536|      0|    strtol_error tmp___0;
11537|      0|    char *__cil_tmp6;
11538|       |
11539|      0|    {
11540|      0|        {
11541|      0|            tmp___0 = xstrtoumax(arg, (char **)((void *)0), 10, &u, "");
11542|      0|        }
11543|      0|        if ((unsigned int)tmp___0 == 0U) {
11544|      0|            {
11545|      0|                st->sparse_map_size = u;
11546|      0|                tmp = calloc(st->sparse_map_size, sizeof(*(st->sparse_map + 0)));
11547|      0|                st->sparse_map = (struct sp_array *)tmp;
11548|      0|                st->sparse_map_avail = (size_t)0;
11549|      0|            }
11550|      0|        }
11551|      0|        return;
11552|      0|    }
11553|      0|}
11554|       |static void sparse_offset_coder(struct tar_stat_info const *st,
11555|       |                                char const *keyword, struct xheader *xhdr,
11556|       |                                void *data)
11557|      0|{
11558|      0|    size_t i;
11559|       |
11560|      0|    {
11561|      0|        {
11562|      0|            i = *((size_t *)data);
11563|      0|            code_num((uintmax_t)(st->sparse_map + i)->offset, keyword, xhdr);
11564|      0|        }
11565|      0|        return;
11566|      0|    }
11567|      0|}
11568|       |static void sparse_offset_decoder(struct tar_stat_info *st, char const *arg)
11569|      0|{
11570|      0|    uintmax_t u;
11571|      0|    strtol_error tmp;
11572|      0|    char *__cil_tmp5;
11573|       |
11574|      0|    {
11575|      0|        {
11576|      0|            tmp = xstrtoumax(arg, (char **)((void *)0), 10, &u, "");
11577|      0|        }
11578|      0|        if ((unsigned int)tmp == 0U) {
11579|      0|            (st->sparse_map + st->sparse_map_avail)->offset = (off_t)u;
11580|      0|        }
11581|      0|        return;
11582|      0|    }
11583|      0|}
11584|       |static void sparse_numbytes_coder(struct tar_stat_info const *st,
11585|       |                                  char const *keyword, struct xheader *xhdr,
11586|       |                                  void *data)
11587|      0|{
11588|      0|    size_t i;
11589|       |
11590|      0|    {
11591|      0|        {
11592|      0|            i = *((size_t *)data);
11593|      0|            code_num((st->sparse_map + i)->numbytes, keyword, xhdr);
11594|      0|        }
11595|      0|        return;
11596|      0|    }
11597|      0|}
11598|       |static void sparse_numbytes_decoder(struct tar_stat_info *st, char const *arg)
11599|      0|{
11600|      0|    uintmax_t u;
11601|      0|    void *tmp;
11602|      0|    size_t tmp___0;
11603|      0|    strtol_error tmp___1;
11604|      0|    char *__cil_tmp7;
11605|       |
11606|      0|    {
11607|      0|        {
11608|      0|            tmp___1 = xstrtoumax(arg, (char **)((void *)0), 10, &u, "");
11609|      0|        }
11610|      0|        if ((unsigned int)tmp___1 == 0U) {
11611|      0|            if (st->sparse_map_avail == st->sparse_map_size) {
11612|      0|                {
11613|      0|                    st->sparse_map_size *= 2UL;
11614|      0|                    tmp = xrealloc((void *)st->sparse_map,
11615|      0|                                   st->sparse_map_size * sizeof(*(st->sparse_map + 0)));
11616|      0|                    st->sparse_map = (struct sp_array *)tmp;
11617|      0|                }
11618|      0|            }
11619|      0|            tmp___0 = st->sparse_map_avail;
11620|      0|            (st->sparse_map_avail)++;
11621|      0|            (st->sparse_map + tmp___0)->numbytes = u;
11622|      0|        }
11623|      0|        return;
11624|      0|    }
11625|      0|}
11626|       |struct xhdr_tab const xhdr_tab[17] = {
11627|       |    {"atime", &atime_coder, &atime_decoder, (_Bool)0},
11628|       |    {"comment", &dummy_coder, &dummy_decoder, (_Bool)0},
11629|       |    {"charset", &dummy_coder, &dummy_decoder, (_Bool)0},
11630|       |    {"ctime", &ctime_coder, &ctime_decoder, (_Bool)0},
11631|       |    {"gid", &gid_coder, &gid_decoder, (_Bool)0},
11632|       |    {"gname", &gname_coder, &gname_decoder, (_Bool)0},
11633|       |    {"linkpath", &linkpath_coder, &linkpath_decoder, (_Bool)0},
11634|       |    {"mtime", &mtime_coder, &mtime_decoder, (_Bool)0},
11635|       |    {"path", &path_coder, &path_decoder, (_Bool)0},
11636|       |    {"size", &size_coder, &size_decoder, (_Bool)0},
11637|       |    {"uid", &uid_coder, &uid_decoder, (_Bool)0},
11638|       |    {"uname", &uname_coder, &uname_decoder, (_Bool)0},
11639|       |    {"GNU.sparse.size", &sparse_size_coder, &sparse_size_decoder, (_Bool)1},
11640|       |    {
11641|       |        "GNU.sparse.numblocks", &sparse_numblocks_coder, &sparse_numblocks_decoder,
11642|       |        (_Bool)1
11643|       |    },
11644|       |    {
11645|       |        "GNU.sparse.offset", &sparse_offset_coder, &sparse_offset_decoder,
11646|       |        (_Bool)1
11647|       |    },
11648|       |    {
11649|       |        "GNU.sparse.numbytes", &sparse_numbytes_coder, &sparse_numbytes_decoder,
11650|       |        (_Bool)1
11651|       |    },
11652|       |    {
11653|       |        (char const *)((void *)0),
11654|       |        (void (*)(struct tar_stat_info const *, char const *, struct xheader *,
11655|       |                  void *data))((void *)0),
11656|       |        (void (*)(struct tar_stat_info *, char const *))((void *)0), (_Bool)0
11657|       |    }
11658|       |};
11659|       |/* #pragma merger("0","006.incremen.o.i","") */
11660|       |extern void(__attribute__((__nonnull__(1, 4)))
11661|       |            qsort)(void *__base, size_t __nmemb, size_t __size,
11662|       |                   int (*__compar)(void const *, void const *));
11663|       |extern __attribute__((__nothrow__))
11664|       |FILE *(__attribute__((__leaf__)) fdopen)(int __fd, char const *__modes);
11665|       |extern __ssize_t getline(char **__restrict __lineptr, size_t *__restrict __n,
11666|       |                         FILE *__restrict __stream);
11667|       |extern int fseek(FILE *__stream, long __off, int __whence);
11668|       |extern __attribute__((__nothrow__)) int(__attribute__((__leaf__))
11669|       |                                        fileno)(FILE *__stream);
11670|       |size_t hash_do_for_each(Hash_table const *table___0,
11671|       |                        _Bool (*processor)(void *, void *),
11672|       |                        void *processor_data);
11673|       |size_t hash_string(char const *string, size_t n_buckets);
11674|       |char const *program_name;
11675|       |void read_directory_file(void);
11676|       |char *quote_copy_string(char const *string);
11677|       |int unquote_string(char *string);
11678|       |void savedir_error(char const *name);
11679|       |void seek_error(char const *name);
11680|       |void truncate_error(char const *name);
11681|       |char *new_name(char const *path, char const *name);
11682|       |static Hash_table *directory_table;
11683|       |static unsigned int hash_directory(void const *entry, unsigned int n_buckets)
11684|      0|{
11685|      0|    struct directory const *directory;
11686|      0|    size_t tmp;
11687|       |
11688|      0|    {
11689|      0|        {
11690|      0|            directory = (struct directory const *)entry;
11691|      0|            tmp = hash_string((char const *)(directory->name), (size_t)n_buckets);
11692|      0|        }
11693|      0|        return ((unsigned int)tmp);
11694|      0|    }
11695|      0|}
11696|       |static _Bool compare_directories(void const *entry1, void const *entry2)
11697|      0|{
11698|      0|    struct directory const *directory1;
11699|      0|    struct directory const *directory2;
11700|      0|    int tmp;
11701|       |
11702|      0|    {
11703|      0|        {
11704|      0|            directory1 = (struct directory const *)entry1;
11705|      0|            directory2 = (struct directory const *)entry2;
11706|      0|            tmp = strcmp((char const *)(directory1->name),
11707|      0|                         (char const *)(directory2->name));
11708|      0|        }
11709|      0|        return ((_Bool)(tmp == 0));
11710|      0|    }
11711|      0|}
11712|       |static struct directory *note_directory(char const *name, dev_t dev, ino_t ino,
11713|       |                                        _Bool nfs, _Bool found)
11714|      0|{
11715|      0|    size_t size;
11716|      0|    size_t tmp;
11717|      0|    struct directory *directory;
11718|      0|    void *tmp___0;
11719|      0|    void *tmp___1;
11720|       |
11721|      0|    {
11722|      0|        {
11723|      0|            tmp = strlen(name);
11724|      0|            size = ((unsigned long)(&((struct directory *)0)->name) + tmp) + 1UL;
11725|      0|            tmp___0 = xmalloc(size);
11726|      0|            directory = (struct directory *)tmp___0;
11727|      0|            directory->device_number = dev;
11728|      0|            directory->inode_number = ino;
11729|      0|            directory->children = (enum children)1;
11730|      0|            directory->nfs = nfs;
11731|      0|            directory->found = found;
11732|      0|            strcpy((char * /* __restrict  */)(directory->name),
11733|      0|                   (char const * /* __restrict  */)name);
11734|      0|        }
11735|      0|        if (directory_table) {
11736|      0|            goto _L;
11737|      0|        }
11738|      0|        else {
11739|      0|            {
11740|      0|                directory_table =
11741|      0|                    hash_initialize((size_t)0, (Hash_tuning const *)0,
11742|      0|                                    (size_t(*)(void const *, size_t))(&hash_directory),
11743|      0|                                    &compare_directories, (void (*)(void *))0);
11744|      0|            }
11745|      0|            if (directory_table) {
11746|      0|_L : {
11747|      0|                    tmp___1 = hash_insert(directory_table, (void const *)directory);
11748|      0|                }
11749|      0|                if (!tmp___1) {
11750|      0|                    {
11751|      0|                        xalloc_die();
11752|      0|                    }
11753|      0|                }
11754|      0|            }
11755|      0|            else {
11756|      0|                {
11757|      0|                    xalloc_die();
11758|      0|                }
11759|      0|            }
11760|      0|        }
11761|      0|        return (directory);
11762|      0|    }
11763|      0|}
11764|       |static struct directory *find_directory(char *name)
11765|      0|{
11766|      0|    size_t size;
11767|      0|    size_t tmp;
11768|      0|    struct directory *dir;
11769|      0|    void *tmp___0;
11770|      0|    void *tmp___1;
11771|       |
11772|      0|    {
11773|      0|        if (!directory_table) {
11774|      0|            return ((struct directory *)0);
11775|      0|        }
11776|      0|        else {
11777|      0|            {
11778|      0|                tmp = strlen((char const *)name);
11779|      0|                size = ((unsigned long)(&((struct directory *)0)->name) + tmp) + 1UL;
11780|      0|                tmp___0 = __builtin_alloca(size);
11781|      0|                dir = (struct directory *)tmp___0;
11782|      0|                strcpy((char * /* __restrict  */)(dir->name),
11783|      0|                       (char const * /* __restrict  */)name);
11784|      0|                tmp___1 =
11785|      0|                    hash_lookup((Hash_table const *)directory_table, (void const *)dir);
11786|      0|            }
11787|      0|            return ((struct directory *)tmp___1);
11788|      0|        }
11789|      0|    }
11790|      0|}
11791|       |static int compare_dirents(void const *first, void const *second)
11792|      0|{
11793|      0|    int tmp;
11794|       |
11795|      0|    {
11796|      0|        {
11797|      0|            tmp = strcmp((char const *)(*((char *const *)first) + 1),
11798|      0|                         (char const *)(*((char *const *)second) + 1));
11799|      0|        }
11800|      0|        return (tmp);
11801|      0|    }
11802|      0|}
11803|       |static void scan_path(struct obstack *stk, char *path, dev_t device)
11804|      0|{
11805|      0|    char *dirp;
11806|      0|    char *tmp;
11807|      0|    char const *entry;
11808|      0|    size_t entrylen;
11809|      0|    char *name_buffer___0;
11810|      0|    size_t name_buffer_size;
11811|      0|    size_t name_length;
11812|      0|    struct directory *directory;
11813|      0|    enum children children;
11814|      0|    int *tmp___0;
11815|      0|    size_t tmp___1;
11816|      0|    void *tmp___2;
11817|      0|    size_t tmp___3;
11818|      0|    void *tmp___4;
11819|      0|    struct obstack *__o;
11820|      0|    char *tmp___5;
11821|      0|    struct stat stat_data;
11822|      0|    int tmp___6;
11823|      0|    _Bool nfs;
11824|      0|    char *tmp___7;
11825|      0|    char *tmp___8;
11826|      0|    char *tmp___9;
11827|      0|    char *tmp___10;
11828|      0|    struct obstack *__o___0;
11829|      0|    char *tmp___11;
11830|      0|    struct obstack *__o___1;
11831|      0|    char *tmp___12;
11832|      0|    struct obstack *__o___2;
11833|      0|    char *tmp___13;
11834|      0|    struct obstack *__o___3;
11835|      0|    char *tmp___14;
11836|      0|    _Bool tmp___15;
11837|      0|    struct obstack *__o___4;
11838|      0|    int __len;
11839|      0|    struct obstack *__o___5;
11840|      0|    int __len___0;
11841|      0|    unsigned int tmp___16;
11842|      0|    int tmp___17;
11843|      0|    void *__cil_tmp42;
11844|      0|    char *__cil_tmp43;
11845|      0|    char *__cil_tmp44;
11846|      0|    char *__cil_tmp45;
11847|      0|    char *__cil_tmp46;
11848|       |
11849|      0|    {
11850|      0|        {
11851|      0|            tmp = savedir((char const *)path);
11852|      0|            dirp = tmp;
11853|      0|        }
11854|      0|        if (!dirp) {
11855|      0|            {
11856|      0|                savedir_error((char const *)path);
11857|      0|            }
11858|      0|        }
11859|      0|        {
11860|      0|            tmp___0 = __errno_location();
11861|      0|            *tmp___0 = 0;
11862|      0|            tmp___1 = strlen((char const *)path);
11863|      0|            name_buffer_size = tmp___1 + 100UL;
11864|      0|            tmp___2 = xmalloc(name_buffer_size + 2UL);
11865|      0|            name_buffer___0 = (char *)tmp___2;
11866|      0|            strcpy((char * /* __restrict  */)name_buffer___0,
11867|      0|                   (char const * /* __restrict  */)path);
11868|      0|            tmp___3 = strlen((char const *)path);
11869|      0|        }
11870|      0|        if (!((int)*(path + (tmp___3 - 1UL)) == 47)) {
11871|      0|            {
11872|      0|                strcat((char * /* __restrict  */)name_buffer___0,
11873|      0|                       (char const * /* __restrict  */) "/");
11874|      0|            }
11875|      0|        }
11876|      0|        {
11877|      0|            name_length = strlen((char const *)name_buffer___0);
11878|      0|            directory = find_directory(path);
11879|      0|        }
11880|      0|        if (directory) {
11881|      0|            tmp___16 = (unsigned int)directory->children;
11882|      0|        }
11883|      0|        else {
11884|      0|            tmp___16 = 1U;
11885|      0|        }
11886|      0|        children = (enum children)tmp___16;
11887|      0|        if (dirp) {
11888|      0|            if ((unsigned int)children != 0U) {
11889|      0|                entry = (char const *)dirp;
11890|      0|                {
11891|      0|                    while (1) {
11892|      0|while_continue: /* CIL Label */
11893|      0|                        ;
11894|      0|                        {
11895|      0|                            entrylen = strlen(entry);
11896|      0|                        }
11897|      0|                        if (!(entrylen != 0UL)) {
11898|      0|                            goto while_break;
11899|      0|                        }
11900|      0|                        if (name_buffer_size <= entrylen + name_length) {
11901|      0|                            {
11902|      0|                                while (1) {
11903|      0|while_continue___0: /* CIL Label */
11904|      0|                                    ;
11905|      0|                                    name_buffer_size += 100UL;
11906|      0|                                    if (!(name_buffer_size <= entrylen + name_length)) {
11907|      0|                                        goto while_break___0;
11908|      0|                                    }
11909|      0|                                }
11910|      0|while_break___0: /* CIL Label */
11911|      0|                                ;
11912|      0|                            }
11913|      0|                            {
11914|      0|                                tmp___4 =
11915|      0|                                    xrealloc((void *)name_buffer___0, name_buffer_size + 2UL);
11916|      0|                                name_buffer___0 = (char *)tmp___4;
11917|      0|                            }
11918|      0|                        }
11919|      0|                        {
11920|      0|                            strcpy((char * /* __restrict  */)(name_buffer___0 + name_length),
11921|      0|                                   (char const * /* __restrict  */)entry);
11922|      0|                            tmp___15 = excluded_name((char const *)name_buffer___0);
11923|      0|                        }
11924|      0|                        if (tmp___15) {
11925|      0|                            __o = stk;
11926|      0|                            if ((unsigned long)(__o->next_free + 1) >
11927|      0|                                    (unsigned long)__o->chunk_limit) {
11928|      0|                                {
11929|      0|                                    _obstack_newchunk(__o, 1);
11930|      0|                                }
11931|      0|                            }
11932|      0|                            tmp___5 = __o->next_free;
11933|      0|                            (__o->next_free)++;
11934|      0|                            *tmp___5 = (char)'N';
11935|      0|                        }
11936|      0|                        else {
11937|      0|                            {
11938|      0|                                tmp___6 = deref_stat(dereference_option,
11939|      0|                                                     (char const *)name_buffer___0, &stat_data);
11940|      0|                            }
11941|      0|                            if (tmp___6) {
11942|      0|                                {
11943|      0|                                    stat_diag((char const *)name_buffer___0);
11944|      0|                                }
11945|      0|                                goto __Cont;
11946|      0|                            }
11947|      0|                            if ((stat_data.st_mode & 61440U) == 16384U) {
11948|      0|                                {
11949|      0|                                    nfs = (_Bool)((stat_data.st_dev &
11950|      0|                                                   (0xffffffffffffffffUL
11951|      0|                                                    << (sizeof(stat_data.st_dev) * 8UL - 1UL))) !=
11952|      0|                                                  0UL);
11953|      0|                                    directory = find_directory(name_buffer___0);
11954|      0|                                }
11955|      0|                                if ((unsigned long)directory != (unsigned long)((void *)0)) {
11956|      0|                                    if ((int)directory->nfs & (int)nfs) {
11957|      0|                                        goto _L___4;
11958|      0|                                    }
11959|      0|                                    else {
11960|      0|                                        if (directory->device_number == stat_data.st_dev) {
11961|      0|_L___4: /* CIL Label */
11962|      0|                                            if (!(directory->inode_number == stat_data.st_ino)) {
11963|      0|                                                goto _L___3;
11964|      0|                                            }
11965|      0|                                        }
11966|      0|                                        else {
11967|      0|_L___3: /* CIL Label */
11968|      0|                                            if (verbose_option) {
11969|      0|                                                {
11970|      0|                                                    tmp___7 =
11971|      0|                                                        quotearg_colon((char const *)name_buffer___0);
11972|      0|                                                    tmp___8 = gettext("%s: Directory has been renamed");
11973|      0|                                                    error(0, 0, (char const *)tmp___8, tmp___7);
11974|      0|                                                }
11975|      0|                                            }
11976|      0|                                            directory->children = (enum children)2;
11977|      0|                                            directory->nfs = nfs;
11978|      0|                                            directory->device_number = stat_data.st_dev;
11979|      0|                                            directory->inode_number = stat_data.st_ino;
11980|      0|                                        }
11981|      0|                                    }
11982|      0|                                    directory->found = (_Bool)1;
11983|      0|                                }
11984|      0|                                else {
11985|      0|                                    if (verbose_option) {
11986|      0|                                        {
11987|      0|                                            tmp___9 = quotearg_colon((char const *)name_buffer___0);
11988|      0|                                            tmp___10 = gettext("%s: Directory is new");
11989|      0|                                            error(0, 0, (char const *)tmp___10, tmp___9);
11990|      0|                                        }
11991|      0|                                    }
11992|      0|                                    {
11993|      0|                                        directory = note_directory((char const *)name_buffer___0,
11994|      0|                                                                   stat_data.st_dev,
11995|      0|                                                                   stat_data.st_ino, nfs, (_Bool)1);
11996|      0|                                    }
11997|      0|                                    if (listed_incremental_option) {
11998|      0|                                        tmp___17 = 2;
11999|      0|                                    }
12000|      0|                                    else {
12001|      0|                                        if (stat_data.st_mtim.tv_sec < newer_mtime_option.tv_sec) {
12002|      0|                                            tmp___17 = 2;
12003|      0|                                        }
12004|      0|                                        else {
12005|      0|                                            if (stat_data.st_mtim.tv_sec ==
12006|      0|                                                    newer_mtime_option.tv_sec) {
12007|      0|                                                if (stat_data.st_mtim.tv_nsec <
12008|      0|                                                        newer_mtime_option.tv_nsec) {
12009|      0|                                                    tmp___17 = 2;
12010|      0|                                                }
12011|      0|                                                else {
12012|      0|                                                    goto _L___5;
12013|      0|                                                }
12014|      0|                                            }
12015|      0|                                            else {
12016|      0|_L___5: /* CIL Label */
12017|      0|                                                if (after_date_option) {
12018|      0|                                                    if (stat_data.st_ctim.tv_sec <
12019|      0|                                                            newer_mtime_option.tv_sec) {
12020|      0|                                                        tmp___17 = 2;
12021|      0|                                                    }
12022|      0|                                                    else {
12023|      0|                                                        if (stat_data.st_ctim.tv_sec ==
12024|      0|                                                                newer_mtime_option.tv_sec) {
12025|      0|                                                            if (stat_data.st_ctim.tv_nsec <
12026|      0|                                                                    newer_mtime_option.tv_nsec) {
12027|      0|                                                                tmp___17 = 2;
12028|      0|                                                            }
12029|      0|                                                            else {
12030|      0|                                                                tmp___17 = 1;
12031|      0|                                                            }
12032|      0|                                                        }
12033|      0|                                                        else {
12034|      0|                                                            tmp___17 = 1;
12035|      0|                                                        }
12036|      0|                                                    }
12037|      0|                                                }
12038|      0|                                                else {
12039|      0|                                                    tmp___17 = 1;
12040|      0|                                                }
12041|      0|                                            }
12042|      0|                                        }
12043|      0|                                    }
12044|      0|                                    directory->children = (enum children)tmp___17;
12045|      0|                                }
12046|      0|                                if (one_file_system_option) {
12047|      0|                                    if (device != stat_data.st_dev) {
12048|      0|                                        directory->children = (enum children)0;
12049|      0|                                    }
12050|      0|                                    else {
12051|      0|                                        goto _L___6;
12052|      0|                                    }
12053|      0|                                }
12054|      0|                                else {
12055|      0|_L___6: /* CIL Label */
12056|      0|                                    if ((unsigned int)children == 2U) {
12057|      0|                                        directory->children = (enum children)2;
12058|      0|                                    }
12059|      0|                                }
12060|      0|                                __o___0 = stk;
12061|      0|                                if ((unsigned long)(__o___0->next_free + 1) >
12062|      0|                                        (unsigned long)__o___0->chunk_limit) {
12063|      0|                                    {
12064|      0|                                        _obstack_newchunk(__o___0, 1);
12065|      0|                                    }
12066|      0|                                }
12067|      0|                                tmp___11 = __o___0->next_free;
12068|      0|                                (__o___0->next_free)++;
12069|      0|                                *tmp___11 = (char)'D';
12070|      0|                            }
12071|      0|                            else {
12072|      0|                                if (one_file_system_option) {
12073|      0|                                    if (device != stat_data.st_dev) {
12074|      0|                                        __o___1 = stk;
12075|      0|                                        if ((unsigned long)(__o___1->next_free + 1) >
12076|      0|                                                (unsigned long)__o___1->chunk_limit) {
12077|      0|                                            {
12078|      0|                                                _obstack_newchunk(__o___1, 1);
12079|      0|                                            }
12080|      0|                                        }
12081|      0|                                        tmp___12 = __o___1->next_free;
12082|      0|                                        (__o___1->next_free)++;
12083|      0|                                        *tmp___12 = (char)'N';
12084|      0|                                    }
12085|      0|                                    else {
12086|      0|                                        goto _L___12;
12087|      0|                                    }
12088|      0|                                }
12089|      0|                                else {
12090|      0|_L___12: /* CIL Label */
12091|      0|                                    if ((unsigned int)children == 1U) {
12092|      0|                                        if (stat_data.st_mtim.tv_sec < newer_mtime_option.tv_sec) {
12093|      0|                                            goto _L___11;
12094|      0|                                        }
12095|      0|                                        else {
12096|      0|                                            if (stat_data.st_mtim.tv_sec ==
12097|      0|                                                    newer_mtime_option.tv_sec) {
12098|      0|                                                if (stat_data.st_mtim.tv_nsec <
12099|      0|                                                        newer_mtime_option.tv_nsec) {
12100|      0|_L___11: /* CIL Label */
12101|      0|                                                    if (!after_date_option) {
12102|      0|                                                        goto _L___9;
12103|      0|                                                    }
12104|      0|                                                    else {
12105|      0|                                                        if (stat_data.st_ctim.tv_sec <
12106|      0|                                                                newer_mtime_option.tv_sec) {
12107|      0|                                                            goto _L___9;
12108|      0|                                                        }
12109|      0|                                                        else {
12110|      0|                                                            if (stat_data.st_ctim.tv_sec ==
12111|      0|                                                                    newer_mtime_option.tv_sec) {
12112|      0|                                                                if (stat_data.st_ctim.tv_nsec <
12113|      0|                                                                        newer_mtime_option.tv_nsec) {
12114|      0|_L___9: /* CIL Label */
12115|      0|                                                                    __o___2 = stk;
12116|      0|                                                                    if ((unsigned long)(__o___2->next_free + 1) >
12117|      0|                                                                            (unsigned long)__o___2->chunk_limit) {
12118|      0|                                                                        {
12119|      0|                                                                            _obstack_newchunk(__o___2, 1);
12120|      0|                                                                        }
12121|      0|                                                                    }
12122|      0|                                                                    tmp___13 = __o___2->next_free;
12123|      0|                                                                    (__o___2->next_free)++;
12124|      0|                                                                    *tmp___13 = (char)'N';
12125|      0|                                                                }
12126|      0|                                                                else {
12127|      0|                                                                    goto _L___10;
12128|      0|                                                                }
12129|      0|                                                            }
12130|      0|                                                            else {
12131|      0|                                                                goto _L___10;
12132|      0|                                                            }
12133|      0|                                                        }
12134|      0|                                                    }
12135|      0|                                                }
12136|      0|                                                else {
12137|      0|                                                    goto _L___10;
12138|      0|                                                }
12139|      0|                                            }
12140|      0|                                            else {
12141|      0|                                                goto _L___10;
12142|      0|                                            }
12143|      0|                                        }
12144|      0|                                    }
12145|      0|                                    else {
12146|      0|_L___10: /* CIL Label */
12147|      0|                                        __o___3 = stk;
12148|      0|                                        if ((unsigned long)(__o___3->next_free + 1) >
12149|      0|                                                (unsigned long)__o___3->chunk_limit) {
12150|      0|                                            {
12151|      0|                                                _obstack_newchunk(__o___3, 1);
12152|      0|                                            }
12153|      0|                                        }
12154|      0|                                        tmp___14 = __o___3->next_free;
12155|      0|                                        (__o___3->next_free)++;
12156|      0|                                        *tmp___14 = (char)'Y';
12157|      0|                                    }
12158|      0|                                }
12159|      0|                            }
12160|      0|                        }
12161|      0|                        __o___4 = stk;
12162|      0|                        __len = (int)(entrylen + 1UL);
12163|      0|                        if ((unsigned long)(__o___4->next_free + __len) >
12164|      0|                                (unsigned long)__o___4->chunk_limit) {
12165|      0|                            {
12166|      0|                                _obstack_newchunk(__o___4, __len);
12167|      0|                            }
12168|      0|                        }
12169|      0|                        {
12170|      0|                            memcpy((void * /* __restrict  */)__o___4->next_free,
12171|      0|                                   (void const * /* __restrict  */)entry, (size_t)__len);
12172|      0|                            __o___4->next_free += __len;
12173|      0|                        }
12174|      0|__Cont:
12175|      0|                        entry += entrylen + 1UL;
12176|      0|                    }
12177|      0|while_break: /* CIL Label */
12178|      0|                    ;
12179|      0|                }
12180|      0|            }
12181|      0|        }
12182|      0|        __o___5 = stk;
12183|      0|        __len___0 = 2;
12184|      0|        if ((unsigned long)(__o___5->next_free + __len___0) >
12185|      0|                (unsigned long)__o___5->chunk_limit) {
12186|      0|            {
12187|      0|                _obstack_newchunk(__o___5, __len___0);
12188|      0|            }
12189|      0|        }
12190|      0|        {
12191|      0|            memcpy((void * /* __restrict  */)__o___5->next_free,
12192|      0|                   (void const * /* __restrict  */) "\000\000", (size_t)__len___0);
12193|      0|            __o___5->next_free += __len___0;
12194|      0|            free((void *)name_buffer___0);
12195|      0|        }
12196|      0|        if (dirp) {
12197|      0|            {
12198|      0|                free((void *)dirp);
12199|      0|            }
12200|      0|        }
12201|      0|        return;
12202|      0|    }
12203|      0|}
12204|       |static char *sort_obstack(struct obstack *stk)
12205|      0|{
12206|      0|    char *pointer;
12207|      0|    struct obstack *__o1;
12208|      0|    void *value;
12209|      0|    size_t counter;
12210|      0|    char *cursor;
12211|      0|    char *buffer___2;
12212|      0|    char **array;
12213|      0|    char **array_cursor;
12214|      0|    size_t tmp;
12215|      0|    struct obstack *__h;
12216|      0|    struct obstack *__o;
12217|      0|    int __len;
12218|      0|    struct obstack *__o1___0;
12219|      0|    void *value___0;
12220|      0|    size_t tmp___0;
12221|      0|    char **tmp___1;
12222|      0|    void *tmp___2;
12223|      0|    char *string;
12224|      0|    char *tmp___3;
12225|      0|    char tmp___4;
12226|      0|    char *tmp___5;
12227|       |
12228|      0|    {
12229|      0|        __o1 = stk;
12230|      0|        value = (void *)__o1->object_base;
12231|      0|        if ((unsigned long)__o1->next_free == (unsigned long)value) {
12232|      0|            __o1->maybe_empty_object = 1U;
12233|      0|        }
12234|      0|        __o1->next_free =
12235|      0|            (char *)0 +
12236|      0|            (((__o1->next_free - (char *)0) + (long)__o1->alignment_mask) &
12237|      0|             (long)(~__o1->alignment_mask));
12238|      0|        if (__o1->next_free - (char *)__o1->chunk >
12239|      0|                __o1->chunk_limit - (char *)__o1->chunk) {
12240|      0|            __o1->next_free = __o1->chunk_limit;
12241|      0|        }
12242|      0|        __o1->object_base = __o1->next_free;
12243|      0|        pointer = (char *)value;
12244|      0|        counter = (size_t)0;
12245|      0|        cursor = pointer;
12246|      0|        {
12247|      0|            while (1) {
12248|      0|while_continue: /* CIL Label */
12249|      0|                ;
12250|      0|                if (!*cursor) {
12251|      0|                    goto while_break;
12252|      0|                }
12253|      0|                {
12254|      0|                    counter++;
12255|      0|                    tmp = strlen((char const *)cursor);
12256|      0|                    cursor += tmp + 1UL;
12257|      0|                }
12258|      0|            }
12259|      0|while_break: /* CIL Label */
12260|      0|            ;
12261|      0|        }
12262|      0|        if (!counter) {
12263|      0|            return ((char *)((void *)0));
12264|      0|        }
12265|      0|        __h = stk;
12266|      0|        __o = __h;
12267|      0|        __len = (int)(sizeof(char *) * (counter + 1UL));
12268|      0|        if (__o->chunk_limit - __o->next_free < (long)__len) {
12269|      0|            {
12270|      0|                _obstack_newchunk(__o, __len);
12271|      0|            }
12272|      0|        }
12273|      0|        __o->next_free += __len;
12274|      0|        __o1___0 = __h;
12275|      0|        value___0 = (void *)__o1___0->object_base;
12276|      0|        if ((unsigned long)__o1___0->next_free == (unsigned long)value___0) {
12277|      0|            __o1___0->maybe_empty_object = 1U;
12278|      0|        }
12279|      0|        __o1___0->next_free =
12280|      0|            (char *)0 +
12281|      0|            (((__o1___0->next_free - (char *)0) + (long)__o1___0->alignment_mask) &
12282|      0|             (long)(~__o1___0->alignment_mask));
12283|      0|        if (__o1___0->next_free - (char *)__o1___0->chunk >
12284|      0|                __o1___0->chunk_limit - (char *)__o1___0->chunk) {
12285|      0|            __o1___0->next_free = __o1___0->chunk_limit;
12286|      0|        }
12287|      0|        __o1___0->object_base = __o1___0->next_free;
12288|      0|        array = (char **)value___0;
12289|      0|        array_cursor = array;
12290|      0|        cursor = pointer;
12291|      0|        {
12292|      0|            while (1) {
12293|      0|while_continue___0: /* CIL Label */
12294|      0|                ;
12295|      0|                if (!*cursor) {
12296|      0|                    goto while_break___0;
12297|      0|                }
12298|      0|                {
12299|      0|                    tmp___1 = array_cursor;
12300|      0|                    array_cursor++;
12301|      0|                    *tmp___1 = cursor;
12302|      0|                    tmp___0 = strlen((char const *)cursor);
12303|      0|                    cursor += tmp___0 + 1UL;
12304|      0|                }
12305|      0|            }
12306|      0|while_break___0: /* CIL Label */
12307|      0|            ;
12308|      0|        }
12309|      0|        {
12310|      0|            *array_cursor = (char *)0;
12311|      0|            qsort((void *)array, counter, sizeof(char *), &compare_dirents);
12312|      0|            tmp___2 = xmalloc((size_t)((cursor - pointer) + 2L));
12313|      0|            buffer___2 = (char *)tmp___2;
12314|      0|            cursor = buffer___2;
12315|      0|            array_cursor = array;
12316|      0|        }
12317|      0|        {
12318|      0|            while (1) {
12319|      0|while_continue___1: /* CIL Label */
12320|      0|                ;
12321|      0|                if (!*array_cursor) {
12322|      0|                    goto while_break___1;
12323|      0|                }
12324|      0|                string = *array_cursor;
12325|      0|                {
12326|      0|                    while (1) {
12327|      0|while_continue___2: /* CIL Label */
12328|      0|                        ;
12329|      0|                        tmp___3 = cursor;
12330|      0|                        cursor++;
12331|      0|                        tmp___5 = string;
12332|      0|                        string++;
12333|      0|                        tmp___4 = *tmp___5;
12334|      0|                        *tmp___3 = tmp___4;
12335|      0|                        if (!tmp___4) {
12336|      0|                            goto while_break___2;
12337|      0|                        }
12338|      0|                        goto while_continue___2;
12339|      0|                    }
12340|      0|while_break___2: /* CIL Label */
12341|      0|                    ;
12342|      0|                }
12343|      0|                array_cursor++;
12344|      0|            }
12345|      0|while_break___1: /* CIL Label */
12346|      0|            ;
12347|      0|        }
12348|      0|        *cursor = (char)'\000';
12349|      0|        return (buffer___2);
12350|      0|    }
12351|      0|}
12352|       |char *get_directory_contents(char *path, dev_t device)
12353|      0|{
12354|      0|    struct obstack stk;
12355|      0|    char *buffer___2;
12356|      0|    struct obstack *__o;
12357|      0|    void *__obj;
12358|      0|    char *tmp;
12359|       |
12360|      0|    {
12361|      0|        {
12362|      0|            _obstack_begin(&stk, 0, 0, (void *(*)(long))(&xmalloc),
12363|      0|                           (void (*)(void *))(&free));
12364|      0|            scan_path(&stk, path, device);
12365|      0|            buffer___2 = sort_obstack(&stk);
12366|      0|            __o = &stk;
12367|      0|            __obj = (void *)0;
12368|      0|        }
12369|      0|        if ((unsigned long)__obj > (unsigned long)((void *)__o->chunk)) {
12370|      0|            if ((unsigned long)__obj < (unsigned long)((void *)__o->chunk_limit)) {
12371|      0|                tmp = (char *)__obj;
12372|      0|                __o->object_base = tmp;
12373|      0|                __o->next_free = tmp;
12374|      0|            }
12375|      0|            else {
12376|      0|                {
12377|      0|                    obstack_free(__o, __obj);
12378|      0|                }
12379|      0|            }
12380|      0|        }
12381|      0|        else {
12382|      0|            {
12383|      0|                obstack_free(__o, __obj);
12384|      0|            }
12385|      0|        }
12386|      0|        return (buffer___2);
12387|      0|    }
12388|      0|}
12389|       |static FILE *listed_incremental_stream;
12390|       |void read_directory_file(void)
12391|      0|{
12392|      0|    int fd;
12393|      0|    FILE *fp;
12394|      0|    char *buf;
12395|      0|    size_t bufsize;
12396|      0|    char *ebuf;
12397|      0|    int n;
12398|      0|    long lineno;
12399|      0|    unsigned long u;
12400|      0|    int *tmp;
12401|      0|    unsigned long tmp___0;
12402|      0|    time_t t;
12403|      0|    char *tmp___1;
12404|      0|    char *tmp___2;
12405|      0|    char *tmp___3;
12406|      0|    char *tmp___4;
12407|      0|    int *tmp___5;
12408|      0|    int *tmp___6;
12409|      0|    dev_t dev;
12410|      0|    ino_t ino;
12411|      0|    _Bool nfs;
12412|      0|    char *strp;
12413|      0|    int *tmp___7;
12414|      0|    char *tmp___8;
12415|      0|    char *tmp___9;
12416|      0|    char *tmp___10;
12417|      0|    char *tmp___11;
12418|      0|    int *tmp___12;
12419|      0|    int *tmp___13;
12420|      0|    int *tmp___14;
12421|      0|    char *tmp___15;
12422|      0|    char *tmp___16;
12423|      0|    char *tmp___17;
12424|      0|    char *tmp___18;
12425|      0|    int *tmp___19;
12426|      0|    int *tmp___20;
12427|      0|    __ssize_t tmp___21;
12428|      0|    __ssize_t tmp___22;
12429|      0|    int tmp___23;
12430|      0|    char *__cil_tmp39;
12431|      0|    char *__cil_tmp40;
12432|      0|    char *__cil_tmp41;
12433|      0|    char *__cil_tmp42;
12434|      0|    char *__cil_tmp43;
12435|      0|    char *__cil_tmp44;
12436|      0|    char *__cil_tmp45;
12437|      0|    char *__cil_tmp46;
12438|      0|    char *__cil_tmp47;
12439|      0|    char *__cil_tmp48;
12440|      0|    char *__cil_tmp49;
12441|      0|    char *__cil_tmp50;
12442|       |
12443|      0|    {
12444|      0|        {
12445|      0|            buf = (char *)0;
12446|      0|            fd = open(listed_incremental_option, 66,
12447|      0|                      ((128 | (128 >> 3)) | ((128 >> 3) >> 3)) |
12448|      0|                      ((256 | (256 >> 3)) | ((256 >> 3) >> 3)));
12449|      0|        }
12450|      0|        if (fd < 0) {
12451|      0|            {
12452|      0|                open_error(listed_incremental_option);
12453|      0|            }
12454|      0|            return;
12455|      0|        }
12456|      0|        {
12457|      0|            fp = fdopen(fd, "r+");
12458|      0|        }
12459|      0|        if (!fp) {
12460|      0|            {
12461|      0|                open_error(listed_incremental_option);
12462|      0|                close(fd);
12463|      0|            }
12464|      0|            return;
12465|      0|        }
12466|      0|        {
12467|      0|            listed_incremental_stream = fp;
12468|      0|            tmp___22 = getline((char ** /* __restrict  */)(&buf),
12469|      0|                               (size_t * /* __restrict  */)(&bufsize),
12470|      0|                               (FILE * /* __restrict  */) fp);
12471|      0|        }
12472|      0|        if (0L < tmp___22) {
12473|      0|            {
12474|      0|                lineno = 1L;
12475|      0|                tmp = __errno_location();
12476|      0|                *tmp = 0;
12477|      0|                tmp___0 = strtoul((char const * /* __restrict  */)buf,
12478|      0|                                  (char ** /* __restrict  */)(&ebuf), 10);
12479|      0|                u = tmp___0;
12480|      0|                t = (time_t)u;
12481|      0|            }
12482|      0|            if ((unsigned long)buf == (unsigned long)ebuf) {
12483|      0|                {
12484|      0|                    tmp___1 = gettext("Invalid time stamp");
12485|      0|                    tmp___2 = quotearg_colon(listed_incremental_option);
12486|      0|                    error(0, 0, "%s:1: %s", tmp___2, tmp___1);
12487|      0|                    exit_status = 2;
12488|      0|                }
12489|      0|            }
12490|      0|            else {
12491|      0|                if (u == 0UL) {
12492|      0|                    {
12493|      0|                        tmp___6 = __errno_location();
12494|      0|                    }
12495|      0|                    if (*tmp___6 == 22) {
12496|      0|                        {
12497|      0|                            tmp___1 = gettext("Invalid time stamp");
12498|      0|                            tmp___2 = quotearg_colon(listed_incremental_option);
12499|      0|                            error(0, 0, "%s:1: %s", tmp___2, tmp___1);
12500|      0|                            exit_status = 2;
12501|      0|                        }
12502|      0|                    }
12503|      0|                    else {
12504|      0|                        goto _L;
12505|      0|                    }
12506|      0|                }
12507|      0|                else {
12508|      0|_L:
12509|      0|                    if ((unsigned long)t != u) {
12510|      0|                        {
12511|      0|                            tmp___3 = gettext("Time stamp out of range");
12512|      0|                            tmp___4 = quotearg_colon(listed_incremental_option);
12513|      0|                            error(0, 0, "%s:1: %s", tmp___4, tmp___3);
12514|      0|                            exit_status = 2;
12515|      0|                        }
12516|      0|                    }
12517|      0|                    else {
12518|      0|                        if (u == 0xffffffffffffffffUL) {
12519|      0|                            {
12520|      0|                                tmp___5 = __errno_location();
12521|      0|                            }
12522|      0|                            if (*tmp___5 == 34) {
12523|      0|                                {
12524|      0|                                    tmp___3 = gettext("Time stamp out of range");
12525|      0|                                    tmp___4 = quotearg_colon(listed_incremental_option);
12526|      0|                                    error(0, 0, "%s:1: %s", tmp___4, tmp___3);
12527|      0|                                    exit_status = 2;
12528|      0|                                }
12529|      0|                            }
12530|      0|                            else {
12531|      0|                                newer_mtime_option.tv_sec = t;
12532|      0|                                newer_mtime_option.tv_nsec = (__syscall_slong_t)0;
12533|      0|                            }
12534|      0|                        }
12535|      0|                        else {
12536|      0|                            newer_mtime_option.tv_sec = t;
12537|      0|                            newer_mtime_option.tv_nsec = (__syscall_slong_t)0;
12538|      0|                        }
12539|      0|                    }
12540|      0|                }
12541|      0|            }
12542|      0|            {
12543|      0|                while (1) {
12544|      0|while_continue: /* CIL Label */
12545|      0|                    ;
12546|      0|                    {
12547|      0|                        tmp___21 = getline((char ** /* __restrict  */)(&buf),
12548|      0|                                           (size_t * /* __restrict  */)(&bufsize),
12549|      0|                                           (FILE * /* __restrict  */) fp);
12550|      0|                        n = (int)tmp___21;
12551|      0|                    }
12552|      0|                    if (!(0 < n)) {
12553|      0|                        goto while_break;
12554|      0|                    }
12555|      0|                    nfs = (_Bool)((int)*(buf + 0) == 43);
12556|      0|                    strp = buf + (int)nfs;
12557|      0|                    lineno++;
12558|      0|                    if ((int)*(buf + (n - 1)) == 10) {
12559|      0|                        *(buf + (n - 1)) = (char)'\000';
12560|      0|                    }
12561|      0|                    {
12562|      0|                        tmp___7 = __errno_location();
12563|      0|                        *tmp___7 = 0;
12564|      0|                        u = strtoul((char const * /* __restrict  */)strp,
12565|      0|                                    (char ** /* __restrict  */)(&ebuf), 10);
12566|      0|                        dev = u;
12567|      0|                    }
12568|      0|                    if ((unsigned long)strp == (unsigned long)ebuf) {
12569|      0|                        {
12570|      0|                            tmp___8 = gettext("Invalid device number");
12571|      0|                            tmp___9 = quotearg_colon(listed_incremental_option);
12572|      0|                            error(0, 0, "%s:%ld: %s", tmp___9, lineno, tmp___8);
12573|      0|                            exit_status = 2;
12574|      0|                        }
12575|      0|                    }
12576|      0|                    else {
12577|      0|                        if (u == 0UL) {
12578|      0|                            {
12579|      0|                                tmp___13 = __errno_location();
12580|      0|                            }
12581|      0|                            if (*tmp___13 == 22) {
12582|      0|                                {
12583|      0|                                    tmp___8 = gettext("Invalid device number");
12584|      0|                                    tmp___9 = quotearg_colon(listed_incremental_option);
12585|      0|                                    error(0, 0, "%s:%ld: %s", tmp___9, lineno, tmp___8);
12586|      0|                                    exit_status = 2;
12587|      0|                                }
12588|      0|                            }
12589|      0|                            else {
12590|      0|                                goto _L___0;
12591|      0|                            }
12592|      0|                        }
12593|      0|                        else {
12594|      0|_L___0:
12595|      0|                            if (dev != u) {
12596|      0|                                {
12597|      0|                                    tmp___10 = gettext("Device number out of range");
12598|      0|                                    tmp___11 = quotearg_colon(listed_incremental_option);
12599|      0|                                    error(0, 0, "%s:%ld: %s", tmp___11, lineno, tmp___10);
12600|      0|                                    exit_status = 2;
12601|      0|                                }
12602|      0|                            }
12603|      0|                            else {
12604|      0|                                if (u == 0xffffffffffffffffUL) {
12605|      0|                                    {
12606|      0|                                        tmp___12 = __errno_location();
12607|      0|                                    }
12608|      0|                                    if (*tmp___12 == 34) {
12609|      0|                                        {
12610|      0|                                            tmp___10 = gettext("Device number out of range");
12611|      0|                                            tmp___11 = quotearg_colon(listed_incremental_option);
12612|      0|                                            error(0, 0, "%s:%ld: %s", tmp___11, lineno, tmp___10);
12613|      0|                                            exit_status = 2;
12614|      0|                                        }
12615|      0|                                    }
12616|      0|                                }
12617|      0|                            }
12618|      0|                        }
12619|      0|                    }
12620|      0|                    {
12621|      0|                        strp = ebuf;
12622|      0|                        tmp___14 = __errno_location();
12623|      0|                        *tmp___14 = 0;
12624|      0|                        u = strtoul((char const * /* __restrict  */)strp,
12625|      0|                                    (char ** /* __restrict  */)(&ebuf), 10);
12626|      0|                        ino = u;
12627|      0|                    }
12628|      0|                    if ((unsigned long)strp == (unsigned long)ebuf) {
12629|      0|                        {
12630|      0|                            tmp___15 = gettext("Invalid inode number");
12631|      0|                            tmp___16 = quotearg_colon(listed_incremental_option);
12632|      0|                            error(0, 0, "%s:%ld: %s", tmp___16, lineno, tmp___15);
12633|      0|                            exit_status = 2;
12634|      0|                        }
12635|      0|                    }
12636|      0|                    else {
12637|      0|                        if (u == 0UL) {
12638|      0|                            {
12639|      0|                                tmp___20 = __errno_location();
12640|      0|                            }
12641|      0|                            if (*tmp___20 == 22) {
12642|      0|                                {
12643|      0|                                    tmp___15 = gettext("Invalid inode number");
12644|      0|                                    tmp___16 = quotearg_colon(listed_incremental_option);
12645|      0|                                    error(0, 0, "%s:%ld: %s", tmp___16, lineno, tmp___15);
12646|      0|                                    exit_status = 2;
12647|      0|                                }
12648|      0|                            }
12649|      0|                            else {
12650|      0|                                goto _L___1;
12651|      0|                            }
12652|      0|                        }
12653|      0|                        else {
12654|      0|_L___1:
12655|      0|                            if (ino != u) {
12656|      0|                                {
12657|      0|                                    tmp___17 = gettext("Inode number out of range");
12658|      0|                                    tmp___18 = quotearg_colon(listed_incremental_option);
12659|      0|                                    error(0, 0, "%s:%ld: %s", tmp___18, lineno, tmp___17);
12660|      0|                                    exit_status = 2;
12661|      0|                                }
12662|      0|                            }
12663|      0|                            else {
12664|      0|                                if (u == 0xffffffffffffffffUL) {
12665|      0|                                    {
12666|      0|                                        tmp___19 = __errno_location();
12667|      0|                                    }
12668|      0|                                    if (*tmp___19 == 34) {
12669|      0|                                        {
12670|      0|                                            tmp___17 = gettext("Inode number out of range");
12671|      0|                                            tmp___18 = quotearg_colon(listed_incremental_option);
12672|      0|                                            error(0, 0, "%s:%ld: %s", tmp___18, lineno, tmp___17);
12673|      0|                                            exit_status = 2;
12674|      0|                                        }
12675|      0|                                    }
12676|      0|                                }
12677|      0|                            }
12678|      0|                        }
12679|      0|                    }
12680|      0|                    {
12681|      0|                        strp = ebuf;
12682|      0|                        strp++;
12683|      0|                        unquote_string(strp);
12684|      0|                        note_directory((char const *)strp, dev, ino, nfs, (_Bool)0);
12685|      0|                    }
12686|      0|                }
12687|      0|while_break: /* CIL Label */
12688|      0|                ;
12689|      0|            }
12690|      0|        }
12691|      0|        {
12692|      0|            tmp___23 = ferror_unlocked(fp);
12693|      0|        }
12694|      0|        if (tmp___23) {
12695|      0|            {
12696|      0|                read_error(listed_incremental_option);
12697|      0|            }
12698|      0|        }
12699|      0|        if (buf) {
12700|      0|            {
12701|      0|                free((void *)buf);
12702|      0|            }
12703|      0|        }
12704|      0|        return;
12705|      0|    }
12706|      0|}
12707|       |static _Bool write_directory_file_entry(void *entry, void *data)
12708|      0|{
12709|      0|    struct directory const *directory;
12710|      0|    FILE *fp;
12711|      0|    int e;
12712|      0|    char *str;
12713|      0|    char *tmp;
12714|      0|    int *tmp___0;
12715|      0|    int *tmp___1;
12716|      0|    int tmp___2;
12717|      0|    int tmp___3;
12718|      0|    char *tmp___4;
12719|       |
12720|      0|    {
12721|      0|        directory = (struct directory const *)entry;
12722|      0|        fp = (FILE *)data;
12723|      0|        if (directory->found) {
12724|      0|            {
12725|      0|                tmp = quote_copy_string((char const *)(directory->name));
12726|      0|                str = tmp;
12727|      0|            }
12728|      0|            if (str) {
12729|      0|                tmp___4 = (char * /* const  */)str;
12730|      0|            }
12731|      0|            else {
12732|      0|                tmp___4 = directory->name;
12733|      0|            }
12734|      0|            {
12735|      0|                fprintf(
12736|      0|                    (FILE * /* __restrict  */) fp,
12737|      0|                    (char const * /* __restrict  */)("+%lu %lu %s\n" + !directory->nfs),
12738|      0|                    (unsigned long)directory->device_number,
12739|      0|                    (unsigned long)directory->inode_number, tmp___4);
12740|      0|                tmp___0 = __errno_location();
12741|      0|                e = *tmp___0;
12742|      0|            }
12743|      0|            if (str) {
12744|      0|                {
12745|      0|                    free((void *)str);
12746|      0|                }
12747|      0|            }
12748|      0|            {
12749|      0|                tmp___1 = __errno_location();
12750|      0|                *tmp___1 = e;
12751|      0|            }
12752|      0|        }
12753|      0|        {
12754|      0|            tmp___2 = ferror_unlocked(fp);
12755|      0|        }
12756|      0|        if (tmp___2) {
12757|      0|            tmp___3 = 0;
12758|      0|        }
12759|      0|        else {
12760|      0|            tmp___3 = 1;
12761|      0|        }
12762|      0|        return ((_Bool)tmp___3);
12763|      0|    }
12764|      0|}
12765|       |void write_directory_file(void)
12766|      0|{
12767|      0|    FILE *fp;
12768|      0|    int tmp;
12769|      0|    int tmp___0;
12770|      0|    int tmp___1;
12771|      0|    int tmp___2;
12772|      0|    int tmp___3;
12773|      0|    int tmp___4;
12774|       |
12775|      0|    {
12776|      0|        fp = listed_incremental_stream;
12777|      0|        if (!fp) {
12778|      0|            return;
12779|      0|        }
12780|      0|        {
12781|      0|            tmp = fseek(fp, 0L, 0);
12782|      0|        }
12783|      0|        if (tmp != 0) {
12784|      0|            {
12785|      0|                seek_error(listed_incremental_option);
12786|      0|            }
12787|      0|        }
12788|      0|        {
12789|      0|            tmp___0 = fileno(fp);
12790|      0|            tmp___1 = sys_truncate(tmp___0);
12791|      0|        }
12792|      0|        if (tmp___1 != 0) {
12793|      0|            {
12794|      0|                truncate_error(listed_incremental_option);
12795|      0|            }
12796|      0|        }
12797|      0|        {
12798|      0|            fprintf((FILE * /* __restrict  */) fp,
12799|      0|                    (char const * /* __restrict  */) "%lu\n",
12800|      0|                    (unsigned long)start_timespec.tv_sec);
12801|      0|            tmp___2 = ferror_unlocked(fp);
12802|      0|        }
12803|      0|        if (!tmp___2) {
12804|      0|            if (directory_table) {
12805|      0|                {
12806|      0|                    hash_do_for_each((Hash_table const *)directory_table,
12807|      0|                                     &write_directory_file_entry, (void *)fp);
12808|      0|                }
12809|      0|            }
12810|      0|        }
12811|      0|        {
12812|      0|            tmp___3 = ferror_unlocked(fp);
12813|      0|        }
12814|      0|        if (tmp___3) {
12815|      0|            {
12816|      0|                write_error(listed_incremental_option);
12817|      0|            }
12818|      0|        }
12819|      0|        {
12820|      0|            tmp___4 = fclose(fp);
12821|      0|        }
12822|      0|        if (tmp___4 != 0) {
12823|      0|            {
12824|      0|                close_error(listed_incremental_option);
12825|      0|            }
12826|      0|        }
12827|      0|        return;
12828|      0|    }
12829|      0|}
12830|       |void gnu_restore(char const *directory_name)
12831|      0|{
12832|      0|    char *archive_dir;
12833|      0|    char *current_dir;
12834|      0|    char *cur;
12835|      0|    char *arc;
12836|      0|    size_t size;
12837|      0|    size_t copied;
12838|      0|    union block *data_block;
12839|      0|    char *to;
12840|      0|    void *tmp;
12841|      0|    char *tmp___0;
12842|      0|    size_t tmp___1;
12843|      0|    size_t tmp___2;
12844|      0|    int tmp___3;
12845|      0|    char *p;
12846|      0|    char *tmp___4;
12847|      0|    char const *tmp___5;
12848|      0|    char *tmp___6;
12849|      0|    int e;
12850|      0|    int *tmp___7;
12851|      0|    char *tmp___8;
12852|      0|    char *tmp___9;
12853|      0|    int tmp___10;
12854|      0|    int tmp___11;
12855|      0|    char *__cil_tmp25;
12856|      0|    char *__cil_tmp26;
12857|      0|    char *__cil_tmp27;
12858|      0|    char *__cil_tmp28;
12859|       |
12860|      0|    {
12861|      0|        {
12862|      0|            current_dir = savedir(directory_name);
12863|      0|        }
12864|      0|        if (!current_dir) {
12865|      0|            {
12866|      0|                skip_member();
12867|      0|            }
12868|      0|            return;
12869|      0|        }
12870|      0|        size = (size_t)current_stat_info.stat.st_size;
12871|      0|        if (size != (size_t)current_stat_info.stat.st_size) {
12872|      0|            {
12873|      0|                xalloc_die();
12874|      0|            }
12875|      0|        }
12876|      0|        {
12877|      0|            tmp = xmalloc(size);
12878|      0|            archive_dir = (char *)tmp;
12879|      0|            to = archive_dir;
12880|      0|        }
12881|      0|        {
12882|      0|            while (1) {
12883|      0|while_continue: /* CIL Label */
12884|      0|                ;
12885|      0|                if (!(size > 0UL)) {
12886|      0|                    goto while_break;
12887|      0|                }
12888|      0|                {
12889|      0|                    data_block = find_next_block();
12890|      0|                }
12891|      0|                if (!data_block) {
12892|      0|                    {
12893|      0|                        tmp___0 = gettext("Unexpected EOF in archive");
12894|      0|                        error(0, 0, (char const *)tmp___0);
12895|      0|                        exit_status = 2;
12896|      0|                    }
12897|      0|                    goto while_break;
12898|      0|                }
12899|      0|                {
12900|      0|                    copied = available_space_after(data_block);
12901|      0|                }
12902|      0|                if (copied > size) {
12903|      0|                    copied = size;
12904|      0|                }
12905|      0|                {
12906|      0|                    memcpy((void * /* __restrict  */)to,
12907|      0|                           (void const * /* __restrict  */)(data_block->buffer), copied);
12908|      0|                    to += copied;
12909|      0|                    set_next_block_after(
12910|      0|                        (union block *)((data_block->buffer + copied) - 1));
12911|      0|                    size -= copied;
12912|      0|                }
12913|      0|            }
12914|      0|while_break: /* CIL Label */
12915|      0|            ;
12916|      0|        }
12917|      0|        cur = current_dir;
12918|      0|        {
12919|      0|            while (1) {
12920|      0|while_continue___0: /* CIL Label */
12921|      0|                ;
12922|      0|                if (!*cur) {
12923|      0|                    goto while_break___0;
12924|      0|                }
12925|      0|                arc = archive_dir;
12926|      0|                {
12927|      0|                    while (1) {
12928|      0|while_continue___1: /* CIL Label */
12929|      0|                        ;
12930|      0|                        if (!*arc) {
12931|      0|                            goto while_break___1;
12932|      0|                        }
12933|      0|                        {
12934|      0|                            arc++;
12935|      0|                            tmp___3 = strcmp((char const *)arc, (char const *)cur);
12936|      0|                        }
12937|      0|                        if (!tmp___3) {
12938|      0|                            goto while_break___1;
12939|      0|                        }
12940|      0|                        {
12941|      0|                            tmp___2 = strlen((char const *)arc);
12942|      0|                            arc += tmp___2 + 1UL;
12943|      0|                        }
12944|      0|                    }
12945|      0|while_break___1: /* CIL Label */
12946|      0|                    ;
12947|      0|                }
12948|      0|                if ((int)*arc == 0) {
12949|      0|                    {
12950|      0|                        tmp___4 = new_name(directory_name, (char const *)cur);
12951|      0|                        p = tmp___4;
12952|      0|                    }
12953|      0|                    if (!interactive_option) {
12954|      0|                        goto _L;
12955|      0|                    }
12956|      0|                    else {
12957|      0|                        {
12958|      0|                            tmp___11 = confirm("delete", (char const *)p);
12959|      0|                        }
12960|      0|                        if (tmp___11) {
12961|      0|_L:
12962|      0|                            if (verbose_option) {
12963|      0|                                {
12964|      0|                                    tmp___5 = quote((char const *)p);
12965|      0|                                    tmp___6 = gettext("%s: Deleting %s\n");
12966|      0|                                    fprintf((FILE * /* __restrict  */) stdlis,
12967|      0|                                            (char const * /* __restrict  */)tmp___6, program_name,
12968|      0|                                            tmp___5);
12969|      0|                                }
12970|      0|                            }
12971|      0|                            {
12972|      0|                                tmp___10 =
12973|      0|                                    remove_any_file((char const *)p, (enum remove_option)1);
12974|      0|                            }
12975|      0|                            if (!tmp___10) {
12976|      0|                                {
12977|      0|                                    tmp___7 = __errno_location();
12978|      0|                                    e = *tmp___7;
12979|      0|                                    tmp___8 = quotearg_colon((char const *)p);
12980|      0|                                    tmp___9 = gettext("%s: Cannot remove");
12981|      0|                                    error(0, e, (char const *)tmp___9, tmp___8);
12982|      0|                                    exit_status = 2;
12983|      0|                                }
12984|      0|                            }
12985|      0|                        }
12986|      0|                    }
12987|      0|                    {
12988|      0|                        free((void *)p);
12989|      0|                    }
12990|      0|                }
12991|      0|                {
12992|      0|                    tmp___1 = strlen((char const *)cur);
12993|      0|                    cur += tmp___1 + 1UL;
12994|      0|                }
12995|      0|            }
12996|      0|while_break___0: /* CIL Label */
12997|      0|            ;
12998|      0|        }
12999|      0|        {
13000|      0|            free((void *)current_dir);
13001|      0|            free((void *)archive_dir);
13002|      0|        }
13003|      0|        return;
13004|      0|    }
13005|      0|}
13006|       |/* #pragma merger("0","007.list.o.i","") */
13007|       |extern __attribute__((__nothrow__)) unsigned long long(__attribute__((__leaf__))
13008|       |        gnu_dev_makedev)(
13009|       |            unsigned int __major, unsigned int __minor) __attribute__((__const__));
13010|       |extern int putc_unlocked(int __c, FILE *__stream);
13011|       |extern size_t fwrite_unlocked(void const *__restrict __ptr, size_t __size,
13012|       |                              size_t __n, FILE *__restrict __stream);
13013|       |extern __attribute__((__nothrow__)) struct tm *(__attribute__((__leaf__))
13014|       |        gmtime)(time_t const *__timer);
13015|       |extern
13016|       |__attribute__((__nothrow__)) struct tm *(__attribute__((__leaf__))
13017|       |        localtime)(time_t const *__timer);
13018|       |struct quoting_options *clone_quoting_options(struct quoting_options *o___0);
13019|       |void set_quoting_style(struct quoting_options *o___0, enum quoting_style s);
13020|       |size_t quotearg_buffer(char *buffer___2, size_t buffersize, char const *arg,
13021|       |                       size_t argsize, struct quoting_options const *o___0);
13022|       |char *quotearg(char const *arg);
13023|       |_Bool utc_option;
13024|       |_Bool block_number_option;
13025|       |_Bool show_omitted_dirs_option;
13026|       |gid_t gid_from_header(char const *p, size_t s);
13027|       |int major_from_header(char const *p, size_t s);
13028|       |int minor_from_header(char const *p, size_t s);
13029|       |mode_t mode_from_header(char const *p, size_t s);
13030|       |size_t size_from_header(char const *p, size_t s);
13031|       |time_t time_from_header(char const *p, size_t s);
13032|       |uid_t uid_from_header(char const *p, size_t s);
13033|       |void list_archive(void);
13034|       |void read_and(void (*do_something)(void));
13035|       |void decode_mode(mode_t mode, char *string);
13036|       |int name_match(char const *path);
13037|       |_Bool all_names_found(struct tar_stat_info *p);
13038|       |_Bool sparse_fixup_header(struct tar_stat_info *st);
13039|       |enum dump_status sparse_skip_file(struct tar_stat_info *st);
13040|       |static uintmax_t from_header(char const *where0, size_t digs, char const *type,
13041|       |                             uintmax_t minus_minval, uintmax_t maxval);
13042|       |static char const base_64_digits[64] = {
13043|       |    (char const)'A', (char const)'B', (char const)'C', (char const)'D',
13044|       |    (char const)'E', (char const)'F', (char const)'G', (char const)'H',
13045|       |    (char const)'I', (char const)'J', (char const)'K', (char const)'L',
13046|       |    (char const)'M', (char const)'N', (char const)'O', (char const)'P',
13047|       |    (char const)'Q', (char const)'R', (char const)'S', (char const)'T',
13048|       |    (char const)'U', (char const)'V', (char const)'W', (char const)'X',
13049|       |    (char const)'Y', (char const)'Z', (char const)'a', (char const)'b',
13050|       |    (char const)'c', (char const)'d', (char const)'e', (char const)'f',
13051|       |    (char const)'g', (char const)'h', (char const)'i', (char const)'j',
13052|       |    (char const)'k', (char const)'l', (char const)'m', (char const)'n',
13053|       |    (char const)'o', (char const)'p', (char const)'q', (char const)'r',
13054|       |    (char const)'s', (char const)'t', (char const)'u', (char const)'v',
13055|       |    (char const)'w', (char const)'x', (char const)'y', (char const)'z',
13056|       |    (char const)'0', (char const)'1', (char const)'2', (char const)'3',
13057|       |    (char const)'4', (char const)'5', (char const)'6', (char const)'7',
13058|       |    (char const)'8', (char const)'9', (char const)'+', (char const)'/'
13059|       |};
13060|       |static char base64_map[256];
13061|       |static void base64_init(void)
13062|      0|{
13063|      0|    int i;
13064|       |
13065|      0|    {
13066|      0|        {
13067|      0|            memset((void *)(base64_map), 64, sizeof(base64_map));
13068|      0|            i = 0;
13069|      0|        }
13070|      0|        {
13071|      0|            while (1) {
13072|      0|while_continue: /* CIL Label */
13073|      0|                ;
13074|      0|                if (!(i < 64)) {
13075|      0|                    goto while_break;
13076|      0|                }
13077|      0|                base64_map[(int)base_64_digits[i]] = (char)i;
13078|      0|                i++;
13079|      0|            }
13080|      0|while_break: /* CIL Label */
13081|      0|            ;
13082|      0|        }
13083|      0|        return;
13084|      0|    }
13085|      0|}
13086|       |void read_and(void (*do_something)(void))
13087|      0|{
13088|      0|    enum read_header status;
13089|      0|    enum read_header prev_status;
13090|      0|    char *tmp;
13091|      0|    char *tmp___0;
13092|      0|    int tmp___1;
13093|      0|    _Bool tmp___2;
13094|      0|    char buf[(((sizeof(uintmax_t) * 8UL) * 302UL) / 1000UL + 1UL) + 1UL];
13095|      0|    off_t tmp___3;
13096|      0|    char *tmp___4;
13097|      0|    char *tmp___5;
13098|      0|    char buf___0[(((sizeof(uintmax_t) * 8UL) * 302UL) / 1000UL + 1UL) + 1UL];
13099|      0|    off_t tmp___6;
13100|      0|    char *tmp___7;
13101|      0|    char *tmp___8;
13102|      0|    char buf___1[(((sizeof(uintmax_t) * 8UL) * 302UL) / 1000UL + 1UL) + 1UL];
13103|      0|    off_t tmp___9;
13104|      0|    char *tmp___10;
13105|      0|    char *tmp___11;
13106|      0|    char *tmp___12;
13107|      0|    char buf___2[(((sizeof(uintmax_t) * 8UL) * 302UL) / 1000UL + 1UL) + 1UL];
13108|      0|    off_t block_ordinal;
13109|      0|    off_t tmp___13;
13110|      0|    char *tmp___14;
13111|      0|    char *tmp___15;
13112|      0|    char *tmp___16;
13113|      0|    _Bool tmp___17;
13114|      0|    void *__cil_tmp28;
13115|      0|    void *__cil_tmp29;
13116|      0|    void *__cil_tmp30;
13117|      0|    void *__cil_tmp31;
13118|      0|    char *__cil_tmp32;
13119|      0|    char *__cil_tmp33;
13120|      0|    char *__cil_tmp34;
13121|      0|    char *__cil_tmp35;
13122|      0|    char *__cil_tmp36;
13123|      0|    char *__cil_tmp37;
13124|      0|    char *__cil_tmp38;
13125|       |
13126|      0|    {
13127|      0|        {
13128|      0|            status = (enum read_header)0;
13129|      0|            base64_init();
13130|      0|            name_gather();
13131|      0|            open_archive((enum access_mode)0);
13132|      0|        }
13133|      0|        {
13134|      0|            while (1) {
13135|      0|while_continue: /* CIL Label */
13136|      0|                ;
13137|      0|                {
13138|      0|                    prev_status = status;
13139|      0|                    tar_stat_destroy(&current_stat_info);
13140|      0|                    xheader_destroy(&extended_header);
13141|      0|                    status = read_header((_Bool)0);
13142|      0|                }
13143|      0|                {
13144|      0|                    if ((unsigned int)status == 0U) {
13145|      0|                        goto case_0;
13146|      0|                    }
13147|      0|                    if ((unsigned int)status == 2U) {
13148|      0|                        goto case_0;
13149|      0|                    }
13150|      0|                    if ((unsigned int)status == 1U) {
13151|      0|                        goto case_1;
13152|      0|                    }
13153|      0|                    if ((unsigned int)status == 3U) {
13154|      0|                        goto case_3;
13155|      0|                    }
13156|      0|                    if ((unsigned int)status == 4U) {
13157|      0|                        goto case_4;
13158|      0|                    }
13159|      0|                    if ((unsigned int)status == 5U) {
13160|      0|                        goto case_5;
13161|      0|                    }
13162|      0|                    goto switch_break;
13163|      0|case_0:  /* CIL Label */
13164|      0|case_2 : { /* CIL Label */
13165|      0|                        abort();
13166|      0|                    }
13167|      0|case_1 : { /* CIL Label */
13168|      0|                        tmp___1 = name_match((char const *)current_stat_info.file_name);
13169|      0|                    }
13170|      0|                    if (tmp___1) {
13171|      0|                        if (0L <= newer_mtime_option.tv_nsec) {
13172|      0|                            {
13173|      0|                                current_stat_info.stat.st_mtim.tv_sec = time_from_header(
13174|      0|                                        (char const *)(current_header->header.mtime),
13175|      0|                                        sizeof(current_header->header.mtime));
13176|      0|                                current_stat_info.stat.st_mtim.tv_nsec = (__syscall_slong_t)0;
13177|      0|                            }
13178|      0|                            if (current_stat_info.stat.st_mtim.tv_sec <
13179|      0|                                    newer_mtime_option.tv_sec) {
13180|      0|                                goto _L;
13181|      0|                            }
13182|      0|                            else {
13183|      0|                                if (current_stat_info.stat.st_mtim.tv_sec ==
13184|      0|                                        newer_mtime_option.tv_sec) {
13185|      0|                                    if (current_stat_info.stat.st_mtim.tv_nsec <
13186|      0|                                            newer_mtime_option.tv_nsec) {
13187|      0|                                        goto _L;
13188|      0|                                    }
13189|      0|                                    else {
13190|      0|                                        goto _L___0;
13191|      0|                                    }
13192|      0|                                }
13193|      0|                                else {
13194|      0|                                    goto _L___0;
13195|      0|                                }
13196|      0|                            }
13197|      0|                        }
13198|      0|                        else {
13199|      0|_L___0 : {
13200|      0|                                tmp___2 =
13201|      0|                                    excluded_name((char const *)current_stat_info.file_name);
13202|      0|                            }
13203|      0|                            if (tmp___2) {
13204|      0|_L : {
13205|      0|                                    if ((int)current_header->header.typeflag == 86) {
13206|      0|                                        goto case_86;
13207|      0|                                    }
13208|      0|                                    if ((int)current_header->header.typeflag == 77) {
13209|      0|                                        goto case_86;
13210|      0|                                    }
13211|      0|                                    if ((int)current_header->header.typeflag == 78) {
13212|      0|                                        goto case_86;
13213|      0|                                    }
13214|      0|                                    if ((int)current_header->header.typeflag == 53) {
13215|      0|                                        goto case_53;
13216|      0|                                    }
13217|      0|                                    goto switch_default;
13218|      0|case_86: /* CIL Label */
13219|      0|case_77: /* CIL Label */
13220|      0|case_78: /* CIL Label */
13221|      0|                                    goto switch_break___0;
13222|      0|case_53: /* CIL Label */
13223|      0|                                    if (show_omitted_dirs_option) {
13224|      0|                                        {
13225|      0|                                            tmp = quotearg_colon(
13226|      0|                                                      (char const *)current_stat_info.file_name);
13227|      0|                                            tmp___0 = gettext("%s: Omitting");
13228|      0|                                            error(0, 0, (char const *)tmp___0, tmp);
13229|      0|                                        }
13230|      0|                                    }
13231|      0|switch_default : { /* CIL Label */
13232|      0|                                        skip_member();
13233|      0|                                    }
13234|      0|                                    goto __Cont;
13235|      0|switch_break___0: /* CIL Label */
13236|      0|                                    ;
13237|      0|                                }
13238|      0|                            }
13239|      0|                        }
13240|      0|                    }
13241|      0|                    else {
13242|      0|                        goto _L;
13243|      0|                    }
13244|      0|                    {
13245|      0|                        (*do_something)();
13246|      0|                    }
13247|      0|                    goto __Cont;
13248|      0|case_3: /* CIL Label */
13249|      0|                    if (block_number_option) {
13250|      0|                        {
13251|      0|                            tmp___3 = current_block_ordinal();
13252|      0|                            tmp___4 = stringify_uintmax_t_backwards(
13253|      0|                                          (uintmax_t)tmp___3,
13254|      0|                                          buf + ((((sizeof(uintmax_t) * 8UL) * 302UL) / 1000UL + 1UL) +
13255|      0|                                                 1UL));
13256|      0|                            tmp___5 = gettext("block %s: ** Block of NULs **\n");
13257|      0|                            fprintf((FILE * /* __restrict  */) stdlis,
13258|      0|                                    (char const * /* __restrict  */)tmp___5, tmp___4);
13259|      0|                        }
13260|      0|                    }
13261|      0|                    {
13262|      0|                        set_next_block_after(current_header);
13263|      0|                    }
13264|      0|                    if (!ignore_zeros_option) {
13265|      0|                        {
13266|      0|                            status = read_header((_Bool)0);
13267|      0|                        }
13268|      0|                        if ((unsigned int)status == 3U) {
13269|      0|                            goto switch_break;
13270|      0|                        }
13271|      0|                        {
13272|      0|                            tmp___6 = current_block_ordinal();
13273|      0|                            tmp___7 = stringify_uintmax_t_backwards(
13274|      0|                                          (uintmax_t)tmp___6,
13275|      0|                                          buf___0 +
13276|      0|                                          ((((sizeof(uintmax_t) * 8UL) * 302UL) / 1000UL + 1UL) +
13277|      0|                                           1UL));
13278|      0|                            tmp___8 = gettext("A lone zero block at %s");
13279|      0|                            error(0, 0, (char const *)tmp___8, tmp___7);
13280|      0|                        }
13281|      0|                        goto switch_break;
13282|      0|                    }
13283|      0|                    status = prev_status;
13284|      0|                    goto __Cont;
13285|      0|case_4: /* CIL Label */
13286|      0|                    if (block_number_option) {
13287|      0|                        {
13288|      0|                            tmp___9 = current_block_ordinal();
13289|      0|                            tmp___10 = stringify_uintmax_t_backwards(
13290|      0|                                           (uintmax_t)tmp___9,
13291|      0|                                           buf___1 +
13292|      0|                                           ((((sizeof(uintmax_t) * 8UL) * 302UL) / 1000UL + 1UL) +
13293|      0|                                            1UL));
13294|      0|                            tmp___11 = gettext("block %s: ** End of File **\n");
13295|      0|                            fprintf((FILE * /* __restrict  */) stdlis,
13296|      0|                                    (char const * /* __restrict  */)tmp___11, tmp___10);
13297|      0|                        }
13298|      0|                    }
13299|      0|                    goto switch_break;
13300|      0|case_5 : { /* CIL Label */
13301|      0|                        set_next_block_after(current_header);
13302|      0|                    }
13303|      0|                    {
13304|      0|                        if ((unsigned int)prev_status == 0U) {
13305|      0|                            goto case_0___0;
13306|      0|                        }
13307|      0|                        if ((unsigned int)prev_status == 3U) {
13308|      0|                            goto case_3___0;
13309|      0|                        }
13310|      0|                        if ((unsigned int)prev_status == 1U) {
13311|      0|                            goto case_3___0;
13312|      0|                        }
13313|      0|                        if ((unsigned int)prev_status == 4U) {
13314|      0|                            goto case_4___0;
13315|      0|                        }
13316|      0|                        if ((unsigned int)prev_status == 5U) {
13317|      0|                            goto case_4___0;
13318|      0|                        }
13319|      0|                        if ((unsigned int)prev_status == 2U) {
13320|      0|                            goto case_2___0;
13321|      0|                        }
13322|      0|                        goto switch_break___1;
13323|      0|case_0___0 : { /* CIL Label */
13324|      0|                            tmp___12 = gettext("This does not look like a tar archive");
13325|      0|                            error(0, 0, (char const *)tmp___12);
13326|      0|                            exit_status = 2;
13327|      0|                        }
13328|      0|case_3___0: /* CIL Label */
13329|      0|case_1___0: /* CIL Label */
13330|      0|                        if (block_number_option) {
13331|      0|                            {
13332|      0|                                tmp___13 = current_block_ordinal();
13333|      0|                                block_ordinal = tmp___13;
13334|      0|                                block_ordinal =
13335|      0|                                    (off_t)((size_t)block_ordinal - recent_long_name_blocks);
13336|      0|                                block_ordinal =
13337|      0|                                    (off_t)((size_t)block_ordinal - recent_long_link_blocks);
13338|      0|                                tmp___14 = stringify_uintmax_t_backwards(
13339|      0|                                               (uintmax_t)block_ordinal,
13340|      0|                                               buf___2 +
13341|      0|                                               ((((sizeof(uintmax_t) * 8UL) * 302UL) / 1000UL + 1UL) +
13342|      0|                                                1UL));
13343|      0|                                tmp___15 = gettext("block %s: ");
13344|      0|                                fprintf((FILE * /* __restrict  */) stdlis,
13345|      0|                                        (char const * /* __restrict  */)tmp___15, tmp___14);
13346|      0|                            }
13347|      0|                        }
13348|      0|                        {
13349|      0|                            tmp___16 = gettext("Skipping to next header");
13350|      0|                            error(0, 0, (char const *)tmp___16);
13351|      0|                            exit_status = 2;
13352|      0|                        }
13353|      0|                        goto switch_break___1;
13354|      0|case_4___0: /* CIL Label */
13355|      0|case_5___0: /* CIL Label */
13356|      0|                        goto switch_break___1;
13357|      0|case_2___0 : { /* CIL Label */
13358|      0|                            abort();
13359|      0|                        }
13360|      0|switch_break___1: /* CIL Label */
13361|      0|                        ;
13362|      0|                    }
13363|      0|                    goto __Cont;
13364|      0|switch_break: /* CIL Label */
13365|      0|                    ;
13366|      0|                }
13367|      0|                goto while_break;
13368|      0|__Cont : {
13369|      0|                    tmp___17 = all_names_found(&current_stat_info);
13370|      0|                }
13371|      0|                if (tmp___17) {
13372|      0|                    goto while_break;
13373|      0|                }
13374|      0|            }
13375|      0|while_break: /* CIL Label */
13376|      0|            ;
13377|      0|        }
13378|      0|        {
13379|      0|            close_archive();
13380|      0|            names_notfound();
13381|      0|        }
13382|      0|        return;
13383|      0|    }
13384|      0|}
13385|       |void list_archive(void)
13386|      0|{
13387|      0|    off_t size;
13388|      0|    size_t written;
13389|      0|    size_t check;
13390|      0|    union block *data_block;
13391|      0|    char *tmp;
13392|      0|    int *tmp___0;
13393|      0|    char *__cil_tmp7;
13394|       |
13395|      0|    {
13396|      0|        {
13397|      0|            decode_header(current_header, &current_stat_info, &current_format, 0);
13398|      0|        }
13399|      0|        if (verbose_option) {
13400|      0|            {
13401|      0|                print_header(&current_stat_info, (off_t)-1);
13402|      0|            }
13403|      0|        }
13404|      0|        if (incremental_option) {
13405|      0|            if ((int)current_header->header.typeflag == 68) {
13406|      0|                {
13407|      0|                    set_next_block_after(current_header);
13408|      0|                }
13409|      0|                if (multi_volume_option) {
13410|      0|                    {
13411|      0|                        assign_string(&save_name,
13412|      0|                                      (char const *)current_stat_info.file_name);
13413|      0|                        save_totsize = current_stat_info.stat.st_size;
13414|      0|                    }
13415|      0|                }
13416|      0|                size = current_stat_info.stat.st_size;
13417|      0|                {
13418|      0|                    while (1) {
13419|      0|while_continue: /* CIL Label */
13420|      0|                        ;
13421|      0|                        if (!(size > 0L)) {
13422|      0|                            goto while_break;
13423|      0|                        }
13424|      0|                        if (multi_volume_option) {
13425|      0|                            save_sizeleft = size;
13426|      0|                        }
13427|      0|                        {
13428|      0|                            data_block = find_next_block();
13429|      0|                        }
13430|      0|                        if (!data_block) {
13431|      0|                            {
13432|      0|                                tmp = gettext("Unexpected EOF in archive");
13433|      0|                                error(0, 0, (char const *)tmp);
13434|      0|                                exit_status = 2;
13435|      0|                            }
13436|      0|                            goto while_break;
13437|      0|                        }
13438|      0|                        {
13439|      0|                            written = available_space_after(data_block);
13440|      0|                        }
13441|      0|                        if (written > (size_t)size) {
13442|      0|                            written = (size_t)size;
13443|      0|                        }
13444|      0|                        {
13445|      0|                            tmp___0 = __errno_location();
13446|      0|                            *tmp___0 = 0;
13447|      0|                            check = fwrite_unlocked(
13448|      0|                                        (void const * /* __restrict  */)(data_block->buffer),
13449|      0|                                        sizeof(char), written, (FILE * /* __restrict  */) stdlis);
13450|      0|                            set_next_block_after(
13451|      0|                                (union block *)((data_block->buffer + written) - 1));
13452|      0|                        }
13453|      0|                        if (check != written) {
13454|      0|                            {
13455|      0|                                write_error_details((char const *)current_stat_info.file_name,
13456|      0|                                                    check, written);
13457|      0|                                skip_file((off_t)((size_t)size - written));
13458|      0|                            }
13459|      0|                            goto while_break;
13460|      0|                        }
13461|      0|                        size = (off_t)((size_t)size - written);
13462|      0|                    }
13463|      0|while_break: /* CIL Label */
13464|      0|                    ;
13465|      0|                }
13466|      0|                if (multi_volume_option) {
13467|      0|                    {
13468|      0|                        assign_string(&save_name, (char const *)0);
13469|      0|                    }
13470|      0|                }
13471|      0|                {
13472|      0|                    fputc_unlocked('\n', stdlis);
13473|      0|                    fflush_unlocked(stdlis);
13474|      0|                }
13475|      0|                return;
13476|      0|            }
13477|      0|        }
13478|      0|        if (multi_volume_option) {
13479|      0|            {
13480|      0|                assign_string(&save_name, (char const *)current_stat_info.file_name);
13481|      0|            }
13482|      0|        }
13483|      0|        {
13484|      0|            skip_member();
13485|      0|        }
13486|      0|        if (multi_volume_option) {
13487|      0|            {
13488|      0|                assign_string(&save_name, (char const *)0);
13489|      0|            }
13490|      0|        }
13491|      0|        return;
13492|      0|    }
13493|      0|}
13494|       |enum read_header read_header(_Bool raw_extended_headers)
13495|      0|{
13496|      0|    size_t i;
13497|      0|    int unsigned_sum;
13498|      0|    int signed_sum;
13499|      0|    int recorded_sum;
13500|      0|    uintmax_t parsed_sum;
13501|      0|    char *p;
13502|      0|    union block *header;
13503|      0|    union block *header_copy;
13504|      0|    char *bp;
13505|      0|    union block *data_block;
13506|      0|    size_t size;
13507|      0|    size_t written;
13508|      0|    union block *next_long_name;
13509|      0|    union block *next_long_link;
13510|      0|    size_t next_long_name_blocks;
13511|      0|    size_t next_long_link_blocks;
13512|      0|    char *tmp;
13513|      0|    size_t tmp___0;
13514|      0|    size_t tmp___1;
13515|      0|    size_t name_size;
13516|      0|    void *tmp___2;
13517|      0|    char *tmp___3;
13518|      0|    off_t tmp___4;
13519|      0|    off_t tmp___5;
13520|      0|    char const *name;
13521|      0|    struct posix_header const *h;
13522|      0|    char namebuf[((sizeof(h->prefix) + 1UL) + 100UL) + 1UL];
13523|      0|    char *np;
13524|      0|    size_t tmp___6;
13525|      0|    char *tmp___7;
13526|      0|    int tmp___8;
13527|      0|    void *__cil_tmp33;
13528|      0|    char *__cil_tmp34;
13529|       |
13530|      0|    {
13531|      0|        next_long_name = (union block *)0;
13532|      0|        next_long_link = (union block *)0;
13533|      0|        {
13534|      0|            while (1) {
13535|      0|while_continue: /* CIL Label */
13536|      0|                ;
13537|      0|                {
13538|      0|                    header = find_next_block();
13539|      0|                    current_header = header;
13540|      0|                }
13541|      0|                if (!header) {
13542|      0|                    return ((enum read_header)4);
13543|      0|                }
13544|      0|                unsigned_sum = 0;
13545|      0|                signed_sum = 0;
13546|      0|                p = header->buffer;
13547|      0|                i = sizeof(*header);
13548|      0|                {
13549|      0|                    while (1) {
13550|      0|while_continue___0: /* CIL Label */
13551|      0|                        ;
13552|      0|                        tmp___0 = i;
13553|      0|                        i--;
13554|      0|                        if (!(tmp___0 != 0UL)) {
13555|      0|                            goto while_break___0;
13556|      0|                        }
13557|      0|                        unsigned_sum += (int)((unsigned char)*p);
13558|      0|                        tmp = p;
13559|      0|                        p++;
13560|      0|                        signed_sum += (int)((signed char)*tmp);
13561|      0|                    }
13562|      0|while_break___0: /* CIL Label */
13563|      0|                    ;
13564|      0|                }
13565|      0|                if (unsigned_sum == 0) {
13566|      0|                    return ((enum read_header)3);
13567|      0|                }
13568|      0|                i = sizeof(header->header.chksum);
13569|      0|                {
13570|      0|                    while (1) {
13571|      0|while_continue___1: /* CIL Label */
13572|      0|                        ;
13573|      0|                        tmp___1 = i;
13574|      0|                        i--;
13575|      0|                        if (!(tmp___1 != 0UL)) {
13576|      0|                            goto while_break___1;
13577|      0|                        }
13578|      0|                        unsigned_sum -= (int)((unsigned char)header->header.chksum[i]);
13579|      0|                        signed_sum -= (int)((signed char)header->header.chksum[i]);
13580|      0|                    }
13581|      0|while_break___1: /* CIL Label */
13582|      0|                    ;
13583|      0|                }
13584|      0|                {
13585|      0|                    unsigned_sum = (int)((unsigned long)unsigned_sum +
13586|      0|                                         32UL * sizeof(header->header.chksum));
13587|      0|                    signed_sum = (int)((unsigned long)signed_sum +
13588|      0|                                       32UL * sizeof(header->header.chksum));
13589|      0|                    parsed_sum = from_header(
13590|      0|                                     (char const *)(header->header.chksum),
13591|      0|                                     sizeof(header->header.chksum), (char const *)0, (uintmax_t)0,
13592|      0|                                     (uintmax_t)(-1 - (-1 << (sizeof(int) * 8UL - 1UL))));
13593|      0|                }
13594|      0|                if (parsed_sum == 0xffffffffffffffffUL) {
13595|      0|                    return ((enum read_header)5);
13596|      0|                }
13597|      0|                recorded_sum = (int)parsed_sum;
13598|      0|                if (unsigned_sum != recorded_sum) {
13599|      0|                    if (signed_sum != recorded_sum) {
13600|      0|                        return ((enum read_header)5);
13601|      0|                    }
13602|      0|                }
13603|      0|                if ((int)header->header.typeflag == 49) {
13604|      0|                    current_stat_info.stat.st_size = (__off_t)0;
13605|      0|                }
13606|      0|                else {
13607|      0|                    {
13608|      0|                        current_stat_info.stat.st_size =
13609|      0|                            off_from_header((char const *)(header->header.size),
13610|      0|                                            sizeof(header->header.size));
13611|      0|                    }
13612|      0|                }
13613|      0|                if ((int)header->header.typeflag == 76) {
13614|      0|                    goto _L___4;
13615|      0|                }
13616|      0|                else {
13617|      0|                    if ((int)header->header.typeflag == 75) {
13618|      0|                        goto _L___4;
13619|      0|                    }
13620|      0|                    else {
13621|      0|                        if ((int)header->header.typeflag == 120) {
13622|      0|                            goto _L___4;
13623|      0|                        }
13624|      0|                        else {
13625|      0|                            if ((int)header->header.typeflag == 103) {
13626|      0|_L___4: /* CIL Label */
13627|      0|                                if (raw_extended_headers) {
13628|      0|                                    return ((enum read_header)2);
13629|      0|                                }
13630|      0|                                else {
13631|      0|                                    if ((int)header->header.typeflag == 76) {
13632|      0|                                        goto _L___3;
13633|      0|                                    }
13634|      0|                                    else {
13635|      0|                                        if ((int)header->header.typeflag == 75) {
13636|      0|_L___3: /* CIL Label */
13637|      0|                                            name_size = (size_t)current_stat_info.stat.st_size;
13638|      0|                                            size = (name_size - name_size % 512UL) + 1024UL;
13639|      0|                                            if (name_size != (size_t)current_stat_info.stat.st_size) {
13640|      0|                                                {
13641|      0|                                                    xalloc_die();
13642|      0|                                                }
13643|      0|                                            }
13644|      0|                                            else {
13645|      0|                                                if (size < name_size) {
13646|      0|                                                    {
13647|      0|                                                        xalloc_die();
13648|      0|                                                    }
13649|      0|                                                }
13650|      0|                                            }
13651|      0|                                            {
13652|      0|                                                tmp___2 = xmalloc(size + 1UL);
13653|      0|                                                header_copy = (union block *)tmp___2;
13654|      0|                                            }
13655|      0|                                            if ((int)header->header.typeflag == 76) {
13656|      0|                                                if (next_long_name) {
13657|      0|                                                    {
13658|      0|                                                        free((void *)next_long_name);
13659|      0|                                                    }
13660|      0|                                                }
13661|      0|                                                next_long_name = header_copy;
13662|      0|                                                next_long_name_blocks = size / 512UL;
13663|      0|                                            }
13664|      0|                                            else {
13665|      0|                                                if (next_long_link) {
13666|      0|                                                    {
13667|      0|                                                        free((void *)next_long_link);
13668|      0|                                                    }
13669|      0|                                                }
13670|      0|                                                next_long_link = header_copy;
13671|      0|                                                next_long_link_blocks = size / 512UL;
13672|      0|                                            }
13673|      0|                                            {
13674|      0|                                                set_next_block_after(header);
13675|      0|                                                *header_copy = *header;
13676|      0|                                                bp = header_copy->buffer + 512;
13677|      0|                                                size -= 512UL;
13678|      0|                                            }
13679|      0|                                            {
13680|      0|                                                while (1) {
13681|      0|while_continue___2: /* CIL Label */
13682|      0|                                                    ;
13683|      0|                                                    if (!(size > 0UL)) {
13684|      0|                                                        goto while_break___2;
13685|      0|                                                    }
13686|      0|                                                    {
13687|      0|                                                        data_block = find_next_block();
13688|      0|                                                    }
13689|      0|                                                    if (!data_block) {
13690|      0|                                                        {
13691|      0|                                                            tmp___3 = gettext("Unexpected EOF in archive");
13692|      0|                                                            error(0, 0, (char const *)tmp___3);
13693|      0|                                                            exit_status = 2;
13694|      0|                                                        }
13695|      0|                                                        goto while_break___2;
13696|      0|                                                    }
13697|      0|                                                    {
13698|      0|                                                        written = available_space_after(data_block);
13699|      0|                                                    }
13700|      0|                                                    if (written > size) {
13701|      0|                                                        written = size;
13702|      0|                                                    }
13703|      0|                                                    {
13704|      0|                                                        memcpy((void * /* __restrict  */)bp,
13705|      0|                                                               (void const * /* __restrict  */)(
13706|      0|                                                                   data_block->buffer),
13707|      0|                                                               written);
13708|      0|                                                        bp += written;
13709|      0|                                                        set_next_block_after(
13710|      0|                                                            (union block *)((data_block->buffer + written) -
13711|      0|                                                                            1));
13712|      0|                                                        size -= written;
13713|      0|                                                    }
13714|      0|                                                }
13715|      0|while_break___2: /* CIL Label */
13716|      0|                                                ;
13717|      0|                                            }
13718|      0|                                            *bp = (char)'\000';
13719|      0|                                        }
13720|      0|                                        else {
13721|      0|                                            if ((int)header->header.typeflag == 120) {
13722|      0|                                                {
13723|      0|                                                    tmp___4 = off_from_header(
13724|      0|                                                                  (char const *)(header->header.size),
13725|      0|                                                                  sizeof(header->header.size));
13726|      0|                                                    xheader_read(header, (size_t)tmp___4);
13727|      0|                                                }
13728|      0|                                            }
13729|      0|                                            else {
13730|      0|                                                if ((int)header->header.typeflag == 103) {
13731|      0|                                                    {
13732|      0|                                                        tmp___5 = off_from_header(
13733|      0|                                                                      (char const *)(header->header.size),
13734|      0|                                                                      sizeof(header->header.size));
13735|      0|                                                        xheader_read(header, (size_t)tmp___5);
13736|      0|                                                        xheader_decode_global();
13737|      0|                                                    }
13738|      0|                                                }
13739|      0|                                            }
13740|      0|                                        }
13741|      0|                                    }
13742|      0|                                }
13743|      0|                            }
13744|      0|                            else {
13745|      0|                                h = (struct posix_header const *)(&current_header->header);
13746|      0|                                if (recent_long_name) {
13747|      0|                                    {
13748|      0|                                        free((void *)recent_long_name);
13749|      0|                                    }
13750|      0|                                }
13751|      0|                                if (next_long_name) {
13752|      0|                                    name = (char const *)(next_long_name->buffer + 512);
13753|      0|                                    recent_long_name = next_long_name;
13754|      0|                                    recent_long_name_blocks = next_long_name_blocks;
13755|      0|                                }
13756|      0|                                else {
13757|      0|                                    np = namebuf;
13758|      0|                                    if (h->prefix[0]) {
13759|      0|                                        {
13760|      0|                                            tmp___8 = strcmp((char const *)(h->magic), "ustar");
13761|      0|                                        }
13762|      0|                                        if (tmp___8 == 0) {
13763|      0|                                            {
13764|      0|                                                memcpy((void * /* __restrict  */)np,
13765|      0|                                                       (void const * /* __restrict  */)(h->prefix),
13766|      0|                                                       sizeof(h->prefix));
13767|      0|                                                *(np + sizeof(h->prefix)) = (char)'\000';
13768|      0|                                                tmp___6 = strlen((char const *)np);
13769|      0|                                                np += tmp___6;
13770|      0|                                                tmp___7 = np;
13771|      0|                                                np++;
13772|      0|                                                *tmp___7 = (char)'/';
13773|      0|                                                current_header->oldgnu_header.isextended = (char)0;
13774|      0|                                            }
13775|      0|                                        }
13776|      0|                                    }
13777|      0|                                    {
13778|      0|                                        memcpy((void * /* __restrict  */)np,
13779|      0|                                               (void const * /* __restrict  */)(h->name),
13780|      0|                                               sizeof(h->name));
13781|      0|                                        *(np + sizeof(h->name)) = (char)'\000';
13782|      0|                                        name = (char const *)(namebuf);
13783|      0|                                        recent_long_name = (union block *)0;
13784|      0|                                        recent_long_name_blocks = (size_t)0;
13785|      0|                                    }
13786|      0|                                }
13787|      0|                                {
13788|      0|                                    assign_string(&current_stat_info.orig_file_name, name);
13789|      0|                                    assign_string(&current_stat_info.file_name, name);
13790|      0|                                    current_stat_info.had_trailing_slash =
13791|      0|                                        strip_trailing_slashes(current_stat_info.file_name);
13792|      0|                                }
13793|      0|                                if (recent_long_link) {
13794|      0|                                    {
13795|      0|                                        free((void *)recent_long_link);
13796|      0|                                    }
13797|      0|                                }
13798|      0|                                if (next_long_link) {
13799|      0|                                    name = (char const *)(next_long_link->buffer + 512);
13800|      0|                                    recent_long_link = next_long_link;
13801|      0|                                    recent_long_link_blocks = next_long_link_blocks;
13802|      0|                                }
13803|      0|                                else {
13804|      0|                                    {
13805|      0|                                        memcpy((void * /* __restrict  */)(namebuf),
13806|      0|                                               (void const * /* __restrict  */)(h->linkname),
13807|      0|                                               sizeof(h->linkname));
13808|      0|                                        namebuf[sizeof(h->linkname)] = (char)'\000';
13809|      0|                                        name = (char const *)(namebuf);
13810|      0|                                        recent_long_link = (union block *)0;
13811|      0|                                        recent_long_link_blocks = (size_t)0;
13812|      0|                                    }
13813|      0|                                }
13814|      0|                                {
13815|      0|                                    assign_string(&current_stat_info.link_name, name);
13816|      0|                                }
13817|      0|                                return ((enum read_header)1);
13818|      0|                            }
13819|      0|                        }
13820|      0|                    }
13821|      0|                }
13822|      0|            }
13823|      0|while_break: /* CIL Label */
13824|      0|            ;
13825|      0|        }
13826|      0|    }
13827|      0|}
13828|       |void decode_header(union block *header, struct tar_stat_info *stat_info,
13829|       |                   enum archive_format *format_pointer, int do_user_group)
13830|      0|{
13831|      0|    enum archive_format format;
13832|      0|    int tmp;
13833|      0|    int tmp___0;
13834|      0|    int tmp___1;
13835|      0|    int tmp___2;
13836|      0|    int tmp___3;
13837|      0|    int tmp___4;
13838|      0|    unsigned long long tmp___5;
13839|      0|    _Bool tmp___6;
13840|       |
13841|      0|    {
13842|      0|        {
13843|      0|            tmp___0 = strcmp((char const *)(header->header.magic), "ustar");
13844|      0|        }
13845|      0|        if (tmp___0 == 0) {
13846|      0|            if ((int)header->star_header.prefix[130] == 0) {
13847|      0|                if ((int)header->star_header.atime[0] >= 48) {
13848|      0|                    if ((int)header->star_header.atime[0] <= 55) {
13849|      0|                        if ((int)header->star_header.atime[11] == 32) {
13850|      0|                            if ((int)header->star_header.ctime[0] >= 48) {
13851|      0|                                if ((int)header->star_header.ctime[0] <= 55) {
13852|      0|                                    if ((int)header->star_header.ctime[11] == 32) {
13853|      0|                                        format = (enum archive_format)5;
13854|      0|                                    }
13855|      0|                                    else {
13856|      0|                                        goto _L___6;
13857|      0|                                    }
13858|      0|                                }
13859|      0|                                else {
13860|      0|                                    goto _L___6;
13861|      0|                                }
13862|      0|                            }
13863|      0|                            else {
13864|      0|                                goto _L___6;
13865|      0|                            }
13866|      0|                        }
13867|      0|                        else {
13868|      0|                            goto _L___6;
13869|      0|                        }
13870|      0|                    }
13871|      0|                    else {
13872|      0|                        goto _L___6;
13873|      0|                    }
13874|      0|                }
13875|      0|                else {
13876|      0|                    goto _L___6;
13877|      0|                }
13878|      0|            }
13879|      0|            else {
13880|      0|_L___6: /* CIL Label */
13881|      0|                if (extended_header.size) {
13882|      0|                    format = (enum archive_format)4;
13883|      0|                }
13884|      0|                else {
13885|      0|                    format = (enum archive_format)3;
13886|      0|                }
13887|      0|            }
13888|      0|        }
13889|      0|        else {
13890|      0|            {
13891|      0|                tmp = strcmp((char const *)(header->header.magic), "ustar  ");
13892|      0|            }
13893|      0|            if (tmp == 0) {
13894|      0|                format = (enum archive_format)2;
13895|      0|            }
13896|      0|            else {
13897|      0|                format = (enum archive_format)1;
13898|      0|            }
13899|      0|        }
13900|      0|        {
13901|      0|            *format_pointer = format;
13902|      0|            stat_info->stat.st_mode = mode_from_header(
13903|      0|                                          (char const *)(header->header.mode), sizeof(header->header.mode));
13904|      0|            stat_info->stat.st_mtim.tv_sec = time_from_header(
13905|      0|                                                 (char const *)(header->header.mtime), sizeof(header->header.mtime));
13906|      0|            assign_string(&stat_info->uname, (char const *)(header->header.uname));
13907|      0|            assign_string(&stat_info->gname, (char const *)(header->header.gname));
13908|      0|            tmp___1 = major_from_header((char const *)(header->header.devmajor),
13909|      0|                                        sizeof(header->header.devmajor));
13910|      0|            stat_info->devmajor = (unsigned int)tmp___1;
13911|      0|            tmp___2 = minor_from_header((char const *)(header->header.devminor),
13912|      0|                                        sizeof(header->header.devminor));
13913|      0|            stat_info->devminor = (unsigned int)tmp___2;
13914|      0|            stat_info->stat.st_atim.tv_sec = start_timespec.tv_sec;
13915|      0|            stat_info->stat.st_ctim.tv_sec = start_timespec.tv_sec;
13916|      0|        }
13917|      0|        if ((unsigned int)format == 2U) {
13918|      0|            if (incremental_option) {
13919|      0|                {
13920|      0|                    stat_info->stat.st_atim.tv_sec =
13921|      0|                        time_from_header((char const *)(header->oldgnu_header.atime),
13922|      0|                                         sizeof(header->oldgnu_header.atime));
13923|      0|                    stat_info->stat.st_ctim.tv_sec =
13924|      0|                        time_from_header((char const *)(header->oldgnu_header.ctime),
13925|      0|                                         sizeof(header->oldgnu_header.ctime));
13926|      0|                }
13927|      0|            }
13928|      0|        }
13929|      0|        if ((unsigned int)format == 1U) {
13930|      0|            {
13931|      0|                stat_info->stat.st_uid = uid_from_header(
13932|      0|                                             (char const *)(header->header.uid), sizeof(header->header.uid));
13933|      0|                stat_info->stat.st_gid = gid_from_header(
13934|      0|                                             (char const *)(header->header.gid), sizeof(header->header.gid));
13935|      0|                stat_info->stat.st_rdev = (__dev_t)0;
13936|      0|            }
13937|      0|        }
13938|      0|        else {
13939|      0|            if ((unsigned int)format == 5U) {
13940|      0|                {
13941|      0|                    stat_info->stat.st_atim.tv_sec =
13942|      0|                        time_from_header((char const *)(header->star_header.atime),
13943|      0|                                         sizeof(header->star_header.atime));
13944|      0|                    stat_info->stat.st_ctim.tv_sec =
13945|      0|                        time_from_header((char const *)(header->star_header.ctime),
13946|      0|                                         sizeof(header->star_header.ctime));
13947|      0|                }
13948|      0|            }
13949|      0|            if (do_user_group) {
13950|      0|                if (numeric_owner_option) {
13951|      0|                    {
13952|      0|                        stat_info->stat.st_uid = uid_from_header(
13953|      0|                                                     (char const *)(header->header.uid), sizeof(header->header.uid));
13954|      0|                    }
13955|      0|                }
13956|      0|                else {
13957|      0|                    if (!header->header.uname[0]) {
13958|      0|                        {
13959|      0|                            stat_info->stat.st_uid =
13960|      0|                                uid_from_header((char const *)(header->header.uid),
13961|      0|                                                sizeof(header->header.uid));
13962|      0|                        }
13963|      0|                    }
13964|      0|                    else {
13965|      0|                        {
13966|      0|                            tmp___3 = uname_to_uid((char const *)(header->header.uname),
13967|      0|                                                   &stat_info->stat.st_uid);
13968|      0|                        }
13969|      0|                        if (!tmp___3) {
13970|      0|                            {
13971|      0|                                stat_info->stat.st_uid =
13972|      0|                                    uid_from_header((char const *)(header->header.uid),
13973|      0|                                                    sizeof(header->header.uid));
13974|      0|                            }
13975|      0|                        }
13976|      0|                    }
13977|      0|                }
13978|      0|                if (numeric_owner_option) {
13979|      0|                    {
13980|      0|                        stat_info->stat.st_gid = gid_from_header(
13981|      0|                                                     (char const *)(header->header.gid), sizeof(header->header.gid));
13982|      0|                    }
13983|      0|                }
13984|      0|                else {
13985|      0|                    if (!header->header.gname[0]) {
13986|      0|                        {
13987|      0|                            stat_info->stat.st_gid =
13988|      0|                                gid_from_header((char const *)(header->header.gid),
13989|      0|                                                sizeof(header->header.gid));
13990|      0|                        }
13991|      0|                    }
13992|      0|                    else {
13993|      0|                        {
13994|      0|                            tmp___4 = gname_to_gid((char const *)(header->header.gname),
13995|      0|                                                   &stat_info->stat.st_gid);
13996|      0|                        }
13997|      0|                        if (!tmp___4) {
13998|      0|                            {
13999|      0|                                stat_info->stat.st_gid =
14000|      0|                                    gid_from_header((char const *)(header->header.gid),
14001|      0|                                                    sizeof(header->header.gid));
14002|      0|                            }
14003|      0|                        }
14004|      0|                    }
14005|      0|                }
14006|      0|            }
14007|      0|            {
14008|      0|                if ((int)header->header.typeflag == 52) {
14009|      0|                    goto case_52;
14010|      0|                }
14011|      0|                if ((int)header->header.typeflag == 51) {
14012|      0|                    goto case_52;
14013|      0|                }
14014|      0|                goto switch_default;
14015|      0|case_52:  /* CIL Label */
14016|      0|case_51 : { /* CIL Label */
14017|      0|                    tmp___5 = gnu_dev_makedev(stat_info->devmajor, stat_info->devminor);
14018|      0|                    stat_info->stat.st_rdev = (__dev_t)tmp___5;
14019|      0|                }
14020|      0|                goto switch_break;
14021|      0|switch_default: /* CIL Label */
14022|      0|                stat_info->stat.st_rdev = (__dev_t)0;
14023|      0|switch_break: /* CIL Label */
14024|      0|                ;
14025|      0|            }
14026|      0|        }
14027|      0|        {
14028|      0|            stat_info->archive_file_size = stat_info->stat.st_size;
14029|      0|            xheader_decode(stat_info);
14030|      0|            tmp___6 = sparse_member_p(stat_info);
14031|      0|        }
14032|      0|        if (tmp___6) {
14033|      0|            {
14034|      0|                sparse_fixup_header(stat_info);
14035|      0|                stat_info->is_sparse = (_Bool)1;
14036|      0|            }
14037|      0|        }
14038|      0|        return;
14039|      0|    }
14040|      0|}
14041|       |static int warned_once___0;
14042|       |static struct quoting_options *o;
14043|       |static uintmax_t from_header(char const *where0, size_t digs, char const *type,
14044|       |                             uintmax_t minus_minval, uintmax_t maxval)
14045|      0|{
14046|      0|    uintmax_t value;
14047|      0|    char const *where;
14048|      0|    char const *lim;
14049|      0|    int negative;
14050|      0|    char *tmp;
14051|      0|    unsigned short const **tmp___0;
14052|      0|    char const *where1;
14053|      0|    uintmax_t overflow;
14054|      0|    char const *tmp___1;
14055|      0|    int digit;
14056|      0|    char *tmp___2;
14057|      0|    char *tmp___3;
14058|      0|    int dig;
14059|      0|    char *tmp___4;
14060|      0|    char const *tmp___5;
14061|      0|    char *string;
14062|      0|    void *tmp___6;
14063|      0|    char const *tmp___7;
14064|      0|    char *tmp___8;
14065|      0|    int signbit;
14066|      0|    uintmax_t topbits;
14067|      0|    char const *tmp___9;
14068|      0|    char const *tmp___10;
14069|      0|    char *tmp___11;
14070|      0|    char buf[1000];
14071|      0|    char *tmp___12;
14072|      0|    unsigned short const **tmp___13;
14073|      0|    char minval_buf[((((sizeof(uintmax_t) * 8UL) * 302UL) / 1000UL + 1UL) + 1UL) +
14074|      0|                                          1UL];
14075|      0|    char maxval_buf[(((sizeof(uintmax_t) * 8UL) * 302UL) / 1000UL + 1UL) + 1UL];
14076|      0|    char value_buf[((((sizeof(uintmax_t) * 8UL) * 302UL) / 1000UL + 1UL) + 1UL) +
14077|      0|                                         1UL];
14078|      0|    char *minval_string;
14079|      0|    char *tmp___14;
14080|      0|    char *value_string;
14081|      0|    char *tmp___15;
14082|      0|    char *tmp___16;
14083|      0|    char *tmp___17;
14084|      0|    uintmax_t tmp___18;
14085|      0|    uintmax_t tmp___19;
14086|      0|    void *__cil_tmp44;
14087|      0|    void *__cil_tmp45;
14088|      0|    void *__cil_tmp46;
14089|      0|    void *__cil_tmp47;
14090|      0|    char *__cil_tmp48;
14091|      0|    char *__cil_tmp49;
14092|      0|    char *__cil_tmp50;
14093|      0|    char *__cil_tmp51;
14094|      0|    char *__cil_tmp52;
14095|      0|    char *__cil_tmp53;
14096|      0|    char *__cil_tmp54;
14097|      0|    char *__cil_tmp55;
14098|       |
14099|      0|    {
14100|      0|        where = where0;
14101|      0|        lim = where + digs;
14102|      0|        negative = 0;
14103|      0|        where += !*where;
14104|      0|        {
14105|      0|            while (1) {
14106|      0|while_continue: /* CIL Label */
14107|      0|                ;
14108|      0|                if ((unsigned long)where == (unsigned long)lim) {
14109|      0|                    if (type) {
14110|      0|                        {
14111|      0|                            tmp = gettext("Blanks in header where numeric %s value expected");
14112|      0|                            error(0, 0, (char const *)tmp, type);
14113|      0|                            exit_status = 2;
14114|      0|                        }
14115|      0|                    }
14116|      0|                    return ((uintmax_t)-1);
14117|      0|                }
14118|      0|                {
14119|      0|                    tmp___0 = __ctype_b_loc();
14120|      0|                }
14121|      0|                if (!((int const) * (*tmp___0 + (int)((unsigned char)*where)) & 8192)) {
14122|      0|                    goto while_break;
14123|      0|                }
14124|      0|                where++;
14125|      0|            }
14126|      0|while_break: /* CIL Label */
14127|      0|            ;
14128|      0|        }
14129|      0|        value = (uintmax_t)0;
14130|      0|        if ((unsigned int)*where - 48U <= 7U) {
14131|      0|            where1 = where;
14132|      0|            overflow = (uintmax_t)0;
14133|      0|            {
14134|      0|                while (1) {
14135|      0|while_continue___0: /* CIL Label */
14136|      0|                    ;
14137|      0|                    tmp___1 = where;
14138|      0|                    where++;
14139|      0|                    value += (uintmax_t)((int const) * tmp___1 - 48);
14140|      0|                    if ((unsigned long)where == (unsigned long)lim) {
14141|      0|                        goto while_break___0;
14142|      0|                    }
14143|      0|                    else {
14144|      0|                        if (!((unsigned int)*where - 48U <= 7U)) {
14145|      0|                            goto while_break___0;
14146|      0|                        }
14147|      0|                    }
14148|      0|                    overflow |= value ^ ((value << 3) >> 3);
14149|      0|                    value <<= 3;
14150|      0|                }
14151|      0|while_break___0: /* CIL Label */
14152|      0|                ;
14153|      0|            }
14154|      0|            if (overflow) {
14155|      0|                goto _L___3;
14156|      0|            }
14157|      0|            else {
14158|      0|                if (maxval < value) {
14159|      0|_L___3: /* CIL Label */
14160|      0|                    if (50 <= (int)*where1) {
14161|      0|                        if (type) {
14162|      0|                            digit = (int)(((int const) * where1 - 48) | 4);
14163|      0|                            overflow = (uintmax_t)0;
14164|      0|                            value = (uintmax_t)0;
14165|      0|                            where = where1;
14166|      0|                            {
14167|      0|                                while (1) {
14168|      0|while_continue___1: /* CIL Label */
14169|      0|                                    ;
14170|      0|                                    value += (uintmax_t)(7 - digit);
14171|      0|                                    where++;
14172|      0|                                    if ((unsigned long)where == (unsigned long)lim) {
14173|      0|                                        goto while_break___1;
14174|      0|                                    }
14175|      0|                                    else {
14176|      0|                                        if (!((unsigned int)*where - 48U <= 7U)) {
14177|      0|                                            goto while_break___1;
14178|      0|                                        }
14179|      0|                                    }
14180|      0|                                    digit = (int)((int const) * where - 48);
14181|      0|                                    overflow |= value ^ ((value << 3) >> 3);
14182|      0|                                    value <<= 3;
14183|      0|                                }
14184|      0|while_break___1: /* CIL Label */
14185|      0|                                ;
14186|      0|                            }
14187|      0|                            value++;
14188|      0|                            overflow |= (unsigned long)(!value);
14189|      0|                            if (!overflow) {
14190|      0|                                if (value <= minus_minval) {
14191|      0|                                    {
14192|      0|                                        tmp___2 = gettext("Archive octal value %.*s is out of %s "
14193|      0|                                                          "range; assuming two\'s complement");
14194|      0|                                        error(0, 0, (char const *)tmp___2, (int)(where - where1),
14195|      0|                                              where1, type);
14196|      0|                                        negative = 1;
14197|      0|                                    }
14198|      0|                                }
14199|      0|                            }
14200|      0|                        }
14201|      0|                    }
14202|      0|                }
14203|      0|            }
14204|      0|            if (overflow) {
14205|      0|                if (type) {
14206|      0|                    {
14207|      0|                        tmp___3 = gettext("Archive octal value %.*s is out of %s range");
14208|      0|                        error(0, 0, (char const *)tmp___3, (int)(where - where1), where1,
14209|      0|                              type);
14210|      0|                        exit_status = 2;
14211|      0|                    }
14212|      0|                }
14213|      0|                return ((uintmax_t)-1);
14214|      0|            }
14215|      0|        }
14216|      0|        else {
14217|      0|            if ((int const) * where == 45) {
14218|      0|                goto _L___5;
14219|      0|            }
14220|      0|            else {
14221|      0|                if ((int const) * where == 43) {
14222|      0|_L___5: /* CIL Label */
14223|      0|                    if (!warned_once___0) {
14224|      0|                        {
14225|      0|                            warned_once___0 = 1;
14226|      0|                            tmp___4 = gettext("Archive contains obsolescent base-64 headers");
14227|      0|                            error(0, 0, (char const *)tmp___4);
14228|      0|                        }
14229|      0|                    }
14230|      0|                    tmp___5 = where;
14231|      0|                    where++;
14232|      0|                    negative = (int const) * tmp___5 == 45;
14233|      0|                    {
14234|      0|                        while (1) {
14235|      0|while_continue___2: /* CIL Label */
14236|      0|                            ;
14237|      0|                            if ((unsigned long)where != (unsigned long)lim) {
14238|      0|                                dig = (int)base64_map[(unsigned char)*where];
14239|      0|                                if (!(dig < 64)) {
14240|      0|                                    goto while_break___2;
14241|      0|                                }
14242|      0|                            }
14243|      0|                            else {
14244|      0|                                goto while_break___2;
14245|      0|                            }
14246|      0|                            if ((value << 6) >> 6 != value) {
14247|      0|                                {
14248|      0|                                    tmp___6 = __builtin_alloca(digs + 1UL);
14249|      0|                                    string = (char *)tmp___6;
14250|      0|                                    memcpy((void * /* __restrict  */)string,
14251|      0|                                           (void const * /* __restrict  */)where0, digs);
14252|      0|                                    *(string + digs) = (char)'\000';
14253|      0|                                }
14254|      0|                                if (type) {
14255|      0|                                    {
14256|      0|                                        tmp___7 = quote((char const *)string);
14257|      0|                                        tmp___8 = gettext(
14258|      0|                                                      "Archive signed base-64 string %s is out of %s range");
14259|      0|                                        error(0, 0, (char const *)tmp___8, tmp___7, type);
14260|      0|                                        exit_status = 2;
14261|      0|                                    }
14262|      0|                                }
14263|      0|                                return ((uintmax_t)-1);
14264|      0|                            }
14265|      0|                            value = (value << 6) | (unsigned long)dig;
14266|      0|                            where++;
14267|      0|                        }
14268|      0|while_break___2: /* CIL Label */
14269|      0|                        ;
14270|      0|                    }
14271|      0|                }
14272|      0|                else {
14273|      0|                    if ((int const) * where == -128) {
14274|      0|                        goto _L___4;
14275|      0|                    }
14276|      0|                    else {
14277|      0|                        if ((int const) * where == -1) {
14278|      0|_L___4: /* CIL Label */
14279|      0|                            signbit = (int)((int const) * where & (int const)(1 << 6));
14280|      0|                            topbits = (uintmax_t)(-signbit)
14281|      0|                                      << ((8UL * sizeof(uintmax_t) - 8UL) - 6UL);
14282|      0|                            tmp___9 = where;
14283|      0|                            where++;
14284|      0|                            value = (uintmax_t)(
14285|      0|                                        ((int const) * tmp___9 & (int const)((1 << 6) - 1)) -
14286|      0|                                        (int const)signbit);
14287|      0|                            {
14288|      0|                                while (1) {
14289|      0|while_continue___3: /* CIL Label */
14290|      0|                                    ;
14291|      0|                                    tmp___10 = where;
14292|      0|                                    where++;
14293|      0|                                    value = (value << 8) + (uintmax_t)((unsigned char)*tmp___10);
14294|      0|                                    if ((unsigned long)where == (unsigned long)lim) {
14295|      0|                                        goto while_break___3;
14296|      0|                                    }
14297|      0|                                    if ((((value << 8) >> 8) | topbits) != value) {
14298|      0|                                        if (type) {
14299|      0|                                            {
14300|      0|                                                tmp___11 = gettext(
14301|      0|                                                               "Archive base-256 value is out of %s range");
14302|      0|                                                error(0, 0, (char const *)tmp___11, type);
14303|      0|                                                exit_status = 2;
14304|      0|                                            }
14305|      0|                                        }
14306|      0|                                        return ((uintmax_t)-1);
14307|      0|                                    }
14308|      0|                                }
14309|      0|while_break___3: /* CIL Label */
14310|      0|                                ;
14311|      0|                            }
14312|      0|                            negative = signbit;
14313|      0|                            if (negative) {
14314|      0|                                value = -value;
14315|      0|                            }
14316|      0|                        }
14317|      0|                    }
14318|      0|                }
14319|      0|            }
14320|      0|        }
14321|      0|        if ((unsigned long)where != (unsigned long)lim) {
14322|      0|            if (*where) {
14323|      0|                {
14324|      0|                    tmp___13 = __ctype_b_loc();
14325|      0|                }
14326|      0|                if (!((int const) * (*tmp___13 + (int)((unsigned char)*where)) &
14327|      0|                        8192)) {
14328|      0|                    if (type) {
14329|      0|                        if (!o) {
14330|      0|                            {
14331|      0|                                o = clone_quoting_options((struct quoting_options *)0);
14332|      0|                                set_quoting_style(o, (enum quoting_style)5);
14333|      0|                            }
14334|      0|                        }
14335|      0|                        {
14336|      0|                            while (1) {
14337|      0|while_continue___4: /* CIL Label */
14338|      0|                                ;
14339|      0|                                if ((unsigned long)where0 != (unsigned long)lim) {
14340|      0|                                    if (!(!*(lim + -1))) {
14341|      0|                                        goto while_break___4;
14342|      0|                                    }
14343|      0|                                }
14344|      0|                                else {
14345|      0|                                    goto while_break___4;
14346|      0|                                }
14347|      0|                                lim--;
14348|      0|                            }
14349|      0|while_break___4: /* CIL Label */
14350|      0|                            ;
14351|      0|                        }
14352|      0|                        {
14353|      0|                            quotearg_buffer(buf, sizeof(buf), where0, (size_t)(lim - where),
14354|      0|                                            (struct quoting_options const *)o);
14355|      0|                            tmp___12 = gettext(
14356|      0|                                           "Archive contains %.*s where numeric %s value expected");
14357|      0|                            error(0, 0, (char const *)tmp___12, (int)sizeof(buf), buf, type);
14358|      0|                            exit_status = 2;
14359|      0|                        }
14360|      0|                    }
14361|      0|                    return ((uintmax_t)-1);
14362|      0|                }
14363|      0|            }
14364|      0|        }
14365|      0|        if (negative) {
14366|      0|            tmp___19 = minus_minval;
14367|      0|        }
14368|      0|        else {
14369|      0|            tmp___19 = maxval;
14370|      0|        }
14371|      0|        if (value <= tmp___19) {
14372|      0|            if (negative) {
14373|      0|                tmp___18 = -value;
14374|      0|            }
14375|      0|            else {
14376|      0|                tmp___18 = value;
14377|      0|            }
14378|      0|            return (tmp___18);
14379|      0|        }
14380|      0|        if (type) {
14381|      0|            {
14382|      0|                tmp___14 = stringify_uintmax_t_backwards(
14383|      0|                               minus_minval,
14384|      0|                               (minval_buf + 1) +
14385|      0|                               ((((sizeof(uintmax_t) * 8UL) * 302UL) / 1000UL + 1UL) + 1UL));
14386|      0|                minval_string = tmp___14;
14387|      0|                tmp___15 = stringify_uintmax_t_backwards(
14388|      0|                               value,
14389|      0|                               (value_buf + 1) +
14390|      0|                               ((((sizeof(uintmax_t) * 8UL) * 302UL) / 1000UL + 1UL) + 1UL));
14391|      0|                value_string = tmp___15;
14392|      0|            }
14393|      0|            if (negative) {
14394|      0|                value_string--;
14395|      0|                *value_string = (char)'-';
14396|      0|            }
14397|      0|            if (minus_minval) {
14398|      0|                minval_string--;
14399|      0|                *minval_string = (char)'-';
14400|      0|            }
14401|      0|            {
14402|      0|                tmp___16 = stringify_uintmax_t_backwards(
14403|      0|                               maxval,
14404|      0|                               maxval_buf +
14405|      0|                               ((((sizeof(uintmax_t) * 8UL) * 302UL) / 1000UL + 1UL) + 1UL));
14406|      0|                tmp___17 = gettext("Archive value %s is out of %s range %s.%s");
14407|      0|                error(0, 0, (char const *)tmp___17, value_string, type, minval_string,
14408|      0|                      tmp___16);
14409|      0|                exit_status = 2;
14410|      0|            }
14411|      0|        }
14412|      0|        return ((uintmax_t)-1);
14413|      0|    }
14414|      0|}
14415|       |gid_t gid_from_header(char const *p, size_t s)
14416|      0|{
14417|      0|    uintmax_t tmp;
14418|      0|    char *__cil_tmp4;
14419|       |
14420|      0|    {
14421|      0|        {
14422|      0|            tmp = from_header(p, s, "gid_t", -((uintmax_t)((gid_t)0)),
14423|      0|                              (uintmax_t)4294967295U);
14424|      0|        }
14425|      0|        return ((gid_t)tmp);
14426|      0|    }
14427|      0|}
14428|       |int major_from_header(char const *p, size_t s)
14429|      0|{
14430|      0|    uintmax_t tmp;
14431|      0|    char *__cil_tmp4;
14432|       |
14433|      0|    {
14434|      0|        {
14435|      0|            tmp = from_header(p, s, "major_t",
14436|      0|                              -((uintmax_t)(-1 << (sizeof(int) * 8UL - 1UL))),
14437|      0|                              (uintmax_t)(-1 - (-1 << (sizeof(int) * 8UL - 1UL))));
14438|      0|        }
14439|      0|        return ((int)tmp);
14440|      0|    }
14441|      0|}
14442|       |int minor_from_header(char const *p, size_t s)
14443|      0|{
14444|      0|    uintmax_t tmp;
14445|      0|    char *__cil_tmp4;
14446|       |
14447|      0|    {
14448|      0|        {
14449|      0|            tmp = from_header(p, s, "minor_t",
14450|      0|                              -((uintmax_t)(-1 << (sizeof(int) * 8UL - 1UL))),
14451|      0|                              (uintmax_t)(-1 - (-1 << (sizeof(int) * 8UL - 1UL))));
14452|      0|        }
14453|      0|        return ((int)tmp);
14454|      0|    }
14455|      0|}
14456|       |mode_t mode_from_header(char const *p, size_t s)
14457|      0|{
14458|      0|    unsigned int u;
14459|      0|    uintmax_t tmp;
14460|      0|    int tmp___0;
14461|      0|    int tmp___1;
14462|      0|    int tmp___2;
14463|      0|    int tmp___3;
14464|      0|    int tmp___4;
14465|      0|    int tmp___5;
14466|      0|    int tmp___6;
14467|      0|    int tmp___7;
14468|      0|    int tmp___8;
14469|      0|    int tmp___9;
14470|      0|    int tmp___10;
14471|      0|    int tmp___11;
14472|      0|    char *__cil_tmp17;
14473|       |
14474|      0|    {
14475|      0|        {
14476|      0|            tmp = from_header(p, s, "mode_t", -((uintmax_t)((mode_t)0)),
14477|      0|                              0xffffffffffffffffUL);
14478|      0|            u = (unsigned int)tmp;
14479|      0|        }
14480|      0|        if (u & 2048U) {
14481|      0|            tmp___0 = 2048;
14482|      0|        }
14483|      0|        else {
14484|      0|            tmp___0 = 0;
14485|      0|        }
14486|      0|        if (u & 1024U) {
14487|      0|            tmp___1 = 1024;
14488|      0|        }
14489|      0|        else {
14490|      0|            tmp___1 = 0;
14491|      0|        }
14492|      0|        if (u & 512U) {
14493|      0|            tmp___2 = 512;
14494|      0|        }
14495|      0|        else {
14496|      0|            tmp___2 = 0;
14497|      0|        }
14498|      0|        if (u & 256U) {
14499|      0|            tmp___3 = 256;
14500|      0|        }
14501|      0|        else {
14502|      0|            tmp___3 = 0;
14503|      0|        }
14504|      0|        if (u & 128U) {
14505|      0|            tmp___4 = 128;
14506|      0|        }
14507|      0|        else {
14508|      0|            tmp___4 = 0;
14509|      0|        }
14510|      0|        if (u & 64U) {
14511|      0|            tmp___5 = 64;
14512|      0|        }
14513|      0|        else {
14514|      0|            tmp___5 = 0;
14515|      0|        }
14516|      0|        if (u & 32U) {
14517|      0|            tmp___6 = 256 >> 3;
14518|      0|        }
14519|      0|        else {
14520|      0|            tmp___6 = 0;
14521|      0|        }
14522|      0|        if (u & 16U) {
14523|      0|            tmp___7 = 128 >> 3;
14524|      0|        }
14525|      0|        else {
14526|      0|            tmp___7 = 0;
14527|      0|        }
14528|      0|        if (u & 8U) {
14529|      0|            tmp___8 = 64 >> 3;
14530|      0|        }
14531|      0|        else {
14532|      0|            tmp___8 = 0;
14533|      0|        }
14534|      0|        if (u & 4U) {
14535|      0|            tmp___9 = (256 >> 3) >> 3;
14536|      0|        }
14537|      0|        else {
14538|      0|            tmp___9 = 0;
14539|      0|        }
14540|      0|        if (u & 2U) {
14541|      0|            tmp___10 = (128 >> 3) >> 3;
14542|      0|        }
14543|      0|        else {
14544|      0|            tmp___10 = 0;
14545|      0|        }
14546|      0|        if (u & 1U) {
14547|      0|            tmp___11 = (64 >> 3) >> 3;
14548|      0|        }
14549|      0|        else {
14550|      0|            tmp___11 = 0;
14551|      0|        }
14552|      0|        return (
14553|      0|                   (mode_t)(((((((((((tmp___0 | tmp___1) | tmp___2) | tmp___3) | tmp___4) |
14554|      0|                                  tmp___5) |
14555|      0|                                 tmp___6) |
14556|      0|                                tmp___7) |
14557|      0|                               tmp___8) |
14558|      0|                              tmp___9) |
14559|      0|                             tmp___10) |
14560|      0|                            tmp___11));
14561|      0|    }
14562|      0|}
14563|       |off_t off_from_header(char const *p, size_t s)
14564|      0|{
14565|      0|    uintmax_t tmp;
14566|      0|    char *__cil_tmp4;
14567|       |
14568|      0|    {
14569|      0|        {
14570|      0|            tmp =
14571|      0|                from_header(p, s, "off_t", (uintmax_t)0,
14572|      0|                            (uintmax_t)(-1L - (-1L << (sizeof(off_t) * 8UL - 1UL))));
14573|      0|        }
14574|      0|        return ((off_t)tmp);
14575|      0|    }
14576|      0|}
14577|       |size_t size_from_header(char const *p, size_t s)
14578|      0|{
14579|      0|    uintmax_t tmp;
14580|      0|    char *__cil_tmp4;
14581|       |
14582|      0|    {
14583|      0|        {
14584|      0|            tmp = from_header(p, s, "size_t", (uintmax_t)0, 0xffffffffffffffffUL);
14585|      0|        }
14586|      0|        return (tmp);
14587|      0|    }
14588|      0|}
14589|       |time_t time_from_header(char const *p, size_t s)
14590|      0|{
14591|      0|    uintmax_t tmp;
14592|      0|    char *__cil_tmp4;
14593|       |
14594|      0|    {
14595|      0|        {
14596|      0|            tmp = from_header(
14597|      0|                      p, s, "time_t", -((uintmax_t)(-1L << (sizeof(time_t) * 8UL - 1UL))),
14598|      0|                      (uintmax_t)(-1L - (-1L << (sizeof(time_t) * 8UL - 1UL))));
14599|      0|        }
14600|      0|        return ((time_t)tmp);
14601|      0|    }
14602|      0|}
14603|       |uid_t uid_from_header(char const *p, size_t s)
14604|      0|{
14605|      0|    uintmax_t tmp;
14606|      0|    char *__cil_tmp4;
14607|       |
14608|      0|    {
14609|      0|        {
14610|      0|            tmp = from_header(p, s, "uid_t", -((uintmax_t)((uid_t)0)),
14611|      0|                              (uintmax_t)4294967295U);
14612|      0|        }
14613|      0|        return ((uid_t)tmp);
14614|      0|    }
14615|      0|}
14616|       |uintmax_t uintmax_from_header(char const *p, size_t s)
14617|      0|{
14618|      0|    uintmax_t tmp;
14619|      0|    char *__cil_tmp4;
14620|       |
14621|      0|    {
14622|      0|        {
14623|      0|            tmp = from_header(p, s, "uintmax_t", (uintmax_t)0, 0xffffffffffffffffUL);
14624|      0|        }
14625|      0|        return (tmp);
14626|      0|    }
14627|      0|}
14628|       |char *stringify_uintmax_t_backwards(uintmax_t o___0, char *buf)
14629|      0|{
14630|       |
14631|      0|    {
14632|      0|        buf--;
14633|      0|        *buf = (char)'\000';
14634|      0|        {
14635|      0|            while (1) {
14636|      0|while_continue: /* CIL Label */
14637|      0|                ;
14638|      0|                buf--;
14639|      0|                *buf = (char)(48 + (int)(o___0 % 10UL));
14640|      0|                o___0 /= 10UL;
14641|      0|                if (!(o___0 != 0UL)) {
14642|      0|                    goto while_break;
14643|      0|                }
14644|      0|            }
14645|      0|while_break: /* CIL Label */
14646|      0|            ;
14647|      0|        }
14648|      0|        return (buf);
14649|      0|    }
14650|      0|}
14651|       |static char buffer[27UL];
14652|       |char const *tartime(time_t t)
14653|      0|{
14654|      0|    char *p;
14655|      0|    struct tm *tm;
14656|      0|    struct tm *tmp;
14657|      0|    struct tm *tmp___0;
14658|      0|    struct tm *tmp___1;
14659|      0|    uintmax_t tmp___2;
14660|      0|    char *__cil_tmp8;
14661|       |
14662|      0|    {
14663|      0|        if (utc_option) {
14664|      0|            {
14665|      0|                tmp = gmtime((time_t const *)(&t));
14666|      0|                tmp___1 = tmp;
14667|      0|            }
14668|      0|        }
14669|      0|        else {
14670|      0|            {
14671|      0|                tmp___0 = localtime((time_t const *)(&t));
14672|      0|                tmp___1 = tmp___0;
14673|      0|            }
14674|      0|        }
14675|      0|        tm = tmp___1;
14676|      0|        if (tm) {
14677|      0|            {
14678|      0|                sprintf(
14679|      0|                    (char * /* __restrict  */)(buffer),
14680|      0|                    (char const * /* __restrict  */) "%04ld-%02d-%02d %02d:%02d:%02d",
14681|      0|                    (long)tm->tm_year + 1900L, tm->tm_mon + 1, tm->tm_mday, tm->tm_hour,
14682|      0|                    tm->tm_min, tm->tm_sec);
14683|      0|            }
14684|      0|            return ((char const *)(buffer));
14685|      0|        }
14686|      0|        if (t < 0L) {
14687|      0|            tmp___2 = -((uintmax_t)t);
14688|      0|        }
14689|      0|        else {
14690|      0|            tmp___2 = (uintmax_t)t;
14691|      0|        }
14692|      0|        {
14693|      0|            p = stringify_uintmax_t_backwards(tmp___2, buffer + sizeof(buffer));
14694|      0|        }
14695|      0|        if (t < 0L) {
14696|      0|            p--;
14697|      0|            *p = (char)'-';
14698|      0|        }
14699|      0|        {
14700|      0|            while (1) {
14701|      0|while_continue: /* CIL Label */
14702|      0|                ;
14703|      0|                if (!((unsigned long)(((buffer + sizeof(buffer)) - 19) - 1) <
14704|      0|                        (unsigned long)p)) {
14705|      0|                    goto while_break;
14706|      0|                }
14707|      0|                p--;
14708|      0|                *p = (char)' ';
14709|      0|            }
14710|      0|while_break: /* CIL Label */
14711|      0|            ;
14712|      0|        }
14713|      0|        return ((char const *)p);
14714|      0|    }
14715|      0|}
14716|       |static int ugswidth = 18;
14717|       |void print_header(struct tar_stat_info *st, off_t block_ordinal)
14718|      0|{
14719|      0|    char modes[11];
14720|      0|    char const *time_stamp;
14721|      0|    char *temp_name;
14722|      0|    char uform[(((sizeof(uintmax_t) * 8UL) * 302UL) / 1000UL + 1UL) + 1UL];
14723|      0|    char gform[(((sizeof(uintmax_t) * 8UL) * 302UL) / 1000UL + 1UL) + 1UL];
14724|      0|    char *user;
14725|      0|    char *group;
14726|      0|    char size[2UL * ((((sizeof(uintmax_t) * 8UL) * 302UL) / 1000UL + 1UL) + 1UL)];
14727|      0|    char uintbuf[(((sizeof(uintmax_t) * 8UL) * 302UL) / 1000UL + 1UL) + 1UL];
14728|      0|    int pad;
14729|      0|    char buf[(((sizeof(uintmax_t) * 8UL) * 302UL) / 1000UL + 1UL) + 1UL];
14730|      0|    char *tmp;
14731|      0|    char *tmp___0;
14732|      0|    char *tmp___1;
14733|      0|    char *tmp___2;
14734|      0|    size_t tmp___3;
14735|      0|    uintmax_t u;
14736|      0|    uintmax_t tmp___4;
14737|      0|    uid_t tmp___5;
14738|      0|    uintmax_t g;
14739|      0|    uintmax_t tmp___6;
14740|      0|    gid_t tmp___7;
14741|      0|    unsigned int tmp___8;
14742|      0|    char *tmp___9;
14743|      0|    unsigned int tmp___10;
14744|      0|    char *tmp___11;
14745|      0|    char *tmp___12;
14746|      0|    size_t tmp___13;
14747|      0|    size_t tmp___14;
14748|      0|    size_t tmp___15;
14749|      0|    char *tmp___16;
14750|      0|    char *tmp___17;
14751|      0|    char *tmp___18;
14752|      0|    char *tmp___19;
14753|      0|    char type_string[2];
14754|      0|    char const *tmp___20;
14755|      0|    char *tmp___21;
14756|      0|    char *tmp___22;
14757|      0|    char *tmp___23;
14758|      0|    char *tmp___24;
14759|      0|    uintmax_t tmp___25;
14760|      0|    char *tmp___26;
14761|      0|    char *tmp___27;
14762|      0|    char *tmp___28;
14763|      0|    void *__cil_tmp47;
14764|      0|    void *__cil_tmp48;
14765|      0|    void *__cil_tmp49;
14766|      0|    void *__cil_tmp50;
14767|      0|    void *__cil_tmp51;
14768|      0|    void *__cil_tmp52;
14769|      0|    void *__cil_tmp53;
14770|      0|    char *__cil_tmp54;
14771|      0|    char *__cil_tmp55;
14772|      0|    char *__cil_tmp56;
14773|      0|    char *__cil_tmp57;
14774|      0|    char *__cil_tmp58;
14775|      0|    char *__cil_tmp59;
14776|      0|    char *__cil_tmp60;
14777|      0|    char *__cil_tmp61;
14778|      0|    char *__cil_tmp62;
14779|      0|    char *__cil_tmp63;
14780|      0|    char *__cil_tmp64;
14781|      0|    char *__cil_tmp65;
14782|       |
14783|      0|    {
14784|      0|        if (st->orig_file_name) {
14785|      0|            temp_name = st->orig_file_name;
14786|      0|        }
14787|      0|        else {
14788|      0|            temp_name = st->file_name;
14789|      0|        }
14790|      0|        if (block_number_option) {
14791|      0|            if (block_ordinal < 0L) {
14792|      0|                {
14793|      0|                    block_ordinal = current_block_ordinal();
14794|      0|                }
14795|      0|            }
14796|      0|            {
14797|      0|                block_ordinal =
14798|      0|                    (off_t)((size_t)block_ordinal - recent_long_name_blocks);
14799|      0|                block_ordinal =
14800|      0|                    (off_t)((size_t)block_ordinal - recent_long_link_blocks);
14801|      0|                tmp = stringify_uintmax_t_backwards(
14802|      0|                          (uintmax_t)block_ordinal,
14803|      0|                          buf + ((((sizeof(uintmax_t) * 8UL) * 302UL) / 1000UL + 1UL) + 1UL));
14804|      0|                tmp___0 = gettext("block %s: ");
14805|      0|                fprintf((FILE * /* __restrict  */) stdlis,
14806|      0|                        (char const * /* __restrict  */)tmp___0, tmp);
14807|      0|            }
14808|      0|        }
14809|      0|        if (verbose_option <= 1) {
14810|      0|            {
14811|      0|                tmp___1 = quotearg((char const *)temp_name);
14812|      0|                fprintf((FILE * /* __restrict  */) stdlis,
14813|      0|                        (char const * /* __restrict  */) "%s\n", tmp___1);
14814|      0|            }
14815|      0|        }
14816|      0|        else {
14817|      0|            modes[0] = (char)'?';
14818|      0|            {
14819|      0|                if ((int)current_header->header.typeflag == 86) {
14820|      0|                    goto case_86;
14821|      0|                }
14822|      0|                if ((int)current_header->header.typeflag == 77) {
14823|      0|                    goto case_77;
14824|      0|                }
14825|      0|                if ((int)current_header->header.typeflag == 78) {
14826|      0|                    goto case_78;
14827|      0|                }
14828|      0|                if ((int)current_header->header.typeflag == 76) {
14829|      0|                    goto case_76;
14830|      0|                }
14831|      0|                if ((int)current_header->header.typeflag == 75) {
14832|      0|                    goto case_76;
14833|      0|                }
14834|      0|                if ((int)current_header->header.typeflag == 83) {
14835|      0|                    goto case_83;
14836|      0|                }
14837|      0|                if ((int)current_header->header.typeflag == 48) {
14838|      0|                    goto case_83;
14839|      0|                }
14840|      0|                if ((int)current_header->header.typeflag == 0) {
14841|      0|                    goto case_83;
14842|      0|                }
14843|      0|                if ((int)current_header->header.typeflag == 49) {
14844|      0|                    goto case_49;
14845|      0|                }
14846|      0|                if ((int)current_header->header.typeflag == 68) {
14847|      0|                    goto case_68;
14848|      0|                }
14849|      0|                if ((int)current_header->header.typeflag == 53) {
14850|      0|                    goto case_53;
14851|      0|                }
14852|      0|                if ((int)current_header->header.typeflag == 50) {
14853|      0|                    goto case_50;
14854|      0|                }
14855|      0|                if ((int)current_header->header.typeflag == 52) {
14856|      0|                    goto case_52;
14857|      0|                }
14858|      0|                if ((int)current_header->header.typeflag == 51) {
14859|      0|                    goto case_51;
14860|      0|                }
14861|      0|                if ((int)current_header->header.typeflag == 54) {
14862|      0|                    goto case_54;
14863|      0|                }
14864|      0|                if ((int)current_header->header.typeflag == 55) {
14865|      0|                    goto case_55;
14866|      0|                }
14867|      0|                goto switch_break;
14868|      0|case_86: /* CIL Label */
14869|      0|                modes[0] = (char)'V';
14870|      0|                goto switch_break;
14871|      0|case_77: /* CIL Label */
14872|      0|                modes[0] = (char)'M';
14873|      0|                goto switch_break;
14874|      0|case_78: /* CIL Label */
14875|      0|                modes[0] = (char)'N';
14876|      0|                goto switch_break;
14877|      0|case_76:  /* CIL Label */
14878|      0|case_75 : { /* CIL Label */
14879|      0|                    modes[0] = (char)'L';
14880|      0|                    tmp___2 = gettext("Visible longname error");
14881|      0|                    error(0, 0, (char const *)tmp___2);
14882|      0|                    exit_status = 2;
14883|      0|                }
14884|      0|                goto switch_break;
14885|      0|case_83: /* CIL Label */
14886|      0|case_48: /* CIL Label */
14887|      0|case_0 : { /* CIL Label */
14888|      0|                    modes[0] = (char)'-';
14889|      0|                    tmp___3 = strlen((char const *)temp_name);
14890|      0|                }
14891|      0|                if ((int)*(temp_name + (tmp___3 - 1UL)) == 47) {
14892|      0|                    modes[0] = (char)'d';
14893|      0|                }
14894|      0|                goto switch_break;
14895|      0|case_49: /* CIL Label */
14896|      0|                modes[0] = (char)'h';
14897|      0|                goto switch_break;
14898|      0|case_68: /* CIL Label */
14899|      0|                modes[0] = (char)'d';
14900|      0|                goto switch_break;
14901|      0|case_53: /* CIL Label */
14902|      0|                modes[0] = (char)'d';
14903|      0|                goto switch_break;
14904|      0|case_50: /* CIL Label */
14905|      0|                modes[0] = (char)'l';
14906|      0|                goto switch_break;
14907|      0|case_52: /* CIL Label */
14908|      0|                modes[0] = (char)'b';
14909|      0|                goto switch_break;
14910|      0|case_51: /* CIL Label */
14911|      0|                modes[0] = (char)'c';
14912|      0|                goto switch_break;
14913|      0|case_54: /* CIL Label */
14914|      0|                modes[0] = (char)'p';
14915|      0|                goto switch_break;
14916|      0|case_55: /* CIL Label */
14917|      0|                modes[0] = (char)'C';
14918|      0|                goto switch_break;
14919|      0|switch_break: /* CIL Label */
14920|      0|                ;
14921|      0|            }
14922|      0|            {
14923|      0|                decode_mode(st->stat.st_mode, modes + 1);
14924|      0|                time_stamp = tartime(st->stat.st_mtim.tv_sec);
14925|      0|            }
14926|      0|            if (st->uname) {
14927|      0|                if ((unsigned int)current_format != 1U) {
14928|      0|                    if (!numeric_owner_option) {
14929|      0|                        user = st->uname;
14930|      0|                    }
14931|      0|                    else {
14932|      0|                        goto _L___4;
14933|      0|                    }
14934|      0|                }
14935|      0|                else {
14936|      0|                    goto _L___4;
14937|      0|                }
14938|      0|            }
14939|      0|            else {
14940|      0|_L___4 : { /* CIL Label */
14941|      0|                    tmp___4 =
14942|      0|                        from_header((char const *)(current_header->header.uid),
14943|      0|                                    sizeof(current_header->header.uid), (char const *)0,
14944|      0|                                    (uintmax_t)0, 0xffffffffffffffffUL);
14945|      0|                    u = tmp___4;
14946|      0|                }
14947|      0|                if (u != 0xffffffffffffffffUL) {
14948|      0|                    {
14949|      0|                        user = stringify_uintmax_t_backwards(
14950|      0|                                   u,
14951|      0|                                   uform + ((((sizeof(uintmax_t) * 8UL) * 302UL) / 1000UL + 1UL) +
14952|      0|                                            1UL));
14953|      0|                    }
14954|      0|                }
14955|      0|                else {
14956|      0|                    {
14957|      0|                        tmp___5 =
14958|      0|                            uid_from_header((char const *)(current_header->header.uid),
14959|      0|                                            sizeof(current_header->header.uid));
14960|      0|                        sprintf((char * /* __restrict  */)(uform),
14961|      0|                                (char const * /* __restrict  */) "%ld", (long)tmp___5);
14962|      0|                        user = uform;
14963|      0|                    }
14964|      0|                }
14965|      0|            }
14966|      0|            if (st->gname) {
14967|      0|                if ((unsigned int)current_format != 1U) {
14968|      0|                    if (!numeric_owner_option) {
14969|      0|                        group = st->gname;
14970|      0|                    }
14971|      0|                    else {
14972|      0|                        goto _L___6;
14973|      0|                    }
14974|      0|                }
14975|      0|                else {
14976|      0|                    goto _L___6;
14977|      0|                }
14978|      0|            }
14979|      0|            else {
14980|      0|_L___6 : { /* CIL Label */
14981|      0|                    tmp___6 =
14982|      0|                        from_header((char const *)(current_header->header.gid),
14983|      0|                                    sizeof(current_header->header.gid), (char const *)0,
14984|      0|                                    (uintmax_t)0, 0xffffffffffffffffUL);
14985|      0|                    g = tmp___6;
14986|      0|                }
14987|      0|                if (g != 0xffffffffffffffffUL) {
14988|      0|                    {
14989|      0|                        group = stringify_uintmax_t_backwards(
14990|      0|                                    g,
14991|      0|                                    gform + ((((sizeof(uintmax_t) * 8UL) * 302UL) / 1000UL + 1UL) +
14992|      0|                                             1UL));
14993|      0|                    }
14994|      0|                }
14995|      0|                else {
14996|      0|                    {
14997|      0|                        tmp___7 =
14998|      0|                            gid_from_header((char const *)(current_header->header.gid),
14999|      0|                                            sizeof(current_header->header.gid));
15000|      0|                        sprintf((char * /* __restrict  */)(gform),
15001|      0|                                (char const * /* __restrict  */) "%ld", (long)tmp___7);
15002|      0|                        group = gform;
15003|      0|                    }
15004|      0|                }
15005|      0|            }
15006|      0|            {
15007|      0|                if ((int)current_header->header.typeflag == 51) {
15008|      0|                    goto case_51___0;
15009|      0|                }
15010|      0|                if ((int)current_header->header.typeflag == 52) {
15011|      0|                    goto case_51___0;
15012|      0|                }
15013|      0|                goto switch_default;
15014|      0|case_51___0:  /* CIL Label */
15015|      0|case_52___0 : { /* CIL Label */
15016|      0|                    tmp___8 = gnu_dev_major((unsigned long long)st->stat.st_rdev);
15017|      0|                    tmp___9 = stringify_uintmax_t_backwards(
15018|      0|                                  (uintmax_t)tmp___8,
15019|      0|                                  uintbuf +
15020|      0|                                  ((((sizeof(uintmax_t) * 8UL) * 302UL) / 1000UL + 1UL) + 1UL));
15021|      0|                    strcpy((char * /* __restrict  */)(size),
15022|      0|                           (char const * /* __restrict  */)tmp___9);
15023|      0|                    strcat((char * /* __restrict  */)(size),
15024|      0|                           (char const * /* __restrict  */) ",");
15025|      0|                    tmp___10 = gnu_dev_minor((unsigned long long)st->stat.st_rdev);
15026|      0|                    tmp___11 = stringify_uintmax_t_backwards(
15027|      0|                                   (uintmax_t)tmp___10,
15028|      0|                                   uintbuf +
15029|      0|                                   ((((sizeof(uintmax_t) * 8UL) * 302UL) / 1000UL + 1UL) + 1UL));
15030|      0|                    strcat((char * /* __restrict  */)(size),
15031|      0|                           (char const * /* __restrict  */)tmp___11);
15032|      0|                }
15033|      0|                goto switch_break___0;
15034|      0|switch_default : { /* CIL Label */
15035|      0|                    tmp___12 = stringify_uintmax_t_backwards(
15036|      0|                                   (uintmax_t)st->stat.st_size,
15037|      0|                                   uintbuf +
15038|      0|                                   ((((sizeof(uintmax_t) * 8UL) * 302UL) / 1000UL + 1UL) + 1UL));
15039|      0|                    strcpy((char * /* __restrict  */)(size),
15040|      0|                           (char const * /* __restrict  */)tmp___12);
15041|      0|                }
15042|      0|                goto switch_break___0;
15043|      0|switch_break___0: /* CIL Label */
15044|      0|                ;
15045|      0|            }
15046|      0|            {
15047|      0|                tmp___13 = strlen((char const *)user);
15048|      0|                tmp___14 = strlen((char const *)group);
15049|      0|                tmp___15 = strlen((char const *)(size));
15050|      0|                pad = (int)(((tmp___13 + tmp___14) + tmp___15) + 1UL);
15051|      0|            }
15052|      0|            if (pad > ugswidth) {
15053|      0|                ugswidth = pad;
15054|      0|            }
15055|      0|            {
15056|      0|                fprintf((FILE * /* __restrict  */) stdlis,
15057|      0|                        (char const * /* __restrict  */) "%s %s/%s %*s%s %s", modes,
15058|      0|                        user, group, ugswidth - pad, "", size, time_stamp);
15059|      0|                tmp___16 = quotearg((char const *)temp_name);
15060|      0|                fprintf((FILE * /* __restrict  */) stdlis,
15061|      0|                        (char const * /* __restrict  */) " %s", tmp___16);
15062|      0|            }
15063|      0|            {
15064|      0|                if ((int)current_header->header.typeflag == 50) {
15065|      0|                    goto case_50___0;
15066|      0|                }
15067|      0|                if ((int)current_header->header.typeflag == 49) {
15068|      0|                    goto case_49___0;
15069|      0|                }
15070|      0|                if ((int)current_header->header.typeflag == 0) {
15071|      0|                    goto case_0___0;
15072|      0|                }
15073|      0|                if ((int)current_header->header.typeflag == 48) {
15074|      0|                    goto case_0___0;
15075|      0|                }
15076|      0|                if ((int)current_header->header.typeflag == 83) {
15077|      0|                    goto case_0___0;
15078|      0|                }
15079|      0|                if ((int)current_header->header.typeflag == 51) {
15080|      0|                    goto case_0___0;
15081|      0|                }
15082|      0|                if ((int)current_header->header.typeflag == 52) {
15083|      0|                    goto case_0___0;
15084|      0|                }
15085|      0|                if ((int)current_header->header.typeflag == 53) {
15086|      0|                    goto case_0___0;
15087|      0|                }
15088|      0|                if ((int)current_header->header.typeflag == 54) {
15089|      0|                    goto case_0___0;
15090|      0|                }
15091|      0|                if ((int)current_header->header.typeflag == 55) {
15092|      0|                    goto case_0___0;
15093|      0|                }
15094|      0|                if ((int)current_header->header.typeflag == 68) {
15095|      0|                    goto case_0___0;
15096|      0|                }
15097|      0|                if ((int)current_header->header.typeflag == 75) {
15098|      0|                    goto case_75___0;
15099|      0|                }
15100|      0|                if ((int)current_header->header.typeflag == 76) {
15101|      0|                    goto case_76___0;
15102|      0|                }
15103|      0|                if ((int)current_header->header.typeflag == 86) {
15104|      0|                    goto case_86___0;
15105|      0|                }
15106|      0|                if ((int)current_header->header.typeflag == 77) {
15107|      0|                    goto case_77___0;
15108|      0|                }
15109|      0|                if ((int)current_header->header.typeflag == 78) {
15110|      0|                    goto case_78___0;
15111|      0|                }
15112|      0|                goto switch_default___0;
15113|      0|case_50___0 : { /* CIL Label */
15114|      0|                    tmp___17 = quotearg((char const *)st->link_name);
15115|      0|                    fprintf((FILE * /* __restrict  */) stdlis,
15116|      0|                            (char const * /* __restrict  */) " -> %s\n", tmp___17);
15117|      0|                }
15118|      0|                goto switch_break___1;
15119|      0|case_49___0 : { /* CIL Label */
15120|      0|                    tmp___18 = quotearg((char const *)st->link_name);
15121|      0|                    tmp___19 = gettext(" link to %s\n");
15122|      0|                    fprintf((FILE * /* __restrict  */) stdlis,
15123|      0|                            (char const * /* __restrict  */)tmp___19, tmp___18);
15124|      0|                }
15125|      0|                goto switch_break___1;
15126|      0|switch_default___0 : { /* CIL Label */
15127|      0|                    type_string[0] = current_header->header.typeflag;
15128|      0|                    type_string[1] = (char)'\000';
15129|      0|                    tmp___20 = quote((char const *)(type_string));
15130|      0|                    tmp___21 = gettext(" unknown file type %s\n");
15131|      0|                    fprintf((FILE * /* __restrict  */) stdlis,
15132|      0|                            (char const * /* __restrict  */)tmp___21, tmp___20);
15133|      0|                }
15134|      0|                goto switch_break___1;
15135|      0|case_0___0:   /* CIL Label */
15136|      0|case_48___0:  /* CIL Label */
15137|      0|case_83___0:  /* CIL Label */
15138|      0|case_51___1:  /* CIL Label */
15139|      0|case_52___1:  /* CIL Label */
15140|      0|case_53___0:  /* CIL Label */
15141|      0|case_54___0:  /* CIL Label */
15142|      0|case_55___0:  /* CIL Label */
15143|      0|case_68___0 : { /* CIL Label */
15144|      0|                    putc_unlocked('\n', stdlis);
15145|      0|                }
15146|      0|                goto switch_break___1;
15147|      0|case_75___0 : { /* CIL Label */
15148|      0|                    tmp___22 = gettext("--Long Link--\n");
15149|      0|                    fprintf((FILE * /* __restrict  */) stdlis,
15150|      0|                            (char const * /* __restrict  */)tmp___22);
15151|      0|                }
15152|      0|                goto switch_break___1;
15153|      0|case_76___0 : { /* CIL Label */
15154|      0|                    tmp___23 = gettext("--Long Name--\n");
15155|      0|                    fprintf((FILE * /* __restrict  */) stdlis,
15156|      0|                            (char const * /* __restrict  */)tmp___23);
15157|      0|                }
15158|      0|                goto switch_break___1;
15159|      0|case_86___0 : { /* CIL Label */
15160|      0|                    tmp___24 = gettext("--Volume Header--\n");
15161|      0|                    fprintf((FILE * /* __restrict  */) stdlis,
15162|      0|                            (char const * /* __restrict  */)tmp___24);
15163|      0|                }
15164|      0|                goto switch_break___1;
15165|      0|case_77___0 : { /* CIL Label */
15166|      0|                    tmp___25 = uintmax_from_header(
15167|      0|                                   (char const *)(current_header->oldgnu_header.offset),
15168|      0|                                   sizeof(current_header->oldgnu_header.offset));
15169|      0|                    tmp___26 = stringify_uintmax_t_backwards(
15170|      0|                                   tmp___25,
15171|      0|                                   uintbuf +
15172|      0|                                   ((((sizeof(uintmax_t) * 8UL) * 302UL) / 1000UL + 1UL) + 1UL));
15173|      0|                    strcpy((char * /* __restrict  */)(size),
15174|      0|                           (char const * /* __restrict  */)tmp___26);
15175|      0|                    tmp___27 = gettext("--Continued at byte %s--\n");
15176|      0|                    fprintf((FILE * /* __restrict  */) stdlis,
15177|      0|                            (char const * /* __restrict  */)tmp___27, size);
15178|      0|                }
15179|      0|                goto switch_break___1;
15180|      0|case_78___0 : { /* CIL Label */
15181|      0|                    tmp___28 = gettext("--Mangled file names--\n");
15182|      0|                    fprintf((FILE * /* __restrict  */) stdlis,
15183|      0|                            (char const * /* __restrict  */)tmp___28);
15184|      0|                }
15185|      0|                goto switch_break___1;
15186|      0|switch_break___1: /* CIL Label */
15187|      0|                ;
15188|      0|            }
15189|      0|        }
15190|      0|        {
15191|      0|            fflush_unlocked(stdlis);
15192|      0|        }
15193|      0|        return;
15194|      0|    }
15195|      0|}
15196|       |void print_for_mkdir(char *pathname, int length, mode_t mode)
15197|      0|{
15198|      0|    char modes[11];
15199|      0|    char buf[(((sizeof(uintmax_t) * 8UL) * 302UL) / 1000UL + 1UL) + 1UL];
15200|      0|    off_t tmp;
15201|      0|    char *tmp___0;
15202|      0|    char *tmp___1;
15203|      0|    char *tmp___2;
15204|      0|    char *tmp___3;
15205|      0|    void *__cil_tmp11;
15206|      0|    void *__cil_tmp12;
15207|      0|    char *__cil_tmp13;
15208|      0|    char *__cil_tmp14;
15209|       |
15210|      0|    {
15211|      0|        if (verbose_option > 1) {
15212|      0|            {
15213|      0|                modes[0] = (char)'d';
15214|      0|                decode_mode(mode, modes + 1);
15215|      0|            }
15216|      0|            if (block_number_option) {
15217|      0|                {
15218|      0|                    tmp = current_block_ordinal();
15219|      0|                    tmp___0 = stringify_uintmax_t_backwards(
15220|      0|                                  (uintmax_t)tmp,
15221|      0|                                  buf +
15222|      0|                                  ((((sizeof(uintmax_t) * 8UL) * 302UL) / 1000UL + 1UL) + 1UL));
15223|      0|                    tmp___1 = gettext("block %s: ");
15224|      0|                    fprintf((FILE * /* __restrict  */) stdlis,
15225|      0|                            (char const * /* __restrict  */)tmp___1, tmp___0);
15226|      0|                }
15227|      0|            }
15228|      0|            {
15229|      0|                tmp___2 = quotearg((char const *)pathname);
15230|      0|                tmp___3 = gettext("Creating directory:");
15231|      0|                fprintf((FILE * /* __restrict  */) stdlis,
15232|      0|                        (char const * /* __restrict  */) "%s %*s %.*s\n", modes,
15233|      0|                        ugswidth + 18, tmp___3, length, tmp___2);
15234|      0|            }
15235|      0|        }
15236|      0|        return;
15237|      0|    }
15238|      0|}
15239|       |void skip_file(off_t size)
15240|      0|{
15241|      0|    union block *x;
15242|      0|    char *tmp;
15243|      0|    char *__cil_tmp4;
15244|       |
15245|      0|    {
15246|      0|        if (multi_volume_option) {
15247|      0|            save_totsize = size;
15248|      0|            save_sizeleft = size;
15249|      0|        }
15250|      0|        {
15251|      0|            while (1) {
15252|      0|while_continue: /* CIL Label */
15253|      0|                ;
15254|      0|                if (!(size > 0L)) {
15255|      0|                    goto while_break;
15256|      0|                }
15257|      0|                {
15258|      0|                    x = find_next_block();
15259|      0|                }
15260|      0|                if (!x) {
15261|      0|                    {
15262|      0|                        tmp = gettext("Unexpected EOF in archive");
15263|      0|                        error(0, 0, (char const *)tmp);
15264|      0|                        fatal_exit();
15265|      0|                    }
15266|      0|                }
15267|      0|                {
15268|      0|                    set_next_block_after(x);
15269|      0|                    size -= 512L;
15270|      0|                }
15271|      0|                if (multi_volume_option) {
15272|      0|                    save_sizeleft -= 512L;
15273|      0|                }
15274|      0|            }
15275|      0|while_break: /* CIL Label */
15276|      0|            ;
15277|      0|        }
15278|      0|        return;
15279|      0|    }
15280|      0|}
15281|       |void skip_member(void)
15282|      0|{
15283|      0|    char save_typeflag;
15284|      0|    _Bool tmp;
15285|       |
15286|      0|    {
15287|      0|        {
15288|      0|            save_typeflag = current_header->header.typeflag;
15289|      0|            set_next_block_after(current_header);
15290|      0|            assign_string(&save_name, (char const *)current_stat_info.file_name);
15291|      0|            tmp = sparse_member_p(&current_stat_info);
15292|      0|        }
15293|      0|        if (tmp) {
15294|      0|            {
15295|      0|                sparse_skip_file(&current_stat_info);
15296|      0|            }
15297|      0|        }
15298|      0|        else {
15299|      0|            if ((int)save_typeflag != 53) {
15300|      0|                {
15301|      0|                    skip_file(current_stat_info.stat.st_size);
15302|      0|                }
15303|      0|            }
15304|      0|        }
15305|      0|        return;
15306|      0|    }
15307|      0|}
15308|       |/* #pragma merger("0","008.mangle.o.i","") */
15309|       |extern __attribute__((__nothrow__)) int(__attribute__((__leaf__))
15310|       |                                        rename)(char const *__old,
15311|       |                                                char const *__new);
15312|       |void extract_mangle(void)
15313|      0|{
15314|      0|    off_t size;
15315|      0|    char *buffer___2;
15316|      0|    void *tmp;
15317|      0|    char *copy;
15318|      0|    char *cursor;
15319|      0|    union block *block;
15320|      0|    union block *tmp___0;
15321|      0|    size_t available;
15322|      0|    char *tmp___1;
15323|      0|    char *next_cursor;
15324|      0|    char *name;
15325|      0|    char *name_end;
15326|      0|    char *tmp___2;
15327|      0|    int tmp___3;
15328|      0|    char const *tmp___4;
15329|      0|    char *tmp___5;
15330|      0|    char *tmp___6;
15331|      0|    int *tmp___7;
15332|      0|    char *tmp___8;
15333|      0|    int tmp___9;
15334|      0|    int tmp___10;
15335|      0|    char const *tmp___11;
15336|      0|    char *tmp___12;
15337|      0|    char *tmp___13;
15338|      0|    int *tmp___14;
15339|      0|    char *tmp___15;
15340|      0|    int tmp___16;
15341|      0|    int tmp___17;
15342|      0|    int tmp___18;
15343|      0|    char *tmp___19;
15344|      0|    int tmp___20;
15345|      0|    int tmp___21;
15346|      0|    char *__cil_tmp33;
15347|      0|    char *__cil_tmp34;
15348|      0|    char *__cil_tmp35;
15349|      0|    char *__cil_tmp36;
15350|      0|    char *__cil_tmp37;
15351|      0|    char *__cil_tmp38;
15352|       |
15353|      0|    {
15354|      0|        {
15355|      0|            size = current_stat_info.stat.st_size;
15356|      0|            tmp = xmalloc((size_t)(size + 1L));
15357|      0|            buffer___2 = (char *)tmp;
15358|      0|            copy = buffer___2;
15359|      0|            cursor = buffer___2;
15360|      0|        }
15361|      0|        if ((size_t)size != (size_t)size) {
15362|      0|            {
15363|      0|                xalloc_die();
15364|      0|            }
15365|      0|        }
15366|      0|        else {
15367|      0|            if ((size_t)size == 0xffffffffffffffffUL) {
15368|      0|                {
15369|      0|                    xalloc_die();
15370|      0|                }
15371|      0|            }
15372|      0|        }
15373|      0|        *(buffer___2 + size) = (char)'\000';
15374|      0|        {
15375|      0|            while (1) {
15376|      0|while_continue: /* CIL Label */
15377|      0|                ;
15378|      0|                if (!(size > 0L)) {
15379|      0|                    goto while_break;
15380|      0|                }
15381|      0|                {
15382|      0|                    tmp___0 = find_next_block();
15383|      0|                    block = tmp___0;
15384|      0|                }
15385|      0|                if (!block) {
15386|      0|                    {
15387|      0|                        tmp___1 = gettext("Unexpected EOF in mangled names");
15388|      0|                        error(0, 0, (char const *)tmp___1);
15389|      0|                        exit_status = 2;
15390|      0|                    }
15391|      0|                    return;
15392|      0|                }
15393|      0|                {
15394|      0|                    available = available_space_after(block);
15395|      0|                }
15396|      0|                if (available > (size_t)size) {
15397|      0|                    available = (size_t)size;
15398|      0|                }
15399|      0|                {
15400|      0|                    memcpy((void * /* __restrict  */)copy,
15401|      0|                           (void const * /* __restrict  */)(block->buffer), available);
15402|      0|                    copy += available;
15403|      0|                    size = (off_t)((size_t)size - available);
15404|      0|                    set_next_block_after(
15405|      0|                        (union block *)((block->buffer + available) - 1));
15406|      0|                }
15407|      0|            }
15408|      0|while_break: /* CIL Label */
15409|      0|            ;
15410|      0|        }
15411|      0|        {
15412|      0|            while (1) {
15413|      0|while_continue___0: /* CIL Label */
15414|      0|                ;
15415|      0|                if (!*cursor) {
15416|      0|                    goto while_break___0;
15417|      0|                }
15418|      0|                {
15419|      0|                    next_cursor = strchr((char const *)cursor, '\n');
15420|      0|                    tmp___2 = next_cursor;
15421|      0|                    next_cursor++;
15422|      0|                    *tmp___2 = (char)'\000';
15423|      0|                    tmp___21 = strncmp((char const *)cursor, "Rename ", (size_t)7);
15424|      0|                }
15425|      0|                if (tmp___21) {
15426|      0|                    {
15427|      0|                        tmp___20 = strncmp((char const *)cursor, "Symlink ", (size_t)8);
15428|      0|                    }
15429|      0|                    if (tmp___20) {
15430|      0|                        {
15431|      0|                            tmp___19 = gettext("Unknown demangling command %s");
15432|      0|                            error(0, 0, (char const *)tmp___19, cursor);
15433|      0|                            exit_status = 2;
15434|      0|                        }
15435|      0|                    }
15436|      0|                    else {
15437|      0|                        {
15438|      0|                            name = cursor + 8;
15439|      0|                            name_end = strchr((char const *)name, ' ');
15440|      0|                        }
15441|      0|                        {
15442|      0|                            while (1) {
15443|      0|while_continue___1: /* CIL Label */
15444|      0|                                ;
15445|      0|                                {
15446|      0|                                    tmp___10 = strncmp((char const *)name_end, " to ", (size_t)4);
15447|      0|                                }
15448|      0|                                if (!tmp___10) {
15449|      0|                                    goto while_break___1;
15450|      0|                                }
15451|      0|                                {
15452|      0|                                    name_end++;
15453|      0|                                    name_end = strchr((char const *)name_end, ' ');
15454|      0|                                }
15455|      0|                            }
15456|      0|while_break___1: /* CIL Label */
15457|      0|                            ;
15458|      0|                        }
15459|      0|                        {
15460|      0|                            *name_end = (char)'\000';
15461|      0|                            unquote_string(name);
15462|      0|                            unquote_string(name_end + 4);
15463|      0|                            tmp___16 =
15464|      0|                                symlink((char const *)name, (char const *)(name_end + 4));
15465|      0|                        }
15466|      0|                        if (tmp___16) {
15467|      0|                            {
15468|      0|                                tmp___17 = unlink((char const *)(name_end + 4));
15469|      0|                            }
15470|      0|                            if (tmp___17) {
15471|      0|                                goto _L___0;
15472|      0|                            }
15473|      0|                            else {
15474|      0|                                {
15475|      0|                                    tmp___18 =
15476|      0|                                        symlink((char const *)name, (char const *)(name_end + 4));
15477|      0|                                }
15478|      0|                                if (tmp___18) {
15479|      0|_L___0 : {
15480|      0|                                        tmp___11 = quote_n(1, (char const *)(name_end + 4));
15481|      0|                                        tmp___12 = quotearg_colon((char const *)name);
15482|      0|                                        tmp___13 = gettext("%s: Cannot symlink to %s");
15483|      0|                                        tmp___14 = __errno_location();
15484|      0|                                        error(0, *tmp___14, (char const *)tmp___13, tmp___12,
15485|      0|                                              tmp___11);
15486|      0|                                        exit_status = 2;
15487|      0|                                    }
15488|      0|                                }
15489|      0|                                else {
15490|      0|                                    goto _L;
15491|      0|                                }
15492|      0|                            }
15493|      0|                        }
15494|      0|                        else {
15495|      0|_L:
15496|      0|                            if (verbose_option) {
15497|      0|                                {
15498|      0|                                    tmp___15 = gettext("Symlinked %s to %s");
15499|      0|                                    error(0, 0, (char const *)tmp___15, name, name_end + 4);
15500|      0|                                }
15501|      0|                            }
15502|      0|                        }
15503|      0|                    }
15504|      0|                }
15505|      0|                else {
15506|      0|                    {
15507|      0|                        name = cursor + 7;
15508|      0|                        name_end = strchr((char const *)name, ' ');
15509|      0|                    }
15510|      0|                    {
15511|      0|                        while (1) {
15512|      0|while_continue___2: /* CIL Label */
15513|      0|                            ;
15514|      0|                            {
15515|      0|                                tmp___3 = strncmp((char const *)name_end, " to ", (size_t)4);
15516|      0|                            }
15517|      0|                            if (!tmp___3) {
15518|      0|                                goto while_break___2;
15519|      0|                            }
15520|      0|                            {
15521|      0|                                name_end++;
15522|      0|                                name_end = strchr((char const *)name_end, ' ');
15523|      0|                            }
15524|      0|                        }
15525|      0|while_break___2: /* CIL Label */
15526|      0|                        ;
15527|      0|                    }
15528|      0|                    *name_end = (char)'\000';
15529|      0|                    if ((int)*(next_cursor + -2) == 47) {
15530|      0|                        *(next_cursor + -2) = (char)'\000';
15531|      0|                    }
15532|      0|                    {
15533|      0|                        unquote_string(name_end + 4);
15534|      0|                        tmp___9 = rename((char const *)name, (char const *)(name_end + 4));
15535|      0|                    }
15536|      0|                    if (tmp___9) {
15537|      0|                        {
15538|      0|                            tmp___4 = quote_n(1, (char const *)(name_end + 4));
15539|      0|                            tmp___5 = quotearg_colon((char const *)name);
15540|      0|                            tmp___6 = gettext("%s: Cannot rename to %s");
15541|      0|                            tmp___7 = __errno_location();
15542|      0|                            error(0, *tmp___7, (char const *)tmp___6, tmp___5, tmp___4);
15543|      0|                            exit_status = 2;
15544|      0|                        }
15545|      0|                    }
15546|      0|                    else {
15547|      0|                        if (verbose_option) {
15548|      0|                            {
15549|      0|                                tmp___8 = gettext("Renamed %s to %s");
15550|      0|                                error(0, 0, (char const *)tmp___8, name, name_end + 4);
15551|      0|                            }
15552|      0|                        }
15553|      0|                    }
15554|      0|                }
15555|      0|                cursor = next_cursor;
15556|      0|            }
15557|      0|while_break___0: /* CIL Label */
15558|      0|            ;
15559|      0|        }
15560|      0|        return;
15561|      0|    }
15562|      0|}
15563|       |/* #pragma merger("0","009.misc.o.i","") */
15564|       |extern __attribute__((__nothrow__)) int(__attribute__((__leaf__))
15565|       |                                        pipe)(int *__pipedes);
15566|       |extern
15567|       |__attribute__((__nothrow__)) int(__attribute__((__nonnull__(1), __leaf__))
15568|       |                                 chdir)(char const *__path);
15569|       |extern __attribute__((__nothrow__)) __pid_t fork(void);
15570|       |extern
15571|       |__attribute__((__nothrow__)) int(__attribute__((__nonnull__(1), __leaf__))
15572|       |                                 rmdir)(char const *__path);
15573|       |char *find_backup_file_name(char const *file, enum backup_type backup_type___0);
15574|       |enum backup_type backup_type;
15575|       |int chdir_arg(char const *dir);
15576|       |void chdir_do(int i);
15577|       |__attribute__((__noreturn__)) void chdir_fatal(char const *name);
15578|       |__attribute__((__noreturn__)) void exec_fatal(char const *name);
15579|       |void read_error_details(char const *name, off_t offset, size_t size);
15580|       |__attribute__((__noreturn__)) void read_fatal(char const *name);
15581|       |__attribute__((__noreturn__)) void
15582|       |read_fatal_details(char const *name, off_t offset, size_t size);
15583|       |void read_warn_details(char const *name, off_t offset, size_t size);
15584|       |void savedir_warn(char const *name);
15585|       |void seek_warn_details(char const *name, off_t offset);
15586|       |void seek_diag_details(char const *name, off_t offset);
15587|       |void waitpid_error(char const *name);
15588|       |pid_t xfork(void);
15589|       |void xpipe(int *fd);
15590|       |char *quotearg_n_style(int n, enum quoting_style s, char const *arg);
15591|       |int save_cwd(struct saved_cwd *cwd);
15592|       |int restore_cwd(struct saved_cwd const *cwd);
15593|       |static __attribute__((__noreturn__)) void call_arg_fatal(char const *call,
15594|       |        char const *name);
15595|       |void assign_string(char **string, char const *value)
15596|      0|{
15597|      0|    char *tmp;
15598|       |
15599|      0|    {
15600|      0|        if (*string) {
15601|      0|            {
15602|      0|                free((void *)*string);
15603|      0|            }
15604|      0|        }
15605|      0|        if (value) {
15606|      0|            {
15607|      0|                tmp = xstrdup(value);
15608|      0|                *string = tmp;
15609|      0|            }
15610|      0|        }
15611|      0|        else {
15612|      0|            *string = (char *)0;
15613|      0|        }
15614|      0|        return;
15615|      0|    }
15616|      0|}
15617|       |char *quote_copy_string(char const *string)
15618|      0|{
15619|      0|    char const *source;
15620|      0|    char *destination;
15621|      0|    char *buffer___2;
15622|      0|    int copying;
15623|      0|    int character;
15624|      0|    char const *tmp;
15625|      0|    size_t length;
15626|      0|    size_t tmp___0;
15627|      0|    void *tmp___1;
15628|      0|    char *tmp___2;
15629|      0|    char *tmp___3;
15630|      0|    char *tmp___4;
15631|      0|    int tmp___5;
15632|       |
15633|      0|    {
15634|      0|        source = string;
15635|      0|        destination = (char *)0;
15636|      0|        buffer___2 = (char *)0;
15637|      0|        copying = 0;
15638|      0|        {
15639|      0|            while (1) {
15640|      0|while_continue: /* CIL Label */
15641|      0|                ;
15642|      0|                if (!*source) {
15643|      0|                    goto while_break;
15644|      0|                }
15645|      0|                tmp = source;
15646|      0|                source++;
15647|      0|                character = (int)*tmp;
15648|      0|                {
15649|      0|                    if (character == 10) {
15650|      0|                        goto case_10;
15651|      0|                    }
15652|      0|                    if (character == 92) {
15653|      0|                        goto case_10;
15654|      0|                    }
15655|      0|                    goto switch_default;
15656|      0|case_10: /* CIL Label */
15657|      0|case_92: /* CIL Label */
15658|      0|                    if (!copying) {
15659|      0|                        {
15660|      0|                            length = (size_t)((source - string) - 1L);
15661|      0|                            copying = 1;
15662|      0|                            tmp___0 = strlen(source);
15663|      0|                            tmp___1 = xmalloc(((length + 2UL) + 2UL * tmp___0) + 1UL);
15664|      0|                            buffer___2 = (char *)tmp___1;
15665|      0|                            memcpy((void * /* __restrict  */)buffer___2,
15666|      0|                                   (void const * /* __restrict  */)string, length);
15667|      0|                            destination = buffer___2 + length;
15668|      0|                        }
15669|      0|                    }
15670|      0|                    tmp___2 = destination;
15671|      0|                    destination++;
15672|      0|                    *tmp___2 = (char)'\\';
15673|      0|                    tmp___3 = destination;
15674|      0|                    destination++;
15675|      0|                    if (character == 92) {
15676|      0|                        tmp___5 = '\\';
15677|      0|                    }
15678|      0|                    else {
15679|      0|                        tmp___5 = 'n';
15680|      0|                    }
15681|      0|                    *tmp___3 = (char)tmp___5;
15682|      0|                    goto switch_break;
15683|      0|switch_default: /* CIL Label */
15684|      0|                    if (copying) {
15685|      0|                        tmp___4 = destination;
15686|      0|                        destination++;
15687|      0|                        *tmp___4 = (char)character;
15688|      0|                    }
15689|      0|                    goto switch_break;
15690|      0|switch_break: /* CIL Label */
15691|      0|                    ;
15692|      0|                }
15693|      0|            }
15694|      0|while_break: /* CIL Label */
15695|      0|            ;
15696|      0|        }
15697|      0|        if (copying) {
15698|      0|            *destination = (char)'\000';
15699|      0|            return (buffer___2);
15700|      0|        }
15701|      0|        return ((char *)0);
15702|      0|    }
15703|      0|}
15704|       |int unquote_string(char *string)
15705|      0|{
15706|      0|    int result;
15707|      0|    char *source;
15708|      0|    char *destination;
15709|      0|    char *tmp;
15710|      0|    char *tmp___0;
15711|      0|    char *tmp___1;
15712|      0|    char *tmp___2;
15713|      0|    char *tmp___3;
15714|      0|    char *tmp___4;
15715|      0|    char *tmp___5;
15716|      0|    int value;
15717|      0|    char *tmp___6;
15718|      0|    char *tmp___7;
15719|      0|    char *tmp___8;
15720|      0|    char *tmp___9;
15721|      0|    char *tmp___10;
15722|      0|    char *tmp___11;
15723|      0|    char *tmp___12;
15724|      0|    char *tmp___13;
15725|      0|    char *tmp___14;
15726|      0|    char *tmp___15;
15727|      0|    char *tmp___16;
15728|       |
15729|      0|    {
15730|      0|        result = 1;
15731|      0|        source = string;
15732|      0|        destination = string;
15733|      0|        {
15734|      0|            while (1) {
15735|      0|while_continue: /* CIL Label */
15736|      0|                ;
15737|      0|                if (!*source) {
15738|      0|                    goto while_break;
15739|      0|                }
15740|      0|                if ((int)*source == 92) {
15741|      0|                    source++;
15742|      0|                    {
15743|      0|                        if ((int)*source == 92) {
15744|      0|                            goto case_92;
15745|      0|                        }
15746|      0|                        if ((int)*source == 110) {
15747|      0|                            goto case_110;
15748|      0|                        }
15749|      0|                        if ((int)*source == 116) {
15750|      0|                            goto case_116;
15751|      0|                        }
15752|      0|                        if ((int)*source == 102) {
15753|      0|                            goto case_102;
15754|      0|                        }
15755|      0|                        if ((int)*source == 98) {
15756|      0|                            goto case_98;
15757|      0|                        }
15758|      0|                        if ((int)*source == 114) {
15759|      0|                            goto case_114;
15760|      0|                        }
15761|      0|                        if ((int)*source == 63) {
15762|      0|                            goto case_63;
15763|      0|                        }
15764|      0|                        if ((int)*source == 48) {
15765|      0|                            goto case_48;
15766|      0|                        }
15767|      0|                        if ((int)*source == 49) {
15768|      0|                            goto case_48;
15769|      0|                        }
15770|      0|                        if ((int)*source == 50) {
15771|      0|                            goto case_48;
15772|      0|                        }
15773|      0|                        if ((int)*source == 51) {
15774|      0|                            goto case_48;
15775|      0|                        }
15776|      0|                        if ((int)*source == 52) {
15777|      0|                            goto case_48;
15778|      0|                        }
15779|      0|                        if ((int)*source == 53) {
15780|      0|                            goto case_48;
15781|      0|                        }
15782|      0|                        if ((int)*source == 54) {
15783|      0|                            goto case_48;
15784|      0|                        }
15785|      0|                        if ((int)*source == 55) {
15786|      0|                            goto case_48;
15787|      0|                        }
15788|      0|                        goto switch_default;
15789|      0|case_92: /* CIL Label */
15790|      0|                        tmp = destination;
15791|      0|                        destination++;
15792|      0|                        *tmp = (char)'\\';
15793|      0|                        source++;
15794|      0|                        goto switch_break;
15795|      0|case_110: /* CIL Label */
15796|      0|                        tmp___0 = destination;
15797|      0|                        destination++;
15798|      0|                        *tmp___0 = (char)'\n';
15799|      0|                        source++;
15800|      0|                        goto switch_break;
15801|      0|case_116: /* CIL Label */
15802|      0|                        tmp___1 = destination;
15803|      0|                        destination++;
15804|      0|                        *tmp___1 = (char)'\t';
15805|      0|                        source++;
15806|      0|                        goto switch_break;
15807|      0|case_102: /* CIL Label */
15808|      0|                        tmp___2 = destination;
15809|      0|                        destination++;
15810|      0|                        *tmp___2 = (char)'\f';
15811|      0|                        source++;
15812|      0|                        goto switch_break;
15813|      0|case_98: /* CIL Label */
15814|      0|                        tmp___3 = destination;
15815|      0|                        destination++;
15816|      0|                        *tmp___3 = (char)'\b';
15817|      0|                        source++;
15818|      0|                        goto switch_break;
15819|      0|case_114: /* CIL Label */
15820|      0|                        tmp___4 = destination;
15821|      0|                        destination++;
15822|      0|                        *tmp___4 = (char)'\r';
15823|      0|                        source++;
15824|      0|                        goto switch_break;
15825|      0|case_63: /* CIL Label */
15826|      0|                        tmp___5 = destination;
15827|      0|                        destination++;
15828|      0|                        *tmp___5 = (char)127;
15829|      0|                        source++;
15830|      0|                        goto switch_break;
15831|      0|case_48: /* CIL Label */
15832|      0|case_49: /* CIL Label */
15833|      0|case_50: /* CIL Label */
15834|      0|case_51: /* CIL Label */
15835|      0|case_52: /* CIL Label */
15836|      0|case_53: /* CIL Label */
15837|      0|case_54: /* CIL Label */
15838|      0|case_55: /* CIL Label */
15839|      0|                        tmp___6 = source;
15840|      0|                        source++;
15841|      0|                        value = (int)*tmp___6 - 48;
15842|      0|                        if ((int)*source < 48) {
15843|      0|                            tmp___7 = destination;
15844|      0|                            destination++;
15845|      0|                            *tmp___7 = (char)value;
15846|      0|                            goto switch_break;
15847|      0|                        }
15848|      0|                        else {
15849|      0|                            if ((int)*source > 55) {
15850|      0|                                tmp___7 = destination;
15851|      0|                                destination++;
15852|      0|                                *tmp___7 = (char)value;
15853|      0|                                goto switch_break;
15854|      0|                            }
15855|      0|                        }
15856|      0|                        tmp___8 = source;
15857|      0|                        source++;
15858|      0|                        value = (value * 8 + (int)*tmp___8) - 48;
15859|      0|                        if ((int)*source < 48) {
15860|      0|                            tmp___9 = destination;
15861|      0|                            destination++;
15862|      0|                            *tmp___9 = (char)value;
15863|      0|                            goto switch_break;
15864|      0|                        }
15865|      0|                        else {
15866|      0|                            if ((int)*source > 55) {
15867|      0|                                tmp___9 = destination;
15868|      0|                                destination++;
15869|      0|                                *tmp___9 = (char)value;
15870|      0|                                goto switch_break;
15871|      0|                            }
15872|      0|                        }
15873|      0|                        tmp___10 = source;
15874|      0|                        source++;
15875|      0|                        value = (value * 8 + (int)*tmp___10) - 48;
15876|      0|                        tmp___11 = destination;
15877|      0|                        destination++;
15878|      0|                        *tmp___11 = (char)value;
15879|      0|                        goto switch_break;
15880|      0|switch_default: /* CIL Label */
15881|      0|                        result = 0;
15882|      0|                        tmp___12 = destination;
15883|      0|                        destination++;
15884|      0|                        *tmp___12 = (char)'\\';
15885|      0|                        if (*source) {
15886|      0|                            tmp___13 = destination;
15887|      0|                            destination++;
15888|      0|                            tmp___14 = source;
15889|      0|                            source++;
15890|      0|                            *tmp___13 = *tmp___14;
15891|      0|                        }
15892|      0|                        goto switch_break;
15893|      0|switch_break: /* CIL Label */
15894|      0|                        ;
15895|      0|                    }
15896|      0|                }
15897|      0|                else {
15898|      0|                    if ((unsigned long)source != (unsigned long)destination) {
15899|      0|                        tmp___15 = destination;
15900|      0|                        destination++;
15901|      0|                        tmp___16 = source;
15902|      0|                        source++;
15903|      0|                        *tmp___15 = *tmp___16;
15904|      0|                    }
15905|      0|                    else {
15906|      0|                        source++;
15907|      0|                        destination++;
15908|      0|                    }
15909|      0|                }
15910|      0|            }
15911|      0|while_break: /* CIL Label */
15912|      0|            ;
15913|      0|        }
15914|      0|        if ((unsigned long)source != (unsigned long)destination) {
15915|      0|            *destination = (char)'\000';
15916|      0|        }
15917|      0|        return (result);
15918|      0|    }
15919|      0|}
15920|       |static char *before_backup_name;
15921|       |static char *after_backup_name;
15922|       |static _Bool must_be_dot_or_slash(char const *path)
15923|      0|{
15924|      0|    int tmp;
15925|       |
15926|      0|    {
15927|      0|        path += 0;
15928|      0|        if ((int const) * (path + 0) == 47) {
15929|      0|            {
15930|      0|                while (1) {
15931|      0|while_continue: /* CIL Label */
15932|      0|                    ;
15933|      0|                    if ((int const) * (path + 1) == 47) {
15934|      0|                        path++;
15935|      0|                    }
15936|      0|                    else {
15937|      0|                        if ((int const) * (path + 1) == 46) {
15938|      0|                            if ((int const) *
15939|      0|                                    (path + (2 + ((int const) * (path + 2) == 46))) ==
15940|      0|                                    47) {
15941|      0|                                path += 2 + ((int const) * (path + 2) == 46);
15942|      0|                            }
15943|      0|                            else {
15944|      0|                                return ((_Bool)(!*(path + 1)));
15945|      0|                            }
15946|      0|                        }
15947|      0|                        else {
15948|      0|                            return ((_Bool)(!*(path + 1)));
15949|      0|                        }
15950|      0|                    }
15951|      0|                }
15952|      0|while_break: /* CIL Label */
15953|      0|                ;
15954|      0|            }
15955|      0|        }
15956|      0|        else {
15957|      0|            {
15958|      0|                while (1) {
15959|      0|while_continue___0: /* CIL Label */
15960|      0|                    ;
15961|      0|                    if ((int const) * (path + 0) == 46) {
15962|      0|                        if (!((int const) * (path + 1) == 47)) {
15963|      0|                            goto while_break___0;
15964|      0|                        }
15965|      0|                    }
15966|      0|                    else {
15967|      0|                        goto while_break___0;
15968|      0|                    }
15969|      0|                    path += 2;
15970|      0|                    {
15971|      0|                        while (1) {
15972|      0|while_continue___1: /* CIL Label */
15973|      0|                            ;
15974|      0|                            if (!((int const) * path == 47)) {
15975|      0|                                goto while_break___1;
15976|      0|                            }
15977|      0|                            path++;
15978|      0|                        }
15979|      0|while_break___1: /* CIL Label */
15980|      0|                        ;
15981|      0|                    }
15982|      0|                }
15983|      0|while_break___0: /* CIL Label */
15984|      0|                ;
15985|      0|            }
15986|      0|            if (!*(path + 0)) {
15987|      0|                tmp = 1;
15988|      0|            }
15989|      0|            else {
15990|      0|                if ((int const) * (path + 0) == 46) {
15991|      0|                    if (!*(path + 1)) {
15992|      0|                        tmp = 1;
15993|      0|                    }
15994|      0|                    else {
15995|      0|                        tmp = 0;
15996|      0|                    }
15997|      0|                }
15998|      0|                else {
15999|      0|                    tmp = 0;
16000|      0|                }
16001|      0|            }
16002|      0|            return ((_Bool)tmp);
16003|      0|        }
16004|      0|    }
16005|      0|}
16006|       |static int safer_rmdir(char const *path)
16007|      0|{
16008|      0|    int *tmp;
16009|      0|    _Bool tmp___0;
16010|      0|    int tmp___1;
16011|       |
16012|      0|    {
16013|      0|        {
16014|      0|            tmp___0 = must_be_dot_or_slash(path);
16015|      0|        }
16016|      0|        if (tmp___0) {
16017|      0|            {
16018|      0|                tmp = __errno_location();
16019|      0|                *tmp = 0;
16020|      0|            }
16021|      0|            return (-1);
16022|      0|        }
16023|      0|        {
16024|      0|            tmp___1 = rmdir(path);
16025|      0|        }
16026|      0|        return (tmp___1);
16027|      0|    }
16028|      0|}
16029|       |int remove_any_file(char const *path, enum remove_option option)
16030|      0|{
16031|      0|    int tmp;
16032|      0|    int *tmp___0;
16033|      0|    int *tmp___1;
16034|      0|    int tmp___2;
16035|      0|    int *tmp___3;
16036|      0|    int tmp___4;
16037|      0|    int tmp___5;
16038|      0|    char *directory;
16039|      0|    char *tmp___6;
16040|      0|    char const *entry;
16041|      0|    size_t entrylen;
16042|      0|    char *path_buffer;
16043|      0|    char *tmp___7;
16044|      0|    int r;
16045|      0|    int tmp___8;
16046|      0|    int e;
16047|      0|    int *tmp___9;
16048|      0|    int *tmp___10;
16049|      0|    int tmp___11;
16050|       |
16051|      0|    {
16052|      0|        if (!we_are_root) {
16053|      0|            {
16054|      0|                tmp = unlink(path);
16055|      0|            }
16056|      0|            if (tmp == 0) {
16057|      0|                return (1);
16058|      0|            }
16059|      0|            {
16060|      0|                tmp___0 = __errno_location();
16061|      0|            }
16062|      0|            if (*tmp___0 != 1) {
16063|      0|                {
16064|      0|                    tmp___1 = __errno_location();
16065|      0|                }
16066|      0|                if (*tmp___1 != 21) {
16067|      0|                    return (0);
16068|      0|                }
16069|      0|            }
16070|      0|        }
16071|      0|        {
16072|      0|            tmp___2 = safer_rmdir(path);
16073|      0|        }
16074|      0|        if (tmp___2 == 0) {
16075|      0|            return (1);
16076|      0|        }
16077|      0|        {
16078|      0|            tmp___3 = __errno_location();
16079|      0|        }
16080|      0|        {
16081|      0|            if (*tmp___3 == 20) {
16082|      0|                goto case_20;
16083|      0|            }
16084|      0|            if (*tmp___3 == 0) {
16085|      0|                goto case_0;
16086|      0|            }
16087|      0|            if (*tmp___3 == 17) {
16088|      0|                goto case_0;
16089|      0|            }
16090|      0|            if (*tmp___3 == 39) {
16091|      0|                goto case_0;
16092|      0|            }
16093|      0|            goto switch_break;
16094|      0|case_20: /* CIL Label */
16095|      0|            if (we_are_root) {
16096|      0|                {
16097|      0|                    tmp___4 = unlink(path);
16098|      0|                }
16099|      0|                if (tmp___4 == 0) {
16100|      0|                    tmp___5 = 1;
16101|      0|                }
16102|      0|                else {
16103|      0|                    tmp___5 = 0;
16104|      0|                }
16105|      0|            }
16106|      0|            else {
16107|      0|                tmp___5 = 0;
16108|      0|            }
16109|      0|            return (tmp___5);
16110|      0|case_0:   /* CIL Label */
16111|      0|case_17:  /* CIL Label */
16112|      0|case_39 : { /* CIL Label */
16113|      0|                if ((unsigned int)option == 0U) {
16114|      0|                    goto case_0___0;
16115|      0|                }
16116|      0|                if ((unsigned int)option == 2U) {
16117|      0|                    goto case_2;
16118|      0|                }
16119|      0|                if ((unsigned int)option == 1U) {
16120|      0|                    goto case_1;
16121|      0|                }
16122|      0|                goto switch_break___0;
16123|      0|case_0___0: /* CIL Label */
16124|      0|                goto switch_break___0;
16125|      0|case_2: /* CIL Label */
16126|      0|                return (-1);
16127|      0|case_1 : { /* CIL Label */
16128|      0|                    tmp___6 = savedir(path);
16129|      0|                    directory = tmp___6;
16130|      0|                }
16131|      0|                if (!directory) {
16132|      0|                    return (0);
16133|      0|                }
16134|      0|                entry = (char const *)directory;
16135|      0|                {
16136|      0|                    while (1) {
16137|      0|while_continue: /* CIL Label */
16138|      0|                        ;
16139|      0|                        {
16140|      0|                            entrylen = strlen(entry);
16141|      0|                        }
16142|      0|                        if (!(entrylen != 0UL)) {
16143|      0|                            goto while_break;
16144|      0|                        }
16145|      0|                        {
16146|      0|                            tmp___7 = new_name(path, entry);
16147|      0|                            path_buffer = tmp___7;
16148|      0|                            tmp___8 = remove_any_file((char const *)path_buffer,
16149|      0|                                                      (enum remove_option)1);
16150|      0|                            r = tmp___8;
16151|      0|                            tmp___9 = __errno_location();
16152|      0|                            e = *tmp___9;
16153|      0|                            free((void *)path_buffer);
16154|      0|                        }
16155|      0|                        if (!r) {
16156|      0|                            {
16157|      0|                                free((void *)directory);
16158|      0|                                tmp___10 = __errno_location();
16159|      0|                                *tmp___10 = e;
16160|      0|                            }
16161|      0|                            return (0);
16162|      0|                        }
16163|      0|                        entry += entrylen + 1UL;
16164|      0|                    }
16165|      0|while_break: /* CIL Label */
16166|      0|                    ;
16167|      0|                }
16168|      0|                {
16169|      0|                    free((void *)directory);
16170|      0|                    tmp___11 = safer_rmdir(path);
16171|      0|                }
16172|      0|                return (tmp___11 == 0);
16173|      0|switch_break___0: /* CIL Label */
16174|      0|                ;
16175|      0|            }
16176|      0|            goto switch_break;
16177|      0|switch_break: /* CIL Label */
16178|      0|            ;
16179|      0|        }
16180|      0|        return (0);
16181|      0|    }
16182|      0|}
16183|       |_Bool maybe_backup_file(char const *path, int this_is_the_archive)
16184|      0|{
16185|      0|    struct stat file_stat;
16186|      0|    void *tmp;
16187|      0|    int *tmp___0;
16188|      0|    int tmp___1;
16189|      0|    char const *tmp___2;
16190|      0|    char const *tmp___3;
16191|      0|    char *tmp___4;
16192|      0|    int e;
16193|      0|    int *tmp___5;
16194|      0|    char const *tmp___6;
16195|      0|    char *tmp___7;
16196|      0|    char *tmp___8;
16197|      0|    int tmp___9;
16198|      0|    void *__cil_tmp16;
16199|      0|    char *__cil_tmp17;
16200|      0|    char *__cil_tmp18;
16201|       |
16202|      0|    {
16203|      0|        if (this_is_the_archive) {
16204|      0|            if (!force_local_option) {
16205|      0|                {
16206|      0|                    rmt_path__ = strchr(path, ':');
16207|      0|                }
16208|      0|                if (rmt_path__) {
16209|      0|                    if ((unsigned long)rmt_path__ > (unsigned long)path) {
16210|      0|                        {
16211|      0|                            tmp = memchr((void const *)path, '/',
16212|      0|                                         (size_t)(rmt_path__ - (char *)path));
16213|      0|                        }
16214|      0|                        if (!tmp) {
16215|      0|                            return ((_Bool)1);
16216|      0|                        }
16217|      0|                    }
16218|      0|                }
16219|      0|            }
16220|      0|        }
16221|      0|        {
16222|      0|            tmp___1 = stat((char const * /* __restrict  */)path,
16223|      0|                           (struct stat * /* __restrict  */)(&file_stat));
16224|      0|        }
16225|      0|        if (tmp___1) {
16226|      0|            {
16227|      0|                tmp___0 = __errno_location();
16228|      0|            }
16229|      0|            if (*tmp___0 == 2) {
16230|      0|                return ((_Bool)1);
16231|      0|            }
16232|      0|            {
16233|      0|                stat_error(path);
16234|      0|            }
16235|      0|            return ((_Bool)0);
16236|      0|        }
16237|      0|        if ((file_stat.st_mode & 61440U) == 16384U) {
16238|      0|            return ((_Bool)1);
16239|      0|        }
16240|      0|        if (this_is_the_archive) {
16241|      0|            if ((file_stat.st_mode & 61440U) == 24576U) {
16242|      0|                return ((_Bool)1);
16243|      0|            }
16244|      0|            else {
16245|      0|                if ((file_stat.st_mode & 61440U) == 8192U) {
16246|      0|                    return ((_Bool)1);
16247|      0|                }
16248|      0|            }
16249|      0|        }
16250|      0|        {
16251|      0|            assign_string(&before_backup_name, path);
16252|      0|            assign_string(&after_backup_name, (char const *)0);
16253|      0|            after_backup_name = find_backup_file_name(path, backup_type);
16254|      0|        }
16255|      0|        if (!after_backup_name) {
16256|      0|            {
16257|      0|                xalloc_die();
16258|      0|            }
16259|      0|        }
16260|      0|        {
16261|      0|            tmp___9 = rename((char const *)before_backup_name,
16262|      0|                             (char const *)after_backup_name);
16263|      0|        }
16264|      0|        if (tmp___9 == 0) {
16265|      0|            if (verbose_option) {
16266|      0|                {
16267|      0|                    tmp___2 = quote_n(1, (char const *)after_backup_name);
16268|      0|                    tmp___3 = quote_n(0, (char const *)before_backup_name);
16269|      0|                    tmp___4 = gettext("Renaming %s to %s\n");
16270|      0|                    fprintf((FILE * /* __restrict  */) stdlis,
16271|      0|                            (char const * /* __restrict  */)tmp___4, tmp___3, tmp___2);
16272|      0|                }
16273|      0|            }
16274|      0|            return ((_Bool)1);
16275|      0|        }
16276|      0|        else {
16277|      0|            {
16278|      0|                tmp___5 = __errno_location();
16279|      0|                e = *tmp___5;
16280|      0|                tmp___6 = quote_n(1, (char const *)after_backup_name);
16281|      0|                tmp___7 = quotearg_colon((char const *)before_backup_name);
16282|      0|                tmp___8 = gettext("%s: Cannot rename to %s");
16283|      0|                error(0, e, (char const *)tmp___8, tmp___7, tmp___6);
16284|      0|                exit_status = 2;
16285|      0|                assign_string(&after_backup_name, (char const *)0);
16286|      0|            }
16287|      0|            return ((_Bool)0);
16288|      0|        }
16289|      0|    }
16290|      0|}
16291|       |void undo_last_backup(void)
16292|      0|{
16293|      0|    int e;
16294|      0|    int *tmp;
16295|      0|    char const *tmp___0;
16296|      0|    char *tmp___1;
16297|      0|    char *tmp___2;
16298|      0|    int tmp___3;
16299|      0|    char const *tmp___4;
16300|      0|    char const *tmp___5;
16301|      0|    char *tmp___6;
16302|      0|    char *__cil_tmp10;
16303|      0|    char *__cil_tmp11;
16304|       |
16305|      0|    {
16306|      0|        if (after_backup_name) {
16307|      0|            {
16308|      0|                tmp___3 = rename((char const *)after_backup_name,
16309|      0|                                 (char const *)before_backup_name);
16310|      0|            }
16311|      0|            if (tmp___3 != 0) {
16312|      0|                {
16313|      0|                    tmp = __errno_location();
16314|      0|                    e = *tmp;
16315|      0|                    tmp___0 = quote_n(1, (char const *)before_backup_name);
16316|      0|                    tmp___1 = quotearg_colon((char const *)after_backup_name);
16317|      0|                    tmp___2 = gettext("%s: Cannot rename to %s");
16318|      0|                    error(0, e, (char const *)tmp___2, tmp___1, tmp___0);
16319|      0|                    exit_status = 2;
16320|      0|                }
16321|      0|            }
16322|      0|            if (verbose_option) {
16323|      0|                {
16324|      0|                    tmp___4 = quote_n(1, (char const *)before_backup_name);
16325|      0|                    tmp___5 = quote_n(0, (char const *)after_backup_name);
16326|      0|                    tmp___6 = gettext("Renaming %s back to %s\n");
16327|      0|                    fprintf((FILE * /* __restrict  */) stdlis,
16328|      0|                            (char const * /* __restrict  */)tmp___6, tmp___5, tmp___4);
16329|      0|                }
16330|      0|            }
16331|      0|            {
16332|      0|                assign_string(&after_backup_name, (char const *)0);
16333|      0|            }
16334|      0|        }
16335|      0|        return;
16336|      0|    }
16337|      0|}
16338|       |int deref_stat(_Bool deref, char const *name, struct stat *buf)
16339|      0|{
16340|      0|    int tmp;
16341|      0|    int tmp___0;
16342|      0|    int tmp___1;
16343|       |
16344|      0|    {
16345|      0|        if (deref) {
16346|      0|            {
16347|      0|                tmp = stat((char const * /* __restrict  */)name,
16348|      0|                           (struct stat * /* __restrict  */) buf);
16349|      0|                tmp___1 = tmp;
16350|      0|            }
16351|      0|        }
16352|      0|        else {
16353|      0|            {
16354|      0|                tmp___0 = lstat((char const * /* __restrict  */)name,
16355|      0|                                (struct stat * /* __restrict  */) buf);
16356|      0|                tmp___1 = tmp___0;
16357|      0|            }
16358|      0|        }
16359|      0|        return (tmp___1);
16360|      0|    }
16361|      0|}
16362|       |static struct wd *wd;
16363|       |static size_t wds;
16364|       |static size_t wd_alloc;
16365|       |int chdir_arg(char const *dir)
16366|      0|{
16367|      0|    void *tmp;
16368|      0|    size_t tmp___0;
16369|      0|    char *__cil_tmp4;
16370|       |
16371|      0|    {
16372|      0|        if (wds == wd_alloc) {
16373|      0|            {
16374|      0|                wd_alloc = 2UL * (wd_alloc + 1UL);
16375|      0|                tmp = xrealloc((void *)wd, sizeof(*wd) * wd_alloc);
16376|      0|                wd = (struct wd *)tmp;
16377|      0|            }
16378|      0|            if (!wds) {
16379|      0|                (wd + wds)->name = ".";
16380|      0|                (wd + wds)->saved = 0;
16381|      0|                wds++;
16382|      0|            }
16383|      0|        }
16384|      0|        if (*(dir + 0)) {
16385|      0|            {
16386|      0|                while (1) {
16387|      0|while_continue: /* CIL Label */
16388|      0|                    ;
16389|      0|                    if ((int const) * (dir + 0) == 46) {
16390|      0|                        if (!((int const) * (dir + 1) == 47)) {
16391|      0|                            goto while_break;
16392|      0|                        }
16393|      0|                    }
16394|      0|                    else {
16395|      0|                        goto while_break;
16396|      0|                    }
16397|      0|                    dir += 2;
16398|      0|                    {
16399|      0|                        while (1) {
16400|      0|while_continue___0: /* CIL Label */
16401|      0|                            ;
16402|      0|                            if (!((int const) * dir == 47)) {
16403|      0|                                goto while_break___0;
16404|      0|                            }
16405|      0|                            goto __Cont;
16406|      0|__Cont:
16407|      0|                            dir++;
16408|      0|                        }
16409|      0|while_break___0: /* CIL Label */
16410|      0|                        ;
16411|      0|                    }
16412|      0|                }
16413|      0|while_break: /* CIL Label */
16414|      0|                ;
16415|      0|            }
16416|      0|            if (!*(dir + ((int const) * (dir + 0) == 46))) {
16417|      0|                return ((int)(wds - 1UL));
16418|      0|            }
16419|      0|        }
16420|      0|        (wd + wds)->name = dir;
16421|      0|        (wd + wds)->saved = 0;
16422|      0|        tmp___0 = wds;
16423|      0|        wds++;
16424|      0|        return ((int)tmp___0);
16425|      0|    }
16426|      0|}
16427|       |static int previous;
16428|       |void chdir_do(int i)
16429|      0|{
16430|      0|    struct wd *prev;
16431|      0|    struct wd *curr;
16432|      0|    char *tmp;
16433|      0|    int tmp___0;
16434|      0|    char *tmp___1;
16435|      0|    int tmp___2;
16436|      0|    int tmp___3;
16437|      0|    char *__cil_tmp9;
16438|      0|    char *__cil_tmp10;
16439|       |
16440|      0|    {
16441|      0|        if (previous != i) {
16442|      0|            prev = wd + previous;
16443|      0|            curr = wd + i;
16444|      0|            if (!prev->saved) {
16445|      0|                {
16446|      0|                    prev->saved = 1;
16447|      0|                    tmp___0 = save_cwd(&prev->saved_cwd);
16448|      0|                }
16449|      0|                if (tmp___0 != 0) {
16450|      0|                    {
16451|      0|                        tmp = gettext("Cannot save working directory");
16452|      0|                        error(0, 0, (char const *)tmp);
16453|      0|                        fatal_exit();
16454|      0|                    }
16455|      0|                }
16456|      0|            }
16457|      0|            if (curr->saved) {
16458|      0|                {
16459|      0|                    tmp___2 = restore_cwd((struct saved_cwd const *)(&curr->saved_cwd));
16460|      0|                }
16461|      0|                if (tmp___2) {
16462|      0|                    {
16463|      0|                        tmp___1 = gettext("Cannot change working directory");
16464|      0|                        error(0, 0, (char const *)tmp___1);
16465|      0|                        fatal_exit();
16466|      0|                    }
16467|      0|                }
16468|      0|            }
16469|      0|            else {
16470|      0|                if (i) {
16471|      0|                    if (!((int const) * (curr->name + 0) == 47)) {
16472|      0|                        {
16473|      0|                            chdir_do(i - 1);
16474|      0|                        }
16475|      0|                    }
16476|      0|                }
16477|      0|                {
16478|      0|                    tmp___3 = chdir(curr->name);
16479|      0|                }
16480|      0|                if (tmp___3 != 0) {
16481|      0|                    {
16482|      0|                        chdir_fatal(curr->name);
16483|      0|                    }
16484|      0|                }
16485|      0|            }
16486|      0|            previous = i;
16487|      0|        }
16488|      0|        return;
16489|      0|    }
16490|      0|}
16491|       |void decode_mode(mode_t mode, char *string)
16492|      0|{
16493|      0|    char *tmp;
16494|      0|    char *tmp___0;
16495|      0|    char *tmp___1;
16496|      0|    char *tmp___2;
16497|      0|    char *tmp___3;
16498|      0|    char *tmp___4;
16499|      0|    char *tmp___5;
16500|      0|    char *tmp___6;
16501|      0|    char *tmp___7;
16502|      0|    int tmp___8;
16503|      0|    int tmp___9;
16504|      0|    int tmp___10;
16505|      0|    int tmp___11;
16506|      0|    int tmp___12;
16507|      0|    int tmp___13;
16508|      0|    int tmp___14;
16509|      0|    int tmp___15;
16510|      0|    int tmp___16;
16511|      0|    int tmp___17;
16512|      0|    int tmp___18;
16513|      0|    int tmp___19;
16514|      0|    int tmp___20;
16515|      0|    int tmp___21;
16516|      0|    int tmp___22;
16517|       |
16518|      0|    {
16519|      0|        tmp = string;
16520|      0|        string++;
16521|      0|        if (mode & 256U) {
16522|      0|            tmp___8 = 'r';
16523|      0|        }
16524|      0|        else {
16525|      0|            tmp___8 = '-';
16526|      0|        }
16527|      0|        *tmp = (char)tmp___8;
16528|      0|        tmp___0 = string;
16529|      0|        string++;
16530|      0|        if (mode & 128U) {
16531|      0|            tmp___9 = 'w';
16532|      0|        }
16533|      0|        else {
16534|      0|            tmp___9 = '-';
16535|      0|        }
16536|      0|        *tmp___0 = (char)tmp___9;
16537|      0|        tmp___1 = string;
16538|      0|        string++;
16539|      0|        if (mode & 2048U) {
16540|      0|            if (mode & 64U) {
16541|      0|                tmp___10 = 's';
16542|      0|            }
16543|      0|            else {
16544|      0|                tmp___10 = 'S';
16545|      0|            }
16546|      0|            tmp___12 = tmp___10;
16547|      0|        }
16548|      0|        else {
16549|      0|            if (mode & 64U) {
16550|      0|                tmp___11 = 'x';
16551|      0|            }
16552|      0|            else {
16553|      0|                tmp___11 = '-';
16554|      0|            }
16555|      0|            tmp___12 = tmp___11;
16556|      0|        }
16557|      0|        *tmp___1 = (char)tmp___12;
16558|      0|        tmp___2 = string;
16559|      0|        string++;
16560|      0|        if (mode & (unsigned int)(256 >> 3)) {
16561|      0|            tmp___13 = 'r';
16562|      0|        }
16563|      0|        else {
16564|      0|            tmp___13 = '-';
16565|      0|        }
16566|      0|        *tmp___2 = (char)tmp___13;
16567|      0|        tmp___3 = string;
16568|      0|        string++;
16569|      0|        if (mode & (unsigned int)(128 >> 3)) {
16570|      0|            tmp___14 = 'w';
16571|      0|        }
16572|      0|        else {
16573|      0|            tmp___14 = '-';
16574|      0|        }
16575|      0|        *tmp___3 = (char)tmp___14;
16576|      0|        tmp___4 = string;
16577|      0|        string++;
16578|      0|        if (mode & 1024U) {
16579|      0|            if (mode & (unsigned int)(64 >> 3)) {
16580|      0|                tmp___15 = 's';
16581|      0|            }
16582|      0|            else {
16583|      0|                tmp___15 = 'S';
16584|      0|            }
16585|      0|            tmp___17 = tmp___15;
16586|      0|        }
16587|      0|        else {
16588|      0|            if (mode & (unsigned int)(64 >> 3)) {
16589|      0|                tmp___16 = 'x';
16590|      0|            }
16591|      0|            else {
16592|      0|                tmp___16 = '-';
16593|      0|            }
16594|      0|            tmp___17 = tmp___16;
16595|      0|        }
16596|      0|        *tmp___4 = (char)tmp___17;
16597|      0|        tmp___5 = string;
16598|      0|        string++;
16599|      0|        if (mode & (unsigned int)((256 >> 3) >> 3)) {
16600|      0|            tmp___18 = 'r';
16601|      0|        }
16602|      0|        else {
16603|      0|            tmp___18 = '-';
16604|      0|        }
16605|      0|        *tmp___5 = (char)tmp___18;
16606|      0|        tmp___6 = string;
16607|      0|        string++;
16608|      0|        if (mode & (unsigned int)((128 >> 3) >> 3)) {
16609|      0|            tmp___19 = 'w';
16610|      0|        }
16611|      0|        else {
16612|      0|            tmp___19 = '-';
16613|      0|        }
16614|      0|        *tmp___6 = (char)tmp___19;
16615|      0|        tmp___7 = string;
16616|      0|        string++;
16617|      0|        if (mode & 512U) {
16618|      0|            if (mode & (unsigned int)((64 >> 3) >> 3)) {
16619|      0|                tmp___20 = 't';
16620|      0|            }
16621|      0|            else {
16622|      0|                tmp___20 = 'T';
16623|      0|            }
16624|      0|            tmp___22 = tmp___20;
16625|      0|        }
16626|      0|        else {
16627|      0|            if (mode & (unsigned int)((64 >> 3) >> 3)) {
16628|      0|                tmp___21 = 'x';
16629|      0|            }
16630|      0|            else {
16631|      0|                tmp___21 = '-';
16632|      0|            }
16633|      0|            tmp___22 = tmp___21;
16634|      0|        }
16635|      0|        *tmp___7 = (char)tmp___22;
16636|      0|        *string = (char)'\000';
16637|      0|        return;
16638|      0|    }
16639|      0|}
16640|       |static void call_arg_error(char const *call, char const *name)
16641|      0|{
16642|      0|    int e;
16643|      0|    int *tmp;
16644|      0|    char *tmp___0;
16645|      0|    char *tmp___1;
16646|      0|    char *__cil_tmp7;
16647|       |
16648|      0|    {
16649|      0|        {
16650|      0|            tmp = __errno_location();
16651|      0|            e = *tmp;
16652|      0|            tmp___0 = quotearg_colon(name);
16653|      0|            tmp___1 = gettext("%s: Cannot %s");
16654|      0|            error(0, e, (char const *)tmp___1, tmp___0, call);
16655|      0|            exit_status = 2;
16656|      0|        }
16657|      0|        return;
16658|      0|    }
16659|      0|}
16660|       |static __attribute__((__noreturn__)) void call_arg_fatal(char const *call,
16661|       |        char const *name);
16662|       |static void call_arg_fatal(char const *call, char const *name)
16663|      0|{
16664|      0|    int e;
16665|      0|    int *tmp;
16666|      0|    char *tmp___0;
16667|      0|    char *tmp___1;
16668|      0|    char *__cil_tmp7;
16669|       |
16670|      0|    {
16671|      0|        {
16672|      0|            tmp = __errno_location();
16673|      0|            e = *tmp;
16674|      0|            tmp___0 = quotearg_colon(name);
16675|      0|            tmp___1 = gettext("%s: Cannot %s");
16676|      0|            error(0, e, (char const *)tmp___1, tmp___0, call);
16677|      0|            fatal_exit();
16678|      0|        }
16679|      0|    }
16680|      0|}
16681|       |static void call_arg_warn(char const *call, char const *name)
16682|      0|{
16683|      0|    int e;
16684|      0|    int *tmp;
16685|      0|    char *tmp___0;
16686|      0|    char *tmp___1;
16687|      0|    char *__cil_tmp7;
16688|       |
16689|      0|    {
16690|      0|        {
16691|      0|            tmp = __errno_location();
16692|      0|            e = *tmp;
16693|      0|            tmp___0 = quotearg_colon(name);
16694|      0|            tmp___1 = gettext("%s: Warning: Cannot %s");
16695|      0|            error(0, e, (char const *)tmp___1, tmp___0, call);
16696|      0|        }
16697|      0|        return;
16698|      0|    }
16699|      0|}
16700|       |__attribute__((__noreturn__)) void chdir_fatal(char const *name);
16701|       |void chdir_fatal(char const *name)
16702|      0|{
16703|      0|    char *__cil_tmp2;
16704|       |
16705|      0|    {
16706|      0|        {
16707|      0|            call_arg_fatal("chdir", name);
16708|      0|        }
16709|      0|    }
16710|      0|}
16711|       |void chmod_error_details(char const *name, mode_t mode)
16712|      0|{
16713|      0|    int e;
16714|      0|    int *tmp;
16715|      0|    char buf[10];
16716|      0|    char *tmp___0;
16717|      0|    char *tmp___1;
16718|      0|    void *__cil_tmp8;
16719|      0|    char *__cil_tmp9;
16720|       |
16721|      0|    {
16722|      0|        {
16723|      0|            tmp = __errno_location();
16724|      0|            e = *tmp;
16725|      0|            decode_mode(mode, buf);
16726|      0|            tmp___0 = quotearg_colon(name);
16727|      0|            tmp___1 = gettext("%s: Cannot change mode to %s");
16728|      0|            error(0, e, (char const *)tmp___1, tmp___0, buf);
16729|      0|            exit_status = 2;
16730|      0|        }
16731|      0|        return;
16732|      0|    }
16733|      0|}
16734|       |void chown_error_details(char const *name, uid_t uid, gid_t gid)
16735|      0|{
16736|      0|    int e;
16737|      0|    int *tmp;
16738|      0|    char *tmp___0;
16739|      0|    char *tmp___1;
16740|      0|    char *__cil_tmp8;
16741|       |
16742|      0|    {
16743|      0|        {
16744|      0|            tmp = __errno_location();
16745|      0|            e = *tmp;
16746|      0|            tmp___0 = quotearg_colon(name);
16747|      0|            tmp___1 = gettext("%s: Cannot change ownership to uid %lu, gid %lu");
16748|      0|            error(0, e, (char const *)tmp___1, tmp___0, (unsigned long)uid,
16749|      0|                  (unsigned long)gid);
16750|      0|            exit_status = 2;
16751|      0|        }
16752|      0|        return;
16753|      0|    }
16754|      0|}
16755|       |void close_error(char const *name)
16756|      0|{
16757|      0|    char *__cil_tmp2;
16758|       |
16759|      0|    {
16760|      0|        {
16761|      0|            call_arg_error("close", name);
16762|      0|        }
16763|      0|        return;
16764|      0|    }
16765|      0|}
16766|       |void close_warn(char const *name)
16767|      0|{
16768|      0|    char *__cil_tmp2;
16769|       |
16770|      0|    {
16771|      0|        {
16772|      0|            call_arg_warn("close", name);
16773|      0|        }
16774|      0|        return;
16775|      0|    }
16776|      0|}
16777|       |void close_diag(char const *name)
16778|      0|{
16779|       |
16780|      0|    {
16781|      0|        if (ignore_failed_read_option) {
16782|      0|            {
16783|      0|                close_warn(name);
16784|      0|            }
16785|      0|        }
16786|      0|        else {
16787|      0|            {
16788|      0|                close_error(name);
16789|      0|            }
16790|      0|        }
16791|      0|        return;
16792|      0|    }
16793|      0|}
16794|       |__attribute__((__noreturn__)) void exec_fatal(char const *name);
16795|       |void exec_fatal(char const *name)
16796|      0|{
16797|      0|    char *__cil_tmp2;
16798|       |
16799|      0|    {
16800|      0|        {
16801|      0|            call_arg_fatal("exec", name);
16802|      0|        }
16803|      0|    }
16804|      0|}
16805|       |void link_error(char const *target, char const *source)
16806|      0|{
16807|      0|    int e;
16808|      0|    int *tmp;
16809|      0|    char const *tmp___0;
16810|      0|    char *tmp___1;
16811|      0|    char *tmp___2;
16812|      0|    char *__cil_tmp8;
16813|       |
16814|      0|    {
16815|      0|        {
16816|      0|            tmp = __errno_location();
16817|      0|            e = *tmp;
16818|      0|            tmp___0 = quote_n(1, target);
16819|      0|            tmp___1 = quotearg_colon(source);
16820|      0|            tmp___2 = gettext("%s: Cannot hard link to %s");
16821|      0|            error(0, e, (char const *)tmp___2, tmp___1, tmp___0);
16822|      0|            exit_status = 2;
16823|      0|        }
16824|      0|        return;
16825|      0|    }
16826|      0|}
16827|       |void mkdir_error(char const *name)
16828|      0|{
16829|      0|    char *__cil_tmp2;
16830|       |
16831|      0|    {
16832|      0|        {
16833|      0|            call_arg_error("mkdir", name);
16834|      0|        }
16835|      0|        return;
16836|      0|    }
16837|      0|}
16838|       |void mkfifo_error(char const *name)
16839|      0|{
16840|      0|    char *__cil_tmp2;
16841|       |
16842|      0|    {
16843|      0|        {
16844|      0|            call_arg_error("mkfifo", name);
16845|      0|        }
16846|      0|        return;
16847|      0|    }
16848|      0|}
16849|       |void mknod_error(char const *name)
16850|      0|{
16851|      0|    char *__cil_tmp2;
16852|       |
16853|      0|    {
16854|      0|        {
16855|      0|            call_arg_error("mknod", name);
16856|      0|        }
16857|      0|        return;
16858|      0|    }
16859|      0|}
16860|       |void open_error(char const *name)
16861|      0|{
16862|      0|    char *__cil_tmp2;
16863|       |
16864|      0|    {
16865|      0|        {
16866|      0|            call_arg_error("open", name);
16867|      0|        }
16868|      0|        return;
16869|      0|    }
16870|      0|}
16871|       |__attribute__((__noreturn__)) void open_fatal(char const *name);
16872|       |void open_fatal(char const *name)
16873|      0|{
16874|      0|    char *__cil_tmp2;
16875|       |
16876|      0|    {
16877|      0|        {
16878|      0|            call_arg_fatal("open", name);
16879|      0|        }
16880|      0|    }
16881|      0|}
16882|       |void open_warn(char const *name)
16883|      0|{
16884|      0|    char *__cil_tmp2;
16885|       |
16886|      0|    {
16887|      0|        {
16888|      0|            call_arg_warn("open", name);
16889|      0|        }
16890|      0|        return;
16891|      0|    }
16892|      0|}
16893|       |void open_diag(char const *name)
16894|      0|{
16895|       |
16896|      0|    {
16897|      0|        if (ignore_failed_read_option) {
16898|      0|            {
16899|      0|                open_warn(name);
16900|      0|            }
16901|      0|        }
16902|      0|        else {
16903|      0|            {
16904|      0|                open_error(name);
16905|      0|            }
16906|      0|        }
16907|      0|        return;
16908|      0|    }
16909|      0|}
16910|       |void read_error(char const *name)
16911|      0|{
16912|      0|    char *__cil_tmp2;
16913|       |
16914|      0|    {
16915|      0|        {
16916|      0|            call_arg_error("read", name);
16917|      0|        }
16918|      0|        return;
16919|      0|    }
16920|      0|}
16921|       |void read_error_details(char const *name, off_t offset, size_t size)
16922|      0|{
16923|      0|    char buf[(((sizeof(uintmax_t) * 8UL) * 302UL) / 1000UL + 1UL) + 1UL];
16924|      0|    int e;
16925|      0|    int *tmp;
16926|      0|    char *tmp___0;
16927|      0|    char *tmp___1;
16928|      0|    char *tmp___2;
16929|      0|    void *__cil_tmp10;
16930|       |
16931|      0|    {
16932|      0|        {
16933|      0|            tmp = __errno_location();
16934|      0|            e = *tmp;
16935|      0|            tmp___0 = stringify_uintmax_t_backwards(
16936|      0|                          (uintmax_t)offset,
16937|      0|                          buf + ((((sizeof(uintmax_t) * 8UL) * 302UL) / 1000UL + 1UL) + 1UL));
16938|      0|            tmp___1 = quotearg_colon(name);
16939|      0|            tmp___2 = ngettext("%s: Read error at byte %s, reading %lu byte",
16940|      0|                               "%s: Read error at byte %s, reading %lu bytes", size);
16941|      0|            error(0, e, (char const *)tmp___2, tmp___1, tmp___0, size);
16942|      0|            exit_status = 2;
16943|      0|        }
16944|      0|        return;
16945|      0|    }
16946|      0|}
16947|       |void read_warn_details(char const *name, off_t offset, size_t size)
16948|      0|{
16949|      0|    char buf[(((sizeof(uintmax_t) * 8UL) * 302UL) / 1000UL + 1UL) + 1UL];
16950|      0|    int e;
16951|      0|    int *tmp;
16952|      0|    char *tmp___0;
16953|      0|    char *tmp___1;
16954|      0|    char *tmp___2;
16955|      0|    void *__cil_tmp10;
16956|       |
16957|      0|    {
16958|      0|        {
16959|      0|            tmp = __errno_location();
16960|      0|            e = *tmp;
16961|      0|            tmp___0 = stringify_uintmax_t_backwards(
16962|      0|                          (uintmax_t)offset,
16963|      0|                          buf + ((((sizeof(uintmax_t) * 8UL) * 302UL) / 1000UL + 1UL) + 1UL));
16964|      0|            tmp___1 = quotearg_colon(name);
16965|      0|            tmp___2 = ngettext(
16966|      0|                          "%s: Warning: Read error at byte %s, reading %lu byte",
16967|      0|                          "%s: Warning: Read error at byte %s, reading %lu bytes", size);
16968|      0|            error(0, e, (char const *)tmp___2, tmp___1, tmp___0, size);
16969|      0|        }
16970|      0|        return;
16971|      0|    }
16972|      0|}
16973|       |void read_diag_details(char const *name, off_t offset, size_t size)
16974|      0|{
16975|       |
16976|      0|    {
16977|      0|        if (ignore_failed_read_option) {
16978|      0|            {
16979|      0|                read_warn_details(name, offset, size);
16980|      0|            }
16981|      0|        }
16982|      0|        else {
16983|      0|            {
16984|      0|                read_error_details(name, offset, size);
16985|      0|            }
16986|      0|        }
16987|      0|        return;
16988|      0|    }
16989|      0|}
16990|       |__attribute__((__noreturn__)) void read_fatal(char const *name);
16991|       |void read_fatal(char const *name)
16992|      0|{
16993|      0|    char *__cil_tmp2;
16994|       |
16995|      0|    {
16996|      0|        {
16997|      0|            call_arg_fatal("read", name);
16998|      0|        }
16999|      0|    }
17000|      0|}
17001|       |__attribute__((__noreturn__)) void
17002|       |read_fatal_details(char const *name, off_t offset, size_t size);
17003|       |void read_fatal_details(char const *name, off_t offset, size_t size)
17004|      0|{
17005|      0|    char buf[(((sizeof(uintmax_t) * 8UL) * 302UL) / 1000UL + 1UL) + 1UL];
17006|      0|    int e;
17007|      0|    int *tmp;
17008|      0|    char *tmp___0;
17009|      0|    char *tmp___1;
17010|      0|    char *tmp___2;
17011|      0|    void *__cil_tmp10;
17012|       |
17013|      0|    {
17014|      0|        {
17015|      0|            tmp = __errno_location();
17016|      0|            e = *tmp;
17017|      0|            tmp___0 = stringify_uintmax_t_backwards(
17018|      0|                          (uintmax_t)offset,
17019|      0|                          buf + ((((sizeof(uintmax_t) * 8UL) * 302UL) / 1000UL + 1UL) + 1UL));
17020|      0|            tmp___1 = quotearg_colon(name);
17021|      0|            tmp___2 = ngettext("%s: Read error at byte %s, reading %lu byte",
17022|      0|                               "%s: Read error at byte %s, reading %lu bytes", size);
17023|      0|            error(0, e, (char const *)tmp___2, tmp___1, tmp___0, size);
17024|      0|            fatal_exit();
17025|      0|        }
17026|      0|    }
17027|      0|}
17028|       |void readlink_error(char const *name)
17029|      0|{
17030|      0|    char *__cil_tmp2;
17031|       |
17032|      0|    {
17033|      0|        {
17034|      0|            call_arg_error("readlink", name);
17035|      0|        }
17036|      0|        return;
17037|      0|    }
17038|      0|}
17039|       |void readlink_warn(char const *name)
17040|      0|{
17041|      0|    char *__cil_tmp2;
17042|       |
17043|      0|    {
17044|      0|        {
17045|      0|            call_arg_warn("readlink", name);
17046|      0|        }
17047|      0|        return;
17048|      0|    }
17049|      0|}
17050|       |void readlink_diag(char const *name)
17051|      0|{
17052|       |
17053|      0|    {
17054|      0|        if (ignore_failed_read_option) {
17055|      0|            {
17056|      0|                readlink_warn(name);
17057|      0|            }
17058|      0|        }
17059|      0|        else {
17060|      0|            {
17061|      0|                readlink_error(name);
17062|      0|            }
17063|      0|        }
17064|      0|        return;
17065|      0|    }
17066|      0|}
17067|       |void savedir_error(char const *name)
17068|      0|{
17069|      0|    char *__cil_tmp2;
17070|       |
17071|      0|    {
17072|      0|        {
17073|      0|            call_arg_error("savedir", name);
17074|      0|        }
17075|      0|        return;
17076|      0|    }
17077|      0|}
17078|       |void savedir_warn(char const *name)
17079|      0|{
17080|      0|    char *__cil_tmp2;
17081|       |
17082|      0|    {
17083|      0|        {
17084|      0|            call_arg_warn("savedir", name);
17085|      0|        }
17086|      0|        return;
17087|      0|    }
17088|      0|}
17089|       |void savedir_diag(char const *name)
17090|      0|{
17091|       |
17092|      0|    {
17093|      0|        if (ignore_failed_read_option) {
17094|      0|            {
17095|      0|                savedir_warn(name);
17096|      0|            }
17097|      0|        }
17098|      0|        else {
17099|      0|            {
17100|      0|                savedir_error(name);
17101|      0|            }
17102|      0|        }
17103|      0|        return;
17104|      0|    }
17105|      0|}
17106|       |void seek_error(char const *name)
17107|      0|{
17108|      0|    char *__cil_tmp2;
17109|       |
17110|      0|    {
17111|      0|        {
17112|      0|            call_arg_error("seek", name);
17113|      0|        }
17114|      0|        return;
17115|      0|    }
17116|      0|}
17117|       |void seek_error_details(char const *name, off_t offset)
17118|      0|{
17119|      0|    char buf[(((sizeof(uintmax_t) * 8UL) * 302UL) / 1000UL + 1UL) + 1UL];
17120|      0|    int e;
17121|      0|    int *tmp;
17122|      0|    char *tmp___0;
17123|      0|    char *tmp___1;
17124|      0|    char *tmp___2;
17125|      0|    void *__cil_tmp9;
17126|      0|    char *__cil_tmp10;
17127|       |
17128|      0|    {
17129|      0|        {
17130|      0|            tmp = __errno_location();
17131|      0|            e = *tmp;
17132|      0|            tmp___0 = stringify_uintmax_t_backwards(
17133|      0|                          (uintmax_t)offset,
17134|      0|                          buf + ((((sizeof(uintmax_t) * 8UL) * 302UL) / 1000UL + 1UL) + 1UL));
17135|      0|            tmp___1 = quotearg_colon(name);
17136|      0|            tmp___2 = gettext("%s: Cannot seek to %s");
17137|      0|            error(0, e, (char const *)tmp___2, tmp___1, tmp___0);
17138|      0|            exit_status = 2;
17139|      0|        }
17140|      0|        return;
17141|      0|    }
17142|      0|}
17143|       |void seek_warn(char const *name)
17144|      0|{
17145|      0|    char *__cil_tmp2;
17146|       |
17147|      0|    {
17148|      0|        {
17149|      0|            call_arg_warn("seek", name);
17150|      0|        }
17151|      0|        return;
17152|      0|    }
17153|      0|}
17154|       |void seek_warn_details(char const *name, off_t offset)
17155|      0|{
17156|      0|    char buf[(((sizeof(uintmax_t) * 8UL) * 302UL) / 1000UL + 1UL) + 1UL];
17157|      0|    int e;
17158|      0|    int *tmp;
17159|      0|    char *tmp___0;
17160|      0|    char *tmp___1;
17161|      0|    char *tmp___2;
17162|      0|    void *__cil_tmp9;
17163|      0|    char *__cil_tmp10;
17164|       |
17165|      0|    {
17166|      0|        {
17167|      0|            tmp = __errno_location();
17168|      0|            e = *tmp;
17169|      0|            tmp___0 = stringify_uintmax_t_backwards(
17170|      0|                          (uintmax_t)offset,
17171|      0|                          buf + ((((sizeof(uintmax_t) * 8UL) * 302UL) / 1000UL + 1UL) + 1UL));
17172|      0|            tmp___1 = quotearg_colon(name);
17173|      0|            tmp___2 = gettext("%s: Warning: Cannot seek to %s");
17174|      0|            error(0, e, (char const *)tmp___2, tmp___1, tmp___0);
17175|      0|        }
17176|      0|        return;
17177|      0|    }
17178|      0|}
17179|       |void seek_diag_details(char const *name, off_t offset)
17180|      0|{
17181|       |
17182|      0|    {
17183|      0|        if (ignore_failed_read_option) {
17184|      0|            {
17185|      0|                seek_warn_details(name, offset);
17186|      0|            }
17187|      0|        }
17188|      0|        else {
17189|      0|            {
17190|      0|                seek_error_details(name, offset);
17191|      0|            }
17192|      0|        }
17193|      0|        return;
17194|      0|    }
17195|      0|}
17196|       |void symlink_error(char const *contents, char const *name)
17197|      0|{
17198|      0|    int e;
17199|      0|    int *tmp;
17200|      0|    char const *tmp___0;
17201|      0|    char *tmp___1;
17202|      0|    char *tmp___2;
17203|      0|    char *__cil_tmp8;
17204|       |
17205|      0|    {
17206|      0|        {
17207|      0|            tmp = __errno_location();
17208|      0|            e = *tmp;
17209|      0|            tmp___0 = quote_n(1, contents);
17210|      0|            tmp___1 = quotearg_colon(name);
17211|      0|            tmp___2 = gettext("%s: Cannot create symlink to %s");
17212|      0|            error(0, e, (char const *)tmp___2, tmp___1, tmp___0);
17213|      0|            exit_status = 2;
17214|      0|        }
17215|      0|        return;
17216|      0|    }
17217|      0|}
17218|       |void stat_error(char const *name)
17219|      0|{
17220|      0|    char *__cil_tmp2;
17221|       |
17222|      0|    {
17223|      0|        {
17224|      0|            call_arg_error("stat", name);
17225|      0|        }
17226|      0|        return;
17227|      0|    }
17228|      0|}
17229|       |void stat_warn(char const *name)
17230|      0|{
17231|      0|    char *__cil_tmp2;
17232|       |
17233|      0|    {
17234|      0|        {
17235|      0|            call_arg_warn("stat", name);
17236|      0|        }
17237|      0|        return;
17238|      0|    }
17239|      0|}
17240|       |void stat_diag(char const *name)
17241|      0|{
17242|       |
17243|      0|    {
17244|      0|        if (ignore_failed_read_option) {
17245|      0|            {
17246|      0|                stat_warn(name);
17247|      0|            }
17248|      0|        }
17249|      0|        else {
17250|      0|            {
17251|      0|                stat_error(name);
17252|      0|            }
17253|      0|        }
17254|      0|        return;
17255|      0|    }
17256|      0|}
17257|       |void truncate_error(char const *name)
17258|      0|{
17259|      0|    char *__cil_tmp2;
17260|       |
17261|      0|    {
17262|      0|        {
17263|      0|            call_arg_error("truncate", name);
17264|      0|        }
17265|      0|        return;
17266|      0|    }
17267|      0|}
17268|       |void truncate_warn(char const *name)
17269|      0|{
17270|      0|    char *__cil_tmp2;
17271|       |
17272|      0|    {
17273|      0|        {
17274|      0|            call_arg_warn("truncate", name);
17275|      0|        }
17276|      0|        return;
17277|      0|    }
17278|      0|}
17279|       |void unlink_error(char const *name)
17280|      0|{
17281|      0|    char *__cil_tmp2;
17282|       |
17283|      0|    {
17284|      0|        {
17285|      0|            call_arg_error("unlink", name);
17286|      0|        }
17287|      0|        return;
17288|      0|    }
17289|      0|}
17290|       |void utime_error(char const *name)
17291|      0|{
17292|      0|    char *__cil_tmp2;
17293|       |
17294|      0|    {
17295|      0|        {
17296|      0|            call_arg_error("utime", name);
17297|      0|        }
17298|      0|        return;
17299|      0|    }
17300|      0|}
17301|       |void waitpid_error(char const *name)
17302|      0|{
17303|      0|    char *__cil_tmp2;
17304|       |
17305|      0|    {
17306|      0|        {
17307|      0|            call_arg_error("waitpid", name);
17308|      0|        }
17309|      0|        return;
17310|      0|    }
17311|      0|}
17312|       |void write_error(char const *name)
17313|      0|{
17314|      0|    char *__cil_tmp2;
17315|       |
17316|      0|    {
17317|      0|        {
17318|      0|            call_arg_error("write", name);
17319|      0|        }
17320|      0|        return;
17321|      0|    }
17322|      0|}
17323|       |void write_error_details(char const *name, size_t status, size_t size)
17324|      0|{
17325|      0|    char *tmp;
17326|       |
17327|      0|    {
17328|      0|        if (status == 0UL) {
17329|      0|            {
17330|      0|                write_error(name);
17331|      0|            }
17332|      0|        }
17333|      0|        else {
17334|      0|            {
17335|      0|                tmp = ngettext("%s: Wrote only %lu of %lu byte",
17336|      0|                               "%s: Wrote only %lu of %lu bytes", size);
17337|      0|                error(0, 0, (char const *)tmp, name, status, size);
17338|      0|                exit_status = 2;
17339|      0|            }
17340|      0|        }
17341|      0|        return;
17342|      0|    }
17343|      0|}
17344|       |__attribute__((__noreturn__)) void
17345|       |write_fatal_details(char const *name, ssize_t status, size_t size);
17346|       |void write_fatal_details(char const *name, ssize_t status, size_t size)
17347|      0|{
17348|       |
17349|      0|    {
17350|      0|        {
17351|      0|            write_error_details(name, (size_t)status, size);
17352|      0|            fatal_exit();
17353|      0|        }
17354|      0|    }
17355|      0|}
17356|       |pid_t xfork(void)
17357|      0|{
17358|      0|    pid_t p;
17359|      0|    __pid_t tmp;
17360|      0|    char *tmp___0;
17361|      0|    char *__cil_tmp4;
17362|      0|    char *__cil_tmp5;
17363|       |
17364|      0|    {
17365|      0|        {
17366|      0|            tmp = fork();
17367|      0|            p = tmp;
17368|      0|        }
17369|      0|        if (p == -1) {
17370|      0|            {
17371|      0|                tmp___0 = gettext("child process");
17372|      0|                call_arg_fatal("fork", (char const *)tmp___0);
17373|      0|            }
17374|      0|        }
17375|      0|        return (p);
17376|      0|    }
17377|      0|}
17378|       |void xpipe(int *fd)
17379|      0|{
17380|      0|    char *tmp;
17381|      0|    int tmp___0;
17382|      0|    char *__cil_tmp4;
17383|      0|    char *__cil_tmp5;
17384|       |
17385|      0|    {
17386|      0|        {
17387|      0|            tmp___0 = pipe(fd);
17388|      0|        }
17389|      0|        if (tmp___0 < 0) {
17390|      0|            {
17391|      0|                tmp = gettext("interprocess channel");
17392|      0|                call_arg_fatal("pipe", (char const *)tmp);
17393|      0|            }
17394|      0|        }
17395|      0|        return;
17396|      0|    }
17397|      0|}
17398|       |char const *quote_n(int n, char const *name)
17399|      0|{
17400|      0|    char *tmp;
17401|       |
17402|      0|    {
17403|      0|        {
17404|      0|            tmp = quotearg_n_style(n, (enum quoting_style)5, name);
17405|      0|        }
17406|      0|        return ((char const *)tmp);
17407|      0|    }
17408|      0|}
17409|       |char const *quote(char const *name)
17410|      0|{
17411|      0|    char const *tmp;
17412|       |
17413|      0|    {
17414|      0|        {
17415|      0|            tmp = quote_n(0, name);
17416|      0|        }
17417|      0|        return (tmp);
17418|      0|    }
17419|      0|}
17420|       |/* #pragma merger("0","00a.names.o.i","") */
17421|       |extern int getc_unlocked(FILE *__stream);
17422|       |extern struct passwd *getpwuid(__uid_t __uid);
17423|       |extern struct passwd *getpwnam(char const *__name);
17424|       |extern struct group *getgrgid(__gid_t __gid);
17425|       |extern struct group *getgrnam(char const *__name);
17426|       |_Bool excluded_filename(struct exclude const *ex, char const *f);
17427|       |char filename_terminator;
17428|       |struct exclude *excluded;
17429|       |char const *files_from_option;
17430|       |_Bool same_order_option;
17431|       |_Bool starting_file_option;
17432|       |void init_names(void);
17433|       |void name_add(char const *name);
17434|       |void name_init(void);
17435|       |void name_term(void);
17436|       |void name_close(void);
17437|       |struct name *addname(char const *string, int change_dir___0);
17438|       |void add_avoided_name(char const *name);
17439|       |void request_stdin(char const *option);
17440|       |static char *cached_uname;
17441|       |static char *cached_gname;
17442|       |static uid_t cached_uid;
17443|       |static gid_t cached_gid;
17444|       |static char *cached_no_such_uname;
17445|       |static char *cached_no_such_gname;
17446|       |static uid_t cached_no_such_uid;
17447|       |static gid_t cached_no_such_gid;
17448|       |void uid_to_uname(uid_t uid, char **uname)
17449|      0|{
17450|      0|    struct passwd *passwd;
17451|      0|    char *__cil_tmp4;
17452|      0|    char *__cil_tmp5;
17453|       |
17454|      0|    {
17455|      0|        if (uid != 0U) {
17456|      0|            if (uid == cached_no_such_uid) {
17457|      0|                {
17458|      0|                    *uname = strdup("");
17459|      0|                }
17460|      0|                return;
17461|      0|            }
17462|      0|        }
17463|      0|        if (!cached_uname) {
17464|      0|            goto _L___3;
17465|      0|        }
17466|      0|        else {
17467|      0|            if (uid != cached_uid) {
17468|      0|_L___3 : { /* CIL Label */
17469|      0|                    passwd = getpwuid(uid);
17470|      0|                }
17471|      0|                if (passwd) {
17472|      0|                    {
17473|      0|                        cached_uid = uid;
17474|      0|                        assign_string(&cached_uname, (char const *)passwd->pw_name);
17475|      0|                    }
17476|      0|                }
17477|      0|                else {
17478|      0|                    {
17479|      0|                        cached_no_such_uid = uid;
17480|      0|                        *uname = strdup("");
17481|      0|                    }
17482|      0|                    return;
17483|      0|                }
17484|      0|            }
17485|      0|        }
17486|      0|        {
17487|      0|            *uname = strdup((char const *)cached_uname);
17488|      0|        }
17489|      0|        return;
17490|      0|    }
17491|      0|}
17492|       |void gid_to_gname(gid_t gid, char **gname)
17493|      0|{
17494|      0|    struct group *group;
17495|      0|    char *__cil_tmp4;
17496|      0|    char *__cil_tmp5;
17497|       |
17498|      0|    {
17499|      0|        if (gid != 0U) {
17500|      0|            if (gid == cached_no_such_gid) {
17501|      0|                {
17502|      0|                    *gname = strdup("");
17503|      0|                }
17504|      0|                return;
17505|      0|            }
17506|      0|        }
17507|      0|        if (!cached_gname) {
17508|      0|            goto _L___3;
17509|      0|        }
17510|      0|        else {
17511|      0|            if (gid != cached_gid) {
17512|      0|_L___3 : { /* CIL Label */
17513|      0|                    group = getgrgid(gid);
17514|      0|                }
17515|      0|                if (group) {
17516|      0|                    {
17517|      0|                        cached_gid = gid;
17518|      0|                        assign_string(&cached_gname, (char const *)group->gr_name);
17519|      0|                    }
17520|      0|                }
17521|      0|                else {
17522|      0|                    {
17523|      0|                        cached_no_such_gid = gid;
17524|      0|                        *gname = strdup("");
17525|      0|                    }
17526|      0|                    return;
17527|      0|                }
17528|      0|            }
17529|      0|        }
17530|      0|        {
17531|      0|            *gname = strdup((char const *)cached_gname);
17532|      0|        }
17533|      0|        return;
17534|      0|    }
17535|      0|}
17536|       |int uname_to_uid(char const *uname, uid_t *uidp)
17537|      0|{
17538|      0|    struct passwd *passwd;
17539|      0|    int tmp;
17540|      0|    int tmp___0;
17541|       |
17542|      0|    {
17543|      0|        if (cached_no_such_uname) {
17544|      0|            {
17545|      0|                tmp = strcmp(uname, (char const *)cached_no_such_uname);
17546|      0|            }
17547|      0|            if (tmp == 0) {
17548|      0|                return (0);
17549|      0|            }
17550|      0|        }
17551|      0|        if (!cached_uname) {
17552|      0|            goto _L;
17553|      0|        }
17554|      0|        else {
17555|      0|            if ((int const) * (uname + 0) != (int const) * (cached_uname + 0)) {
17556|      0|                goto _L;
17557|      0|            }
17558|      0|            else {
17559|      0|                {
17560|      0|                    tmp___0 = strcmp(uname, (char const *)cached_uname);
17561|      0|                }
17562|      0|                if (tmp___0 != 0) {
17563|      0|_L : {
17564|      0|                        passwd = getpwnam(uname);
17565|      0|                    }
17566|      0|                    if (passwd) {
17567|      0|                        {
17568|      0|                            cached_uid = passwd->pw_uid;
17569|      0|                            assign_string(&cached_uname, (char const *)passwd->pw_name);
17570|      0|                        }
17571|      0|                    }
17572|      0|                    else {
17573|      0|                        {
17574|      0|                            assign_string(&cached_no_such_uname, uname);
17575|      0|                        }
17576|      0|                        return (0);
17577|      0|                    }
17578|      0|                }
17579|      0|            }
17580|      0|        }
17581|      0|        *uidp = cached_uid;
17582|      0|        return (1);
17583|      0|    }
17584|      0|}
17585|       |int gname_to_gid(char const *gname, gid_t *gidp)
17586|      0|{
17587|      0|    struct group *group;
17588|      0|    int tmp;
17589|      0|    int tmp___0;
17590|       |
17591|      0|    {
17592|      0|        if (cached_no_such_gname) {
17593|      0|            {
17594|      0|                tmp = strcmp(gname, (char const *)cached_no_such_gname);
17595|      0|            }
17596|      0|            if (tmp == 0) {
17597|      0|                return (0);
17598|      0|            }
17599|      0|        }
17600|      0|        if (!cached_gname) {
17601|      0|            goto _L;
17602|      0|        }
17603|      0|        else {
17604|      0|            if ((int const) * (gname + 0) != (int const) * (cached_gname + 0)) {
17605|      0|                goto _L;
17606|      0|            }
17607|      0|            else {
17608|      0|                {
17609|      0|                    tmp___0 = strcmp(gname, (char const *)cached_gname);
17610|      0|                }
17611|      0|                if (tmp___0 != 0) {
17612|      0|_L : {
17613|      0|                        group = getgrnam(gname);
17614|      0|                    }
17615|      0|                    if (group) {
17616|      0|                        {
17617|      0|                            cached_gid = group->gr_gid;
17618|      0|                            assign_string(&cached_gname, gname);
17619|      0|                        }
17620|      0|                    }
17621|      0|                    else {
17622|      0|                        {
17623|      0|                            assign_string(&cached_no_such_gname, gname);
17624|      0|                        }
17625|      0|                        return (0);
17626|      0|                    }
17627|      0|                }
17628|      0|            }
17629|      0|        }
17630|      0|        *gidp = cached_gid;
17631|      0|        return (1);
17632|      0|    }
17633|      0|}
17634|       |static struct name *namelist;
17635|       |static struct name **nametail = &namelist;
17636|       |static char const **name_array;
17637|       |static int allocated_names;
17638|       |static int names;
17639|       |static int name_index;
17640|       |void init_names(void)
17641|      0|{
17642|      0|    void *tmp;
17643|       |
17644|      0|    {
17645|      0|        {
17646|      0|            allocated_names = 10;
17647|      0|            tmp = xmalloc(sizeof(char const *) * (unsigned long)allocated_names);
17648|      0|            name_array = (char const **)tmp;
17649|      0|            names = 0;
17650|      0|        }
17651|      0|        return;
17652|      0|    }
17653|      0|}
17654|       |void name_add(char const *name)
17655|      0|{
17656|      0|    void *tmp;
17657|      0|    int tmp___0;
17658|       |
17659|      0|    {
17660|      0|        if (names == allocated_names) {
17661|      0|            {
17662|      0|                allocated_names *= 2;
17663|      0|                tmp = xrealloc((void *)name_array,
17664|      0|                               sizeof(char const *) * (unsigned long)allocated_names);
17665|      0|                name_array = (char const **)tmp;
17666|      0|            }
17667|      0|        }
17668|      0|        tmp___0 = names;
17669|      0|        names++;
17670|      0|        *(name_array + tmp___0) = name;
17671|      0|        return;
17672|      0|    }
17673|      0|}
17674|       |static FILE *name_file;
17675|       |static char *name_buffer;
17676|       |static size_t name_buffer_length;
17677|       |__inline static int is_pattern(char const *string)
17678|      0|{
17679|      0|    char *tmp;
17680|      0|    char *tmp___0;
17681|      0|    char *tmp___1;
17682|      0|    int tmp___2;
17683|       |
17684|      0|    {
17685|      0|        {
17686|      0|            tmp = strchr(string, '*');
17687|      0|        }
17688|      0|        if (tmp) {
17689|      0|            tmp___2 = 1;
17690|      0|        }
17691|      0|        else {
17692|      0|            {
17693|      0|                tmp___0 = strchr(string, '[');
17694|      0|            }
17695|      0|            if (tmp___0) {
17696|      0|                tmp___2 = 1;
17697|      0|            }
17698|      0|            else {
17699|      0|                {
17700|      0|                    tmp___1 = strchr(string, '?');
17701|      0|                }
17702|      0|                if (tmp___1) {
17703|      0|                    tmp___2 = 1;
17704|      0|                }
17705|      0|                else {
17706|      0|                    tmp___2 = 0;
17707|      0|                }
17708|      0|            }
17709|      0|        }
17710|      0|        return (tmp___2);
17711|      0|    }
17712|      0|}
17713|       |void name_init(void)
17714|      0|{
17715|      0|    void *tmp;
17716|      0|    int tmp___0;
17717|      0|    char *__cil_tmp3;
17718|       |
17719|      0|    {
17720|      0|        {
17721|      0|            tmp = xmalloc((size_t)102);
17722|      0|            name_buffer = (char *)tmp;
17723|      0|            name_buffer_length = (size_t)100;
17724|      0|        }
17725|      0|        if (files_from_option) {
17726|      0|            {
17727|      0|                tmp___0 = strcmp(files_from_option, "-");
17728|      0|            }
17729|      0|            if (tmp___0) {
17730|      0|                {
17731|      0|                    name_file = fopen((char const * /* __restrict  */)files_from_option,
17732|      0|                                      (char const * /* __restrict  */) "r");
17733|      0|                }
17734|      0|                if (!name_file) {
17735|      0|                    {
17736|      0|                        open_fatal(files_from_option);
17737|      0|                    }
17738|      0|                }
17739|      0|            }
17740|      0|            else {
17741|      0|                {
17742|      0|                    request_stdin("-T");
17743|      0|                    name_file = stdin;
17744|      0|                }
17745|      0|            }
17746|      0|        }
17747|      0|        return;
17748|      0|    }
17749|      0|}
17750|       |void name_term(void)
17751|      0|{
17752|       |
17753|      0|    {
17754|      0|        {
17755|      0|            free((void *)name_buffer);
17756|      0|            free((void *)name_array);
17757|      0|        }
17758|      0|        return;
17759|      0|    }
17760|      0|}
17761|       |static int read_name_from_file(void)
17762|      0|{
17763|      0|    int character;
17764|      0|    size_t counter;
17765|      0|    void *tmp;
17766|      0|    size_t tmp___0;
17767|      0|    void *tmp___1;
17768|       |
17769|      0|    {
17770|      0|        counter = (size_t)0;
17771|      0|        {
17772|      0|            while (1) {
17773|      0|while_continue: /* CIL Label */
17774|      0|                ;
17775|      0|                {
17776|      0|                    character = getc_unlocked(name_file);
17777|      0|                }
17778|      0|                if (character != -1) {
17779|      0|                    if (!(character != (int)filename_terminator)) {
17780|      0|                        goto while_break;
17781|      0|                    }
17782|      0|                }
17783|      0|                else {
17784|      0|                    goto while_break;
17785|      0|                }
17786|      0|                if (counter == name_buffer_length) {
17787|      0|                    if (name_buffer_length * 2UL < name_buffer_length) {
17788|      0|                        {
17789|      0|                            xalloc_die();
17790|      0|                        }
17791|      0|                    }
17792|      0|                    {
17793|      0|                        name_buffer_length *= 2UL;
17794|      0|                        tmp = xrealloc((void *)name_buffer, name_buffer_length + 2UL);
17795|      0|                        name_buffer = (char *)tmp;
17796|      0|                    }
17797|      0|                }
17798|      0|                tmp___0 = counter;
17799|      0|                counter++;
17800|      0|                *(name_buffer + tmp___0) = (char)character;
17801|      0|            }
17802|      0|while_break: /* CIL Label */
17803|      0|            ;
17804|      0|        }
17805|      0|        if (counter == 0UL) {
17806|      0|            if (character == -1) {
17807|      0|                return (0);
17808|      0|            }
17809|      0|        }
17810|      0|        if (counter == name_buffer_length) {
17811|      0|            if (name_buffer_length * 2UL < name_buffer_length) {
17812|      0|                {
17813|      0|                    xalloc_die();
17814|      0|                }
17815|      0|            }
17816|      0|            {
17817|      0|                name_buffer_length *= 2UL;
17818|      0|                tmp___1 = xrealloc((void *)name_buffer, name_buffer_length + 2UL);
17819|      0|                name_buffer = (char *)tmp___1;
17820|      0|            }
17821|      0|        }
17822|      0|        *(name_buffer + counter) = (char)'\000';
17823|      0|        return (1);
17824|      0|    }
17825|      0|}
17826|       |char *name_next(int change_dirs)
17827|      0|{
17828|      0|    char const *source;
17829|      0|    char *cursor;
17830|      0|    int chdir_flag;
17831|      0|    int tmp;
17832|      0|    size_t source_len;
17833|      0|    int tmp___0;
17834|      0|    void *tmp___1;
17835|      0|    size_t tmp___2;
17836|      0|    char *tmp___3;
17837|      0|    int tmp___4;
17838|      0|    int tmp___5;
17839|      0|    char *tmp___6;
17840|      0|    char *__cil_tmp14;
17841|       |
17842|      0|    {
17843|      0|        chdir_flag = 0;
17844|      0|        if ((int)filename_terminator == 0) {
17845|      0|            change_dirs = 0;
17846|      0|        }
17847|      0|        {
17848|      0|            while (1) {
17849|      0|while_continue: /* CIL Label */
17850|      0|                ;
17851|      0|                if (name_index == names) {
17852|      0|                    if (!name_file) {
17853|      0|                        goto while_break;
17854|      0|                    }
17855|      0|                    {
17856|      0|                        tmp = read_name_from_file();
17857|      0|                    }
17858|      0|                    if (!tmp) {
17859|      0|                        goto while_break;
17860|      0|                    }
17861|      0|                }
17862|      0|                else {
17863|      0|                    {
17864|      0|                        tmp___0 = name_index;
17865|      0|                        name_index++;
17866|      0|                        source = *(name_array + tmp___0);
17867|      0|                        source_len = strlen(source);
17868|      0|                    }
17869|      0|                    if (name_buffer_length < source_len) {
17870|      0|                        {
17871|      0|                            while (1) {
17872|      0|while_continue___0: /* CIL Label */
17873|      0|                                ;
17874|      0|                                name_buffer_length *= 2UL;
17875|      0|                                if (!name_buffer_length) {
17876|      0|                                    {
17877|      0|                                        xalloc_die();
17878|      0|                                    }
17879|      0|                                }
17880|      0|                                if (!(name_buffer_length < source_len)) {
17881|      0|                                    goto while_break___0;
17882|      0|                                }
17883|      0|                            }
17884|      0|while_break___0: /* CIL Label */
17885|      0|                            ;
17886|      0|                        }
17887|      0|                        {
17888|      0|                            free((void *)name_buffer);
17889|      0|                            tmp___1 = xmalloc(name_buffer_length + 2UL);
17890|      0|                            name_buffer = (char *)tmp___1;
17891|      0|                        }
17892|      0|                    }
17893|      0|                    {
17894|      0|                        strcpy((char * /* __restrict  */)name_buffer,
17895|      0|                               (char const * /* __restrict  */)source);
17896|      0|                    }
17897|      0|                }
17898|      0|                {
17899|      0|                    tmp___2 = strlen((char const *)name_buffer);
17900|      0|                    cursor = (name_buffer + tmp___2) - 1;
17901|      0|                }
17902|      0|                {
17903|      0|                    while (1) {
17904|      0|while_continue___1: /* CIL Label */
17905|      0|                        ;
17906|      0|                        if ((unsigned long)cursor > (unsigned long)name_buffer) {
17907|      0|                            if (!((int)*cursor == 47)) {
17908|      0|                                goto while_break___1;
17909|      0|                            }
17910|      0|                        }
17911|      0|                        else {
17912|      0|                            goto while_break___1;
17913|      0|                        }
17914|      0|                        tmp___3 = cursor;
17915|      0|                        cursor--;
17916|      0|                        *tmp___3 = (char)'\000';
17917|      0|                    }
17918|      0|while_break___1: /* CIL Label */
17919|      0|                    ;
17920|      0|                }
17921|      0|                if (chdir_flag) {
17922|      0|                    {
17923|      0|                        tmp___4 = chdir((char const *)name_buffer);
17924|      0|                    }
17925|      0|                    if (tmp___4 < 0) {
17926|      0|                        {
17927|      0|                            chdir_fatal((char const *)name_buffer);
17928|      0|                        }
17929|      0|                    }
17930|      0|                    chdir_flag = 0;
17931|      0|                }
17932|      0|                else {
17933|      0|                    if (change_dirs) {
17934|      0|                        {
17935|      0|                            tmp___5 = strcmp((char const *)name_buffer, "-C");
17936|      0|                        }
17937|      0|                        if (tmp___5 == 0) {
17938|      0|                            chdir_flag = 1;
17939|      0|                        }
17940|      0|                        else {
17941|      0|                            {
17942|      0|                                unquote_string(name_buffer);
17943|      0|                            }
17944|      0|                            return (name_buffer);
17945|      0|                        }
17946|      0|                    }
17947|      0|                    else {
17948|      0|                        {
17949|      0|                            unquote_string(name_buffer);
17950|      0|                        }
17951|      0|                        return (name_buffer);
17952|      0|                    }
17953|      0|                }
17954|      0|            }
17955|      0|while_break: /* CIL Label */
17956|      0|            ;
17957|      0|        }
17958|      0|        if (name_file) {
17959|      0|            if (chdir_flag) {
17960|      0|                {
17961|      0|                    tmp___6 = gettext("Missing file name after -C");
17962|      0|                    error(0, 0, (char const *)tmp___6);
17963|      0|                    fatal_exit();
17964|      0|                }
17965|      0|            }
17966|      0|        }
17967|      0|        return ((char *)0);
17968|      0|    }
17969|      0|}
17970|       |void name_close(void)
17971|      0|{
17972|      0|    int tmp;
17973|       |
17974|      0|    {
17975|      0|        if (name_file) {
17976|      0|            if ((unsigned long)name_file != (unsigned long)stdin) {
17977|      0|                {
17978|      0|                    tmp = fclose(name_file);
17979|      0|                }
17980|      0|                if (tmp != 0) {
17981|      0|                    {
17982|      0|                        close_error((char const *)name_buffer);
17983|      0|                    }
17984|      0|                }
17985|      0|            }
17986|      0|        }
17987|      0|        return;
17988|      0|    }
17989|      0|}
17990|       |static struct name *buffer___0;
17991|       |static size_t allocated_size;
17992|       |static int change_dir;
17993|       |void name_gather(void)
17994|      0|{
17995|      0|    char const *name;
17996|      0|    void *tmp;
17997|      0|    char const *dir;
17998|      0|    char *tmp___0;
17999|      0|    char *tmp___1;
18000|      0|    char *tmp___2;
18001|      0|    char *tmp___3;
18002|      0|    int tmp___4;
18003|      0|    size_t needed_size;
18004|      0|    void *tmp___5;
18005|      0|    int change_dir___0;
18006|      0|    int change_dir0;
18007|      0|    char const *dir___0;
18008|      0|    char *tmp___6;
18009|      0|    char *tmp___7;
18010|      0|    char *tmp___8;
18011|      0|    char *tmp___9;
18012|      0|    int tmp___10;
18013|      0|    char *__cil_tmp19;
18014|      0|    char *__cil_tmp20;
18015|       |
18016|      0|    {
18017|      0|        if (same_order_option) {
18018|      0|            if (allocated_size == 0UL) {
18019|      0|                {
18020|      0|                    allocated_size =
18021|      0|                        ((unsigned long)(&((struct name *)0)->name) + 100UL) + 1UL;
18022|      0|                    tmp = xmalloc(allocated_size);
18023|      0|                    buffer___0 = (struct name *)tmp;
18024|      0|                    memset((void *)buffer___0, 0, allocated_size);
18025|      0|                }
18026|      0|            }
18027|      0|            {
18028|      0|                while (1) {
18029|      0|while_continue: /* CIL Label */
18030|      0|                    ;
18031|      0|                    {
18032|      0|                        tmp___3 = name_next(0);
18033|      0|                        name = (char const *)tmp___3;
18034|      0|                    }
18035|      0|                    if (name) {
18036|      0|                        {
18037|      0|                            tmp___4 = strcmp(name, "-C");
18038|      0|                        }
18039|      0|                        if (!(tmp___4 == 0)) {
18040|      0|                            goto while_break;
18041|      0|                        }
18042|      0|                    }
18043|      0|                    else {
18044|      0|                        goto while_break;
18045|      0|                    }
18046|      0|                    {
18047|      0|                        tmp___0 = name_next(0);
18048|      0|                        dir = (char const *)tmp___0;
18049|      0|                    }
18050|      0|                    if (!dir) {
18051|      0|                        {
18052|      0|                            tmp___1 = gettext("Missing file name after -C");
18053|      0|                            error(0, 0, (char const *)tmp___1);
18054|      0|                            fatal_exit();
18055|      0|                        }
18056|      0|                    }
18057|      0|                    {
18058|      0|                        tmp___2 = xstrdup(dir);
18059|      0|                        change_dir = chdir_arg((char const *)tmp___2);
18060|      0|                    }
18061|      0|                }
18062|      0|while_break: /* CIL Label */
18063|      0|                ;
18064|      0|            }
18065|      0|            if (name) {
18066|      0|                {
18067|      0|                    buffer___0->length = strlen(name);
18068|      0|                    needed_size = ((unsigned long)(&((struct name *)0)->name) +
18069|      0|                                   buffer___0->length) +
18070|      0|                                  1UL;
18071|      0|                }
18072|      0|                if (allocated_size < needed_size) {
18073|      0|                    {
18074|      0|                        while (1) {
18075|      0|while_continue___0: /* CIL Label */
18076|      0|                            ;
18077|      0|                            allocated_size *= 2UL;
18078|      0|                            if (!allocated_size) {
18079|      0|                                {
18080|      0|                                    xalloc_die();
18081|      0|                                }
18082|      0|                            }
18083|      0|                            if (!(allocated_size < needed_size)) {
18084|      0|                                goto while_break___0;
18085|      0|                            }
18086|      0|                        }
18087|      0|while_break___0: /* CIL Label */
18088|      0|                        ;
18089|      0|                    }
18090|      0|                    {
18091|      0|                        tmp___5 = xrealloc((void *)buffer___0, allocated_size);
18092|      0|                        buffer___0 = (struct name *)tmp___5;
18093|      0|                    }
18094|      0|                }
18095|      0|                {
18096|      0|                    buffer___0->change_dir = change_dir;
18097|      0|                    strcpy((char * /* __restrict  */)(buffer___0->name),
18098|      0|                           (char const * /* __restrict  */)name);
18099|      0|                    buffer___0->next = (struct name *)0;
18100|      0|                    buffer___0->found_count = (uintmax_t)0;
18101|      0|                    namelist = buffer___0;
18102|      0|                    nametail = &namelist->next;
18103|      0|                }
18104|      0|            }
18105|      0|            else {
18106|      0|                if (change_dir) {
18107|      0|                    {
18108|      0|                        addname((char const *)0, change_dir);
18109|      0|                    }
18110|      0|                }
18111|      0|            }
18112|      0|        }
18113|      0|        else {
18114|      0|            change_dir___0 = 0;
18115|      0|            {
18116|      0|                while (1) {
18117|      0|while_continue___1: /* CIL Label */
18118|      0|                    ;
18119|      0|                    change_dir0 = change_dir___0;
18120|      0|                    {
18121|      0|                        while (1) {
18122|      0|while_continue___2: /* CIL Label */
18123|      0|                            ;
18124|      0|                            {
18125|      0|                                tmp___9 = name_next(0);
18126|      0|                                name = (char const *)tmp___9;
18127|      0|                            }
18128|      0|                            if (name) {
18129|      0|                                {
18130|      0|                                    tmp___10 = strcmp(name, "-C");
18131|      0|                                }
18132|      0|                                if (!(tmp___10 == 0)) {
18133|      0|                                    goto while_break___2;
18134|      0|                                }
18135|      0|                            }
18136|      0|                            else {
18137|      0|                                goto while_break___2;
18138|      0|                            }
18139|      0|                            {
18140|      0|                                tmp___6 = name_next(0);
18141|      0|                                dir___0 = (char const *)tmp___6;
18142|      0|                            }
18143|      0|                            if (!dir___0) {
18144|      0|                                {
18145|      0|                                    tmp___7 = gettext("Missing file name after -C");
18146|      0|                                    error(0, 0, (char const *)tmp___7);
18147|      0|                                    fatal_exit();
18148|      0|                                }
18149|      0|                            }
18150|      0|                            {
18151|      0|                                tmp___8 = xstrdup(dir___0);
18152|      0|                                change_dir___0 = chdir_arg((char const *)tmp___8);
18153|      0|                            }
18154|      0|                        }
18155|      0|while_break___2: /* CIL Label */
18156|      0|                        ;
18157|      0|                    }
18158|      0|                    if (name) {
18159|      0|                        {
18160|      0|                            addname(name, change_dir___0);
18161|      0|                        }
18162|      0|                    }
18163|      0|                    else {
18164|      0|                        if (change_dir___0 != change_dir0) {
18165|      0|                            {
18166|      0|                                addname((char const *)0, change_dir___0);
18167|      0|                            }
18168|      0|                        }
18169|      0|                        goto while_break___1;
18170|      0|                    }
18171|      0|                }
18172|      0|while_break___1: /* CIL Label */
18173|      0|                ;
18174|      0|            }
18175|      0|        }
18176|      0|        return;
18177|      0|    }
18178|      0|}
18179|       |struct name *addname(char const *string, int change_dir___0)
18180|      0|{
18181|      0|    size_t length;
18182|      0|    size_t tmp;
18183|      0|    size_t tmp___0;
18184|      0|    struct name *name;
18185|      0|    void *tmp___1;
18186|      0|    int tmp___2;
18187|       |
18188|      0|    {
18189|      0|        if (string) {
18190|      0|            {
18191|      0|                tmp = strlen(string);
18192|      0|                tmp___0 = tmp;
18193|      0|            }
18194|      0|        }
18195|      0|        else {
18196|      0|            tmp___0 = (size_t)0;
18197|      0|        }
18198|      0|        {
18199|      0|            length = tmp___0;
18200|      0|            tmp___1 =
18201|      0|                xmalloc(((unsigned long)(&((struct name *)0)->name) + length) + 1UL);
18202|      0|            name = (struct name *)tmp___1;
18203|      0|        }
18204|      0|        if (string) {
18205|      0|            {
18206|      0|                name->fake = (char)0;
18207|      0|                strcpy((char * /* __restrict  */)(name->name),
18208|      0|                       (char const * /* __restrict  */)string);
18209|      0|            }
18210|      0|        }
18211|      0|        else {
18212|      0|            name->fake = (char)1;
18213|      0|            name->name[0] = (char)0;
18214|      0|        }
18215|      0|        name->next = (struct name *)0;
18216|      0|        name->length = length;
18217|      0|        name->found_count = (uintmax_t)0;
18218|      0|        name->regexp = (char)0;
18219|      0|        name->firstch = (char)1;
18220|      0|        name->change_dir = change_dir___0;
18221|      0|        name->dir_contents = (char const *)0;
18222|      0|        if (string) {
18223|      0|            {
18224|      0|                tmp___2 = is_pattern(string);
18225|      0|            }
18226|      0|            if (tmp___2) {
18227|      0|                name->regexp = (char)1;
18228|      0|                if ((int const) * (string + 0) == 42) {
18229|      0|                    name->firstch = (char)0;
18230|      0|                }
18231|      0|                else {
18232|      0|                    if ((int const) * (string + 0) == 91) {
18233|      0|                        name->firstch = (char)0;
18234|      0|                    }
18235|      0|                    else {
18236|      0|                        if ((int const) * (string + 0) == 63) {
18237|      0|                            name->firstch = (char)0;
18238|      0|                        }
18239|      0|                    }
18240|      0|                }
18241|      0|            }
18242|      0|        }
18243|      0|        *nametail = name;
18244|      0|        nametail = &name->next;
18245|      0|        return (name);
18246|      0|    }
18247|      0|}
18248|       |static struct name *namelist_match(char const *path, size_t length)
18249|      0|{
18250|      0|    struct name *p;
18251|      0|    int tmp;
18252|      0|    int tmp___0;
18253|      0|    int tmp___1;
18254|      0|    int tmp___2;
18255|       |
18256|      0|    {
18257|      0|        p = namelist;
18258|      0|        {
18259|      0|            while (1) {
18260|      0|while_continue: /* CIL Label */
18261|      0|                ;
18262|      0|                if (!p) {
18263|      0|                    goto while_break;
18264|      0|                }
18265|      0|                if (p->firstch) {
18266|      0|                    if ((int)p->name[0] != (int)*(path + 0)) {
18267|      0|                        goto __Cont;
18268|      0|                    }
18269|      0|                }
18270|      0|                if (p->regexp) {
18271|      0|                    {
18272|      0|                        tmp = fnmatch((char const *)(p->name), path, recursion_option);
18273|      0|                        tmp___2 = tmp == 0;
18274|      0|                    }
18275|      0|                }
18276|      0|                else {
18277|      0|                    if (p->length <= length) {
18278|      0|                        if ((int const) * (path + p->length) == 0) {
18279|      0|                            goto _L___3;
18280|      0|                        }
18281|      0|                        else {
18282|      0|                            if ((int const) * (path + p->length) == 47) {
18283|      0|                                if (recursion_option) {
18284|      0|_L___3 : { /* CIL Label */
18285|      0|                                        tmp___0 = memcmp((void const *)path, (void const *)(p->name),
18286|      0|                                                         p->length);
18287|      0|                                    }
18288|      0|                                    if (tmp___0 == 0) {
18289|      0|                                        tmp___1 = 1;
18290|      0|                                    }
18291|      0|                                    else {
18292|      0|                                        tmp___1 = 0;
18293|      0|                                    }
18294|      0|                                }
18295|      0|                                else {
18296|      0|                                    tmp___1 = 0;
18297|      0|                                }
18298|      0|                            }
18299|      0|                            else {
18300|      0|                                tmp___1 = 0;
18301|      0|                            }
18302|      0|                        }
18303|      0|                    }
18304|      0|                    else {
18305|      0|                        tmp___1 = 0;
18306|      0|                    }
18307|      0|                    tmp___2 = tmp___1;
18308|      0|                }
18309|      0|                if (tmp___2) {
18310|      0|                    return (p);
18311|      0|                }
18312|      0|__Cont:
18313|      0|                p = p->next;
18314|      0|            }
18315|      0|while_break: /* CIL Label */
18316|      0|            ;
18317|      0|        }
18318|      0|        return ((struct name *)0);
18319|      0|    }
18320|      0|}
18321|       |int name_match(char const *path)
18322|      0|{
18323|      0|    size_t length;
18324|      0|    size_t tmp;
18325|      0|    struct name *cursor;
18326|      0|    uintmax_t tmp___0;
18327|       |
18328|      0|    {
18329|      0|        {
18330|      0|            tmp = strlen(path);
18331|      0|            length = tmp;
18332|      0|        }
18333|      0|        {
18334|      0|            while (1) {
18335|      0|while_continue: /* CIL Label */
18336|      0|                ;
18337|      0|                cursor = namelist;
18338|      0|                if (!cursor) {
18339|      0|                    return (!files_from_option);
18340|      0|                }
18341|      0|                if (cursor->fake) {
18342|      0|                    {
18343|      0|                        chdir_do(cursor->change_dir);
18344|      0|                        namelist = (struct name *)0;
18345|      0|                        nametail = &namelist;
18346|      0|                    }
18347|      0|                    return (!files_from_option);
18348|      0|                }
18349|      0|                {
18350|      0|                    cursor = namelist_match(path, length);
18351|      0|                }
18352|      0|                if (cursor) {
18353|      0|                    if ((int const) * (path + cursor->length) == 47) {
18354|      0|                        if (recursion_option) {
18355|      0|                            if (cursor->found_count == 0UL) {
18356|      0|                                (cursor->found_count)++;
18357|      0|                            }
18358|      0|                        }
18359|      0|                        else {
18360|      0|                            (cursor->found_count)++;
18361|      0|                        }
18362|      0|                    }
18363|      0|                    else {
18364|      0|                        (cursor->found_count)++;
18365|      0|                    }
18366|      0|                    if (starting_file_option) {
18367|      0|                        {
18368|      0|                            free((void *)namelist);
18369|      0|                            namelist = (struct name *)0;
18370|      0|                            nametail = &namelist;
18371|      0|                        }
18372|      0|                    }
18373|      0|                    {
18374|      0|                        chdir_do(cursor->change_dir);
18375|      0|                    }
18376|      0|                    if (occurrence_option == 0UL) {
18377|      0|                        tmp___0 = cursor->found_count;
18378|      0|                    }
18379|      0|                    else {
18380|      0|                        tmp___0 = (uintmax_t)(cursor->found_count == occurrence_option);
18381|      0|                    }
18382|      0|                    return ((int)tmp___0);
18383|      0|                }
18384|      0|                if (same_order_option) {
18385|      0|                    if (namelist->found_count) {
18386|      0|                        {
18387|      0|                            name_gather();
18388|      0|                        }
18389|      0|                        if (namelist->found_count) {
18390|      0|                            return (0);
18391|      0|                        }
18392|      0|                    }
18393|      0|                    else {
18394|      0|                        return (0);
18395|      0|                    }
18396|      0|                }
18397|      0|                else {
18398|      0|                    return (0);
18399|      0|                }
18400|      0|            }
18401|      0|while_break: /* CIL Label */
18402|      0|            ;
18403|      0|        }
18404|      0|    }
18405|      0|}
18406|       |_Bool all_names_found(struct tar_stat_info *p)
18407|      0|{
18408|      0|    struct name const *cursor;
18409|      0|    size_t len;
18410|      0|    uintmax_t tmp;
18411|       |
18412|      0|    {
18413|      0|        if (!p->file_name) {
18414|      0|            return ((_Bool)0);
18415|      0|        }
18416|      0|        else {
18417|      0|            if (occurrence_option == 0UL) {
18418|      0|                return ((_Bool)0);
18419|      0|            }
18420|      0|            else {
18421|      0|                if (p->had_trailing_slash) {
18422|      0|                    return ((_Bool)0);
18423|      0|                }
18424|      0|            }
18425|      0|        }
18426|      0|        {
18427|      0|            len = strlen((char const *)p->file_name);
18428|      0|            cursor = (struct name const *)namelist;
18429|      0|        }
18430|      0|        {
18431|      0|            while (1) {
18432|      0|while_continue: /* CIL Label */
18433|      0|                ;
18434|      0|                if (!cursor) {
18435|      0|                    goto while_break;
18436|      0|                }
18437|      0|                if (cursor->regexp) {
18438|      0|                    return ((_Bool)0);
18439|      0|                }
18440|      0|                else {
18441|      0|                    if (occurrence_option == 0UL) {
18442|      0|                        tmp = cursor->found_count;
18443|      0|                    }
18444|      0|                    else {
18445|      0|                        tmp = (uintmax_t const)(cursor->found_count >=
18446|      0|                                                (uintmax_t const)occurrence_option);
18447|      0|                    }
18448|      0|                    if (tmp) {
18449|      0|_L___3: /* CIL Label */
18450|      0|                        if (len >= (size_t)cursor->length) {
18451|      0|                            if ((int)*(p->file_name + cursor->length) == 47) {
18452|      0|                                return ((_Bool)0);
18453|      0|                            }
18454|      0|                        }
18455|      0|                    }
18456|      0|                    else {
18457|      0|                        if (!cursor->fake) {
18458|      0|                            return ((_Bool)0);
18459|      0|                        }
18460|      0|                        else {
18461|      0|                            goto _L___3;
18462|      0|                        }
18463|      0|                    }
18464|      0|                }
18465|      0|                cursor = (struct name const *)cursor->next;
18466|      0|            }
18467|      0|while_break: /* CIL Label */
18468|      0|            ;
18469|      0|        }
18470|      0|        return ((_Bool)1);
18471|      0|    }
18472|      0|}
18473|       |void names_notfound(void)
18474|      0|{
18475|      0|    struct name const *cursor;
18476|      0|    char *tmp;
18477|      0|    char *tmp___0;
18478|      0|    char *tmp___1;
18479|      0|    char *tmp___2;
18480|      0|    char *name;
18481|      0|    char *tmp___3;
18482|      0|    char *tmp___4;
18483|      0|    uintmax_t tmp___5;
18484|      0|    char *__cil_tmp10;
18485|      0|    char *__cil_tmp11;
18486|      0|    char *__cil_tmp12;
18487|       |
18488|      0|    {
18489|      0|        cursor = (struct name const *)namelist;
18490|      0|        {
18491|      0|            while (1) {
18492|      0|while_continue: /* CIL Label */
18493|      0|                ;
18494|      0|                if (!cursor) {
18495|      0|                    goto while_break;
18496|      0|                }
18497|      0|                if (occurrence_option == 0UL) {
18498|      0|                    tmp___5 = cursor->found_count;
18499|      0|                }
18500|      0|                else {
18501|      0|                    tmp___5 = (uintmax_t const)(cursor->found_count >=
18502|      0|                                                (uintmax_t const)occurrence_option);
18503|      0|                }
18504|      0|                if (!tmp___5) {
18505|      0|                    if (!cursor->fake) {
18506|      0|                        if (cursor->found_count == 0UL) {
18507|      0|                            {
18508|      0|                                tmp = quotearg_colon((char const *)(cursor->name));
18509|      0|                                tmp___0 = gettext("%s: Not found in archive");
18510|      0|                                error(0, 0, (char const *)tmp___0, tmp);
18511|      0|                                exit_status = 2;
18512|      0|                            }
18513|      0|                        }
18514|      0|                        else {
18515|      0|                            {
18516|      0|                                tmp___1 = quotearg_colon((char const *)(cursor->name));
18517|      0|                                tmp___2 =
18518|      0|                                    gettext("%s: Required occurrence not found in archive");
18519|      0|                                error(0, 0, (char const *)tmp___2, tmp___1);
18520|      0|                                exit_status = 2;
18521|      0|                            }
18522|      0|                        }
18523|      0|                    }
18524|      0|                }
18525|      0|                cursor = (struct name const *)cursor->next;
18526|      0|            }
18527|      0|while_break: /* CIL Label */
18528|      0|            ;
18529|      0|        }
18530|      0|        namelist = (struct name *)0;
18531|      0|        nametail = &namelist;
18532|      0|        if (same_order_option) {
18533|      0|            {
18534|      0|                while (1) {
18535|      0|while_continue___0: /* CIL Label */
18536|      0|                    ;
18537|      0|                    {
18538|      0|                        name = name_next(1);
18539|      0|                    }
18540|      0|                    if (!((unsigned long)name != (unsigned long)((void *)0))) {
18541|      0|                        goto while_break___0;
18542|      0|                    }
18543|      0|                    {
18544|      0|                        tmp___3 = quotearg_colon((char const *)name);
18545|      0|                        tmp___4 = gettext("%s: Not found in archive");
18546|      0|                        error(0, 0, (char const *)tmp___4, tmp___3);
18547|      0|                        exit_status = 2;
18548|      0|                    }
18549|      0|                }
18550|      0|while_break___0: /* CIL Label */
18551|      0|                ;
18552|      0|            }
18553|      0|        }
18554|      0|        return;
18555|      0|    }
18556|      0|}
18557|       |static struct name *merge_sort(struct name *list, int length,
18558|       |                               int (*compare)(struct name const *,
18559|       |                                       struct name const *))
18560|      0|{
18561|      0|    struct name *first_list;
18562|      0|    struct name *second_list;
18563|      0|    int first_length;
18564|      0|    int second_length;
18565|      0|    struct name *result;
18566|      0|    struct name **merge_point;
18567|      0|    struct name *cursor;
18568|      0|    int counter;
18569|      0|    int tmp;
18570|      0|    int tmp___0;
18571|       |
18572|      0|    {
18573|      0|        if (length == 1) {
18574|      0|            return (list);
18575|      0|        }
18576|      0|        if (length == 2) {
18577|      0|            {
18578|      0|                tmp = (*compare)((struct name const *)list,
18579|      0|                                 (struct name const *)list->next);
18580|      0|            }
18581|      0|            if (tmp > 0) {
18582|      0|                result = list->next;
18583|      0|                result->next = list;
18584|      0|                list->next = (struct name *)0;
18585|      0|                return (result);
18586|      0|            }
18587|      0|            return (list);
18588|      0|        }
18589|      0|        first_list = list;
18590|      0|        first_length = (length + 1) / 2;
18591|      0|        second_length = length / 2;
18592|      0|        cursor = list;
18593|      0|        counter = first_length - 1;
18594|      0|        {
18595|      0|            while (1) {
18596|      0|while_continue: /* CIL Label */
18597|      0|                ;
18598|      0|                if (!counter) {
18599|      0|                    goto while_break;
18600|      0|                }
18601|      0|                goto __Cont;
18602|      0|__Cont:
18603|      0|                cursor = cursor->next;
18604|      0|                counter--;
18605|      0|            }
18606|      0|while_break: /* CIL Label */
18607|      0|            ;
18608|      0|        }
18609|      0|        {
18610|      0|            second_list = cursor->next;
18611|      0|            cursor->next = (struct name *)0;
18612|      0|            first_list = merge_sort(first_list, first_length, compare);
18613|      0|            second_list = merge_sort(second_list, second_length, compare);
18614|      0|            merge_point = &result;
18615|      0|        }
18616|      0|        {
18617|      0|            while (1) {
18618|      0|while_continue___0: /* CIL Label */
18619|      0|                ;
18620|      0|                if (first_list) {
18621|      0|                    if (!second_list) {
18622|      0|                        goto while_break___0;
18623|      0|                    }
18624|      0|                }
18625|      0|                else {
18626|      0|                    goto while_break___0;
18627|      0|                }
18628|      0|                {
18629|      0|                    tmp___0 = (*compare)((struct name const *)first_list,
18630|      0|                                         (struct name const *)second_list);
18631|      0|                }
18632|      0|                if (tmp___0 < 0) {
18633|      0|                    cursor = first_list->next;
18634|      0|                    *merge_point = first_list;
18635|      0|                    merge_point = &first_list->next;
18636|      0|                    first_list = cursor;
18637|      0|                }
18638|      0|                else {
18639|      0|                    cursor = second_list->next;
18640|      0|                    *merge_point = second_list;
18641|      0|                    merge_point = &second_list->next;
18642|      0|                    second_list = cursor;
18643|      0|                }
18644|      0|            }
18645|      0|while_break___0: /* CIL Label */
18646|      0|            ;
18647|      0|        }
18648|      0|        if (first_list) {
18649|      0|            *merge_point = first_list;
18650|      0|        }
18651|      0|        else {
18652|      0|            *merge_point = second_list;
18653|      0|        }
18654|      0|        return (result);
18655|      0|    }
18656|      0|}
18657|       |static int compare_names(struct name const *n1, struct name const *n2)
18658|      0|{
18659|      0|    int found_diff;
18660|      0|    int tmp;
18661|      0|    int tmp___0;
18662|      0|    uintmax_t tmp___1;
18663|      0|    uintmax_t tmp___2;
18664|       |
18665|      0|    {
18666|      0|        if (occurrence_option == 0UL) {
18667|      0|            tmp___1 = n2->found_count;
18668|      0|        }
18669|      0|        else {
18670|      0|            tmp___1 = (uintmax_t const)(n2->found_count >=
18671|      0|                                        (uintmax_t const)occurrence_option);
18672|      0|        }
18673|      0|        if (occurrence_option == 0UL) {
18674|      0|            tmp___2 = n1->found_count;
18675|      0|        }
18676|      0|        else {
18677|      0|            tmp___2 = (uintmax_t const)(n1->found_count >=
18678|      0|                                        (uintmax_t const)occurrence_option);
18679|      0|        }
18680|      0|        found_diff = (int)(tmp___1 - tmp___2);
18681|      0|        if (found_diff) {
18682|      0|            tmp___0 = found_diff;
18683|      0|        }
18684|      0|        else {
18685|      0|            {
18686|      0|                tmp = strcmp((char const *)(n1->name), (char const *)(n2->name));
18687|      0|                tmp___0 = tmp;
18688|      0|            }
18689|      0|        }
18690|      0|        return (tmp___0);
18691|      0|    }
18692|      0|}
18693|       |static void add_hierarchy_to_namelist(struct name *name, dev_t device)
18694|      0|{
18695|      0|    char *path;
18696|      0|    char *buffer___2;
18697|      0|    char *tmp;
18698|      0|    size_t name_length;
18699|      0|    size_t allocated_length;
18700|      0|    char *namebuf;
18701|      0|    void *tmp___0;
18702|      0|    char *string;
18703|      0|    size_t string_length;
18704|      0|    int change_dir___0;
18705|      0|    size_t tmp___1;
18706|      0|    void *tmp___2;
18707|      0|    struct name *tmp___3;
18708|      0|    char *__cil_tmp16;
18709|       |
18710|      0|    {
18711|      0|        {
18712|      0|            path = name->name;
18713|      0|            tmp = get_directory_contents(path, device);
18714|      0|            buffer___2 = tmp;
18715|      0|        }
18716|      0|        if (!buffer___2) {
18717|      0|            name->dir_contents = "\000\000\000\000";
18718|      0|        }
18719|      0|        else {
18720|      0|            name_length = name->length;
18721|      0|            if (name_length >= 100UL) {
18722|      0|                allocated_length = name_length + 100UL;
18723|      0|            }
18724|      0|            else {
18725|      0|                allocated_length = (size_t)100;
18726|      0|            }
18727|      0|            {
18728|      0|                tmp___0 = xmalloc(allocated_length + 1UL);
18729|      0|                namebuf = (char *)tmp___0;
18730|      0|                change_dir___0 = name->change_dir;
18731|      0|                name->dir_contents = (char const *)buffer___2;
18732|      0|                strcpy((char * /* __restrict  */)namebuf,
18733|      0|                       (char const * /* __restrict  */)path);
18734|      0|            }
18735|      0|            if (!((int)*(namebuf + (name_length - 1UL)) == 47)) {
18736|      0|                tmp___1 = name_length;
18737|      0|                name_length++;
18738|      0|                *(namebuf + tmp___1) = (char)'/';
18739|      0|                *(namebuf + name_length) = (char)'\000';
18740|      0|            }
18741|      0|            string = buffer___2;
18742|      0|            {
18743|      0|                while (1) {
18744|      0|while_continue: /* CIL Label */
18745|      0|                    ;
18746|      0|                    if (!*string) {
18747|      0|                        goto while_break;
18748|      0|                    }
18749|      0|                    {
18750|      0|                        string_length = strlen((char const *)string);
18751|      0|                    }
18752|      0|                    if ((int)*string == 68) {
18753|      0|                        if (allocated_length <= name_length + string_length) {
18754|      0|                            {
18755|      0|                                while (1) {
18756|      0|while_continue___0: /* CIL Label */
18757|      0|                                    ;
18758|      0|                                    allocated_length *= 2UL;
18759|      0|                                    if (!allocated_length) {
18760|      0|                                        {
18761|      0|                                            xalloc_die();
18762|      0|                                        }
18763|      0|                                    }
18764|      0|                                    if (!(allocated_length <= name_length + string_length)) {
18765|      0|                                        goto while_break___0;
18766|      0|                                    }
18767|      0|                                }
18768|      0|while_break___0: /* CIL Label */
18769|      0|                                ;
18770|      0|                            }
18771|      0|                            {
18772|      0|                                tmp___2 = xrealloc((void *)namebuf, allocated_length + 1UL);
18773|      0|                                namebuf = (char *)tmp___2;
18774|      0|                            }
18775|      0|                        }
18776|      0|                        {
18777|      0|                            strcpy((char * /* __restrict  */)(namebuf + name_length),
18778|      0|                                   (char const * /* __restrict  */)(string + 1));
18779|      0|                            tmp___3 = addname((char const *)namebuf, change_dir___0);
18780|      0|                            add_hierarchy_to_namelist(tmp___3, device);
18781|      0|                        }
18782|      0|                    }
18783|      0|                    string += string_length + 1UL;
18784|      0|                }
18785|      0|while_break: /* CIL Label */
18786|      0|                ;
18787|      0|            }
18788|      0|            {
18789|      0|                free((void *)namebuf);
18790|      0|            }
18791|      0|        }
18792|      0|        return;
18793|      0|    }
18794|      0|}
18795|       |void collect_and_sort_names(void)
18796|      0|{
18797|      0|    struct name *name;
18798|      0|    struct name *next_name;
18799|      0|    int num_names;
18800|      0|    struct stat statbuf;
18801|      0|    int tmp;
18802|      0|    void *__cil_tmp6;
18803|      0|    char *__cil_tmp7;
18804|       |
18805|      0|    {
18806|      0|        {
18807|      0|            name_gather();
18808|      0|        }
18809|      0|        if (listed_incremental_option) {
18810|      0|            {
18811|      0|                read_directory_file();
18812|      0|            }
18813|      0|        }
18814|      0|        if (!namelist) {
18815|      0|            {
18816|      0|                addname(".", 0);
18817|      0|            }
18818|      0|        }
18819|      0|        name = namelist;
18820|      0|        {
18821|      0|            while (1) {
18822|      0|while_continue: /* CIL Label */
18823|      0|                ;
18824|      0|                if (!name) {
18825|      0|                    goto while_break;
18826|      0|                }
18827|      0|                next_name = name->next;
18828|      0|                if (name->found_count) {
18829|      0|                    goto __Cont;
18830|      0|                }
18831|      0|                else {
18832|      0|                    if (name->dir_contents) {
18833|      0|                        goto __Cont;
18834|      0|                    }
18835|      0|                }
18836|      0|                if (name->regexp) {
18837|      0|                    goto __Cont;
18838|      0|                }
18839|      0|                {
18840|      0|                    chdir_do(name->change_dir);
18841|      0|                }
18842|      0|                if (name->fake) {
18843|      0|                    goto __Cont;
18844|      0|                }
18845|      0|                {
18846|      0|                    tmp = deref_stat(dereference_option, (char const *)(name->name),
18847|      0|                                     &statbuf);
18848|      0|                }
18849|      0|                if (tmp != 0) {
18850|      0|                    {
18851|      0|                        stat_diag((char const *)(name->name));
18852|      0|                    }
18853|      0|                    goto __Cont;
18854|      0|                }
18855|      0|                if ((statbuf.st_mode & 61440U) == 16384U) {
18856|      0|                    {
18857|      0|                        (name->found_count)++;
18858|      0|                        add_hierarchy_to_namelist(name, statbuf.st_dev);
18859|      0|                    }
18860|      0|                }
18861|      0|__Cont:
18862|      0|                name = next_name;
18863|      0|            }
18864|      0|while_break: /* CIL Label */
18865|      0|            ;
18866|      0|        }
18867|      0|        num_names = 0;
18868|      0|        name = namelist;
18869|      0|        {
18870|      0|            while (1) {
18871|      0|while_continue___0: /* CIL Label */
18872|      0|                ;
18873|      0|                if (!name) {
18874|      0|                    goto while_break___0;
18875|      0|                }
18876|      0|                num_names++;
18877|      0|                name = name->next;
18878|      0|            }
18879|      0|while_break___0: /* CIL Label */
18880|      0|            ;
18881|      0|        }
18882|      0|        {
18883|      0|            namelist = merge_sort(namelist, num_names, &compare_names);
18884|      0|            name = namelist;
18885|      0|        }
18886|      0|        {
18887|      0|            while (1) {
18888|      0|while_continue___1: /* CIL Label */
18889|      0|                ;
18890|      0|                if (!name) {
18891|      0|                    goto while_break___1;
18892|      0|                }
18893|      0|                name->found_count = (uintmax_t)0;
18894|      0|                name = name->next;
18895|      0|            }
18896|      0|while_break___1: /* CIL Label */
18897|      0|            ;
18898|      0|        }
18899|      0|        return;
18900|      0|    }
18901|      0|}
18902|       |struct name *name_scan(char const *path)
18903|      0|{
18904|      0|    size_t length;
18905|      0|    size_t tmp;
18906|      0|    struct name *cursor;
18907|      0|    struct name *tmp___0;
18908|       |
18909|      0|    {
18910|      0|        {
18911|      0|            tmp = strlen(path);
18912|      0|            length = tmp;
18913|      0|        }
18914|      0|        {
18915|      0|            while (1) {
18916|      0|while_continue: /* CIL Label */
18917|      0|                ;
18918|      0|                {
18919|      0|                    tmp___0 = namelist_match(path, length);
18920|      0|                    cursor = tmp___0;
18921|      0|                }
18922|      0|                if (cursor) {
18923|      0|                    return (cursor);
18924|      0|                }
18925|      0|                if (same_order_option) {
18926|      0|                    if (namelist) {
18927|      0|                        if (namelist->found_count) {
18928|      0|                            {
18929|      0|                                name_gather();
18930|      0|                            }
18931|      0|                            if (namelist->found_count) {
18932|      0|                                return ((struct name *)0);
18933|      0|                            }
18934|      0|                        }
18935|      0|                        else {
18936|      0|                            return ((struct name *)0);
18937|      0|                        }
18938|      0|                    }
18939|      0|                    else {
18940|      0|                        return ((struct name *)0);
18941|      0|                    }
18942|      0|                }
18943|      0|                else {
18944|      0|                    return ((struct name *)0);
18945|      0|                }
18946|      0|            }
18947|      0|while_break: /* CIL Label */
18948|      0|            ;
18949|      0|        }
18950|      0|    }
18951|      0|}
18952|       |char *name_from_list(void)
18953|      0|{
18954|       |
18955|      0|    {
18956|      0|        if (!gnu_list_name) {
18957|      0|            gnu_list_name = namelist;
18958|      0|        }
18959|      0|        {
18960|      0|            while (1) {
18961|      0|while_continue: /* CIL Label */
18962|      0|                ;
18963|      0|                if (gnu_list_name) {
18964|      0|                    if (!gnu_list_name->found_count) {
18965|      0|                        if (!gnu_list_name->fake) {
18966|      0|                            goto while_break;
18967|      0|                        }
18968|      0|                    }
18969|      0|                }
18970|      0|                else {
18971|      0|                    goto while_break;
18972|      0|                }
18973|      0|                gnu_list_name = gnu_list_name->next;
18974|      0|            }
18975|      0|while_break: /* CIL Label */
18976|      0|            ;
18977|      0|        }
18978|      0|        if (gnu_list_name) {
18979|      0|            {
18980|      0|                (gnu_list_name->found_count)++;
18981|      0|                chdir_do(gnu_list_name->change_dir);
18982|      0|            }
18983|      0|            return (gnu_list_name->name);
18984|      0|        }
18985|      0|        return ((char *)0);
18986|      0|    }
18987|      0|}
18988|       |void blank_name_list(void)
18989|      0|{
18990|      0|    struct name *name;
18991|       |
18992|      0|    {
18993|      0|        gnu_list_name = (struct name *)0;
18994|      0|        name = namelist;
18995|      0|        {
18996|      0|            while (1) {
18997|      0|while_continue: /* CIL Label */
18998|      0|                ;
18999|      0|                if (!name) {
19000|      0|                    goto while_break;
19001|      0|                }
19002|      0|                name->found_count = (uintmax_t)0;
19003|      0|                name = name->next;
19004|      0|            }
19005|      0|while_break: /* CIL Label */
19006|      0|            ;
19007|      0|        }
19008|      0|        return;
19009|      0|    }
19010|      0|}
19011|       |char *new_name(char const *path, char const *name)
19012|      0|{
19013|      0|    size_t pathlen;
19014|      0|    size_t tmp;
19015|      0|    size_t namesize;
19016|      0|    size_t tmp___0;
19017|      0|    int slash;
19018|      0|    char *buffer___2;
19019|      0|    void *tmp___1;
19020|      0|    int tmp___2;
19021|       |
19022|      0|    {
19023|      0|        {
19024|      0|            tmp = strlen(path);
19025|      0|            pathlen = tmp;
19026|      0|            tmp___0 = strlen(name);
19027|      0|            namesize = tmp___0 + 1UL;
19028|      0|        }
19029|      0|        if (pathlen) {
19030|      0|            if (!((int const) * (path + (pathlen - 1UL)) == 47)) {
19031|      0|                tmp___2 = 1;
19032|      0|            }
19033|      0|            else {
19034|      0|                tmp___2 = 0;
19035|      0|            }
19036|      0|        }
19037|      0|        else {
19038|      0|            tmp___2 = 0;
19039|      0|        }
19040|      0|        {
19041|      0|            slash = tmp___2;
19042|      0|            tmp___1 = xmalloc((pathlen + (size_t)slash) + namesize);
19043|      0|            buffer___2 = (char *)tmp___1;
19044|      0|            memcpy((void * /* __restrict  */)buffer___2,
19045|      0|                   (void const * /* __restrict  */)path, pathlen);
19046|      0|            *(buffer___2 + pathlen) = (char)'/';
19047|      0|            memcpy((void * /* __restrict  */)((buffer___2 + pathlen) + slash),
19048|      0|                   (void const * /* __restrict  */)name, namesize);
19049|      0|        }
19050|      0|        return (buffer___2);
19051|      0|    }
19052|      0|}
19053|       |_Bool excluded_name(char const *name)
19054|      0|{
19055|      0|    _Bool tmp;
19056|       |
19057|      0|    {
19058|      0|        {
19059|      0|            tmp = excluded_filename((struct exclude const *)excluded, name + 0);
19060|      0|        }
19061|      0|        return (tmp);
19062|      0|    }
19063|      0|}
19064|       |static unsigned int hash_string_hasher(void const *name,
19065|       |                                       unsigned int n_buckets)
19066|      0|{
19067|      0|    size_t tmp;
19068|       |
19069|      0|    {
19070|      0|        {
19071|      0|            tmp = hash_string((char const *)name, (size_t)n_buckets);
19072|      0|        }
19073|      0|        return ((unsigned int)tmp);
19074|      0|    }
19075|      0|}
19076|       |static _Bool hash_string_compare(void const *name1, void const *name2)
19077|      0|{
19078|      0|    int tmp;
19079|       |
19080|      0|    {
19081|      0|        {
19082|      0|            tmp = strcmp((char const *)name1, (char const *)name2);
19083|      0|        }
19084|      0|        return ((_Bool)(tmp == 0));
19085|      0|    }
19086|      0|}
19087|       |static _Bool hash_string_insert(Hash_table **table___0, char const *string)
19088|      0|{
19089|      0|    Hash_table *t;
19090|      0|    char *s;
19091|      0|    char *tmp;
19092|      0|    char *e;
19093|      0|    Hash_table *tmp___0;
19094|      0|    void *tmp___1;
19095|       |
19096|      0|    {
19097|      0|        {
19098|      0|            t = *table___0;
19099|      0|            tmp = xstrdup(string);
19100|      0|            s = tmp;
19101|      0|        }
19102|      0|        if (t) {
19103|      0|            goto _L;
19104|      0|        }
19105|      0|        else {
19106|      0|            {
19107|      0|                t = hash_initialize(
19108|      0|                        (size_t)0, (Hash_tuning const *)0,
19109|      0|                        (size_t(*)(void const *, size_t))(&hash_string_hasher),
19110|      0|                        &hash_string_compare, (void (*)(void *))0);
19111|      0|                tmp___0 = t;
19112|      0|                *table___0 = tmp___0;
19113|      0|            }
19114|      0|            if (tmp___0) {
19115|      0|_L : {
19116|      0|                    tmp___1 = hash_insert(t, (void const *)s);
19117|      0|                    e = (char *)tmp___1;
19118|      0|                }
19119|      0|                if (!e) {
19120|      0|                    {
19121|      0|                        xalloc_die();
19122|      0|                    }
19123|      0|                }
19124|      0|            }
19125|      0|            else {
19126|      0|                {
19127|      0|                    xalloc_die();
19128|      0|                }
19129|      0|            }
19130|      0|        }
19131|      0|        if ((unsigned long)e == (unsigned long)s) {
19132|      0|            return ((_Bool)1);
19133|      0|        }
19134|      0|        else {
19135|      0|            {
19136|      0|                free((void *)s);
19137|      0|            }
19138|      0|            return ((_Bool)0);
19139|      0|        }
19140|      0|    }
19141|      0|}
19142|       |static _Bool hash_string_lookup(Hash_table const *table___0,
19143|       |                                char const *string)
19144|      0|{
19145|      0|    void *tmp;
19146|      0|    int tmp___0;
19147|       |
19148|      0|    {
19149|      0|        if (table___0) {
19150|      0|            {
19151|      0|                tmp = hash_lookup(table___0, (void const *)string);
19152|      0|            }
19153|      0|            if (tmp) {
19154|      0|                tmp___0 = 1;
19155|      0|            }
19156|      0|            else {
19157|      0|                tmp___0 = 0;
19158|      0|            }
19159|      0|        }
19160|      0|        else {
19161|      0|            tmp___0 = 0;
19162|      0|        }
19163|      0|        return ((_Bool)tmp___0);
19164|      0|    }
19165|      0|}
19166|       |static Hash_table *avoided_name_table;
19167|       |void add_avoided_name(char const *name)
19168|      0|{
19169|       |
19170|      0|    {
19171|      0|        {
19172|      0|            hash_string_insert(&avoided_name_table, name);
19173|      0|        }
19174|      0|        return;
19175|      0|    }
19176|      0|}
19177|       |_Bool is_avoided_name(char const *name)
19178|      0|{
19179|      0|    _Bool tmp;
19180|       |
19181|      0|    {
19182|      0|        {
19183|      0|            tmp = hash_string_lookup((Hash_table const *)avoided_name_table, name);
19184|      0|        }
19185|      0|        return (tmp);
19186|      0|    }
19187|      0|}
19188|       |static Hash_table *prefix_table[2];
19189|       |static char const *const diagnostic[2] = {
19190|       |    (char const * /* const  */) "Removing leading `%s\' from member names",
19191|       |    (char const
19192|       |     * /* const  */) "Removing leading `%s\' from hard link targets"
19193|       |};
19194|       |static char const *const diagnostic___0[2] = {
19195|       |    (char const * /* const  */) "Substituting `.\' for empty member name",
19196|       |    (char const * /* const  */) "Substituting `.\' for empty hard link target"
19197|       |};
19198|       |char *safer_name_suffix(char const *file_name, _Bool link_target)
19199|      0|{
19200|      0|    char const *p;
19201|      0|    size_t prefix_len;
19202|      0|    char c;
19203|      0|    char const *tmp;
19204|      0|    char *prefix;
19205|      0|    void *tmp___0;
19206|      0|    char *tmp___1;
19207|      0|    _Bool tmp___2;
19208|      0|    char *tmp___3;
19209|      0|    char *__cil_tmp12;
19210|       |
19211|      0|    {
19212|      0|        if (absolute_names_option) {
19213|      0|            p = file_name;
19214|      0|        }
19215|      0|        else {
19216|      0|            prefix_len = (size_t)0;
19217|      0|            p = file_name + prefix_len;
19218|      0|            {
19219|      0|                while (1) {
19220|      0|while_continue: /* CIL Label */
19221|      0|                    ;
19222|      0|                    if (!*p) {
19223|      0|                        goto while_break;
19224|      0|                    }
19225|      0|                    if ((int const) * (p + 0) == 46) {
19226|      0|                        if ((int const) * (p + 1) == 46) {
19227|      0|                            if ((int const) * (p + 2) == 47) {
19228|      0|                                prefix_len = (size_t)((p + 2) - file_name);
19229|      0|                            }
19230|      0|                            else {
19231|      0|                                if (!*(p + 2)) {
19232|      0|                                    prefix_len = (size_t)((p + 2) - file_name);
19233|      0|                                }
19234|      0|                            }
19235|      0|                        }
19236|      0|                    }
19237|      0|                    {
19238|      0|                        while (1) {
19239|      0|while_continue___0: /* CIL Label */
19240|      0|                            ;
19241|      0|                            tmp = p;
19242|      0|                            p++;
19243|      0|                            c = (char)*tmp;
19244|      0|                            if ((int)c == 47) {
19245|      0|                                goto while_break___0;
19246|      0|                            }
19247|      0|                            if (!*p) {
19248|      0|                                goto while_break___0;
19249|      0|                            }
19250|      0|                        }
19251|      0|while_break___0: /* CIL Label */
19252|      0|                        ;
19253|      0|                    }
19254|      0|                }
19255|      0|while_break: /* CIL Label */
19256|      0|                ;
19257|      0|            }
19258|      0|            p = file_name + prefix_len;
19259|      0|            {
19260|      0|                while (1) {
19261|      0|while_continue___1: /* CIL Label */
19262|      0|                    ;
19263|      0|                    if (!((int const) * p == 47)) {
19264|      0|                        goto while_break___1;
19265|      0|                    }
19266|      0|                    goto __Cont;
19267|      0|__Cont:
19268|      0|                    p++;
19269|      0|                }
19270|      0|while_break___1: /* CIL Label */
19271|      0|                ;
19272|      0|            }
19273|      0|            prefix_len = (size_t)(p - file_name);
19274|      0|            if (prefix_len) {
19275|      0|                {
19276|      0|                    tmp___0 = __builtin_alloca(prefix_len + 1UL);
19277|      0|                    prefix = (char *)tmp___0;
19278|      0|                    memcpy((void * /* __restrict  */)prefix,
19279|      0|                           (void const * /* __restrict  */)file_name, prefix_len);
19280|      0|                    *(prefix + prefix_len) = (char)'\000';
19281|      0|                    tmp___2 = hash_string_insert(&prefix_table[link_target],
19282|      0|                                                 (char const *)prefix);
19283|      0|                }
19284|      0|                if (tmp___2) {
19285|      0|                    {
19286|      0|                        tmp___1 = gettext((char const *)diagnostic[link_target]);
19287|      0|                        error(0, 0, (char const *)tmp___1, prefix);
19288|      0|                    }
19289|      0|                }
19290|      0|            }
19291|      0|        }
19292|      0|        if (!*p) {
19293|      0|            if ((unsigned long)p == (unsigned long)file_name) {
19294|      0|                {
19295|      0|                    tmp___3 = gettext((char const *)diagnostic___0[link_target]);
19296|      0|                    error(0, 0, (char const *)tmp___3);
19297|      0|                }
19298|      0|            }
19299|      0|            p = ".";
19300|      0|        }
19301|      0|        return ((char *)p);
19302|      0|    }
19303|      0|}
19304|       |size_t stripped_prefix_len(char const *file_name, size_t num)
19305|      0|{
19306|      0|    char const *p;
19307|      0|    _Bool slash;
19308|       |
19309|      0|    {
19310|      0|        p = file_name + 0;
19311|      0|        {
19312|      0|            while (1) {
19313|      0|while_continue: /* CIL Label */
19314|      0|                ;
19315|      0|                if (!((int const) * p == 47)) {
19316|      0|                    goto while_break;
19317|      0|                }
19318|      0|                p++;
19319|      0|            }
19320|      0|while_break: /* CIL Label */
19321|      0|            ;
19322|      0|        }
19323|      0|        {
19324|      0|            while (1) {
19325|      0|while_continue___0: /* CIL Label */
19326|      0|                ;
19327|      0|                if (!*p) {
19328|      0|                    goto while_break___0;
19329|      0|                }
19330|      0|                slash = (_Bool)((int const) * p == 47);
19331|      0|                p++;
19332|      0|                if (slash) {
19333|      0|                    num--;
19334|      0|                    if (num == 0UL) {
19335|      0|                        return ((size_t)(p - file_name));
19336|      0|                    }
19337|      0|                    {
19338|      0|                        while (1) {
19339|      0|while_continue___1: /* CIL Label */
19340|      0|                            ;
19341|      0|                            if (!((int const) * p == 47)) {
19342|      0|                                goto while_break___1;
19343|      0|                            }
19344|      0|                            p++;
19345|      0|                        }
19346|      0|while_break___1: /* CIL Label */
19347|      0|                        ;
19348|      0|                    }
19349|      0|                }
19350|      0|            }
19351|      0|while_break___0: /* CIL Label */
19352|      0|            ;
19353|      0|        }
19354|      0|        return ((size_t)-1);
19355|      0|    }
19356|      0|}
19357|       |_Bool contains_dot_dot(char const *name)
19358|      0|{
19359|      0|    char const *p;
19360|      0|    char const *tmp;
19361|       |
19362|      0|    {
19363|      0|        p = name + 0;
19364|      0|        {
19365|      0|            while (1) {
19366|      0|while_continue: /* CIL Label */
19367|      0|                ;
19368|      0|                if ((int const) * (p + 0) == 46) {
19369|      0|                    if ((int const) * (p + 1) == 46) {
19370|      0|                        if ((int const) * (p + 2) == 47) {
19371|      0|                            return ((_Bool)1);
19372|      0|                        }
19373|      0|                        else {
19374|      0|                            if (!*(p + 2)) {
19375|      0|                                return ((_Bool)1);
19376|      0|                            }
19377|      0|                        }
19378|      0|                    }
19379|      0|                }
19380|      0|                {
19381|      0|                    while (1) {
19382|      0|while_continue___0: /* CIL Label */
19383|      0|                        ;
19384|      0|                        tmp = p;
19385|      0|                        p++;
19386|      0|                        if (!*tmp) {
19387|      0|                            return ((_Bool)0);
19388|      0|                        }
19389|      0|                        if (!(!((int const) * p == 47))) {
19390|      0|                            goto while_break___0;
19391|      0|                        }
19392|      0|                    }
19393|      0|while_break___0: /* CIL Label */
19394|      0|                    ;
19395|      0|                }
19396|      0|                p++;
19397|      0|            }
19398|      0|while_break: /* CIL Label */
19399|      0|            ;
19400|      0|        }
19401|      0|    }
19402|      0|}
19403|       |/* #pragma merger("0","00b.rtapelib.o.i","") */
19404|       |extern
19405|       |__attribute__((__nothrow__)) int(__attribute__((__leaf__)) dup)(int __fd);
19406|       |extern __attribute__((__nothrow__)) int(
19407|       |    __attribute__((__nonnull__(1, 2), __leaf__))
19408|       |    execl)(char const *__path, char const *__arg, ...);
19409|       |extern __attribute__((__nothrow__))
19410|       |__sighandler_t(__attribute__((__leaf__)) signal)(int __sig,
19411|       |        void (*__handler)(int));
19412|       |extern
19413|       |__attribute__((__nothrow__)) int(__attribute__((__nonnull__(1), __leaf__))
19414|       |                                 atoi)(char const *__nptr)
19415|       |__attribute__((__pure__));
19416|       |extern
19417|       |__attribute__((__nothrow__)) long(__attribute__((__nonnull__(1), __leaf__))
19418|       |                                  atol)(char const *__nptr)
19419|       |__attribute__((__pure__));
19420|       |char const *rmt_command_option;
19421|       |void sys_reset_uid_gid(void);
19422|       |size_t rmt_write__(int handle, char *buffer___2, size_t length);
19423|       |static int from_remote[4][2] = {{-1, -1}, {-1, -1}, {-1, -1}, {-1, -1}};
19424|       |static int to_remote[4][2] = {{-1, -1}, {-1, -1}, {-1, -1}, {-1, -1}};
19425|       |static void _rmt_shutdown(int handle, int errno_value)
19426|      0|{
19427|      0|    int *tmp;
19428|       |
19429|      0|    {
19430|      0|        {
19431|      0|            close(from_remote[handle][0]);
19432|      0|            close(to_remote[handle][1]);
19433|      0|            from_remote[handle][0] = -1;
19434|      0|            to_remote[handle][1] = -1;
19435|      0|            tmp = __errno_location();
19436|      0|            *tmp = errno_value;
19437|      0|        }
19438|      0|        return;
19439|      0|    }
19440|      0|}
19441|       |static int do_command(int handle, char const *buffer___2)
19442|      0|{
19443|      0|    size_t length;
19444|      0|    size_t tmp;
19445|      0|    void (*pipe_handler)();
19446|      0|    void (*tmp___0)(int);
19447|      0|    ssize_t written;
19448|      0|    size_t tmp___1;
19449|       |
19450|      0|    {
19451|      0|        {
19452|      0|            tmp = strlen(buffer___2);
19453|      0|            length = tmp;
19454|      0|            tmp___0 = signal(13, (void (*)(int))1);
19455|      0|            pipe_handler = (void (*)())tmp___0;
19456|      0|            tmp___1 =
19457|      0|                full_write(to_remote[handle][1], (void const *)buffer___2, length);
19458|      0|            written = (ssize_t)tmp___1;
19459|      0|            signal(13, (void (*)(int))pipe_handler);
19460|      0|        }
19461|      0|        if ((size_t)written == length) {
19462|      0|            return (0);
19463|      0|        }
19464|      0|        {
19465|      0|            _rmt_shutdown(handle, 5);
19466|      0|        }
19467|      0|        return (-1);
19468|      0|    }
19469|      0|}
19470|       |static char *get_status_string(int handle, char *command_buffer)
19471|      0|{
19472|      0|    char *cursor;
19473|      0|    int counter;
19474|      0|    size_t tmp;
19475|      0|    char character;
19476|      0|    size_t tmp___0;
19477|      0|    int *tmp___1;
19478|      0|    int *tmp___2;
19479|       |
19480|      0|    {
19481|      0|        counter = 0;
19482|      0|        cursor = command_buffer;
19483|      0|        {
19484|      0|            while (1) {
19485|      0|while_continue: /* CIL Label */
19486|      0|                ;
19487|      0|                if (!(counter < 64)) {
19488|      0|                    goto while_break;
19489|      0|                }
19490|      0|                {
19491|      0|                    tmp = safe_read(from_remote[handle][0], (void *)cursor, (size_t)1);
19492|      0|                }
19493|      0|                if (tmp != 1UL) {
19494|      0|                    {
19495|      0|                        _rmt_shutdown(handle, 5);
19496|      0|                    }
19497|      0|                    return ((char *)0);
19498|      0|                }
19499|      0|                if ((int)*cursor == 10) {
19500|      0|                    *cursor = (char)'\000';
19501|      0|                    goto while_break;
19502|      0|                }
19503|      0|                counter++;
19504|      0|                cursor++;
19505|      0|            }
19506|      0|while_break: /* CIL Label */
19507|      0|            ;
19508|      0|        }
19509|      0|        if (counter == 64) {
19510|      0|            {
19511|      0|                _rmt_shutdown(handle, 5);
19512|      0|            }
19513|      0|            return ((char *)0);
19514|      0|        }
19515|      0|        cursor = command_buffer;
19516|      0|        {
19517|      0|            while (1) {
19518|      0|while_continue___0: /* CIL Label */
19519|      0|                ;
19520|      0|                if (!*cursor) {
19521|      0|                    goto while_break___0;
19522|      0|                }
19523|      0|                if ((int)*cursor != 32) {
19524|      0|                    goto while_break___0;
19525|      0|                }
19526|      0|                cursor++;
19527|      0|            }
19528|      0|while_break___0: /* CIL Label */
19529|      0|            ;
19530|      0|        }
19531|      0|        if ((int)*cursor == 69) {
19532|      0|            goto _L___3;
19533|      0|        }
19534|      0|        else {
19535|      0|            if ((int)*cursor == 70) {
19536|      0|_L___3 : { /* CIL Label */
19537|      0|                    while (1) {
19538|      0|while_continue___1: /* CIL Label */
19539|      0|                        ;
19540|      0|                        {
19541|      0|                            tmp___0 = safe_read(from_remote[handle][0], (void *)(&character),
19542|      0|                                                (size_t)1);
19543|      0|                        }
19544|      0|                        if (!(tmp___0 == 1UL)) {
19545|      0|                            goto while_break___1;
19546|      0|                        }
19547|      0|                        if ((int)character == 10) {
19548|      0|                            goto while_break___1;
19549|      0|                        }
19550|      0|                    }
19551|      0|while_break___1: /* CIL Label */
19552|      0|                    ;
19553|      0|                }
19554|      0|                {
19555|      0|                    tmp___1 = __errno_location();
19556|      0|                    *tmp___1 = atoi((char const *)(cursor + 1));
19557|      0|                }
19558|      0|                if ((int)*cursor == 70) {
19559|      0|                    {
19560|      0|                        tmp___2 = __errno_location();
19561|      0|                        _rmt_shutdown(handle, *tmp___2);
19562|      0|                    }
19563|      0|                }
19564|      0|                return ((char *)0);
19565|      0|            }
19566|      0|        }
19567|      0|        if ((int)*cursor != 65) {
19568|      0|            {
19569|      0|                _rmt_shutdown(handle, 5);
19570|      0|            }
19571|      0|            return ((char *)0);
19572|      0|        }
19573|      0|        return (cursor + 1);
19574|      0|    }
19575|      0|}
19576|       |static long get_status(int handle)
19577|      0|{
19578|      0|    char command_buffer[64];
19579|      0|    char const *status;
19580|      0|    char *tmp;
19581|      0|    long result;
19582|      0|    long tmp___0;
19583|      0|    int *tmp___1;
19584|      0|    void *__cil_tmp8;
19585|       |
19586|      0|    {
19587|      0|        {
19588|      0|            tmp = get_status_string(handle, command_buffer);
19589|      0|            status = (char const *)tmp;
19590|      0|        }
19591|      0|        if (status) {
19592|      0|            {
19593|      0|                tmp___0 = atol(status);
19594|      0|                result = tmp___0;
19595|      0|            }
19596|      0|            if (0L <= result) {
19597|      0|                return (result);
19598|      0|            }
19599|      0|            {
19600|      0|                tmp___1 = __errno_location();
19601|      0|                *tmp___1 = 5;
19602|      0|            }
19603|      0|        }
19604|      0|        return (-1L);
19605|      0|    }
19606|      0|}
19607|       |static off_t get_status_off(int handle)
19608|      0|{
19609|      0|    char command_buffer[64];
19610|      0|    char const *status;
19611|      0|    char *tmp;
19612|      0|    off_t count;
19613|      0|    int negative;
19614|      0|    int digit;
19615|      0|    char const *tmp___0;
19616|      0|    off_t c10;
19617|      0|    off_t nc;
19618|      0|    int tmp___1;
19619|      0|    int tmp___2;
19620|      0|    void *__cil_tmp13;
19621|       |
19622|      0|    {
19623|      0|        {
19624|      0|            tmp = get_status_string(handle, command_buffer);
19625|      0|            status = (char const *)tmp;
19626|      0|        }
19627|      0|        if (!status) {
19628|      0|            return ((off_t)-1);
19629|      0|        }
19630|      0|        else {
19631|      0|            count = (off_t)0;
19632|      0|            {
19633|      0|                while (1) {
19634|      0|while_continue: /* CIL Label */
19635|      0|                    ;
19636|      0|                    if (!((int const) * status == 32)) {
19637|      0|                        if (!((int const) * status == 9)) {
19638|      0|                            goto while_break;
19639|      0|                        }
19640|      0|                    }
19641|      0|                    goto __Cont;
19642|      0|__Cont:
19643|      0|                    status++;
19644|      0|                }
19645|      0|while_break: /* CIL Label */
19646|      0|                ;
19647|      0|            }
19648|      0|            negative = (int const) * status == 45;
19649|      0|            if (negative) {
19650|      0|                tmp___1 = 1;
19651|      0|            }
19652|      0|            else {
19653|      0|                if ((int const) * status == 43) {
19654|      0|                    tmp___1 = 1;
19655|      0|                }
19656|      0|                else {
19657|      0|                    tmp___1 = 0;
19658|      0|                }
19659|      0|            }
19660|      0|            status += tmp___1;
19661|      0|            {
19662|      0|                while (1) {
19663|      0|while_continue___0: /* CIL Label */
19664|      0|                    ;
19665|      0|                    tmp___0 = status;
19666|      0|                    status++;
19667|      0|                    digit = (int)((int const) * tmp___0 - 48);
19668|      0|                    if (9U < (unsigned int)digit) {
19669|      0|                        goto while_break___0;
19670|      0|                    }
19671|      0|                    else {
19672|      0|                        c10 = 10L * count;
19673|      0|                        if (negative) {
19674|      0|                            nc = c10 - (off_t)digit;
19675|      0|                        }
19676|      0|                        else {
19677|      0|                            nc = c10 + (off_t)digit;
19678|      0|                        }
19679|      0|                        if (c10 / 10L != count) {
19680|      0|                            return ((off_t)-1);
19681|      0|                        }
19682|      0|                        else {
19683|      0|                            if (negative) {
19684|      0|                                tmp___2 = c10 < nc;
19685|      0|                            }
19686|      0|                            else {
19687|      0|                                tmp___2 = nc < c10;
19688|      0|                            }
19689|      0|                            if (tmp___2) {
19690|      0|                                return ((off_t)-1);
19691|      0|                            }
19692|      0|                        }
19693|      0|                        count = nc;
19694|      0|                    }
19695|      0|                }
19696|      0|while_break___0: /* CIL Label */
19697|      0|                ;
19698|      0|            }
19699|      0|            return (count);
19700|      0|        }
19701|      0|    }
19702|      0|}
19703|       |static void encode_oflag(char *buf, int oflag)
19704|      0|{
19705|      0|    char *__cil_tmp3;
19706|      0|    char *__cil_tmp4;
19707|      0|    char *__cil_tmp5;
19708|      0|    char *__cil_tmp6;
19709|      0|    char *__cil_tmp7;
19710|      0|    char *__cil_tmp8;
19711|      0|    char *__cil_tmp9;
19712|      0|    char *__cil_tmp10;
19713|      0|    char *__cil_tmp11;
19714|      0|    char *__cil_tmp12;
19715|      0|    char *__cil_tmp13;
19716|      0|    char *__cil_tmp14;
19717|      0|    char *__cil_tmp15;
19718|       |
19719|      0|    {
19720|      0|        {
19721|      0|            sprintf((char * /* __restrict  */)buf,
19722|      0|                    (char const * /* __restrict  */) "%d ", oflag);
19723|      0|        }
19724|      0|        {
19725|      0|            if ((oflag & 3) == 0) {
19726|      0|                goto case_0;
19727|      0|            }
19728|      0|            if ((oflag & 3) == 2) {
19729|      0|                goto case_2;
19730|      0|            }
19731|      0|            if ((oflag & 3) == 1) {
19732|      0|                goto case_1;
19733|      0|            }
19734|      0|            goto switch_default;
19735|      0|case_0 : { /* CIL Label */
19736|      0|                strcat((char * /* __restrict  */)buf,
19737|      0|                       (char const * /* __restrict  */) "O_RDONLY");
19738|      0|            }
19739|      0|            goto switch_break;
19740|      0|case_2 : { /* CIL Label */
19741|      0|                strcat((char * /* __restrict  */)buf,
19742|      0|                       (char const * /* __restrict  */) "O_RDWR");
19743|      0|            }
19744|      0|            goto switch_break;
19745|      0|case_1 : { /* CIL Label */
19746|      0|                strcat((char * /* __restrict  */)buf,
19747|      0|                       (char const * /* __restrict  */) "O_WRONLY");
19748|      0|            }
19749|      0|            goto switch_break;
19750|      0|switch_default : { /* CIL Label */
19751|      0|                abort();
19752|      0|            }
19753|      0|switch_break: /* CIL Label */
19754|      0|            ;
19755|      0|        }
19756|      0|        if (oflag & 1024) {
19757|      0|            {
19758|      0|                strcat((char * /* __restrict  */)buf,
19759|      0|                       (char const * /* __restrict  */) "|O_APPEND");
19760|      0|            }
19761|      0|        }
19762|      0|        if (oflag & 64) {
19763|      0|            {
19764|      0|                strcat((char * /* __restrict  */)buf,
19765|      0|                       (char const * /* __restrict  */) "|O_CREAT");
19766|      0|            }
19767|      0|        }
19768|      0|        if (oflag & 4096) {
19769|      0|            {
19770|      0|                strcat((char * /* __restrict  */)buf,
19771|      0|                       (char const * /* __restrict  */) "|O_DSYNC");
19772|      0|            }
19773|      0|        }
19774|      0|        if (oflag & 128) {
19775|      0|            {
19776|      0|                strcat((char * /* __restrict  */)buf,
19777|      0|                       (char const * /* __restrict  */) "|O_EXCL");
19778|      0|            }
19779|      0|        }
19780|      0|        if (oflag & 256) {
19781|      0|            {
19782|      0|                strcat((char * /* __restrict  */)buf,
19783|      0|                       (char const * /* __restrict  */) "|O_NOCTTY");
19784|      0|            }
19785|      0|        }
19786|      0|        if (oflag & 2048) {
19787|      0|            {
19788|      0|                strcat((char * /* __restrict  */)buf,
19789|      0|                       (char const * /* __restrict  */) "|O_NONBLOCK");
19790|      0|            }
19791|      0|        }
19792|      0|        if (oflag & 1052672) {
19793|      0|            {
19794|      0|                strcat((char * /* __restrict  */)buf,
19795|      0|                       (char const * /* __restrict  */) "|O_RSYNC");
19796|      0|            }
19797|      0|        }
19798|      0|        if (oflag & 1052672) {
19799|      0|            {
19800|      0|                strcat((char * /* __restrict  */)buf,
19801|      0|                       (char const * /* __restrict  */) "|O_SYNC");
19802|      0|            }
19803|      0|        }
19804|      0|        if (oflag & 512) {
19805|      0|            {
19806|      0|                strcat((char * /* __restrict  */)buf,
19807|      0|                       (char const * /* __restrict  */) "|O_TRUNC");
19808|      0|            }
19809|      0|        }
19810|      0|        return;
19811|      0|    }
19812|      0|}
19813|       |int rmt_open__(char const *path, int open_mode, int bias,
19814|       |               char const *remote_shell)
19815|      0|{
19816|      0|    int remote_pipe_number;
19817|      0|    char *path_copy;
19818|      0|    char *remote_host;
19819|      0|    char *remote_file;
19820|      0|    char *remote_user;
19821|      0|    int *tmp;
19822|      0|    char *cursor;
19823|      0|    int *tmp___0;
19824|      0|    char const *remote_shell_basename;
19825|      0|    pid_t status;
19826|      0|    char *tmp___1;
19827|      0|    int e;
19828|      0|    int *tmp___2;
19829|      0|    int *tmp___3;
19830|      0|    int tmp___4;
19831|      0|    int tmp___5;
19832|      0|    int e___0;
19833|      0|    int *tmp___6;
19834|      0|    int *tmp___7;
19835|      0|    char *tmp___8;
19836|      0|    int *tmp___9;
19837|      0|    size_t remote_file_len;
19838|      0|    size_t tmp___10;
19839|      0|    char *command_buffer;
19840|      0|    void *tmp___11;
19841|      0|    int e___1;
19842|      0|    int *tmp___12;
19843|      0|    int tmp___13;
19844|      0|    long tmp___14;
19845|      0|    char const *tmp___15;
19846|      0|    char const *tmp___16;
19847|      0|    char *__cil_tmp36;
19848|      0|    char *__cil_tmp37;
19849|      0|    char *__cil_tmp38;
19850|      0|    char *__cil_tmp39;
19851|      0|    char *__cil_tmp40;
19852|      0|    char *__cil_tmp41;
19853|       |
19854|      0|    {
19855|      0|        remote_pipe_number = 0;
19856|      0|        {
19857|      0|            while (1) {
19858|      0|while_continue: /* CIL Label */
19859|      0|                ;
19860|      0|                if (!(remote_pipe_number < 4)) {
19861|      0|                    goto while_break;
19862|      0|                }
19863|      0|                if (from_remote[remote_pipe_number][0] == -1) {
19864|      0|                    if (to_remote[remote_pipe_number][1] == -1) {
19865|      0|                        goto while_break;
19866|      0|                    }
19867|      0|                }
19868|      0|                remote_pipe_number++;
19869|      0|            }
19870|      0|while_break: /* CIL Label */
19871|      0|            ;
19872|      0|        }
19873|      0|        if (remote_pipe_number == 4) {
19874|      0|            {
19875|      0|                tmp = __errno_location();
19876|      0|                *tmp = 24;
19877|      0|            }
19878|      0|            return (-1);
19879|      0|        }
19880|      0|        {
19881|      0|            path_copy = xstrdup(path);
19882|      0|            remote_host = path_copy;
19883|      0|            remote_user = (char *)0;
19884|      0|            remote_file = (char *)0;
19885|      0|            cursor = path_copy;
19886|      0|        }
19887|      0|        {
19888|      0|            while (1) {
19889|      0|while_continue___0: /* CIL Label */
19890|      0|                ;
19891|      0|                if (!*cursor) {
19892|      0|                    goto while_break___0;
19893|      0|                }
19894|      0|                {
19895|      0|                    if ((int)*cursor == 10) {
19896|      0|                        goto case_10;
19897|      0|                    }
19898|      0|                    if ((int)*cursor == 64) {
19899|      0|                        goto case_64;
19900|      0|                    }
19901|      0|                    if ((int)*cursor == 58) {
19902|      0|                        goto case_58;
19903|      0|                    }
19904|      0|                    goto switch_default;
19905|      0|switch_default: /* CIL Label */
19906|      0|                    goto switch_break;
19907|      0|case_10 : { /* CIL Label */
19908|      0|                        free((void *)path_copy);
19909|      0|                        tmp___0 = __errno_location();
19910|      0|                        *tmp___0 = 2;
19911|      0|                    }
19912|      0|                    return (-1);
19913|      0|case_64: /* CIL Label */
19914|      0|                    if (!remote_user) {
19915|      0|                        remote_user = remote_host;
19916|      0|                        *cursor = (char)'\000';
19917|      0|                        remote_host = cursor + 1;
19918|      0|                    }
19919|      0|                    goto switch_break;
19920|      0|case_58: /* CIL Label */
19921|      0|                    if (!remote_file) {
19922|      0|                        *cursor = (char)'\000';
19923|      0|                        remote_file = cursor + 1;
19924|      0|                    }
19925|      0|                    goto switch_break;
19926|      0|switch_break: /* CIL Label */
19927|      0|                    ;
19928|      0|                }
19929|      0|                cursor++;
19930|      0|            }
19931|      0|while_break___0: /* CIL Label */
19932|      0|            ;
19933|      0|        }
19934|      0|        if (remote_user) {
19935|      0|            if ((int)*remote_user == 0) {
19936|      0|                remote_user = (char *)0;
19937|      0|            }
19938|      0|        }
19939|      0|        if (!remote_shell) {
19940|      0|            remote_shell = "/usr/bin/rsh";
19941|      0|        }
19942|      0|        {
19943|      0|            tmp___1 = base_name(remote_shell);
19944|      0|            remote_shell_basename = (char const *)tmp___1;
19945|      0|            tmp___4 = pipe(to_remote[remote_pipe_number]);
19946|      0|        }
19947|      0|        if (tmp___4 == -1) {
19948|      0|            goto _L;
19949|      0|        }
19950|      0|        else {
19951|      0|            {
19952|      0|                tmp___5 = pipe(from_remote[remote_pipe_number]);
19953|      0|            }
19954|      0|            if (tmp___5 == -1) {
19955|      0|_L : {
19956|      0|                    tmp___2 = __errno_location();
19957|      0|                    e = *tmp___2;
19958|      0|                    free((void *)path_copy);
19959|      0|                    tmp___3 = __errno_location();
19960|      0|                    *tmp___3 = e;
19961|      0|                }
19962|      0|                return (-1);
19963|      0|            }
19964|      0|        }
19965|      0|        {
19966|      0|            status = fork();
19967|      0|        }
19968|      0|        if (status == -1) {
19969|      0|            {
19970|      0|                tmp___6 = __errno_location();
19971|      0|                e___0 = *tmp___6;
19972|      0|                free((void *)path_copy);
19973|      0|                tmp___7 = __errno_location();
19974|      0|                *tmp___7 = e___0;
19975|      0|            }
19976|      0|            return (-1);
19977|      0|        }
19978|      0|        if (status == 0) {
19979|      0|            {
19980|      0|                close(0);
19981|      0|                dup(to_remote[remote_pipe_number][0]);
19982|      0|                close(to_remote[remote_pipe_number][0]);
19983|      0|                close(to_remote[remote_pipe_number][1]);
19984|      0|                close(1);
19985|      0|                dup(from_remote[remote_pipe_number][1]);
19986|      0|                close(from_remote[remote_pipe_number][0]);
19987|      0|                close(from_remote[remote_pipe_number][1]);
19988|      0|                sys_reset_uid_gid();
19989|      0|            }
19990|      0|            if (remote_user) {
19991|      0|                if (rmt_command_option) {
19992|      0|                    tmp___15 = rmt_command_option;
19993|      0|                }
19994|      0|                else {
19995|      0|                    tmp___15 = "/etc/rmt";
19996|      0|                }
19997|      0|                {
19998|      0|                    execl(remote_shell, remote_shell_basename, remote_host, "-l",
19999|      0|                          remote_user, tmp___15, (char *)0);
20000|      0|                }
20001|      0|            }
20002|      0|            else {
20003|      0|                if (rmt_command_option) {
20004|      0|                    tmp___16 = rmt_command_option;
20005|      0|                }
20006|      0|                else {
20007|      0|                    tmp___16 = "/etc/rmt";
20008|      0|                }
20009|      0|                {
20010|      0|                    execl(remote_shell, remote_shell_basename, remote_host, tmp___16,
20011|      0|                          (char *)0);
20012|      0|                }
20013|      0|            }
20014|      0|            {
20015|      0|                tmp___8 = gettext("Cannot execute remote shell");
20016|      0|                tmp___9 = __errno_location();
20017|      0|                error(128, *tmp___9, (char const *)tmp___8);
20018|      0|            }
20019|      0|        }
20020|      0|        {
20021|      0|            close(from_remote[remote_pipe_number][1]);
20022|      0|            close(to_remote[remote_pipe_number][0]);
20023|      0|            tmp___10 = strlen((char const *)remote_file);
20024|      0|            remote_file_len = tmp___10;
20025|      0|            tmp___11 = xmalloc(remote_file_len + 1000UL);
20026|      0|            command_buffer = (char *)tmp___11;
20027|      0|            sprintf((char * /* __restrict  */)command_buffer,
20028|      0|                    (char const * /* __restrict  */) "O%s\n", remote_file);
20029|      0|            encode_oflag((command_buffer + remote_file_len) + 2, open_mode);
20030|      0|            strcat((char * /* __restrict  */)command_buffer,
20031|      0|                   (char const * /* __restrict  */) "\n");
20032|      0|            tmp___13 = do_command(remote_pipe_number, (char const *)command_buffer);
20033|      0|        }
20034|      0|        if (tmp___13 == -1) {
20035|      0|            goto _L___0;
20036|      0|        }
20037|      0|        else {
20038|      0|            {
20039|      0|                tmp___14 = get_status(remote_pipe_number);
20040|      0|            }
20041|      0|            if (tmp___14 == -1L) {
20042|      0|_L___0 : {
20043|      0|                    tmp___12 = __errno_location();
20044|      0|                    e___1 = *tmp___12;
20045|      0|                    free((void *)command_buffer);
20046|      0|                    free((void *)path_copy);
20047|      0|                    _rmt_shutdown(remote_pipe_number, e___1);
20048|      0|                }
20049|      0|                return (-1);
20050|      0|            }
20051|      0|        }
20052|      0|        {
20053|      0|            free((void *)command_buffer);
20054|      0|            free((void *)path_copy);
20055|      0|        }
20056|      0|        return (remote_pipe_number + bias);
20057|      0|    }
20058|      0|}
20059|       |int rmt_close__(int handle)
20060|      0|{
20061|      0|    long status;
20062|      0|    int tmp;
20063|      0|    int *tmp___0;
20064|      0|    char *__cil_tmp5;
20065|       |
20066|      0|    {
20067|      0|        {
20068|      0|            tmp = do_command(handle, "C\n");
20069|      0|        }
20070|      0|        if (tmp == -1) {
20071|      0|            return (-1);
20072|      0|        }
20073|      0|        {
20074|      0|            status = get_status(handle);
20075|      0|            tmp___0 = __errno_location();
20076|      0|            _rmt_shutdown(handle, *tmp___0);
20077|      0|        }
20078|      0|        return ((int)status);
20079|      0|    }
20080|      0|}
20081|       |size_t rmt_read__(int handle, char *buffer___2, size_t length)
20082|      0|{
20083|      0|    char command_buffer[64];
20084|      0|    size_t status;
20085|      0|    size_t rlen;
20086|      0|    size_t counter;
20087|      0|    int tmp;
20088|      0|    long tmp___0;
20089|      0|    void *__cil_tmp10;
20090|      0|    char *__cil_tmp11;
20091|       |
20092|      0|    {
20093|      0|        {
20094|      0|            sprintf((char * /* __restrict  */)(command_buffer),
20095|      0|                    (char const * /* __restrict  */) "R%lu\n", length);
20096|      0|            tmp = do_command(handle, (char const *)(command_buffer));
20097|      0|        }
20098|      0|        if (tmp == -1) {
20099|      0|            return ((size_t)-1);
20100|      0|        }
20101|      0|        else {
20102|      0|            {
20103|      0|                tmp___0 = get_status(handle);
20104|      0|                status = (size_t)tmp___0;
20105|      0|            }
20106|      0|            if (status == 0xffffffffffffffffUL) {
20107|      0|                return ((size_t)-1);
20108|      0|            }
20109|      0|        }
20110|      0|        counter = (size_t)0;
20111|      0|        {
20112|      0|            while (1) {
20113|      0|while_continue: /* CIL Label */
20114|      0|                ;
20115|      0|                if (!(counter < status)) {
20116|      0|                    goto while_break;
20117|      0|                }
20118|      0|                {
20119|      0|                    rlen = safe_read(from_remote[handle][0], (void *)buffer___2,
20120|      0|                                     status - counter);
20121|      0|                }
20122|      0|                if (rlen == 0xffffffffffffffffUL) {
20123|      0|                    {
20124|      0|                        _rmt_shutdown(handle, 5);
20125|      0|                    }
20126|      0|                    return ((size_t)-1);
20127|      0|                }
20128|      0|                else {
20129|      0|                    if (rlen == 0UL) {
20130|      0|                        {
20131|      0|                            _rmt_shutdown(handle, 5);
20132|      0|                        }
20133|      0|                        return ((size_t)-1);
20134|      0|                    }
20135|      0|                }
20136|      0|                counter += rlen;
20137|      0|                buffer___2 += rlen;
20138|      0|            }
20139|      0|while_break: /* CIL Label */
20140|      0|            ;
20141|      0|        }
20142|      0|        return (status);
20143|      0|    }
20144|      0|}
20145|       |size_t rmt_write__(int handle, char *buffer___2, size_t length)
20146|      0|{
20147|      0|    char command_buffer[64];
20148|      0|    void (*pipe_handler)();
20149|      0|    size_t written;
20150|      0|    int tmp;
20151|      0|    void (*tmp___0)(int);
20152|      0|    long r;
20153|      0|    long tmp___1;
20154|      0|    void *__cil_tmp11;
20155|      0|    char *__cil_tmp12;
20156|       |
20157|      0|    {
20158|      0|        {
20159|      0|            sprintf((char * /* __restrict  */)(command_buffer),
20160|      0|                    (char const * /* __restrict  */) "W%lu\n", length);
20161|      0|            tmp = do_command(handle, (char const *)(command_buffer));
20162|      0|        }
20163|      0|        if (tmp == -1) {
20164|      0|            return ((size_t)0);
20165|      0|        }
20166|      0|        {
20167|      0|            tmp___0 = signal(13, (void (*)(int))1);
20168|      0|            pipe_handler = (void (*)())tmp___0;
20169|      0|            written =
20170|      0|                full_write(to_remote[handle][1], (void const *)buffer___2, length);
20171|      0|            signal(13, (void (*)(int))pipe_handler);
20172|      0|        }
20173|      0|        if (written == length) {
20174|      0|            {
20175|      0|                tmp___1 = get_status(handle);
20176|      0|                r = tmp___1;
20177|      0|            }
20178|      0|            if (r < 0L) {
20179|      0|                return ((size_t)0);
20180|      0|            }
20181|      0|            if ((size_t)r == length) {
20182|      0|                return (length);
20183|      0|            }
20184|      0|            written = (size_t)r;
20185|      0|        }
20186|      0|        {
20187|      0|            _rmt_shutdown(handle, 5);
20188|      0|        }
20189|      0|        return (written);
20190|      0|    }
20191|      0|}
20192|       |off_t rmt_lseek__(int handle, off_t offset, int whence)
20193|      0|{
20194|      0|    char command_buffer[64];
20195|      0|    char operand_buffer[(((sizeof(uintmax_t) * 8UL) * 302UL) / 1000UL + 1UL) +
20196|      0|                                             1UL];
20197|      0|    uintmax_t u;
20198|      0|    char *p;
20199|      0|    int tmp;
20200|      0|    off_t tmp___0;
20201|      0|    void *__cil_tmp10;
20202|      0|    void *__cil_tmp11;
20203|      0|    char *__cil_tmp12;
20204|       |
20205|      0|    {
20206|      0|        if (offset < 0L) {
20207|      0|            u = -((uintmax_t)offset);
20208|      0|        }
20209|      0|        else {
20210|      0|            u = (uintmax_t)offset;
20211|      0|        }
20212|      0|        p = operand_buffer + sizeof(operand_buffer);
20213|      0|        p--;
20214|      0|        *p = (char)0;
20215|      0|        {
20216|      0|            while (1) {
20217|      0|while_continue: /* CIL Label */
20218|      0|                ;
20219|      0|                p--;
20220|      0|                *p = (char)(48 + (int)(u % 10UL));
20221|      0|                u /= 10UL;
20222|      0|                if (!(u != 0UL)) {
20223|      0|                    goto while_break;
20224|      0|                }
20225|      0|            }
20226|      0|while_break: /* CIL Label */
20227|      0|            ;
20228|      0|        }
20229|      0|        if (offset < 0L) {
20230|      0|            p--;
20231|      0|            *p = (char)'-';
20232|      0|        }
20233|      0|        {
20234|      0|            if (whence == 0) {
20235|      0|                goto case_0;
20236|      0|            }
20237|      0|            if (whence == 1) {
20238|      0|                goto case_1;
20239|      0|            }
20240|      0|            if (whence == 2) {
20241|      0|                goto case_2;
20242|      0|            }
20243|      0|            goto switch_default;
20244|      0|case_0: /* CIL Label */
20245|      0|            whence = 0;
20246|      0|            goto switch_break;
20247|      0|case_1: /* CIL Label */
20248|      0|            whence = 1;
20249|      0|            goto switch_break;
20250|      0|case_2: /* CIL Label */
20251|      0|            whence = 2;
20252|      0|            goto switch_break;
20253|      0|switch_default : { /* CIL Label */
20254|      0|                abort();
20255|      0|            }
20256|      0|switch_break: /* CIL Label */
20257|      0|            ;
20258|      0|        }
20259|      0|        {
20260|      0|            sprintf((char * /* __restrict  */)(command_buffer),
20261|      0|                    (char const * /* __restrict  */) "L%s\n%d\n", p, whence);
20262|      0|            tmp = do_command(handle, (char const *)(command_buffer));
20263|      0|        }
20264|      0|        if (tmp == -1) {
20265|      0|            return ((off_t)-1);
20266|      0|        }
20267|      0|        {
20268|      0|            tmp___0 = get_status_off(handle);
20269|      0|        }
20270|      0|        return (tmp___0);
20271|      0|    }
20272|      0|}
20273|       |int rmt_ioctl__(int handle, int operation, char *argument)
20274|      0|{
20275|      0|    int *tmp;
20276|      0|    char command_buffer[64];
20277|      0|    char operand_buffer[(((sizeof(uintmax_t) * 8UL) * 302UL) / 1000UL + 1UL) +
20278|      0|                                             1UL];
20279|      0|    uintmax_t u;
20280|      0|    char *p;
20281|      0|    int tmp___0;
20282|      0|    long tmp___1;
20283|      0|    ssize_t status;
20284|      0|    size_t counter;
20285|      0|    int tmp___2;
20286|      0|    char copy;
20287|      0|    void *__cil_tmp15;
20288|      0|    void *__cil_tmp16;
20289|      0|    char *__cil_tmp17;
20290|      0|    char *__cil_tmp18;
20291|       |
20292|      0|    {
20293|      0|        {
20294|      0|            if (operation ==
20295|      0|                    (int)((unsigned long)(((1U << 30) | (unsigned int)(109 << 8)) | 1U) |
20296|      0|                          (sizeof(struct mtop) << 16))) {
20297|      0|                goto case_exp;
20298|      0|            }
20299|      0|            if (operation ==
20300|      0|                    (int)((unsigned long)(((2U << 30) | (unsigned int)(109 << 8)) | 2U) |
20301|      0|                          (sizeof(struct mtget) << 16))) {
20302|      0|                goto case_exp___0;
20303|      0|            }
20304|      0|            goto switch_default;
20305|      0|switch_default : { /* CIL Label */
20306|      0|                tmp = __errno_location();
20307|      0|                *tmp = 95;
20308|      0|            }
20309|      0|            return (-1);
20310|      0|case_exp: /* CIL Label */
20311|      0|            if (((struct mtop *)argument)->mt_count < 0) {
20312|      0|                u = -((uintmax_t)((struct mtop *)argument)->mt_count);
20313|      0|            }
20314|      0|            else {
20315|      0|                u = (uintmax_t)((struct mtop *)argument)->mt_count;
20316|      0|            }
20317|      0|            p = operand_buffer + sizeof(operand_buffer);
20318|      0|            p--;
20319|      0|            *p = (char)0;
20320|      0|            {
20321|      0|                while (1) {
20322|      0|while_continue: /* CIL Label */
20323|      0|                    ;
20324|      0|                    p--;
20325|      0|                    *p = (char)(48 + (int)(u % 10UL));
20326|      0|                    u /= 10UL;
20327|      0|                    if (!(u != 0UL)) {
20328|      0|                        goto while_break;
20329|      0|                    }
20330|      0|                }
20331|      0|while_break: /* CIL Label */
20332|      0|                ;
20333|      0|            }
20334|      0|            if (((struct mtop *)argument)->mt_count < 0) {
20335|      0|                p--;
20336|      0|                *p = (char)'-';
20337|      0|            }
20338|      0|            {
20339|      0|                sprintf((char * /* __restrict  */)(command_buffer),
20340|      0|                        (char const * /* __restrict  */) "I%d\n%s\n",
20341|      0|                        (int)((struct mtop *)argument)->mt_op, p);
20342|      0|                tmp___0 = do_command(handle, (char const *)(command_buffer));
20343|      0|            }
20344|      0|            if (tmp___0 == -1) {
20345|      0|                return (-1);
20346|      0|            }
20347|      0|            {
20348|      0|                tmp___1 = get_status(handle);
20349|      0|            }
20350|      0|            return ((int)tmp___1);
20351|      0|case_exp___0 : { /* CIL Label */
20352|      0|                tmp___2 = do_command(handle, "S");
20353|      0|            }
20354|      0|            if (tmp___2 == -1) {
20355|      0|                return (-1);
20356|      0|            }
20357|      0|            else {
20358|      0|                {
20359|      0|                    status = get_status(handle);
20360|      0|                }
20361|      0|                if (status == -1L) {
20362|      0|                    return (-1);
20363|      0|                }
20364|      0|            }
20365|      0|            {
20366|      0|                while (1) {
20367|      0|while_continue___0: /* CIL Label */
20368|      0|                    ;
20369|      0|                    if (!(status > 0L)) {
20370|      0|                        goto while_break___0;
20371|      0|                    }
20372|      0|                    {
20373|      0|                        counter = safe_read(from_remote[handle][0], (void *)argument,
20374|      0|                                            (size_t)status);
20375|      0|                    }
20376|      0|                    if (counter == 0xffffffffffffffffUL) {
20377|      0|                        {
20378|      0|                            _rmt_shutdown(handle, 5);
20379|      0|                        }
20380|      0|                        return (-1);
20381|      0|                    }
20382|      0|                    else {
20383|      0|                        if (counter == 0UL) {
20384|      0|                            {
20385|      0|                                _rmt_shutdown(handle, 5);
20386|      0|                            }
20387|      0|                            return (-1);
20388|      0|                        }
20389|      0|                    }
20390|      0|                    status = (ssize_t)((size_t)status - counter);
20391|      0|                    argument += counter;
20392|      0|                }
20393|      0|while_break___0: /* CIL Label */
20394|      0|                ;
20395|      0|            }
20396|      0|            if (((struct mtget *)argument)->mt_type < 256L) {
20397|      0|                return (0);
20398|      0|            }
20399|      0|            counter = (size_t)0;
20400|      0|            {
20401|      0|                while (1) {
20402|      0|while_continue___1: /* CIL Label */
20403|      0|                    ;
20404|      0|                    if (!(counter < (size_t)status)) {
20405|      0|                        goto while_break___1;
20406|      0|                    }
20407|      0|                    copy = *(argument + counter);
20408|      0|                    *(argument + counter) = *(argument + (counter + 1UL));
20409|      0|                    *(argument + (counter + 1UL)) = copy;
20410|      0|                    counter += 2UL;
20411|      0|                }
20412|      0|while_break___1: /* CIL Label */
20413|      0|                ;
20414|      0|            }
20415|      0|            return (0);
20416|      0|switch_break: /* CIL Label */
20417|      0|            ;
20418|      0|        }
20419|      0|    }
20420|      0|}
20421|       |/* #pragma merger("0","00c.sparse.o.i","") */
20422|       |static _Bool tar_sparse_member_p(struct tar_sparse_file *file)
20423|      0|{
20424|      0|    _Bool tmp;
20425|       |
20426|      0|    {
20427|      0|        if ((file->optab)->sparse_member_p) {
20428|      0|            {
20429|      0|                tmp = (*((file->optab)->sparse_member_p))(file);
20430|      0|            }
20431|      0|            return (tmp);
20432|      0|        }
20433|      0|        return ((_Bool)0);
20434|      0|    }
20435|      0|}
20436|       |static _Bool tar_sparse_init(struct tar_sparse_file *file)
20437|      0|{
20438|      0|    _Bool tmp;
20439|       |
20440|      0|    {
20441|      0|        file->dumped_size = (size_t)0;
20442|      0|        if ((file->optab)->init) {
20443|      0|            {
20444|      0|                tmp = (*((file->optab)->init))(file);
20445|      0|            }
20446|      0|            return (tmp);
20447|      0|        }
20448|      0|        return ((_Bool)1);
20449|      0|    }
20450|      0|}
20451|       |static _Bool tar_sparse_done(struct tar_sparse_file *file)
20452|      0|{
20453|      0|    _Bool tmp;
20454|       |
20455|      0|    {
20456|      0|        if ((file->optab)->done) {
20457|      0|            {
20458|      0|                tmp = (*((file->optab)->done))(file);
20459|      0|            }
20460|      0|            return (tmp);
20461|      0|        }
20462|      0|        return ((_Bool)1);
20463|      0|    }
20464|      0|}
20465|       |static _Bool tar_sparse_scan(struct tar_sparse_file *file,
20466|       |                             enum sparse_scan_state state, void *block)
20467|      0|{
20468|      0|    _Bool tmp;
20469|       |
20470|      0|    {
20471|      0|        if ((file->optab)->scan_block) {
20472|      0|            {
20473|      0|                tmp = (*((file->optab)->scan_block))(file, state, block);
20474|      0|            }
20475|      0|            return (tmp);
20476|      0|        }
20477|      0|        return ((_Bool)1);
20478|      0|    }
20479|      0|}
20480|       |static _Bool tar_sparse_dump_region(struct tar_sparse_file *file, size_t i)
20481|      0|{
20482|      0|    _Bool tmp;
20483|       |
20484|      0|    {
20485|      0|        if ((file->optab)->dump_region) {
20486|      0|            {
20487|      0|                tmp = (*((file->optab)->dump_region))(file, i);
20488|      0|            }
20489|      0|            return (tmp);
20490|      0|        }
20491|      0|        return ((_Bool)0);
20492|      0|    }
20493|      0|}
20494|       |static _Bool tar_sparse_extract_region(struct tar_sparse_file *file, size_t i)
20495|      0|{
20496|      0|    _Bool tmp;
20497|       |
20498|      0|    {
20499|      0|        if ((file->optab)->extract_region) {
20500|      0|            {
20501|      0|                tmp = (*((file->optab)->extract_region))(file, i);
20502|      0|            }
20503|      0|            return (tmp);
20504|      0|        }
20505|      0|        return ((_Bool)0);
20506|      0|    }
20507|      0|}
20508|       |static _Bool tar_sparse_dump_header(struct tar_sparse_file *file)
20509|      0|{
20510|      0|    _Bool tmp;
20511|       |
20512|      0|    {
20513|      0|        if ((file->optab)->dump_header) {
20514|      0|            {
20515|      0|                tmp = (*((file->optab)->dump_header))(file);
20516|      0|            }
20517|      0|            return (tmp);
20518|      0|        }
20519|      0|        return ((_Bool)0);
20520|      0|    }
20521|      0|}
20522|       |static _Bool tar_sparse_decode_header(struct tar_sparse_file *file)
20523|      0|{
20524|      0|    _Bool tmp;
20525|       |
20526|      0|    {
20527|      0|        if ((file->optab)->decode_header) {
20528|      0|            {
20529|      0|                tmp = (*((file->optab)->decode_header))(file);
20530|      0|            }
20531|      0|            return (tmp);
20532|      0|        }
20533|      0|        return ((_Bool)1);
20534|      0|    }
20535|      0|}
20536|       |static _Bool tar_sparse_fixup_header(struct tar_sparse_file *file)
20537|      0|{
20538|      0|    _Bool tmp;
20539|       |
20540|      0|    {
20541|      0|        if ((file->optab)->fixup_header) {
20542|      0|            {
20543|      0|                tmp = (*((file->optab)->fixup_header))(file);
20544|      0|            }
20545|      0|            return (tmp);
20546|      0|        }
20547|      0|        return ((_Bool)1);
20548|      0|    }
20549|      0|}
20550|       |static _Bool lseek_or_error(struct tar_sparse_file *file, off_t offset,
20551|       |                            int whence)
20552|      0|{
20553|      0|    __off_t tmp;
20554|       |
20555|      0|    {
20556|      0|        {
20557|      0|            tmp = lseek(file->fd, offset, whence);
20558|      0|        }
20559|      0|        if (tmp < 0L) {
20560|      0|            {
20561|      0|                seek_diag_details((char const *)(file->stat_info)->orig_file_name,
20562|      0|                                  offset);
20563|      0|            }
20564|      0|            return ((_Bool)0);
20565|      0|        }
20566|      0|        return ((_Bool)1);
20567|      0|    }
20568|      0|}
20569|       |static _Bool zero_block_p(char *buffer___2, size_t size)
20570|      0|{
20571|      0|    char *tmp;
20572|      0|    size_t tmp___0;
20573|       |
20574|      0|    {
20575|      0|        {
20576|      0|            while (1) {
20577|      0|while_continue: /* CIL Label */
20578|      0|                ;
20579|      0|                tmp___0 = size;
20580|      0|                size--;
20581|      0|                if (!tmp___0) {
20582|      0|                    goto while_break;
20583|      0|                }
20584|      0|                tmp = buffer___2;
20585|      0|                buffer___2++;
20586|      0|                if (*tmp) {
20587|      0|                    return ((_Bool)0);
20588|      0|                }
20589|      0|            }
20590|      0|while_break: /* CIL Label */
20591|      0|            ;
20592|      0|        }
20593|      0|        return ((_Bool)1);
20594|      0|    }
20595|      0|}
20596|       |static void sparse_add_map(struct tar_sparse_file *file, struct sp_array *sp)
20597|      0|{
20598|      0|    void *tmp;
20599|      0|    void *tmp___0;
20600|      0|    size_t tmp___1;
20601|       |
20602|      0|    {
20603|      0|        if ((unsigned long)(file->stat_info)->sparse_map ==
20604|      0|                (unsigned long)((void *)0)) {
20605|      0|            {
20606|      0|                tmp = xmalloc(21UL * sizeof(*((file->stat_info)->sparse_map + 0)));
20607|      0|                (file->stat_info)->sparse_map = (struct sp_array *)tmp;
20608|      0|                (file->stat_info)->sparse_map_size = (size_t)21;
20609|      0|            }
20610|      0|        }
20611|      0|        else {
20612|      0|            if ((file->stat_info)->sparse_map_avail ==
20613|      0|                    (file->stat_info)->sparse_map_size) {
20614|      0|                {
20615|      0|                    (file->stat_info)->sparse_map_size *= 2UL;
20616|      0|                    tmp___0 = xrealloc((void *)(file->stat_info)->sparse_map,
20617|      0|                                       (file->stat_info)->sparse_map_size *
20618|      0|                                       sizeof(*((file->stat_info)->sparse_map + 0)));
20619|      0|                    (file->stat_info)->sparse_map = (struct sp_array *)tmp___0;
20620|      0|                }
20621|      0|            }
20622|      0|        }
20623|      0|        tmp___1 = (file->stat_info)->sparse_map_avail;
20624|      0|        ((file->stat_info)->sparse_map_avail)++;
20625|      0|        *((file->stat_info)->sparse_map + tmp___1) = *sp;
20626|      0|        return;
20627|      0|    }
20628|      0|}
20629|       |static char buffer___1[512];
20630|       |static _Bool sparse_scan_file(struct tar_sparse_file *file)
20631|      0|{
20632|      0|    size_t count;
20633|      0|    size_t offset;
20634|      0|    struct sp_array sp;
20635|      0|    _Bool tmp;
20636|      0|    _Bool tmp___0;
20637|      0|    _Bool tmp___1;
20638|      0|    _Bool tmp___2;
20639|      0|    _Bool tmp___3;
20640|      0|    _Bool tmp___4;
20641|       |
20642|      0|    {
20643|      0|        {
20644|      0|            offset = (size_t)0;
20645|      0|            sp.offset = (off_t)0;
20646|      0|            sp.numbytes = (size_t)0;
20647|      0|            tmp = lseek_or_error(file, (off_t)0, 0);
20648|      0|        }
20649|      0|        if (!tmp) {
20650|      0|            return ((_Bool)0);
20651|      0|        }
20652|      0|        {
20653|      0|            memset((void *)(buffer___1), 0, (size_t)512);
20654|      0|            (file->stat_info)->sparse_map_size = (size_t)0;
20655|      0|            (file->stat_info)->archive_file_size = (off_t)0;
20656|      0|            tmp___0 = tar_sparse_scan(file, (enum sparse_scan_state)0, (void *)0);
20657|      0|        }
20658|      0|        if (!tmp___0) {
20659|      0|            return ((_Bool)0);
20660|      0|        }
20661|      0|        {
20662|      0|            while (1) {
20663|      0|while_continue: /* CIL Label */
20664|      0|                ;
20665|      0|                {
20666|      0|                    count = safe_read(file->fd, (void *)(buffer___1), sizeof(buffer___1));
20667|      0|                }
20668|      0|                if (count != 0UL) {
20669|      0|                    if (!(count != 0xffffffffffffffffUL)) {
20670|      0|                        goto while_break;
20671|      0|                    }
20672|      0|                }
20673|      0|                else {
20674|      0|                    goto while_break;
20675|      0|                }
20676|      0|                {
20677|      0|                    tmp___3 = zero_block_p(buffer___1, count);
20678|      0|                }
20679|      0|                if (tmp___3) {
20680|      0|                    if (sp.numbytes) {
20681|      0|                        {
20682|      0|                            sparse_add_map(file, &sp);
20683|      0|                            sp.numbytes = (size_t)0;
20684|      0|                            tmp___1 =
20685|      0|                                tar_sparse_scan(file, (enum sparse_scan_state)1, (void *)0);
20686|      0|                        }
20687|      0|                        if (!tmp___1) {
20688|      0|                            return ((_Bool)0);
20689|      0|                        }
20690|      0|                    }
20691|      0|                }
20692|      0|                else {
20693|      0|                    if (sp.numbytes == 0UL) {
20694|      0|                        sp.offset = (off_t)offset;
20695|      0|                    }
20696|      0|                    {
20697|      0|                        sp.numbytes += count;
20698|      0|                        (file->stat_info)->archive_file_size =
20699|      0|                            (off_t)((size_t)(file->stat_info)->archive_file_size + count);
20700|      0|                        tmp___2 = tar_sparse_scan(file, (enum sparse_scan_state)1,
20701|      0|                                                  (void *)(buffer___1));
20702|      0|                    }
20703|      0|                    if (!tmp___2) {
20704|      0|                        return ((_Bool)0);
20705|      0|                    }
20706|      0|                }
20707|      0|                {
20708|      0|                    offset += count;
20709|      0|                    memset((void *)(buffer___1), 0, (size_t)512);
20710|      0|                }
20711|      0|            }
20712|      0|while_break: /* CIL Label */
20713|      0|            ;
20714|      0|        }
20715|      0|        if (sp.numbytes == 0UL) {
20716|      0|            sp.offset = (off_t)offset;
20717|      0|        }
20718|      0|        {
20719|      0|            sparse_add_map(file, &sp);
20720|      0|            (file->stat_info)->archive_file_size =
20721|      0|                (off_t)((size_t)(file->stat_info)->archive_file_size + count);
20722|      0|            tmp___4 = tar_sparse_scan(file, (enum sparse_scan_state)2, (void *)0);
20723|      0|        }
20724|      0|        return (tmp___4);
20725|      0|    }
20726|      0|}
20727|       |static struct tar_sparse_optab oldgnu_optab;
20728|       |static struct tar_sparse_optab star_optab;
20729|       |static struct tar_sparse_optab pax_optab;
20730|       |static _Bool sparse_select_optab(struct tar_sparse_file *file)
20731|      0|{
20732|      0|    unsigned int tmp;
20733|       |
20734|      0|    {
20735|      0|        if ((unsigned int)current_format == 0U) {
20736|      0|            tmp = (unsigned int)archive_format;
20737|      0|        }
20738|      0|        else {
20739|      0|            tmp = (unsigned int)current_format;
20740|      0|        }
20741|      0|        {
20742|      0|            if (tmp == 1U) {
20743|      0|                goto case_1;
20744|      0|            }
20745|      0|            if (tmp == 3U) {
20746|      0|                goto case_1;
20747|      0|            }
20748|      0|            if (tmp == 2U) {
20749|      0|                goto case_2;
20750|      0|            }
20751|      0|            if (tmp == 6U) {
20752|      0|                goto case_2;
20753|      0|            }
20754|      0|            if (tmp == 4U) {
20755|      0|                goto case_4;
20756|      0|            }
20757|      0|            if (tmp == 5U) {
20758|      0|                goto case_5;
20759|      0|            }
20760|      0|            goto switch_default;
20761|      0|case_1: /* CIL Label */
20762|      0|case_3: /* CIL Label */
20763|      0|            return ((_Bool)0);
20764|      0|case_2: /* CIL Label */
20765|      0|case_6: /* CIL Label */
20766|      0|            file->optab = &oldgnu_optab;
20767|      0|            goto switch_break;
20768|      0|case_4: /* CIL Label */
20769|      0|            file->optab = &pax_optab;
20770|      0|            goto switch_break;
20771|      0|case_5: /* CIL Label */
20772|      0|            file->optab = &star_optab;
20773|      0|            goto switch_break;
20774|      0|switch_default: /* CIL Label */
20775|      0|            return ((_Bool)0);
20776|      0|switch_break: /* CIL Label */
20777|      0|            ;
20778|      0|        }
20779|      0|        return ((_Bool)1);
20780|      0|    }
20781|      0|}
20782|       |static _Bool sparse_dump_region(struct tar_sparse_file *file, size_t i)
20783|      0|{
20784|      0|    union block *blk;
20785|      0|    off_t bytes_left;
20786|      0|    _Bool tmp;
20787|      0|    size_t bufsize;
20788|      0|    size_t bytes_read;
20789|      0|    off_t tmp___0;
20790|       |
20791|      0|    {
20792|      0|        {
20793|      0|            bytes_left = (off_t)((file->stat_info)->sparse_map + i)->numbytes;
20794|      0|            tmp =
20795|      0|                lseek_or_error(file, ((file->stat_info)->sparse_map + i)->offset, 0);
20796|      0|        }
20797|      0|        if (!tmp) {
20798|      0|            return ((_Bool)0);
20799|      0|        }
20800|      0|        {
20801|      0|            while (1) {
20802|      0|while_continue: /* CIL Label */
20803|      0|                ;
20804|      0|                if (!(bytes_left > 0L)) {
20805|      0|                    goto while_break;
20806|      0|                }
20807|      0|                if (bytes_left > 512L) {
20808|      0|                    tmp___0 = (off_t)512;
20809|      0|                }
20810|      0|                else {
20811|      0|                    tmp___0 = bytes_left;
20812|      0|                }
20813|      0|                {
20814|      0|                    bufsize = (size_t)tmp___0;
20815|      0|                    blk = find_next_block();
20816|      0|                    memset((void *)(blk->buffer), 0, (size_t)512);
20817|      0|                    bytes_read = safe_read(file->fd, (void *)(blk->buffer), bufsize);
20818|      0|                }
20819|      0|                if (bytes_read == 0xffffffffffffffffUL) {
20820|      0|                    {
20821|      0|                        read_diag_details(
20822|      0|                            (char const *)(file->stat_info)->orig_file_name,
20823|      0|                            (off_t)(((size_t)((file->stat_info)->sparse_map + i)->offset +
20824|      0|                                     ((file->stat_info)->sparse_map + i)->numbytes) -
20825|      0|                                    (size_t)bytes_left),
20826|      0|                            bufsize);
20827|      0|                    }
20828|      0|                    return ((_Bool)0);
20829|      0|                }
20830|      0|                {
20831|      0|                    bytes_left = (off_t)((size_t)bytes_left - bytes_read);
20832|      0|                    file->dumped_size += bytes_read;
20833|      0|                    set_next_block_after(blk);
20834|      0|                }
20835|      0|            }
20836|      0|while_break: /* CIL Label */
20837|      0|            ;
20838|      0|        }
20839|      0|        return ((_Bool)1);
20840|      0|    }
20841|      0|}
20842|       |static _Bool sparse_extract_region(struct tar_sparse_file *file, size_t i)
20843|      0|{
20844|      0|    size_t write_size;
20845|      0|    _Bool tmp;
20846|      0|    int tmp___0;
20847|      0|    size_t count;
20848|      0|    size_t wrbytes;
20849|      0|    union block *blk;
20850|      0|    union block *tmp___1;
20851|      0|    char *tmp___2;
20852|      0|    char *__cil_tmp11;
20853|       |
20854|      0|    {
20855|      0|        {
20856|      0|            tmp =
20857|      0|                lseek_or_error(file, ((file->stat_info)->sparse_map + i)->offset, 0);
20858|      0|        }
20859|      0|        if (!tmp) {
20860|      0|            return ((_Bool)0);
20861|      0|        }
20862|      0|        write_size = ((file->stat_info)->sparse_map + i)->numbytes;
20863|      0|        if (write_size == 0UL) {
20864|      0|            {
20865|      0|                tmp___0 = sys_truncate(file->fd);
20866|      0|            }
20867|      0|            if (tmp___0) {
20868|      0|                {
20869|      0|                    truncate_warn((char const *)(file->stat_info)->orig_file_name);
20870|      0|                }
20871|      0|            }
20872|      0|        }
20873|      0|        else {
20874|      0|            {
20875|      0|                while (1) {
20876|      0|while_continue: /* CIL Label */
20877|      0|                    ;
20878|      0|                    if (!(write_size > 0UL)) {
20879|      0|                        goto while_break;
20880|      0|                    }
20881|      0|                    if (write_size > 512UL) {
20882|      0|                        wrbytes = (size_t)512;
20883|      0|                    }
20884|      0|                    else {
20885|      0|                        wrbytes = write_size;
20886|      0|                    }
20887|      0|                    {
20888|      0|                        tmp___1 = find_next_block();
20889|      0|                        blk = tmp___1;
20890|      0|                    }
20891|      0|                    if (!blk) {
20892|      0|                        {
20893|      0|                            tmp___2 = gettext("Unexpected EOF in archive");
20894|      0|                            error(0, 0, (char const *)tmp___2);
20895|      0|                            exit_status = 2;
20896|      0|                        }
20897|      0|                        return ((_Bool)0);
20898|      0|                    }
20899|      0|                    {
20900|      0|                        set_next_block_after(blk);
20901|      0|                        count = full_write(file->fd, (void const *)(blk->buffer), wrbytes);
20902|      0|                        write_size -= count;
20903|      0|                        file->dumped_size += count;
20904|      0|                    }
20905|      0|                    if (count != wrbytes) {
20906|      0|                        {
20907|      0|                            write_error_details(
20908|      0|                                (char const *)(file->stat_info)->orig_file_name, count,
20909|      0|                                wrbytes);
20910|      0|                        }
20911|      0|                        return ((_Bool)0);
20912|      0|                    }
20913|      0|                }
20914|      0|while_break: /* CIL Label */
20915|      0|                ;
20916|      0|            }
20917|      0|        }
20918|      0|        return ((_Bool)1);
20919|      0|    }
20920|      0|}
20921|       |enum dump_status sparse_dump_file(int fd, struct tar_stat_info *st)
20922|      0|{
20923|      0|    _Bool rc___1;
20924|      0|    struct tar_sparse_file file;
20925|      0|    _Bool tmp;
20926|      0|    _Bool tmp___0;
20927|      0|    size_t i;
20928|      0|    _Bool tmp___1;
20929|      0|    int tmp___2;
20930|       |
20931|      0|    {
20932|      0|        {
20933|      0|            file.stat_info = st;
20934|      0|            file.fd = fd;
20935|      0|            tmp = sparse_select_optab(&file);
20936|      0|        }
20937|      0|        if (tmp) {
20938|      0|            {
20939|      0|                tmp___0 = tar_sparse_init(&file);
20940|      0|            }
20941|      0|            if (!tmp___0) {
20942|      0|                return ((enum dump_status)3);
20943|      0|            }
20944|      0|        }
20945|      0|        else {
20946|      0|            return ((enum dump_status)3);
20947|      0|        }
20948|      0|        {
20949|      0|            rc___1 = sparse_scan_file(&file);
20950|      0|        }
20951|      0|        if (rc___1) {
20952|      0|            if ((file.optab)->dump_region) {
20953|      0|                {
20954|      0|                    tar_sparse_dump_header(&file);
20955|      0|                }
20956|      0|                if (fd >= 0) {
20957|      0|                    i = (size_t)0;
20958|      0|                    {
20959|      0|                        while (1) {
20960|      0|while_continue: /* CIL Label */
20961|      0|                            ;
20962|      0|                            if (rc___1) {
20963|      0|                                if (!(i < (file.stat_info)->sparse_map_avail)) {
20964|      0|                                    goto while_break;
20965|      0|                                }
20966|      0|                            }
20967|      0|                            else {
20968|      0|                                goto while_break;
20969|      0|                            }
20970|      0|                            {
20971|      0|                                rc___1 = tar_sparse_dump_region(&file, i);
20972|      0|                                i++;
20973|      0|                            }
20974|      0|                        }
20975|      0|while_break: /* CIL Label */
20976|      0|                        ;
20977|      0|                    }
20978|      0|                }
20979|      0|            }
20980|      0|        }
20981|      0|        {
20982|      0|            pad_archive((off_t)((size_t)(file.stat_info)->archive_file_size -
20983|      0|                                file.dumped_size));
20984|      0|            tmp___1 = tar_sparse_done(&file);
20985|      0|        }
20986|      0|        if (tmp___1) {
20987|      0|            if (rc___1) {
20988|      0|                tmp___2 = 0;
20989|      0|            }
20990|      0|            else {
20991|      0|                tmp___2 = 1;
20992|      0|            }
20993|      0|        }
20994|      0|        else {
20995|      0|            tmp___2 = 1;
20996|      0|        }
20997|      0|        return ((enum dump_status)tmp___2);
20998|      0|    }
20999|      0|}
21000|       |_Bool sparse_file_p(struct tar_stat_info *st)
21001|      0|{
21002|       |
21003|      0|    {
21004|      0|        return ((_Bool)(st->stat.st_blocks <
21005|      0|                        st->stat.st_size / 512L +
21006|      0|                        (__off_t)(st->stat.st_size % 512L != 0L)));
21007|      0|    }
21008|      0|}
21009|       |_Bool sparse_member_p(struct tar_stat_info *st)
21010|      0|{
21011|      0|    struct tar_sparse_file file;
21012|      0|    _Bool tmp;
21013|      0|    _Bool tmp___0;
21014|       |
21015|      0|    {
21016|      0|        {
21017|      0|            tmp = sparse_select_optab(&file);
21018|      0|        }
21019|      0|        if (!tmp) {
21020|      0|            return ((_Bool)0);
21021|      0|        }
21022|      0|        {
21023|      0|            file.stat_info = st;
21024|      0|            tmp___0 = tar_sparse_member_p(&file);
21025|      0|        }
21026|      0|        return (tmp___0);
21027|      0|    }
21028|      0|}
21029|       |_Bool sparse_fixup_header(struct tar_stat_info *st)
21030|      0|{
21031|      0|    struct tar_sparse_file file;
21032|      0|    _Bool tmp;
21033|      0|    _Bool tmp___0;
21034|       |
21035|      0|    {
21036|      0|        {
21037|      0|            tmp = sparse_select_optab(&file);
21038|      0|        }
21039|      0|        if (!tmp) {
21040|      0|            return ((_Bool)0);
21041|      0|        }
21042|      0|        {
21043|      0|            file.stat_info = st;
21044|      0|            tmp___0 = tar_sparse_fixup_header(&file);
21045|      0|        }
21046|      0|        return (tmp___0);
21047|      0|    }
21048|      0|}
21049|       |enum dump_status sparse_extract_file(int fd, struct tar_stat_info *st,
21050|       |                                     off_t *size)
21051|      0|{
21052|      0|    _Bool rc___1;
21053|      0|    struct tar_sparse_file file;
21054|      0|    size_t i;
21055|      0|    _Bool tmp;
21056|      0|    _Bool tmp___0;
21057|      0|    _Bool tmp___1;
21058|      0|    int tmp___2;
21059|       |
21060|      0|    {
21061|      0|        {
21062|      0|            rc___1 = (_Bool)1;
21063|      0|            file.stat_info = st;
21064|      0|            file.fd = fd;
21065|      0|            tmp = sparse_select_optab(&file);
21066|      0|        }
21067|      0|        if (tmp) {
21068|      0|            {
21069|      0|                tmp___0 = tar_sparse_init(&file);
21070|      0|            }
21071|      0|            if (!tmp___0) {
21072|      0|                return ((enum dump_status)3);
21073|      0|            }
21074|      0|        }
21075|      0|        else {
21076|      0|            return ((enum dump_status)3);
21077|      0|        }
21078|      0|        {
21079|      0|            rc___1 = tar_sparse_decode_header(&file);
21080|      0|            i = (size_t)0;
21081|      0|        }
21082|      0|        {
21083|      0|            while (1) {
21084|      0|while_continue: /* CIL Label */
21085|      0|                ;
21086|      0|                if (rc___1) {
21087|      0|                    if (!(i < (file.stat_info)->sparse_map_avail)) {
21088|      0|                        goto while_break;
21089|      0|                    }
21090|      0|                }
21091|      0|                else {
21092|      0|                    goto while_break;
21093|      0|                }
21094|      0|                {
21095|      0|                    rc___1 = tar_sparse_extract_region(&file, i);
21096|      0|                    i++;
21097|      0|                }
21098|      0|            }
21099|      0|while_break: /* CIL Label */
21100|      0|            ;
21101|      0|        }
21102|      0|        {
21103|      0|            *size = (off_t)((size_t)(file.stat_info)->archive_file_size -
21104|      0|                            file.dumped_size);
21105|      0|            tmp___1 = tar_sparse_done(&file);
21106|      0|        }
21107|      0|        if (tmp___1) {
21108|      0|            if (rc___1) {
21109|      0|                tmp___2 = 0;
21110|      0|            }
21111|      0|            else {
21112|      0|                tmp___2 = 1;
21113|      0|            }
21114|      0|        }
21115|      0|        else {
21116|      0|            tmp___2 = 1;
21117|      0|        }
21118|      0|        return ((enum dump_status)tmp___2);
21119|      0|    }
21120|      0|}
21121|       |enum dump_status sparse_skip_file(struct tar_stat_info *st)
21122|      0|{
21123|      0|    _Bool rc___1;
21124|      0|    struct tar_sparse_file file;
21125|      0|    _Bool tmp;
21126|      0|    _Bool tmp___0;
21127|      0|    _Bool tmp___1;
21128|      0|    int tmp___2;
21129|       |
21130|      0|    {
21131|      0|        {
21132|      0|            rc___1 = (_Bool)1;
21133|      0|            file.stat_info = st;
21134|      0|            file.fd = -1;
21135|      0|            tmp = sparse_select_optab(&file);
21136|      0|        }
21137|      0|        if (tmp) {
21138|      0|            {
21139|      0|                tmp___0 = tar_sparse_init(&file);
21140|      0|            }
21141|      0|            if (!tmp___0) {
21142|      0|                return ((enum dump_status)3);
21143|      0|            }
21144|      0|        }
21145|      0|        else {
21146|      0|            return ((enum dump_status)3);
21147|      0|        }
21148|      0|        {
21149|      0|            rc___1 = tar_sparse_decode_header(&file);
21150|      0|            skip_file((file.stat_info)->archive_file_size);
21151|      0|            tmp___1 = tar_sparse_done(&file);
21152|      0|        }
21153|      0|        if (tmp___1) {
21154|      0|            if (rc___1) {
21155|      0|                tmp___2 = 0;
21156|      0|            }
21157|      0|            else {
21158|      0|                tmp___2 = 1;
21159|      0|            }
21160|      0|        }
21161|      0|        else {
21162|      0|            tmp___2 = 1;
21163|      0|        }
21164|      0|        return ((enum dump_status)tmp___2);
21165|      0|    }
21166|      0|}
21167|       |static char diff_buffer___0[512];
21168|       |static _Bool check_sparse_region(struct tar_sparse_file *file, off_t beg,
21169|       |                                 off_t end)
21170|      0|{
21171|      0|    _Bool tmp;
21172|      0|    size_t bytes_read;
21173|      0|    size_t rdsize;
21174|      0|    char *tmp___0;
21175|      0|    _Bool tmp___1;
21176|      0|    char *__cil_tmp9;
21177|       |
21178|      0|    {
21179|      0|        {
21180|      0|            tmp = lseek_or_error(file, beg, 0);
21181|      0|        }
21182|      0|        if (!tmp) {
21183|      0|            return ((_Bool)0);
21184|      0|        }
21185|      0|        {
21186|      0|            while (1) {
21187|      0|while_continue: /* CIL Label */
21188|      0|                ;
21189|      0|                if (!(beg < end)) {
21190|      0|                    goto while_break;
21191|      0|                }
21192|      0|                rdsize = (size_t)(end - beg);
21193|      0|                if (rdsize > 512UL) {
21194|      0|                    rdsize = (size_t)512;
21195|      0|                }
21196|      0|                {
21197|      0|                    memset((void *)(diff_buffer___0), 0, (size_t)512);
21198|      0|                    bytes_read = safe_read(file->fd, (void *)(diff_buffer___0), rdsize);
21199|      0|                }
21200|      0|                if (bytes_read == 0xffffffffffffffffUL) {
21201|      0|                    {
21202|      0|                        read_diag_details((char const *)(file->stat_info)->orig_file_name,
21203|      0|                                          beg, rdsize);
21204|      0|                    }
21205|      0|                    return ((_Bool)0);
21206|      0|                }
21207|      0|                {
21208|      0|                    tmp___1 = zero_block_p(diff_buffer___0, bytes_read);
21209|      0|                }
21210|      0|                if (!tmp___1) {
21211|      0|                    {
21212|      0|                        tmp___0 = gettext("File fragment at %lu is not a hole");
21213|      0|                        report_difference(file->stat_info, (char const *)tmp___0, beg);
21214|      0|                    }
21215|      0|                    return ((_Bool)0);
21216|      0|                }
21217|      0|                beg = (off_t)((size_t)beg + bytes_read);
21218|      0|            }
21219|      0|while_break: /* CIL Label */
21220|      0|            ;
21221|      0|        }
21222|      0|        return ((_Bool)1);
21223|      0|    }
21224|      0|}
21225|       |static _Bool check_data_region(struct tar_sparse_file *file, size_t i)
21226|      0|{
21227|      0|    size_t size_left;
21228|      0|    _Bool tmp;
21229|      0|    size_t bytes_read;
21230|      0|    size_t rdsize;
21231|      0|    union block *blk;
21232|      0|    union block *tmp___0;
21233|      0|    char *tmp___1;
21234|      0|    char *tmp___2;
21235|      0|    int tmp___3;
21236|      0|    char *__cil_tmp12;
21237|      0|    char *__cil_tmp13;
21238|       |
21239|      0|    {
21240|      0|        {
21241|      0|            tmp =
21242|      0|                lseek_or_error(file, ((file->stat_info)->sparse_map + i)->offset, 0);
21243|      0|        }
21244|      0|        if (!tmp) {
21245|      0|            return ((_Bool)0);
21246|      0|        }
21247|      0|        size_left = ((file->stat_info)->sparse_map + i)->numbytes;
21248|      0|        {
21249|      0|            while (1) {
21250|      0|while_continue: /* CIL Label */
21251|      0|                ;
21252|      0|                if (!(size_left > 0UL)) {
21253|      0|                    goto while_break;
21254|      0|                }
21255|      0|                if (size_left > 512UL) {
21256|      0|                    rdsize = (size_t)512;
21257|      0|                }
21258|      0|                else {
21259|      0|                    rdsize = size_left;
21260|      0|                }
21261|      0|                {
21262|      0|                    tmp___0 = find_next_block();
21263|      0|                    blk = tmp___0;
21264|      0|                }
21265|      0|                if (!blk) {
21266|      0|                    {
21267|      0|                        tmp___1 = gettext("Unexpected EOF in archive");
21268|      0|                        error(0, 0, (char const *)tmp___1);
21269|      0|                        exit_status = 2;
21270|      0|                    }
21271|      0|                    return ((_Bool)0);
21272|      0|                }
21273|      0|                {
21274|      0|                    set_next_block_after(blk);
21275|      0|                    bytes_read = safe_read(file->fd, (void *)(diff_buffer___0), rdsize);
21276|      0|                }
21277|      0|                if (bytes_read == 0xffffffffffffffffUL) {
21278|      0|                    {
21279|      0|                        read_diag_details(
21280|      0|                            (char const *)(file->stat_info)->orig_file_name,
21281|      0|                            (off_t)(((size_t)((file->stat_info)->sparse_map + i)->offset +
21282|      0|                                     ((file->stat_info)->sparse_map + i)->numbytes) -
21283|      0|                                    size_left),
21284|      0|                            rdsize);
21285|      0|                    }
21286|      0|                    return ((_Bool)0);
21287|      0|                }
21288|      0|                {
21289|      0|                    file->dumped_size += bytes_read;
21290|      0|                    size_left -= bytes_read;
21291|      0|                    tmp___3 = memcmp((void const *)(blk->buffer),
21292|      0|                                     (void const *)(diff_buffer___0), rdsize);
21293|      0|                }
21294|      0|                if (tmp___3) {
21295|      0|                    {
21296|      0|                        tmp___2 = gettext("Contents differ");
21297|      0|                        report_difference(file->stat_info, (char const *)tmp___2);
21298|      0|                    }
21299|      0|                    return ((_Bool)0);
21300|      0|                }
21301|      0|            }
21302|      0|while_break: /* CIL Label */
21303|      0|            ;
21304|      0|        }
21305|      0|        return ((_Bool)1);
21306|      0|    }
21307|      0|}
21308|       |_Bool sparse_diff_file(int fd, struct tar_stat_info *st)
21309|      0|{
21310|      0|    _Bool rc___1;
21311|      0|    struct tar_sparse_file file;
21312|      0|    size_t i;
21313|      0|    off_t offset;
21314|      0|    _Bool tmp;
21315|      0|    _Bool tmp___0;
21316|      0|    _Bool tmp___1;
21317|      0|    _Bool tmp___2;
21318|      0|    int tmp___3;
21319|       |
21320|      0|    {
21321|      0|        {
21322|      0|            rc___1 = (_Bool)1;
21323|      0|            offset = (off_t)0;
21324|      0|            file.stat_info = st;
21325|      0|            file.fd = fd;
21326|      0|            tmp = sparse_select_optab(&file);
21327|      0|        }
21328|      0|        if (tmp) {
21329|      0|            {
21330|      0|                tmp___0 = tar_sparse_init(&file);
21331|      0|            }
21332|      0|            if (!tmp___0) {
21333|      0|                return ((_Bool)1);
21334|      0|            }
21335|      0|        }
21336|      0|        else {
21337|      0|            return ((_Bool)1);
21338|      0|        }
21339|      0|        {
21340|      0|            rc___1 = tar_sparse_decode_header(&file);
21341|      0|            i = (size_t)0;
21342|      0|        }
21343|      0|        {
21344|      0|            while (1) {
21345|      0|while_continue: /* CIL Label */
21346|      0|                ;
21347|      0|                if (rc___1) {
21348|      0|                    if (!(i < (file.stat_info)->sparse_map_avail)) {
21349|      0|                        goto while_break;
21350|      0|                    }
21351|      0|                }
21352|      0|                else {
21353|      0|                    goto while_break;
21354|      0|                }
21355|      0|                {
21356|      0|                    tmp___1 = check_sparse_region(
21357|      0|                                  &file, offset, ((file.stat_info)->sparse_map + i)->offset);
21358|      0|                }
21359|      0|                if (tmp___1) {
21360|      0|                    {
21361|      0|                        tmp___2 = check_data_region(&file, i);
21362|      0|                    }
21363|      0|                    if (tmp___2) {
21364|      0|                        tmp___3 = 1;
21365|      0|                    }
21366|      0|                    else {
21367|      0|                        tmp___3 = 0;
21368|      0|                    }
21369|      0|                }
21370|      0|                else {
21371|      0|                    tmp___3 = 0;
21372|      0|                }
21373|      0|                rc___1 = (_Bool)tmp___3;
21374|      0|                offset = (off_t)((size_t)((file.stat_info)->sparse_map + i)->offset +
21375|      0|                                 ((file.stat_info)->sparse_map + i)->numbytes);
21376|      0|                i++;
21377|      0|            }
21378|      0|while_break: /* CIL Label */
21379|      0|            ;
21380|      0|        }
21381|      0|        if (!rc___1) {
21382|      0|            {
21383|      0|                skip_file((off_t)((size_t)(file.stat_info)->archive_file_size -
21384|      0|                                  file.dumped_size));
21385|      0|            }
21386|      0|        }
21387|      0|        {
21388|      0|            tar_sparse_done(&file);
21389|      0|        }
21390|      0|        return (rc___1);
21391|      0|    }
21392|      0|}
21393|       |static _Bool oldgnu_sparse_member_p(struct tar_sparse_file *file
21394|       |                                    __attribute__((__unused__)))
21395|      0|{
21396|       |
21397|      0|    {
21398|      0|        return ((_Bool)((int)current_header->header.typeflag == 83));
21399|      0|    }
21400|      0|}
21401|       |static enum oldgnu_add_status oldgnu_add_sparse(struct tar_sparse_file *file,
21402|       |        struct sparse *s)
21403|      0|{
21404|      0|    struct sp_array sp;
21405|       |
21406|      0|    {
21407|      0|        if ((int)s->numbytes[0] == 0) {
21408|      0|            return ((enum oldgnu_add_status)1);
21409|      0|        }
21410|      0|        {
21411|      0|            sp.offset = off_from_header((char const *)(s->offset), sizeof(s->offset));
21412|      0|            sp.numbytes =
21413|      0|                size_from_header((char const *)(s->numbytes), sizeof(s->numbytes));
21414|      0|        }
21415|      0|        if (sp.offset < 0L) {
21416|      0|            return ((enum oldgnu_add_status)2);
21417|      0|        }
21418|      0|        else {
21419|      0|            if ((size_t)(file->stat_info)->stat.st_size <
21420|      0|                    (size_t)sp.offset + sp.numbytes) {
21421|      0|                return ((enum oldgnu_add_status)2);
21422|      0|            }
21423|      0|            else {
21424|      0|                if ((file->stat_info)->archive_file_size < 0L) {
21425|      0|                    return ((enum oldgnu_add_status)2);
21426|      0|                }
21427|      0|            }
21428|      0|        }
21429|      0|        {
21430|      0|            sparse_add_map(file, &sp);
21431|      0|        }
21432|      0|        return ((enum oldgnu_add_status)0);
21433|      0|    }
21434|      0|}
21435|       |static _Bool oldgnu_fixup_header(struct tar_sparse_file *file)
21436|      0|{
21437|       |
21438|      0|    {
21439|      0|        {
21440|      0|            (file->stat_info)->archive_file_size = (file->stat_info)->stat.st_size;
21441|      0|            (file->stat_info)->stat.st_size = off_from_header(
21442|      0|                                                  (char const *)(current_header->oldgnu_header.realsize),
21443|      0|                                                  sizeof(current_header->oldgnu_header.realsize));
21444|      0|        }
21445|      0|        return ((_Bool)1);
21446|      0|    }
21447|      0|}
21448|       |static enum oldgnu_add_status rc;
21449|       |static _Bool oldgnu_get_sparse_info(struct tar_sparse_file *file)
21450|      0|{
21451|      0|    size_t i;
21452|      0|    union block *h;
21453|      0|    int ext_p;
21454|      0|    char *tmp;
21455|      0|    char *tmp___0;
21456|      0|    char *__cil_tmp7;
21457|      0|    char *__cil_tmp8;
21458|       |
21459|      0|    {
21460|      0|        h = current_header;
21461|      0|        (file->stat_info)->sparse_map_size = (size_t)0;
21462|      0|        i = (size_t)0;
21463|      0|        {
21464|      0|            while (1) {
21465|      0|while_continue: /* CIL Label */
21466|      0|                ;
21467|      0|                if (!(i < 4UL)) {
21468|      0|                    goto while_break;
21469|      0|                }
21470|      0|                {
21471|      0|                    rc = oldgnu_add_sparse(file, &h->oldgnu_header.sp[i]);
21472|      0|                }
21473|      0|                if ((unsigned int)rc != 0U) {
21474|      0|                    goto while_break;
21475|      0|                }
21476|      0|                i++;
21477|      0|            }
21478|      0|while_break: /* CIL Label */
21479|      0|            ;
21480|      0|        }
21481|      0|        ext_p = (int)h->oldgnu_header.isextended;
21482|      0|        {
21483|      0|            while (1) {
21484|      0|while_continue___0: /* CIL Label */
21485|      0|                ;
21486|      0|                if ((unsigned int)rc == 0U) {
21487|      0|                    if (!ext_p) {
21488|      0|                        goto while_break___0;
21489|      0|                    }
21490|      0|                }
21491|      0|                else {
21492|      0|                    goto while_break___0;
21493|      0|                }
21494|      0|                {
21495|      0|                    h = find_next_block();
21496|      0|                }
21497|      0|                if (!h) {
21498|      0|                    {
21499|      0|                        tmp = gettext("Unexpected EOF in archive");
21500|      0|                        error(0, 0, (char const *)tmp);
21501|      0|                        exit_status = 2;
21502|      0|                    }
21503|      0|                    return ((_Bool)0);
21504|      0|                }
21505|      0|                {
21506|      0|                    set_next_block_after(h);
21507|      0|                    i = (size_t)0;
21508|      0|                }
21509|      0|                {
21510|      0|                    while (1) {
21511|      0|while_continue___1: /* CIL Label */
21512|      0|                        ;
21513|      0|                        if (i < 21UL) {
21514|      0|                            if (!((unsigned int)rc == 0U)) {
21515|      0|                                goto while_break___1;
21516|      0|                            }
21517|      0|                        }
21518|      0|                        else {
21519|      0|                            goto while_break___1;
21520|      0|                        }
21521|      0|                        {
21522|      0|                            rc = oldgnu_add_sparse(file, &h->sparse_header.sp[i]);
21523|      0|                            i++;
21524|      0|                        }
21525|      0|                    }
21526|      0|while_break___1: /* CIL Label */
21527|      0|                    ;
21528|      0|                }
21529|      0|                ext_p = (int)h->sparse_header.isextended;
21530|      0|            }
21531|      0|while_break___0: /* CIL Label */
21532|      0|            ;
21533|      0|        }
21534|      0|        if ((unsigned int)rc == 2U) {
21535|      0|            {
21536|      0|                tmp___0 = gettext("%s: invalid sparse archive member");
21537|      0|                error(0, 0, (char const *)tmp___0, (file->stat_info)->orig_file_name);
21538|      0|                exit_status = 2;
21539|      0|            }
21540|      0|            return ((_Bool)0);
21541|      0|        }
21542|      0|        return ((_Bool)1);
21543|      0|    }
21544|      0|}
21545|       |static void oldgnu_store_sparse_info(struct tar_sparse_file *file,
21546|       |                                     size_t *pindex, struct sparse *sp,
21547|       |                                     size_t sparse_size)
21548|      0|{
21549|       |
21550|      0|    {
21551|      0|        {
21552|      0|            while (1) {
21553|      0|while_continue: /* CIL Label */
21554|      0|                ;
21555|      0|                if (*pindex < (file->stat_info)->sparse_map_avail) {
21556|      0|                    if (!(sparse_size > 0UL)) {
21557|      0|                        goto while_break;
21558|      0|                    }
21559|      0|                }
21560|      0|                else {
21561|      0|                    goto while_break;
21562|      0|                }
21563|      0|                {
21564|      0|                    off_to_chars(((file->stat_info)->sparse_map + *pindex)->offset,
21565|      0|                                 sp->offset, sizeof(sp->offset));
21566|      0|                    size_to_chars(((file->stat_info)->sparse_map + *pindex)->numbytes,
21567|      0|                                  sp->numbytes, sizeof(sp->numbytes));
21568|      0|                    sparse_size--;
21569|      0|                    sp++;
21570|      0|                    (*pindex)++;
21571|      0|                }
21572|      0|            }
21573|      0|while_break: /* CIL Label */
21574|      0|            ;
21575|      0|        }
21576|      0|        return;
21577|      0|    }
21578|      0|}
21579|       |static _Bool oldgnu_dump_header(struct tar_sparse_file *file)
21580|      0|{
21581|      0|    off_t block_ordinal;
21582|      0|    off_t tmp;
21583|      0|    union block *blk;
21584|      0|    size_t i;
21585|       |
21586|      0|    {
21587|      0|        {
21588|      0|            tmp = current_block_ordinal();
21589|      0|            block_ordinal = tmp;
21590|      0|            blk = start_header(file->stat_info);
21591|      0|            blk->header.typeflag = (char)'S';
21592|      0|        }
21593|      0|        if ((file->stat_info)->sparse_map_avail > 4UL) {
21594|      0|            blk->oldgnu_header.isextended = (char)1;
21595|      0|        }
21596|      0|        {
21597|      0|            off_to_chars((file->stat_info)->stat.st_size, blk->oldgnu_header.realsize,
21598|      0|                         sizeof(blk->oldgnu_header.realsize));
21599|      0|            off_to_chars((file->stat_info)->archive_file_size, blk->header.size,
21600|      0|                         sizeof(blk->header.size));
21601|      0|            i = (size_t)0;
21602|      0|            oldgnu_store_sparse_info(file, &i, blk->oldgnu_header.sp, (size_t)4);
21603|      0|            blk->oldgnu_header.isextended =
21604|      0|                (char)(i < (file->stat_info)->sparse_map_avail);
21605|      0|            finish_header(file->stat_info, blk, block_ordinal);
21606|      0|        }
21607|      0|        {
21608|      0|            while (1) {
21609|      0|while_continue: /* CIL Label */
21610|      0|                ;
21611|      0|                if (!(i < (file->stat_info)->sparse_map_avail)) {
21612|      0|                    goto while_break;
21613|      0|                }
21614|      0|                {
21615|      0|                    blk = find_next_block();
21616|      0|                    memset((void *)(blk->buffer), 0, (size_t)512);
21617|      0|                    oldgnu_store_sparse_info(file, &i, blk->sparse_header.sp, (size_t)21);
21618|      0|                    set_next_block_after(blk);
21619|      0|                }
21620|      0|                if (i < (file->stat_info)->sparse_map_avail) {
21621|      0|                    blk->sparse_header.isextended = (char)1;
21622|      0|                }
21623|      0|                else {
21624|      0|                    goto while_break;
21625|      0|                }
21626|      0|            }
21627|      0|while_break: /* CIL Label */
21628|      0|            ;
21629|      0|        }
21630|      0|        return ((_Bool)1);
21631|      0|    }
21632|      0|}
21633|       |static struct tar_sparse_optab oldgnu_optab = {
21634|       |    (_Bool(*)(struct tar_sparse_file *))((void *)0),
21635|       |    (_Bool(*)(struct tar_sparse_file *))((void *)0),
21636|       |    &oldgnu_sparse_member_p,
21637|       |    &oldgnu_dump_header,
21638|       |    &oldgnu_fixup_header,
21639|       |    &oldgnu_get_sparse_info,
21640|       |    (_Bool(*)(struct tar_sparse_file *, enum sparse_scan_state, void *))(
21641|       |        (void *)0),
21642|       |    &sparse_dump_region,
21643|       |    &sparse_extract_region
21644|       |};
21645|       |static _Bool star_sparse_member_p(struct tar_sparse_file *file
21646|       |                                  __attribute__((__unused__)))
21647|      0|{
21648|       |
21649|      0|    {
21650|      0|        return ((_Bool)((int)current_header->header.typeflag == 83));
21651|      0|    }
21652|      0|}
21653|       |static _Bool star_fixup_header(struct tar_sparse_file *file)
21654|      0|{
21655|       |
21656|      0|    {
21657|      0|        {
21658|      0|            (file->stat_info)->archive_file_size = (file->stat_info)->stat.st_size;
21659|      0|            (file->stat_info)->stat.st_size = off_from_header(
21660|      0|                                                  (char const *)(current_header->star_in_header.realsize),
21661|      0|                                                  sizeof(current_header->star_in_header.realsize));
21662|      0|        }
21663|      0|        return ((_Bool)1);
21664|      0|    }
21665|      0|}
21666|       |static enum oldgnu_add_status rc___0;
21667|       |static _Bool star_get_sparse_info(struct tar_sparse_file *file)
21668|      0|{
21669|      0|    size_t i;
21670|      0|    union block *h;
21671|      0|    int ext_p;
21672|      0|    char *tmp;
21673|      0|    char *tmp___0;
21674|      0|    char *__cil_tmp7;
21675|      0|    char *__cil_tmp8;
21676|       |
21677|      0|    {
21678|      0|        h = current_header;
21679|      0|        (file->stat_info)->sparse_map_size = (size_t)0;
21680|      0|        if ((int)h->star_in_header.prefix[0] == 0) {
21681|      0|            if ((int)h->star_in_header.sp[0].offset[10] != 0) {
21682|      0|                i = (size_t)0;
21683|      0|                {
21684|      0|                    while (1) {
21685|      0|while_continue: /* CIL Label */
21686|      0|                        ;
21687|      0|                        if (!(i < 4UL)) {
21688|      0|                            goto while_break;
21689|      0|                        }
21690|      0|                        {
21691|      0|                            rc___0 = oldgnu_add_sparse(file, &h->star_in_header.sp[i]);
21692|      0|                        }
21693|      0|                        if ((unsigned int)rc___0 != 0U) {
21694|      0|                            goto while_break;
21695|      0|                        }
21696|      0|                        i++;
21697|      0|                    }
21698|      0|while_break: /* CIL Label */
21699|      0|                    ;
21700|      0|                }
21701|      0|                ext_p = (int)h->star_in_header.isextended;
21702|      0|            }
21703|      0|            else {
21704|      0|                ext_p = 1;
21705|      0|            }
21706|      0|        }
21707|      0|        else {
21708|      0|            ext_p = 1;
21709|      0|        }
21710|      0|        {
21711|      0|            while (1) {
21712|      0|while_continue___0: /* CIL Label */
21713|      0|                ;
21714|      0|                if ((unsigned int)rc___0 == 0U) {
21715|      0|                    if (!ext_p) {
21716|      0|                        goto while_break___0;
21717|      0|                    }
21718|      0|                }
21719|      0|                else {
21720|      0|                    goto while_break___0;
21721|      0|                }
21722|      0|                {
21723|      0|                    h = find_next_block();
21724|      0|                }
21725|      0|                if (!h) {
21726|      0|                    {
21727|      0|                        tmp = gettext("Unexpected EOF in archive");
21728|      0|                        error(0, 0, (char const *)tmp);
21729|      0|                        exit_status = 2;
21730|      0|                    }
21731|      0|                    return ((_Bool)0);
21732|      0|                }
21733|      0|                {
21734|      0|                    set_next_block_after(h);
21735|      0|                    i = (size_t)0;
21736|      0|                }
21737|      0|                {
21738|      0|                    while (1) {
21739|      0|while_continue___1: /* CIL Label */
21740|      0|                        ;
21741|      0|                        if (i < 21UL) {
21742|      0|                            if (!((unsigned int)rc___0 == 0U)) {
21743|      0|                                goto while_break___1;
21744|      0|                            }
21745|      0|                        }
21746|      0|                        else {
21747|      0|                            goto while_break___1;
21748|      0|                        }
21749|      0|                        {
21750|      0|                            rc___0 = oldgnu_add_sparse(file, &h->star_ext_header.sp[i]);
21751|      0|                            i++;
21752|      0|                        }
21753|      0|                    }
21754|      0|while_break___1: /* CIL Label */
21755|      0|                    ;
21756|      0|                }
21757|      0|                ext_p = (int)h->star_ext_header.isextended;
21758|      0|            }
21759|      0|while_break___0: /* CIL Label */
21760|      0|            ;
21761|      0|        }
21762|      0|        if ((unsigned int)rc___0 == 2U) {
21763|      0|            {
21764|      0|                tmp___0 = gettext("%s: invalid sparse archive member");
21765|      0|                error(0, 0, (char const *)tmp___0, (file->stat_info)->orig_file_name);
21766|      0|                exit_status = 2;
21767|      0|            }
21768|      0|            return ((_Bool)0);
21769|      0|        }
21770|      0|        return ((_Bool)1);
21771|      0|    }
21772|      0|}
21773|       |static struct tar_sparse_optab star_optab = {
21774|       |    (_Bool(*)(struct tar_sparse_file *))((void *)0),
21775|       |    (_Bool(*)(struct tar_sparse_file *))((void *)0),
21776|       |    &star_sparse_member_p,
21777|       |    (_Bool(*)(struct tar_sparse_file *))((void *)0),
21778|       |    &star_fixup_header,
21779|       |    &star_get_sparse_info,
21780|       |    (_Bool(*)(struct tar_sparse_file *, enum sparse_scan_state, void *))(
21781|       |        (void *)0),
21782|       |    (_Bool(*)(struct tar_sparse_file *, size_t))((void *)0),
21783|       |    &sparse_extract_region
21784|       |};
21785|       |static _Bool pax_sparse_member_p(struct tar_sparse_file *file)
21786|      0|{
21787|       |
21788|      0|    {
21789|      0|        return ((_Bool)((file->stat_info)->archive_file_size !=
21790|      0|                        (file->stat_info)->stat.st_size));
21791|      0|    }
21792|      0|}
21793|       |static _Bool pax_dump_header(struct tar_sparse_file *file)
21794|      0|{
21795|      0|    off_t block_ordinal;
21796|      0|    off_t tmp;
21797|      0|    union block *blk;
21798|      0|    size_t i;
21799|      0|    char *__cil_tmp6;
21800|      0|    char *__cil_tmp7;
21801|      0|    char *__cil_tmp8;
21802|      0|    char *__cil_tmp9;
21803|       |
21804|      0|    {
21805|      0|        {
21806|      0|            tmp = current_block_ordinal();
21807|      0|            block_ordinal = tmp;
21808|      0|            xheader_store("GNU.sparse.size",
21809|      0|                          (struct tar_stat_info const *)file->stat_info, (void *)0);
21810|      0|            xheader_store("GNU.sparse.numblocks",
21811|      0|                          (struct tar_stat_info const *)file->stat_info, (void *)0);
21812|      0|            i = (size_t)0;
21813|      0|        }
21814|      0|        {
21815|      0|            while (1) {
21816|      0|while_continue: /* CIL Label */
21817|      0|                ;
21818|      0|                if (!(i < (file->stat_info)->sparse_map_avail)) {
21819|      0|                    goto while_break;
21820|      0|                }
21821|      0|                {
21822|      0|                    xheader_store("GNU.sparse.offset",
21823|      0|                                  (struct tar_stat_info const *)file->stat_info,
21824|      0|                                  (void *)(&i));
21825|      0|                    xheader_store("GNU.sparse.numbytes",
21826|      0|                                  (struct tar_stat_info const *)file->stat_info,
21827|      0|                                  (void *)(&i));
21828|      0|                    i++;
21829|      0|                }
21830|      0|            }
21831|      0|while_break: /* CIL Label */
21832|      0|            ;
21833|      0|        }
21834|      0|        {
21835|      0|            blk = start_header(file->stat_info);
21836|      0|            off_to_chars((file->stat_info)->archive_file_size, blk->header.size,
21837|      0|                         sizeof(blk->header.size));
21838|      0|            finish_header(file->stat_info, blk, block_ordinal);
21839|      0|        }
21840|      0|        return ((_Bool)1);
21841|      0|    }
21842|      0|}
21843|       |static struct tar_sparse_optab pax_optab = {
21844|       |    (_Bool(*)(struct tar_sparse_file *))((void *)0),
21845|       |    (_Bool(*)(struct tar_sparse_file *))((void *)0),
21846|       |    &pax_sparse_member_p,
21847|       |    &pax_dump_header,
21848|       |    (_Bool(*)(struct tar_sparse_file *))((void *)0),
21849|       |    (_Bool(*)(struct tar_sparse_file *))((void *)0),
21850|       |    (_Bool(*)(struct tar_sparse_file *, enum sparse_scan_state, void *))(
21851|       |        (void *)0),
21852|       |    &sparse_dump_region,
21853|       |    &sparse_extract_region
21854|       |};
21855|       |/* #pragma merger("0","00d.system.o.i","") */
21856|       |extern __attribute__((__nothrow__)) int(
21857|       |    __attribute__((__nonnull__(1, 2), __leaf__))
21858|       |    execlp)(char const *__file, char const *__arg, ...);
21859|       |extern __attribute__((__nothrow__)) int(__attribute__((__leaf__))
21860|       |                                        setuid)(__uid_t __uid);
21861|       |extern __attribute__((__nothrow__)) int(__attribute__((__leaf__))
21862|       |                                        setgid)(__gid_t __gid);
21863|       |extern __attribute__((__nothrow__)) int(__attribute__((__leaf__))
21864|       |                                        ftruncate)(int __fd, __off_t __length);
21865|       |extern __attribute__((__nothrow__)) int(__attribute__((__leaf__))
21866|       |                                        kill)(__pid_t __pid, int __sig);
21867|       |extern __pid_t waitpid(__pid_t __pid, int *__stat_loc, int __options);
21868|       |extern __attribute__((__nothrow__, __noreturn__)) void(__attribute__((__leaf__))
21869|       |        exit)(int __status);
21870|       |dev_t ar_dev;
21871|       |ino_t ar_ino;
21872|       |void sys_stat_nanoseconds(struct tar_stat_info *st)
21873|      0|{
21874|       |
21875|      0|    {
21876|      0|        st->atime_nsec = (unsigned long)st->stat.st_atim.tv_nsec;
21877|      0|        st->mtime_nsec = (unsigned long)st->stat.st_mtim.tv_nsec;
21878|      0|        st->ctime_nsec = (unsigned long)st->stat.st_ctim.tv_nsec;
21879|      0|        return;
21880|      0|    }
21881|      0|}
21882|       |static struct stat archive_stat;
21883|       |_Bool sys_get_archive_stat(void)
21884|      0|{
21885|      0|    int tmp;
21886|       |
21887|      0|    {
21888|      0|        {
21889|      0|            tmp = fstat(archive, &archive_stat);
21890|      0|        }
21891|      0|        return ((_Bool)(tmp == 0));
21892|      0|    }
21893|      0|}
21894|       |_Bool sys_file_is_archive(struct tar_stat_info *p)
21895|      0|{
21896|      0|    int tmp;
21897|       |
21898|      0|    {
21899|      0|        if (ar_dev) {
21900|      0|            if (p->stat.st_dev == ar_dev) {
21901|      0|                if (p->stat.st_ino == ar_ino) {
21902|      0|                    tmp = 1;
21903|      0|                }
21904|      0|                else {
21905|      0|                    tmp = 0;
21906|      0|                }
21907|      0|            }
21908|      0|            else {
21909|      0|                tmp = 0;
21910|      0|            }
21911|      0|        }
21912|      0|        else {
21913|      0|            tmp = 0;
21914|      0|        }
21915|      0|        return ((_Bool)tmp);
21916|      0|    }
21917|      0|}
21918|       |void sys_save_archive_dev_ino(void)
21919|      0|{
21920|       |
21921|      0|    {
21922|      0|        if (!(archive >= 1 << 30)) {
21923|      0|            if ((archive_stat.st_mode & 61440U) == 32768U) {
21924|      0|                ar_dev = archive_stat.st_dev;
21925|      0|                ar_ino = archive_stat.st_ino;
21926|      0|            }
21927|      0|            else {
21928|      0|                ar_dev = (dev_t)0;
21929|      0|            }
21930|      0|        }
21931|      0|        else {
21932|      0|            ar_dev = (dev_t)0;
21933|      0|        }
21934|      0|        return;
21935|      0|    }
21936|      0|}
21937|       |static char const dev_null[10] = {
21938|       |    (char const)'/', (char const)'d',   (char const)'e', (char const)'v',
21939|       |    (char const)'/', (char const)'n',   (char const)'u', (char const)'l',
21940|       |    (char const)'l', (char const)'\000'
21941|       |};
21942|       |void sys_detect_dev_null_output(void)
21943|      0|{
21944|      0|    struct stat dev_null_stat;
21945|      0|    int tmp;
21946|      0|    int tmp___0;
21947|      0|    int tmp___1;
21948|      0|    void *__cil_tmp5;
21949|       |
21950|      0|    {
21951|      0|        {
21952|      0|            tmp = strcmp(*(archive_name_array + 0), dev_null);
21953|      0|        }
21954|      0|        if (tmp == 0) {
21955|      0|            tmp___1 = 1;
21956|      0|        }
21957|      0|        else {
21958|      0|            if (!(archive >= 1 << 30)) {
21959|      0|                if ((archive_stat.st_mode & 61440U) == 8192U) {
21960|      0|                    {
21961|      0|                        tmp___0 = stat((char const * /* __restrict  */)(dev_null),
21962|      0|                                       (struct stat * /* __restrict  */)(&dev_null_stat));
21963|      0|                    }
21964|      0|                    if (tmp___0 == 0) {
21965|      0|                        if (archive_stat.st_dev == dev_null_stat.st_dev) {
21966|      0|                            if (archive_stat.st_ino == dev_null_stat.st_ino) {
21967|      0|                                tmp___1 = 1;
21968|      0|                            }
21969|      0|                            else {
21970|      0|                                tmp___1 = 0;
21971|      0|                            }
21972|      0|                        }
21973|      0|                        else {
21974|      0|                            tmp___1 = 0;
21975|      0|                        }
21976|      0|                    }
21977|      0|                    else {
21978|      0|                        tmp___1 = 0;
21979|      0|                    }
21980|      0|                }
21981|      0|                else {
21982|      0|                    tmp___1 = 0;
21983|      0|                }
21984|      0|            }
21985|      0|            else {
21986|      0|                tmp___1 = 0;
21987|      0|            }
21988|      0|        }
21989|      0|        dev_null_output = (_Bool)tmp___1;
21990|      0|        return;
21991|      0|    }
21992|      0|}
21993|       |void sys_drain_input_pipe(void)
21994|      0|{
21995|      0|    size_t r;
21996|      0|    size_t tmp;
21997|      0|    size_t tmp___0;
21998|       |
21999|      0|    {
22000|      0|        if ((unsigned int)access_mode == 0U) {
22001|      0|            if (!(archive >= 1 << 30)) {
22002|      0|                if ((archive_stat.st_mode & 61440U) == 4096U) {
22003|      0|                    goto _L___3;
22004|      0|                }
22005|      0|                else {
22006|      0|                    if ((archive_stat.st_mode & 61440U) == 49152U) {
22007|      0|_L___3 : { /* CIL Label */
22008|      0|                            while (1) {
22009|      0|while_continue: /* CIL Label */
22010|      0|                                ;
22011|      0|                                if (archive >= 1 << 30) {
22012|      0|                                    {
22013|      0|                                        tmp = rmt_read__(archive - (1 << 30), record_start->buffer,
22014|      0|                                                         record_size);
22015|      0|                                        r = tmp;
22016|      0|                                    }
22017|      0|                                }
22018|      0|                                else {
22019|      0|                                    {
22020|      0|                                        tmp___0 = safe_read(archive, (void *)(record_start->buffer),
22021|      0|                                                            record_size);
22022|      0|                                        r = tmp___0;
22023|      0|                                    }
22024|      0|                                }
22025|      0|                                if (r != 0UL) {
22026|      0|                                    if (!(r != 0xffffffffffffffffUL)) {
22027|      0|                                        goto while_break;
22028|      0|                                    }
22029|      0|                                }
22030|      0|                                else {
22031|      0|                                    goto while_break;
22032|      0|                                }
22033|      0|                                goto while_continue;
22034|      0|                            }
22035|      0|while_break: /* CIL Label */
22036|      0|                            ;
22037|      0|                        }
22038|      0|                    }
22039|      0|                }
22040|      0|            }
22041|      0|        }
22042|      0|        return;
22043|      0|    }
22044|      0|}
22045|       |void sys_wait_for_child(pid_t child_pid___0)
22046|      0|{
22047|      0|    int wait_status;
22048|      0|    int *tmp;
22049|      0|    __pid_t tmp___0;
22050|      0|    union __anonunion_56 __constr_expr_0;
22051|      0|    char *tmp___1;
22052|      0|    union __anonunion_57 __constr_expr_1;
22053|      0|    char *tmp___2;
22054|      0|    union __anonunion_58 __constr_expr_2;
22055|      0|    union __anonunion_59 __constr_expr_3;
22056|      0|    char *__cil_tmp11;
22057|      0|    char *__cil_tmp12;
22058|       |
22059|      0|    {
22060|      0|        if (child_pid___0) {
22061|      0|            {
22062|      0|                while (1) {
22063|      0|while_continue: /* CIL Label */
22064|      0|                    ;
22065|      0|                    {
22066|      0|                        tmp___0 = waitpid(child_pid___0, &wait_status, 0);
22067|      0|                    }
22068|      0|                    if (!(tmp___0 == -1)) {
22069|      0|                        goto while_break;
22070|      0|                    }
22071|      0|                    {
22072|      0|                        tmp = __errno_location();
22073|      0|                    }
22074|      0|                    if (*tmp != 4) {
22075|      0|                        {
22076|      0|                            waitpid_error(use_compress_program_option);
22077|      0|                        }
22078|      0|                        goto while_break;
22079|      0|                    }
22080|      0|                }
22081|      0|while_break: /* CIL Label */
22082|      0|                ;
22083|      0|            }
22084|      0|            __constr_expr_3.__in = wait_status;
22085|      0|            if ((int)((signed char)((__constr_expr_3.__i & 127) + 1)) >> 1 > 0) {
22086|      0|                {
22087|      0|                    __constr_expr_0.__in = wait_status;
22088|      0|                    tmp___1 = gettext("Child died with signal %d");
22089|      0|                    error(0, 0, (char const *)tmp___1, __constr_expr_0.__i & 127);
22090|      0|                    exit_status = 2;
22091|      0|                }
22092|      0|            }
22093|      0|            else {
22094|      0|                __constr_expr_2.__in = wait_status;
22095|      0|                if ((__constr_expr_2.__i & 65280) >> 8 != 0) {
22096|      0|                    {
22097|      0|                        __constr_expr_1.__in = wait_status;
22098|      0|                        tmp___2 = gettext("Child returned status %d");
22099|      0|                        error(0, 0, (char const *)tmp___2,
22100|      0|                              (__constr_expr_1.__i & 65280) >> 8);
22101|      0|                        exit_status = 2;
22102|      0|                    }
22103|      0|                }
22104|      0|            }
22105|      0|        }
22106|      0|        return;
22107|      0|    }
22108|      0|}
22109|       |void sys_spawn_shell(void)
22110|      0|{
22111|      0|    pid_t child;
22112|      0|    char const *shell;
22113|      0|    char *tmp;
22114|      0|    int wait_status;
22115|      0|    int *tmp___0;
22116|      0|    __pid_t tmp___1;
22117|      0|    char *__cil_tmp7;
22118|      0|    char *__cil_tmp8;
22119|       |
22120|      0|    {
22121|      0|        {
22122|      0|            tmp = getenv("SHELL");
22123|      0|            shell = (char const *)tmp;
22124|      0|        }
22125|      0|        if (!shell) {
22126|      0|            shell = "/bin/sh";
22127|      0|        }
22128|      0|        {
22129|      0|            child = xfork();
22130|      0|        }
22131|      0|        if (child == 0) {
22132|      0|            {
22133|      0|                execlp(shell, "-sh", "-i", (char *)0);
22134|      0|                exec_fatal(shell);
22135|      0|            }
22136|      0|        }
22137|      0|        else {
22138|      0|            {
22139|      0|                while (1) {
22140|      0|while_continue: /* CIL Label */
22141|      0|                    ;
22142|      0|                    {
22143|      0|                        tmp___1 = waitpid(child, &wait_status, 0);
22144|      0|                    }
22145|      0|                    if (!(tmp___1 == -1)) {
22146|      0|                        goto while_break;
22147|      0|                    }
22148|      0|                    {
22149|      0|                        tmp___0 = __errno_location();
22150|      0|                    }
22151|      0|                    if (*tmp___0 != 4) {
22152|      0|                        {
22153|      0|                            waitpid_error(shell);
22154|      0|                        }
22155|      0|                        goto while_break;
22156|      0|                    }
22157|      0|                }
22158|      0|while_break: /* CIL Label */
22159|      0|                ;
22160|      0|            }
22161|      0|        }
22162|      0|        return;
22163|      0|    }
22164|      0|}
22165|       |_Bool sys_compare_uid(struct stat *a, struct stat *b)
22166|      0|{
22167|       |
22168|      0|    {
22169|      0|        return ((_Bool)(a->st_uid == b->st_uid));
22170|      0|    }
22171|      0|}
22172|       |_Bool sys_compare_gid(struct stat *a, struct stat *b)
22173|      0|{
22174|       |
22175|      0|    {
22176|      0|        return ((_Bool)(a->st_gid == b->st_gid));
22177|      0|    }
22178|      0|}
22179|       |_Bool sys_compare_links(struct stat *link_data, struct stat *stat_data)
22180|      0|{
22181|      0|    int tmp;
22182|       |
22183|      0|    {
22184|      0|        if (stat_data->st_dev == link_data->st_dev) {
22185|      0|            if (stat_data->st_ino == link_data->st_ino) {
22186|      0|                tmp = 1;
22187|      0|            }
22188|      0|            else {
22189|      0|                tmp = 0;
22190|      0|            }
22191|      0|        }
22192|      0|        else {
22193|      0|            tmp = 0;
22194|      0|        }
22195|      0|        return ((_Bool)tmp);
22196|      0|    }
22197|      0|}
22198|       |int sys_truncate(int fd)
22199|      0|{
22200|      0|    off_t pos;
22201|      0|    __off_t tmp;
22202|      0|    int tmp___0;
22203|      0|    int tmp___1;
22204|       |
22205|      0|    {
22206|      0|        {
22207|      0|            tmp = lseek(fd, (off_t)0, 1);
22208|      0|            pos = tmp;
22209|      0|        }
22210|      0|        if (pos < 0L) {
22211|      0|            tmp___1 = -1;
22212|      0|        }
22213|      0|        else {
22214|      0|            {
22215|      0|                tmp___0 = ftruncate(fd, pos);
22216|      0|                tmp___1 = tmp___0;
22217|      0|            }
22218|      0|        }
22219|      0|        return (tmp___1);
22220|      0|    }
22221|      0|}
22222|       |void sys_reset_uid_gid(void)
22223|      0|{
22224|      0|    __uid_t tmp;
22225|      0|    __gid_t tmp___0;
22226|       |
22227|      0|    {
22228|      0|        {
22229|      0|            tmp = getuid();
22230|      0|            setuid(tmp);
22231|      0|            tmp___0 = getgid();
22232|      0|            setgid(tmp___0);
22233|      0|        }
22234|      0|        return;
22235|      0|    }
22236|      0|}
22237|       |static int is_regular_file(char const *name)
22238|      0|{
22239|      0|    struct stat stbuf;
22240|      0|    int *tmp;
22241|      0|    int tmp___0;
22242|      0|    void *__cil_tmp5;
22243|       |
22244|      0|    {
22245|      0|        {
22246|      0|            tmp___0 = stat((char const * /* __restrict  */)name,
22247|      0|                           (struct stat * /* __restrict  */)(&stbuf));
22248|      0|        }
22249|      0|        if (tmp___0 == 0) {
22250|      0|            return ((stbuf.st_mode & 61440U) == 32768U);
22251|      0|        }
22252|      0|        else {
22253|      0|            {
22254|      0|                tmp = __errno_location();
22255|      0|            }
22256|      0|            return (*tmp == 2);
22257|      0|        }
22258|      0|    }
22259|      0|}
22260|       |size_t sys_write_archive_buffer(void)
22261|      0|{
22262|      0|    size_t tmp;
22263|      0|    size_t tmp___0;
22264|      0|    size_t tmp___1;
22265|       |
22266|      0|    {
22267|      0|        if (archive >= 1 << 30) {
22268|      0|            {
22269|      0|                tmp =
22270|      0|                    rmt_write__(archive - (1 << 30), record_start->buffer, record_size);
22271|      0|                tmp___1 = tmp;
22272|      0|            }
22273|      0|        }
22274|      0|        else {
22275|      0|            {
22276|      0|                tmp___0 = full_write(archive, (void const *)(record_start->buffer),
22277|      0|                                     record_size);
22278|      0|                tmp___1 = tmp___0;
22279|      0|            }
22280|      0|        }
22281|      0|        return (tmp___1);
22282|      0|    }
22283|      0|}
22284|       |static void xdup2(int from, int into)
22285|      0|{
22286|      0|    int status;
22287|      0|    int tmp;
22288|      0|    int e;
22289|      0|    int *tmp___0;
22290|      0|    char *tmp___1;
22291|      0|    int *tmp___2;
22292|      0|    int e___0;
22293|      0|    int *tmp___3;
22294|      0|    char *tmp___4;
22295|      0|    char *__cil_tmp12;
22296|      0|    char *__cil_tmp13;
22297|       |
22298|      0|    {
22299|      0|        if (from != into) {
22300|      0|            {
22301|      0|                tmp = close(into);
22302|      0|                status = tmp;
22303|      0|            }
22304|      0|            if (status != 0) {
22305|      0|                {
22306|      0|                    tmp___2 = __errno_location();
22307|      0|                }
22308|      0|                if (*tmp___2 != 9) {
22309|      0|                    {
22310|      0|                        tmp___0 = __errno_location();
22311|      0|                        e = *tmp___0;
22312|      0|                        tmp___1 = gettext("Cannot close");
22313|      0|                        error(0, e, (char const *)tmp___1);
22314|      0|                        fatal_exit();
22315|      0|                    }
22316|      0|                }
22317|      0|            }
22318|      0|            {
22319|      0|                status = dup(from);
22320|      0|            }
22321|      0|            if (status != into) {
22322|      0|                if (status < 0) {
22323|      0|                    {
22324|      0|                        tmp___3 = __errno_location();
22325|      0|                        e___0 = *tmp___3;
22326|      0|                        tmp___4 = gettext("Cannot dup");
22327|      0|                        error(0, e___0, (char const *)tmp___4);
22328|      0|                        fatal_exit();
22329|      0|                    }
22330|      0|                }
22331|      0|                {
22332|      0|                    abort();
22333|      0|                }
22334|      0|            }
22335|      0|            {
22336|      0|                xclose(from);
22337|      0|            }
22338|      0|        }
22339|      0|        return;
22340|      0|    }
22341|      0|}
22342|       |pid_t sys_child_open_for_compress(void)
22343|      0|{
22344|      0|    int parent_pipe[2];
22345|      0|    int child_pipe[2];
22346|      0|    pid_t grandchild_pid;
22347|      0|    pid_t child_pid___0;
22348|      0|    int wait_status;
22349|      0|    char *tmp;
22350|      0|    int saved_errno;
22351|      0|    int *tmp___0;
22352|      0|    int *tmp___1;
22353|      0|    int tmp___2;
22354|      0|    void *tmp___3;
22355|      0|    int tmp___4;
22356|      0|    char *tmp___5;
22357|      0|    int tmp___7;
22358|      0|    int tmp___8;
22359|      0|    void *tmp___9;
22360|      0|    int tmp___10;
22361|      0|    size_t status;
22362|      0|    char *cursor;
22363|      0|    size_t length;
22364|      0|    size_t size;
22365|      0|    int *tmp___11;
22366|      0|    __pid_t tmp___12;
22367|      0|    union __anonunion_60 __constr_expr_4;
22368|      0|    union __anonunion_61 __constr_expr_5;
22369|      0|    union __anonunion_62 __constr_expr_6;
22370|      0|    union __anonunion_63 __constr_expr_7;
22371|      0|    void *__cil_tmp28;
22372|      0|    void *__cil_tmp29;
22373|      0|    char *__cil_tmp30;
22374|      0|    char *__cil_tmp31;
22375|       |
22376|      0|    {
22377|      0|        {
22378|      0|            xpipe(parent_pipe);
22379|      0|            child_pid___0 = xfork();
22380|      0|        }
22381|      0|        if (child_pid___0 > 0) {
22382|      0|            {
22383|      0|                archive = parent_pipe[1];
22384|      0|                xclose(parent_pipe[0]);
22385|      0|            }
22386|      0|            return (child_pid___0);
22387|      0|        }
22388|      0|        {
22389|      0|            tmp = gettext("tar (child)");
22390|      0|            program_name = (char const *)tmp;
22391|      0|            xdup2(parent_pipe[0], 0);
22392|      0|            xclose(parent_pipe[1]);
22393|      0|            tmp___2 = strcmp(*(archive_name_array + 0), "-");
22394|      0|        }
22395|      0|        if (tmp___2 != 0) {
22396|      0|            if (!force_local_option) {
22397|      0|                {
22398|      0|                    rmt_path__ = strchr(*(archive_name_array + 0), ':');
22399|      0|                }
22400|      0|                if (rmt_path__) {
22401|      0|                    if ((unsigned long)rmt_path__ >
22402|      0|                            (unsigned long)*(archive_name_array + 0)) {
22403|      0|                        {
22404|      0|                            tmp___3 = memchr(
22405|      0|                                          (void const *)*(archive_name_array + 0), '/',
22406|      0|                                          (size_t)(rmt_path__ - (char *)*(archive_name_array + 0)));
22407|      0|                        }
22408|      0|                        if (tmp___3) {
22409|      0|                            goto _L___1;
22410|      0|                        }
22411|      0|                    }
22412|      0|                    else {
22413|      0|                        goto _L___1;
22414|      0|                    }
22415|      0|                }
22416|      0|                else {
22417|      0|                    goto _L___1;
22418|      0|                }
22419|      0|            }
22420|      0|            else {
22421|      0|_L___1 : {
22422|      0|                    tmp___4 = is_regular_file(*(archive_name_array + 0));
22423|      0|                }
22424|      0|                if (tmp___4) {
22425|      0|                    if (backup_option) {
22426|      0|                        {
22427|      0|                            maybe_backup_file(*(archive_name_array + 0), 1);
22428|      0|                        }
22429|      0|                    }
22430|      0|                    {
22431|      0|                        archive = creat(*(archive_name_array + 0),
22432|      0|                                        (mode_t)(((128 | (128 >> 3)) | ((128 >> 3) >> 3)) |
22433|      0|                                                 ((256 | (256 >> 3)) | ((256 >> 3) >> 3))));
22434|      0|                    }
22435|      0|                    if (archive < 0) {
22436|      0|                        {
22437|      0|                            tmp___0 = __errno_location();
22438|      0|                            saved_errno = *tmp___0;
22439|      0|                        }
22440|      0|                        if (backup_option) {
22441|      0|                            {
22442|      0|                                undo_last_backup();
22443|      0|                            }
22444|      0|                        }
22445|      0|                        {
22446|      0|                            tmp___1 = __errno_location();
22447|      0|                            *tmp___1 = saved_errno;
22448|      0|                            open_fatal(*(archive_name_array + 0));
22449|      0|                        }
22450|      0|                    }
22451|      0|                    {
22452|      0|                        xdup2(archive, 1);
22453|      0|                        execlp(use_compress_program_option, use_compress_program_option,
22454|      0|                               (char *)0);
22455|      0|                        exec_fatal(use_compress_program_option);
22456|      0|                    }
22457|      0|                }
22458|      0|            }
22459|      0|        }
22460|      0|        {
22461|      0|            xpipe(child_pipe);
22462|      0|            grandchild_pid = xfork();
22463|      0|        }
22464|      0|        if (grandchild_pid == 0) {
22465|      0|            {
22466|      0|                tmp___5 = gettext("tar (grandchild)");
22467|      0|                program_name = (char const *)tmp___5;
22468|      0|                xdup2(child_pipe[1], 1);
22469|      0|                xclose(child_pipe[0]);
22470|      0|                execlp(use_compress_program_option, use_compress_program_option,
22471|      0|                       (char *)0);
22472|      0|                exec_fatal(use_compress_program_option);
22473|      0|            }
22474|      0|        }
22475|      0|        {
22476|      0|            xdup2(child_pipe[0], 0);
22477|      0|            xclose(child_pipe[1]);
22478|      0|            tmp___10 = strcmp(*(archive_name_array + 0), "-");
22479|      0|        }
22480|      0|        if (tmp___10 == 0) {
22481|      0|            archive = 1;
22482|      0|        }
22483|      0|        else {
22484|      0|            if (!force_local_option) {
22485|      0|                {
22486|      0|                    rmt_path__ = strchr(*(archive_name_array + 0), ':');
22487|      0|                }
22488|      0|                if (rmt_path__) {
22489|      0|                    if ((unsigned long)rmt_path__ >
22490|      0|                            (unsigned long)*(archive_name_array + 0)) {
22491|      0|                        {
22492|      0|                            tmp___9 = memchr(
22493|      0|                                          (void const *)*(archive_name_array + 0), '/',
22494|      0|                                          (size_t)(rmt_path__ - (char *)*(archive_name_array + 0)));
22495|      0|                        }
22496|      0|                        if (tmp___9) {
22497|      0|                            {
22498|      0|                                tmp___8 =
22499|      0|                                    creat(*(archive_name_array + 0),
22500|      0|                                          (mode_t)(((128 | (128 >> 3)) | ((128 >> 3) >> 3)) |
22501|      0|                                                   ((256 | (256 >> 3)) | ((256 >> 3) >> 3))));
22502|      0|                                archive = tmp___8;
22503|      0|                            }
22504|      0|                        }
22505|      0|                        else {
22506|      0|                            {
22507|      0|                                tmp___7 = rmt_open__(*(archive_name_array + 0), 65, 1 << 30,
22508|      0|                                                     rsh_command_option);
22509|      0|                                archive = tmp___7;
22510|      0|                            }
22511|      0|                        }
22512|      0|                    }
22513|      0|                    else {
22514|      0|                        {
22515|      0|                            tmp___8 =
22516|      0|                                creat(*(archive_name_array + 0),
22517|      0|                                      (mode_t)(((128 | (128 >> 3)) | ((128 >> 3) >> 3)) |
22518|      0|                                               ((256 | (256 >> 3)) | ((256 >> 3) >> 3))));
22519|      0|                            archive = tmp___8;
22520|      0|                        }
22521|      0|                    }
22522|      0|                }
22523|      0|                else {
22524|      0|                    {
22525|      0|                        tmp___8 = creat(*(archive_name_array + 0),
22526|      0|                                        (mode_t)(((128 | (128 >> 3)) | ((128 >> 3) >> 3)) |
22527|      0|                                                 ((256 | (256 >> 3)) | ((256 >> 3) >> 3))));
22528|      0|                        archive = tmp___8;
22529|      0|                    }
22530|      0|                }
22531|      0|            }
22532|      0|            else {
22533|      0|                {
22534|      0|                    tmp___8 = creat(*(archive_name_array + 0),
22535|      0|                                    (mode_t)(((128 | (128 >> 3)) | ((128 >> 3) >> 3)) |
22536|      0|                                             ((256 | (256 >> 3)) | ((256 >> 3) >> 3))));
22537|      0|                    archive = tmp___8;
22538|      0|                }
22539|      0|            }
22540|      0|            if (archive < 0) {
22541|      0|                {
22542|      0|                    open_fatal(*(archive_name_array + 0));
22543|      0|                }
22544|      0|            }
22545|      0|        }
22546|      0|        {
22547|      0|            while (1) {
22548|      0|while_continue: /* CIL Label */
22549|      0|                ;
22550|      0|                status = (size_t)0;
22551|      0|                length = (size_t)0;
22552|      0|                cursor = record_start->buffer;
22553|      0|                {
22554|      0|                    while (1) {
22555|      0|while_continue___0: /* CIL Label */
22556|      0|                        ;
22557|      0|                        if (!(length < record_size)) {
22558|      0|                            goto while_break___0;
22559|      0|                        }
22560|      0|                        {
22561|      0|                            size = record_size - length;
22562|      0|                            status = safe_read(0, (void *)cursor, size);
22563|      0|                        }
22564|      0|                        if (status == 0xffffffffffffffffUL) {
22565|      0|                            {
22566|      0|                                read_fatal(use_compress_program_option);
22567|      0|                            }
22568|      0|                        }
22569|      0|                        if (status == 0UL) {
22570|      0|                            goto while_break___0;
22571|      0|                        }
22572|      0|                        length += status;
22573|      0|                        cursor += status;
22574|      0|                    }
22575|      0|while_break___0: /* CIL Label */
22576|      0|                    ;
22577|      0|                }
22578|      0|                if (status == 0UL) {
22579|      0|                    if (length > 0UL) {
22580|      0|                        {
22581|      0|                            memset((void *)(record_start->buffer + length), 0,
22582|      0|                                   record_size - length);
22583|      0|                            status = sys_write_archive_buffer();
22584|      0|                        }
22585|      0|                        if (status != record_size) {
22586|      0|                            {
22587|      0|                                archive_write_error((ssize_t)status);
22588|      0|                            }
22589|      0|                        }
22590|      0|                    }
22591|      0|                    goto while_break;
22592|      0|                }
22593|      0|                {
22594|      0|                    status = sys_write_archive_buffer();
22595|      0|                }
22596|      0|                if (status != record_size) {
22597|      0|                    {
22598|      0|                        archive_write_error((ssize_t)status);
22599|      0|                    }
22600|      0|                }
22601|      0|            }
22602|      0|while_break: /* CIL Label */
22603|      0|            ;
22604|      0|        }
22605|      0|        {
22606|      0|            while (1) {
22607|      0|while_continue___1: /* CIL Label */
22608|      0|                ;
22609|      0|                {
22610|      0|                    tmp___12 = waitpid(grandchild_pid, &wait_status, 0);
22611|      0|                }
22612|      0|                if (!(tmp___12 == -1)) {
22613|      0|                    goto while_break___1;
22614|      0|                }
22615|      0|                {
22616|      0|                    tmp___11 = __errno_location();
22617|      0|                }
22618|      0|                if (*tmp___11 != 4) {
22619|      0|                    {
22620|      0|                        waitpid_error(use_compress_program_option);
22621|      0|                    }
22622|      0|                    goto while_break___1;
22623|      0|                }
22624|      0|            }
22625|      0|while_break___1: /* CIL Label */
22626|      0|            ;
22627|      0|        }
22628|      0|        __constr_expr_7.__in = wait_status;
22629|      0|        if ((int)((signed char)((__constr_expr_7.__i & 127) + 1)) >> 1 > 0) {
22630|      0|            {
22631|      0|                __constr_expr_4.__in = wait_status;
22632|      0|                kill(child_pid___0, __constr_expr_4.__i & 127);
22633|      0|                exit_status = 2;
22634|      0|            }
22635|      0|        }
22636|      0|        else {
22637|      0|            __constr_expr_6.__in = wait_status;
22638|      0|            if ((__constr_expr_6.__i & 65280) >> 8 != 0) {
22639|      0|                __constr_expr_5.__in = wait_status;
22640|      0|                exit_status = (__constr_expr_5.__i & 65280) >> 8;
22641|      0|            }
22642|      0|        }
22643|      0|        {
22644|      0|            exit(exit_status);
22645|      0|        }
22646|      0|    }
22647|      0|}
22648|       |pid_t sys_child_open_for_uncompress(void)
22649|      0|{
22650|      0|    int parent_pipe[2];
22651|      0|    int child_pipe[2];
22652|      0|    pid_t grandchild_pid;
22653|      0|    pid_t child_pid___0;
22654|      0|    int wait_status;
22655|      0|    char *tmp;
22656|      0|    int tmp___0;
22657|      0|    void *tmp___1;
22658|      0|    int tmp___2;
22659|      0|    char *tmp___3;
22660|      0|    int tmp___5;
22661|      0|    int tmp___6;
22662|      0|    void *tmp___7;
22663|      0|    int tmp___8;
22664|      0|    char *cursor;
22665|      0|    size_t maximum;
22666|      0|    size_t count;
22667|      0|    size_t status;
22668|      0|    size_t tmp___9;
22669|      0|    size_t tmp___10;
22670|      0|    size_t tmp___11;
22671|      0|    int *tmp___12;
22672|      0|    __pid_t tmp___13;
22673|      0|    union __anonunion_64 __constr_expr_8;
22674|      0|    union __anonunion_65 __constr_expr_9;
22675|      0|    union __anonunion_66 __constr_expr_10;
22676|      0|    union __anonunion_67 __constr_expr_11;
22677|      0|    void *__cil_tmp28;
22678|      0|    void *__cil_tmp29;
22679|      0|    char *__cil_tmp30;
22680|      0|    char *__cil_tmp31;
22681|       |
22682|      0|    {
22683|      0|        {
22684|      0|            xpipe(parent_pipe);
22685|      0|            child_pid___0 = xfork();
22686|      0|        }
22687|      0|        if (child_pid___0 > 0) {
22688|      0|            {
22689|      0|                read_full_records_option = (_Bool)1;
22690|      0|                archive = parent_pipe[0];
22691|      0|                xclose(parent_pipe[1]);
22692|      0|            }
22693|      0|            return (child_pid___0);
22694|      0|        }
22695|      0|        {
22696|      0|            tmp = gettext("tar (child)");
22697|      0|            program_name = (char const *)tmp;
22698|      0|            xdup2(parent_pipe[1], 1);
22699|      0|            xclose(parent_pipe[0]);
22700|      0|            tmp___0 = strcmp(*(archive_name_array + 0), "-");
22701|      0|        }
22702|      0|        if (tmp___0 != 0) {
22703|      0|            if (!force_local_option) {
22704|      0|                {
22705|      0|                    rmt_path__ = strchr(*(archive_name_array + 0), ':');
22706|      0|                }
22707|      0|                if (rmt_path__) {
22708|      0|                    if ((unsigned long)rmt_path__ >
22709|      0|                            (unsigned long)*(archive_name_array + 0)) {
22710|      0|                        {
22711|      0|                            tmp___1 = memchr(
22712|      0|                                          (void const *)*(archive_name_array + 0), '/',
22713|      0|                                          (size_t)(rmt_path__ - (char *)*(archive_name_array + 0)));
22714|      0|                        }
22715|      0|                        if (tmp___1) {
22716|      0|                            goto _L___1;
22717|      0|                        }
22718|      0|                    }
22719|      0|                    else {
22720|      0|                        goto _L___1;
22721|      0|                    }
22722|      0|                }
22723|      0|                else {
22724|      0|                    goto _L___1;
22725|      0|                }
22726|      0|            }
22727|      0|            else {
22728|      0|_L___1 : {
22729|      0|                    tmp___2 = is_regular_file(*(archive_name_array + 0));
22730|      0|                }
22731|      0|                if (tmp___2) {
22732|      0|                    {
22733|      0|                        archive = open(*(archive_name_array + 0), 0,
22734|      0|                                       ((128 | (128 >> 3)) | ((128 >> 3) >> 3)) |
22735|      0|                                       ((256 | (256 >> 3)) | ((256 >> 3) >> 3)));
22736|      0|                    }
22737|      0|                    if (archive < 0) {
22738|      0|                        {
22739|      0|                            open_fatal(*(archive_name_array + 0));
22740|      0|                        }
22741|      0|                    }
22742|      0|                    {
22743|      0|                        xdup2(archive, 0);
22744|      0|                        execlp(use_compress_program_option, use_compress_program_option,
22745|      0|                               "-d", (char *)0);
22746|      0|                        exec_fatal(use_compress_program_option);
22747|      0|                    }
22748|      0|                }
22749|      0|            }
22750|      0|        }
22751|      0|        {
22752|      0|            xpipe(child_pipe);
22753|      0|            grandchild_pid = xfork();
22754|      0|        }
22755|      0|        if (grandchild_pid == 0) {
22756|      0|            {
22757|      0|                tmp___3 = gettext("tar (grandchild)");
22758|      0|                program_name = (char const *)tmp___3;
22759|      0|                xdup2(child_pipe[0], 0);
22760|      0|                xclose(child_pipe[1]);
22761|      0|                execlp(use_compress_program_option, use_compress_program_option, "-d",
22762|      0|                       (char *)0);
22763|      0|                exec_fatal(use_compress_program_option);
22764|      0|            }
22765|      0|        }
22766|      0|        {
22767|      0|            xdup2(child_pipe[1], 1);
22768|      0|            xclose(child_pipe[0]);
22769|      0|            tmp___8 = strcmp(*(archive_name_array + 0), "-");
22770|      0|        }
22771|      0|        if (tmp___8 == 0) {
22772|      0|            archive = 0;
22773|      0|        }
22774|      0|        else {
22775|      0|            if (!force_local_option) {
22776|      0|                {
22777|      0|                    rmt_path__ = strchr(*(archive_name_array + 0), ':');
22778|      0|                }
22779|      0|                if (rmt_path__) {
22780|      0|                    if ((unsigned long)rmt_path__ >
22781|      0|                            (unsigned long)*(archive_name_array + 0)) {
22782|      0|                        {
22783|      0|                            tmp___7 = memchr(
22784|      0|                                          (void const *)*(archive_name_array + 0), '/',
22785|      0|                                          (size_t)(rmt_path__ - (char *)*(archive_name_array + 0)));
22786|      0|                        }
22787|      0|                        if (tmp___7) {
22788|      0|                            {
22789|      0|                                tmp___6 = open(*(archive_name_array + 0), 0,
22790|      0|                                               ((128 | (128 >> 3)) | ((128 >> 3) >> 3)) |
22791|      0|                                               ((256 | (256 >> 3)) | ((256 >> 3) >> 3)));
22792|      0|                                archive = tmp___6;
22793|      0|                            }
22794|      0|                        }
22795|      0|                        else {
22796|      0|                            {
22797|      0|                                tmp___5 = rmt_open__(*(archive_name_array + 0), 0, 1 << 30,
22798|      0|                                                     rsh_command_option);
22799|      0|                                archive = tmp___5;
22800|      0|                            }
22801|      0|                        }
22802|      0|                    }
22803|      0|                    else {
22804|      0|                        {
22805|      0|                            tmp___6 = open(*(archive_name_array + 0), 0,
22806|      0|                                           ((128 | (128 >> 3)) | ((128 >> 3) >> 3)) |
22807|      0|                                           ((256 | (256 >> 3)) | ((256 >> 3) >> 3)));
22808|      0|                            archive = tmp___6;
22809|      0|                        }
22810|      0|                    }
22811|      0|                }
22812|      0|                else {
22813|      0|                    {
22814|      0|                        tmp___6 = open(*(archive_name_array + 0), 0,
22815|      0|                                       ((128 | (128 >> 3)) | ((128 >> 3) >> 3)) |
22816|      0|                                       ((256 | (256 >> 3)) | ((256 >> 3) >> 3)));
22817|      0|                        archive = tmp___6;
22818|      0|                    }
22819|      0|                }
22820|      0|            }
22821|      0|            else {
22822|      0|                {
22823|      0|                    tmp___6 = open(*(archive_name_array + 0), 0,
22824|      0|                                   ((128 | (128 >> 3)) | ((128 >> 3) >> 3)) |
22825|      0|                                   ((256 | (256 >> 3)) | ((256 >> 3) >> 3)));
22826|      0|                    archive = tmp___6;
22827|      0|                }
22828|      0|            }
22829|      0|        }
22830|      0|        if (archive < 0) {
22831|      0|            {
22832|      0|                open_fatal(*(archive_name_array + 0));
22833|      0|            }
22834|      0|        }
22835|      0|        {
22836|      0|            while (1) {
22837|      0|while_continue: /* CIL Label */
22838|      0|                ;
22839|      0|                {
22840|      0|                    clear_read_error_count();
22841|      0|                }
22842|      0|error_loop:
22843|      0|                if (archive >= 1 << 30) {
22844|      0|                    {
22845|      0|                        tmp___9 = rmt_read__(archive - (1 << 30), record_start->buffer,
22846|      0|                                             record_size);
22847|      0|                        status = tmp___9;
22848|      0|                    }
22849|      0|                }
22850|      0|                else {
22851|      0|                    {
22852|      0|                        tmp___10 =
22853|      0|                            safe_read(archive, (void *)(record_start->buffer), record_size);
22854|      0|                        status = tmp___10;
22855|      0|                    }
22856|      0|                }
22857|      0|                if (status == 0xffffffffffffffffUL) {
22858|      0|                    {
22859|      0|                        archive_read_error();
22860|      0|                    }
22861|      0|                    goto error_loop;
22862|      0|                }
22863|      0|                if (status == 0UL) {
22864|      0|                    goto while_break;
22865|      0|                }
22866|      0|                cursor = record_start->buffer;
22867|      0|                maximum = status;
22868|      0|                {
22869|      0|                    while (1) {
22870|      0|while_continue___0: /* CIL Label */
22871|      0|                        ;
22872|      0|                        if (!maximum) {
22873|      0|                            goto while_break___0;
22874|      0|                        }
22875|      0|                        if (maximum < 512UL) {
22876|      0|                            count = maximum;
22877|      0|                        }
22878|      0|                        else {
22879|      0|                            count = (size_t)512;
22880|      0|                        }
22881|      0|                        {
22882|      0|                            tmp___11 = full_write(1, (void const *)cursor, count);
22883|      0|                        }
22884|      0|                        if (tmp___11 != count) {
22885|      0|                            {
22886|      0|                                write_error(use_compress_program_option);
22887|      0|                            }
22888|      0|                        }
22889|      0|                        cursor += count;
22890|      0|                        maximum -= count;
22891|      0|                    }
22892|      0|while_break___0: /* CIL Label */
22893|      0|                    ;
22894|      0|                }
22895|      0|            }
22896|      0|while_break: /* CIL Label */
22897|      0|            ;
22898|      0|        }
22899|      0|        {
22900|      0|            xclose(1);
22901|      0|        }
22902|      0|        {
22903|      0|            while (1) {
22904|      0|while_continue___1: /* CIL Label */
22905|      0|                ;
22906|      0|                {
22907|      0|                    tmp___13 = waitpid(grandchild_pid, &wait_status, 0);
22908|      0|                }
22909|      0|                if (!(tmp___13 == -1)) {
22910|      0|                    goto while_break___1;
22911|      0|                }
22912|      0|                {
22913|      0|                    tmp___12 = __errno_location();
22914|      0|                }
22915|      0|                if (*tmp___12 != 4) {
22916|      0|                    {
22917|      0|                        waitpid_error(use_compress_program_option);
22918|      0|                    }
22919|      0|                    goto while_break___1;
22920|      0|                }
22921|      0|            }
22922|      0|while_break___1: /* CIL Label */
22923|      0|            ;
22924|      0|        }
22925|      0|        __constr_expr_11.__in = wait_status;
22926|      0|        if ((int)((signed char)((__constr_expr_11.__i & 127) + 1)) >> 1 > 0) {
22927|      0|            {
22928|      0|                __constr_expr_8.__in = wait_status;
22929|      0|                kill(child_pid___0, __constr_expr_8.__i & 127);
22930|      0|                exit_status = 2;
22931|      0|            }
22932|      0|        }
22933|      0|        else {
22934|      0|            __constr_expr_10.__in = wait_status;
22935|      0|            if ((__constr_expr_10.__i & 65280) >> 8 != 0) {
22936|      0|                __constr_expr_9.__in = wait_status;
22937|      0|                exit_status = (__constr_expr_9.__i & 65280) >> 8;
22938|      0|            }
22939|      0|        }
22940|      0|        {
22941|      0|            exit(exit_status);
22942|      0|        }
22943|      0|    }
22944|      0|}
22945|       |/* #pragma merger("0","00e.tar.o.i","") */
22946|       |extern char *optarg;
22947|       |extern int optind;
22948|       |extern int printf(char const *__restrict __format, ...);
22949|       |extern int puts(char const *__s);
22950|       |extern int fputs_unlocked(char const *__restrict __s,
22951|       |                          FILE *__restrict __stream);
22952|       |extern __attribute__((__nothrow__)) char *(__attribute__((__leaf__))
22953|       |        setlocale)(int __category,
22954|       |                   char const *__locale);
22955|       |extern
22956|       |__attribute__((__nothrow__)) char *(__attribute__((__leaf__))
22957|       |                                    textdomain)(char const *__domainname);
22958|       |extern __attribute__((__nothrow__)) char *(__attribute__((
22959|       |            __leaf__)) bindtextdomain)(char const *__domainname, char const *__dirname);
22960|       |extern __attribute__((__nothrow__)) int(__attribute__((__leaf__)) getopt_long)(
22961|       |    int ___argc, char *const *___argv, char const *__shortopts,
22962|       |    struct option const *__longopts, int *__longind);
22963|       |char const *simple_backup_suffix;
22964|       |enum backup_type xget_version(char const *context, char const *version);
22965|       |struct exclude *new_exclude(void);
22966|       |void add_exclude(struct exclude *ex, char const *pattern, int options);
22967|       |int add_exclude_file(void (*add_func)(struct exclude *, char const *, int),
22968|       |                     struct exclude *ex, char const *filename, int options,
22969|       |                     char line_end);
22970|       |struct mode_change *mode_compile(char const *mode_string,
22971|       |                                 unsigned int masked_ops);
22972|       |int check_links_option;
22973|       |int allocated_archive_names;
22974|       |void update_archive(void);
22975|       |_Bool get_date(struct timespec *result, char const *p,
22976|       |               struct timespec const *now);
22977|       |void prepend_default_options(char const *options, int *pargc, char ***pargv);
22978|       |static char const *stdin_used_by;
22979|       |void request_stdin(char const *option)
22980|      0|{
22981|      0|    char *tmp;
22982|      0|    char *__cil_tmp3;
22983|       |
22984|      0|    {
22985|      0|        if (stdin_used_by) {
22986|      0|            {
22987|      0|                tmp = gettext("Options `-%s\' and `-%s\' both want standard input");
22988|      0|                error(0, 0, (char const *)tmp, stdin_used_by, option);
22989|      0|                usage(2);
22990|      0|            }
22991|      0|        }
22992|      0|        stdin_used_by = option;
22993|      0|        return;
22994|      0|    }
22995|      0|}
22996|       |static FILE *confirm_file;
22997|       |static int confirm_file_EOF;
22998|       |int confirm(char const *message_action, char const *message_name)
22999|      0|{
23000|      0|    char const *tmp;
23001|      0|    int reply;
23002|      0|    int tmp___0;
23003|      0|    int tmp___1;
23004|      0|    int character;
23005|      0|    int tmp___2;
23006|      0|    char *__cil_tmp9;
23007|      0|    char *__cil_tmp10;
23008|       |
23009|      0|    {
23010|      0|        if (!confirm_file) {
23011|      0|            if (archive == 0) {
23012|      0|                goto _L___3;
23013|      0|            }
23014|      0|            else {
23015|      0|                if (stdin_used_by) {
23016|      0|_L___3 : { /* CIL Label */
23017|      0|                        confirm_file = fopen((char const * /* __restrict  */) "/dev/tty",
23018|      0|                                             (char const * /* __restrict  */) "r");
23019|      0|                    }
23020|      0|                    if (!confirm_file) {
23021|      0|                        {
23022|      0|                            open_fatal("/dev/tty");
23023|      0|                        }
23024|      0|                    }
23025|      0|                }
23026|      0|                else {
23027|      0|                    {
23028|      0|                        request_stdin("-w");
23029|      0|                        confirm_file = stdin;
23030|      0|                    }
23031|      0|                }
23032|      0|            }
23033|      0|        }
23034|      0|        {
23035|      0|            tmp = quote(message_name);
23036|      0|            fprintf((FILE * /* __restrict  */) stdlis,
23037|      0|                    (char const * /* __restrict  */) "%s %s?", message_action, tmp);
23038|      0|            fflush_unlocked(stdlis);
23039|      0|        }
23040|      0|        if (confirm_file_EOF) {
23041|      0|            tmp___1 = -1;
23042|      0|        }
23043|      0|        else {
23044|      0|            {
23045|      0|                tmp___0 = getc_unlocked(confirm_file);
23046|      0|                tmp___1 = tmp___0;
23047|      0|            }
23048|      0|        }
23049|      0|        reply = tmp___1;
23050|      0|        character = reply;
23051|      0|        {
23052|      0|            while (1) {
23053|      0|while_continue: /* CIL Label */
23054|      0|                ;
23055|      0|                if (!(character != 10)) {
23056|      0|                    goto while_break;
23057|      0|                }
23058|      0|                if (character == -1) {
23059|      0|                    {
23060|      0|                        confirm_file_EOF = 1;
23061|      0|                        fputc_unlocked('\n', stdlis);
23062|      0|                        fflush_unlocked(stdlis);
23063|      0|                    }
23064|      0|                    goto while_break;
23065|      0|                }
23066|      0|                {
23067|      0|                    character = getc_unlocked(confirm_file);
23068|      0|                }
23069|      0|            }
23070|      0|while_break: /* CIL Label */
23071|      0|            ;
23072|      0|        }
23073|      0|        if (reply == 121) {
23074|      0|            tmp___2 = 1;
23075|      0|        }
23076|      0|        else {
23077|      0|            if (reply == 89) {
23078|      0|                tmp___2 = 1;
23079|      0|            }
23080|      0|            else {
23081|      0|                tmp___2 = 0;
23082|      0|            }
23083|      0|        }
23084|      0|        return (tmp___2);
23085|      0|    }
23086|      0|}
23087|       |static struct fmttab const fmttab[6] = {
23088|       |    {"v7", (enum archive_format)1},
23089|       |    {"oldgnu", (enum archive_format)2},
23090|       |    {"ustar", (enum archive_format)3},
23091|       |    {"posix", (enum archive_format)4},
23092|       |    {"gnu", (enum archive_format)6},
23093|       |    {(char const *)((void *)0), (enum archive_format)0}
23094|       |};
23095|       |static void set_archive_format(char const *name)
23096|      0|{
23097|      0|    struct fmttab const *p;
23098|      0|    char *tmp;
23099|      0|    char *tmp___0;
23100|      0|    int tmp___1;
23101|      0|    char *__cil_tmp6;
23102|       |
23103|      0|    {
23104|      0|        p = fmttab;
23105|      0|        {
23106|      0|            while (1) {
23107|      0|while_continue: /* CIL Label */
23108|      0|                ;
23109|      0|                {
23110|      0|                    tmp___1 = strcmp((char const *)p->name, name);
23111|      0|                }
23112|      0|                if (!(tmp___1 != 0)) {
23113|      0|                    goto while_break;
23114|      0|                }
23115|      0|                p++;
23116|      0|                if (!p->name) {
23117|      0|                    {
23118|      0|                        tmp = quotearg_colon(name);
23119|      0|                        tmp___0 = gettext("%s: Invalid archive format");
23120|      0|                        error(0, 0, (char const *)tmp___0, tmp);
23121|      0|                        usage(2);
23122|      0|                    }
23123|      0|                }
23124|      0|            }
23125|      0|while_break: /* CIL Label */
23126|      0|            ;
23127|      0|        }
23128|      0|        archive_format = (enum archive_format)p->fmt;
23129|      0|        return;
23130|      0|    }
23131|      0|}
23132|       |static char const *archive_format_string(enum archive_format fmt)
23133|      0|{
23134|      0|    struct fmttab const *p;
23135|      0|    char *__cil_tmp3;
23136|       |
23137|      0|    {
23138|      0|        p = fmttab;
23139|      0|        {
23140|      0|            while (1) {
23141|      0|while_continue: /* CIL Label */
23142|      0|                ;
23143|      0|                if (!p->name) {
23144|      0|                    goto while_break;
23145|      0|                }
23146|      0|                if ((unsigned int const)p->fmt == (unsigned int const)fmt) {
23147|      0|                    return ((char const *)p->name);
23148|      0|                }
23149|      0|                p++;
23150|      0|            }
23151|      0|while_break: /* CIL Label */
23152|      0|            ;
23153|      0|        }
23154|      0|        return ("unknown?");
23155|      0|    }
23156|      0|}
23157|       |static void assert_format(unsigned int fmt_mask)
23158|      0|{
23159|      0|    char *tmp;
23160|      0|    char *__cil_tmp3;
23161|       |
23162|      0|    {
23163|      0|        if (((unsigned int)(1 << (unsigned int)archive_format) & fmt_mask) == 0U) {
23164|      0|            {
23165|      0|                tmp = gettext("GNU features wanted on incompatible archive format");
23166|      0|                error(0, 0, (char const *)tmp);
23167|      0|                usage(2);
23168|      0|            }
23169|      0|        }
23170|      0|        return;
23171|      0|    }
23172|      0|}
23173|       |static int show_help;
23174|       |static int show_version;
23175|       |static struct option long_options[104] = {
23176|       |    {"absolute-names", 0, (int *)0, 'P'},
23177|       |    {"after-date", 1, (int *)0, 'N'},
23178|       |    {"anchored", 0, (int *)0, 128},
23179|       |    {"append", 0, (int *)0, 'r'},
23180|       |    {"atime-preserve", 0, (int *)0, 129},
23181|       |    {"backup", 2, (int *)0, 130},
23182|       |    {"block-number", 0, (int *)0, 'R'},
23183|       |    {"blocking-factor", 1, (int *)0, 'b'},
23184|       |    {"bzip2", 0, (int *)0, 'j'},
23185|       |    {"catenate", 0, (int *)0, 'A'},
23186|       |    {"checkpoint", 0, (int *)0, 131},
23187|       |    {"check-links", 0, &check_links_option, 1},
23188|       |    {"compare", 0, (int *)0, 'd'},
23189|       |    {"compress", 0, (int *)0, 'Z'},
23190|       |    {"concatenate", 0, (int *)0, 'A'},
23191|       |    {"confirmation", 0, (int *)0, 'w'},
23192|       |    {"create", 0, (int *)0, 'c'},
23193|       |    {"delete", 0, (int *)0, 132},
23194|       |    {"dereference", 0, (int *)0, 'h'},
23195|       |    {"diff", 0, (int *)0, 'd'},
23196|       |    {"directory", 1, (int *)0, 'C'},
23197|       |    {"exclude", 1, (int *)0, 133},
23198|       |    {"exclude-from", 1, (int *)0, 'X'},
23199|       |    {"extract", 0, (int *)0, 'x'},
23200|       |    {"file", 1, (int *)0, 'f'},
23201|       |    {"files-from", 1, (int *)0, 'T'},
23202|       |    {"force-local", 0, (int *)0, 134},
23203|       |    {"format", 1, (int *)0, 135},
23204|       |    {"get", 0, (int *)0, 'x'},
23205|       |    {"group", 1, (int *)0, 136},
23206|       |    {"gunzip", 0, (int *)0, 'z'},
23207|       |    {"gzip", 0, (int *)0, 'z'},
23208|       |    {"help", 0, &show_help, 1},
23209|       |    {"ignore-case", 0, (int *)0, 137},
23210|       |    {"ignore-failed-read", 0, (int *)0, 138},
23211|       |    {"ignore-zeros", 0, (int *)0, 'i'},
23212|       |    {"incremental", 0, (int *)0, 'G'},
23213|       |    {"index-file", 1, (int *)0, 139},
23214|       |    {"info-script", 1, (int *)0, 'F'},
23215|       |    {"interactive", 0, (int *)0, 'w'},
23216|       |    {"keep-newer-files", 0, (int *)0, 140},
23217|       |    {"keep-old-files", 0, (int *)0, 'k'},
23218|       |    {"label", 1, (int *)0, 'V'},
23219|       |    {"list", 0, (int *)0, 't'},
23220|       |    {"listed-incremental", 1, (int *)0, 'g'},
23221|       |    {"mode", 1, (int *)0, 141},
23222|       |    {"multi-volume", 0, (int *)0, 'M'},
23223|       |    {"new-volume-script", 1, (int *)0, 'F'},
23224|       |    {"newer", 1, (int *)0, 'N'},
23225|       |    {"newer-mtime", 1, (int *)0, 142},
23226|       |    {"null", 0, (int *)0, 148},
23227|       |    {"no-anchored", 0, (int *)0, 143},
23228|       |    {"no-ignore-case", 0, (int *)0, 144},
23229|       |    {"no-overwrite-dir", 0, (int *)0, 145},
23230|       |    {"no-wildcards", 0, (int *)0, 146},
23231|       |    {"no-wildcards-match-slash", 0, (int *)0, 147},
23232|       |    {"no-recursion", 0, &recursion_option, 0},
23233|       |    {"no-same-owner", 0, &same_owner_option, -1},
23234|       |    {"no-same-permissions", 0, &same_permissions_option, -1},
23235|       |    {"numeric-owner", 0, (int *)0, 149},
23236|       |    {"occurrence", 2, (int *)0, 150},
23237|       |    {"old-archive", 0, (int *)0, 'o'},
23238|       |    {"one-file-system", 0, (int *)0, 'l'},
23239|       |    {"overwrite", 0, (int *)0, 151},
23240|       |    {"owner", 1, (int *)0, 152},
23241|       |    {"pax-option", 1, (int *)0, 153},
23242|       |    {"portability", 0, (int *)0, 'o'},
23243|       |    {"posix", 0, (int *)0, 154},
23244|       |    {"preserve", 0, (int *)0, 155},
23245|       |    {"preserve-order", 0, (int *)0, 's'},
23246|       |    {"preserve-permissions", 0, (int *)0, 'p'},
23247|       |    {"recursion", 0, &recursion_option, 1 << 3},
23248|       |    {"recursive-unlink", 0, (int *)0, 157},
23249|       |    {"read-full-records", 0, (int *)0, 'B'},
23250|       |    {"record-size", 1, (int *)0, 156},
23251|       |    {"remove-files", 0, (int *)0, 158},
23252|       |    {"rmt-command", 1, (int *)0, 159},
23253|       |    {"rsh-command", 1, (int *)0, 160},
23254|       |    {"same-order", 0, (int *)0, 's'},
23255|       |    {"same-owner", 0, &same_owner_option, 1},
23256|       |    {"same-permissions", 0, (int *)0, 'p'},
23257|       |    {"show-defaults", 0, (int *)0, 161},
23258|       |    {"show-omitted-dirs", 0, (int *)0, 162},
23259|       |    {"sparse", 0, (int *)0, 'S'},
23260|       |    {"starting-file", 1, (int *)0, 'K'},
23261|       |    {"strip-path", 1, (int *)0, 163},
23262|       |    {"suffix", 1, (int *)0, 164},
23263|       |    {"tape-length", 1, (int *)0, 'L'},
23264|       |    {"to-stdout", 0, (int *)0, 'O'},
23265|       |    {"totals", 0, (int *)0, 165},
23266|       |    {"touch", 0, (int *)0, 'm'},
23267|       |    {"uncompress", 0, (int *)0, 'Z'},
23268|       |    {"ungzip", 0, (int *)0, 'z'},
23269|       |    {"unlink-first", 0, (int *)0, 'U'},
23270|       |    {"update", 0, (int *)0, 'u'},
23271|       |    {"utc", 0, (int *)0, 167},
23272|       |    {"use-compress-program", 1, (int *)0, 166},
23273|       |    {"verbose", 0, (int *)0, 'v'},
23274|       |    {"verify", 0, (int *)0, 'W'},
23275|       |    {"version", 0, &show_version, 1},
23276|       |    {"volno-file", 1, (int *)0, 168},
23277|       |    {"wildcards", 0, (int *)0, 169},
23278|       |    {"wildcards-match-slash", 0, (int *)0, 170},
23279|       |    {(char const *)0, 0, (int *)0, 0}
23280|       |};
23281|       |__attribute__((__noreturn__)) void usage(int status);
23282|       |void usage(int status)
23283|      0|{
23284|      0|    char *tmp;
23285|      0|    char *tmp___0;
23286|      0|    char *tmp___1;
23287|      0|    char *tmp___2;
23288|      0|    char *tmp___3;
23289|      0|    char *tmp___4;
23290|      0|    char *tmp___5;
23291|      0|    char *tmp___6;
23292|      0|    char *tmp___7;
23293|      0|    char *tmp___8;
23294|      0|    char *tmp___9;
23295|      0|    char *tmp___10;
23296|      0|    char *tmp___11;
23297|      0|    char *tmp___12;
23298|      0|    char *tmp___13;
23299|      0|    char *tmp___14;
23300|      0|    char const *tmp___15;
23301|      0|    char *tmp___16;
23302|      0|    char *tmp___17;
23303|      0|    char *__cil_tmp21;
23304|      0|    char *__cil_tmp22;
23305|      0|    char *__cil_tmp23;
23306|      0|    char *__cil_tmp24;
23307|      0|    char *__cil_tmp25;
23308|      0|    char *__cil_tmp26;
23309|      0|    char *__cil_tmp27;
23310|      0|    char *__cil_tmp28;
23311|      0|    char *__cil_tmp29;
23312|      0|    char *__cil_tmp30;
23313|      0|    char *__cil_tmp31;
23314|      0|    char *__cil_tmp32;
23315|      0|    char *__cil_tmp33;
23316|      0|    char *__cil_tmp34;
23317|      0|    char *__cil_tmp35;
23318|      0|    char *__cil_tmp36;
23319|      0|    char *__cil_tmp37;
23320|      0|    char *__cil_tmp38;
23321|       |
23322|      0|    {
23323|      0|        if (status != 0) {
23324|      0|            {
23325|      0|                tmp = gettext("Try `%s --help\' for more information.\n");
23326|      0|                fprintf((FILE * /* __restrict  */) stderr,
23327|      0|                        (char const * /* __restrict  */)tmp, program_name);
23328|      0|            }
23329|      0|        }
23330|      0|        else {
23331|      0|            {
23332|      0|                tmp___0 = gettext(
23333|      0|                              "GNU `tar\' saves many files together into a single tape or disk "
23334|      0|                              "archive, and\ncan restore individual files from the archive.\n");
23335|      0|                fputs_unlocked((char const * /* __restrict  */)tmp___0,
23336|      0|                               (FILE * /* __restrict  */) stdout);
23337|      0|                tmp___1 =
23338|      0|                    gettext("\nUsage: %s [OPTION]... [FILE]...\n\nExamples:\n  %s -cf "
23339|      0|                            "archive.tar foo bar  # Create archive.tar from files foo "
23340|      0|                            "and bar.\n  %s -tvf archive.tar         # List all files "
23341|      0|                            "in archive.tar verbosely.\n  %s -xf archive.tar          "
23342|      0|                            "# Extract all files from archive.tar.\n");
23343|      0|                printf((char const * /* __restrict  */)tmp___1, program_name,
23344|      0|                       program_name, program_name, program_name);
23345|      0|                tmp___2 = gettext("\nIf a long option shows an argument as mandatory, "
23346|      0|                                  "then it is mandatory\nfor the equivalent short "
23347|      0|                                  "option also.  Similarly for optional arguments.\n");
23348|      0|                fputs_unlocked((char const * /* __restrict  */)tmp___2,
23349|      0|                               (FILE * /* __restrict  */) stdout);
23350|      0|                tmp___3 = gettext(
23351|      0|                              "\nMain operation mode:\n  -t, --list              list the "
23352|      0|                              "contents of an archive\n  -x, --extract, --get    extract files "
23353|      0|                              "from an archive\n  -c, --create            create a new archive\n "
23354|      0|                              " -d, --diff, --compare   find differences between archive and "
23355|      0|                              "file system\n  -r, --append            append files to the end of "
23356|      0|                              "an archive\n  -u, --update            only append files newer "
23357|      0|                              "than copy in archive\n  -A, --catenate          append tar files "
23358|      0|                              "to an archive\n      --concatenate       same as -A\n      "
23359|      0|                              "--delete            delete from the archive (not on mag "
23360|      0|                              "tapes!)\n");
23361|      0|                fputs_unlocked((char const * /* __restrict  */)tmp___3,
23362|      0|                               (FILE * /* __restrict  */) stdout);
23363|      0|                tmp___4 = gettext(
23364|      0|                              "\nOperation modifiers:\n  -W, --verify               attempt to "
23365|      0|                              "verify the archive after writing it\n      --remove-files         "
23366|      0|                              "remove files after adding them to the archive\n  -k, "
23367|      0|                              "--keep-old-files       don\'t replace existing files when "
23368|      0|                              "extracting\n      --keep-newer-files     don\'t replace existing "
23369|      0|                              "files that are newer\n                             than their "
23370|      0|                              "archive copies\n      --overwrite            overwrite existing "
23371|      0|                              "files when extracting\n      --no-overwrite-dir     preserve "
23372|      0|                              "metadata of existing directories\n  -U, --unlink-first         "
23373|      0|                              "remove each file prior to extracting over it\n      "
23374|      0|                              "--recursive-unlink     empty hierarchies prior to extracting "
23375|      0|                              "directory\n  -S, --sparse               handle sparse files "
23376|      0|                              "efficiently\n  -O, --to-stdout            extract files to "
23377|      0|                              "standard output\n  -G, --incremental          handle old "
23378|      0|                              "GNU-format incremental backup\n  -g, --listed-incremental=FILE\n  "
23379|      0|                              "                           handle new GNU-format incremental "
23380|      0|                              "backup\n      --ignore-failed-read   do not exit with nonzero on "
23381|      0|                              "unreadable files\n      --occurrence[=NUM]     process only the "
23382|      0|                              "NUMth occurrence of each file in\n                             "
23383|      0|                              "the archive. This option is valid only in\n                       "
23384|      0|                              "      conjunction with one of the subcommands --delete,\n         "
23385|      0|                              "                    --diff, --extract or --list and when a list "
23386|      0|                              "of\n                             files is given either on the "
23387|      0|                              "command line or\n                             via -T option.\n    "
23388|      0|                              "                         NUM defaults to 1.\n");
23389|      0|                fputs_unlocked((char const * /* __restrict  */)tmp___4,
23390|      0|                               (FILE * /* __restrict  */) stdout);
23391|      0|                tmp___5 = gettext(
23392|      0|                              "\nHandling of file attributes:\n      --owner=NAME             "
23393|      0|                              "force NAME as owner for added files\n      --group=NAME           "
23394|      0|                              "  force NAME as group for added files\n      --mode=CHANGES       "
23395|      0|                              "    force (symbolic) mode CHANGES for added files\n      "
23396|      0|                              "--atime-preserve         don\'t change access times on dumped "
23397|      0|                              "files\n  -m, --modification-time      don\'t extract file "
23398|      0|                              "modified time\n      --same-owner             try extracting "
23399|      0|                              "files with the same ownership\n      --no-same-owner          "
23400|      0|                              "extract files as yourself\n      --numeric-owner          always "
23401|      0|                              "use numbers for user/group names\n  -p, --same-permissions       "
23402|      0|                              "extract permissions information\n      --no-same-permissions    "
23403|      0|                              "do not extract permissions information\n      "
23404|      0|                              "--preserve-permissions   same as -p\n  -s, --same-order           "
23405|      0|                              "  sort names to extract to match archive\n      --preserve-order  "
23406|      0|                              "       same as -s\n      --preserve               same as both -p "
23407|      0|                              "and -s\n");
23408|      0|                fputs_unlocked((char const * /* __restrict  */)tmp___5,
23409|      0|                               (FILE * /* __restrict  */) stdout);
23410|      0|                tmp___6 = gettext(
23411|      0|                              "\nDevice selection and switching:\n  -f, --file=ARCHIVE           "
23412|      0|                              "  use archive file or device ARCHIVE\n      --force-local         "
23413|      0|                              "     archive file is local even if has a colon\n      "
23414|      0|                              "--rmt-command=COMMAND      use given rmt COMMAND instead of "
23415|      0|                              "/etc/rmt\n      --rsh-command=COMMAND      use remote COMMAND "
23416|      0|                              "instead of rsh\n  -[0-7][lmh]                    specify drive "
23417|      0|                              "and density\n  -M, --multi-volume             create/list/extract "
23418|      0|                              "multi-volume archive\n  -L, --tape-length=NUM          change "
23419|      0|                              "tape after writing NUM x 1024 bytes\n  -F, --info-script=FILE     "
23420|      0|                              "    run script at end of each tape (implies -M)\n      "
23421|      0|                              "--new-volume-script=FILE   same as -F FILE\n      "
23422|      0|                              "--volno-file=FILE          use/update the volume number in "
23423|      0|                              "FILE\n");
23424|      0|                fputs_unlocked((char const * /* __restrict  */)tmp___6,
23425|      0|                               (FILE * /* __restrict  */) stdout);
23426|      0|                tmp___7 = gettext(
23427|      0|                              "\nDevice blocking:\n  -b, --blocking-factor=BLOCKS   BLOCKS x 512 "
23428|      0|                              "bytes per record\n      --record-size=SIZE         SIZE bytes per "
23429|      0|                              "record, multiple of 512\n  -i, --ignore-zeros             ignore "
23430|      0|                              "zeroed blocks in archive (means EOF)\n  -B, --read-full-records   "
23431|      0|                              "     reblock as we read (for 4.2BSD pipes)\n");
23432|      0|                fputs_unlocked((char const * /* __restrict  */)tmp___7,
23433|      0|                               (FILE * /* __restrict  */) stdout);
23434|      0|                tmp___8 = gettext(
23435|      0|                              "\nArchive format selection:\n      --format=FMTNAME               "
23436|      0|                              "create archive of the given format.\n                             "
23437|      0|                              "        FMTNAME is one of the following:\n                        "
23438|      0|                              "             v7        old V7 tar format\n                        "
23439|      0|                              "             oldgnu    GNU format as per tar <= 1.12\n            "
23440|      0|                              "                         gnu       GNU tar 1.13 format\n          "
23441|      0|                              "                           ustar     POSIX 1003.1-1988 (ustar) "
23442|      0|                              "format\n                                     posix     POSIX "
23443|      0|                              "1003.1-2001 (pax) format\n      --old-archive, --portability   "
23444|      0|                              "same as --format=v7\n      --posix                        same as "
23445|      0|                              "--format=posix\n  --pax-option "
23446|      0|                              "keyword[[:]=value][,keyword[[:]=value], ...]\n                    "
23447|      0|                              "                 control pax keywords\n  -V, --label=NAME         "
23448|      0|                              "          create archive with volume name NAME\n              "
23449|      0|                              "PATTERN                at list/extract time, a globbing PATTERN\n "
23450|      0|                              " -j, --bzip2                        filter the archive through "
23451|      0|                              "bzip2\n  -z, --gzip, --ungzip               filter the archive "
23452|      0|                              "through gzip\n  -Z, --compress, --uncompress       filter the "
23453|      0|                              "archive through compress\n      --use-compress-program=PROG    "
23454|      0|                              "filter through PROG (must accept -d)\n");
23455|      0|                fputs_unlocked((char const * /* __restrict  */)tmp___8,
23456|      0|                               (FILE * /* __restrict  */) stdout);
23457|      0|                tmp___9 = gettext(
23458|      0|                              "\nLocal file selection:\n  -C, --directory=DIR          change to "
23459|      0|                              "directory DIR\n  -T, --files-from=NAME        get names to "
23460|      0|                              "extract or create from file NAME\n      --null                   "
23461|      0|                              "-T reads null-terminated names, disable -C\n      "
23462|      0|                              "--exclude=PATTERN        exclude files, given as a PATTERN\n  -X, "
23463|      0|                              "--exclude-from=FILE      exclude patterns listed in FILE\n      "
23464|      0|                              "--anchored               exclude patterns match file name start "
23465|      0|                              "(default)\n      --no-anchored            exclude patterns match "
23466|      0|                              "after any /\n      --ignore-case            exclusion ignores "
23467|      0|                              "case\n      --no-ignore-case         exclusion is case sensitive "
23468|      0|                              "(default)\n      --wildcards              exclude patterns use "
23469|      0|                              "wildcards (default)\n      --no-wildcards           exclude "
23470|      0|                              "patterns are plain strings\n      --wildcards-match-slash  "
23471|      0|                              "exclude pattern wildcards match \'/\' (default)\n      "
23472|      0|                              "--no-wildcards-match-slash exclude pattern wildcards do not match "
23473|      0|                              "\'/\'\n  -P, --absolute-names         don\'t strip leading `/\'s "
23474|      0|                              "from file names\n  -h, --dereference            dump instead the "
23475|      0|                              "files symlinks point to\n      --no-recursion           avoid "
23476|      0|                              "descending automatically in directories\n  -l, --one-file-system  "
23477|      0|                              "      stay in local file system when creating archive\n  -K, "
23478|      0|                              "--starting-file=NAME     begin at file NAME in the archive\n      "
23479|      0|                              "--strip-path=NUM         strip NUM leading components from file "
23480|      0|                              "names\n                               before extraction\n");
23481|      0|                fputs_unlocked((char const * /* __restrict  */)tmp___9,
23482|      0|                               (FILE * /* __restrict  */) stdout);
23483|      0|                tmp___10 = gettext("  -N, --newer=DATE-OR-FILE     only store files "
23484|      0|                                   "newer than DATE-OR-FILE\n      --newer-mtime=DATE  "
23485|      0|                                   "     compare date and time when data changed "
23486|      0|                                   "only\n      --after-date=DATE        same as -N\n");
23487|      0|                fputs_unlocked((char const * /* __restrict  */)tmp___10,
23488|      0|                               (FILE * /* __restrict  */) stdout);
23489|      0|                tmp___11 =
23490|      0|                    gettext("      --backup[=CONTROL]       backup before removal, "
23491|      0|                            "choose version control\n      --suffix=SUFFIX          "
23492|      0|                            "backup before removal, override usual suffix\n");
23493|      0|                fputs_unlocked((char const * /* __restrict  */)tmp___11,
23494|      0|                               (FILE * /* __restrict  */) stdout);
23495|      0|                tmp___12 = gettext(
23496|      0|                               "\nInformative output:\n      --help            print this help, "
23497|      0|                               "then exit\n      --version         print tar program version "
23498|      0|                               "number, then exit\n  -v, --verbose         verbosely list files "
23499|      0|                               "processed\n      --checkpoint      print directory names while "
23500|      0|                               "reading the archive\n      --check-links     print a message if "
23501|      0|                               "not all links are dumped\n      --totals          print total "
23502|      0|                               "bytes written while creating archive\n      --index-file=FILE "
23503|      0|                               "send verbose output to FILE\n      --utc             print file "
23504|      0|                               "modification dates in UTC\n  -R, --block-number    show block "
23505|      0|                               "number within archive with each message\n  -w, --interactive     "
23506|      0|                               "ask for confirmation for every action\n      --confirmation    "
23507|      0|                               "same as -w\n");
23508|      0|                fputs_unlocked((char const * /* __restrict  */)tmp___12,
23509|      0|                               (FILE * /* __restrict  */) stdout);
23510|      0|                tmp___13 = gettext(
23511|      0|                               "\nCompatibility options:\n  -o                                 "
23512|      0|                               "when creating, same as --old-archive\n                            "
23513|      0|                               "         when extracting, same as --no-same-owner\n");
23514|      0|                fputs_unlocked((char const * /* __restrict  */)tmp___13,
23515|      0|                               (FILE * /* __restrict  */) stdout);
23516|      0|                tmp___14 =
23517|      0|                    gettext("\nThe backup suffix is `~\', unless set with --suffix or "
23518|      0|                            "SIMPLE_BACKUP_SUFFIX.\nThe version control may be set "
23519|      0|                            "with --backup or VERSION_CONTROL, values are:\n\n  t, "
23520|      0|                            "numbered     make numbered backups\n  nil, existing   "
23521|      0|                            "numbered if numbered backups exist, simple otherwise\n  "
23522|      0|                            "never, simple   always make simple backups\n");
23523|      0|                fputs_unlocked((char const * /* __restrict  */)tmp___14,
23524|      0|                               (FILE * /* __restrict  */) stdout);
23525|      0|                tmp___15 = archive_format_string((enum archive_format)6);
23526|      0|                tmp___16 =
23527|      0|                    gettext("\nARCHIVE may be FILE, HOST:FILE or USER@HOST:FILE; DATE "
23528|      0|                            "may be a textual date\nor a file name starting with `/\' "
23529|      0|                            "or `.\', in which case the file\'s date is used.\n*This* "
23530|      0|                            "`tar\' defaults to `--format=%s -f%s -b%d\'.\n");
23531|      0|                printf((char const * /* __restrict  */)tmp___16, tmp___15, "-", 20);
23532|      0|                tmp___17 = gettext("\nReport bugs to <%s>.\n");
23533|      0|                printf((char const * /* __restrict  */)tmp___17, "bug-tar@gnu.org");
23534|      0|            }
23535|      0|        }
23536|      0|        {
23537|      0|            exit(status);
23538|      0|        }
23539|      0|    }
23540|      0|}
23541|       |static void set_subcommand_option(enum subcommand subcommand)
23542|      0|{
23543|      0|    char *tmp;
23544|      0|    char *__cil_tmp3;
23545|       |
23546|      0|    {
23547|      0|        if ((unsigned int)subcommand_option != 0U) {
23548|      0|            if ((unsigned int)subcommand_option != (unsigned int)subcommand) {
23549|      0|                {
23550|      0|                    tmp = gettext("You may not specify more than one `-Acdtrux\' option");
23551|      0|                    error(0, 0, (char const *)tmp);
23552|      0|                    usage(2);
23553|      0|                }
23554|      0|            }
23555|      0|        }
23556|      0|        subcommand_option = subcommand;
23557|      0|        return;
23558|      0|    }
23559|      0|}
23560|       |static void set_use_compress_program_option(char const *string)
23561|      0|{
23562|      0|    char *tmp;
23563|      0|    int tmp___0;
23564|      0|    char *__cil_tmp4;
23565|       |
23566|      0|    {
23567|      0|        if (use_compress_program_option) {
23568|      0|            {
23569|      0|                tmp___0 = strcmp(use_compress_program_option, string);
23570|      0|            }
23571|      0|            if (tmp___0 != 0) {
23572|      0|                {
23573|      0|                    tmp = gettext("Conflicting compression options");
23574|      0|                    error(0, 0, (char const *)tmp);
23575|      0|                    usage(2);
23576|      0|                }
23577|      0|            }
23578|      0|        }
23579|      0|        use_compress_program_option = string;
23580|      0|        return;
23581|      0|    }
23582|      0|}
23583|       |static void decode_options(int argc, char **argv)
23584|      0|{
23585|      0|    int optchar;
23586|      0|    int input_files;
23587|      0|    char const *textual_date_option;
23588|      0|    char const *backup_suffix_string;
23589|      0|    char const *version_control_string;
23590|      0|    int exclude_options;
23591|      0|    _Bool o_option;
23592|      0|    int pax_option;
23593|      0|    char *tmp;
23594|      0|    int new_argc;
23595|      0|    char **new_argv;
23596|      0|    char *const *in;
23597|      0|    char **out;
23598|      0|    char const *letter;
23599|      0|    char buffer___2[3];
23600|      0|    char const *cursor;
23601|      0|    size_t tmp___0;
23602|      0|    void *tmp___1;
23603|      0|    char **tmp___2;
23604|      0|    char *const *tmp___3;
23605|      0|    char *const *tmp___4;
23606|      0|    char **tmp___5;
23607|      0|    char *tmp___6;
23608|      0|    char **tmp___7;
23609|      0|    char *const *tmp___8;
23610|      0|    char *tmp___9;
23611|      0|    char **tmp___10;
23612|      0|    char *const *tmp___11;
23613|      0|    char *tmp___12;
23614|      0|    uintmax_t u;
23615|      0|    char *tmp___13;
23616|      0|    char *tmp___14;
23617|      0|    strtol_error tmp___15;
23618|      0|    void *tmp___16;
23619|      0|    int tmp___17;
23620|      0|    char *tmp___18;
23621|      0|    uintmax_t u___0;
23622|      0|    char *tmp___19;
23623|      0|    char *tmp___20;
23624|      0|    strtol_error tmp___21;
23625|      0|    char *tmp___22;
23626|      0|    struct stat st;
23627|      0|    char *tmp___23;
23628|      0|    int tmp___24;
23629|      0|    char const *tmp___25;
23630|      0|    char const *tmp___26;
23631|      0|    char *tmp___27;
23632|      0|    _Bool tmp___28;
23633|      0|    int e;
23634|      0|    int *tmp___29;
23635|      0|    char *tmp___30;
23636|      0|    int tmp___31;
23637|      0|    char *tmp___32;
23638|      0|    uintmax_t g;
23639|      0|    char *tmp___33;
23640|      0|    char *tmp___34;
23641|      0|    strtol_error tmp___35;
23642|      0|    size_t tmp___36;
23643|      0|    int tmp___37;
23644|      0|    char *tmp___38;
23645|      0|    uintmax_t u___1;
23646|      0|    char *tmp___39;
23647|      0|    char *tmp___40;
23648|      0|    strtol_error tmp___41;
23649|      0|    uintmax_t u___2;
23650|      0|    char *tmp___42;
23651|      0|    char *tmp___43;
23652|      0|    strtol_error tmp___44;
23653|      0|    size_t tmp___45;
23654|      0|    int tmp___46;
23655|      0|    uintmax_t u___3;
23656|      0|    char *tmp___47;
23657|      0|    char *tmp___48;
23658|      0|    strtol_error tmp___49;
23659|      0|    char *tmp___50;
23660|      0|    char const *tmp___51;
23661|      0|    uintmax_t u___4;
23662|      0|    char *tmp___52;
23663|      0|    char *tmp___53;
23664|      0|    strtol_error tmp___54;
23665|      0|    char *tmp___55;
23666|      0|    char *tmp___56;
23667|      0|    char *tmp___57;
23668|      0|    char *tmp___58;
23669|      0|    char *tmp___59;
23670|      0|    char *tmp___60;
23671|      0|    char *tmp___61;
23672|      0|    char *tmp___62;
23673|      0|    size_t volume_label_max_len;
23674|      0|    char *tmp___63;
23675|      0|    char *tmp___64;
23676|      0|    size_t tmp___65;
23677|      0|    char *tmp___66;
23678|      0|    char *tmp___67;
23679|      0|    char *tmp___68;
23680|      0|    char *tmp___69;
23681|      0|    char *tmp___70;
23682|      0|    char *tmp___71;
23683|      0|    int tmp___72;
23684|      0|    char *tmp___73;
23685|      0|    int tmp___74;
23686|      0|    char *tmp___75;
23687|      0|    char const *treated_as;
23688|      0|    char const *tmp___76;
23689|      0|    char *tmp___77;
23690|      0|    int tmp___78;
23691|      0|    unsigned long tmp___79;
23692|      0|    void *__cil_tmp110;
23693|      0|    void *__cil_tmp111;
23694|      0|    char *__cil_tmp112;
23695|      0|    char *__cil_tmp113;
23696|      0|    char *__cil_tmp114;
23697|      0|    char *__cil_tmp115;
23698|      0|    char *__cil_tmp116;
23699|      0|    char *__cil_tmp117;
23700|      0|    char *__cil_tmp118;
23701|      0|    char *__cil_tmp119;
23702|      0|    char *__cil_tmp120;
23703|      0|    char *__cil_tmp121;
23704|      0|    char *__cil_tmp122;
23705|      0|    char *__cil_tmp123;
23706|      0|    char *__cil_tmp124;
23707|      0|    char *__cil_tmp125;
23708|      0|    char *__cil_tmp126;
23709|      0|    char *__cil_tmp127;
23710|      0|    char *__cil_tmp128;
23711|      0|    char *__cil_tmp129;
23712|      0|    char *__cil_tmp130;
23713|      0|    char *__cil_tmp131;
23714|      0|    char *__cil_tmp132;
23715|      0|    char *__cil_tmp133;
23716|      0|    char *__cil_tmp134;
23717|      0|    char *__cil_tmp135;
23718|      0|    char *__cil_tmp136;
23719|      0|    char *__cil_tmp137;
23720|      0|    char *__cil_tmp138;
23721|      0|    char *__cil_tmp139;
23722|      0|    char *__cil_tmp140;
23723|      0|    char *__cil_tmp141;
23724|      0|    char *__cil_tmp142;
23725|      0|    char *__cil_tmp143;
23726|      0|    char *__cil_tmp144;
23727|      0|    char *__cil_tmp145;
23728|      0|    char *__cil_tmp146;
23729|      0|    char *__cil_tmp147;
23730|      0|    char *__cil_tmp148;
23731|      0|    char *__cil_tmp149;
23732|      0|    char *__cil_tmp150;
23733|      0|    char *__cil_tmp151;
23734|      0|    char *__cil_tmp152;
23735|      0|    char *__cil_tmp153;
23736|      0|    char *__cil_tmp154;
23737|      0|    char *__cil_tmp155;
23738|      0|    char *__cil_tmp156;
23739|      0|    char *__cil_tmp157;
23740|      0|    char *__cil_tmp158;
23741|      0|    char *__cil_tmp159;
23742|      0|    char *__cil_tmp160;
23743|      0|    char *__cil_tmp161;
23744|      0|    char *__cil_tmp162;
23745|      0|    char *__cil_tmp163;
23746|      0|    char *__cil_tmp164;
23747|      0|    char *__cil_tmp165;
23748|      0|    char *__cil_tmp166;
23749|      0|    char *__cil_tmp167;
23750|      0|    char *__cil_tmp168;
23751|      0|    char *__cil_tmp169;
23752|      0|    char *__cil_tmp170;
23753|      0|    char *__cil_tmp171;
23754|      0|    char *__cil_tmp172;
23755|       |
23756|      0|    {
23757|      0|        {
23758|      0|            textual_date_option = (char const *)0;
23759|      0|            version_control_string = (char const *)0;
23760|      0|            exclude_options = 1 << 28;
23761|      0|            o_option = (_Bool)0;
23762|      0|            pax_option = 0;
23763|      0|            subcommand_option = (enum subcommand)0;
23764|      0|            archive_format = (enum archive_format)0;
23765|      0|            blocking_factor = 20;
23766|      0|            record_size = (size_t)10240;
23767|      0|            excluded = new_exclude();
23768|      0|            newer_mtime_option.tv_sec = -1L << (sizeof(time_t) * 8UL - 1UL);
23769|      0|            newer_mtime_option.tv_nsec = (__syscall_slong_t)-1;
23770|      0|            recursion_option = 1 << 3;
23771|      0|            owner_option = (uid_t)-1;
23772|      0|            group_option = (gid_t)-1;
23773|      0|            tmp = getenv("SIMPLE_BACKUP_SUFFIX");
23774|      0|            backup_suffix_string = (char const *)tmp;
23775|      0|        }
23776|      0|        if (argc > 1) {
23777|      0|            if ((int)*(*(argv + 1) + 0) != 45) {
23778|      0|                {
23779|      0|                    buffer___2[0] = (char)'-';
23780|      0|                    buffer___2[2] = (char)'\000';
23781|      0|                    tmp___0 = strlen((char const *)*(argv + 1));
23782|      0|                    new_argc = (int)((size_t)(argc - 1) + tmp___0);
23783|      0|                    tmp___1 = xmalloc((unsigned long)(new_argc + 1) * sizeof(char *));
23784|      0|                    new_argv = (char **)tmp___1;
23785|      0|                    in = (char *const *)argv;
23786|      0|                    out = new_argv;
23787|      0|                    tmp___2 = out;
23788|      0|                    out++;
23789|      0|                    tmp___3 = in;
23790|      0|                    in++;
23791|      0|                    *tmp___2 = (char *)*tmp___3;
23792|      0|                    tmp___4 = in;
23793|      0|                    in++;
23794|      0|                    letter = (char const *)*tmp___4;
23795|      0|                }
23796|      0|                {
23797|      0|                    while (1) {
23798|      0|while_continue: /* CIL Label */
23799|      0|                        ;
23800|      0|                        if (!*letter) {
23801|      0|                            goto while_break;
23802|      0|                        }
23803|      0|                        {
23804|      0|                            buffer___2[1] = (char)*letter;
23805|      0|                            tmp___5 = out;
23806|      0|                            out++;
23807|      0|                            *tmp___5 = xstrdup((char const *)(buffer___2));
23808|      0|                            tmp___6 = strchr("-01234567ABC:F:GIK:L:MN:OPRST:UV:WX:Zb:cdf:g:"
23809|      0|                                             "hijklmoprstuvwxyz",
23810|      0|                                             (int)*letter);
23811|      0|                            cursor = (char const *)tmp___6;
23812|      0|                        }
23813|      0|                        if (cursor) {
23814|      0|                            if ((int const) * (cursor + 1) == 58) {
23815|      0|                                if ((unsigned long)in < (unsigned long)(argv + argc)) {
23816|      0|                                    tmp___7 = out;
23817|      0|                                    out++;
23818|      0|                                    tmp___8 = in;
23819|      0|                                    in++;
23820|      0|                                    *tmp___7 = (char *)*tmp___8;
23821|      0|                                }
23822|      0|                                else {
23823|      0|                                    {
23824|      0|                                        tmp___9 = gettext("Old option `%c\' requires an argument.");
23825|      0|                                        error(0, 0, (char const *)tmp___9, (int const) * letter);
23826|      0|                                        usage(2);
23827|      0|                                    }
23828|      0|                                }
23829|      0|                            }
23830|      0|                        }
23831|      0|                        letter++;
23832|      0|                    }
23833|      0|while_break: /* CIL Label */
23834|      0|                    ;
23835|      0|                }
23836|      0|                {
23837|      0|                    while (1) {
23838|      0|while_continue___0: /* CIL Label */
23839|      0|                        ;
23840|      0|                        if (!((unsigned long)in < (unsigned long)(argv + argc))) {
23841|      0|                            goto while_break___0;
23842|      0|                        }
23843|      0|                        tmp___10 = out;
23844|      0|                        out++;
23845|      0|                        tmp___11 = in;
23846|      0|                        in++;
23847|      0|                        *tmp___10 = (char *)*tmp___11;
23848|      0|                    }
23849|      0|while_break___0: /* CIL Label */
23850|      0|                    ;
23851|      0|                }
23852|      0|                *out = (char *)0;
23853|      0|                argc = new_argc;
23854|      0|                argv = new_argv;
23855|      0|            }
23856|      0|        }
23857|      0|        {
23858|      0|            input_files = 0;
23859|      0|            tmp___12 = getenv("TAR_OPTIONS");
23860|      0|            prepend_default_options((char const *)tmp___12, &argc, &argv);
23861|      0|        }
23862|      0|        {
23863|      0|            while (1) {
23864|      0|while_continue___1: /* CIL Label */
23865|      0|                ;
23866|      0|                {
23867|      0|                    optchar = getopt_long(
23868|      0|                                  argc, (char *const *)argv,
23869|      0|                                  "-01234567ABC:F:GIK:L:MN:OPRST:UV:WX:Zb:cdf:g:hijklmoprstuvwxyz",
23870|      0|                                  (struct option const *)(long_options), (int *)0);
23871|      0|                }
23872|      0|                if (!(optchar != -1)) {
23873|      0|                    goto while_break___1;
23874|      0|                }
23875|      0|                {
23876|      0|                    if (optchar == 63) {
23877|      0|                        goto case_63;
23878|      0|                    }
23879|      0|                    if (optchar == 0) {
23880|      0|                        goto case_0;
23881|      0|                    }
23882|      0|                    if (optchar == 1) {
23883|      0|                        goto case_1;
23884|      0|                    }
23885|      0|                    if (optchar == 65) {
23886|      0|                        goto case_65;
23887|      0|                    }
23888|      0|                    if (optchar == 98) {
23889|      0|                        goto case_98;
23890|      0|                    }
23891|      0|                    if (optchar == 66) {
23892|      0|                        goto case_66;
23893|      0|                    }
23894|      0|                    if (optchar == 99) {
23895|      0|                        goto case_99;
23896|      0|                    }
23897|      0|                    if (optchar == 67) {
23898|      0|                        goto case_67;
23899|      0|                    }
23900|      0|                    if (optchar == 100) {
23901|      0|                        goto case_100;
23902|      0|                    }
23903|      0|                    if (optchar == 102) {
23904|      0|                        goto case_102;
23905|      0|                    }
23906|      0|                    if (optchar == 70) {
23907|      0|                        goto case_70;
23908|      0|                    }
23909|      0|                    if (optchar == 103) {
23910|      0|                        goto case_103;
23911|      0|                    }
23912|      0|                    if (optchar == 71) {
23913|      0|                        goto case_71;
23914|      0|                    }
23915|      0|                    if (optchar == 104) {
23916|      0|                        goto case_104;
23917|      0|                    }
23918|      0|                    if (optchar == 105) {
23919|      0|                        goto case_105;
23920|      0|                    }
23921|      0|                    if (optchar == 73) {
23922|      0|                        goto case_73;
23923|      0|                    }
23924|      0|                    if (optchar == 106) {
23925|      0|                        goto case_106;
23926|      0|                    }
23927|      0|                    if (optchar == 107) {
23928|      0|                        goto case_107;
23929|      0|                    }
23930|      0|                    if (optchar == 75) {
23931|      0|                        goto case_75;
23932|      0|                    }
23933|      0|                    if (optchar == 108) {
23934|      0|                        goto case_108;
23935|      0|                    }
23936|      0|                    if (optchar == 76) {
23937|      0|                        goto case_76;
23938|      0|                    }
23939|      0|                    if (optchar == 109) {
23940|      0|                        goto case_109;
23941|      0|                    }
23942|      0|                    if (optchar == 77) {
23943|      0|                        goto case_77;
23944|      0|                    }
23945|      0|                    if (optchar == 78) {
23946|      0|                        goto case_78;
23947|      0|                    }
23948|      0|                    if (optchar == 142) {
23949|      0|                        goto case_142;
23950|      0|                    }
23951|      0|                    if (optchar == 111) {
23952|      0|                        goto case_111;
23953|      0|                    }
23954|      0|                    if (optchar == 79) {
23955|      0|                        goto case_79;
23956|      0|                    }
23957|      0|                    if (optchar == 112) {
23958|      0|                        goto case_112;
23959|      0|                    }
23960|      0|                    if (optchar == 80) {
23961|      0|                        goto case_80;
23962|      0|                    }
23963|      0|                    if (optchar == 114) {
23964|      0|                        goto case_114;
23965|      0|                    }
23966|      0|                    if (optchar == 82) {
23967|      0|                        goto case_82;
23968|      0|                    }
23969|      0|                    if (optchar == 115) {
23970|      0|                        goto case_115;
23971|      0|                    }
23972|      0|                    if (optchar == 83) {
23973|      0|                        goto case_83;
23974|      0|                    }
23975|      0|                    if (optchar == 116) {
23976|      0|                        goto case_116;
23977|      0|                    }
23978|      0|                    if (optchar == 84) {
23979|      0|                        goto case_84;
23980|      0|                    }
23981|      0|                    if (optchar == 117) {
23982|      0|                        goto case_117;
23983|      0|                    }
23984|      0|                    if (optchar == 85) {
23985|      0|                        goto case_85;
23986|      0|                    }
23987|      0|                    if (optchar == 167) {
23988|      0|                        goto case_167;
23989|      0|                    }
23990|      0|                    if (optchar == 118) {
23991|      0|                        goto case_118;
23992|      0|                    }
23993|      0|                    if (optchar == 86) {
23994|      0|                        goto case_86;
23995|      0|                    }
23996|      0|                    if (optchar == 119) {
23997|      0|                        goto case_119;
23998|      0|                    }
23999|      0|                    if (optchar == 87) {
24000|      0|                        goto case_87;
24001|      0|                    }
24002|      0|                    if (optchar == 120) {
24003|      0|                        goto case_120;
24004|      0|                    }
24005|      0|                    if (optchar == 88) {
24006|      0|                        goto case_88;
24007|      0|                    }
24008|      0|                    if (optchar == 121) {
24009|      0|                        goto case_121;
24010|      0|                    }
24011|      0|                    if (optchar == 122) {
24012|      0|                        goto case_122;
24013|      0|                    }
24014|      0|                    if (optchar == 90) {
24015|      0|                        goto case_90;
24016|      0|                    }
24017|      0|                    if (optchar == 128) {
24018|      0|                        goto case_128;
24019|      0|                    }
24020|      0|                    if (optchar == 129) {
24021|      0|                        goto case_129;
24022|      0|                    }
24023|      0|                    if (optchar == 131) {
24024|      0|                        goto case_131;
24025|      0|                    }
24026|      0|                    if (optchar == 130) {
24027|      0|                        goto case_130;
24028|      0|                    }
24029|      0|                    if (optchar == 132) {
24030|      0|                        goto case_132;
24031|      0|                    }
24032|      0|                    if (optchar == 133) {
24033|      0|                        goto case_133;
24034|      0|                    }
24035|      0|                    if (optchar == 134) {
24036|      0|                        goto case_134;
24037|      0|                    }
24038|      0|                    if (optchar == 135) {
24039|      0|                        goto case_135;
24040|      0|                    }
24041|      0|                    if (optchar == 139) {
24042|      0|                        goto case_139;
24043|      0|                    }
24044|      0|                    if (optchar == 137) {
24045|      0|                        goto case_137;
24046|      0|                    }
24047|      0|                    if (optchar == 138) {
24048|      0|                        goto case_138;
24049|      0|                    }
24050|      0|                    if (optchar == 140) {
24051|      0|                        goto case_140;
24052|      0|                    }
24053|      0|                    if (optchar == 136) {
24054|      0|                        goto case_136;
24055|      0|                    }
24056|      0|                    if (optchar == 141) {
24057|      0|                        goto case_141;
24058|      0|                    }
24059|      0|                    if (optchar == 143) {
24060|      0|                        goto case_143;
24061|      0|                    }
24062|      0|                    if (optchar == 144) {
24063|      0|                        goto case_144;
24064|      0|                    }
24065|      0|                    if (optchar == 145) {
24066|      0|                        goto case_145;
24067|      0|                    }
24068|      0|                    if (optchar == 146) {
24069|      0|                        goto case_146;
24070|      0|                    }
24071|      0|                    if (optchar == 147) {
24072|      0|                        goto case_147;
24073|      0|                    }
24074|      0|                    if (optchar == 148) {
24075|      0|                        goto case_148;
24076|      0|                    }
24077|      0|                    if (optchar == 149) {
24078|      0|                        goto case_149;
24079|      0|                    }
24080|      0|                    if (optchar == 150) {
24081|      0|                        goto case_150;
24082|      0|                    }
24083|      0|                    if (optchar == 151) {
24084|      0|                        goto case_151;
24085|      0|                    }
24086|      0|                    if (optchar == 152) {
24087|      0|                        goto case_152;
24088|      0|                    }
24089|      0|                    if (optchar == 153) {
24090|      0|                        goto case_153;
24091|      0|                    }
24092|      0|                    if (optchar == 154) {
24093|      0|                        goto case_154;
24094|      0|                    }
24095|      0|                    if (optchar == 155) {
24096|      0|                        goto case_155;
24097|      0|                    }
24098|      0|                    if (optchar == 156) {
24099|      0|                        goto case_156;
24100|      0|                    }
24101|      0|                    if (optchar == 157) {
24102|      0|                        goto case_157;
24103|      0|                    }
24104|      0|                    if (optchar == 158) {
24105|      0|                        goto case_158;
24106|      0|                    }
24107|      0|                    if (optchar == 159) {
24108|      0|                        goto case_159;
24109|      0|                    }
24110|      0|                    if (optchar == 160) {
24111|      0|                        goto case_160;
24112|      0|                    }
24113|      0|                    if (optchar == 161) {
24114|      0|                        goto case_161;
24115|      0|                    }
24116|      0|                    if (optchar == 163) {
24117|      0|                        goto case_163;
24118|      0|                    }
24119|      0|                    if (optchar == 164) {
24120|      0|                        goto case_164;
24121|      0|                    }
24122|      0|                    if (optchar == 165) {
24123|      0|                        goto case_165;
24124|      0|                    }
24125|      0|                    if (optchar == 166) {
24126|      0|                        goto case_166;
24127|      0|                    }
24128|      0|                    if (optchar == 168) {
24129|      0|                        goto case_168;
24130|      0|                    }
24131|      0|                    if (optchar == 169) {
24132|      0|                        goto case_169;
24133|      0|                    }
24134|      0|                    if (optchar == 170) {
24135|      0|                        goto case_170;
24136|      0|                    }
24137|      0|                    if (optchar == 48) {
24138|      0|                        goto case_48;
24139|      0|                    }
24140|      0|                    if (optchar == 49) {
24141|      0|                        goto case_48;
24142|      0|                    }
24143|      0|                    if (optchar == 50) {
24144|      0|                        goto case_48;
24145|      0|                    }
24146|      0|                    if (optchar == 51) {
24147|      0|                        goto case_48;
24148|      0|                    }
24149|      0|                    if (optchar == 52) {
24150|      0|                        goto case_48;
24151|      0|                    }
24152|      0|                    if (optchar == 53) {
24153|      0|                        goto case_48;
24154|      0|                    }
24155|      0|                    if (optchar == 54) {
24156|      0|                        goto case_48;
24157|      0|                    }
24158|      0|                    if (optchar == 55) {
24159|      0|                        goto case_48;
24160|      0|                    }
24161|      0|                    goto switch_break;
24162|      0|case_63 : { /* CIL Label */
24163|      0|                        usage(2);
24164|      0|                    }
24165|      0|case_0: /* CIL Label */
24166|      0|                    goto switch_break;
24167|      0|case_1 : { /* CIL Label */
24168|      0|                        name_add((char const *)optarg);
24169|      0|                        input_files++;
24170|      0|                    }
24171|      0|                    goto switch_break;
24172|      0|case_65 : { /* CIL Label */
24173|      0|                        set_subcommand_option((enum subcommand)2);
24174|      0|                    }
24175|      0|                    goto switch_break;
24176|      0|case_98 : { /* CIL Label */
24177|      0|                        tmp___15 = xstrtoumax((char const *)optarg, (char **)0, 10, &u, "");
24178|      0|                    }
24179|      0|                    if ((unsigned int)tmp___15 == 0U) {
24180|      0|                        blocking_factor = (int)u;
24181|      0|                        if (u == (uintmax_t)blocking_factor) {
24182|      0|                            if (0 < blocking_factor) {
24183|      0|                                record_size = u * 512UL;
24184|      0|                                if (!(u == record_size / 512UL)) {
24185|      0|                                    {
24186|      0|                                        tmp___13 = gettext("Invalid blocking factor");
24187|      0|                                        tmp___14 = quotearg_colon((char const *)optarg);
24188|      0|                                        error(0, 0, "%s: %s", tmp___14, tmp___13);
24189|      0|                                        usage(2);
24190|      0|                                    }
24191|      0|                                }
24192|      0|                            }
24193|      0|                            else {
24194|      0|                                {
24195|      0|                                    tmp___13 = gettext("Invalid blocking factor");
24196|      0|                                    tmp___14 = quotearg_colon((char const *)optarg);
24197|      0|                                    error(0, 0, "%s: %s", tmp___14, tmp___13);
24198|      0|                                    usage(2);
24199|      0|                                }
24200|      0|                            }
24201|      0|                        }
24202|      0|                        else {
24203|      0|                            {
24204|      0|                                tmp___13 = gettext("Invalid blocking factor");
24205|      0|                                tmp___14 = quotearg_colon((char const *)optarg);
24206|      0|                                error(0, 0, "%s: %s", tmp___14, tmp___13);
24207|      0|                                usage(2);
24208|      0|                            }
24209|      0|                        }
24210|      0|                    }
24211|      0|                    else {
24212|      0|                        {
24213|      0|                            tmp___13 = gettext("Invalid blocking factor");
24214|      0|                            tmp___14 = quotearg_colon((char const *)optarg);
24215|      0|                            error(0, 0, "%s: %s", tmp___14, tmp___13);
24216|      0|                            usage(2);
24217|      0|                        }
24218|      0|                    }
24219|      0|                    goto switch_break;
24220|      0|case_66: /* CIL Label */
24221|      0|                    read_full_records_option = (_Bool)1;
24222|      0|                    goto switch_break;
24223|      0|case_99 : { /* CIL Label */
24224|      0|                        set_subcommand_option((enum subcommand)3);
24225|      0|                    }
24226|      0|                    goto switch_break;
24227|      0|case_67 : { /* CIL Label */
24228|      0|                        name_add("-C");
24229|      0|                        name_add((char const *)optarg);
24230|      0|                    }
24231|      0|                    goto switch_break;
24232|      0|case_100 : { /* CIL Label */
24233|      0|                        set_subcommand_option((enum subcommand)5);
24234|      0|                    }
24235|      0|                    goto switch_break;
24236|      0|case_102: /* CIL Label */
24237|      0|                    if (archive_names == allocated_archive_names) {
24238|      0|                        {
24239|      0|                            allocated_archive_names *= 2;
24240|      0|                            tmp___16 = xrealloc((void *)archive_name_array,
24241|      0|                                                sizeof(char const *) *
24242|      0|                                                (unsigned long)allocated_archive_names);
24243|      0|                            archive_name_array = (char const **)tmp___16;
24244|      0|                        }
24245|      0|                    }
24246|      0|                    tmp___17 = archive_names;
24247|      0|                    archive_names++;
24248|      0|                    *(archive_name_array + tmp___17) = (char const *)optarg;
24249|      0|                    goto switch_break;
24250|      0|case_70: /* CIL Label */
24251|      0|                    info_script_option = (char const *)optarg;
24252|      0|                    multi_volume_option = (_Bool)1;
24253|      0|                    goto switch_break;
24254|      0|case_103: /* CIL Label */
24255|      0|                    listed_incremental_option = (char const *)optarg;
24256|      0|                    after_date_option = 1;
24257|      0|case_71: /* CIL Label */
24258|      0|                    incremental_option = (_Bool)1;
24259|      0|                    goto switch_break;
24260|      0|case_104: /* CIL Label */
24261|      0|                    dereference_option = (_Bool)1;
24262|      0|                    goto switch_break;
24263|      0|case_105: /* CIL Label */
24264|      0|                    ignore_zeros_option = (_Bool)1;
24265|      0|                    goto switch_break;
24266|      0|case_73 : { /* CIL Label */
24267|      0|                        tmp___18 = gettext("Warning: the -I option is not supported; perhaps "
24268|      0|                                           "you meant -j or -T?");
24269|      0|                        error(0, 0, (char const *)tmp___18);
24270|      0|                        usage(2);
24271|      0|                    }
24272|      0|                    goto switch_break;
24273|      0|case_106 : { /* CIL Label */
24274|      0|                        set_use_compress_program_option("bzip2");
24275|      0|                    }
24276|      0|                    goto switch_break;
24277|      0|case_107: /* CIL Label */
24278|      0|                    old_files_option = (enum old_files)4;
24279|      0|                    goto switch_break;
24280|      0|case_75 : { /* CIL Label */
24281|      0|                        starting_file_option = (_Bool)1;
24282|      0|                        addname((char const *)optarg, 0);
24283|      0|                    }
24284|      0|                    goto switch_break;
24285|      0|case_108: /* CIL Label */
24286|      0|                    one_file_system_option = (_Bool)1;
24287|      0|                    goto switch_break;
24288|      0|case_76 : { /* CIL Label */
24289|      0|                        tmp___21 =
24290|      0|                            xstrtoumax((char const *)optarg, (char **)0, 10, &u___0, "");
24291|      0|                    }
24292|      0|                    if ((unsigned int)tmp___21 != 0U) {
24293|      0|                        {
24294|      0|                            tmp___19 = gettext("Invalid tape length");
24295|      0|                            tmp___20 = quotearg_colon((char const *)optarg);
24296|      0|                            error(0, 0, "%s: %s", tmp___20, tmp___19);
24297|      0|                            usage(2);
24298|      0|                        }
24299|      0|                    }
24300|      0|                    tape_length_option = (tarlong)1024 * (tarlong)u___0;
24301|      0|                    multi_volume_option = (_Bool)1;
24302|      0|                    goto switch_break;
24303|      0|case_109: /* CIL Label */
24304|      0|                    touch_option = (_Bool)1;
24305|      0|                    goto switch_break;
24306|      0|case_77: /* CIL Label */
24307|      0|                    multi_volume_option = (_Bool)1;
24308|      0|                    goto switch_break;
24309|      0|case_78: /* CIL Label */
24310|      0|                    after_date_option = 1;
24311|      0|case_142: /* CIL Label */
24312|      0|                    if (0L <= newer_mtime_option.tv_nsec) {
24313|      0|                        {
24314|      0|                            tmp___22 = gettext("More than one threshold date");
24315|      0|                            error(0, 0, (char const *)tmp___22);
24316|      0|                            usage(2);
24317|      0|                        }
24318|      0|                    }
24319|      0|                    if ((int)*optarg == 47) {
24320|      0|                        goto _L___3;
24321|      0|                    }
24322|      0|                    else {
24323|      0|                        if ((int)*optarg == 46) {
24324|      0|_L___3 : { /* CIL Label */
24325|      0|                                tmp___24 =
24326|      0|                                    deref_stat(dereference_option, (char const *)optarg, &st);
24327|      0|                            }
24328|      0|                            if (tmp___24 != 0) {
24329|      0|                                {
24330|      0|                                    stat_error((char const *)optarg);
24331|      0|                                    tmp___23 = gettext("Date file not found");
24332|      0|                                    error(0, 0, (char const *)tmp___23);
24333|      0|                                    usage(2);
24334|      0|                                }
24335|      0|                            }
24336|      0|                            newer_mtime_option.tv_sec = st.st_mtim.tv_sec;
24337|      0|                            newer_mtime_option.tv_nsec = st.st_mtim.tv_nsec;
24338|      0|                        }
24339|      0|                        else {
24340|      0|                            {
24341|      0|                                tmp___28 = get_date(&newer_mtime_option, (char const *)optarg,
24342|      0|                                                    (struct timespec const *)((void *)0));
24343|      0|                            }
24344|      0|                            if (tmp___28) {
24345|      0|                                textual_date_option = (char const *)optarg;
24346|      0|                            }
24347|      0|                            else {
24348|      0|                                {
24349|      0|                                    tmp___25 = quote((char const *)optarg);
24350|      0|                                    tmp___26 = tartime(newer_mtime_option.tv_sec);
24351|      0|                                    tmp___27 =
24352|      0|                                        gettext("Substituting %s for unknown date format %s");
24353|      0|                                    error(0, 0, (char const *)tmp___27, tmp___26, tmp___25);
24354|      0|                                    newer_mtime_option.tv_nsec = (__syscall_slong_t)0;
24355|      0|                                }
24356|      0|                            }
24357|      0|                        }
24358|      0|                    }
24359|      0|                    goto switch_break;
24360|      0|case_111: /* CIL Label */
24361|      0|                    o_option = (_Bool)1;
24362|      0|                    goto switch_break;
24363|      0|case_79: /* CIL Label */
24364|      0|                    to_stdout_option = (_Bool)1;
24365|      0|                    goto switch_break;
24366|      0|case_112: /* CIL Label */
24367|      0|                    same_permissions_option = 1;
24368|      0|                    goto switch_break;
24369|      0|case_80: /* CIL Label */
24370|      0|                    absolute_names_option = (_Bool)1;
24371|      0|                    goto switch_break;
24372|      0|case_114 : { /* CIL Label */
24373|      0|                        set_subcommand_option((enum subcommand)1);
24374|      0|                    }
24375|      0|                    goto switch_break;
24376|      0|case_82: /* CIL Label */
24377|      0|                    block_number_option = (_Bool)1;
24378|      0|                    goto switch_break;
24379|      0|case_115: /* CIL Label */
24380|      0|                    same_order_option = (_Bool)1;
24381|      0|                    goto switch_break;
24382|      0|case_83: /* CIL Label */
24383|      0|                    sparse_option = (_Bool)1;
24384|      0|                    goto switch_break;
24385|      0|case_116 : { /* CIL Label */
24386|      0|                        set_subcommand_option((enum subcommand)7);
24387|      0|                        verbose_option++;
24388|      0|                    }
24389|      0|                    goto switch_break;
24390|      0|case_84: /* CIL Label */
24391|      0|                    files_from_option = (char const *)optarg;
24392|      0|                    goto switch_break;
24393|      0|case_117 : { /* CIL Label */
24394|      0|                        set_subcommand_option((enum subcommand)8);
24395|      0|                    }
24396|      0|                    goto switch_break;
24397|      0|case_85: /* CIL Label */
24398|      0|                    old_files_option = (enum old_files)3;
24399|      0|                    goto switch_break;
24400|      0|case_167: /* CIL Label */
24401|      0|                    utc_option = (_Bool)1;
24402|      0|                    goto switch_break;
24403|      0|case_118: /* CIL Label */
24404|      0|                    verbose_option++;
24405|      0|                    goto switch_break;
24406|      0|case_86: /* CIL Label */
24407|      0|                    volume_label_option = (char const *)optarg;
24408|      0|                    goto switch_break;
24409|      0|case_119: /* CIL Label */
24410|      0|                    interactive_option = (_Bool)1;
24411|      0|                    goto switch_break;
24412|      0|case_87: /* CIL Label */
24413|      0|                    verify_option = (_Bool)1;
24414|      0|                    goto switch_break;
24415|      0|case_120 : { /* CIL Label */
24416|      0|                        set_subcommand_option((enum subcommand)6);
24417|      0|                    }
24418|      0|                    goto switch_break;
24419|      0|case_88 : { /* CIL Label */
24420|      0|                        tmp___31 =
24421|      0|                            add_exclude_file(&add_exclude, excluded, (char const *)optarg,
24422|      0|                                             exclude_options | recursion_option, (char)'\n');
24423|      0|                    }
24424|      0|                    if (tmp___31 != 0) {
24425|      0|                        {
24426|      0|                            tmp___29 = __errno_location();
24427|      0|                            e = *tmp___29;
24428|      0|                            tmp___30 = quotearg_colon((char const *)optarg);
24429|      0|                            error(0, e, "%s", tmp___30);
24430|      0|                            fatal_exit();
24431|      0|                        }
24432|      0|                    }
24433|      0|                    goto switch_break;
24434|      0|case_121 : { /* CIL Label */
24435|      0|                        tmp___32 = gettext(
24436|      0|                                       "Warning: the -y option is not supported; perhaps you meant -j?");
24437|      0|                        error(0, 0, (char const *)tmp___32);
24438|      0|                        usage(2);
24439|      0|                    }
24440|      0|                    goto switch_break;
24441|      0|case_122 : { /* CIL Label */
24442|      0|                        set_use_compress_program_option("gzip");
24443|      0|                    }
24444|      0|                    goto switch_break;
24445|      0|case_90 : { /* CIL Label */
24446|      0|                        set_use_compress_program_option("compress");
24447|      0|                    }
24448|      0|                    goto switch_break;
24449|      0|case_128: /* CIL Label */
24450|      0|                    exclude_options |= 1 << 30;
24451|      0|                    goto switch_break;
24452|      0|case_129: /* CIL Label */
24453|      0|                    atime_preserve_option = (_Bool)1;
24454|      0|                    goto switch_break;
24455|      0|case_131: /* CIL Label */
24456|      0|                    checkpoint_option = (_Bool)1;
24457|      0|                    goto switch_break;
24458|      0|case_130: /* CIL Label */
24459|      0|                    backup_option = (_Bool)1;
24460|      0|                    if (optarg) {
24461|      0|                        version_control_string = (char const *)optarg;
24462|      0|                    }
24463|      0|                    goto switch_break;
24464|      0|case_132 : { /* CIL Label */
24465|      0|                        set_subcommand_option((enum subcommand)4);
24466|      0|                    }
24467|      0|                    goto switch_break;
24468|      0|case_133 : { /* CIL Label */
24469|      0|                        add_exclude(excluded, (char const *)optarg,
24470|      0|                                    exclude_options | recursion_option);
24471|      0|                    }
24472|      0|                    goto switch_break;
24473|      0|case_134: /* CIL Label */
24474|      0|                    force_local_option = (_Bool)1;
24475|      0|                    goto switch_break;
24476|      0|case_135 : { /* CIL Label */
24477|      0|                        set_archive_format((char const *)optarg);
24478|      0|                    }
24479|      0|                    goto switch_break;
24480|      0|case_139: /* CIL Label */
24481|      0|                    index_file_name = (char const *)optarg;
24482|      0|                    goto switch_break;
24483|      0|case_137: /* CIL Label */
24484|      0|                    exclude_options |= 1 << 4;
24485|      0|                    goto switch_break;
24486|      0|case_138: /* CIL Label */
24487|      0|                    ignore_failed_read_option = (_Bool)1;
24488|      0|                    goto switch_break;
24489|      0|case_140: /* CIL Label */
24490|      0|                    old_files_option = (enum old_files)5;
24491|      0|                    goto switch_break;
24492|      0|case_136 : { /* CIL Label */
24493|      0|                        tmp___36 = strlen((char const *)optarg);
24494|      0|                    }
24495|      0|                    if (tmp___36 < 32UL) {
24496|      0|                        {
24497|      0|                            tmp___37 = gname_to_gid((char const *)optarg, &group_option);
24498|      0|                        }
24499|      0|                        if (!tmp___37) {
24500|      0|                            goto _L;
24501|      0|                        }
24502|      0|                    }
24503|      0|                    else {
24504|      0|_L : {
24505|      0|                            tmp___35 = xstrtoumax((char const *)optarg, (char **)0, 10, &g, "");
24506|      0|                        }
24507|      0|                        if ((unsigned int)tmp___35 == 0U) {
24508|      0|                            if (g == (uintmax_t)((gid_t)g)) {
24509|      0|                                group_option = (gid_t)g;
24510|      0|                            }
24511|      0|                            else {
24512|      0|                                {
24513|      0|                                    tmp___33 = gettext("%s: Invalid group");
24514|      0|                                    tmp___34 = quotearg_colon((char const *)optarg);
24515|      0|                                    error(0, 0, "%s: %s", tmp___34, tmp___33);
24516|      0|                                    fatal_exit();
24517|      0|                                }
24518|      0|                            }
24519|      0|                        }
24520|      0|                        else {
24521|      0|                            {
24522|      0|                                tmp___33 = gettext("%s: Invalid group");
24523|      0|                                tmp___34 = quotearg_colon((char const *)optarg);
24524|      0|                                error(0, 0, "%s: %s", tmp___34, tmp___33);
24525|      0|                                fatal_exit();
24526|      0|                            }
24527|      0|                        }
24528|      0|                    }
24529|      0|                    goto switch_break;
24530|      0|case_141 : { /* CIL Label */
24531|      0|                        mode_option = mode_compile((char const *)optarg, 7U);
24532|      0|                    }
24533|      0|                    if ((unsigned long)mode_option ==
24534|      0|                            (unsigned long)((struct mode_change *)0)) {
24535|      0|                        {
24536|      0|                            tmp___38 = gettext("Invalid mode given on option");
24537|      0|                            error(0, 0, (char const *)tmp___38);
24538|      0|                            fatal_exit();
24539|      0|                        }
24540|      0|                    }
24541|      0|                    if ((unsigned long)mode_option ==
24542|      0|                            (unsigned long)((struct mode_change *)1)) {
24543|      0|                        {
24544|      0|                            xalloc_die();
24545|      0|                        }
24546|      0|                    }
24547|      0|                    goto switch_break;
24548|      0|case_143: /* CIL Label */
24549|      0|                    exclude_options &= ~(1 << 30);
24550|      0|                    goto switch_break;
24551|      0|case_144: /* CIL Label */
24552|      0|                    exclude_options &= ~(1 << 4);
24553|      0|                    goto switch_break;
24554|      0|case_145: /* CIL Label */
24555|      0|                    old_files_option = (enum old_files)1;
24556|      0|                    goto switch_break;
24557|      0|case_146: /* CIL Label */
24558|      0|                    exclude_options &= ~(1 << 28);
24559|      0|                    goto switch_break;
24560|      0|case_147: /* CIL Label */
24561|      0|                    exclude_options |= 1;
24562|      0|                    goto switch_break;
24563|      0|case_148: /* CIL Label */
24564|      0|                    filename_terminator = (char)'\000';
24565|      0|                    goto switch_break;
24566|      0|case_149: /* CIL Label */
24567|      0|                    numeric_owner_option = (_Bool)1;
24568|      0|                    goto switch_break;
24569|      0|case_150: /* CIL Label */
24570|      0|                    if (!optarg) {
24571|      0|                        occurrence_option = (uintmax_t)1;
24572|      0|                    }
24573|      0|                    else {
24574|      0|                        {
24575|      0|                            tmp___41 =
24576|      0|                                xstrtoumax((char const *)optarg, (char **)0, 10, &u___1, "");
24577|      0|                        }
24578|      0|                        if ((unsigned int)tmp___41 == 0U) {
24579|      0|                            occurrence_option = u___1;
24580|      0|                        }
24581|      0|                        else {
24582|      0|                            {
24583|      0|                                tmp___39 = gettext("Invalid number");
24584|      0|                                tmp___40 = quotearg_colon((char const *)optarg);
24585|      0|                                error(0, 0, "%s: %s", tmp___40, tmp___39);
24586|      0|                                fatal_exit();
24587|      0|                            }
24588|      0|                        }
24589|      0|                    }
24590|      0|                    goto switch_break;
24591|      0|case_151: /* CIL Label */
24592|      0|                    old_files_option = (enum old_files)2;
24593|      0|                    goto switch_break;
24594|      0|case_152 : { /* CIL Label */
24595|      0|                        tmp___45 = strlen((char const *)optarg);
24596|      0|                    }
24597|      0|                    if (tmp___45 < 32UL) {
24598|      0|                        {
24599|      0|                            tmp___46 = uname_to_uid((char const *)optarg, &owner_option);
24600|      0|                        }
24601|      0|                        if (!tmp___46) {
24602|      0|                            goto _L___0;
24603|      0|                        }
24604|      0|                    }
24605|      0|                    else {
24606|      0|_L___0 : {
24607|      0|                            tmp___44 =
24608|      0|                                xstrtoumax((char const *)optarg, (char **)0, 10, &u___2, "");
24609|      0|                        }
24610|      0|                        if ((unsigned int)tmp___44 == 0U) {
24611|      0|                            if (u___2 == (uintmax_t)((uid_t)u___2)) {
24612|      0|                                owner_option = (uid_t)u___2;
24613|      0|                            }
24614|      0|                            else {
24615|      0|                                {
24616|      0|                                    tmp___42 = gettext("Invalid owner");
24617|      0|                                    tmp___43 = quotearg_colon((char const *)optarg);
24618|      0|                                    error(0, 0, "%s: %s", tmp___43, tmp___42);
24619|      0|                                    fatal_exit();
24620|      0|                                }
24621|      0|                            }
24622|      0|                        }
24623|      0|                        else {
24624|      0|                            {
24625|      0|                                tmp___42 = gettext("Invalid owner");
24626|      0|                                tmp___43 = quotearg_colon((char const *)optarg);
24627|      0|                                error(0, 0, "%s: %s", tmp___43, tmp___42);
24628|      0|                                fatal_exit();
24629|      0|                            }
24630|      0|                        }
24631|      0|                    }
24632|      0|                    goto switch_break;
24633|      0|case_153 : { /* CIL Label */
24634|      0|                        pax_option++;
24635|      0|                        xheader_set_option(optarg);
24636|      0|                    }
24637|      0|                    goto switch_break;
24638|      0|case_154 : { /* CIL Label */
24639|      0|                        set_archive_format("posix");
24640|      0|                    }
24641|      0|                    goto switch_break;
24642|      0|case_155: /* CIL Label */
24643|      0|                    same_permissions_option = 1;
24644|      0|                    same_order_option = (_Bool)1;
24645|      0|                    goto switch_break;
24646|      0|case_156 : { /* CIL Label */
24647|      0|                        tmp___49 =
24648|      0|                            xstrtoumax((char const *)optarg, (char **)0, 10, &u___3, "");
24649|      0|                    }
24650|      0|                    if ((unsigned int)tmp___49 == 0U) {
24651|      0|                        if (!(u___3 == u___3)) {
24652|      0|                            {
24653|      0|                                tmp___47 = gettext("Invalid record size");
24654|      0|                                tmp___48 = quotearg_colon((char const *)optarg);
24655|      0|                                error(0, 0, "%s: %s", tmp___48, tmp___47);
24656|      0|                                usage(2);
24657|      0|                            }
24658|      0|                        }
24659|      0|                    }
24660|      0|                    else {
24661|      0|                        {
24662|      0|                            tmp___47 = gettext("Invalid record size");
24663|      0|                            tmp___48 = quotearg_colon((char const *)optarg);
24664|      0|                            error(0, 0, "%s: %s", tmp___48, tmp___47);
24665|      0|                            usage(2);
24666|      0|                        }
24667|      0|                    }
24668|      0|                    record_size = u___3;
24669|      0|                    if (record_size % 512UL != 0UL) {
24670|      0|                        {
24671|      0|                            tmp___50 = gettext("Record size must be a multiple of %d.");
24672|      0|                            error(0, 0, (char const *)tmp___50, 512);
24673|      0|                            usage(2);
24674|      0|                        }
24675|      0|                    }
24676|      0|                    blocking_factor = (int)(record_size / 512UL);
24677|      0|                    goto switch_break;
24678|      0|case_157: /* CIL Label */
24679|      0|                    recursive_unlink_option = (_Bool)1;
24680|      0|                    goto switch_break;
24681|      0|case_158: /* CIL Label */
24682|      0|                    remove_files_option = (_Bool)1;
24683|      0|                    goto switch_break;
24684|      0|case_159: /* CIL Label */
24685|      0|                    rmt_command_option = (char const *)optarg;
24686|      0|                    goto switch_break;
24687|      0|case_160: /* CIL Label */
24688|      0|                    rsh_command_option = (char const *)optarg;
24689|      0|                    goto switch_break;
24690|      0|case_161 : { /* CIL Label */
24691|      0|                        tmp___51 = archive_format_string((enum archive_format)6);
24692|      0|                        printf((char const * /* __restrict  */) "--format=%s -f%s -b%d\n",
24693|      0|                               tmp___51, "-", 20);
24694|      0|                        exit(0);
24695|      0|                    }
24696|      0|case_163 : { /* CIL Label */
24697|      0|                        tmp___54 =
24698|      0|                            xstrtoumax((char const *)optarg, (char **)0, 10, &u___4, "");
24699|      0|                    }
24700|      0|                    if ((unsigned int)tmp___54 == 0U) {
24701|      0|                        if (!(u___4 == u___4)) {
24702|      0|                            {
24703|      0|                                tmp___52 = gettext("Invalid number of elements");
24704|      0|                                tmp___53 = quotearg_colon((char const *)optarg);
24705|      0|                                error(0, 0, "%s: %s", tmp___53, tmp___52);
24706|      0|                                usage(2);
24707|      0|                            }
24708|      0|                        }
24709|      0|                    }
24710|      0|                    else {
24711|      0|                        {
24712|      0|                            tmp___52 = gettext("Invalid number of elements");
24713|      0|                            tmp___53 = quotearg_colon((char const *)optarg);
24714|      0|                            error(0, 0, "%s: %s", tmp___53, tmp___52);
24715|      0|                            usage(2);
24716|      0|                        }
24717|      0|                    }
24718|      0|                    strip_path_elements = u___4;
24719|      0|                    goto switch_break;
24720|      0|case_164: /* CIL Label */
24721|      0|                    backup_option = (_Bool)1;
24722|      0|                    backup_suffix_string = (char const *)optarg;
24723|      0|                    goto switch_break;
24724|      0|case_165: /* CIL Label */
24725|      0|                    totals_option = (_Bool)1;
24726|      0|                    goto switch_break;
24727|      0|case_166 : { /* CIL Label */
24728|      0|                        set_use_compress_program_option((char const *)optarg);
24729|      0|                    }
24730|      0|                    goto switch_break;
24731|      0|case_168: /* CIL Label */
24732|      0|                    volno_file_option = (char const *)optarg;
24733|      0|                    goto switch_break;
24734|      0|case_169: /* CIL Label */
24735|      0|                    exclude_options |= 1 << 28;
24736|      0|                    goto switch_break;
24737|      0|case_170: /* CIL Label */
24738|      0|                    exclude_options &= -2;
24739|      0|                    goto switch_break;
24740|      0|case_48:  /* CIL Label */
24741|      0|case_49:  /* CIL Label */
24742|      0|case_50:  /* CIL Label */
24743|      0|case_51:  /* CIL Label */
24744|      0|case_52:  /* CIL Label */
24745|      0|case_53:  /* CIL Label */
24746|      0|case_54:  /* CIL Label */
24747|      0|case_55 : { /* CIL Label */
24748|      0|                        tmp___55 =
24749|      0|                            gettext("Options `-[0-7][lmh]\' not supported by *this* tar");
24750|      0|                        error(0, 0, (char const *)tmp___55);
24751|      0|                        usage(2);
24752|      0|                    }
24753|      0|switch_break: /* CIL Label */
24754|      0|                    ;
24755|      0|                }
24756|      0|            }
24757|      0|while_break___1: /* CIL Label */
24758|      0|            ;
24759|      0|        }
24760|      0|        if (o_option) {
24761|      0|            if ((unsigned int)subcommand_option == 3U) {
24762|      0|                {
24763|      0|                    set_archive_format("v7");
24764|      0|                }
24765|      0|            }
24766|      0|            else {
24767|      0|                same_owner_option = 1;
24768|      0|            }
24769|      0|        }
24770|      0|        {
24771|      0|            while (1) {
24772|      0|while_continue___2: /* CIL Label */
24773|      0|                ;
24774|      0|                if (!(optind < argc)) {
24775|      0|                    goto while_break___2;
24776|      0|                }
24777|      0|                {
24778|      0|                    name_add((char const *)*(argv + optind));
24779|      0|                    input_files++;
24780|      0|                    optind++;
24781|      0|                }
24782|      0|            }
24783|      0|while_break___2: /* CIL Label */
24784|      0|            ;
24785|      0|        }
24786|      0|        if (show_version) {
24787|      0|            {
24788|      0|                printf((char const * /* __restrict  */) "tar (%s) %s\n%s\n", "GNU tar",
24789|      0|                       "1.14", "Copyright (C) 2004 Free Software Foundation, Inc.");
24790|      0|                tmp___56 = gettext(
24791|      0|                               "This program comes with NO WARRANTY, to the extent permitted by "
24792|      0|                               "law.\nYou may redistribute it under the terms of the GNU General "
24793|      0|                               "Public License;\nsee the file named COPYING for details.");
24794|      0|                puts((char const *)tmp___56);
24795|      0|                tmp___57 = gettext("Written by John Gilmore and Jay Fenlason.");
24796|      0|                puts((char const *)tmp___57);
24797|      0|                exit(0);
24798|      0|            }
24799|      0|        }
24800|      0|        if (show_help) {
24801|      0|            {
24802|      0|                usage(0);
24803|      0|            }
24804|      0|        }
24805|      0|        if ((unsigned int)archive_format == 0U) {
24806|      0|            if (pax_option) {
24807|      0|                archive_format = (enum archive_format)4;
24808|      0|            }
24809|      0|            else {
24810|      0|                archive_format = (enum archive_format)6;
24811|      0|            }
24812|      0|        }
24813|      0|        if (volume_label_option) {
24814|      0|            if ((unsigned int)subcommand_option == 3U) {
24815|      0|                {
24816|      0|                    assert_format((unsigned int)((1 << 2) | (1 << 6)));
24817|      0|                }
24818|      0|            }
24819|      0|        }
24820|      0|        if (incremental_option) {
24821|      0|            {
24822|      0|                assert_format((unsigned int)((1 << 2) | (1 << 6)));
24823|      0|            }
24824|      0|        }
24825|      0|        else {
24826|      0|            if (multi_volume_option) {
24827|      0|                {
24828|      0|                    assert_format((unsigned int)((1 << 2) | (1 << 6)));
24829|      0|                }
24830|      0|            }
24831|      0|        }
24832|      0|        if (sparse_option) {
24833|      0|            {
24834|      0|                assert_format((unsigned int)(((1 << 2) | (1 << 6)) | (1 << 4)));
24835|      0|            }
24836|      0|        }
24837|      0|        if (occurrence_option) {
24838|      0|            if (!input_files) {
24839|      0|                if (!files_from_option) {
24840|      0|                    {
24841|      0|                        tmp___58 =
24842|      0|                            gettext("--occurrence is meaningless without a file list");
24843|      0|                        error(0, 0, (char const *)tmp___58);
24844|      0|                        usage(2);
24845|      0|                    }
24846|      0|                }
24847|      0|            }
24848|      0|            if ((unsigned int)subcommand_option != 4U) {
24849|      0|                if ((unsigned int)subcommand_option != 5U) {
24850|      0|                    if ((unsigned int)subcommand_option != 6U) {
24851|      0|                        if ((unsigned int)subcommand_option != 7U) {
24852|      0|                            {
24853|      0|                                tmp___59 = gettext("--occurrence cannot be used in the "
24854|      0|                                                   "requested operation mode");
24855|      0|                                error(0, 0, (char const *)tmp___59);
24856|      0|                                usage(2);
24857|      0|                            }
24858|      0|                        }
24859|      0|                    }
24860|      0|                }
24861|      0|            }
24862|      0|        }
24863|      0|        if (archive_names == 0) {
24864|      0|            {
24865|      0|                archive_names = 1;
24866|      0|                tmp___60 = getenv("TAPE");
24867|      0|                *(archive_name_array + 0) = (char const *)tmp___60;
24868|      0|            }
24869|      0|            if (!*(archive_name_array + 0)) {
24870|      0|                *(archive_name_array + 0) = "-";
24871|      0|            }
24872|      0|        }
24873|      0|        if (archive_names > 1) {
24874|      0|            if (!multi_volume_option) {
24875|      0|                {
24876|      0|                    tmp___61 = gettext("Multiple archive files require `-M\' option");
24877|      0|                    error(0, 0, (char const *)tmp___61);
24878|      0|                    usage(2);
24879|      0|                }
24880|      0|            }
24881|      0|        }
24882|      0|        if (listed_incremental_option) {
24883|      0|            if (0L <= newer_mtime_option.tv_nsec) {
24884|      0|                {
24885|      0|                    tmp___62 =
24886|      0|                        gettext("Cannot combine --listed-incremental with --newer");
24887|      0|                    error(0, 0, (char const *)tmp___62);
24888|      0|                    usage(2);
24889|      0|                }
24890|      0|            }
24891|      0|        }
24892|      0|        if (volume_label_option) {
24893|      0|            if (multi_volume_option) {
24894|      0|                tmp___79 =
24895|      0|                    ((sizeof(" Volume ") - 1UL) +
24896|      0|                     ((((sizeof(int) * 8UL - 1UL) * 302UL) / 1000UL + 1UL) + 1UL)) -
24897|      0|                    1UL;
24898|      0|            }
24899|      0|            else {
24900|      0|                tmp___79 = 0UL;
24901|      0|            }
24902|      0|            {
24903|      0|                volume_label_max_len =
24904|      0|                    (sizeof(current_header->header.name) - 1UL) - tmp___79;
24905|      0|                tmp___65 = strlen(volume_label_option);
24906|      0|            }
24907|      0|            if (volume_label_max_len < tmp___65) {
24908|      0|                {
24909|      0|                    tmp___63 = quotearg_colon(volume_label_option);
24910|      0|                    tmp___64 =
24911|      0|                        ngettext("%s: Volume label is too long (limit is %lu byte)",
24912|      0|                                 "%s: Volume label is too long (limit is %lu bytes)",
24913|      0|                                 volume_label_max_len);
24914|      0|                    error(0, 0, (char const *)tmp___64, tmp___63, volume_label_max_len);
24915|      0|                    usage(2);
24916|      0|                }
24917|      0|            }
24918|      0|        }
24919|      0|        if (verify_option) {
24920|      0|            if (multi_volume_option) {
24921|      0|                {
24922|      0|                    tmp___66 = gettext("Cannot verify multi-volume archives");
24923|      0|                    error(0, 0, (char const *)tmp___66);
24924|      0|                    usage(2);
24925|      0|                }
24926|      0|            }
24927|      0|            if (use_compress_program_option) {
24928|      0|                {
24929|      0|                    tmp___67 = gettext("Cannot verify compressed archives");
24930|      0|                    error(0, 0, (char const *)tmp___67);
24931|      0|                    usage(2);
24932|      0|                }
24933|      0|            }
24934|      0|        }
24935|      0|        if (use_compress_program_option) {
24936|      0|            if (multi_volume_option) {
24937|      0|                {
24938|      0|                    tmp___68 = gettext("Cannot use multi-volume compressed archives");
24939|      0|                    error(0, 0, (char const *)tmp___68);
24940|      0|                    usage(2);
24941|      0|                }
24942|      0|            }
24943|      0|            if ((unsigned int)subcommand_option == 8U) {
24944|      0|                {
24945|      0|                    tmp___69 = gettext("Cannot update compressed archives");
24946|      0|                    error(0, 0, (char const *)tmp___69);
24947|      0|                    usage(2);
24948|      0|                }
24949|      0|            }
24950|      0|        }
24951|      0|        if (pax_option) {
24952|      0|            if ((unsigned int)archive_format != 4U) {
24953|      0|                if ((unsigned int)subcommand_option != 6U) {
24954|      0|                    {
24955|      0|                        tmp___70 =
24956|      0|                            gettext("--pax-option can be used only on POSIX archives");
24957|      0|                        error(0, 0, (char const *)tmp___70);
24958|      0|                        usage(2);
24959|      0|                    }
24960|      0|                }
24961|      0|                else {
24962|      0|                    if ((unsigned int)subcommand_option != 5U) {
24963|      0|                        {
24964|      0|                            tmp___70 =
24965|      0|                                gettext("--pax-option can be used only on POSIX archives");
24966|      0|                            error(0, 0, (char const *)tmp___70);
24967|      0|                            usage(2);
24968|      0|                        }
24969|      0|                    }
24970|      0|                    else {
24971|      0|                        if ((unsigned int)subcommand_option != 7U) {
24972|      0|                            {
24973|      0|                                tmp___70 =
24974|      0|                                    gettext("--pax-option can be used only on POSIX archives");
24975|      0|                                error(0, 0, (char const *)tmp___70);
24976|      0|                                usage(2);
24977|      0|                            }
24978|      0|                        }
24979|      0|                    }
24980|      0|                }
24981|      0|            }
24982|      0|        }
24983|      0|        if (recursive_unlink_option) {
24984|      0|            old_files_option = (enum old_files)3;
24985|      0|        }
24986|      0|        if (utc_option) {
24987|      0|            verbose_option = 2;
24988|      0|        }
24989|      0|        if (!rmt_command_option) {
24990|      0|            rmt_command_option = "/usr/local/libexec/rmt";
24991|      0|        }
24992|      0|        {
24993|      0|            if ((unsigned int)subcommand_option == 3U) {
24994|      0|                goto case_3;
24995|      0|            }
24996|      0|            if ((unsigned int)subcommand_option == 6U) {
24997|      0|                goto case_6;
24998|      0|            }
24999|      0|            if ((unsigned int)subcommand_option == 7U) {
25000|      0|                goto case_6;
25001|      0|            }
25002|      0|            if ((unsigned int)subcommand_option == 5U) {
25003|      0|                goto case_6;
25004|      0|            }
25005|      0|            if ((unsigned int)subcommand_option == 2U) {
25006|      0|                goto case_2;
25007|      0|            }
25008|      0|            if ((unsigned int)subcommand_option == 8U) {
25009|      0|                goto case_2;
25010|      0|            }
25011|      0|            if ((unsigned int)subcommand_option == 1U) {
25012|      0|                goto case_2;
25013|      0|            }
25014|      0|            goto switch_default;
25015|      0|case_3: /* CIL Label */
25016|      0|            if (input_files == 0) {
25017|      0|                if (!files_from_option) {
25018|      0|                    {
25019|      0|                        tmp___71 = gettext("Cowardly refusing to create an empty archive");
25020|      0|                        error(0, 0, (char const *)tmp___71);
25021|      0|                        usage(2);
25022|      0|                    }
25023|      0|                }
25024|      0|            }
25025|      0|            goto switch_break___0;
25026|      0|case_6: /* CIL Label */
25027|      0|case_7: /* CIL Label */
25028|      0|case_5: /* CIL Label */
25029|      0|            archive_name_cursor = archive_name_array;
25030|      0|            {
25031|      0|                while (1) {
25032|      0|while_continue___3: /* CIL Label */
25033|      0|                    ;
25034|      0|                    if (!((unsigned long)archive_name_cursor <
25035|      0|                            (unsigned long)(archive_name_array + archive_names))) {
25036|      0|                        goto while_break___3;
25037|      0|                    }
25038|      0|                    {
25039|      0|                        tmp___72 = strcmp(*archive_name_cursor, "-");
25040|      0|                    }
25041|      0|                    if (!tmp___72) {
25042|      0|                        {
25043|      0|                            request_stdin("-f");
25044|      0|                        }
25045|      0|                    }
25046|      0|                    archive_name_cursor++;
25047|      0|                }
25048|      0|while_break___3: /* CIL Label */
25049|      0|                ;
25050|      0|            }
25051|      0|            goto switch_break___0;
25052|      0|case_2:     /* CIL Label */
25053|      0|case_8:     /* CIL Label */
25054|      0|case_1___0: /* CIL Label */
25055|      0|            archive_name_cursor = archive_name_array;
25056|      0|            {
25057|      0|                while (1) {
25058|      0|while_continue___4: /* CIL Label */
25059|      0|                    ;
25060|      0|                    if (!((unsigned long)archive_name_cursor <
25061|      0|                            (unsigned long)(archive_name_array + archive_names))) {
25062|      0|                        goto while_break___4;
25063|      0|                    }
25064|      0|                    {
25065|      0|                        tmp___74 = strcmp(*archive_name_cursor, "-");
25066|      0|                    }
25067|      0|                    if (!tmp___74) {
25068|      0|                        {
25069|      0|                            tmp___73 =
25070|      0|                                gettext("Options `-Aru\' are incompatible with `-f -\'");
25071|      0|                            error(0, 0, (char const *)tmp___73);
25072|      0|                            usage(2);
25073|      0|                        }
25074|      0|                    }
25075|      0|                    archive_name_cursor++;
25076|      0|                }
25077|      0|while_break___4: /* CIL Label */
25078|      0|                ;
25079|      0|            }
25080|      0|switch_default: /* CIL Label */
25081|      0|            goto switch_break___0;
25082|      0|switch_break___0: /* CIL Label */
25083|      0|            ;
25084|      0|        }
25085|      0|        archive_name_cursor = archive_name_array;
25086|      0|        if (backup_suffix_string) {
25087|      0|            {
25088|      0|                tmp___75 = xstrdup(backup_suffix_string);
25089|      0|                simple_backup_suffix = (char const *)tmp___75;
25090|      0|            }
25091|      0|        }
25092|      0|        if (backup_option) {
25093|      0|            {
25094|      0|                backup_type = xget_version("--backup", version_control_string);
25095|      0|            }
25096|      0|        }
25097|      0|        if (verbose_option) {
25098|      0|            if (textual_date_option) {
25099|      0|                {
25100|      0|                    tmp___76 = tartime(newer_mtime_option.tv_sec);
25101|      0|                    treated_as = tmp___76;
25102|      0|                    tmp___78 = strcmp(textual_date_option, treated_as);
25103|      0|                }
25104|      0|                if (tmp___78 != 0) {
25105|      0|                    {
25106|      0|                        tmp___77 = gettext("Treating date `%s\' as %s + %ld nanoseconds");
25107|      0|                        error(0, 0, (char const *)tmp___77, textual_date_option, treated_as,
25108|      0|                              newer_mtime_option.tv_nsec);
25109|      0|                    }
25110|      0|                }
25111|      0|            }
25112|      0|        }
25113|      0|        return;
25114|      0|    }
25115|      0|}
25116|       |int main(int argc, char **argv)
25117|      0|{
25118|      0|    int tmp;
25119|      0|    void *tmp___0;
25120|      0|    char *tmp___1;
25121|      0|    char *tmp___2;
25122|      0|    int tmp___3;
25123|      0|    int tmp___4;
25124|      0|    char *tmp___5;
25125|      0|    int tmp___6;
25126|      0|    int tmp___7;
25127|      0|    char *__cil_tmp12;
25128|      0|    char *__cil_tmp13;
25129|      0|    char *__cil_tmp14;
25130|      0|    char *__cil_tmp15;
25131|       |
25132|      0|    {
25133|      0|        {
25134|      0|            tmp = clock_gettime(0, &start_timespec);
25135|      0|        }
25136|      0|        if (tmp != 0) {
25137|      0|            {
25138|      0|                start_timespec.tv_sec = time((time_t *)0);
25139|      0|            }
25140|      0|        }
25141|      0|        {
25142|      0|            program_name = (char const *)*(argv + 0);
25143|      0|            setlocale(6, "");
25144|      0|            bindtextdomain("tar", "/usr/local/share/locale");
25145|      0|            textdomain("tar");
25146|      0|            exit_status = 0;
25147|      0|            filename_terminator = (char)'\n';
25148|      0|            set_quoting_style((struct quoting_options *)0, (enum quoting_style)4);
25149|      0|            allocated_archive_names = 10;
25150|      0|            tmp___0 = xmalloc(sizeof(char const *) *
25151|      0|                              (unsigned long)allocated_archive_names);
25152|      0|            archive_name_array = (char const **)tmp___0;
25153|      0|            archive_names = 0;
25154|      0|            signal(17, (void (*)(int))0);
25155|      0|            init_names();
25156|      0|            decode_options(argc, argv);
25157|      0|            name_init();
25158|      0|        }
25159|      0|        if (volno_file_option) {
25160|      0|            {
25161|      0|                init_volume_number();
25162|      0|            }
25163|      0|        }
25164|      0|        {
25165|      0|            if ((unsigned int)subcommand_option == 0U) {
25166|      0|                goto case_0;
25167|      0|            }
25168|      0|            if ((unsigned int)subcommand_option == 2U) {
25169|      0|                goto case_2;
25170|      0|            }
25171|      0|            if ((unsigned int)subcommand_option == 8U) {
25172|      0|                goto case_2;
25173|      0|            }
25174|      0|            if ((unsigned int)subcommand_option == 1U) {
25175|      0|                goto case_2;
25176|      0|            }
25177|      0|            if ((unsigned int)subcommand_option == 4U) {
25178|      0|                goto case_4;
25179|      0|            }
25180|      0|            if ((unsigned int)subcommand_option == 3U) {
25181|      0|                goto case_3;
25182|      0|            }
25183|      0|            if ((unsigned int)subcommand_option == 6U) {
25184|      0|                goto case_6;
25185|      0|            }
25186|      0|            if ((unsigned int)subcommand_option == 7U) {
25187|      0|                goto case_7;
25188|      0|            }
25189|      0|            if ((unsigned int)subcommand_option == 5U) {
25190|      0|                goto case_5;
25191|      0|            }
25192|      0|            goto switch_break;
25193|      0|case_0 : { /* CIL Label */
25194|      0|                tmp___1 = gettext("You must specify one of the `-Acdtrux\' options");
25195|      0|                error(0, 0, (char const *)tmp___1);
25196|      0|                usage(2);
25197|      0|            }
25198|      0|case_2:  /* CIL Label */
25199|      0|case_8:  /* CIL Label */
25200|      0|case_1 : { /* CIL Label */
25201|      0|                update_archive();
25202|      0|            }
25203|      0|            goto switch_break;
25204|      0|case_4 : { /* CIL Label */
25205|      0|                delete_archive_members();
25206|      0|            }
25207|      0|            goto switch_break;
25208|      0|case_3 : { /* CIL Label */
25209|      0|                create_archive();
25210|      0|                name_close();
25211|      0|            }
25212|      0|            if (totals_option) {
25213|      0|                {
25214|      0|                    print_total_written();
25215|      0|                }
25216|      0|            }
25217|      0|            goto switch_break;
25218|      0|case_6 : { /* CIL Label */
25219|      0|                extr_init();
25220|      0|                read_and(&extract_archive);
25221|      0|                extract_finish();
25222|      0|            }
25223|      0|            goto switch_break;
25224|      0|case_7 : { /* CIL Label */
25225|      0|                read_and(&list_archive);
25226|      0|            }
25227|      0|            goto switch_break;
25228|      0|case_5 : { /* CIL Label */
25229|      0|                diff_init();
25230|      0|                read_and(&diff_archive);
25231|      0|            }
25232|      0|            goto switch_break;
25233|      0|switch_break: /* CIL Label */
25234|      0|            ;
25235|      0|        }
25236|      0|        if (check_links_option) {
25237|      0|            {
25238|      0|                check_links();
25239|      0|            }
25240|      0|        }
25241|      0|        if (volno_file_option) {
25242|      0|            {
25243|      0|                closeout_volume_number();
25244|      0|            }
25245|      0|        }
25246|      0|        {
25247|      0|            free((void *)archive_name_array);
25248|      0|            name_term();
25249|      0|        }
25250|      0|        if ((unsigned long)stdlis != (unsigned long)stderr) {
25251|      0|            {
25252|      0|                tmp___3 = ferror_unlocked(stdlis);
25253|      0|            }
25254|      0|            if (tmp___3) {
25255|      0|                {
25256|      0|                    tmp___2 = gettext("Error in writing to standard output");
25257|      0|                    error(0, 0, (char const *)tmp___2);
25258|      0|                    fatal_exit();
25259|      0|                }
25260|      0|            }
25261|      0|            else {
25262|      0|                {
25263|      0|                    tmp___4 = fclose(stdlis);
25264|      0|                }
25265|      0|                if (tmp___4 != 0) {
25266|      0|                    {
25267|      0|                        tmp___2 = gettext("Error in writing to standard output");
25268|      0|                        error(0, 0, (char const *)tmp___2);
25269|      0|                        fatal_exit();
25270|      0|                    }
25271|      0|                }
25272|      0|            }
25273|      0|        }
25274|      0|        if (exit_status == 2) {
25275|      0|            {
25276|      0|                tmp___5 = gettext("Error exit delayed from previous errors");
25277|      0|                error(0, 0, (char const *)tmp___5);
25278|      0|            }
25279|      0|        }
25280|      0|        {
25281|      0|            tmp___6 = ferror_unlocked(stderr);
25282|      0|        }
25283|      0|        if (tmp___6) {
25284|      0|            exit_status = 2;
25285|      0|        }
25286|      0|        else {
25287|      0|            {
25288|      0|                tmp___7 = fclose(stderr);
25289|      0|            }
25290|      0|            if (tmp___7 != 0) {
25291|      0|                exit_status = 2;
25292|      0|            }
25293|      0|        }
25294|      0|        return (exit_status);
25295|      0|    }
25296|      0|}
25297|       |void tar_stat_init(struct tar_stat_info *st)
25298|      0|{
25299|       |
25300|      0|    {
25301|      0|        {
25302|      0|            memset((void *)st, 0, sizeof(*st));
25303|      0|        }
25304|      0|        return;
25305|      0|    }
25306|      0|}
25307|       |void tar_stat_destroy(struct tar_stat_info *st)
25308|      0|{
25309|       |
25310|      0|    {
25311|      0|        {
25312|      0|            free((void *)st->orig_file_name);
25313|      0|            free((void *)st->file_name);
25314|      0|            free((void *)st->link_name);
25315|      0|            free((void *)st->uname);
25316|      0|            free((void *)st->gname);
25317|      0|            free((void *)st->sparse_map);
25318|      0|            memset((void *)st, 0, sizeof(*st));
25319|      0|        }
25320|      0|        return;
25321|      0|    }
25322|      0|}
25323|       |/* #pragma merger("0","00f.update.o.i","") */
25324|       |static void append_file(char *path)
25325|      0|{
25326|      0|    int handle;
25327|      0|    int tmp;
25328|      0|    struct stat stat_data;
25329|      0|    off_t bytes_left;
25330|      0|    union block *start;
25331|      0|    union block *tmp___0;
25332|      0|    size_t buffer_size;
25333|      0|    size_t tmp___1;
25334|      0|    size_t status;
25335|      0|    char buf[(((sizeof(uintmax_t) * 8UL) * 302UL) / 1000UL + 1UL) + 1UL];
25336|      0|    char *tmp___2;
25337|      0|    char *tmp___3;
25338|      0|    char *tmp___4;
25339|      0|    int tmp___5;
25340|      0|    int tmp___6;
25341|      0|    void *__cil_tmp17;
25342|      0|    void *__cil_tmp18;
25343|       |
25344|      0|    {
25345|      0|        {
25346|      0|            tmp = open((char const *)path, 0);
25347|      0|            handle = tmp;
25348|      0|        }
25349|      0|        if (handle < 0) {
25350|      0|            {
25351|      0|                open_error((char const *)path);
25352|      0|            }
25353|      0|            return;
25354|      0|        }
25355|      0|        {
25356|      0|            tmp___5 = fstat(handle, &stat_data);
25357|      0|        }
25358|      0|        if (tmp___5 != 0) {
25359|      0|            {
25360|      0|                stat_error((char const *)path);
25361|      0|            }
25362|      0|        }
25363|      0|        else {
25364|      0|            bytes_left = stat_data.st_size;
25365|      0|            {
25366|      0|                while (1) {
25367|      0|while_continue: /* CIL Label */
25368|      0|                    ;
25369|      0|                    if (!(bytes_left > 0L)) {
25370|      0|                        goto while_break;
25371|      0|                    }
25372|      0|                    {
25373|      0|                        tmp___0 = find_next_block();
25374|      0|                        start = tmp___0;
25375|      0|                        tmp___1 = available_space_after(start);
25376|      0|                        buffer_size = tmp___1;
25377|      0|                    }
25378|      0|                    if ((size_t)bytes_left < buffer_size) {
25379|      0|                        buffer_size = (size_t)bytes_left;
25380|      0|                        status = buffer_size % 512UL;
25381|      0|                        if (status) {
25382|      0|                            {
25383|      0|                                memset((void *)(start->buffer + bytes_left), 0, 512UL - status);
25384|      0|                            }
25385|      0|                        }
25386|      0|                    }
25387|      0|                    {
25388|      0|                        status = safe_read(handle, (void *)(start->buffer), buffer_size);
25389|      0|                    }
25390|      0|                    if (status == 0xffffffffffffffffUL) {
25391|      0|                        {
25392|      0|                            read_fatal_details((char const *)path,
25393|      0|                                               stat_data.st_size - bytes_left, buffer_size);
25394|      0|                        }
25395|      0|                    }
25396|      0|                    if (status == 0UL) {
25397|      0|                        {
25398|      0|                            tmp___2 = stringify_uintmax_t_backwards(
25399|      0|                                          (uintmax_t)bytes_left,
25400|      0|                                          buf + ((((sizeof(uintmax_t) * 8UL) * 302UL) / 1000UL + 1UL) +
25401|      0|                                                 1UL));
25402|      0|                            tmp___3 = quotearg_colon((char const *)path);
25403|      0|                            tmp___4 = ngettext("%s: File shrank by %s byte",
25404|      0|                                               "%s: File shrank by %s bytes",
25405|      0|                                               (unsigned long)bytes_left);
25406|      0|                            error(0, 0, (char const *)tmp___4, tmp___3, tmp___2);
25407|      0|                            fatal_exit();
25408|      0|                        }
25409|      0|                    }
25410|      0|                    {
25411|      0|                        bytes_left = (off_t)((size_t)bytes_left - status);
25412|      0|                        set_next_block_after(start + (status - 1UL) / 512UL);
25413|      0|                    }
25414|      0|                }
25415|      0|while_break: /* CIL Label */
25416|      0|                ;
25417|      0|            }
25418|      0|        }
25419|      0|        {
25420|      0|            tmp___6 = close(handle);
25421|      0|        }
25422|      0|        if (tmp___6 != 0) {
25423|      0|            {
25424|      0|                close_error((char const *)path);
25425|      0|            }
25426|      0|        }
25427|      0|        return;
25428|      0|    }
25429|      0|}
25430|       |void update_archive(void)
25431|      0|{
25432|      0|    enum read_header previous_status;
25433|      0|    int found_end;
25434|      0|    enum read_header status;
25435|      0|    enum read_header tmp;
25436|      0|    struct name *name;
25437|      0|    struct stat s;
25438|      0|    enum archive_format unused;
25439|      0|    int tmp___0;
25440|      0|    char *tmp___1;
25441|      0|    char *tmp___2;
25442|      0|    char *path;
25443|      0|    _Bool tmp___3;
25444|      0|    int tmp___4;
25445|      0|    void *__cil_tmp14;
25446|      0|    char *__cil_tmp15;
25447|      0|    char *__cil_tmp16;
25448|      0|    char *__cil_tmp17;
25449|       |
25450|      0|    {
25451|      0|        {
25452|      0|            previous_status = (enum read_header)0;
25453|      0|            found_end = 0;
25454|      0|            name_gather();
25455|      0|            open_archive((enum access_mode)2);
25456|      0|            xheader_write_global();
25457|      0|        }
25458|      0|        {
25459|      0|            while (1) {
25460|      0|while_continue: /* CIL Label */
25461|      0|                ;
25462|      0|                if (!(!found_end)) {
25463|      0|                    goto while_break;
25464|      0|                }
25465|      0|                {
25466|      0|                    tmp = read_header((_Bool)0);
25467|      0|                    status = tmp;
25468|      0|                }
25469|      0|                {
25470|      0|                    if ((unsigned int)status == 0U) {
25471|      0|                        goto case_0;
25472|      0|                    }
25473|      0|                    if ((unsigned int)status == 2U) {
25474|      0|                        goto case_0;
25475|      0|                    }
25476|      0|                    if ((unsigned int)status == 1U) {
25477|      0|                        goto case_1;
25478|      0|                    }
25479|      0|                    if ((unsigned int)status == 3U) {
25480|      0|                        goto case_3;
25481|      0|                    }
25482|      0|                    if ((unsigned int)status == 4U) {
25483|      0|                        goto case_4;
25484|      0|                    }
25485|      0|                    if ((unsigned int)status == 5U) {
25486|      0|                        goto case_5;
25487|      0|                    }
25488|      0|                    goto switch_break;
25489|      0|case_0:  /* CIL Label */
25490|      0|case_2 : { /* CIL Label */
25491|      0|                        abort();
25492|      0|                    }
25493|      0|case_1: /* CIL Label */
25494|      0|                    if ((unsigned int)subcommand_option == 8U) {
25495|      0|                        {
25496|      0|                            name = name_scan((char const *)current_stat_info.file_name);
25497|      0|                        }
25498|      0|                        if ((unsigned long)name != (unsigned long)((void *)0)) {
25499|      0|                            {
25500|      0|                                decode_header(current_header, &current_stat_info, &unused, 0);
25501|      0|                                chdir_do(name->change_dir);
25502|      0|                                tmp___0 =
25503|      0|                                    deref_stat(dereference_option,
25504|      0|                                               (char const *)current_stat_info.file_name, &s);
25505|      0|                            }
25506|      0|                            if (tmp___0 == 0) {
25507|      0|                                if (s.st_mtim.tv_sec <= current_stat_info.stat.st_mtim.tv_sec) {
25508|      0|                                    {
25509|      0|                                        add_avoided_name((char const *)current_stat_info.file_name);
25510|      0|                                    }
25511|      0|                                }
25512|      0|                            }
25513|      0|                        }
25514|      0|                    }
25515|      0|                    {
25516|      0|                        skip_member();
25517|      0|                    }
25518|      0|                    goto switch_break;
25519|      0|case_3: /* CIL Label */
25520|      0|                    current_block = current_header;
25521|      0|                    found_end = 1;
25522|      0|                    goto switch_break;
25523|      0|case_4: /* CIL Label */
25524|      0|                    found_end = 1;
25525|      0|                    goto switch_break;
25526|      0|case_5 : { /* CIL Label */
25527|      0|                        set_next_block_after(current_header);
25528|      0|                    }
25529|      0|                    {
25530|      0|                        if ((unsigned int)previous_status == 0U) {
25531|      0|                            goto case_0___0;
25532|      0|                        }
25533|      0|                        if ((unsigned int)previous_status == 1U) {
25534|      0|                            goto case_1___0;
25535|      0|                        }
25536|      0|                        if ((unsigned int)previous_status == 3U) {
25537|      0|                            goto case_1___0;
25538|      0|                        }
25539|      0|                        if ((unsigned int)previous_status == 5U) {
25540|      0|                            goto case_5___0;
25541|      0|                        }
25542|      0|                        if ((unsigned int)previous_status == 4U) {
25543|      0|                            goto case_4___0;
25544|      0|                        }
25545|      0|                        if ((unsigned int)previous_status == 2U) {
25546|      0|                            goto case_4___0;
25547|      0|                        }
25548|      0|                        goto switch_break___0;
25549|      0|case_0___0 : { /* CIL Label */
25550|      0|                            tmp___1 = gettext("This does not look like a tar archive");
25551|      0|                            error(0, 0, (char const *)tmp___1);
25552|      0|                        }
25553|      0|case_1___0:  /* CIL Label */
25554|      0|case_3___0 : { /* CIL Label */
25555|      0|                            tmp___2 = gettext("Skipping to next header");
25556|      0|                            error(0, 0, (char const *)tmp___2);
25557|      0|                            exit_status = 2;
25558|      0|                        }
25559|      0|case_5___0: /* CIL Label */
25560|      0|                        goto switch_break___0;
25561|      0|case_4___0:  /* CIL Label */
25562|      0|case_2___0 : { /* CIL Label */
25563|      0|                            abort();
25564|      0|                        }
25565|      0|switch_break___0: /* CIL Label */
25566|      0|                        ;
25567|      0|                    }
25568|      0|                    goto switch_break;
25569|      0|switch_break: /* CIL Label */
25570|      0|                    ;
25571|      0|                }
25572|      0|                previous_status = status;
25573|      0|            }
25574|      0|while_break: /* CIL Label */
25575|      0|            ;
25576|      0|        }
25577|      0|        {
25578|      0|            reset_eof();
25579|      0|            time_to_start_writing = (_Bool)1;
25580|      0|            output_start = current_block->buffer;
25581|      0|        }
25582|      0|        {
25583|      0|            while (1) {
25584|      0|while_continue___0: /* CIL Label */
25585|      0|                ;
25586|      0|                {
25587|      0|                    path = name_from_list();
25588|      0|                }
25589|      0|                if (!((unsigned long)path != (unsigned long)((void *)0))) {
25590|      0|                    goto while_break___0;
25591|      0|                }
25592|      0|                {
25593|      0|                    tmp___3 = excluded_name((char const *)path);
25594|      0|                }
25595|      0|                if (tmp___3) {
25596|      0|                    goto while_continue___0;
25597|      0|                }
25598|      0|                if (interactive_option) {
25599|      0|                    {
25600|      0|                        tmp___4 = confirm("add", (char const *)path);
25601|      0|                    }
25602|      0|                    if (!tmp___4) {
25603|      0|                        goto while_continue___0;
25604|      0|                    }
25605|      0|                }
25606|      0|                if ((unsigned int)subcommand_option == 2U) {
25607|      0|                    {
25608|      0|                        append_file(path);
25609|      0|                    }
25610|      0|                }
25611|      0|                else {
25612|      0|                    {
25613|      0|                        dump_file(path, 1, (dev_t)0);
25614|      0|                    }
25615|      0|                }
25616|      0|            }
25617|      0|while_break___0: /* CIL Label */
25618|      0|            ;
25619|      0|        }
25620|      0|        {
25621|      0|            write_eot();
25622|      0|            close_archive();
25623|      0|            names_notfound();
25624|      0|        }
25625|      0|        return;
25626|      0|    }
25627|      0|}
25628|       |/* #pragma merger("0","010.utf8.o.i","") */
25629|       |static iconv_t conv_desc[2] = {(iconv_t)-1, (iconv_t)-1};
25630|       |static iconv_t utf8_init(_Bool to_utf)
25631|      0|{
25632|       |
25633|      0|    {
25634|      0|        if ((unsigned long)conv_desc[(int)to_utf] == (unsigned long)((iconv_t)-1)) {
25635|      0|            if (to_utf) {
25636|      0|                conv_desc[(int)to_utf] = (iconv_t)-1;
25637|      0|            }
25638|      0|            else {
25639|      0|                conv_desc[(int)to_utf] = (iconv_t)-1;
25640|      0|            }
25641|      0|        }
25642|      0|        return (conv_desc[(int)to_utf]);
25643|      0|    }
25644|      0|}
25645|       |_Bool utf8_convert(_Bool to_utf, char const *input, char **output)
25646|      0|{
25647|      0|    char *ib;
25648|      0|    char *ob;
25649|      0|    size_t inlen;
25650|      0|    size_t outlen;
25651|      0|    size_t rc___1;
25652|      0|    iconv_t cd;
25653|      0|    iconv_t tmp;
25654|      0|    size_t tmp___0;
25655|      0|    char *tmp___1;
25656|      0|    void *tmp___2;
25657|       |
25658|      0|    {
25659|      0|        {
25660|      0|            tmp = utf8_init(to_utf);
25661|      0|            cd = tmp;
25662|      0|        }
25663|      0|        if ((unsigned long)cd == (unsigned long)((iconv_t)0)) {
25664|      0|            {
25665|      0|                *output = xstrdup(input);
25666|      0|            }
25667|      0|            return ((_Bool)1);
25668|      0|        }
25669|      0|        else {
25670|      0|            if ((unsigned long)cd == (unsigned long)((iconv_t)-1)) {
25671|      0|                return ((_Bool)0);
25672|      0|            }
25673|      0|        }
25674|      0|        {
25675|      0|            tmp___0 = strlen(input);
25676|      0|            inlen = tmp___0 + 1UL;
25677|      0|            outlen = inlen * 16UL + 1UL;
25678|      0|            tmp___2 = xmalloc(outlen);
25679|      0|            tmp___1 = (char *)tmp___2;
25680|      0|            *output = tmp___1;
25681|      0|            ob = tmp___1;
25682|      0|            ib = (char *)input;
25683|      0|            rc___1 = (size_t)0;
25684|      0|            *ob = (char)0;
25685|      0|        }
25686|      0|        return ((_Bool)(rc___1 != 0xffffffffffffffffUL));
25687|      0|    }
25688|      0|}
25689|       |_Bool string_ascii_p(char const *str)
25690|      0|{
25691|      0|    unsigned char const *p;
25692|       |
25693|      0|    {
25694|      0|        p = (unsigned char const *)str;
25695|      0|        {
25696|      0|            while (1) {
25697|      0|while_continue: /* CIL Label */
25698|      0|                ;
25699|      0|                if (!*p) {
25700|      0|                    goto while_break;
25701|      0|                }
25702|      0|                if ((int const) * p > 127) {
25703|      0|                    return ((_Bool)0);
25704|      0|                }
25705|      0|                p++;
25706|      0|            }
25707|      0|while_break: /* CIL Label */
25708|      0|            ;
25709|      0|        }
25710|      0|        return ((_Bool)1);
25711|      0|    }
25712|      0|}
25713|       |/* #pragma merger("0","011.addext.o.i","") */
25714|       |extern
25715|       |__attribute__((__nothrow__)) long(__attribute__((__nonnull__(1), __leaf__))
25716|       |                                  pathconf)(char const *__path, int __name);
25717|       |void addext(char *filename, char const *ext, int e);
25718|       |size_t base_len(char const *name);
25719|       |void addext(char *filename, char const *ext, int e)
25720|      0|{
25721|      0|    char *s;
25722|      0|    char *tmp;
25723|      0|    size_t slen;
25724|      0|    size_t tmp___0;
25725|      0|    size_t extlen;
25726|      0|    size_t tmp___1;
25727|      0|    size_t slen_max;
25728|      0|    long name_max;
25729|      0|    int *tmp___2;
25730|      0|    char c;
25731|      0|    long size;
25732|      0|    int *tmp___3;
25733|       |
25734|      0|    {
25735|      0|        {
25736|      0|            tmp = base_name((char const *)filename);
25737|      0|            s = tmp;
25738|      0|            tmp___0 = base_len((char const *)s);
25739|      0|            slen = tmp___0;
25740|      0|            tmp___1 = strlen(ext);
25741|      0|            extlen = tmp___1;
25742|      0|            slen_max = (size_t)255;
25743|      0|        }
25744|      0|        if (14UL < slen + extlen) {
25745|      0|            goto _L___3;
25746|      0|        }
25747|      0|        else {
25748|      0|            if (0) {
25749|      0|_L___3 : { /* CIL Label */
25750|      0|                    tmp___2 = __errno_location();
25751|      0|                    *tmp___2 = 0;
25752|      0|                }
25753|      0|                if ((unsigned long)s == (unsigned long)filename) {
25754|      0|                    {
25755|      0|                        name_max = pathconf(".", 3);
25756|      0|                    }
25757|      0|                }
25758|      0|                else {
25759|      0|                    c = *s;
25760|      0|                    if (!((int)c == 47)) {
25761|      0|                        *s = (char)0;
25762|      0|                    }
25763|      0|                    {
25764|      0|                        name_max = pathconf((char const *)filename, 3);
25765|      0|                        *s = c;
25766|      0|                    }
25767|      0|                }
25768|      0|                if (0L <= name_max) {
25769|      0|                    goto _L;
25770|      0|                }
25771|      0|                else {
25772|      0|                    {
25773|      0|                        tmp___3 = __errno_location();
25774|      0|                    }
25775|      0|                    if (*tmp___3 == 0) {
25776|      0|_L:
25777|      0|                        slen_max = (size_t)name_max;
25778|      0|                        size = (long)slen_max;
25779|      0|                        if (name_max != size) {
25780|      0|                            slen_max = (size_t)-1;
25781|      0|                        }
25782|      0|                    }
25783|      0|                }
25784|      0|            }
25785|      0|        }
25786|      0|        if (slen + extlen <= slen_max) {
25787|      0|            {
25788|      0|                strcpy((char * /* __restrict  */)(s + slen),
25789|      0|                       (char const * /* __restrict  */)ext);
25790|      0|            }
25791|      0|        }
25792|      0|        else {
25793|      0|            if (slen_max <= slen) {
25794|      0|                slen = slen_max - 1UL;
25795|      0|            }
25796|      0|            *(s + slen) = (char)e;
25797|      0|            *(s + (slen + 1UL)) = (char)0;
25798|      0|        }
25799|      0|        return;
25800|      0|    }
25801|      0|}
25802|       |/* #pragma merger("0","012.argmatch.o.i","") */
25803|       |int argmatch(char const *arg, char const *const *arglist, char const *vallist,
25804|       |             size_t valsize);
25805|       |void (*argmatch_die)(void);
25806|       |void argmatch_invalid(char const *context, char const *value, int problem);
25807|       |void argmatch_valid(char const *const *arglist, char const *vallist,
25808|       |                    size_t valsize);
25809|       |int __xargmatch_internal(char const *context, char const *arg,
25810|       |                         char const *const *arglist, char const *vallist,
25811|       |                         size_t valsize, void (*exit_fn)(void));
25812|       |int volatile exit_failure;
25813|       |static void __argmatch_die(void)
25814|      0|{
25815|       |
25816|      0|    {
25817|      0|        {
25818|      0|            exit((int)exit_failure);
25819|      0|        }
25820|      0|    }
25821|      0|}
25822|       |void (*argmatch_die)(void) = &__argmatch_die;
25823|       |int argmatch(char const *arg, char const *const *arglist, char const *vallist,
25824|       |             size_t valsize)
25825|      0|{
25826|      0|    int i;
25827|      0|    size_t arglen;
25828|      0|    int matchind;
25829|      0|    int ambiguous;
25830|      0|    int tmp;
25831|      0|    size_t tmp___0;
25832|      0|    int tmp___1;
25833|       |
25834|      0|    {
25835|      0|        {
25836|      0|            matchind = -1;
25837|      0|            ambiguous = 0;
25838|      0|            arglen = strlen(arg);
25839|      0|            i = 0;
25840|      0|        }
25841|      0|        {
25842|      0|            while (1) {
25843|      0|while_continue: /* CIL Label */
25844|      0|                ;
25845|      0|                if (!*(arglist + i)) {
25846|      0|                    goto while_break;
25847|      0|                }
25848|      0|                {
25849|      0|                    tmp___1 = strncmp((char const *)*(arglist + i), arg, arglen);
25850|      0|                }
25851|      0|                if (!tmp___1) {
25852|      0|                    {
25853|      0|                        tmp___0 = strlen((char const *)*(arglist + i));
25854|      0|                    }
25855|      0|                    if (tmp___0 == arglen) {
25856|      0|                        return (i);
25857|      0|                    }
25858|      0|                    else {
25859|      0|                        if (matchind == -1) {
25860|      0|                            matchind = i;
25861|      0|                        }
25862|      0|                        else {
25863|      0|                            if ((unsigned long)vallist == (unsigned long)((void *)0)) {
25864|      0|                                ambiguous = 1;
25865|      0|                            }
25866|      0|                            else {
25867|      0|                                {
25868|      0|                                    tmp = memcmp(
25869|      0|                                              (void const *)(vallist + valsize * (size_t)matchind),
25870|      0|                                              (void const *)(vallist + valsize * (size_t)i), valsize);
25871|      0|                                }
25872|      0|                                if (tmp) {
25873|      0|                                    ambiguous = 1;
25874|      0|                                }
25875|      0|                            }
25876|      0|                        }
25877|      0|                    }
25878|      0|                }
25879|      0|                i++;
25880|      0|            }
25881|      0|while_break: /* CIL Label */
25882|      0|            ;
25883|      0|        }
25884|      0|        if (ambiguous) {
25885|      0|            return (-2);
25886|      0|        }
25887|      0|        else {
25888|      0|            return (matchind);
25889|      0|        }
25890|      0|    }
25891|      0|}
25892|       |void argmatch_invalid(char const *context, char const *value, int problem)
25893|      0|{
25894|      0|    char const *format;
25895|      0|    char *tmp;
25896|      0|    char *tmp___0;
25897|      0|    char *tmp___1;
25898|      0|    char const *tmp___2;
25899|      0|    char *tmp___3;
25900|      0|    char *__cil_tmp10;
25901|      0|    char *__cil_tmp11;
25902|       |
25903|      0|    {
25904|      0|        if (problem == -1) {
25905|      0|            {
25906|      0|                tmp = gettext("invalid argument %s for %s");
25907|      0|                tmp___1 = tmp;
25908|      0|            }
25909|      0|        }
25910|      0|        else {
25911|      0|            {
25912|      0|                tmp___0 = gettext("ambiguous argument %s for %s");
25913|      0|                tmp___1 = tmp___0;
25914|      0|            }
25915|      0|        }
25916|      0|        {
25917|      0|            format = (char const *)tmp___1;
25918|      0|            tmp___2 = quote_n(1, context);
25919|      0|            tmp___3 = quotearg_n_style(0, (enum quoting_style)5, value);
25920|      0|            error(0, 0, format, tmp___3, tmp___2);
25921|      0|        }
25922|      0|        return;
25923|      0|    }
25924|      0|}
25925|       |void argmatch_valid(char const *const *arglist, char const *vallist,
25926|       |                    size_t valsize)
25927|      0|{
25928|      0|    int i;
25929|      0|    char const *last_val;
25930|      0|    char *tmp;
25931|      0|    int tmp___0;
25932|      0|    char *__cil_tmp8;
25933|       |
25934|      0|    {
25935|      0|        {
25936|      0|            last_val = (char const *)((void *)0);
25937|      0|            tmp = gettext("Valid arguments are:");
25938|      0|            fprintf((FILE * /* __restrict  */) stderr,
25939|      0|                    (char const * /* __restrict  */)tmp);
25940|      0|            i = 0;
25941|      0|        }
25942|      0|        {
25943|      0|            while (1) {
25944|      0|while_continue: /* CIL Label */
25945|      0|                ;
25946|      0|                if (!*(arglist + i)) {
25947|      0|                    goto while_break;
25948|      0|                }
25949|      0|                if (i == 0) {
25950|      0|                    {
25951|      0|                        fprintf((FILE * /* __restrict  */) stderr,
25952|      0|                                (char const * /* __restrict  */) "\n  - `%s\'",
25953|      0|                                *(arglist + i));
25954|      0|                        last_val = vallist + valsize * (size_t)i;
25955|      0|                    }
25956|      0|                }
25957|      0|                else {
25958|      0|                    {
25959|      0|                        tmp___0 =
25960|      0|                            memcmp((void const *)last_val,
25961|      0|                                   (void const *)(vallist + valsize * (size_t)i), valsize);
25962|      0|                    }
25963|      0|                    if (tmp___0) {
25964|      0|                        {
25965|      0|                            fprintf((FILE * /* __restrict  */) stderr,
25966|      0|                                    (char const * /* __restrict  */) "\n  - `%s\'",
25967|      0|                                    *(arglist + i));
25968|      0|                            last_val = vallist + valsize * (size_t)i;
25969|      0|                        }
25970|      0|                    }
25971|      0|                    else {
25972|      0|                        {
25973|      0|                            fprintf((FILE * /* __restrict  */) stderr,
25974|      0|                                    (char const * /* __restrict  */) ", `%s\'",
25975|      0|                                    *(arglist + i));
25976|      0|                        }
25977|      0|                    }
25978|      0|                }
25979|      0|                i++;
25980|      0|            }
25981|      0|while_break: /* CIL Label */
25982|      0|            ;
25983|      0|        }
25984|      0|        {
25985|      0|            putc_unlocked('\n', stderr);
25986|      0|        }
25987|      0|        return;
25988|      0|    }
25989|      0|}
25990|       |int __xargmatch_internal(char const *context, char const *arg,
25991|       |                         char const *const *arglist, char const *vallist,
25992|       |                         size_t valsize, void (*exit_fn)(void))
25993|      0|{
25994|      0|    int res;
25995|      0|    int tmp;
25996|       |
25997|      0|    {
25998|      0|        {
25999|      0|            tmp = argmatch(arg, arglist, vallist, valsize);
26000|      0|            res = tmp;
26001|      0|        }
26002|      0|        if (res >= 0) {
26003|      0|            return (res);
26004|      0|        }
26005|      0|        {
26006|      0|            argmatch_invalid(context, arg, res);
26007|      0|            argmatch_valid(arglist, vallist, valsize);
26008|      0|            (*exit_fn)();
26009|      0|        }
26010|      0|        return (-1);
26011|      0|    }
26012|      0|}
26013|       |/* #pragma merger("0","013.backupfile.o.i","") */
26014|       |extern DIR *(__attribute__((__nonnull__(1))) opendir)(char const *__name);
26015|       |extern int(__attribute__((__nonnull__(1))) closedir)(DIR *__dirp);
26016|       |extern struct dirent *(__attribute__((__nonnull__(1))) readdir)(DIR *__dirp);
26017|       |extern __attribute__((__nothrow__)) void *(__attribute__((__leaf__))
26018|       |        malloc)(size_t __size)
26019|       |__attribute__((__malloc__));
26020|       |enum backup_type get_version(char const *context, char const *version);
26021|       |size_t dir_len(char const *path);
26022|       |char const *simple_backup_suffix = "~";
26023|       |static int max_backup_version(char const *file, char const *dir);
26024|       |static int version_number(char const *base, char const *backup,
26025|       |                          size_t base_length);
26026|       |char *find_backup_file_name(char const *file,
26027|       |                            enum backup_type backup_type___0)
26028|      0|{
26029|      0|    size_t backup_suffix_size_max;
26030|      0|    size_t file_len;
26031|      0|    size_t tmp;
26032|      0|    size_t numbered_suffix_size_max;
26033|      0|    char *s;
26034|      0|    char const *suffix;
26035|      0|    size_t tmp___0;
26036|      0|    void *tmp___1;
26037|      0|    int highest_backup;
26038|      0|    size_t dirlen;
26039|      0|    size_t tmp___2;
26040|      0|    size_t tmp___3;
26041|      0|    char *tmp___4;
26042|      0|    char *numbered_suffix;
26043|      0|    char *__cil_tmp17;
26044|      0|    char *__cil_tmp18;
26045|       |
26046|      0|    {
26047|      0|        {
26048|      0|            tmp = strlen(file);
26049|      0|            file_len = tmp;
26050|      0|            numbered_suffix_size_max =
26051|      0|                (((sizeof(int) * 8UL - 1UL) * 302UL) / 1000UL + 2UL) + 4UL;
26052|      0|            suffix = simple_backup_suffix;
26053|      0|            tmp___0 = strlen(simple_backup_suffix);
26054|      0|            backup_suffix_size_max = tmp___0 + 1UL;
26055|      0|        }
26056|      0|        if (backup_suffix_size_max < numbered_suffix_size_max) {
26057|      0|            backup_suffix_size_max = numbered_suffix_size_max;
26058|      0|        }
26059|      0|        {
26060|      0|            tmp___1 = malloc(((file_len + 1UL) + backup_suffix_size_max) +
26061|      0|                             numbered_suffix_size_max);
26062|      0|            s = (char *)tmp___1;
26063|      0|        }
26064|      0|        if (s) {
26065|      0|            if ((unsigned int)backup_type___0 != 1U) {
26066|      0|                {
26067|      0|                    tmp___2 = dir_len(file);
26068|      0|                    dirlen = tmp___2;
26069|      0|                    memcpy((void * /* __restrict  */)s,
26070|      0|                           (void const * /* __restrict  */)file, dirlen);
26071|      0|                }
26072|      0|                if (dirlen == 0UL) {
26073|      0|                    tmp___3 = dirlen;
26074|      0|                    dirlen++;
26075|      0|                    *(s + tmp___3) = (char)'.';
26076|      0|                }
26077|      0|                {
26078|      0|                    *(s + dirlen) = (char)'\000';
26079|      0|                    tmp___4 = base_name(file);
26080|      0|                    highest_backup =
26081|      0|                        max_backup_version((char const *)tmp___4, (char const *)s);
26082|      0|                }
26083|      0|                if ((unsigned int)backup_type___0 == 2U) {
26084|      0|                    if (!(highest_backup == 0)) {
26085|      0|                        {
26086|      0|                            numbered_suffix = s + (file_len + backup_suffix_size_max);
26087|      0|                            sprintf((char * /* __restrict  */)numbered_suffix,
26088|      0|                                    (char const * /* __restrict  */) ".~%d~",
26089|      0|                                    highest_backup + 1);
26090|      0|                            suffix = (char const *)numbered_suffix;
26091|      0|                        }
26092|      0|                    }
26093|      0|                }
26094|      0|                else {
26095|      0|                    {
26096|      0|                        numbered_suffix = s + (file_len + backup_suffix_size_max);
26097|      0|                        sprintf((char * /* __restrict  */)numbered_suffix,
26098|      0|                                (char const * /* __restrict  */) ".~%d~",
26099|      0|                                highest_backup + 1);
26100|      0|                        suffix = (char const *)numbered_suffix;
26101|      0|                    }
26102|      0|                }
26103|      0|            }
26104|      0|            {
26105|      0|                strcpy((char * /* __restrict  */)s,
26106|      0|                       (char const * /* __restrict  */)file);
26107|      0|                addext(s, suffix, '~');
26108|      0|            }
26109|      0|        }
26110|      0|        return (s);
26111|      0|    }
26112|      0|}
26113|       |static int max_backup_version(char const *file, char const *dir)
26114|      0|{
26115|      0|    DIR *dirp;
26116|      0|    struct dirent *dp;
26117|      0|    int highest_version;
26118|      0|    int this_version;
26119|      0|    size_t file_name_length;
26120|      0|    size_t tmp;
26121|      0|    int tmp___0;
26122|       |
26123|      0|    {
26124|      0|        {
26125|      0|            dirp = opendir(dir);
26126|      0|        }
26127|      0|        if (!dirp) {
26128|      0|            return (0);
26129|      0|        }
26130|      0|        {
26131|      0|            highest_version = 0;
26132|      0|            file_name_length = base_len(file);
26133|      0|        }
26134|      0|        {
26135|      0|            while (1) {
26136|      0|while_continue: /* CIL Label */
26137|      0|                ;
26138|      0|                {
26139|      0|                    dp = readdir(dirp);
26140|      0|                }
26141|      0|                if (!((unsigned long)dp != (unsigned long)((struct dirent *)0))) {
26142|      0|                    goto while_break;
26143|      0|                }
26144|      0|                if (!(dp->d_ino != 0UL)) {
26145|      0|                    goto while_continue;
26146|      0|                }
26147|      0|                else {
26148|      0|                    {
26149|      0|                        tmp = strlen((char const *)(dp->d_name));
26150|      0|                    }
26151|      0|                    if (tmp < file_name_length + 4UL) {
26152|      0|                        goto while_continue;
26153|      0|                    }
26154|      0|                }
26155|      0|                {
26156|      0|                    this_version = version_number(file, (char const *)(dp->d_name),
26157|      0|                                                  file_name_length);
26158|      0|                }
26159|      0|                if (this_version > highest_version) {
26160|      0|                    highest_version = this_version;
26161|      0|                }
26162|      0|            }
26163|      0|while_break: /* CIL Label */
26164|      0|            ;
26165|      0|        }
26166|      0|        {
26167|      0|            tmp___0 = closedir(dirp);
26168|      0|        }
26169|      0|        if (tmp___0) {
26170|      0|            return (0);
26171|      0|        }
26172|      0|        return (highest_version);
26173|      0|    }
26174|      0|}
26175|       |static int version_number(char const *base, char const *backup,
26176|       |                          size_t base_length)
26177|      0|{
26178|      0|    int version;
26179|      0|    char const *p;
26180|      0|    int tmp;
26181|       |
26182|      0|    {
26183|      0|        {
26184|      0|            version = 0;
26185|      0|            tmp = strncmp(base, backup, base_length);
26186|      0|        }
26187|      0|        if (tmp == 0) {
26188|      0|            if ((int const) * (backup + base_length) == 46) {
26189|      0|                if ((int const) * (backup + (base_length + 1UL)) == 126) {
26190|      0|                    p = backup + (base_length + 2UL);
26191|      0|                    {
26192|      0|                        while (1) {
26193|      0|while_continue: /* CIL Label */
26194|      0|                            ;
26195|      0|                            if (!((unsigned int)*p - 48U <= 9U)) {
26196|      0|                                goto while_break;
26197|      0|                            }
26198|      0|                            version = (version * 10 + (int)*p) - 48;
26199|      0|                            p++;
26200|      0|                        }
26201|      0|while_break: /* CIL Label */
26202|      0|                        ;
26203|      0|                    }
26204|      0|                    if ((int const) * (p + 0) != 126) {
26205|      0|                        version = 0;
26206|      0|                    }
26207|      0|                    else {
26208|      0|                        if (*(p + 1)) {
26209|      0|                            version = 0;
26210|      0|                        }
26211|      0|                    }
26212|      0|                }
26213|      0|            }
26214|      0|        }
26215|      0|        return (version);
26216|      0|    }
26217|      0|}
26218|       |static char const *const backup_args[9] = {
26219|       |    (char const * /* const  */) "none",
26220|       |    (char const * /* const  */) "off",
26221|       |    (char const * /* const  */) "simple",
26222|       |    (char const * /* const  */) "never",
26223|       |    (char const * /* const  */) "existing",
26224|       |    (char const * /* const  */) "nil",
26225|       |    (char const * /* const  */) "numbered",
26226|       |    (char const * /* const  */) "t",
26227|       |    (char const * /* const  */)0
26228|       |};
26229|       |static enum backup_type const backup_types[8] = {
26230|       |    (enum backup_type const)0, (enum backup_type const)0,
26231|       |    (enum backup_type const)1, (enum backup_type const)1,
26232|       |    (enum backup_type const)2, (enum backup_type const)2,
26233|       |    (enum backup_type const)3, (enum backup_type const)3
26234|       |};
26235|       |enum backup_type get_version(char const *context, char const *version)
26236|      0|{
26237|      0|    int tmp;
26238|       |
26239|      0|    {
26240|      0|        if ((unsigned long)version == (unsigned long)((char const *)0)) {
26241|      0|            return ((enum backup_type)2);
26242|      0|        }
26243|      0|        else {
26244|      0|            if ((int const) * version == 0) {
26245|      0|                return ((enum backup_type)2);
26246|      0|            }
26247|      0|            else {
26248|      0|                {
26249|      0|                    tmp = __xargmatch_internal(context, version, backup_args,
26250|      0|                                               (char const *)(backup_types),
26251|      0|                                               sizeof(backup_types[0]), argmatch_die);
26252|      0|                }
26253|      0|                return ((enum backup_type)backup_types[tmp]);
26254|      0|            }
26255|      0|        }
26256|      0|    }
26257|      0|}
26258|       |enum backup_type xget_version(char const *context, char const *version)
26259|      0|{
26260|      0|    enum backup_type tmp;
26261|      0|    char *tmp___0;
26262|      0|    enum backup_type tmp___1;
26263|      0|    char *__cil_tmp6;
26264|      0|    char *__cil_tmp7;
26265|      0|    char *__cil_tmp8;
26266|      0|    char *__cil_tmp9;
26267|       |
26268|      0|    {
26269|      0|        if (version) {
26270|      0|            if (*version) {
26271|      0|                {
26272|      0|                    tmp = get_version(context, version);
26273|      0|                }
26274|      0|                return (tmp);
26275|      0|            }
26276|      0|            else {
26277|      0|                {
26278|      0|                    tmp___0 = getenv("VERSION_CONTROL");
26279|      0|                    tmp___1 = get_version("$VERSION_CONTROL", (char const *)tmp___0);
26280|      0|                }
26281|      0|                return (tmp___1);
26282|      0|            }
26283|      0|        }
26284|      0|        else {
26285|      0|            {
26286|      0|                tmp___0 = getenv("VERSION_CONTROL");
26287|      0|                tmp___1 = get_version("$VERSION_CONTROL", (char const *)tmp___0);
26288|      0|            }
26289|      0|            return (tmp___1);
26290|      0|        }
26291|      0|    }
26292|      0|}
26293|       |/* #pragma merger("0","014.basename.o.i","") */
26294|       |char *base_name(char const *name)
26295|      0|{
26296|      0|    char const *base;
26297|      0|    char const *p;
26298|       |
26299|      0|    {
26300|      0|        base = name + 0;
26301|      0|        p = base;
26302|      0|        {
26303|      0|            while (1) {
26304|      0|while_continue: /* CIL Label */
26305|      0|                ;
26306|      0|                if (!*p) {
26307|      0|                    goto while_break;
26308|      0|                }
26309|      0|                if ((int const) * p == 47) {
26310|      0|                    {
26311|      0|                        while (1) {
26312|      0|while_continue___0: /* CIL Label */
26313|      0|                            ;
26314|      0|                            p++;
26315|      0|                            if (!((int const) * p == 47)) {
26316|      0|                                goto while_break___0;
26317|      0|                            }
26318|      0|                        }
26319|      0|while_break___0: /* CIL Label */
26320|      0|                        ;
26321|      0|                    }
26322|      0|                    if (!*p) {
26323|      0|                        if ((int const) * base == 47) {
26324|      0|                            base = p - 1;
26325|      0|                        }
26326|      0|                        goto while_break;
26327|      0|                    }
26328|      0|                    base = p;
26329|      0|                }
26330|      0|                p++;
26331|      0|            }
26332|      0|while_break: /* CIL Label */
26333|      0|            ;
26334|      0|        }
26335|      0|        return ((char *)base);
26336|      0|    }
26337|      0|}
26338|       |size_t base_len(char const *name)
26339|      0|{
26340|      0|    size_t len;
26341|       |
26342|      0|    {
26343|      0|        {
26344|      0|            len = strlen(name);
26345|      0|        }
26346|      0|        {
26347|      0|            while (1) {
26348|      0|while_continue: /* CIL Label */
26349|      0|                ;
26350|      0|                if (1UL < len) {
26351|      0|                    if (!((int const) * (name + (len - 1UL)) == 47)) {
26352|      0|                        goto while_break;
26353|      0|                    }
26354|      0|                }
26355|      0|                else {
26356|      0|                    goto while_break;
26357|      0|                }
26358|      0|                goto __Cont;
26359|      0|__Cont:
26360|      0|                len--;
26361|      0|            }
26362|      0|while_break: /* CIL Label */
26363|      0|            ;
26364|      0|        }
26365|      0|        return (len);
26366|      0|    }
26367|      0|}
26368|       |/* #pragma merger("0","015.dirname.o.i","") */
26369|       |size_t dir_len(char const *path)
26370|      0|{
26371|      0|    size_t prefix_length;
26372|      0|    size_t length;
26373|      0|    char *tmp;
26374|       |
26375|      0|    {
26376|      0|        {
26377|      0|            prefix_length = (size_t)0;
26378|      0|            tmp = base_name(path);
26379|      0|            length = (size_t)(tmp - (char *)path);
26380|      0|        }
26381|      0|        {
26382|      0|            while (1) {
26383|      0|while_continue: /* CIL Label */
26384|      0|                ;
26385|      0|                if (!(prefix_length < length)) {
26386|      0|                    goto while_break;
26387|      0|                }
26388|      0|                if (!((int const) * (path + (length - 1UL)) == 47)) {
26389|      0|                    return (length);
26390|      0|                }
26391|      0|                length--;
26392|      0|            }
26393|      0|while_break: /* CIL Label */
26394|      0|            ;
26395|      0|        }
26396|      0|        return (prefix_length +
26397|      0|                (size_t)((int const) * (path + prefix_length) == 47));
26398|      0|    }
26399|      0|}
26400|       |char *dir_name(char const *path)
26401|      0|{
26402|      0|    size_t length;
26403|      0|    size_t tmp;
26404|      0|    int append_dot;
26405|      0|    char *newpath;
26406|      0|    void *tmp___0;
26407|      0|    size_t tmp___1;
26408|       |
26409|      0|    {
26410|      0|        {
26411|      0|            tmp = dir_len(path);
26412|      0|            length = tmp;
26413|      0|            append_dot = length == 0UL;
26414|      0|            tmp___0 = xmalloc((length + (size_t)append_dot) + 1UL);
26415|      0|            newpath = (char *)tmp___0;
26416|      0|            memcpy((void * /* __restrict  */)newpath,
26417|      0|                   (void const * /* __restrict  */)path, length);
26418|      0|        }
26419|      0|        if (append_dot) {
26420|      0|            tmp___1 = length;
26421|      0|            length++;
26422|      0|            *(newpath + tmp___1) = (char)'.';
26423|      0|        }
26424|      0|        *(newpath + length) = (char)0;
26425|      0|        return (newpath);
26426|      0|    }
26427|      0|}
26428|       |/* #pragma merger("0","016.exclude.o.i","") */
26429|       |extern __attribute__((__nothrow__)) int(
26430|       |    __attribute__((__nonnull__(1, 2), __leaf__))
26431|       |    strcasecmp)(char const *__s1, char const *__s2) __attribute__((__pure__));
26432|       |extern __attribute__((__nothrow__)) int(
26433|       |    __attribute__((__nonnull__(1, 2), __leaf__))
26434|       |    strncasecmp)(char const *__s1, char const *__s2, size_t __n)
26435|       |__attribute__((__pure__));
26436|       |void *xzalloc(size_t s);
26437|       |void *x2realloc(void *p, size_t *pn);
26438|       |void *x2nrealloc(void *p, size_t *pn, size_t s);
26439|       |__inline static _Bool is_space(unsigned char c)
26440|      0|{
26441|      0|    unsigned short const **tmp;
26442|       |
26443|      0|    {
26444|      0|        {
26445|      0|            tmp = __ctype_b_loc();
26446|      0|        }
26447|      0|        return ((_Bool)(((int const) * (*tmp + (int)c) & 8192) != 0));
26448|      0|    }
26449|      0|}
26450|       |struct exclude *new_exclude(void)
26451|      0|{
26452|      0|    struct exclude *tmp;
26453|      0|    void *tmp___0;
26454|       |
26455|      0|    {
26456|      0|        {
26457|      0|            tmp___0 = xzalloc(sizeof(*tmp));
26458|      0|        }
26459|      0|        return ((struct exclude *)tmp___0);
26460|      0|    }
26461|      0|}
26462|       |static int fnmatch_no_wildcards(char const *pattern, char const *f,
26463|       |                                int options)
26464|      0|{
26465|      0|    int tmp;
26466|      0|    int tmp___0;
26467|      0|    int tmp___1;
26468|      0|    size_t patlen;
26469|      0|    size_t tmp___2;
26470|      0|    int r;
26471|      0|    int tmp___3;
26472|      0|    int tmp___4;
26473|      0|    int tmp___5;
26474|       |
26475|      0|    {
26476|      0|        if (!(options & (1 << 3))) {
26477|      0|            if (options & (1 << 4)) {
26478|      0|                {
26479|      0|                    tmp = strcasecmp(pattern, f);
26480|      0|                    tmp___1 = tmp;
26481|      0|                }
26482|      0|            }
26483|      0|            else {
26484|      0|                {
26485|      0|                    tmp___0 = strcmp(pattern, f);
26486|      0|                    tmp___1 = tmp___0;
26487|      0|                }
26488|      0|            }
26489|      0|            return (tmp___1);
26490|      0|        }
26491|      0|        else {
26492|      0|            {
26493|      0|                tmp___2 = strlen(pattern);
26494|      0|                patlen = tmp___2;
26495|      0|            }
26496|      0|            if (options & (1 << 4)) {
26497|      0|                {
26498|      0|                    tmp___3 = strncasecmp(pattern, f, patlen);
26499|      0|                    tmp___5 = tmp___3;
26500|      0|                }
26501|      0|            }
26502|      0|            else {
26503|      0|                {
26504|      0|                    tmp___4 = strncmp(pattern, f, patlen);
26505|      0|                    tmp___5 = tmp___4;
26506|      0|                }
26507|      0|            }
26508|      0|            r = tmp___5;
26509|      0|            if (!r) {
26510|      0|                r = (int)*(f + patlen);
26511|      0|                if (r == 47) {
26512|      0|                    r = 0;
26513|      0|                }
26514|      0|            }
26515|      0|            return (r);
26516|      0|        }
26517|      0|    }
26518|      0|}
26519|       |_Bool excluded_filename(struct exclude const *ex, char const *f)
26520|      0|{
26521|      0|    size_t exclude_count;
26522|      0|    struct patopts const *exclude;
26523|      0|    size_t i;
26524|      0|    _Bool excluded___0;
26525|      0|    char const *pattern;
26526|      0|    int options;
26527|      0|    int (*matcher)(char const *, char const *, int);
26528|      0|    _Bool matched;
26529|      0|    int tmp;
26530|      0|    char const *p;
26531|      0|    int tmp___0;
26532|       |
26533|      0|    {
26534|      0|        exclude_count = (size_t)ex->exclude_count;
26535|      0|        if (exclude_count == 0UL) {
26536|      0|            return ((_Bool)0);
26537|      0|        }
26538|      0|        else {
26539|      0|            exclude = (struct patopts const *)ex->exclude;
26540|      0|            excluded___0 =
26541|      0|                (_Bool)(!(!((exclude + 0)->options & (int const)(1 << 29))));
26542|      0|            i = (size_t)0;
26543|      0|            {
26544|      0|                while (1) {
26545|      0|while_continue: /* CIL Label */
26546|      0|                    ;
26547|      0|                    if (!(i < exclude_count)) {
26548|      0|                        goto while_break;
26549|      0|                    }
26550|      0|                    pattern = (char const *)(exclude + i)->pattern;
26551|      0|                    options = (int)(exclude + i)->options;
26552|      0|                    if ((int)excluded___0 == !(!(options & (1 << 29)))) {
26553|      0|                        if (options & (1 << 28)) {
26554|      0|                            matcher = &fnmatch;
26555|      0|                        }
26556|      0|                        else {
26557|      0|                            matcher = &fnmatch_no_wildcards;
26558|      0|                        }
26559|      0|                        {
26560|      0|                            tmp = (*matcher)(pattern, f, options);
26561|      0|                            matched = (_Bool)(tmp == 0);
26562|      0|                        }
26563|      0|                        if (!(options & (1 << 30))) {
26564|      0|                            p = f;
26565|      0|                            {
26566|      0|                                while (1) {
26567|      0|while_continue___0: /* CIL Label */
26568|      0|                                    ;
26569|      0|                                    if (*p) {
26570|      0|                                        if (!(!matched)) {
26571|      0|                                            goto while_break___0;
26572|      0|                                        }
26573|      0|                                    }
26574|      0|                                    else {
26575|      0|                                        goto while_break___0;
26576|      0|                                    }
26577|      0|                                    if ((int const) * p == 47) {
26578|      0|                                        if ((int const) * (p + 1) != 47) {
26579|      0|                                            {
26580|      0|                                                tmp___0 = (*matcher)(pattern, p + 1, options);
26581|      0|                                                matched = (_Bool)(tmp___0 == 0);
26582|      0|                                            }
26583|      0|                                        }
26584|      0|                                    }
26585|      0|                                    p++;
26586|      0|                                }
26587|      0|while_break___0: /* CIL Label */
26588|      0|                                ;
26589|      0|                            }
26590|      0|                        }
26591|      0|                        excluded___0 = (_Bool)((int)excluded___0 ^ (int)matched);
26592|      0|                    }
26593|      0|                    i++;
26594|      0|                }
26595|      0|while_break: /* CIL Label */
26596|      0|                ;
26597|      0|            }
26598|      0|            return (excluded___0);
26599|      0|        }
26600|      0|    }
26601|      0|}
26602|       |void add_exclude(struct exclude *ex, char const *pattern, int options)
26603|      0|{
26604|      0|    struct patopts *patopts;
26605|      0|    void *tmp;
26606|      0|    size_t tmp___0;
26607|       |
26608|      0|    {
26609|      0|        if (ex->exclude_count == ex->exclude_alloc) {
26610|      0|            {
26611|      0|                tmp = x2nrealloc((void *)ex->exclude, &ex->exclude_alloc,
26612|      0|                                 sizeof(*(ex->exclude)));
26613|      0|                ex->exclude = (struct patopts *)tmp;
26614|      0|            }
26615|      0|        }
26616|      0|        tmp___0 = ex->exclude_count;
26617|      0|        (ex->exclude_count)++;
26618|      0|        patopts = ex->exclude + tmp___0;
26619|      0|        patopts->pattern = pattern;
26620|      0|        patopts->options = options;
26621|      0|        return;
26622|      0|    }
26623|      0|}
26624|       |int add_exclude_file(void (*add_func)(struct exclude *, char const *, int),
26625|       |                     struct exclude *ex, char const *filename, int options,
26626|       |                     char line_end)
26627|      0|{
26628|      0|    _Bool use_stdin;
26629|      0|    FILE *in;
26630|      0|    char *buf;
26631|      0|    char *p;
26632|      0|    char const *pattern;
26633|      0|    char const *lim;
26634|      0|    size_t buf_alloc;
26635|      0|    size_t buf_count;
26636|      0|    int c;
26637|      0|    int e;
26638|      0|    void *tmp;
26639|      0|    size_t tmp___0;
26640|      0|    int *tmp___1;
26641|      0|    int tmp___2;
26642|      0|    int *tmp___3;
26643|      0|    int tmp___4;
26644|      0|    void *tmp___5;
26645|      0|    char *pattern_end;
26646|      0|    _Bool tmp___6;
26647|      0|    _Bool tmp___7;
26648|      0|    int *tmp___8;
26649|      0|    int tmp___9;
26650|      0|    int tmp___10;
26651|      0|    int tmp___11;
26652|       |
26653|      0|    {
26654|      0|        if ((int const) * (filename + 0) == 45) {
26655|      0|            if (!*(filename + 1)) {
26656|      0|                tmp___9 = 1;
26657|      0|            }
26658|      0|            else {
26659|      0|                tmp___9 = 0;
26660|      0|            }
26661|      0|        }
26662|      0|        else {
26663|      0|            tmp___9 = 0;
26664|      0|        }
26665|      0|        use_stdin = (_Bool)tmp___9;
26666|      0|        buf = (char *)((void *)0);
26667|      0|        buf_alloc = (size_t)0;
26668|      0|        buf_count = (size_t)0;
26669|      0|        e = 0;
26670|      0|        if (use_stdin) {
26671|      0|            in = stdin;
26672|      0|        }
26673|      0|        else {
26674|      0|            {
26675|      0|                in = fopen((char const * /* __restrict  */)filename,
26676|      0|                           (char const * /* __restrict  */) "r");
26677|      0|            }
26678|      0|            if (!in) {
26679|      0|                return (-1);
26680|      0|            }
26681|      0|        }
26682|      0|        {
26683|      0|            while (1) {
26684|      0|while_continue: /* CIL Label */
26685|      0|                ;
26686|      0|                {
26687|      0|                    c = getc_unlocked(in);
26688|      0|                }
26689|      0|                if (!(c != -1)) {
26690|      0|                    goto while_break;
26691|      0|                }
26692|      0|                if (buf_count == buf_alloc) {
26693|      0|                    {
26694|      0|                        tmp = x2realloc((void *)buf, &buf_alloc);
26695|      0|                        buf = (char *)tmp;
26696|      0|                    }
26697|      0|                }
26698|      0|                tmp___0 = buf_count;
26699|      0|                buf_count++;
26700|      0|                *(buf + tmp___0) = (char)c;
26701|      0|            }
26702|      0|while_break: /* CIL Label */
26703|      0|            ;
26704|      0|        }
26705|      0|        {
26706|      0|            tmp___2 = ferror_unlocked(in);
26707|      0|        }
26708|      0|        if (tmp___2) {
26709|      0|            {
26710|      0|                tmp___1 = __errno_location();
26711|      0|                e = *tmp___1;
26712|      0|            }
26713|      0|        }
26714|      0|        if (!use_stdin) {
26715|      0|            {
26716|      0|                tmp___4 = fclose(in);
26717|      0|            }
26718|      0|            if (tmp___4 != 0) {
26719|      0|                {
26720|      0|                    tmp___3 = __errno_location();
26721|      0|                    e = *tmp___3;
26722|      0|                }
26723|      0|            }
26724|      0|        }
26725|      0|        {
26726|      0|            tmp___5 = xrealloc((void *)buf, buf_count + 1UL);
26727|      0|            buf = (char *)tmp___5;
26728|      0|            *(buf + buf_count) = line_end;
26729|      0|        }
26730|      0|        if (buf_count == 0UL) {
26731|      0|            tmp___10 = 0;
26732|      0|        }
26733|      0|        else {
26734|      0|            if ((int)*(buf + (buf_count - 1UL)) == (int)line_end) {
26735|      0|                tmp___10 = 0;
26736|      0|            }
26737|      0|            else {
26738|      0|                tmp___10 = 1;
26739|      0|            }
26740|      0|        }
26741|      0|        lim = (char const *)((buf + buf_count) + tmp___10);
26742|      0|        pattern = (char const *)buf;
26743|      0|        p = buf;
26744|      0|        {
26745|      0|            while (1) {
26746|      0|while_continue___0: /* CIL Label */
26747|      0|                ;
26748|      0|                if (!((unsigned long)p < (unsigned long)lim)) {
26749|      0|                    goto while_break___0;
26750|      0|                }
26751|      0|                if ((int)*p == (int)line_end) {
26752|      0|                    {
26753|      0|                        pattern_end = p;
26754|      0|                        tmp___7 = is_space((unsigned char)line_end);
26755|      0|                    }
26756|      0|                    if (tmp___7) {
26757|      0|                        {
26758|      0|                            while (1) {
26759|      0|while_continue___1: /* CIL Label */
26760|      0|                                ;
26761|      0|                                if ((unsigned long)pattern_end == (unsigned long)pattern) {
26762|      0|                                    goto next_pattern;
26763|      0|                                }
26764|      0|                                else {
26765|      0|                                    {
26766|      0|                                        tmp___6 = is_space((unsigned char)*(pattern_end + -1));
26767|      0|                                    }
26768|      0|                                    if (!tmp___6) {
26769|      0|                                        goto while_break___1;
26770|      0|                                    }
26771|      0|                                }
26772|      0|                                pattern_end--;
26773|      0|                            }
26774|      0|while_break___1: /* CIL Label */
26775|      0|                            ;
26776|      0|                        }
26777|      0|                    }
26778|      0|                    {
26779|      0|                        *pattern_end = (char)'\000';
26780|      0|                        (*add_func)(ex, pattern, options);
26781|      0|                    }
26782|      0|next_pattern:
26783|      0|                    pattern = (char const *)(p + 1);
26784|      0|                }
26785|      0|                p++;
26786|      0|            }
26787|      0|while_break___0: /* CIL Label */
26788|      0|            ;
26789|      0|        }
26790|      0|        {
26791|      0|            tmp___8 = __errno_location();
26792|      0|            *tmp___8 = e;
26793|      0|        }
26794|      0|        if (e) {
26795|      0|            tmp___11 = -1;
26796|      0|        }
26797|      0|        else {
26798|      0|            tmp___11 = 0;
26799|      0|        }
26800|      0|        return (tmp___11);
26801|      0|    }
26802|      0|}
26803|       |/* #pragma merger("0","017.exitfail.o.i","") */
26804|       |int volatile exit_failure = (int volatile)1;
26805|       |/* #pragma merger("0","018.full-write.o.i","") */
26806|       |size_t safe_write(int fd, void const *buf, size_t count);
26807|       |size_t full_write(int fd, void const *buf, size_t count)
26808|      0|{
26809|      0|    size_t total;
26810|      0|    char const *ptr;
26811|      0|    size_t n_rw;
26812|      0|    size_t tmp;
26813|      0|    int *tmp___0;
26814|       |
26815|      0|    {
26816|      0|        total = (size_t)0;
26817|      0|        ptr = (char const *)buf;
26818|      0|        {
26819|      0|            while (1) {
26820|      0|while_continue: /* CIL Label */
26821|      0|                ;
26822|      0|                if (!(count > 0UL)) {
26823|      0|                    goto while_break;
26824|      0|                }
26825|      0|                {
26826|      0|                    tmp = safe_write(fd, (void const *)ptr, count);
26827|      0|                    n_rw = tmp;
26828|      0|                }
26829|      0|                if (n_rw == 0xffffffffffffffffUL) {
26830|      0|                    goto while_break;
26831|      0|                }
26832|      0|                if (n_rw == 0UL) {
26833|      0|                    {
26834|      0|                        tmp___0 = __errno_location();
26835|      0|                        *tmp___0 = 28;
26836|      0|                    }
26837|      0|                    goto while_break;
26838|      0|                }
26839|      0|                total += n_rw;
26840|      0|                ptr += n_rw;
26841|      0|                count -= n_rw;
26842|      0|            }
26843|      0|while_break: /* CIL Label */
26844|      0|            ;
26845|      0|        }
26846|      0|        return (total);
26847|      0|    }
26848|      0|}
26849|       |/* #pragma merger("0","019.getdate.o.i","") */
26850|       |__attribute__((__nothrow__))
26851|       |time_t(__attribute__((__leaf__)) rpl_mktime)(struct tm *tp);
26852|       |int gettime(struct timespec *ts);
26853|       |extern __attribute__((__nothrow__)) int(__attribute__((__leaf__))
26854|       |                                        toupper)(int __c);
26855|       |static int yyerror(char *s __attribute__((__unused__)));
26856|       |static int yylex(YYSTYPE *lvalp, parser_control *pc);
26857|       |static char const yytranslate[275] = {
26858|       |    (char const)0,  (char const)2,  (char const)2,  (char const)2,
26859|       |    (char const)2,  (char const)2,  (char const)2,  (char const)2,
26860|       |    (char const)2,  (char const)2,  (char const)2,  (char const)2,
26861|       |    (char const)2,  (char const)2,  (char const)2,  (char const)2,
26862|       |    (char const)2,  (char const)2,  (char const)2,  (char const)2,
26863|       |    (char const)2,  (char const)2,  (char const)2,  (char const)2,
26864|       |    (char const)2,  (char const)2,  (char const)2,  (char const)2,
26865|       |    (char const)2,  (char const)2,  (char const)2,  (char const)2,
26866|       |    (char const)2,  (char const)2,  (char const)2,  (char const)2,
26867|       |    (char const)2,  (char const)2,  (char const)2,  (char const)2,
26868|       |    (char const)2,  (char const)2,  (char const)2,  (char const)2,
26869|       |    (char const)23, (char const)2,  (char const)2,  (char const)24,
26870|       |    (char const)2,  (char const)2,  (char const)2,  (char const)2,
26871|       |    (char const)2,  (char const)2,  (char const)2,  (char const)2,
26872|       |    (char const)2,  (char const)2,  (char const)22, (char const)2,
26873|       |    (char const)2,  (char const)2,  (char const)2,  (char const)2,
26874|       |    (char const)21, (char const)2,  (char const)2,  (char const)2,
26875|       |    (char const)2,  (char const)2,  (char const)2,  (char const)2,
26876|       |    (char const)2,  (char const)2,  (char const)2,  (char const)2,
26877|       |    (char const)2,  (char const)2,  (char const)2,  (char const)2,
26878|       |    (char const)2,  (char const)2,  (char const)2,  (char const)2,
26879|       |    (char const)2,  (char const)2,  (char const)2,  (char const)2,
26880|       |    (char const)2,  (char const)2,  (char const)2,  (char const)2,
26881|       |    (char const)2,  (char const)2,  (char const)2,  (char const)2,
26882|       |    (char const)2,  (char const)2,  (char const)2,  (char const)2,
26883|       |    (char const)2,  (char const)2,  (char const)2,  (char const)2,
26884|       |    (char const)2,  (char const)2,  (char const)2,  (char const)2,
26885|       |    (char const)2,  (char const)2,  (char const)2,  (char const)2,
26886|       |    (char const)2,  (char const)2,  (char const)2,  (char const)2,
26887|       |    (char const)2,  (char const)2,  (char const)2,  (char const)2,
26888|       |    (char const)2,  (char const)2,  (char const)2,  (char const)2,
26889|       |    (char const)2,  (char const)2,  (char const)2,  (char const)2,
26890|       |    (char const)2,  (char const)2,  (char const)2,  (char const)2,
26891|       |    (char const)2,  (char const)2,  (char const)2,  (char const)2,
26892|       |    (char const)2,  (char const)2,  (char const)2,  (char const)2,
26893|       |    (char const)2,  (char const)2,  (char const)2,  (char const)2,
26894|       |    (char const)2,  (char const)2,  (char const)2,  (char const)2,
26895|       |    (char const)2,  (char const)2,  (char const)2,  (char const)2,
26896|       |    (char const)2,  (char const)2,  (char const)2,  (char const)2,
26897|       |    (char const)2,  (char const)2,  (char const)2,  (char const)2,
26898|       |    (char const)2,  (char const)2,  (char const)2,  (char const)2,
26899|       |    (char const)2,  (char const)2,  (char const)2,  (char const)2,
26900|       |    (char const)2,  (char const)2,  (char const)2,  (char const)2,
26901|       |    (char const)2,  (char const)2,  (char const)2,  (char const)2,
26902|       |    (char const)2,  (char const)2,  (char const)2,  (char const)2,
26903|       |    (char const)2,  (char const)2,  (char const)2,  (char const)2,
26904|       |    (char const)2,  (char const)2,  (char const)2,  (char const)2,
26905|       |    (char const)2,  (char const)2,  (char const)2,  (char const)2,
26906|       |    (char const)2,  (char const)2,  (char const)2,  (char const)2,
26907|       |    (char const)2,  (char const)2,  (char const)2,  (char const)2,
26908|       |    (char const)2,  (char const)2,  (char const)2,  (char const)2,
26909|       |    (char const)2,  (char const)2,  (char const)2,  (char const)2,
26910|       |    (char const)2,  (char const)2,  (char const)2,  (char const)2,
26911|       |    (char const)2,  (char const)2,  (char const)2,  (char const)2,
26912|       |    (char const)2,  (char const)2,  (char const)2,  (char const)2,
26913|       |    (char const)2,  (char const)2,  (char const)2,  (char const)2,
26914|       |    (char const)2,  (char const)2,  (char const)2,  (char const)2,
26915|       |    (char const)2,  (char const)2,  (char const)2,  (char const)2,
26916|       |    (char const)2,  (char const)2,  (char const)2,  (char const)2,
26917|       |    (char const)2,  (char const)2,  (char const)2,  (char const)2,
26918|       |    (char const)2,  (char const)2,  (char const)2,  (char const)2,
26919|       |    (char const)2,  (char const)2,  (char const)2,  (char const)2,
26920|       |    (char const)2,  (char const)2,  (char const)2,  (char const)2,
26921|       |    (char const)2,  (char const)2,  (char const)2,  (char const)2,
26922|       |    (char const)1,  (char const)3,  (char const)4,  (char const)5,
26923|       |    (char const)6,  (char const)7,  (char const)8,  (char const)9,
26924|       |    (char const)10, (char const)11, (char const)12, (char const)13,
26925|       |    (char const)14, (char const)15, (char const)16, (char const)17,
26926|       |    (char const)18, (char const)19, (char const)20
26927|       |};
26928|       |static short const yyr1[66] = {
26929|       |    (short const)0,  (short const)25, (short const)25, (short const)26,
26930|       |    (short const)27, (short const)27, (short const)28, (short const)28,
26931|       |    (short const)28, (short const)28, (short const)28, (short const)28,
26932|       |    (short const)28, (short const)29, (short const)29, (short const)29,
26933|       |    (short const)29, (short const)29, (short const)30, (short const)30,
26934|       |    (short const)31, (short const)31, (short const)31, (short const)32,
26935|       |    (short const)32, (short const)32, (short const)33, (short const)33,
26936|       |    (short const)33, (short const)33, (short const)33, (short const)33,
26937|       |    (short const)33, (short const)33, (short const)33, (short const)34,
26938|       |    (short const)34, (short const)35, (short const)35, (short const)35,
26939|       |    (short const)35, (short const)35, (short const)35, (short const)35,
26940|       |    (short const)35, (short const)35, (short const)35, (short const)35,
26941|       |    (short const)35, (short const)35, (short const)35, (short const)35,
26942|       |    (short const)35, (short const)35, (short const)35, (short const)35,
26943|       |    (short const)35, (short const)36, (short const)36, (short const)37,
26944|       |    (short const)37, (short const)38, (short const)38, (short const)39,
26945|       |    (short const)40, (short const)40
26946|       |};
26947|       |static short const yyr2[66] = {
26948|       |    (short const)0, (short const)1, (short const)1, (short const)2,
26949|       |    (short const)0, (short const)2, (short const)1, (short const)1,
26950|       |    (short const)1, (short const)1, (short const)1, (short const)1,
26951|       |    (short const)1, (short const)2, (short const)4, (short const)4,
26952|       |    (short const)6, (short const)6, (short const)1, (short const)2,
26953|       |    (short const)1, (short const)1, (short const)2, (short const)1,
26954|       |    (short const)2, (short const)2, (short const)3, (short const)5,
26955|       |    (short const)3, (short const)3, (short const)3, (short const)2,
26956|       |    (short const)4, (short const)2, (short const)3, (short const)2,
26957|       |    (short const)1, (short const)2, (short const)2, (short const)1,
26958|       |    (short const)2, (short const)2, (short const)1, (short const)2,
26959|       |    (short const)2, (short const)1, (short const)2, (short const)2,
26960|       |    (short const)1, (short const)2, (short const)2, (short const)1,
26961|       |    (short const)2, (short const)2, (short const)2, (short const)2,
26962|       |    (short const)1, (short const)1, (short const)1, (short const)1,
26963|       |    (short const)1, (short const)1, (short const)1, (short const)1,
26964|       |    (short const)0, (short const)1
26965|       |};
26966|       |static short const yydefact[81] = {
26967|       |    (short const)4,  (short const)0,  (short const)1,  (short const)2,
26968|       |    (short const)60, (short const)62, (short const)59, (short const)61,
26969|       |    (short const)3,  (short const)57, (short const)58, (short const)23,
26970|       |    (short const)45, (short const)21, (short const)48, (short const)18,
26971|       |    (short const)51, (short const)0,  (short const)42, (short const)56,
26972|       |    (short const)39, (short const)20, (short const)0,  (short const)63,
26973|       |    (short const)0,  (short const)0,  (short const)5,  (short const)6,
26974|       |    (short const)7,  (short const)8,  (short const)10, (short const)9,
26975|       |    (short const)11, (short const)36, (short const)12, (short const)24,
26976|       |    (short const)19, (short const)0,  (short const)31, (short const)22,
26977|       |    (short const)44, (short const)47, (short const)50, (short const)41,
26978|       |    (short const)53, (short const)38, (short const)25, (short const)43,
26979|       |    (short const)46, (short const)13, (short const)49, (short const)33,
26980|       |    (short const)40, (short const)52, (short const)37, (short const)0,
26981|       |    (short const)0,  (short const)0,  (short const)54, (short const)55,
26982|       |    (short const)35, (short const)30, (short const)0,  (short const)29,
26983|       |    (short const)34, (short const)28, (short const)64, (short const)26,
26984|       |    (short const)32, (short const)65, (short const)15, (short const)0,
26985|       |    (short const)14, (short const)0,  (short const)64, (short const)27,
26986|       |    (short const)17, (short const)16, (short const)0,  (short const)0,
26987|       |    (short const)0
26988|       |};
26989|       |static short const yydefgoto[16] = {
26990|       |    (short const)78, (short const)2,  (short const)3,  (short const)26,
26991|       |    (short const)27, (short const)28, (short const)29, (short const)30,
26992|       |    (short const)31, (short const)32, (short const)33, (short const)8,
26993|       |    (short const)9,  (short const)10, (short const)34, (short const)72
26994|       |};
26995|       |static short const yypact[81] = {
26996|       |    (short const) - 19,    (short const)29,       (short const) - 32768,
26997|       |    (short const)15,       (short const) - 32768, (short const) - 32768,
26998|       |    (short const) - 32768, (short const) - 32768, (short const) - 32768,
26999|       |    (short const) - 32768, (short const) - 32768, (short const) - 8,
27000|       |    (short const) - 32768, (short const) - 32768, (short const) - 32768,
27001|       |    (short const)36,       (short const) - 32768, (short const) - 4,
27002|       |    (short const) - 32768, (short const) - 32768, (short const) - 32768,
27003|       |    (short const)38,       (short const)30,       (short const) - 5,
27004|       |    (short const)39,       (short const)40,       (short const) - 32768,
27005|       |    (short const) - 32768, (short const) - 32768, (short const) - 32768,
27006|       |    (short const) - 32768, (short const) - 32768, (short const) - 32768,
27007|       |    (short const)49,       (short const) - 32768, (short const) - 32768,
27008|       |    (short const) - 32768, (short const)41,       (short const)32,
27009|       |    (short const) - 32768, (short const) - 32768, (short const) - 32768,
27010|       |    (short const) - 32768, (short const) - 32768, (short const) - 32768,
27011|       |    (short const) - 32768, (short const) - 32768, (short const) - 32768,
27012|       |    (short const) - 32768, (short const) - 32768, (short const) - 32768,
27013|       |    (short const)33,       (short const) - 32768, (short const) - 32768,
27014|       |    (short const) - 32768, (short const)42,       (short const)43,
27015|       |    (short const)44,       (short const) - 32768, (short const) - 32768,
27016|       |    (short const) - 32768, (short const) - 32768, (short const)45,
27017|       |    (short const) - 32768, (short const) - 32768, (short const) - 32768,
27018|       |    (short const) - 6,     (short const)46,       (short const) - 32768,
27019|       |    (short const) - 32768, (short const) - 32768, (short const)19,
27020|       |    (short const) - 32768, (short const)47,       (short const)8,
27021|       |    (short const) - 32768, (short const) - 32768, (short const) - 32768,
27022|       |    (short const)56,       (short const)57,       (short const) - 32768
27023|       |};
27024|       |static short const yypgoto[16] = {
27025|       |    (short const) - 32768, (short const) - 32768, (short const) - 32768,
27026|       |    (short const) - 32768, (short const) - 32768, (short const) - 32768,
27027|       |    (short const) - 32768, (short const) - 32768, (short const) - 32768,
27028|       |    (short const) - 32768, (short const) - 32768, (short const) - 32768,
27029|       |    (short const) - 32768, (short const) - 11,    (short const) - 32768,
27030|       |    (short const) - 10
27031|       |};
27032|       |static short const yytable[71] = {
27033|       |    (short const)46, (short const)47, (short const)1,  (short const)48,
27034|       |    (short const)69, (short const)49, (short const)50, (short const)51,
27035|       |    (short const)52, (short const)53, (short const)54, (short const)70,
27036|       |    (short const)55, (short const)37, (short const)38, (short const)35,
27037|       |    (short const)71, (short const)56, (short const)69, (short const)57,
27038|       |    (short const)11, (short const)12, (short const)13, (short const)14,
27039|       |    (short const)15, (short const)76, (short const)16, (short const)17,
27040|       |    (short const)18, (short const)19, (short const)20, (short const)21,
27041|       |    (short const)22, (short const)23, (short const)24, (short const)25,
27042|       |    (short const)40, (short const)5,  (short const)41, (short const)7,
27043|       |    (short const)36, (short const)42, (short const)39, (short const)43,
27044|       |    (short const)44, (short const)45, (short const)4,  (short const)5,
27045|       |    (short const)6,  (short const)7,  (short const)63, (short const)64,
27046|       |    (short const)60, (short const)58, (short const)59, (short const)62,
27047|       |    (short const)79, (short const)80, (short const)61, (short const)65,
27048|       |    (short const)74, (short const)66, (short const)67, (short const)68,
27049|       |    (short const)77, (short const)75, (short const)0,  (short const)0,
27050|       |    (short const)0,  (short const)0,  (short const)73
27051|       |};
27052|       |static short const yycheck[71] = {
27053|       |    (short const)5,    (short const)6,    (short const)21,   (short const)8,
27054|       |    (short const)10,   (short const)10,   (short const)11,   (short const)12,
27055|       |    (short const)13,   (short const)14,   (short const)15,   (short const)17,
27056|       |    (short const)17,   (short const)17,   (short const)18,   (short const)23,
27057|       |    (short const)22,   (short const)22,   (short const)10,   (short const)24,
27058|       |    (short const)5,    (short const)6,    (short const)7,    (short const)8,
27059|       |    (short const)9,    (short const)17,   (short const)11,   (short const)12,
27060|       |    (short const)13,   (short const)14,   (short const)15,   (short const)16,
27061|       |    (short const)17,   (short const)18,   (short const)19,   (short const)20,
27062|       |    (short const)6,    (short const)18,   (short const)8,    (short const)20,
27063|       |    (short const)4,    (short const)11,   (short const)4,    (short const)13,
27064|       |    (short const)14,   (short const)15,   (short const)17,   (short const)18,
27065|       |    (short const)19,   (short const)20,   (short const)17,   (short const)18,
27066|       |    (short const)3,    (short const)14,   (short const)14,   (short const)23,
27067|       |    (short const)0,    (short const)0,    (short const)17,   (short const)17,
27068|       |    (short const)71,   (short const)18,   (short const)18,   (short const)18,
27069|       |    (short const)74,   (short const)18,   (short const) - 1, (short const) - 1,
27070|       |    (short const) - 1, (short const) - 1, (short const)24
27071|       |};
27072|       |int yyparse(void *parm);
27073|       |int yyparse(void *parm)
27074|      0|{
27075|      0|    register int yystate;
27076|      0|    register int yyn;
27077|      0|    register short *yyssp;
27078|      0|    register YYSTYPE *yyvsp;
27079|      0|    int yyerrstatus;
27080|      0|    int yychar1;
27081|      0|    short yyssa[200];
27082|      0|    YYSTYPE yyvsa[200];
27083|      0|    short *yyss;
27084|      0|    YYSTYPE *yyvs;
27085|      0|    int yystacksize;
27086|      0|    int yyfree_stacks;
27087|      0|    int yychar;
27088|      0|    YYSTYPE yylval;
27089|      0|    int yynerrs;
27090|      0|    YYSTYPE yyval;
27091|      0|    int yylen;
27092|      0|    YYSTYPE *yyvs1;
27093|      0|    short *yyss1;
27094|      0|    int size;
27095|      0|    void *tmp;
27096|      0|    void *tmp___0;
27097|      0|    int tmp___1;
27098|      0|    long tmp___2;
27099|      0|    void *__cil_tmp26;
27100|      0|    void *__cil_tmp27;
27101|      0|    int __cil_tmp28;
27102|      0|    char *__cil_tmp29;
27103|      0|    char *__cil_tmp30;
27104|       |
27105|      0|    {
27106|      0|        yychar1 = 0;
27107|      0|        yyss = yyssa;
27108|      0|        yyvs = yyvsa;
27109|      0|        yystacksize = 200;
27110|      0|        yyfree_stacks = 0;
27111|      0|        yystate = 0;
27112|      0|        yyerrstatus = 0;
27113|      0|        yynerrs = 0;
27114|      0|        yychar = -2;
27115|      0|        yyssp = yyss - 1;
27116|      0|        yyvsp = yyvs;
27117|      0|yynewstate:
27118|      0|        yyssp++;
27119|      0|        *yyssp = (short)yystate;
27120|      0|        if ((unsigned long)yyssp >= (unsigned long)((yyss + yystacksize) - 1)) {
27121|      0|            yyvs1 = yyvs;
27122|      0|            yyss1 = yyss;
27123|      0|            size = (int)((yyssp - yyss) + 1L);
27124|      0|            if (yystacksize >= 10000) {
27125|      0|                {
27126|      0|                    yyerror((char *)"parser stack overflow");
27127|      0|                }
27128|      0|                if (yyfree_stacks) {
27129|      0|                    {
27130|      0|                        free((void *)yyss);
27131|      0|                        free((void *)yyvs);
27132|      0|                    }
27133|      0|                }
27134|      0|                return (2);
27135|      0|            }
27136|      0|            yystacksize *= 2;
27137|      0|            if (yystacksize > 10000) {
27138|      0|                yystacksize = 10000;
27139|      0|            }
27140|      0|            {
27141|      0|                tmp = __builtin_alloca((unsigned long)yystacksize * sizeof(*yyssp));
27142|      0|                yyss = (short *)tmp;
27143|      0|                __builtin_memcpy(
27144|      0|                    (void *)((char *)yyss), (void const *)((char *)yyss1),
27145|      0|                    (unsigned long)((unsigned int)size * (unsigned int)sizeof(*yyssp)));
27146|      0|                tmp___0 = __builtin_alloca((unsigned long)yystacksize * sizeof(*yyvsp));
27147|      0|                yyvs = (YYSTYPE *)tmp___0;
27148|      0|                __builtin_memcpy(
27149|      0|                    (void *)((char *)yyvs), (void const *)((char *)yyvs1),
27150|      0|                    (unsigned long)((unsigned int)size * (unsigned int)sizeof(*yyvsp)));
27151|      0|                yyssp = (yyss + size) - 1;
27152|      0|                yyvsp = (yyvs + size) - 1;
27153|      0|            }
27154|      0|            if ((unsigned long)yyssp >= (unsigned long)((yyss + yystacksize) - 1)) {
27155|      0|                goto yyabortlab;
27156|      0|            }
27157|      0|        }
27158|      0|        goto yybackup;
27159|      0|yybackup:
27160|      0|        yyn = (int)yypact[yystate];
27161|      0|        if (yyn == -32768) {
27162|      0|            goto yydefault;
27163|      0|        }
27164|      0|        if (yychar == -2) {
27165|      0|            {
27166|      0|                yychar = yylex(&yylval, (parser_control *)parm);
27167|      0|            }
27168|      0|        }
27169|      0|        if (yychar <= 0) {
27170|      0|            yychar1 = 0;
27171|      0|            yychar = 0;
27172|      0|        }
27173|      0|        else {
27174|      0|            if ((unsigned int)yychar <= 274U) {
27175|      0|                tmp___1 = (int const)yytranslate[yychar];
27176|      0|            }
27177|      0|            else {
27178|      0|                tmp___1 = (int const)41;
27179|      0|            }
27180|      0|            yychar1 = (int)tmp___1;
27181|      0|        }
27182|      0|        yyn += yychar1;
27183|      0|        if (yyn < 0) {
27184|      0|            goto yydefault;
27185|      0|        }
27186|      0|        else {
27187|      0|            if (yyn > 70) {
27188|      0|                goto yydefault;
27189|      0|            }
27190|      0|            else {
27191|      0|                if ((int const)yycheck[yyn] != (int const)yychar1) {
27192|      0|                    goto yydefault;
27193|      0|                }
27194|      0|            }
27195|      0|        }
27196|      0|        yyn = (int)yytable[yyn];
27197|      0|        if (yyn < 0) {
27198|      0|            if (yyn == -32768) {
27199|      0|                goto yyerrlab;
27200|      0|            }
27201|      0|            yyn = -yyn;
27202|      0|            goto yyreduce;
27203|      0|        }
27204|      0|        else {
27205|      0|            if (yyn == 0) {
27206|      0|                goto yyerrlab;
27207|      0|            }
27208|      0|        }
27209|      0|        if (yyn == 80) {
27210|      0|            goto yyacceptlab;
27211|      0|        }
27212|      0|        if (yychar != 0) {
27213|      0|            yychar = -2;
27214|      0|        }
27215|      0|        yyvsp++;
27216|      0|        *yyvsp = yylval;
27217|      0|        if (yyerrstatus) {
27218|      0|            yyerrstatus--;
27219|      0|        }
27220|      0|        yystate = yyn;
27221|      0|        goto yynewstate;
27222|      0|yydefault:
27223|      0|        yyn = (int)yydefact[yystate];
27224|      0|        if (yyn == 0) {
27225|      0|            goto yyerrlab;
27226|      0|        }
27227|      0|yyreduce:
27228|      0|        yylen = (int)yyr2[yyn];
27229|      0|        if (yylen > 0) {
27230|      0|            yyval = *(yyvsp + (1 - yylen));
27231|      0|        }
27232|      0|        {
27233|      0|            if (yyn == 3) {
27234|      0|                goto case_3;
27235|      0|            }
27236|      0|            if (yyn == 6) {
27237|      0|                goto case_6;
27238|      0|            }
27239|      0|            if (yyn == 7) {
27240|      0|                goto case_7;
27241|      0|            }
27242|      0|            if (yyn == 8) {
27243|      0|                goto case_8;
27244|      0|            }
27245|      0|            if (yyn == 9) {
27246|      0|                goto case_9;
27247|      0|            }
27248|      0|            if (yyn == 10) {
27249|      0|                goto case_10;
27250|      0|            }
27251|      0|            if (yyn == 11) {
27252|      0|                goto case_11;
27253|      0|            }
27254|      0|            if (yyn == 13) {
27255|      0|                goto case_13;
27256|      0|            }
27257|      0|            if (yyn == 14) {
27258|      0|                goto case_14;
27259|      0|            }
27260|      0|            if (yyn == 15) {
27261|      0|                goto case_15;
27262|      0|            }
27263|      0|            if (yyn == 16) {
27264|      0|                goto case_16;
27265|      0|            }
27266|      0|            if (yyn == 17) {
27267|      0|                goto case_17;
27268|      0|            }
27269|      0|            if (yyn == 18) {
27270|      0|                goto case_18;
27271|      0|            }
27272|      0|            if (yyn == 19) {
27273|      0|                goto case_19;
27274|      0|            }
27275|      0|            if (yyn == 20) {
27276|      0|                goto case_20;
27277|      0|            }
27278|      0|            if (yyn == 21) {
27279|      0|                goto case_21;
27280|      0|            }
27281|      0|            if (yyn == 22) {
27282|      0|                goto case_22;
27283|      0|            }
27284|      0|            if (yyn == 23) {
27285|      0|                goto case_23;
27286|      0|            }
27287|      0|            if (yyn == 24) {
27288|      0|                goto case_24;
27289|      0|            }
27290|      0|            if (yyn == 25) {
27291|      0|                goto case_25;
27292|      0|            }
27293|      0|            if (yyn == 26) {
27294|      0|                goto case_26;
27295|      0|            }
27296|      0|            if (yyn == 27) {
27297|      0|                goto case_27;
27298|      0|            }
27299|      0|            if (yyn == 28) {
27300|      0|                goto case_28;
27301|      0|            }
27302|      0|            if (yyn == 29) {
27303|      0|                goto case_29;
27304|      0|            }
27305|      0|            if (yyn == 30) {
27306|      0|                goto case_30;
27307|      0|            }
27308|      0|            if (yyn == 31) {
27309|      0|                goto case_31;
27310|      0|            }
27311|      0|            if (yyn == 32) {
27312|      0|                goto case_32;
27313|      0|            }
27314|      0|            if (yyn == 33) {
27315|      0|                goto case_33;
27316|      0|            }
27317|      0|            if (yyn == 34) {
27318|      0|                goto case_34;
27319|      0|            }
27320|      0|            if (yyn == 35) {
27321|      0|                goto case_35;
27322|      0|            }
27323|      0|            if (yyn == 37) {
27324|      0|                goto case_37;
27325|      0|            }
27326|      0|            if (yyn == 38) {
27327|      0|                goto case_38;
27328|      0|            }
27329|      0|            if (yyn == 39) {
27330|      0|                goto case_39;
27331|      0|            }
27332|      0|            if (yyn == 40) {
27333|      0|                goto case_40;
27334|      0|            }
27335|      0|            if (yyn == 41) {
27336|      0|                goto case_41;
27337|      0|            }
27338|      0|            if (yyn == 42) {
27339|      0|                goto case_42;
27340|      0|            }
27341|      0|            if (yyn == 43) {
27342|      0|                goto case_43;
27343|      0|            }
27344|      0|            if (yyn == 44) {
27345|      0|                goto case_44;
27346|      0|            }
27347|      0|            if (yyn == 45) {
27348|      0|                goto case_45;
27349|      0|            }
27350|      0|            if (yyn == 46) {
27351|      0|                goto case_46;
27352|      0|            }
27353|      0|            if (yyn == 47) {
27354|      0|                goto case_47;
27355|      0|            }
27356|      0|            if (yyn == 48) {
27357|      0|                goto case_48;
27358|      0|            }
27359|      0|            if (yyn == 49) {
27360|      0|                goto case_49;
27361|      0|            }
27362|      0|            if (yyn == 50) {
27363|      0|                goto case_50;
27364|      0|            }
27365|      0|            if (yyn == 51) {
27366|      0|                goto case_51;
27367|      0|            }
27368|      0|            if (yyn == 52) {
27369|      0|                goto case_52;
27370|      0|            }
27371|      0|            if (yyn == 53) {
27372|      0|                goto case_53;
27373|      0|            }
27374|      0|            if (yyn == 54) {
27375|      0|                goto case_54;
27376|      0|            }
27377|      0|            if (yyn == 55) {
27378|      0|                goto case_55;
27379|      0|            }
27380|      0|            if (yyn == 56) {
27381|      0|                goto case_56;
27382|      0|            }
27383|      0|            if (yyn == 60) {
27384|      0|                goto case_60;
27385|      0|            }
27386|      0|            if (yyn == 62) {
27387|      0|                goto case_62;
27388|      0|            }
27389|      0|            if (yyn == 63) {
27390|      0|                goto case_63;
27391|      0|            }
27392|      0|            if (yyn == 64) {
27393|      0|                goto case_64;
27394|      0|            }
27395|      0|            if (yyn == 65) {
27396|      0|                goto case_65;
27397|      0|            }
27398|      0|            goto switch_break;
27399|      0|case_3: /* CIL Label */
27400|      0|            ((parser_control *)parm)->seconds = (yyvsp + 0)->timespec;
27401|      0|            ((parser_control *)parm)->timespec_seen = (_Bool)1;
27402|      0|            goto switch_break;
27403|      0|case_6: /* CIL Label */
27404|      0|            (((parser_control *)parm)->times_seen)++;
27405|      0|            goto switch_break;
27406|      0|case_7: /* CIL Label */
27407|      0|            (((parser_control *)parm)->local_zones_seen)++;
27408|      0|            goto switch_break;
27409|      0|case_8: /* CIL Label */
27410|      0|            (((parser_control *)parm)->zones_seen)++;
27411|      0|            goto switch_break;
27412|      0|case_9: /* CIL Label */
27413|      0|            (((parser_control *)parm)->dates_seen)++;
27414|      0|            goto switch_break;
27415|      0|case_10: /* CIL Label */
27416|      0|            (((parser_control *)parm)->days_seen)++;
27417|      0|            goto switch_break;
27418|      0|case_11: /* CIL Label */
27419|      0|            (((parser_control *)parm)->rels_seen)++;
27420|      0|            goto switch_break;
27421|      0|case_13: /* CIL Label */
27422|      0|            ((parser_control *)parm)->hour = (yyvsp + -1)->textintval.value;
27423|      0|            ((parser_control *)parm)->minutes = 0L;
27424|      0|            ((parser_control *)parm)->seconds.tv_sec = (__time_t)0;
27425|      0|            ((parser_control *)parm)->seconds.tv_nsec = (__syscall_slong_t)0;
27426|      0|            ((parser_control *)parm)->meridian = (int)(yyvsp + 0)->intval;
27427|      0|            goto switch_break;
27428|      0|case_14: /* CIL Label */
27429|      0|            ((parser_control *)parm)->hour = (yyvsp + -3)->textintval.value;
27430|      0|            ((parser_control *)parm)->minutes = (yyvsp + -1)->textintval.value;
27431|      0|            ((parser_control *)parm)->seconds.tv_sec = (__time_t)0;
27432|      0|            ((parser_control *)parm)->seconds.tv_nsec = (__syscall_slong_t)0;
27433|      0|            ((parser_control *)parm)->meridian = (int)(yyvsp + 0)->intval;
27434|      0|            goto switch_break;
27435|      0|case_15: /* CIL Label */
27436|      0|            ((parser_control *)parm)->hour = (yyvsp + -3)->textintval.value;
27437|      0|            ((parser_control *)parm)->minutes = (yyvsp + -1)->textintval.value;
27438|      0|            ((parser_control *)parm)->seconds.tv_sec = (__time_t)0;
27439|      0|            ((parser_control *)parm)->seconds.tv_nsec = (__syscall_slong_t)0;
27440|      0|            ((parser_control *)parm)->meridian = 2;
27441|      0|            (((parser_control *)parm)->zones_seen)++;
27442|      0|            ((parser_control *)parm)->time_zone =
27443|      0|                (yyvsp + 0)->textintval.value % 100L +
27444|      0|                ((yyvsp + 0)->textintval.value / 100L) * 60L;
27445|      0|            goto switch_break;
27446|      0|case_16: /* CIL Label */
27447|      0|            ((parser_control *)parm)->hour = (yyvsp + -5)->textintval.value;
27448|      0|            ((parser_control *)parm)->minutes = (yyvsp + -3)->textintval.value;
27449|      0|            ((parser_control *)parm)->seconds = (yyvsp + -1)->timespec;
27450|      0|            ((parser_control *)parm)->meridian = (int)(yyvsp + 0)->intval;
27451|      0|            goto switch_break;
27452|      0|case_17: /* CIL Label */
27453|      0|            ((parser_control *)parm)->hour = (yyvsp + -5)->textintval.value;
27454|      0|            ((parser_control *)parm)->minutes = (yyvsp + -3)->textintval.value;
27455|      0|            ((parser_control *)parm)->seconds = (yyvsp + -1)->timespec;
27456|      0|            ((parser_control *)parm)->meridian = 2;
27457|      0|            (((parser_control *)parm)->zones_seen)++;
27458|      0|            ((parser_control *)parm)->time_zone =
27459|      0|                (yyvsp + 0)->textintval.value % 100L +
27460|      0|                ((yyvsp + 0)->textintval.value / 100L) * 60L;
27461|      0|            goto switch_break;
27462|      0|case_18: /* CIL Label */
27463|      0|            ((parser_control *)parm)->local_isdst = (int)(yyvsp + 0)->intval;
27464|      0|            goto switch_break;
27465|      0|case_19: /* CIL Label */
27466|      0|            if ((yyvsp + -1)->intval < 0L) {
27467|      0|                tmp___2 = 1L;
27468|      0|            }
27469|      0|            else {
27470|      0|                tmp___2 = (yyvsp + -1)->intval + 1L;
27471|      0|            }
27472|      0|            ((parser_control *)parm)->local_isdst = (int)tmp___2;
27473|      0|            goto switch_break;
27474|      0|case_20: /* CIL Label */
27475|      0|            ((parser_control *)parm)->time_zone = (yyvsp + 0)->intval;
27476|      0|            goto switch_break;
27477|      0|case_21: /* CIL Label */
27478|      0|            ((parser_control *)parm)->time_zone = (yyvsp + 0)->intval + 60L;
27479|      0|            goto switch_break;
27480|      0|case_22: /* CIL Label */
27481|      0|            ((parser_control *)parm)->time_zone = (yyvsp + -1)->intval + 60L;
27482|      0|            goto switch_break;
27483|      0|case_23: /* CIL Label */
27484|      0|            ((parser_control *)parm)->day_ordinal = 1L;
27485|      0|            ((parser_control *)parm)->day_number = (int)(yyvsp + 0)->intval;
27486|      0|            goto switch_break;
27487|      0|case_24: /* CIL Label */
27488|      0|            ((parser_control *)parm)->day_ordinal = 1L;
27489|      0|            ((parser_control *)parm)->day_number = (int)(yyvsp + -1)->intval;
27490|      0|            goto switch_break;
27491|      0|case_25: /* CIL Label */
27492|      0|            ((parser_control *)parm)->day_ordinal = (yyvsp + -1)->textintval.value;
27493|      0|            ((parser_control *)parm)->day_number = (int)(yyvsp + 0)->intval;
27494|      0|            goto switch_break;
27495|      0|case_26: /* CIL Label */
27496|      0|            ((parser_control *)parm)->month = (yyvsp + -2)->textintval.value;
27497|      0|            ((parser_control *)parm)->day = (yyvsp + 0)->textintval.value;
27498|      0|            goto switch_break;
27499|      0|case_27: /* CIL Label */
27500|      0|            if (4UL <= (yyvsp + -4)->textintval.digits) {
27501|      0|                ((parser_control *)parm)->year = (yyvsp + -4)->textintval;
27502|      0|                ((parser_control *)parm)->month = (yyvsp + -2)->textintval.value;
27503|      0|                ((parser_control *)parm)->day = (yyvsp + 0)->textintval.value;
27504|      0|            }
27505|      0|            else {
27506|      0|                ((parser_control *)parm)->month = (yyvsp + -4)->textintval.value;
27507|      0|                ((parser_control *)parm)->day = (yyvsp + -2)->textintval.value;
27508|      0|                ((parser_control *)parm)->year = (yyvsp + 0)->textintval;
27509|      0|            }
27510|      0|            goto switch_break;
27511|      0|case_28: /* CIL Label */
27512|      0|            ((parser_control *)parm)->year = (yyvsp + -2)->textintval;
27513|      0|            ((parser_control *)parm)->month = -(yyvsp + -1)->textintval.value;
27514|      0|            ((parser_control *)parm)->day = -(yyvsp + 0)->textintval.value;
27515|      0|            goto switch_break;
27516|      0|case_29: /* CIL Label */
27517|      0|            ((parser_control *)parm)->day = (yyvsp + -2)->textintval.value;
27518|      0|            ((parser_control *)parm)->month = (yyvsp + -1)->intval;
27519|      0|            ((parser_control *)parm)->year.value = -(yyvsp + 0)->textintval.value;
27520|      0|            ((parser_control *)parm)->year.digits = (yyvsp + 0)->textintval.digits;
27521|      0|            goto switch_break;
27522|      0|case_30: /* CIL Label */
27523|      0|            ((parser_control *)parm)->month = (yyvsp + -2)->intval;
27524|      0|            ((parser_control *)parm)->day = -(yyvsp + -1)->textintval.value;
27525|      0|            ((parser_control *)parm)->year.value = -(yyvsp + 0)->textintval.value;
27526|      0|            ((parser_control *)parm)->year.digits = (yyvsp + 0)->textintval.digits;
27527|      0|            goto switch_break;
27528|      0|case_31: /* CIL Label */
27529|      0|            ((parser_control *)parm)->month = (yyvsp + -1)->intval;
27530|      0|            ((parser_control *)parm)->day = (yyvsp + 0)->textintval.value;
27531|      0|            goto switch_break;
27532|      0|case_32: /* CIL Label */
27533|      0|            ((parser_control *)parm)->month = (yyvsp + -3)->intval;
27534|      0|            ((parser_control *)parm)->day = (yyvsp + -2)->textintval.value;
27535|      0|            ((parser_control *)parm)->year = (yyvsp + 0)->textintval;
27536|      0|            goto switch_break;
27537|      0|case_33: /* CIL Label */
27538|      0|            ((parser_control *)parm)->day = (yyvsp + -1)->textintval.value;
27539|      0|            ((parser_control *)parm)->month = (yyvsp + 0)->intval;
27540|      0|            goto switch_break;
27541|      0|case_34: /* CIL Label */
27542|      0|            ((parser_control *)parm)->day = (yyvsp + -2)->textintval.value;
27543|      0|            ((parser_control *)parm)->month = (yyvsp + -1)->intval;
27544|      0|            ((parser_control *)parm)->year = (yyvsp + 0)->textintval;
27545|      0|            goto switch_break;
27546|      0|case_35: /* CIL Label */
27547|      0|            ((parser_control *)parm)->rel_ns = -((parser_control *)parm)->rel_ns;
27548|      0|            ((parser_control *)parm)->rel_seconds =
27549|      0|                -((parser_control *)parm)->rel_seconds;
27550|      0|            ((parser_control *)parm)->rel_minutes =
27551|      0|                -((parser_control *)parm)->rel_minutes;
27552|      0|            ((parser_control *)parm)->rel_hour = -((parser_control *)parm)->rel_hour;
27553|      0|            ((parser_control *)parm)->rel_day = -((parser_control *)parm)->rel_day;
27554|      0|            ((parser_control *)parm)->rel_month =
27555|      0|                -((parser_control *)parm)->rel_month;
27556|      0|            ((parser_control *)parm)->rel_year = -((parser_control *)parm)->rel_year;
27557|      0|            goto switch_break;
27558|      0|case_37: /* CIL Label */
27559|      0|            ((parser_control *)parm)->rel_year +=
27560|      0|                (yyvsp + -1)->textintval.value * (yyvsp + 0)->intval;
27561|      0|            goto switch_break;
27562|      0|case_38: /* CIL Label */
27563|      0|            ((parser_control *)parm)->rel_year +=
27564|      0|                (yyvsp + -1)->textintval.value * (yyvsp + 0)->intval;
27565|      0|            goto switch_break;
27566|      0|case_39: /* CIL Label */
27567|      0|            ((parser_control *)parm)->rel_year += (yyvsp + 0)->intval;
27568|      0|            goto switch_break;
27569|      0|case_40: /* CIL Label */
27570|      0|            ((parser_control *)parm)->rel_month +=
27571|      0|                (yyvsp + -1)->textintval.value * (yyvsp + 0)->intval;
27572|      0|            goto switch_break;
27573|      0|case_41: /* CIL Label */
27574|      0|            ((parser_control *)parm)->rel_month +=
27575|      0|                (yyvsp + -1)->textintval.value * (yyvsp + 0)->intval;
27576|      0|            goto switch_break;
27577|      0|case_42: /* CIL Label */
27578|      0|            ((parser_control *)parm)->rel_month += (yyvsp + 0)->intval;
27579|      0|            goto switch_break;
27580|      0|case_43: /* CIL Label */
27581|      0|            ((parser_control *)parm)->rel_day +=
27582|      0|                (yyvsp + -1)->textintval.value * (yyvsp + 0)->intval;
27583|      0|            goto switch_break;
27584|      0|case_44: /* CIL Label */
27585|      0|            ((parser_control *)parm)->rel_day +=
27586|      0|                (yyvsp + -1)->textintval.value * (yyvsp + 0)->intval;
27587|      0|            goto switch_break;
27588|      0|case_45: /* CIL Label */
27589|      0|            ((parser_control *)parm)->rel_day += (yyvsp + 0)->intval;
27590|      0|            goto switch_break;
27591|      0|case_46: /* CIL Label */
27592|      0|            ((parser_control *)parm)->rel_hour +=
27593|      0|                (yyvsp + -1)->textintval.value * (yyvsp + 0)->intval;
27594|      0|            goto switch_break;
27595|      0|case_47: /* CIL Label */
27596|      0|            ((parser_control *)parm)->rel_hour +=
27597|      0|                (yyvsp + -1)->textintval.value * (yyvsp + 0)->intval;
27598|      0|            goto switch_break;
27599|      0|case_48: /* CIL Label */
27600|      0|            ((parser_control *)parm)->rel_hour += (yyvsp + 0)->intval;
27601|      0|            goto switch_break;
27602|      0|case_49: /* CIL Label */
27603|      0|            ((parser_control *)parm)->rel_minutes +=
27604|      0|                (yyvsp + -1)->textintval.value * (yyvsp + 0)->intval;
27605|      0|            goto switch_break;
27606|      0|case_50: /* CIL Label */
27607|      0|            ((parser_control *)parm)->rel_minutes +=
27608|      0|                (yyvsp + -1)->textintval.value * (yyvsp + 0)->intval;
27609|      0|            goto switch_break;
27610|      0|case_51: /* CIL Label */
27611|      0|            ((parser_control *)parm)->rel_minutes += (yyvsp + 0)->intval;
27612|      0|            goto switch_break;
27613|      0|case_52: /* CIL Label */
27614|      0|            ((parser_control *)parm)->rel_seconds +=
27615|      0|                (yyvsp + -1)->textintval.value * (yyvsp + 0)->intval;
27616|      0|            goto switch_break;
27617|      0|case_53: /* CIL Label */
27618|      0|            ((parser_control *)parm)->rel_seconds +=
27619|      0|                (yyvsp + -1)->textintval.value * (yyvsp + 0)->intval;
27620|      0|            goto switch_break;
27621|      0|case_54: /* CIL Label */
27622|      0|            ((parser_control *)parm)->rel_seconds +=
27623|      0|                (yyvsp + -1)->timespec.tv_sec * (yyvsp + 0)->intval;
27624|      0|            ((parser_control *)parm)->rel_ns +=
27625|      0|                (yyvsp + -1)->timespec.tv_nsec * (yyvsp + 0)->intval;
27626|      0|            goto switch_break;
27627|      0|case_55: /* CIL Label */
27628|      0|            ((parser_control *)parm)->rel_seconds +=
27629|      0|                (yyvsp + -1)->timespec.tv_sec * (yyvsp + 0)->intval;
27630|      0|            ((parser_control *)parm)->rel_ns +=
27631|      0|                (yyvsp + -1)->timespec.tv_nsec * (yyvsp + 0)->intval;
27632|      0|            goto switch_break;
27633|      0|case_56: /* CIL Label */
27634|      0|            ((parser_control *)parm)->rel_seconds += (yyvsp + 0)->intval;
27635|      0|            goto switch_break;
27636|      0|case_60: /* CIL Label */
27637|      0|            yyval.timespec.tv_sec = (yyvsp + 0)->textintval.value;
27638|      0|            yyval.timespec.tv_nsec = (__syscall_slong_t)0;
27639|      0|            goto switch_break;
27640|      0|case_62: /* CIL Label */
27641|      0|            yyval.timespec.tv_sec = (yyvsp + 0)->textintval.value;
27642|      0|            yyval.timespec.tv_nsec = (__syscall_slong_t)0;
27643|      0|            goto switch_break;
27644|      0|case_63: /* CIL Label */
27645|      0|            if (((parser_control *)parm)->dates_seen) {
27646|      0|                if (!((parser_control *)parm)->rels_seen) {
27647|      0|                    if (((parser_control *)parm)->times_seen) {
27648|      0|                        ((parser_control *)parm)->year = (yyvsp + 0)->textintval;
27649|      0|                    }
27650|      0|                    else {
27651|      0|                        if (2UL < (yyvsp + 0)->textintval.digits) {
27652|      0|                            ((parser_control *)parm)->year = (yyvsp + 0)->textintval;
27653|      0|                        }
27654|      0|                        else {
27655|      0|                            goto _L___4;
27656|      0|                        }
27657|      0|                    }
27658|      0|                }
27659|      0|                else {
27660|      0|                    goto _L___4;
27661|      0|                }
27662|      0|            }
27663|      0|            else {
27664|      0|_L___4: /* CIL Label */
27665|      0|                if (4UL < (yyvsp + 0)->textintval.digits) {
27666|      0|                    (((parser_control *)parm)->dates_seen)++;
27667|      0|                    ((parser_control *)parm)->day = (yyvsp + 0)->textintval.value % 100L;
27668|      0|                    ((parser_control *)parm)->month =
27669|      0|                        ((yyvsp + 0)->textintval.value / 100L) % 100L;
27670|      0|                    ((parser_control *)parm)->year.value =
27671|      0|                        (yyvsp + 0)->textintval.value / 10000L;
27672|      0|                    ((parser_control *)parm)->year.digits =
27673|      0|                        (yyvsp + 0)->textintval.digits - 4UL;
27674|      0|                }
27675|      0|                else {
27676|      0|                    (((parser_control *)parm)->times_seen)++;
27677|      0|                    if ((yyvsp + 0)->textintval.digits <= 2UL) {
27678|      0|                        ((parser_control *)parm)->hour = (yyvsp + 0)->textintval.value;
27679|      0|                        ((parser_control *)parm)->minutes = 0L;
27680|      0|                    }
27681|      0|                    else {
27682|      0|                        ((parser_control *)parm)->hour =
27683|      0|                            (yyvsp + 0)->textintval.value / 100L;
27684|      0|                        ((parser_control *)parm)->minutes =
27685|      0|                            (yyvsp + 0)->textintval.value % 100L;
27686|      0|                    }
27687|      0|                    ((parser_control *)parm)->seconds.tv_sec = (__time_t)0;
27688|      0|                    ((parser_control *)parm)->seconds.tv_nsec = (__syscall_slong_t)0;
27689|      0|                    ((parser_control *)parm)->meridian = 2;
27690|      0|                }
27691|      0|            }
27692|      0|            goto switch_break;
27693|      0|case_64: /* CIL Label */
27694|      0|            yyval.intval = 2L;
27695|      0|            goto switch_break;
27696|      0|case_65: /* CIL Label */
27697|      0|            yyval.intval = (yyvsp + 0)->intval;
27698|      0|            goto switch_break;
27699|      0|switch_break: /* CIL Label */
27700|      0|            ;
27701|      0|        }
27702|      0|        yyvsp -= yylen;
27703|      0|        yyssp -= yylen;
27704|      0|        yyvsp++;
27705|      0|        *yyvsp = yyval;
27706|      0|        yyn = (int)yyr1[yyn];
27707|      0|        yystate = (int)((int const)yypgoto[yyn - 25] + (int const) * yyssp);
27708|      0|        if (yystate >= 0) {
27709|      0|            if (yystate <= 70) {
27710|      0|                if ((int const)yycheck[yystate] == (int const) * yyssp) {
27711|      0|                    yystate = (int)yytable[yystate];
27712|      0|                }
27713|      0|                else {
27714|      0|                    yystate = (int)yydefgoto[yyn - 25];
27715|      0|                }
27716|      0|            }
27717|      0|            else {
27718|      0|                yystate = (int)yydefgoto[yyn - 25];
27719|      0|            }
27720|      0|        }
27721|      0|        else {
27722|      0|            yystate = (int)yydefgoto[yyn - 25];
27723|      0|        }
27724|      0|        goto yynewstate;
27725|      0|yyerrlab:
27726|      0|        if (!yyerrstatus) {
27727|      0|            {
27728|      0|                yynerrs++;
27729|      0|                yyerror((char *)"parse error");
27730|      0|            }
27731|      0|        }
27732|      0|        goto yyerrlab1;
27733|      0|yyerrlab1:
27734|      0|        if (yyerrstatus == 3) {
27735|      0|            if (yychar == 0) {
27736|      0|                goto yyabortlab;
27737|      0|            }
27738|      0|            yychar = -2;
27739|      0|        }
27740|      0|        yyerrstatus = 3;
27741|      0|        goto yyerrhandle;
27742|      0|yyerrdefault:
27743|      0|        if ((unsigned long)yyssp == (unsigned long)yyss) {
27744|      0|            goto yyabortlab;
27745|      0|        }
27746|      0|        yyvsp--;
27747|      0|        yyssp--;
27748|      0|        yystate = (int)*yyssp;
27749|      0|yyerrhandle:
27750|      0|        yyn = (int)yypact[yystate];
27751|      0|        if (yyn == -32768) {
27752|      0|            goto yyerrdefault;
27753|      0|        }
27754|      0|        yyn++;
27755|      0|        if (yyn < 0) {
27756|      0|            goto yyerrdefault;
27757|      0|        }
27758|      0|        else {
27759|      0|            if (yyn > 70) {
27760|      0|                goto yyerrdefault;
27761|      0|            }
27762|      0|            else {
27763|      0|                if ((int const)yycheck[yyn] != 1) {
27764|      0|                    goto yyerrdefault;
27765|      0|                }
27766|      0|            }
27767|      0|        }
27768|      0|        yyn = (int)yytable[yyn];
27769|      0|        if (yyn < 0) {
27770|      0|            if (yyn == -32768) {
27771|      0|                goto yyerrdefault;
27772|      0|            }
27773|      0|            yyn = -yyn;
27774|      0|            goto yyreduce;
27775|      0|        }
27776|      0|        else {
27777|      0|            if (yyn == 0) {
27778|      0|                goto yyerrdefault;
27779|      0|            }
27780|      0|        }
27781|      0|        if (yyn == 80) {
27782|      0|            goto yyacceptlab;
27783|      0|        }
27784|      0|        yyvsp++;
27785|      0|        *yyvsp = yylval;
27786|      0|        yystate = yyn;
27787|      0|        goto yynewstate;
27788|      0|yyacceptlab:
27789|      0|        if (yyfree_stacks) {
27790|      0|            {
27791|      0|                free((void *)yyss);
27792|      0|                free((void *)yyvs);
27793|      0|            }
27794|      0|        }
27795|      0|        return (0);
27796|      0|yyabortlab:
27797|      0|        if (yyfree_stacks) {
27798|      0|            {
27799|      0|                free((void *)yyss);
27800|      0|                free((void *)yyvs);
27801|      0|            }
27802|      0|        }
27803|      0|        return (1);
27804|      0|    }
27805|      0|}
27806|       |static table const meridian_table[5] = {{"AM", 264, 0},
27807|       |    {"A.M.", 264, 0},
27808|       |    {"PM", 264, 1},
27809|       |    {"P.M.", 264, 1},
27810|       |    {(char const *)0, 0, 0}
27811|       |};
27812|       |static table const dst_table[1] = {{"DST", 258, 0}};
27813|       |static table const month_and_day_table[25] = {
27814|       |    {"JANUARY", 266, 1},    {"FEBRUARY", 266, 2}, {"MARCH", 266, 3},
27815|       |    {"APRIL", 266, 4},      {"MAY", 266, 5},      {"JUNE", 266, 6},
27816|       |    {"JULY", 266, 7},       {"AUGUST", 266, 8},   {"SEPTEMBER", 266, 9},
27817|       |    {"SEPT", 266, 9},       {"OCTOBER", 266, 10}, {"NOVEMBER", 266, 11},
27818|       |    {"DECEMBER", 266, 12},  {"SUNDAY", 259, 0},   {"MONDAY", 259, 1},
27819|       |    {"TUESDAY", 259, 2},    {"TUES", 259, 2},     {"WEDNESDAY", 259, 3},
27820|       |    {"WEDNES", 259, 3},     {"THURSDAY", 259, 4}, {"THUR", 259, 4},
27821|       |    {"THURS", 259, 4},      {"FRIDAY", 259, 5},   {"SATURDAY", 259, 6},
27822|       |    {(char const *)0, 0, 0}
27823|       |};
27824|       |static table const time_units_table[11] = {
27825|       |    {"YEAR", 269, 1},   {"MONTH", 267, 1},      {"FORTNIGHT", 260, 14},
27826|       |    {"WEEK", 260, 7},   {"DAY", 260, 1},        {"HOUR", 262, 1},
27827|       |    {"MINUTE", 265, 1}, {"MIN", 265, 1},        {"SECOND", 268, 1},
27828|       |    {"SEC", 268, 1},    {(char const *)0, 0, 0}
27829|       |};
27830|       |static table const relative_time_table[20] = {
27831|       |    {"TOMORROW", 260, 1}, {"YESTERDAY", 260, -1}, {"TODAY", 260, 0},
27832|       |    {"NOW", 260, 0},      {"LAST", 272, -1},      {"THIS", 272, 0},
27833|       |    {"NEXT", 272, 1},     {"FIRST", 272, 1},      {"THIRD", 272, 3},
27834|       |    {"FOURTH", 272, 4},   {"FIFTH", 272, 5},      {"SIXTH", 272, 6},
27835|       |    {"SEVENTH", 272, 7},  {"EIGHTH", 272, 8},     {"NINTH", 272, 9},
27836|       |    {"TENTH", 272, 10},   {"ELEVENTH", 272, 11},  {"TWELFTH", 272, 12},
27837|       |    {"AGO", 257, 1},      {(char const *)0, 0, 0}
27838|       |};
27839|       |static table const time_zone_table[51] = {
27840|       |    {"GMT", 270, 0},     {"UT", 270, 0},     {"UTC", 270, 0},
27841|       |    {"WET", 270, 0},     {"WEST", 261, 0},   {"BST", 261, 0},
27842|       |    {"ART", 270, -180},  {"BRT", 270, -180}, {"BRST", 261, -180},
27843|       |    {"NST", 270, -210},  {"NDT", 261, -210}, {"AST", 270, -240},
27844|       |    {"ADT", 261, -240},  {"CLT", 270, -240}, {"CLST", 261, -240},
27845|       |    {"EST", 270, -300},  {"EDT", 261, -300}, {"CST", 270, -360},
27846|       |    {"CDT", 261, -360},  {"MST", 270, -420}, {"MDT", 261, -420},
27847|       |    {"PST", 270, -480},  {"PDT", 261, -480}, {"AKST", 270, -540},
27848|       |    {"AKDT", 261, -540}, {"HST", 270, -600}, {"HAST", 270, -600},
27849|       |    {"HADT", 261, -600}, {"SST", 270, -720}, {"WAT", 270, 60},
27850|       |    {"CET", 270, 60},    {"CEST", 261, 60},  {"MET", 270, 60},
27851|       |    {"MEZ", 270, 60},    {"MEST", 261, 60},  {"MESZ", 261, 60},
27852|       |    {"EET", 270, 120},   {"EEST", 261, 120}, {"CAT", 270, 120},
27853|       |    {"SAST", 270, 120},  {"EAT", 270, 180},  {"MSK", 270, 180},
27854|       |    {"MSD", 261, 180},   {"IST", 270, 330},  {"SGT", 270, 480},
27855|       |    {"KST", 270, 540},   {"JST", 270, 540},  {"GST", 270, 600},
27856|       |    {"NZST", 270, 720},  {"NZDT", 261, 720}, {(char const *)0, 0, 0}
27857|       |};
27858|       |static table const military_table[26] = {
27859|       |    {"A", 270, -60},  {"B", 270, -120},       {"C", 270, -180},
27860|       |    {"D", 270, -240}, {"E", 270, -300},       {"F", 270, -360},
27861|       |    {"G", 270, -420}, {"H", 270, -480},       {"I", 270, -540},
27862|       |    {"K", 270, -600}, {"L", 270, -660},       {"M", 270, -720},
27863|       |    {"N", 270, 60},   {"O", 270, 120},        {"P", 270, 180},
27864|       |    {"Q", 270, 240},  {"R", 270, 300},        {"S", 270, 360},
27865|       |    {"T", 270, 420},  {"U", 270, 480},        {"V", 270, 540},
27866|       |    {"W", 270, 600},  {"X", 270, 660},        {"Y", 270, 720},
27867|       |    {"Z", 270, 0},    {(char const *)0, 0, 0}
27868|       |};
27869|       |static int to_hour(long hours, int meridian)
27870|      0|{
27871|      0|    long tmp;
27872|      0|    int tmp___0;
27873|      0|    long tmp___1;
27874|      0|    int tmp___2;
27875|      0|    long tmp___3;
27876|       |
27877|      0|    {
27878|      0|        {
27879|      0|            if (meridian == 2) {
27880|      0|                goto case_2;
27881|      0|            }
27882|      0|            if (meridian == 0) {
27883|      0|                goto case_0;
27884|      0|            }
27885|      0|            if (meridian == 1) {
27886|      0|                goto case_1;
27887|      0|            }
27888|      0|            goto switch_default;
27889|      0|case_2: /* CIL Label */
27890|      0|            if (0L <= hours) {
27891|      0|                if (hours < 24L) {
27892|      0|                    tmp = hours;
27893|      0|                }
27894|      0|                else {
27895|      0|                    tmp = -1L;
27896|      0|                }
27897|      0|            }
27898|      0|            else {
27899|      0|                tmp = -1L;
27900|      0|            }
27901|      0|            return ((int)tmp);
27902|      0|case_0: /* CIL Label */
27903|      0|            if (0L < hours) {
27904|      0|                if (hours < 12L) {
27905|      0|                    tmp___1 = hours;
27906|      0|                }
27907|      0|                else {
27908|      0|                    goto _L___3;
27909|      0|                }
27910|      0|            }
27911|      0|            else {
27912|      0|_L___3: /* CIL Label */
27913|      0|                if (hours == 12L) {
27914|      0|                    tmp___0 = 0;
27915|      0|                }
27916|      0|                else {
27917|      0|                    tmp___0 = -1;
27918|      0|                }
27919|      0|                tmp___1 = (long)tmp___0;
27920|      0|            }
27921|      0|            return ((int)tmp___1);
27922|      0|case_1: /* CIL Label */
27923|      0|            if (0L < hours) {
27924|      0|                if (hours < 12L) {
27925|      0|                    tmp___3 = hours + 12L;
27926|      0|                }
27927|      0|                else {
27928|      0|                    goto _L___4;
27929|      0|                }
27930|      0|            }
27931|      0|            else {
27932|      0|_L___4: /* CIL Label */
27933|      0|                if (hours == 12L) {
27934|      0|                    tmp___2 = 12;
27935|      0|                }
27936|      0|                else {
27937|      0|                    tmp___2 = -1;
27938|      0|                }
27939|      0|                tmp___3 = (long)tmp___2;
27940|      0|            }
27941|      0|            return ((int)tmp___3);
27942|      0|switch_default : { /* CIL Label */
27943|      0|                abort();
27944|      0|            }
27945|      0|switch_break: /* CIL Label */
27946|      0|            ;
27947|      0|        }
27948|      0|    }
27949|      0|}
27950|       |static long to_year(textint textyear)
27951|      0|{
27952|      0|    long year;
27953|      0|    int tmp;
27954|       |
27955|      0|    {
27956|      0|        year = textyear.value;
27957|      0|        if (year < 0L) {
27958|      0|            year = -year;
27959|      0|        }
27960|      0|        else {
27961|      0|            if (textyear.digits == 2UL) {
27962|      0|                if (year < 69L) {
27963|      0|                    tmp = 2000;
27964|      0|                }
27965|      0|                else {
27966|      0|                    tmp = 1900;
27967|      0|                }
27968|      0|                year += (long)tmp;
27969|      0|            }
27970|      0|        }
27971|      0|        return (year);
27972|      0|    }
27973|      0|}
27974|       |static table const *lookup_zone(parser_control const *pc, char const *name)
27975|      0|{
27976|      0|    table const *tp;
27977|      0|    int tmp;
27978|      0|    int tmp___0;
27979|       |
27980|      0|    {
27981|      0|        tp = (table const *)(pc->local_time_zone_table);
27982|      0|        {
27983|      0|            while (1) {
27984|      0|while_continue: /* CIL Label */
27985|      0|                ;
27986|      0|                if (!tp->name) {
27987|      0|                    goto while_break;
27988|      0|                }
27989|      0|                {
27990|      0|                    tmp = strcmp(name, (char const *)tp->name);
27991|      0|                }
27992|      0|                if (tmp == 0) {
27993|      0|                    return (tp);
27994|      0|                }
27995|      0|                tp++;
27996|      0|            }
27997|      0|while_break: /* CIL Label */
27998|      0|            ;
27999|      0|        }
28000|      0|        tp = time_zone_table;
28001|      0|        {
28002|      0|            while (1) {
28003|      0|while_continue___0: /* CIL Label */
28004|      0|                ;
28005|      0|                if (!tp->name) {
28006|      0|                    goto while_break___0;
28007|      0|                }
28008|      0|                {
28009|      0|                    tmp___0 = strcmp(name, (char const *)tp->name);
28010|      0|                }
28011|      0|                if (tmp___0 == 0) {
28012|      0|                    return (tp);
28013|      0|                }
28014|      0|                tp++;
28015|      0|            }
28016|      0|while_break___0: /* CIL Label */
28017|      0|            ;
28018|      0|        }
28019|      0|        return ((table const *)0);
28020|      0|    }
28021|      0|}
28022|       |static table const *lookup_word(parser_control const *pc, char *word)
28023|      0|{
28024|      0|    char *p;
28025|      0|    char *q;
28026|      0|    size_t wordlen;
28027|      0|    table const *tp;
28028|      0|    _Bool period_found;
28029|      0|    _Bool abbrev;
28030|      0|    int tmp;
28031|      0|    unsigned short const **tmp___0;
28032|      0|    int tmp___1;
28033|      0|    int tmp___2;
28034|      0|    int tmp___3;
28035|      0|    int tmp___4;
28036|      0|    int tmp___5;
28037|      0|    int tmp___6;
28038|      0|    int tmp___7;
28039|      0|    int tmp___8;
28040|      0|    char tmp___9;
28041|      0|    int tmp___10;
28042|       |
28043|      0|    {
28044|      0|        p = word;
28045|      0|        {
28046|      0|            while (1) {
28047|      0|while_continue: /* CIL Label */
28048|      0|                ;
28049|      0|                if (!*p) {
28050|      0|                    goto while_break;
28051|      0|                }
28052|      0|                {
28053|      0|                    tmp___0 = __ctype_b_loc();
28054|      0|                }
28055|      0|                if ((int const) * (*tmp___0 + (int)((unsigned char)*p)) & 512) {
28056|      0|                    {
28057|      0|                        tmp = toupper((int)((unsigned char)*p));
28058|      0|                        *p = (char)tmp;
28059|      0|                    }
28060|      0|                }
28061|      0|                p++;
28062|      0|            }
28063|      0|while_break: /* CIL Label */
28064|      0|            ;
28065|      0|        }
28066|      0|        tp = meridian_table;
28067|      0|        {
28068|      0|            while (1) {
28069|      0|while_continue___0: /* CIL Label */
28070|      0|                ;
28071|      0|                if (!tp->name) {
28072|      0|                    goto while_break___0;
28073|      0|                }
28074|      0|                {
28075|      0|                    tmp___1 = strcmp((char const *)word, (char const *)tp->name);
28076|      0|                }
28077|      0|                if (tmp___1 == 0) {
28078|      0|                    return (tp);
28079|      0|                }
28080|      0|                tp++;
28081|      0|            }
28082|      0|while_break___0: /* CIL Label */
28083|      0|            ;
28084|      0|        }
28085|      0|        {
28086|      0|            wordlen = strlen((char const *)word);
28087|      0|        }
28088|      0|        if (wordlen == 3UL) {
28089|      0|            tmp___10 = 1;
28090|      0|        }
28091|      0|        else {
28092|      0|            if (wordlen == 4UL) {
28093|      0|                if ((int)*(word + 3) == 46) {
28094|      0|                    tmp___10 = 1;
28095|      0|                }
28096|      0|                else {
28097|      0|                    tmp___10 = 0;
28098|      0|                }
28099|      0|            }
28100|      0|            else {
28101|      0|                tmp___10 = 0;
28102|      0|            }
28103|      0|        }
28104|      0|        abbrev = (_Bool)tmp___10;
28105|      0|        tp = month_and_day_table;
28106|      0|        {
28107|      0|            while (1) {
28108|      0|while_continue___1: /* CIL Label */
28109|      0|                ;
28110|      0|                if (!tp->name) {
28111|      0|                    goto while_break___1;
28112|      0|                }
28113|      0|                if (abbrev) {
28114|      0|                    {
28115|      0|                        tmp___2 =
28116|      0|                            strncmp((char const *)word, (char const *)tp->name, (size_t)3);
28117|      0|                        tmp___4 = tmp___2;
28118|      0|                    }
28119|      0|                }
28120|      0|                else {
28121|      0|                    {
28122|      0|                        tmp___3 = strcmp((char const *)word, (char const *)tp->name);
28123|      0|                        tmp___4 = tmp___3;
28124|      0|                    }
28125|      0|                }
28126|      0|                if (tmp___4 == 0) {
28127|      0|                    return (tp);
28128|      0|                }
28129|      0|                tp++;
28130|      0|            }
28131|      0|while_break___1: /* CIL Label */
28132|      0|            ;
28133|      0|        }
28134|      0|        {
28135|      0|            tp = lookup_zone(pc, (char const *)word);
28136|      0|        }
28137|      0|        if (tp) {
28138|      0|            return (tp);
28139|      0|        }
28140|      0|        {
28141|      0|            tmp___5 = strcmp((char const *)word, (char const *)dst_table[0].name);
28142|      0|        }
28143|      0|        if (tmp___5 == 0) {
28144|      0|            return (dst_table);
28145|      0|        }
28146|      0|        tp = time_units_table;
28147|      0|        {
28148|      0|            while (1) {
28149|      0|while_continue___2: /* CIL Label */
28150|      0|                ;
28151|      0|                if (!tp->name) {
28152|      0|                    goto while_break___2;
28153|      0|                }
28154|      0|                {
28155|      0|                    tmp___6 = strcmp((char const *)word, (char const *)tp->name);
28156|      0|                }
28157|      0|                if (tmp___6 == 0) {
28158|      0|                    return (tp);
28159|      0|                }
28160|      0|                tp++;
28161|      0|            }
28162|      0|while_break___2: /* CIL Label */
28163|      0|            ;
28164|      0|        }
28165|      0|        if ((int)*(word + (wordlen - 1UL)) == 83) {
28166|      0|            *(word + (wordlen - 1UL)) = (char)'\000';
28167|      0|            tp = time_units_table;
28168|      0|            {
28169|      0|                while (1) {
28170|      0|while_continue___3: /* CIL Label */
28171|      0|                    ;
28172|      0|                    if (!tp->name) {
28173|      0|                        goto while_break___3;
28174|      0|                    }
28175|      0|                    {
28176|      0|                        tmp___7 = strcmp((char const *)word, (char const *)tp->name);
28177|      0|                    }
28178|      0|                    if (tmp___7 == 0) {
28179|      0|                        return (tp);
28180|      0|                    }
28181|      0|                    tp++;
28182|      0|                }
28183|      0|while_break___3: /* CIL Label */
28184|      0|                ;
28185|      0|            }
28186|      0|            *(word + (wordlen - 1UL)) = (char)'S';
28187|      0|        }
28188|      0|        tp = relative_time_table;
28189|      0|        {
28190|      0|            while (1) {
28191|      0|while_continue___4: /* CIL Label */
28192|      0|                ;
28193|      0|                if (!tp->name) {
28194|      0|                    goto while_break___4;
28195|      0|                }
28196|      0|                {
28197|      0|                    tmp___8 = strcmp((char const *)word, (char const *)tp->name);
28198|      0|                }
28199|      0|                if (tmp___8 == 0) {
28200|      0|                    return (tp);
28201|      0|                }
28202|      0|                tp++;
28203|      0|            }
28204|      0|while_break___4: /* CIL Label */
28205|      0|            ;
28206|      0|        }
28207|      0|        if (wordlen == 1UL) {
28208|      0|            tp = military_table;
28209|      0|            {
28210|      0|                while (1) {
28211|      0|while_continue___5: /* CIL Label */
28212|      0|                    ;
28213|      0|                    if (!tp->name) {
28214|      0|                        goto while_break___5;
28215|      0|                    }
28216|      0|                    if ((int)*(word + 0) == (int)*(tp->name + 0)) {
28217|      0|                        return (tp);
28218|      0|                    }
28219|      0|                    tp++;
28220|      0|                }
28221|      0|while_break___5: /* CIL Label */
28222|      0|                ;
28223|      0|            }
28224|      0|        }
28225|      0|        period_found = (_Bool)0;
28226|      0|        q = word;
28227|      0|        p = q;
28228|      0|        {
28229|      0|            while (1) {
28230|      0|while_continue___6: /* CIL Label */
28231|      0|                ;
28232|      0|                tmp___9 = *q;
28233|      0|                *p = tmp___9;
28234|      0|                if (!tmp___9) {
28235|      0|                    goto while_break___6;
28236|      0|                }
28237|      0|                if ((int)*q == 46) {
28238|      0|                    period_found = (_Bool)1;
28239|      0|                }
28240|      0|                else {
28241|      0|                    p++;
28242|      0|                }
28243|      0|                q++;
28244|      0|            }
28245|      0|while_break___6: /* CIL Label */
28246|      0|            ;
28247|      0|        }
28248|      0|        if (period_found) {
28249|      0|            {
28250|      0|                tp = lookup_zone(pc, (char const *)word);
28251|      0|            }
28252|      0|            if (tp) {
28253|      0|                return (tp);
28254|      0|            }
28255|      0|        }
28256|      0|        return ((table const *)0);
28257|      0|    }
28258|      0|}
28259|       |static int yylex(YYSTYPE *lvalp, parser_control *pc)
28260|      0|{
28261|      0|    unsigned char c;
28262|      0|    size_t count;
28263|      0|    unsigned short const **tmp;
28264|      0|    char const *p;
28265|      0|    int sign;
28266|      0|    unsigned long value;
28267|      0|    unsigned long value1;
28268|      0|    time_t s;
28269|      0|    int ns;
28270|      0|    int digits;
28271|      0|    unsigned long value1___0;
28272|      0|    char const *tmp___0;
28273|      0|    char const *tmp___1;
28274|      0|    char buff[20];
28275|      0|    char *p___0;
28276|      0|    table const *tp;
28277|      0|    char *tmp___2;
28278|      0|    unsigned short const **tmp___3;
28279|      0|    unsigned short const **tmp___4;
28280|      0|    char const *tmp___5;
28281|      0|    char const *tmp___6;
28282|      0|    int tmp___7;
28283|      0|    int tmp___8;
28284|      0|    void *__cil_tmp26;
28285|       |
28286|      0|    {
28287|      0|        {
28288|      0|            while (1) {
28289|      0|while_continue: /* CIL Label */
28290|      0|                ;
28291|      0|                {
28292|      0|                    while (1) {
28293|      0|while_continue___0: /* CIL Label */
28294|      0|                        ;
28295|      0|                        {
28296|      0|                            c = (unsigned char)*(pc->input);
28297|      0|                            tmp = __ctype_b_loc();
28298|      0|                        }
28299|      0|                        if (!(((int const) * (*tmp + (int)c) & 8192) != 0)) {
28300|      0|                            goto while_break___0;
28301|      0|                        }
28302|      0|                        (pc->input)++;
28303|      0|                    }
28304|      0|while_break___0: /* CIL Label */
28305|      0|                    ;
28306|      0|                }
28307|      0|                if ((unsigned int)c - 48U <= 9U) {
28308|      0|                    goto _L___6;
28309|      0|                }
28310|      0|                else {
28311|      0|                    if ((int)c == 45) {
28312|      0|                        goto _L___6;
28313|      0|                    }
28314|      0|                    else {
28315|      0|                        if ((int)c == 43) {
28316|      0|_L___6: /* CIL Label */
28317|      0|                            if ((int)c == 45) {
28318|      0|                                goto _L___3;
28319|      0|                            }
28320|      0|                            else {
28321|      0|                                if ((int)c == 43) {
28322|      0|_L___3: /* CIL Label */
28323|      0|                                    if ((int)c == 45) {
28324|      0|                                        sign = -1;
28325|      0|                                    }
28326|      0|                                    else {
28327|      0|                                        sign = 1;
28328|      0|                                    }
28329|      0|                                    (pc->input)++;
28330|      0|                                    c = (unsigned char)*(pc->input);
28331|      0|                                    if (!((unsigned int)c - 48U <= 9U)) {
28332|      0|                                        goto __Cont;
28333|      0|                                    }
28334|      0|                                }
28335|      0|                                else {
28336|      0|                                    sign = 0;
28337|      0|                                }
28338|      0|                            }
28339|      0|                            p = pc->input;
28340|      0|                            value = 0UL;
28341|      0|                            {
28342|      0|                                while (1) {
28343|      0|while_continue___1: /* CIL Label */
28344|      0|                                    ;
28345|      0|                                    value1 = value + (unsigned long)((int)c - 48);
28346|      0|                                    if (value1 < value) {
28347|      0|                                        return ('?');
28348|      0|                                    }
28349|      0|                                    value = value1;
28350|      0|                                    p++;
28351|      0|                                    c = (unsigned char)*p;
28352|      0|                                    if (!((unsigned int)c - 48U <= 9U)) {
28353|      0|                                        goto while_break___1;
28354|      0|                                    }
28355|      0|                                    if (1844674407370955161UL < value) {
28356|      0|                                        return ('?');
28357|      0|                                    }
28358|      0|                                    value *= 10UL;
28359|      0|                                }
28360|      0|while_break___1: /* CIL Label */
28361|      0|                                ;
28362|      0|                            }
28363|      0|                            if ((int)c == 46) {
28364|      0|                                goto _L___5;
28365|      0|                            }
28366|      0|                            else {
28367|      0|                                if ((int)c == 44) {
28368|      0|_L___5: /* CIL Label */
28369|      0|                                    if ((unsigned int)*(p + 1) - 48U <= 9U) {
28370|      0|                                        if (sign < 0) {
28371|      0|                                            s = (time_t)(-value);
28372|      0|                                            if (0L < s) {
28373|      0|                                                return ('?');
28374|      0|                                            }
28375|      0|                                            value1___0 = (unsigned long)(-s);
28376|      0|                                        }
28377|      0|                                        else {
28378|      0|                                            s = (time_t)value;
28379|      0|                                            if (s < 0L) {
28380|      0|                                                return ('?');
28381|      0|                                            }
28382|      0|                                            value1___0 = (unsigned long)s;
28383|      0|                                        }
28384|      0|                                        if (value != value1___0) {
28385|      0|                                            return ('?');
28386|      0|                                        }
28387|      0|                                        p++;
28388|      0|                                        tmp___0 = p;
28389|      0|                                        p++;
28390|      0|                                        ns = (int)((int const) * tmp___0 - 48);
28391|      0|                                        digits = 2;
28392|      0|                                        {
28393|      0|                                            while (1) {
28394|      0|while_continue___2: /* CIL Label */
28395|      0|                                                ;
28396|      0|                                                if (!(digits <= 9)) {
28397|      0|                                                    goto while_break___2;
28398|      0|                                                }
28399|      0|                                                ns *= 10;
28400|      0|                                                if ((unsigned int)*p - 48U <= 9U) {
28401|      0|                                                    tmp___1 = p;
28402|      0|                                                    p++;
28403|      0|                                                    ns += (int)((int const) * tmp___1 - 48);
28404|      0|                                                }
28405|      0|                                                digits++;
28406|      0|                                            }
28407|      0|while_break___2: /* CIL Label */
28408|      0|                                            ;
28409|      0|                                        }
28410|      0|                                        if (sign < 0) {
28411|      0|                                            {
28412|      0|                                                while (1) {
28413|      0|while_continue___3: /* CIL Label */
28414|      0|                                                    ;
28415|      0|                                                    if (!((unsigned int)*p - 48U <= 9U)) {
28416|      0|                                                        goto while_break___3;
28417|      0|                                                    }
28418|      0|                                                    if ((int const) * p != 48) {
28419|      0|                                                        ns++;
28420|      0|                                                        goto while_break___3;
28421|      0|                                                    }
28422|      0|                                                    p++;
28423|      0|                                                }
28424|      0|while_break___3: /* CIL Label */
28425|      0|                                                ;
28426|      0|                                            }
28427|      0|                                        }
28428|      0|                                        {
28429|      0|                                            while (1) {
28430|      0|while_continue___4: /* CIL Label */
28431|      0|                                                ;
28432|      0|                                                if (!((unsigned int)*p - 48U <= 9U)) {
28433|      0|                                                    goto while_break___4;
28434|      0|                                                }
28435|      0|                                                p++;
28436|      0|                                            }
28437|      0|while_break___4: /* CIL Label */
28438|      0|                                            ;
28439|      0|                                        }
28440|      0|                                        if (sign < 0) {
28441|      0|                                            if (ns) {
28442|      0|                                                s--;
28443|      0|                                                if (!(s < 0L)) {
28444|      0|                                                    return ('?');
28445|      0|                                                }
28446|      0|                                                ns = 1000000000 - ns;
28447|      0|                                            }
28448|      0|                                        }
28449|      0|                                        lvalp->timespec.tv_sec = s;
28450|      0|                                        lvalp->timespec.tv_nsec = (__syscall_slong_t)ns;
28451|      0|                                        pc->input = p;
28452|      0|                                        if (sign) {
28453|      0|                                            tmp___7 = 273;
28454|      0|                                        }
28455|      0|                                        else {
28456|      0|                                            tmp___7 = 274;
28457|      0|                                        }
28458|      0|                                        return (tmp___7);
28459|      0|                                    }
28460|      0|                                    else {
28461|      0|                                        goto _L___4;
28462|      0|                                    }
28463|      0|                                }
28464|      0|                                else {
28465|      0|_L___4: /* CIL Label */
28466|      0|                                    if (sign < 0) {
28467|      0|                                        lvalp->textintval.value = (long)(-value);
28468|      0|                                        if (0L < lvalp->textintval.value) {
28469|      0|                                            return ('?');
28470|      0|                                        }
28471|      0|                                    }
28472|      0|                                    else {
28473|      0|                                        lvalp->textintval.value = (long)value;
28474|      0|                                        if (lvalp->textintval.value < 0L) {
28475|      0|                                            return ('?');
28476|      0|                                        }
28477|      0|                                    }
28478|      0|                                    lvalp->textintval.digits = (size_t)(p - pc->input);
28479|      0|                                    pc->input = p;
28480|      0|                                    if (sign) {
28481|      0|                                        tmp___8 = 271;
28482|      0|                                    }
28483|      0|                                    else {
28484|      0|                                        tmp___8 = 272;
28485|      0|                                    }
28486|      0|                                    return (tmp___8);
28487|      0|                                }
28488|      0|                            }
28489|      0|                        }
28490|      0|                    }
28491|      0|                }
28492|      0|                {
28493|      0|                    tmp___4 = __ctype_b_loc();
28494|      0|                }
28495|      0|                if ((int const) * (*tmp___4 + (int)c) & 1024) {
28496|      0|                    p___0 = buff;
28497|      0|                    {
28498|      0|                        while (1) {
28499|      0|while_continue___5: /* CIL Label */
28500|      0|                            ;
28501|      0|                            if ((unsigned long)p___0 <
28502|      0|                                    (unsigned long)((buff + sizeof(buff)) - 1)) {
28503|      0|                                tmp___2 = p___0;
28504|      0|                                p___0++;
28505|      0|                                *tmp___2 = (char)c;
28506|      0|                            }
28507|      0|                            {
28508|      0|                                (pc->input)++;
28509|      0|                                c = (unsigned char)*(pc->input);
28510|      0|                                tmp___3 = __ctype_b_loc();
28511|      0|                            }
28512|      0|                            if (!((int const) * (*tmp___3 + (int)c) & 1024)) {
28513|      0|                                if (!((int)c == 46)) {
28514|      0|                                    goto while_break___5;
28515|      0|                                }
28516|      0|                            }
28517|      0|                        }
28518|      0|while_break___5: /* CIL Label */
28519|      0|                        ;
28520|      0|                    }
28521|      0|                    {
28522|      0|                        *p___0 = (char)'\000';
28523|      0|                        tp = lookup_word((parser_control const *)pc, buff);
28524|      0|                    }
28525|      0|                    if (!tp) {
28526|      0|                        return ('?');
28527|      0|                    }
28528|      0|                    lvalp->intval = (long)tp->value;
28529|      0|                    return ((int)tp->type);
28530|      0|                }
28531|      0|                if ((int)c != 40) {
28532|      0|                    tmp___5 = pc->input;
28533|      0|                    (pc->input)++;
28534|      0|                    return ((int)*tmp___5);
28535|      0|                }
28536|      0|                count = (size_t)0;
28537|      0|                {
28538|      0|                    while (1) {
28539|      0|while_continue___6: /* CIL Label */
28540|      0|                        ;
28541|      0|                        tmp___6 = pc->input;
28542|      0|                        (pc->input)++;
28543|      0|                        c = (unsigned char)*tmp___6;
28544|      0|                        if ((int)c == 0) {
28545|      0|                            return ((int)c);
28546|      0|                        }
28547|      0|                        if ((int)c == 40) {
28548|      0|                            count++;
28549|      0|                        }
28550|      0|                        else {
28551|      0|                            if ((int)c == 41) {
28552|      0|                                count--;
28553|      0|                            }
28554|      0|                        }
28555|      0|                        if (!(count != 0UL)) {
28556|      0|                            goto while_break___6;
28557|      0|                        }
28558|      0|                    }
28559|      0|while_break___6: /* CIL Label */
28560|      0|                    ;
28561|      0|                }
28562|      0|__Cont:
28563|      0|                ;
28564|      0|            }
28565|      0|while_break: /* CIL Label */
28566|      0|            ;
28567|      0|        }
28568|      0|    }
28569|      0|}
28570|       |static int yyerror(char *s __attribute__((__unused__)))
28571|      0|{
28572|       |
28573|      0|    {
28574|      0|        return (0);
28575|      0|    }
28576|      0|}
28577|       |_Bool get_date(struct timespec *result, char const *p,
28578|       |               struct timespec const *now)
28579|      0|{
28580|      0|    time_t Start;
28581|      0|    long Start_ns;
28582|      0|    struct tm const *tmp;
28583|      0|    struct tm tm;
28584|      0|    struct tm tm0;
28585|      0|    parser_control pc;
28586|      0|    struct timespec gettime_buffer;
28587|      0|    int tmp___0;
28588|      0|    struct tm *tmp___1;
28589|      0|    int quarter;
28590|      0|    time_t probe;
28591|      0|    struct tm const *probe_tm;
28592|      0|    struct tm *tmp___2;
28593|      0|    int tmp___3;
28594|      0|    int tmp___4;
28595|      0|    long tmp___5;
28596|      0|    long delta;
28597|      0|    time_t t1;
28598|      0|    long sum_ns;
28599|      0|    long normalized_ns;
28600|      0|    time_t t0;
28601|      0|    long d1;
28602|      0|    time_t t1___0;
28603|      0|    long d2;
28604|      0|    time_t t2;
28605|      0|    long d3;
28606|      0|    time_t t3;
28607|      0|    long d4;
28608|      0|    time_t t4;
28609|      0|    void *__cil_tmp33;
28610|      0|    int __cil_tmp34;
28611|       |
28612|      0|    {
28613|      0|        if (!now) {
28614|      0|            {
28615|      0|                tmp___0 = gettime(&gettime_buffer);
28616|      0|            }
28617|      0|            if (tmp___0 != 0) {
28618|      0|                return ((_Bool)0);
28619|      0|            }
28620|      0|            now = (struct timespec const *)(&gettime_buffer);
28621|      0|        }
28622|      0|        {
28623|      0|            Start = (time_t)now->tv_sec;
28624|      0|            Start_ns = (long)now->tv_nsec;
28625|      0|            tmp___1 = localtime(&now->tv_sec);
28626|      0|            tmp = (struct tm const *)tmp___1;
28627|      0|        }
28628|      0|        if (!tmp) {
28629|      0|            return ((_Bool)0);
28630|      0|        }
28631|      0|        pc.input = p;
28632|      0|        pc.year.value = (long)tmp->tm_year;
28633|      0|        pc.year.value += 1900L;
28634|      0|        pc.year.digits = (size_t)4;
28635|      0|        pc.month = (long)(tmp->tm_mon + 1);
28636|      0|        pc.day = (long)tmp->tm_mday;
28637|      0|        pc.hour = (long)tmp->tm_hour;
28638|      0|        pc.minutes = (long)tmp->tm_min;
28639|      0|        pc.seconds.tv_sec = (__time_t)tmp->tm_sec;
28640|      0|        pc.seconds.tv_nsec = Start_ns;
28641|      0|        tm.tm_isdst = (int)tmp->tm_isdst;
28642|      0|        pc.meridian = 2;
28643|      0|        pc.rel_ns = 0L;
28644|      0|        pc.rel_seconds = 0L;
28645|      0|        pc.rel_minutes = 0L;
28646|      0|        pc.rel_hour = 0L;
28647|      0|        pc.rel_day = 0L;
28648|      0|        pc.rel_month = 0L;
28649|      0|        pc.rel_year = 0L;
28650|      0|        pc.timespec_seen = (_Bool)0;
28651|      0|        pc.dates_seen = (size_t)0;
28652|      0|        pc.days_seen = (size_t)0;
28653|      0|        pc.rels_seen = (size_t)0;
28654|      0|        pc.times_seen = (size_t)0;
28655|      0|        pc.local_zones_seen = (size_t)0;
28656|      0|        pc.zones_seen = (size_t)0;
28657|      0|        pc.local_time_zone_table[0].name = (char const *)tmp->tm_zone;
28658|      0|        pc.local_time_zone_table[0].type = 263;
28659|      0|        pc.local_time_zone_table[0].value = (int)tmp->tm_isdst;
28660|      0|        pc.local_time_zone_table[1].name = (char const *)0;
28661|      0|        quarter = 1;
28662|      0|        {
28663|      0|            while (1) {
28664|      0|while_continue: /* CIL Label */
28665|      0|                ;
28666|      0|                if (!(quarter <= 3)) {
28667|      0|                    goto while_break;
28668|      0|                }
28669|      0|                {
28670|      0|                    probe = Start + (time_t)(quarter * 7776000);
28671|      0|                    tmp___2 = localtime((time_t const *)(&probe));
28672|      0|                    probe_tm = (struct tm const *)tmp___2;
28673|      0|                }
28674|      0|                if (probe_tm) {
28675|      0|                    if (probe_tm->tm_zone) {
28676|      0|                        if (probe_tm->tm_isdst !=
28677|      0|                                (int const)pc.local_time_zone_table[0].value) {
28678|      0|                            pc.local_time_zone_table[1].name =
28679|      0|                                (char const *)probe_tm->tm_zone;
28680|      0|                            pc.local_time_zone_table[1].type = 263;
28681|      0|                            pc.local_time_zone_table[1].value = (int)probe_tm->tm_isdst;
28682|      0|                            pc.local_time_zone_table[2].name = (char const *)0;
28683|      0|                            goto while_break;
28684|      0|                        }
28685|      0|                    }
28686|      0|                }
28687|      0|                quarter++;
28688|      0|            }
28689|      0|while_break: /* CIL Label */
28690|      0|            ;
28691|      0|        }
28692|      0|        if (pc.local_time_zone_table[0].name) {
28693|      0|            if (pc.local_time_zone_table[1].name) {
28694|      0|                {
28695|      0|                    tmp___3 = strcmp(pc.local_time_zone_table[0].name,
28696|      0|                                     pc.local_time_zone_table[1].name);
28697|      0|                }
28698|      0|                if (!tmp___3) {
28699|      0|                    pc.local_time_zone_table[0].value = -1;
28700|      0|                    pc.local_time_zone_table[1].name = (char const *)0;
28701|      0|                }
28702|      0|            }
28703|      0|        }
28704|      0|        {
28705|      0|            tmp___4 = yyparse((void *)(&pc));
28706|      0|        }
28707|      0|        if (tmp___4 != 0) {
28708|      0|            return ((_Bool)0);
28709|      0|        }
28710|      0|        if (pc.timespec_seen) {
28711|      0|            *result = pc.seconds;
28712|      0|            return ((_Bool)1);
28713|      0|        }
28714|      0|        if (1UL < pc.times_seen) {
28715|      0|            return ((_Bool)0);
28716|      0|        }
28717|      0|        else {
28718|      0|            if (1UL < pc.dates_seen) {
28719|      0|                return ((_Bool)0);
28720|      0|            }
28721|      0|            else {
28722|      0|                if (1UL < pc.days_seen) {
28723|      0|                    return ((_Bool)0);
28724|      0|                }
28725|      0|                else {
28726|      0|                    if (1UL < pc.local_zones_seen + pc.zones_seen) {
28727|      0|                        return ((_Bool)0);
28728|      0|                    }
28729|      0|                    else {
28730|      0|                        if (pc.local_zones_seen) {
28731|      0|                            if (1 < pc.local_isdst) {
28732|      0|                                return ((_Bool)0);
28733|      0|                            }
28734|      0|                        }
28735|      0|                    }
28736|      0|                }
28737|      0|            }
28738|      0|        }
28739|      0|        {
28740|      0|            tmp___5 = to_year(pc.year);
28741|      0|            tm.tm_year = (int)((tmp___5 - 1900L) + pc.rel_year);
28742|      0|            tm.tm_mon = (int)((pc.month - 1L) + pc.rel_month);
28743|      0|            tm.tm_mday = (int)(pc.day + pc.rel_day);
28744|      0|        }
28745|      0|        if (pc.times_seen) {
28746|      0|            goto _L___3;
28747|      0|        }
28748|      0|        else {
28749|      0|            if (pc.rels_seen) {
28750|      0|                if (!pc.dates_seen) {
28751|      0|                    if (!pc.days_seen) {
28752|      0|_L___3 : { /* CIL Label */
28753|      0|                            tm.tm_hour = to_hour(pc.hour, pc.meridian);
28754|      0|                        }
28755|      0|                        if (tm.tm_hour < 0) {
28756|      0|                            return ((_Bool)0);
28757|      0|                        }
28758|      0|                        tm.tm_min = (int)pc.minutes;
28759|      0|                        tm.tm_sec = (int)pc.seconds.tv_sec;
28760|      0|                    }
28761|      0|                    else {
28762|      0|                        tm.tm_sec = 0;
28763|      0|                        tm.tm_min = tm.tm_sec;
28764|      0|                        tm.tm_hour = tm.tm_min;
28765|      0|                        pc.seconds.tv_nsec = (__syscall_slong_t)0;
28766|      0|                    }
28767|      0|                }
28768|      0|                else {
28769|      0|                    tm.tm_sec = 0;
28770|      0|                    tm.tm_min = tm.tm_sec;
28771|      0|                    tm.tm_hour = tm.tm_min;
28772|      0|                    pc.seconds.tv_nsec = (__syscall_slong_t)0;
28773|      0|                }
28774|      0|            }
28775|      0|            else {
28776|      0|                tm.tm_sec = 0;
28777|      0|                tm.tm_min = tm.tm_sec;
28778|      0|                tm.tm_hour = tm.tm_min;
28779|      0|                pc.seconds.tv_nsec = (__syscall_slong_t)0;
28780|      0|            }
28781|      0|        }
28782|      0|        if (((((pc.dates_seen | pc.days_seen) | pc.times_seen) |
28783|      0|                (unsigned long)pc.rel_day) |
28784|      0|                (unsigned long)pc.rel_month) |
28785|      0|                (unsigned long)pc.rel_year) {
28786|      0|            tm.tm_isdst = -1;
28787|      0|        }
28788|      0|        if (pc.local_zones_seen) {
28789|      0|            tm.tm_isdst = pc.local_isdst;
28790|      0|        }
28791|      0|        {
28792|      0|            tm0 = tm;
28793|      0|            Start = rpl_mktime(&tm);
28794|      0|        }
28795|      0|        if (Start == -1L) {
28796|      0|            if (pc.zones_seen) {
28797|      0|                tm = tm0;
28798|      0|                if (tm.tm_year <= 70) {
28799|      0|                    (tm.tm_mday)++;
28800|      0|                    pc.time_zone += 1440L;
28801|      0|                }
28802|      0|                else {
28803|      0|                    (tm.tm_mday)--;
28804|      0|                    pc.time_zone -= 1440L;
28805|      0|                }
28806|      0|                {
28807|      0|                    Start = rpl_mktime(&tm);
28808|      0|                }
28809|      0|            }
28810|      0|            if (Start == -1L) {
28811|      0|                return ((_Bool)0);
28812|      0|            }
28813|      0|        }
28814|      0|        if (pc.days_seen) {
28815|      0|            if (!pc.dates_seen) {
28816|      0|                {
28817|      0|                    tm.tm_mday =
28818|      0|                        (int)((long)tm.tm_mday +
28819|      0|                              ((long)(((pc.day_number - tm.tm_wday) + 7) % 7) +
28820|      0|                               7L * (pc.day_ordinal - (long)(0L < pc.day_ordinal))));
28821|      0|                    tm.tm_isdst = -1;
28822|      0|                    Start = rpl_mktime(&tm);
28823|      0|                }
28824|      0|                if (Start == -1L) {
28825|      0|                    return ((_Bool)0);
28826|      0|                }
28827|      0|            }
28828|      0|        }
28829|      0|        if (pc.zones_seen) {
28830|      0|            delta = pc.time_zone * 60L;
28831|      0|            delta -= tm.tm_gmtoff;
28832|      0|            t1 = Start - delta;
28833|      0|            if ((Start < t1) != (delta < 0L)) {
28834|      0|                return ((_Bool)0);
28835|      0|            }
28836|      0|            Start = t1;
28837|      0|        }
28838|      0|        sum_ns = pc.seconds.tv_nsec + pc.rel_ns;
28839|      0|        normalized_ns = (sum_ns % 1000000000L + 1000000000L) % 1000000000L;
28840|      0|        t0 = Start;
28841|      0|        d1 = 3600L * pc.rel_hour;
28842|      0|        t1___0 = t0 + d1;
28843|      0|        d2 = 60L * pc.rel_minutes;
28844|      0|        t2 = t1___0 + d2;
28845|      0|        d3 = pc.rel_seconds;
28846|      0|        t3 = t2 + d3;
28847|      0|        d4 = (sum_ns - normalized_ns) / 1000000000L;
28848|      0|        t4 = t3 + d4;
28849|      0|        if ((((((d1 / 3600L ^ pc.rel_hour) | (d2 / 60L ^ pc.rel_minutes)) |
28850|      0|                (long)((t1___0 < t0) ^ (d1 < 0L))) |
28851|      0|                (long)((t2 < t1___0) ^ (d2 < 0L))) |
28852|      0|                (long)((t3 < t2) ^ (d3 < 0L))) |
28853|      0|                (long)((t4 < t3) ^ (d4 < 0L))) {
28854|      0|            return ((_Bool)0);
28855|      0|        }
28856|      0|        result->tv_sec = t4;
28857|      0|        result->tv_nsec = normalized_ns;
28858|      0|        return ((_Bool)1);
28859|      0|    }
28860|      0|}
28861|       |/* #pragma merger("0","01a.getopt1.o.i","") */
28862|       |/* #pragma merger("0","01b.getopt.o.i","") */
28863|       |/* #pragma merger("0","01c.gettime.o.i","") */
28864|       |extern __attribute__((__nothrow__)) int(
28865|       |    __attribute__((__nonnull__(1), __leaf__))
28866|       |    gettimeofday)(struct timeval *__restrict __tv, __timezone_ptr_t __tz);
28867|       |int gettime(struct timespec *ts)
28868|      0|{
28869|      0|    int tmp;
28870|      0|    struct timeval tv;
28871|      0|    int r;
28872|      0|    int tmp___0;
28873|       |
28874|      0|    {
28875|      0|        {
28876|      0|            tmp = clock_gettime(0, ts);
28877|      0|        }
28878|      0|        if (tmp == 0) {
28879|      0|            return (0);
28880|      0|        }
28881|      0|        {
28882|      0|            tmp___0 = gettimeofday((struct timeval * /* __restrict  */)(&tv),
28883|      0|                                   (__timezone_ptr_t)0);
28884|      0|            r = tmp___0;
28885|      0|        }
28886|      0|        if (r == 0) {
28887|      0|            ts->tv_sec = tv.tv_sec;
28888|      0|            ts->tv_nsec = tv.tv_usec * 1000L;
28889|      0|        }
28890|      0|        return (r);
28891|      0|    }
28892|      0|}
28893|       |/* #pragma merger("0","01d.hash.o.i","") */
28894|       |_Bool hash_rehash(Hash_table *table___0, size_t candidate);
28895|       |static struct hash_tuning const default_tuning = {
28896|       |    (float)0.0, (float)1.0, (float)0.8, (float)1.414, (_Bool)0
28897|       |};
28898|       |void *hash_lookup(Hash_table const *table___0, void const *entry)
28899|      0|{
28900|      0|    struct hash_entry const *bucket;
28901|      0|    size_t tmp;
28902|      0|    struct hash_entry const *cursor;
28903|      0|    _Bool tmp___0;
28904|       |
28905|      0|    {
28906|      0|        {
28907|      0|            tmp = (*(table___0->hasher))(entry, (size_t)table___0->n_buckets);
28908|      0|            bucket = (struct hash_entry const *)(table___0->bucket + tmp);
28909|      0|        }
28910|      0|        if (!((unsigned long)bucket < (unsigned long)table___0->bucket_limit)) {
28911|      0|            {
28912|      0|                abort();
28913|      0|            }
28914|      0|        }
28915|      0|        if ((unsigned long)bucket->data == (unsigned long)((void *)0)) {
28916|      0|            return ((void *)0);
28917|      0|        }
28918|      0|        cursor = bucket;
28919|      0|        {
28920|      0|            while (1) {
28921|      0|while_continue: /* CIL Label */
28922|      0|                ;
28923|      0|                if (!cursor) {
28924|      0|                    goto while_break;
28925|      0|                }
28926|      0|                {
28927|      0|                    tmp___0 =
28928|      0|                        (*(table___0->comparator))(entry, (void const *)cursor->data);
28929|      0|                }
28930|      0|                if (tmp___0) {
28931|      0|                    return ((void *)cursor->data);
28932|      0|                }
28933|      0|                cursor = (struct hash_entry const *)cursor->next;
28934|      0|            }
28935|      0|while_break: /* CIL Label */
28936|      0|            ;
28937|      0|        }
28938|      0|        return ((void *)0);
28939|      0|    }
28940|      0|}
28941|       |void *hash_get_first(Hash_table const *table___0)
28942|      0|{
28943|      0|    struct hash_entry const *bucket;
28944|       |
28945|      0|    {
28946|      0|        if (table___0->n_entries == 0UL) {
28947|      0|            return ((void *)0);
28948|      0|        }
28949|      0|        bucket = (struct hash_entry const *)table___0->bucket;
28950|      0|        {
28951|      0|            while (1) {
28952|      0|while_continue: /* CIL Label */
28953|      0|                ;
28954|      0|                if (!((unsigned long)bucket < (unsigned long)table___0->bucket_limit)) {
28955|      0|                    {
28956|      0|                        abort();
28957|      0|                    }
28958|      0|                }
28959|      0|                else {
28960|      0|                    if (bucket->data) {
28961|      0|                        return ((void *)bucket->data);
28962|      0|                    }
28963|      0|                }
28964|      0|                bucket++;
28965|      0|            }
28966|      0|while_break: /* CIL Label */
28967|      0|            ;
28968|      0|        }
28969|      0|    }
28970|      0|}
28971|       |void *hash_get_next(Hash_table const *table___0, void const *entry)
28972|      0|{
28973|      0|    struct hash_entry const *bucket;
28974|      0|    size_t tmp;
28975|      0|    struct hash_entry const *cursor;
28976|       |
28977|      0|    {
28978|      0|        {
28979|      0|            tmp = (*(table___0->hasher))(entry, (size_t)table___0->n_buckets);
28980|      0|            bucket = (struct hash_entry const *)(table___0->bucket + tmp);
28981|      0|        }
28982|      0|        if (!((unsigned long)bucket < (unsigned long)table___0->bucket_limit)) {
28983|      0|            {
28984|      0|                abort();
28985|      0|            }
28986|      0|        }
28987|      0|        cursor = bucket;
28988|      0|        {
28989|      0|            while (1) {
28990|      0|while_continue: /* CIL Label */
28991|      0|                ;
28992|      0|                if (!cursor) {
28993|      0|                    goto while_break;
28994|      0|                }
28995|      0|                if ((unsigned long)cursor->data == (unsigned long)entry) {
28996|      0|                    if (cursor->next) {
28997|      0|                        return ((cursor->next)->data);
28998|      0|                    }
28999|      0|                }
29000|      0|                cursor = (struct hash_entry const *)cursor->next;
29001|      0|            }
29002|      0|while_break: /* CIL Label */
29003|      0|            ;
29004|      0|        }
29005|      0|        {
29006|      0|            while (1) {
29007|      0|while_continue___0: /* CIL Label */
29008|      0|                ;
29009|      0|                bucket++;
29010|      0|                if (!((unsigned long)bucket < (unsigned long)table___0->bucket_limit)) {
29011|      0|                    goto while_break___0;
29012|      0|                }
29013|      0|                if (bucket->data) {
29014|      0|                    return ((void *)bucket->data);
29015|      0|                }
29016|      0|            }
29017|      0|while_break___0: /* CIL Label */
29018|      0|            ;
29019|      0|        }
29020|      0|        return ((void *)0);
29021|      0|    }
29022|      0|}
29023|       |size_t hash_do_for_each(Hash_table const *table___0,
29024|       |                        _Bool (*processor)(void *, void *),
29025|       |                        void *processor_data)
29026|      0|{
29027|      0|    size_t counter;
29028|      0|    struct hash_entry const *bucket;
29029|      0|    struct hash_entry const *cursor;
29030|      0|    _Bool tmp;
29031|       |
29032|      0|    {
29033|      0|        counter = (size_t)0;
29034|      0|        bucket = (struct hash_entry const *)table___0->bucket;
29035|      0|        {
29036|      0|            while (1) {
29037|      0|while_continue: /* CIL Label */
29038|      0|                ;
29039|      0|                if (!((unsigned long)bucket < (unsigned long)table___0->bucket_limit)) {
29040|      0|                    goto while_break;
29041|      0|                }
29042|      0|                if (bucket->data) {
29043|      0|                    cursor = bucket;
29044|      0|                    {
29045|      0|                        while (1) {
29046|      0|while_continue___0: /* CIL Label */
29047|      0|                            ;
29048|      0|                            if (!cursor) {
29049|      0|                                goto while_break___0;
29050|      0|                            }
29051|      0|                            {
29052|      0|                                tmp = (*processor)((void *)cursor->data, processor_data);
29053|      0|                            }
29054|      0|                            if (!tmp) {
29055|      0|                                return (counter);
29056|      0|                            }
29057|      0|                            counter++;
29058|      0|                            cursor = (struct hash_entry const *)cursor->next;
29059|      0|                        }
29060|      0|while_break___0: /* CIL Label */
29061|      0|                        ;
29062|      0|                    }
29063|      0|                }
29064|      0|                bucket++;
29065|      0|            }
29066|      0|while_break: /* CIL Label */
29067|      0|            ;
29068|      0|        }
29069|      0|        return (counter);
29070|      0|    }
29071|      0|}
29072|       |size_t hash_string(char const *string, size_t n_buckets)
29073|      0|{
29074|      0|    size_t value;
29075|      0|    char const *tmp;
29076|       |
29077|      0|    {
29078|      0|        value = (size_t)0;
29079|      0|        {
29080|      0|            while (1) {
29081|      0|while_continue: /* CIL Label */
29082|      0|                ;
29083|      0|                if (!*string) {
29084|      0|                    goto while_break;
29085|      0|                }
29086|      0|                tmp = string;
29087|      0|                string++;
29088|      0|                value = (value * 31UL + (size_t)((unsigned char)*tmp)) % n_buckets;
29089|      0|            }
29090|      0|while_break: /* CIL Label */
29091|      0|            ;
29092|      0|        }
29093|      0|        return (value);
29094|      0|    }
29095|      0|}
29096|       |static _Bool is_prime(size_t candidate)
29097|      0|{
29098|      0|    size_t divisor;
29099|      0|    size_t square;
29100|      0|    int tmp;
29101|       |
29102|      0|    {
29103|      0|        divisor = (size_t)3;
29104|      0|        square = divisor * divisor;
29105|      0|        {
29106|      0|            while (1) {
29107|      0|while_continue: /* CIL Label */
29108|      0|                ;
29109|      0|                if (square < candidate) {
29110|      0|                    if (!(candidate % divisor)) {
29111|      0|                        goto while_break;
29112|      0|                    }
29113|      0|                }
29114|      0|                else {
29115|      0|                    goto while_break;
29116|      0|                }
29117|      0|                divisor++;
29118|      0|                square += 4UL * divisor;
29119|      0|                divisor++;
29120|      0|            }
29121|      0|while_break: /* CIL Label */
29122|      0|            ;
29123|      0|        }
29124|      0|        if (candidate % divisor) {
29125|      0|            tmp = 1;
29126|      0|        }
29127|      0|        else {
29128|      0|            tmp = 0;
29129|      0|        }
29130|      0|        return ((_Bool)tmp);
29131|      0|    }
29132|      0|}
29133|       |static size_t next_prime(size_t candidate)
29134|      0|{
29135|      0|    _Bool tmp;
29136|       |
29137|      0|    {
29138|      0|        if (candidate < 10UL) {
29139|      0|            candidate = (size_t)10;
29140|      0|        }
29141|      0|        candidate |= 1UL;
29142|      0|        {
29143|      0|            while (1) {
29144|      0|while_continue: /* CIL Label */
29145|      0|                ;
29146|      0|                {
29147|      0|                    tmp = is_prime(candidate);
29148|      0|                }
29149|      0|                if (tmp) {
29150|      0|                    goto while_break;
29151|      0|                }
29152|      0|                candidate += 2UL;
29153|      0|            }
29154|      0|while_break: /* CIL Label */
29155|      0|            ;
29156|      0|        }
29157|      0|        return (candidate);
29158|      0|    }
29159|      0|}
29160|       |static _Bool check_tuning(Hash_table *table___0)
29161|      0|{
29162|      0|    Hash_tuning const *tuning;
29163|      0|    float epsilon;
29164|       |
29165|      0|    {
29166|      0|        tuning = table___0->tuning;
29167|      0|        epsilon = 0.1f;
29168|      0|        if (epsilon < (float)tuning->growth_threshold) {
29169|      0|            if (tuning->growth_threshold < (float const)((float)1 - epsilon)) {
29170|      0|                if ((float)1 + epsilon < (float)tuning->growth_factor) {
29171|      0|                    if ((float const)0 <= tuning->shrink_threshold) {
29172|      0|                        if (tuning->shrink_threshold + (float const)epsilon <
29173|      0|                                tuning->shrink_factor) {
29174|      0|                            if (tuning->shrink_factor <= (float const)1) {
29175|      0|                                if (tuning->shrink_threshold + (float const)epsilon <
29176|      0|                                        tuning->growth_threshold) {
29177|      0|                                    return ((_Bool)1);
29178|      0|                                }
29179|      0|                            }
29180|      0|                        }
29181|      0|                    }
29182|      0|                }
29183|      0|            }
29184|      0|        }
29185|      0|        table___0->tuning = &default_tuning;
29186|      0|        return ((_Bool)0);
29187|      0|    }
29188|      0|}
29189|       |Hash_table *hash_initialize(size_t candidate, Hash_tuning const *tuning,
29190|       |                            size_t (*hasher)(void const *, size_t),
29191|       |                            _Bool (*comparator)(void const *, void const *),
29192|       |                            void (*data_freer)(void *))
29193|      0|{
29194|      0|    Hash_table *table___0;
29195|      0|    void *tmp;
29196|      0|    _Bool tmp___0;
29197|      0|    float new_candidate;
29198|      0|    void *tmp___1;
29199|      0|    int tmp___2;
29200|      0|    int tmp___3;
29201|       |
29202|      0|    {
29203|      0|        if ((unsigned long)hasher == (unsigned long)((void *)0)) {
29204|      0|            return ((Hash_table *)((void *)0));
29205|      0|        }
29206|      0|        else {
29207|      0|            if ((unsigned long)comparator == (unsigned long)((void *)0)) {
29208|      0|                return ((Hash_table *)((void *)0));
29209|      0|            }
29210|      0|        }
29211|      0|        {
29212|      0|            tmp = malloc(sizeof(*table___0));
29213|      0|            table___0 = (Hash_table *)tmp;
29214|      0|        }
29215|      0|        if ((unsigned long)table___0 == (unsigned long)((void *)0)) {
29216|      0|            return ((Hash_table *)((void *)0));
29217|      0|        }
29218|      0|        if (!tuning) {
29219|      0|            tuning = &default_tuning;
29220|      0|        }
29221|      0|        {
29222|      0|            table___0->tuning = tuning;
29223|      0|            tmp___0 = check_tuning(table___0);
29224|      0|        }
29225|      0|        if (!tmp___0) {
29226|      0|            goto fail;
29227|      0|        }
29228|      0|        if (!tuning->is_n_buckets) {
29229|      0|            new_candidate =
29230|      0|                (float)((float const)candidate / tuning->growth_threshold);
29231|      0|            if ((float)0xffffffffffffffffUL <= new_candidate) {
29232|      0|                goto fail;
29233|      0|            }
29234|      0|            candidate = (size_t)new_candidate;
29235|      0|        }
29236|      0|        if (sizeof(ptrdiff_t) <= sizeof(size_t)) {
29237|      0|            tmp___2 = -1;
29238|      0|        }
29239|      0|        else {
29240|      0|            tmp___2 = -2;
29241|      0|        }
29242|      0|        if ((size_t)tmp___2 / sizeof(*(table___0->bucket)) < candidate) {
29243|      0|            goto fail;
29244|      0|        }
29245|      0|        {
29246|      0|            table___0->n_buckets = next_prime(candidate);
29247|      0|        }
29248|      0|        if (sizeof(ptrdiff_t) <= sizeof(size_t)) {
29249|      0|            tmp___3 = -1;
29250|      0|        }
29251|      0|        else {
29252|      0|            tmp___3 = -2;
29253|      0|        }
29254|      0|        if ((size_t)tmp___3 / sizeof(*(table___0->bucket)) < table___0->n_buckets) {
29255|      0|            goto fail;
29256|      0|        }
29257|      0|        {
29258|      0|            tmp___1 = calloc(table___0->n_buckets, sizeof(*(table___0->bucket)));
29259|      0|            table___0->bucket = (struct hash_entry *)tmp___1;
29260|      0|            table___0->bucket_limit =
29261|      0|                (struct hash_entry const *)(table___0->bucket + table___0->n_buckets);
29262|      0|            table___0->n_buckets_used = (size_t)0;
29263|      0|            table___0->n_entries = (size_t)0;
29264|      0|            table___0->hasher = hasher;
29265|      0|            table___0->comparator = comparator;
29266|      0|            table___0->data_freer = data_freer;
29267|      0|            table___0->free_entry_list = (struct hash_entry *)((void *)0);
29268|      0|        }
29269|      0|        return (table___0);
29270|      0|fail : {
29271|      0|            free((void *)table___0);
29272|      0|        }
29273|      0|        return ((Hash_table *)((void *)0));
29274|      0|    }
29275|      0|}
29276|       |static struct hash_entry *allocate_entry(Hash_table *table___0)
29277|      0|{
29278|      0|    struct hash_entry *new;
29279|      0|    void *tmp;
29280|       |
29281|      0|    {
29282|      0|        if (table___0->free_entry_list) {
29283|      0|            new = table___0->free_entry_list;
29284|      0|            table___0->free_entry_list = new->next;
29285|      0|        }
29286|      0|        else {
29287|      0|            {
29288|      0|                tmp = malloc(sizeof(*new));
29289|      0|                new = (struct hash_entry *)tmp;
29290|      0|            }
29291|      0|        }
29292|      0|        return (new);
29293|      0|    }
29294|      0|}
29295|       |static void free_entry(Hash_table *table___0, struct hash_entry *entry)
29296|      0|{
29297|       |
29298|      0|    {
29299|      0|        entry->data = (void *)0;
29300|      0|        entry->next = table___0->free_entry_list;
29301|      0|        table___0->free_entry_list = entry;
29302|      0|        return;
29303|      0|    }
29304|      0|}
29305|       |static void *hash_find_entry(Hash_table *table___0, void const *entry,
29306|       |                             struct hash_entry **bucket_head, _Bool delete)
29307|      0|{
29308|      0|    struct hash_entry *bucket;
29309|      0|    size_t tmp;
29310|      0|    struct hash_entry *cursor;
29311|      0|    void *data;
29312|      0|    struct hash_entry *next;
29313|      0|    _Bool tmp___0;
29314|      0|    void *data___0;
29315|      0|    struct hash_entry *next___0;
29316|      0|    _Bool tmp___1;
29317|       |
29318|      0|    {
29319|      0|        {
29320|      0|            tmp = (*(table___0->hasher))(entry, table___0->n_buckets);
29321|      0|            bucket = table___0->bucket + tmp;
29322|      0|        }
29323|      0|        if (!((unsigned long)bucket < (unsigned long)table___0->bucket_limit)) {
29324|      0|            {
29325|      0|                abort();
29326|      0|            }
29327|      0|        }
29328|      0|        *bucket_head = bucket;
29329|      0|        if ((unsigned long)bucket->data == (unsigned long)((void *)0)) {
29330|      0|            return ((void *)0);
29331|      0|        }
29332|      0|        {
29333|      0|            tmp___0 = (*(table___0->comparator))(entry, (void const *)bucket->data);
29334|      0|        }
29335|      0|        if (tmp___0) {
29336|      0|            data = bucket->data;
29337|      0|            if (delete) {
29338|      0|                if (bucket->next) {
29339|      0|                    {
29340|      0|                        next = bucket->next;
29341|      0|                        *bucket = *next;
29342|      0|                        free_entry(table___0, next);
29343|      0|                    }
29344|      0|                }
29345|      0|                else {
29346|      0|                    bucket->data = (void *)0;
29347|      0|                }
29348|      0|            }
29349|      0|            return (data);
29350|      0|        }
29351|      0|        cursor = bucket;
29352|      0|        {
29353|      0|            while (1) {
29354|      0|while_continue: /* CIL Label */
29355|      0|                ;
29356|      0|                if (!cursor->next) {
29357|      0|                    goto while_break;
29358|      0|                }
29359|      0|                {
29360|      0|                    tmp___1 = (*(table___0->comparator))(
29361|      0|                                  entry, (void const *)(cursor->next)->data);
29362|      0|                }
29363|      0|                if (tmp___1) {
29364|      0|                    data___0 = (cursor->next)->data;
29365|      0|                    if (delete) {
29366|      0|                        {
29367|      0|                            next___0 = cursor->next;
29368|      0|                            cursor->next = next___0->next;
29369|      0|                            free_entry(table___0, next___0);
29370|      0|                        }
29371|      0|                    }
29372|      0|                    return (data___0);
29373|      0|                }
29374|      0|                cursor = cursor->next;
29375|      0|            }
29376|      0|while_break: /* CIL Label */
29377|      0|            ;
29378|      0|        }
29379|      0|        return ((void *)0);
29380|      0|    }
29381|      0|}
29382|       |_Bool hash_rehash(Hash_table *table___0, size_t candidate)
29383|      0|{
29384|      0|    Hash_table *new_table;
29385|      0|    struct hash_entry *bucket;
29386|      0|    struct hash_entry *cursor;
29387|      0|    struct hash_entry *next;
29388|      0|    void *data;
29389|      0|    struct hash_entry *new_bucket;
29390|      0|    size_t tmp;
29391|      0|    struct hash_entry *new_entry;
29392|      0|    struct hash_entry *tmp___0;
29393|       |
29394|      0|    {
29395|      0|        {
29396|      0|            new_table =
29397|      0|                hash_initialize(candidate, table___0->tuning, table___0->hasher,
29398|      0|                                table___0->comparator, table___0->data_freer);
29399|      0|        }
29400|      0|        if ((unsigned long)new_table == (unsigned long)((void *)0)) {
29401|      0|            return ((_Bool)0);
29402|      0|        }
29403|      0|        new_table->free_entry_list = table___0->free_entry_list;
29404|      0|        bucket = table___0->bucket;
29405|      0|        {
29406|      0|            while (1) {
29407|      0|while_continue: /* CIL Label */
29408|      0|                ;
29409|      0|                if (!((unsigned long)bucket < (unsigned long)table___0->bucket_limit)) {
29410|      0|                    goto while_break;
29411|      0|                }
29412|      0|                if (bucket->data) {
29413|      0|                    cursor = bucket;
29414|      0|                    {
29415|      0|                        while (1) {
29416|      0|while_continue___0: /* CIL Label */
29417|      0|                            ;
29418|      0|                            if (!cursor) {
29419|      0|                                goto while_break___0;
29420|      0|                            }
29421|      0|                            {
29422|      0|                                data = cursor->data;
29423|      0|                                tmp = (*(new_table->hasher))((void const *)data,
29424|      0|                                                             new_table->n_buckets);
29425|      0|                                new_bucket = new_table->bucket + tmp;
29426|      0|                            }
29427|      0|                            if (!((unsigned long)new_bucket <
29428|      0|                                    (unsigned long)new_table->bucket_limit)) {
29429|      0|                                {
29430|      0|                                    abort();
29431|      0|                                }
29432|      0|                            }
29433|      0|                            next = cursor->next;
29434|      0|                            if (new_bucket->data) {
29435|      0|                                if ((unsigned long)cursor == (unsigned long)bucket) {
29436|      0|                                    {
29437|      0|                                        tmp___0 = allocate_entry(new_table);
29438|      0|                                        new_entry = tmp___0;
29439|      0|                                    }
29440|      0|                                    if ((unsigned long)new_entry == (unsigned long)((void *)0)) {
29441|      0|                                        return ((_Bool)0);
29442|      0|                                    }
29443|      0|                                    new_entry->data = data;
29444|      0|                                    new_entry->next = new_bucket->next;
29445|      0|                                    new_bucket->next = new_entry;
29446|      0|                                }
29447|      0|                                else {
29448|      0|                                    cursor->next = new_bucket->next;
29449|      0|                                    new_bucket->next = cursor;
29450|      0|                                }
29451|      0|                            }
29452|      0|                            else {
29453|      0|                                new_bucket->data = data;
29454|      0|                                (new_table->n_buckets_used)++;
29455|      0|                                if ((unsigned long)cursor != (unsigned long)bucket) {
29456|      0|                                    {
29457|      0|                                        free_entry(new_table, cursor);
29458|      0|                                    }
29459|      0|                                }
29460|      0|                            }
29461|      0|                            cursor = next;
29462|      0|                        }
29463|      0|while_break___0: /* CIL Label */
29464|      0|                        ;
29465|      0|                    }
29466|      0|                }
29467|      0|                bucket++;
29468|      0|            }
29469|      0|while_break: /* CIL Label */
29470|      0|            ;
29471|      0|        }
29472|      0|        {
29473|      0|            free((void *)table___0->bucket);
29474|      0|            table___0->bucket = new_table->bucket;
29475|      0|            table___0->bucket_limit = new_table->bucket_limit;
29476|      0|            table___0->n_buckets = new_table->n_buckets;
29477|      0|            table___0->n_buckets_used = new_table->n_buckets_used;
29478|      0|            table___0->free_entry_list = new_table->free_entry_list;
29479|      0|            free((void *)new_table);
29480|      0|        }
29481|      0|        return ((_Bool)1);
29482|      0|    }
29483|      0|}
29484|       |void *hash_insert(Hash_table *table___0, void const *entry)
29485|      0|{
29486|      0|    void *data;
29487|      0|    struct hash_entry *bucket;
29488|      0|    struct hash_entry *new_entry;
29489|      0|    struct hash_entry *tmp;
29490|      0|    Hash_tuning const *tuning;
29491|      0|    float candidate;
29492|      0|    _Bool tmp___0;
29493|      0|    float tmp___1;
29494|       |
29495|      0|    {
29496|      0|        if (!entry) {
29497|      0|            {
29498|      0|                abort();
29499|      0|            }
29500|      0|        }
29501|      0|        {
29502|      0|            data = hash_find_entry(table___0, entry, &bucket, (_Bool)0);
29503|      0|        }
29504|      0|        if ((unsigned long)data != (unsigned long)((void *)0)) {
29505|      0|            return (data);
29506|      0|        }
29507|      0|        if (bucket->data) {
29508|      0|            {
29509|      0|                tmp = allocate_entry(table___0);
29510|      0|                new_entry = tmp;
29511|      0|            }
29512|      0|            if ((unsigned long)new_entry == (unsigned long)((void *)0)) {
29513|      0|                return ((void *)0);
29514|      0|            }
29515|      0|            new_entry->data = (void *)entry;
29516|      0|            new_entry->next = bucket->next;
29517|      0|            bucket->next = new_entry;
29518|      0|            (table___0->n_entries)++;
29519|      0|            return ((void *)entry);
29520|      0|        }
29521|      0|        bucket->data = (void *)entry;
29522|      0|        (table___0->n_entries)++;
29523|      0|        (table___0->n_buckets_used)++;
29524|      0|        if ((float const)table___0->n_buckets_used >
29525|      0|                (table___0->tuning)->growth_threshold *
29526|      0|                (float const)table___0->n_buckets) {
29527|      0|            {
29528|      0|                check_tuning(table___0);
29529|      0|            }
29530|      0|            if ((float const)table___0->n_buckets_used >
29531|      0|                    (table___0->tuning)->growth_threshold *
29532|      0|                    (float const)table___0->n_buckets) {
29533|      0|                tuning = table___0->tuning;
29534|      0|                if (tuning->is_n_buckets) {
29535|      0|                    tmp___1 = (float const)table___0->n_buckets * tuning->growth_factor;
29536|      0|                }
29537|      0|                else {
29538|      0|                    tmp___1 =
29539|      0|                        ((float const)table___0->n_buckets * tuning->growth_factor) *
29540|      0|                        tuning->growth_threshold;
29541|      0|                }
29542|      0|                candidate = (float)tmp___1;
29543|      0|                if ((float)0xffffffffffffffffUL <= candidate) {
29544|      0|                    return ((void *)0);
29545|      0|                }
29546|      0|                {
29547|      0|                    tmp___0 = hash_rehash(table___0, (size_t)candidate);
29548|      0|                }
29549|      0|                if (!tmp___0) {
29550|      0|                    entry = (void const *)((void *)0);
29551|      0|                }
29552|      0|            }
29553|      0|        }
29554|      0|        return ((void *)entry);
29555|      0|    }
29556|      0|}
29557|       |/* #pragma merger("0","01e.human.o.i","") */
29558|       |extern __attribute__((__nothrow__)) struct lconv *(__attribute__((__leaf__))
29559|       |        localeconv)(void);
29560|       |extern __attribute__((__nothrow__)) void *(
29561|       |    __attribute__((__nonnull__(1, 2), __leaf__))
29562|       |    memmove)(void *__dest, void const *__src, size_t __n);
29563|       |static char const power_letter[9] = {
29564|       |    (char const)0,   (char const)'K', (char const)'M',
29565|       |    (char const)'G', (char const)'T', (char const)'P',
29566|       |    (char const)'E', (char const)'Z', (char const)'Y'
29567|       |};
29568|       |static long double adjust_value(int inexact_style, long double value)
29569|      0|{
29570|      0|    uintmax_t u;
29571|      0|    int tmp;
29572|       |
29573|      0|    {
29574|      0|        if (inexact_style != 1) {
29575|      0|            if (value < (long double)0xffffffffffffffffUL) {
29576|      0|                u = (uintmax_t)value;
29577|      0|                if (inexact_style == 0) {
29578|      0|                    if ((long double)u != value) {
29579|      0|                        tmp = 1;
29580|      0|                    }
29581|      0|                    else {
29582|      0|                        tmp = 0;
29583|      0|                    }
29584|      0|                }
29585|      0|                else {
29586|      0|                    tmp = 0;
29587|      0|                }
29588|      0|                value = (long double)(u + (uintmax_t)tmp);
29589|      0|            }
29590|      0|        }
29591|      0|        return (value);
29592|      0|    }
29593|      0|}
29594|       |static char *group_number(char *number, size_t numberlen, char const *grouping,
29595|       |                          char const *thousands_sep)
29596|      0|{
29597|      0|    register char *d;
29598|      0|    size_t grouplen;
29599|      0|    size_t thousands_seplen;
29600|      0|    size_t tmp;
29601|      0|    size_t i;
29602|      0|    char buf[(((2UL * sizeof(uintmax_t)) * 8UL) * 302UL) / 1000UL + 1UL];
29603|      0|    unsigned char g;
29604|      0|    void *__cil_tmp12;
29605|       |
29606|      0|    {
29607|      0|        {
29608|      0|            grouplen = 0xffffffffffffffffUL;
29609|      0|            tmp = strlen(thousands_sep);
29610|      0|            thousands_seplen = tmp;
29611|      0|            i = numberlen;
29612|      0|            memcpy((void * /* __restrict  */)(buf),
29613|      0|                   (void const * /* __restrict  */)number, numberlen);
29614|      0|            d = number + numberlen;
29615|      0|        }
29616|      0|        {
29617|      0|            while (1) {
29618|      0|while_continue: /* CIL Label */
29619|      0|                ;
29620|      0|                g = (unsigned char)*grouping;
29621|      0|                if (g) {
29622|      0|                    if ((int)g < 127) {
29623|      0|                        grouplen = (size_t)g;
29624|      0|                    }
29625|      0|                    else {
29626|      0|                        grouplen = i;
29627|      0|                    }
29628|      0|                    grouping++;
29629|      0|                }
29630|      0|                if (i < grouplen) {
29631|      0|                    grouplen = i;
29632|      0|                }
29633|      0|                {
29634|      0|                    d -= grouplen;
29635|      0|                    i -= grouplen;
29636|      0|                    memcpy((void * /* __restrict  */)d,
29637|      0|                           (void const * /* __restrict  */)(buf + i), grouplen);
29638|      0|                }
29639|      0|                if (i == 0UL) {
29640|      0|                    return (d);
29641|      0|                }
29642|      0|                {
29643|      0|                    d -= thousands_seplen;
29644|      0|                    memcpy((void * /* __restrict  */)d,
29645|      0|                           (void const * /* __restrict  */)thousands_sep,
29646|      0|                           thousands_seplen);
29647|      0|                }
29648|      0|            }
29649|      0|while_break: /* CIL Label */
29650|      0|            ;
29651|      0|        }
29652|      0|    }
29653|      0|}
29654|       |char *human_readable(uintmax_t n, char *buf, int opts,
29655|       |                     uintmax_t from_block_size, uintmax_t to_block_size)
29656|      0|{
29657|      0|    int inexact_style;
29658|      0|    unsigned int base;
29659|      0|    uintmax_t amt;
29660|      0|    int tenths;
29661|      0|    int exponent;
29662|      0|    int exponent_max;
29663|      0|    char *p;
29664|      0|    char *psuffix;
29665|      0|    char const *integerlim;
29666|      0|    int rounding;
29667|      0|    char const *decimal_point;
29668|      0|    size_t decimal_pointlen;
29669|      0|    char const *grouping;
29670|      0|    char const *thousands_sep;
29671|      0|    struct lconv const *l;
29672|      0|    struct lconv *tmp;
29673|      0|    size_t pointlen;
29674|      0|    size_t tmp___0;
29675|      0|    size_t tmp___1;
29676|      0|    uintmax_t multiplier;
29677|      0|    uintmax_t divisor;
29678|      0|    uintmax_t r10;
29679|      0|    uintmax_t r2;
29680|      0|    long double dto_block_size;
29681|      0|    long double damt;
29682|      0|    size_t buflen;
29683|      0|    size_t nonintegerlen;
29684|      0|    long double tmp___2;
29685|      0|    long double e;
29686|      0|    long double tmp___3;
29687|      0|    long double tmp___4;
29688|      0|    unsigned int r10___0;
29689|      0|    unsigned int r2___0;
29690|      0|    int digit;
29691|      0|    uintmax_t power;
29692|      0|    char *tmp___5;
29693|      0|    char *tmp___6;
29694|      0|    char *tmp___7;
29695|      0|    int tmp___8;
29696|      0|    int tmp___9;
29697|      0|    int tmp___10;
29698|      0|    int tmp___11;
29699|      0|    int tmp___12;
29700|      0|    int tmp___13;
29701|      0|    char *__cil_tmp50;
29702|      0|    char *__cil_tmp51;
29703|      0|    char *__cil_tmp52;
29704|      0|    char *__cil_tmp53;
29705|      0|    char *__cil_tmp54;
29706|      0|    char *__cil_tmp55;
29707|      0|    char *__cil_tmp56;
29708|       |
29709|      0|    {
29710|      0|        inexact_style = opts & 3;
29711|      0|        if (opts & 32) {
29712|      0|            tmp___8 = 1024;
29713|      0|        }
29714|      0|        else {
29715|      0|            tmp___8 = 1000;
29716|      0|        }
29717|      0|        {
29718|      0|            base = (unsigned int)tmp___8;
29719|      0|            exponent = -1;
29720|      0|            exponent_max = (int)(sizeof(power_letter) - 1UL);
29721|      0|            decimal_point = ".";
29722|      0|            decimal_pointlen = (size_t)1;
29723|      0|            grouping = "";
29724|      0|            thousands_sep = "";
29725|      0|            tmp = localeconv();
29726|      0|            l = (struct lconv const *)tmp;
29727|      0|            tmp___0 = strlen((char const *)l->decimal_point);
29728|      0|            pointlen = tmp___0;
29729|      0|        }
29730|      0|        if (0UL < pointlen) {
29731|      0|            if (pointlen <= 16UL) {
29732|      0|                decimal_point = (char const *)l->decimal_point;
29733|      0|                decimal_pointlen = pointlen;
29734|      0|            }
29735|      0|        }
29736|      0|        {
29737|      0|            grouping = (char const *)l->grouping;
29738|      0|            tmp___1 = strlen((char const *)l->thousands_sep);
29739|      0|        }
29740|      0|        if (tmp___1 <= 16UL) {
29741|      0|            thousands_sep = (char const *)l->thousands_sep;
29742|      0|        }
29743|      0|        psuffix =
29744|      0|            (buf +
29745|      0|             ((((((2UL * sizeof(uintmax_t)) * 8UL) * 302UL) / 1000UL + 1UL) * 17UL -
29746|      0|               16UL) +
29747|      0|              3UL)) -
29748|      0|            3;
29749|      0|        p = psuffix;
29750|      0|        if (to_block_size <= from_block_size) {
29751|      0|            if (from_block_size % to_block_size == 0UL) {
29752|      0|                multiplier = from_block_size / to_block_size;
29753|      0|                amt = n * multiplier;
29754|      0|                if (amt / multiplier == n) {
29755|      0|                    tenths = 0;
29756|      0|                    rounding = 0;
29757|      0|                    goto use_integer_arithmetic;
29758|      0|                }
29759|      0|            }
29760|      0|        }
29761|      0|        else {
29762|      0|            if (from_block_size != 0UL) {
29763|      0|                if (to_block_size % from_block_size == 0UL) {
29764|      0|                    divisor = to_block_size / from_block_size;
29765|      0|                    r10 = (n % divisor) * 10UL;
29766|      0|                    r2 = (r10 % divisor) * 2UL;
29767|      0|                    amt = n / divisor;
29768|      0|                    tenths = (int)(r10 / divisor);
29769|      0|                    if (r2 < divisor) {
29770|      0|                        rounding = 0UL < r2;
29771|      0|                    }
29772|      0|                    else {
29773|      0|                        rounding = 2 + (divisor < r2);
29774|      0|                    }
29775|      0|                    goto use_integer_arithmetic;
29776|      0|                }
29777|      0|            }
29778|      0|        }
29779|      0|        dto_block_size = (long double)to_block_size;
29780|      0|        damt = (long double)n * ((long double)from_block_size / dto_block_size);
29781|      0|        if (!(opts & 16)) {
29782|      0|            {
29783|      0|                tmp___2 = adjust_value(inexact_style, damt);
29784|      0|                sprintf((char * /* __restrict  */)buf,
29785|      0|                        (char const * /* __restrict  */) "%.0Lf", tmp___2);
29786|      0|                buflen = strlen((char const *)buf);
29787|      0|                nonintegerlen = (size_t)0;
29788|      0|            }
29789|      0|        }
29790|      0|        else {
29791|      0|            e = (long double)1;
29792|      0|            exponent = 0;
29793|      0|            {
29794|      0|                while (1) {
29795|      0|while_continue: /* CIL Label */
29796|      0|                    ;
29797|      0|                    e *= (long double)base;
29798|      0|                    exponent++;
29799|      0|                    if (e * (long double)base <= damt) {
29800|      0|                        if (!(exponent < exponent_max)) {
29801|      0|                            goto while_break;
29802|      0|                        }
29803|      0|                    }
29804|      0|                    else {
29805|      0|                        goto while_break;
29806|      0|                    }
29807|      0|                }
29808|      0|while_break: /* CIL Label */
29809|      0|                ;
29810|      0|            }
29811|      0|            {
29812|      0|                damt /= e;
29813|      0|                tmp___3 = adjust_value(inexact_style, damt);
29814|      0|                sprintf((char * /* __restrict  */)buf,
29815|      0|                        (char const * /* __restrict  */) "%.1Lf", tmp___3);
29816|      0|                buflen = strlen((char const *)buf);
29817|      0|                nonintegerlen = decimal_pointlen + 1UL;
29818|      0|            }
29819|      0|            if ((1UL + nonintegerlen) + (size_t)(!(opts & 32)) < buflen) {
29820|      0|                {
29821|      0|                    tmp___4 = adjust_value(inexact_style, damt * (long double)10);
29822|      0|                    sprintf((char * /* __restrict  */)buf,
29823|      0|                            (char const * /* __restrict  */) "%.0Lf",
29824|      0|                            tmp___4 / (long double)10);
29825|      0|                    buflen = strlen((char const *)buf);
29826|      0|                    nonintegerlen = (size_t)0;
29827|      0|                }
29828|      0|            }
29829|      0|            else {
29830|      0|                if (opts & 8) {
29831|      0|                    if ((int)*(buf + (buflen - 1UL)) == 48) {
29832|      0|                        {
29833|      0|                            tmp___4 = adjust_value(inexact_style, damt * (long double)10);
29834|      0|                            sprintf((char * /* __restrict  */)buf,
29835|      0|                                    (char const * /* __restrict  */) "%.0Lf",
29836|      0|                                    tmp___4 / (long double)10);
29837|      0|                            buflen = strlen((char const *)buf);
29838|      0|                            nonintegerlen = (size_t)0;
29839|      0|                        }
29840|      0|                    }
29841|      0|                }
29842|      0|            }
29843|      0|        }
29844|      0|        {
29845|      0|            p = psuffix - buflen;
29846|      0|            memmove((void *)p, (void const *)buf, buflen);
29847|      0|            integerlim = (char const *)((p + buflen) - nonintegerlen);
29848|      0|        }
29849|      0|        goto do_grouping;
29850|      0|use_integer_arithmetic:
29851|      0|        if (opts & 16) {
29852|      0|            exponent = 0;
29853|      0|            if ((uintmax_t)base <= amt) {
29854|      0|                {
29855|      0|                    while (1) {
29856|      0|while_continue___0: /* CIL Label */
29857|      0|                        ;
29858|      0|                        r10___0 = (unsigned int)((amt % (unsigned long)base) * 10UL +
29859|      0|                                                 (unsigned long)tenths);
29860|      0|                        r2___0 = (r10___0 % base) * 2U + (unsigned int)(rounding >> 1);
29861|      0|                        amt /= (uintmax_t)base;
29862|      0|                        tenths = (int)(r10___0 / base);
29863|      0|                        if (r2___0 < base) {
29864|      0|                            rounding = r2___0 + (unsigned int)rounding != 0U;
29865|      0|                        }
29866|      0|                        else {
29867|      0|                            rounding = 2 + (base < r2___0 + (unsigned int)rounding);
29868|      0|                        }
29869|      0|                        exponent++;
29870|      0|                        if ((uintmax_t)base <= amt) {
29871|      0|                            if (!(exponent < exponent_max)) {
29872|      0|                                goto while_break___0;
29873|      0|                            }
29874|      0|                        }
29875|      0|                        else {
29876|      0|                            goto while_break___0;
29877|      0|                        }
29878|      0|                    }
29879|      0|while_break___0: /* CIL Label */
29880|      0|                    ;
29881|      0|                }
29882|      0|                if (amt < 10UL) {
29883|      0|                    if (inexact_style == 1) {
29884|      0|                        tmp___10 = 2 < rounding + (tenths & 1);
29885|      0|                    }
29886|      0|                    else {
29887|      0|                        if (inexact_style == 0) {
29888|      0|                            if (0 < rounding) {
29889|      0|                                tmp___9 = 1;
29890|      0|                            }
29891|      0|                            else {
29892|      0|                                tmp___9 = 0;
29893|      0|                            }
29894|      0|                        }
29895|      0|                        else {
29896|      0|                            tmp___9 = 0;
29897|      0|                        }
29898|      0|                        tmp___10 = tmp___9;
29899|      0|                    }
29900|      0|                    if (tmp___10) {
29901|      0|                        tenths++;
29902|      0|                        rounding = 0;
29903|      0|                        if (tenths == 10) {
29904|      0|                            amt++;
29905|      0|                            tenths = 0;
29906|      0|                        }
29907|      0|                    }
29908|      0|                    if (amt < 10UL) {
29909|      0|                        if (tenths) {
29910|      0|                            goto _L___3;
29911|      0|                        }
29912|      0|                        else {
29913|      0|                            if (!(opts & 8)) {
29914|      0|_L___3 : { /* CIL Label */
29915|      0|                                    p--;
29916|      0|                                    *p = (char)(48 + tenths);
29917|      0|                                    p -= decimal_pointlen;
29918|      0|                                    memcpy((void * /* __restrict  */)p,
29919|      0|                                           (void const * /* __restrict  */)decimal_point,
29920|      0|                                           decimal_pointlen);
29921|      0|                                    rounding = 0;
29922|      0|                                    tenths = rounding;
29923|      0|                                }
29924|      0|                            }
29925|      0|                        }
29926|      0|                    }
29927|      0|                }
29928|      0|            }
29929|      0|        }
29930|      0|        if (inexact_style == 1) {
29931|      0|            tmp___12 = 5 < tenths + (0UL < (unsigned long)rounding + (amt & 1UL));
29932|      0|        }
29933|      0|        else {
29934|      0|            if (inexact_style == 0) {
29935|      0|                if (0 < tenths + rounding) {
29936|      0|                    tmp___11 = 1;
29937|      0|                }
29938|      0|                else {
29939|      0|                    tmp___11 = 0;
29940|      0|                }
29941|      0|            }
29942|      0|            else {
29943|      0|                tmp___11 = 0;
29944|      0|            }
29945|      0|            tmp___12 = tmp___11;
29946|      0|        }
29947|      0|        if (tmp___12) {
29948|      0|            amt++;
29949|      0|            if (opts & 16) {
29950|      0|                if (amt == (uintmax_t)base) {
29951|      0|                    if (exponent < exponent_max) {
29952|      0|                        exponent++;
29953|      0|                        if (!(opts & 8)) {
29954|      0|                            {
29955|      0|                                p--;
29956|      0|                                *p = (char)'0';
29957|      0|                                p -= decimal_pointlen;
29958|      0|                                memcpy((void * /* __restrict  */)p,
29959|      0|                                       (void const * /* __restrict  */)decimal_point,
29960|      0|                                       decimal_pointlen);
29961|      0|                            }
29962|      0|                        }
29963|      0|                        amt = (uintmax_t)1;
29964|      0|                    }
29965|      0|                }
29966|      0|            }
29967|      0|        }
29968|      0|        integerlim = (char const *)p;
29969|      0|        {
29970|      0|            while (1) {
29971|      0|while_continue___1: /* CIL Label */
29972|      0|                ;
29973|      0|                digit = (int)(amt % 10UL);
29974|      0|                p--;
29975|      0|                *p = (char)(digit + 48);
29976|      0|                amt /= 10UL;
29977|      0|                if (!(amt != 0UL)) {
29978|      0|                    goto while_break___1;
29979|      0|                }
29980|      0|            }
29981|      0|while_break___1: /* CIL Label */
29982|      0|            ;
29983|      0|        }
29984|      0|do_grouping:
29985|      0|        if (opts & 4) {
29986|      0|            {
29987|      0|                p = group_number(p, (size_t)(integerlim - (char const *)p), grouping,
29988|      0|                                 thousands_sep);
29989|      0|            }
29990|      0|        }
29991|      0|        if (opts & 64) {
29992|      0|            if (exponent < 0) {
29993|      0|                exponent = 0;
29994|      0|                power = (uintmax_t)1;
29995|      0|                {
29996|      0|                    while (1) {
29997|      0|while_continue___2: /* CIL Label */
29998|      0|                        ;
29999|      0|                        if (!(power < to_block_size)) {
30000|      0|                            goto while_break___2;
30001|      0|                        }
30002|      0|                        exponent++;
30003|      0|                        if (exponent == exponent_max) {
30004|      0|                            goto while_break___2;
30005|      0|                        }
30006|      0|                        power *= (uintmax_t)base;
30007|      0|                    }
30008|      0|while_break___2: /* CIL Label */
30009|      0|                    ;
30010|      0|                }
30011|      0|            }
30012|      0|            if (exponent) {
30013|      0|                tmp___5 = psuffix;
30014|      0|                psuffix++;
30015|      0|                if (!(opts & 32)) {
30016|      0|                    if (exponent == 1) {
30017|      0|                        tmp___13 = 'k';
30018|      0|                    }
30019|      0|                    else {
30020|      0|                        tmp___13 = (int)power_letter[exponent];
30021|      0|                    }
30022|      0|                }
30023|      0|                else {
30024|      0|                    tmp___13 = (int)power_letter[exponent];
30025|      0|                }
30026|      0|                *tmp___5 = (char)tmp___13;
30027|      0|            }
30028|      0|            if (opts & 128) {
30029|      0|                if (opts & 32) {
30030|      0|                    if (exponent) {
30031|      0|                        tmp___6 = psuffix;
30032|      0|                        psuffix++;
30033|      0|                        *tmp___6 = (char)'i';
30034|      0|                    }
30035|      0|                }
30036|      0|                tmp___7 = psuffix;
30037|      0|                psuffix++;
30038|      0|                *tmp___7 = (char)'B';
30039|      0|            }
30040|      0|        }
30041|      0|        *psuffix = (char)'\000';
30042|      0|        return (p);
30043|      0|    }
30044|      0|}
30045|       |static char const *const block_size_args[3] = {
30046|       |    (char const * /* const  */) "human-readable",
30047|       |    (char const * /* const  */) "si", (char const * /* const  */)0
30048|       |};
30049|       |static int const block_size_opts[2] = {(int const)112, (int const)80};
30050|       |/* #pragma merger("0","01f.mktime.o.i","") */
30051|       |extern __attribute__((__nothrow__)) struct tm *(
30052|       |    __attribute__((__leaf__))
30053|       |    localtime_r)(time_t const *__restrict __timer, struct tm *__restrict __tp);
30054|       |__inline static int leapyear(int year)
30055|      0|{
30056|      0|    int tmp;
30057|       |
30058|      0|    {
30059|      0|        if ((year & 3) == 0) {
30060|      0|            if (year % 100 != 0) {
30061|      0|                tmp = 1;
30062|      0|            }
30063|      0|            else {
30064|      0|                if ((year / 100 & 3) == 1) {
30065|      0|                    tmp = 1;
30066|      0|                }
30067|      0|                else {
30068|      0|                    tmp = 0;
30069|      0|                }
30070|      0|            }
30071|      0|        }
30072|      0|        else {
30073|      0|            tmp = 0;
30074|      0|        }
30075|      0|        return (tmp);
30076|      0|    }
30077|      0|}
30078|       |static unsigned short const __mon_yday[2][13] = {
30079|       |    {
30080|       |        (unsigned short const)0, (unsigned short const)31,
30081|       |        (unsigned short const)59, (unsigned short const)90,
30082|       |        (unsigned short const)120, (unsigned short const)151,
30083|       |        (unsigned short const)181, (unsigned short const)212,
30084|       |        (unsigned short const)243, (unsigned short const)273,
30085|       |        (unsigned short const)304, (unsigned short const)334,
30086|       |        (unsigned short const)365
30087|       |    },
30088|       |    {
30089|       |        (unsigned short const)0, (unsigned short const)31,
30090|       |        (unsigned short const)60, (unsigned short const)91,
30091|       |        (unsigned short const)121, (unsigned short const)152,
30092|       |        (unsigned short const)182, (unsigned short const)213,
30093|       |        (unsigned short const)244, (unsigned short const)274,
30094|       |        (unsigned short const)305, (unsigned short const)335,
30095|       |        (unsigned short const)366
30096|       |    }
30097|       |};
30098|       |__inline static time_t ydhms_diff(long year1, long yday1, int hour1, int min1,
30099|       |                                  int sec1, int year0, int yday0, int hour0,
30100|       |                                  int min0, int sec0)
30101|      0|{
30102|      0|    int a4;
30103|      0|    int b4;
30104|      0|    int a100;
30105|      0|    int b100;
30106|      0|    int a400;
30107|      0|    int b400;
30108|      0|    int intervening_leap_days;
30109|      0|    time_t tyear1;
30110|      0|    time_t years;
30111|      0|    time_t days;
30112|      0|    time_t hours;
30113|      0|    time_t minutes;
30114|      0|    time_t seconds;
30115|       |
30116|      0|    {
30117|      0|        a4 = (int)(((year1 >> 2) + (long)(1900 >> 2)) - (long)(!(year1 & 3L)));
30118|      0|        b4 = ((year0 >> 2) + (1900 >> 2)) - !(year0 & 3);
30119|      0|        a100 = a4 / 25 - (a4 % 25 < 0);
30120|      0|        b100 = b4 / 25 - (b4 % 25 < 0);
30121|      0|        a400 = a100 >> 2;
30122|      0|        b400 = b100 >> 2;
30123|      0|        intervening_leap_days = ((a4 - b4) - (a100 - b100)) + (a400 - b400);
30124|      0|        tyear1 = year1;
30125|      0|        years = tyear1 - (time_t)year0;
30126|      0|        days = ((365L * years + yday1) - (time_t)yday0) +
30127|      0|               (time_t)intervening_leap_days;
30128|      0|        hours = (24L * days + (time_t)hour1) - (time_t)hour0;
30129|      0|        minutes = (60L * hours + (time_t)min1) - (time_t)min0;
30130|      0|        seconds = (60L * minutes + (time_t)sec1) - (time_t)sec0;
30131|      0|        return (seconds);
30132|      0|    }
30133|      0|}
30134|       |static time_t guess_time_tm(long year, long yday, int hour, int min, int sec,
30135|       |                            time_t const *t, struct tm const *tp)
30136|      0|{
30137|      0|    time_t d;
30138|      0|    time_t tmp;
30139|      0|    time_t t1;
30140|      0|    long tmp___0;
30141|       |
30142|      0|    {
30143|      0|        if (tp) {
30144|      0|            {
30145|      0|                tmp = ydhms_diff(year, yday, hour, min, sec, (int)tp->tm_year,
30146|      0|                                 (int)tp->tm_yday, (int)tp->tm_hour, (int)tp->tm_min,
30147|      0|                                 (int)tp->tm_sec);
30148|      0|                d = tmp;
30149|      0|                t1 = (time_t)(*t + (time_t const)d);
30150|      0|            }
30151|      0|            if ((t1 < (time_t)*t) == (d < 0L)) {
30152|      0|                return (t1);
30153|      0|            }
30154|      0|        }
30155|      0|        if (*t < (time_t const)((((-1L << (sizeof(time_t) * 8UL - 1UL)) +
30156|      0|                                  (-1L - (-1L << (sizeof(time_t) * 8UL - 1UL)))) >>
30157|      0|                                 1) +
30158|      0|                                1L)) {
30159|      0|            tmp___0 =
30160|      0|                (-1L << (sizeof(time_t) * 8UL - 1UL)) +
30161|      0|                (time_t)(*t == (time_t const)(-1L << (sizeof(time_t) * 8UL - 1UL)));
30162|      0|        }
30163|      0|        else {
30164|      0|            tmp___0 =
30165|      0|                (-1L - (-1L << (sizeof(time_t) * 8UL - 1UL))) -
30166|      0|                (time_t)(*t ==
30167|      0|                         (time_t const)(-1L - (-1L << (sizeof(time_t) * 8UL - 1UL))));
30168|      0|        }
30169|      0|        return (tmp___0);
30170|      0|    }
30171|      0|}
30172|       |static struct tm *ranged_convert(struct tm *(*convert)(time_t const *,
30173|       |                                 struct tm *),
30174|       |                                 time_t *t, struct tm *tp)
30175|      0|{
30176|      0|    struct tm *r;
30177|      0|    time_t bad;
30178|      0|    time_t ok;
30179|      0|    struct tm tm;
30180|      0|    time_t mid;
30181|      0|    time_t tmp;
30182|      0|    int tmp___0;
30183|       |
30184|      0|    {
30185|      0|        {
30186|      0|            r = (*convert)((time_t const *)t, tp);
30187|      0|        }
30188|      0|        if (!r) {
30189|      0|            if (*t) {
30190|      0|                bad = *t;
30191|      0|                ok = (time_t)0;
30192|      0|                {
30193|      0|                    while (1) {
30194|      0|while_continue: /* CIL Label */
30195|      0|                        ;
30196|      0|                        if (bad < 0L) {
30197|      0|                            tmp___0 = -1;
30198|      0|                        }
30199|      0|                        else {
30200|      0|                            tmp___0 = 1;
30201|      0|                        }
30202|      0|                        if (!(bad != ok + (time_t)tmp___0)) {
30203|      0|                            goto while_break;
30204|      0|                        }
30205|      0|                        if (bad < 0L) {
30206|      0|                            tmp = bad + ((ok - bad) >> 1);
30207|      0|                        }
30208|      0|                        else {
30209|      0|                            tmp = ok + ((bad - ok) >> 1);
30210|      0|                        }
30211|      0|                        {
30212|      0|                            *t = tmp;
30213|      0|                            mid = tmp;
30214|      0|                            r = (*convert)((time_t const *)t, tp);
30215|      0|                        }
30216|      0|                        if (r) {
30217|      0|                            tm = *r;
30218|      0|                            ok = mid;
30219|      0|                        }
30220|      0|                        else {
30221|      0|                            bad = mid;
30222|      0|                        }
30223|      0|                    }
30224|      0|while_break: /* CIL Label */
30225|      0|                    ;
30226|      0|                }
30227|      0|                if (!r) {
30228|      0|                    if (ok) {
30229|      0|                        *t = ok;
30230|      0|                        *tp = tm;
30231|      0|                        r = tp;
30232|      0|                    }
30233|      0|                }
30234|      0|            }
30235|      0|        }
30236|      0|        return (r);
30237|      0|    }
30238|      0|}
30239|       |time_t mktime_internal(struct tm *tp,
30240|       |                       struct tm *(*convert)(time_t const *, struct tm *),
30241|       |                       time_t *offset)
30242|      0|{
30243|      0|    time_t t;
30244|      0|    time_t gt;
30245|      0|    time_t t0;
30246|      0|    time_t t1;
30247|      0|    time_t t2;
30248|      0|    struct tm tm;
30249|      0|    int remaining_probes;
30250|      0|    int sec;
30251|      0|    int min;
30252|      0|    int hour;
30253|      0|    int mday;
30254|      0|    int mon;
30255|      0|    int year_requested;
30256|      0|    int isdst;
30257|      0|    int dst2;
30258|      0|    int mon_remainder;
30259|      0|    int negative_mon_remainder;
30260|      0|    int mon_years;
30261|      0|    long lyear_requested;
30262|      0|    long year;
30263|      0|    int mon_yday;
30264|      0|    int tmp;
30265|      0|    long lmday;
30266|      0|    long yday;
30267|      0|    time_t guessed_offset;
30268|      0|    int sec_requested;
30269|      0|    int ALOG2_SECONDS_PER_BIENNIUM;
30270|      0|    int ALOG2_MINUTES_PER_BIENNIUM;
30271|      0|    int ALOG2_HOURS_PER_BIENNIUM;
30272|      0|    int ALOG2_DAYS_PER_BIENNIUM;
30273|      0|    int LOG2_YEARS_PER_BIENNIUM;
30274|      0|    int approx_requested_biennia;
30275|      0|    int approx_biennia;
30276|      0|    int diff;
30277|      0|    int abs_diff;
30278|      0|    time_t time_t_max;
30279|      0|    time_t time_t_min;
30280|      0|    time_t overflow_threshold;
30281|      0|    time_t repaired_t0;
30282|      0|    struct tm *tmp___0;
30283|      0|    int stride;
30284|      0|    int duration_max;
30285|      0|    int delta_bound;
30286|      0|    int delta;
30287|      0|    int direction;
30288|      0|    time_t ot;
30289|      0|    struct tm otm;
30290|      0|    int sec_adjustment;
30291|      0|    struct tm *tmp___1;
30292|      0|    int tmp___2;
30293|      0|    int tmp___3;
30294|      0|    int tmp___4;
30295|       |
30296|      0|    {
30297|      0|        {
30298|      0|            remaining_probes = 6;
30299|      0|            sec = tp->tm_sec;
30300|      0|            min = tp->tm_min;
30301|      0|            hour = tp->tm_hour;
30302|      0|            mday = tp->tm_mday;
30303|      0|            mon = tp->tm_mon;
30304|      0|            year_requested = tp->tm_year;
30305|      0|            isdst = tp->tm_isdst;
30306|      0|            mon_remainder = mon % 12;
30307|      0|            negative_mon_remainder = mon_remainder < 0;
30308|      0|            mon_years = mon / 12 - negative_mon_remainder;
30309|      0|            lyear_requested = (long)year_requested;
30310|      0|            year = lyear_requested + (long)mon_years;
30311|      0|            tmp = leapyear((int)year);
30312|      0|            mon_yday = (int)((int const)__mon_yday[tmp][mon_remainder +
30313|      0|                             12 * negative_mon_remainder] -
30314|      0|                             1);
30315|      0|            lmday = (long)mday;
30316|      0|            yday = (long)mon_yday + lmday;
30317|      0|            guessed_offset = *offset;
30318|      0|            sec_requested = sec;
30319|      0|        }
30320|      0|        if (sec < 0) {
30321|      0|            sec = 0;
30322|      0|        }
30323|      0|        if (59 < sec) {
30324|      0|            sec = 59;
30325|      0|        }
30326|      0|        {
30327|      0|            t0 = ydhms_diff(year, yday, hour, min, sec, 70, 0, 0, 0,
30328|      0|                            (int)(-guessed_offset));
30329|      0|        }
30330|      0|        if ((((((-1L - (-1L << (sizeof(time_t) * 8UL - 1UL))) / 2147483647L) /
30331|      0|                366L) /
30332|      0|                24L) /
30333|      0|                60L) /
30334|      0|                60L <
30335|      0|                3L) {
30336|      0|            ALOG2_SECONDS_PER_BIENNIUM = 26;
30337|      0|            ALOG2_MINUTES_PER_BIENNIUM = 20;
30338|      0|            ALOG2_HOURS_PER_BIENNIUM = 14;
30339|      0|            ALOG2_DAYS_PER_BIENNIUM = 10;
30340|      0|            LOG2_YEARS_PER_BIENNIUM = 1;
30341|      0|            approx_requested_biennia =
30342|      0|                ((((year_requested >> LOG2_YEARS_PER_BIENNIUM) -
30343|      0|                   (70 >> LOG2_YEARS_PER_BIENNIUM)) +
30344|      0|                  (mday >> ALOG2_DAYS_PER_BIENNIUM)) +
30345|      0|                 (hour >> ALOG2_HOURS_PER_BIENNIUM)) +
30346|      0|                (min >> ALOG2_MINUTES_PER_BIENNIUM);
30347|      0|            approx_biennia = (int)(t0 >> ALOG2_SECONDS_PER_BIENNIUM);
30348|      0|            diff = approx_biennia - approx_requested_biennia;
30349|      0|            if (diff < 0) {
30350|      0|                abs_diff = -diff;
30351|      0|            }
30352|      0|            else {
30353|      0|                abs_diff = diff;
30354|      0|            }
30355|      0|            time_t_max = -1L - (-1L << (sizeof(time_t) * 8UL - 1UL));
30356|      0|            time_t_min = -1L << (sizeof(time_t) * 8UL - 1UL);
30357|      0|            overflow_threshold =
30358|      0|                (time_t_max / 3L - time_t_min / 3L) >> ALOG2_SECONDS_PER_BIENNIUM;
30359|      0|            if (overflow_threshold < (time_t)abs_diff) {
30360|      0|                repaired_t0 = -1L - t0;
30361|      0|                approx_biennia = (int)(repaired_t0 >> ALOG2_SECONDS_PER_BIENNIUM);
30362|      0|                diff = approx_biennia - approx_requested_biennia;
30363|      0|                if (diff < 0) {
30364|      0|                    abs_diff = -diff;
30365|      0|                }
30366|      0|                else {
30367|      0|                    abs_diff = diff;
30368|      0|                }
30369|      0|                if (overflow_threshold < (time_t)abs_diff) {
30370|      0|                    return ((time_t)-1);
30371|      0|                }
30372|      0|                guessed_offset += repaired_t0 - t0;
30373|      0|                t0 = repaired_t0;
30374|      0|            }
30375|      0|        }
30376|      0|        t2 = t0;
30377|      0|        t1 = t2;
30378|      0|        t = t1;
30379|      0|        dst2 = 0;
30380|      0|        {
30381|      0|            while (1) {
30382|      0|while_continue: /* CIL Label */
30383|      0|                ;
30384|      0|                {
30385|      0|                    tmp___0 = ranged_convert(convert, &t, &tm);
30386|      0|                    gt = guess_time_tm(year, yday, hour, min, sec, (time_t const *)(&t),
30387|      0|                                       (struct tm const *)tmp___0);
30388|      0|                }
30389|      0|                if (!(t != gt)) {
30390|      0|                    goto while_break;
30391|      0|                }
30392|      0|                if (t == t1) {
30393|      0|                    if (t != t2) {
30394|      0|                        if (tm.tm_isdst < 0) {
30395|      0|                            goto offset_found;
30396|      0|                        }
30397|      0|                        else {
30398|      0|                            if (isdst < 0) {
30399|      0|                                tmp___3 = dst2 <= (tm.tm_isdst != 0);
30400|      0|                            }
30401|      0|                            else {
30402|      0|                                tmp___3 = (isdst != 0) != (tm.tm_isdst != 0);
30403|      0|                            }
30404|      0|                            if (tmp___3) {
30405|      0|                                goto offset_found;
30406|      0|                            }
30407|      0|                            else {
30408|      0|                                goto _L___4;
30409|      0|                            }
30410|      0|                        }
30411|      0|                    }
30412|      0|                    else {
30413|      0|                        goto _L___4;
30414|      0|                    }
30415|      0|                }
30416|      0|                else {
30417|      0|_L___4: /* CIL Label */
30418|      0|                    remaining_probes--;
30419|      0|                    if (remaining_probes == 0) {
30420|      0|                        return ((time_t)-1);
30421|      0|                    }
30422|      0|                }
30423|      0|                t1 = t2;
30424|      0|                t2 = t;
30425|      0|                t = gt;
30426|      0|                dst2 = tm.tm_isdst != 0;
30427|      0|            }
30428|      0|while_break: /* CIL Label */
30429|      0|            ;
30430|      0|        }
30431|      0|        if (isdst != tm.tm_isdst) {
30432|      0|            if (0 <= isdst) {
30433|      0|                if (0 <= tm.tm_isdst) {
30434|      0|                    stride = 601200;
30435|      0|                    duration_max = 536454000;
30436|      0|                    delta_bound = duration_max / 2 + stride;
30437|      0|                    delta = stride;
30438|      0|                    {
30439|      0|                        while (1) {
30440|      0|while_continue___0: /* CIL Label */
30441|      0|                            ;
30442|      0|                            if (!(delta < delta_bound)) {
30443|      0|                                goto while_break___0;
30444|      0|                            }
30445|      0|                            direction = -1;
30446|      0|                            {
30447|      0|                                while (1) {
30448|      0|while_continue___1: /* CIL Label */
30449|      0|                                    ;
30450|      0|                                    if (!(direction <= 1)) {
30451|      0|                                        goto while_break___1;
30452|      0|                                    }
30453|      0|                                    ot = t + (time_t)(delta * direction);
30454|      0|                                    if ((ot < t) == (direction < 0)) {
30455|      0|                                        {
30456|      0|                                            ranged_convert(convert, &ot, &otm);
30457|      0|                                        }
30458|      0|                                        if (otm.tm_isdst == isdst) {
30459|      0|                                            {
30460|      0|                                                t = guess_time_tm(year, yday, hour, min, sec,
30461|      0|                                                                  (time_t const *)(&ot),
30462|      0|                                                                  (struct tm const *)(&otm));
30463|      0|                                                ranged_convert(convert, &t, &tm);
30464|      0|                                            }
30465|      0|                                            goto offset_found;
30466|      0|                                        }
30467|      0|                                    }
30468|      0|                                    direction += 2;
30469|      0|                                }
30470|      0|while_break___1: /* CIL Label */
30471|      0|                                ;
30472|      0|                            }
30473|      0|                            delta += stride;
30474|      0|                        }
30475|      0|while_break___0: /* CIL Label */
30476|      0|                        ;
30477|      0|                    }
30478|      0|                }
30479|      0|            }
30480|      0|        }
30481|      0|offset_found:
30482|      0|        *offset = (guessed_offset + t) - t0;
30483|      0|        if (sec_requested != tm.tm_sec) {
30484|      0|            if (sec == 0) {
30485|      0|                if (tm.tm_sec == 60) {
30486|      0|                    tmp___4 = 1;
30487|      0|                }
30488|      0|                else {
30489|      0|                    tmp___4 = 0;
30490|      0|                }
30491|      0|            }
30492|      0|            else {
30493|      0|                tmp___4 = 0;
30494|      0|            }
30495|      0|            {
30496|      0|                sec_adjustment = tmp___4 - sec;
30497|      0|                t1 = t + (time_t)sec_requested;
30498|      0|                t2 = t1 + (time_t)sec_adjustment;
30499|      0|                tmp___1 = (*convert)((time_t const *)(&t), &tm);
30500|      0|            }
30501|      0|            if (tmp___1) {
30502|      0|                tmp___2 = 0;
30503|      0|            }
30504|      0|            else {
30505|      0|                tmp___2 = 1;
30506|      0|            }
30507|      0|            if ((((t1 < t) != (sec_requested < 0)) |
30508|      0|                    ((t2 < t1) != (sec_adjustment < 0))) |
30509|      0|                    tmp___2) {
30510|      0|                return ((time_t)-1);
30511|      0|            }
30512|      0|        }
30513|      0|        *tp = tm;
30514|      0|        return (t);
30515|      0|    }
30516|      0|}
30517|       |static time_t localtime_offset;
30518|       |__attribute__((__nothrow__))
30519|       |time_t(__attribute__((__leaf__)) rpl_mktime)(struct tm *tp);
30520|       |time_t(__attribute__((__leaf__)) rpl_mktime)(struct tm *tp)
30521|      0|{
30522|      0|    time_t tmp;
30523|       |
30524|      0|    {
30525|      0|        {
30526|      0|            tmp = mktime_internal(
30527|      0|                      tp, (struct tm * (*)(time_t const *, struct tm *))(&localtime_r),
30528|      0|                      &localtime_offset);
30529|      0|        }
30530|      0|        return (tmp);
30531|      0|    }
30532|      0|}
30533|       |/* #pragma merger("0","020.modechange.o.i","") */
30534|       |void mode_free(struct mode_change *changes);
30535|       |strtol_error xstrtoul(char const *s, char **ptr, int strtol_base,
30536|       |                      unsigned long *val, char const *valid_suffixes);
30537|       |static struct mode_change *make_node_op_equals(mode_t new_mode)
30538|      0|{
30539|      0|    struct mode_change *p;
30540|      0|    void *tmp;
30541|       |
30542|      0|    {
30543|      0|        {
30544|      0|            tmp = malloc(sizeof(struct mode_change));
30545|      0|            p = (struct mode_change *)tmp;
30546|      0|        }
30547|      0|        if ((unsigned long)p == (unsigned long)((void *)0)) {
30548|      0|            return (p);
30549|      0|        }
30550|      0|        p->next = (struct mode_change *)((void *)0);
30551|      0|        p->op = (char)'=';
30552|      0|        p->flags = (char)0;
30553|      0|        p->value = new_mode;
30554|      0|        p->affected = (mode_t)((4032 | (448 >> 3)) | ((448 >> 3) >> 3));
30555|      0|        return (p);
30556|      0|    }
30557|      0|}
30558|       |static void mode_append_entry(struct mode_change **head,
30559|       |                              struct mode_change **tail,
30560|       |                              struct mode_change *e)
30561|      0|{
30562|      0|    struct mode_change *tmp;
30563|       |
30564|      0|    {
30565|      0|        if ((unsigned long)*head == (unsigned long)((void *)0)) {
30566|      0|            tmp = e;
30567|      0|            *tail = tmp;
30568|      0|            *head = tmp;
30569|      0|        }
30570|      0|        else {
30571|      0|            (*tail)->next = e;
30572|      0|            *tail = e;
30573|      0|        }
30574|      0|        return;
30575|      0|    }
30576|      0|}
30577|       |struct mode_change *mode_compile(char const *mode_string,
30578|       |                                 unsigned int masked_ops)
30579|      0|{
30580|      0|    struct mode_change *head;
30581|      0|    struct mode_change *tail;
30582|      0|    unsigned long octal_value;
30583|      0|    mode_t umask_value;
30584|      0|    struct mode_change *p;
30585|      0|    mode_t mode;
30586|      0|    strtol_error tmp;
30587|      0|    mode_t affected_bits;
30588|      0|    mode_t affected_masked;
30589|      0|    unsigned int ops_to_mask;
30590|      0|    int who_specified_p;
30591|      0|    struct mode_change *change;
30592|      0|    void *tmp___0;
30593|      0|    struct mode_change *p___0;
30594|      0|    struct mode_change *tmp___1;
30595|      0|    int tmp___2;
30596|      0|    int tmp___3;
30597|      0|    int tmp___4;
30598|      0|    int tmp___5;
30599|      0|    int tmp___6;
30600|      0|    int tmp___7;
30601|      0|    int tmp___8;
30602|      0|    int tmp___9;
30603|      0|    int tmp___10;
30604|      0|    int tmp___11;
30605|      0|    int tmp___12;
30606|      0|    int tmp___13;
30607|      0|    unsigned long tmp___14;
30608|      0|    int tmp___15;
30609|      0|    int tmp___16;
30610|      0|    int tmp___17;
30611|      0|    char *__cil_tmp34;
30612|       |
30613|      0|    {
30614|      0|        {
30615|      0|            head = (struct mode_change *)((void *)0);
30616|      0|            tmp = xstrtoul(mode_string, (char **)((void *)0), 8, &octal_value, "");
30617|      0|        }
30618|      0|        if ((unsigned int)tmp == 0U) {
30619|      0|            if (octal_value != (octal_value & 4095UL)) {
30620|      0|                return ((struct mode_change *)0);
30621|      0|            }
30622|      0|            if (256 >> 3 == 32) {
30623|      0|                if (128 >> 3 == 16) {
30624|      0|                    if (64 >> 3 == 8) {
30625|      0|                        if ((256 >> 3) >> 3 == 4) {
30626|      0|                            if ((128 >> 3) >> 3 == 2) {
30627|      0|                                if ((64 >> 3) >> 3 == 1) {
30628|      0|                                    tmp___14 = octal_value;
30629|      0|                                }
30630|      0|                                else {
30631|      0|                                    goto _L___7;
30632|      0|                                }
30633|      0|                            }
30634|      0|                            else {
30635|      0|                                goto _L___7;
30636|      0|                            }
30637|      0|                        }
30638|      0|                        else {
30639|      0|                            goto _L___7;
30640|      0|                        }
30641|      0|                    }
30642|      0|                    else {
30643|      0|                        goto _L___7;
30644|      0|                    }
30645|      0|                }
30646|      0|                else {
30647|      0|                    goto _L___7;
30648|      0|                }
30649|      0|            }
30650|      0|            else {
30651|      0|_L___7: /* CIL Label */
30652|      0|                if (octal_value & 2048UL) {
30653|      0|                    tmp___2 = 2048;
30654|      0|                }
30655|      0|                else {
30656|      0|                    tmp___2 = 0;
30657|      0|                }
30658|      0|                if (octal_value & 1024UL) {
30659|      0|                    tmp___3 = 1024;
30660|      0|                }
30661|      0|                else {
30662|      0|                    tmp___3 = 0;
30663|      0|                }
30664|      0|                if (octal_value & 512UL) {
30665|      0|                    tmp___4 = 512;
30666|      0|                }
30667|      0|                else {
30668|      0|                    tmp___4 = 0;
30669|      0|                }
30670|      0|                if (octal_value & 256UL) {
30671|      0|                    tmp___5 = 256;
30672|      0|                }
30673|      0|                else {
30674|      0|                    tmp___5 = 0;
30675|      0|                }
30676|      0|                if (octal_value & 128UL) {
30677|      0|                    tmp___6 = 128;
30678|      0|                }
30679|      0|                else {
30680|      0|                    tmp___6 = 0;
30681|      0|                }
30682|      0|                if (octal_value & 64UL) {
30683|      0|                    tmp___7 = 64;
30684|      0|                }
30685|      0|                else {
30686|      0|                    tmp___7 = 0;
30687|      0|                }
30688|      0|                if (octal_value & 32UL) {
30689|      0|                    tmp___8 = 256 >> 3;
30690|      0|                }
30691|      0|                else {
30692|      0|                    tmp___8 = 0;
30693|      0|                }
30694|      0|                if (octal_value & 16UL) {
30695|      0|                    tmp___9 = 128 >> 3;
30696|      0|                }
30697|      0|                else {
30698|      0|                    tmp___9 = 0;
30699|      0|                }
30700|      0|                if (octal_value & 8UL) {
30701|      0|                    tmp___10 = 64 >> 3;
30702|      0|                }
30703|      0|                else {
30704|      0|                    tmp___10 = 0;
30705|      0|                }
30706|      0|                if (octal_value & 4UL) {
30707|      0|                    tmp___11 = (256 >> 3) >> 3;
30708|      0|                }
30709|      0|                else {
30710|      0|                    tmp___11 = 0;
30711|      0|                }
30712|      0|                if (octal_value & 2UL) {
30713|      0|                    tmp___12 = (128 >> 3) >> 3;
30714|      0|                }
30715|      0|                else {
30716|      0|                    tmp___12 = 0;
30717|      0|                }
30718|      0|                if (octal_value & 1UL) {
30719|      0|                    tmp___13 = (64 >> 3) >> 3;
30720|      0|                }
30721|      0|                else {
30722|      0|                    tmp___13 = 0;
30723|      0|                }
30724|      0|                tmp___14 = (unsigned long)((mode_t)(
30725|      0|                                               ((((((((((tmp___2 | tmp___3) | tmp___4) | tmp___5) | tmp___6) |
30726|      0|                                                     tmp___7) |
30727|      0|                                                    tmp___8) |
30728|      0|                                                   tmp___9) |
30729|      0|                                                  tmp___10) |
30730|      0|                                                 tmp___11) |
30731|      0|                                                tmp___12) |
30732|      0|                                               tmp___13));
30733|      0|            }
30734|      0|            {
30735|      0|                mode = (mode_t)tmp___14;
30736|      0|                p = make_node_op_equals(mode);
30737|      0|            }
30738|      0|            if ((unsigned long)p == (unsigned long)((void *)0)) {
30739|      0|                return ((struct mode_change *)1);
30740|      0|            }
30741|      0|            {
30742|      0|                mode_append_entry(&head, &tail, p);
30743|      0|            }
30744|      0|            return (head);
30745|      0|        }
30746|      0|        {
30747|      0|            umask_value = umask((__mode_t)0);
30748|      0|            umask(umask_value);
30749|      0|            mode_string--;
30750|      0|        }
30751|      0|        {
30752|      0|            while (1) {
30753|      0|while_continue: /* CIL Label */
30754|      0|                ;
30755|      0|                affected_bits = (mode_t)0;
30756|      0|                ops_to_mask = 0U;
30757|      0|                affected_bits = (mode_t)0;
30758|      0|                ops_to_mask = 0U;
30759|      0|                mode_string++;
30760|      0|                {
30761|      0|                    while (1) {
30762|      0|while_continue___0: /* CIL Label */
30763|      0|                        ;
30764|      0|                        {
30765|      0|                            if ((int const) * mode_string == 117) {
30766|      0|                                goto case_117;
30767|      0|                            }
30768|      0|                            if ((int const) * mode_string == 103) {
30769|      0|                                goto case_103;
30770|      0|                            }
30771|      0|                            if ((int const) * mode_string == 111) {
30772|      0|                                goto case_111;
30773|      0|                            }
30774|      0|                            if ((int const) * mode_string == 97) {
30775|      0|                                goto case_97;
30776|      0|                            }
30777|      0|                            goto switch_default;
30778|      0|case_117: /* CIL Label */
30779|      0|                            affected_bits |= 2496U;
30780|      0|                            goto switch_break;
30781|      0|case_103: /* CIL Label */
30782|      0|                            affected_bits |= (unsigned int)(1024 | (448 >> 3));
30783|      0|                            goto switch_break;
30784|      0|case_111: /* CIL Label */
30785|      0|                            affected_bits |= (unsigned int)(512 | ((448 >> 3) >> 3));
30786|      0|                            goto switch_break;
30787|      0|case_97: /* CIL Label */
30788|      0|                            affected_bits |=
30789|      0|                                (unsigned int)((4032 | (448 >> 3)) | ((448 >> 3) >> 3));
30790|      0|                            goto switch_break;
30791|      0|switch_default: /* CIL Label */
30792|      0|                            goto no_more_affected;
30793|      0|switch_break: /* CIL Label */
30794|      0|                            ;
30795|      0|                        }
30796|      0|                        mode_string++;
30797|      0|                    }
30798|      0|while_break___0: /* CIL Label */
30799|      0|                    ;
30800|      0|                }
30801|      0|no_more_affected:
30802|      0|                if (affected_bits) {
30803|      0|                    who_specified_p = 1;
30804|      0|                }
30805|      0|                else {
30806|      0|                    who_specified_p = 0;
30807|      0|                    affected_bits = (mode_t)((4032 | (448 >> 3)) | ((448 >> 3) >> 3));
30808|      0|                    ops_to_mask = masked_ops;
30809|      0|                }
30810|      0|                {
30811|      0|                    while (1) {
30812|      0|while_continue___1: /* CIL Label */
30813|      0|                        ;
30814|      0|                        if (!((int const) * mode_string == 61)) {
30815|      0|                            if (!((int const) * mode_string == 43)) {
30816|      0|                                if (!((int const) * mode_string == 45)) {
30817|      0|                                    goto while_break___1;
30818|      0|                                }
30819|      0|                            }
30820|      0|                        }
30821|      0|                        {
30822|      0|                            tmp___0 = malloc(sizeof(struct mode_change));
30823|      0|                            change = (struct mode_change *)tmp___0;
30824|      0|                        }
30825|      0|                        if ((unsigned long)change == (unsigned long)((void *)0)) {
30826|      0|                            {
30827|      0|                                mode_free(head);
30828|      0|                            }
30829|      0|                            return ((struct mode_change *)1);
30830|      0|                        }
30831|      0|                        change->next = (struct mode_change *)((void *)0);
30832|      0|                        change->op = (char)*mode_string;
30833|      0|                        affected_masked = affected_bits;
30834|      0|                        if (!who_specified_p) {
30835|      0|                            if ((int const) * mode_string == 61) {
30836|      0|                                tmp___15 = 1;
30837|      0|                            }
30838|      0|                            else {
30839|      0|                                tmp___15 = 0;
30840|      0|                            }
30841|      0|                            if (ops_to_mask & (unsigned int)tmp___15) {
30842|      0|                                {
30843|      0|                                    tmp___1 = make_node_op_equals((mode_t)0);
30844|      0|                                    p___0 = tmp___1;
30845|      0|                                }
30846|      0|                                if ((unsigned long)p___0 == (unsigned long)((void *)0)) {
30847|      0|                                    return ((struct mode_change *)1);
30848|      0|                                }
30849|      0|                                {
30850|      0|                                    mode_append_entry(&head, &tail, p___0);
30851|      0|                                }
30852|      0|                            }
30853|      0|                        }
30854|      0|                        if ((int const) * mode_string == 61) {
30855|      0|                            tmp___17 = 1;
30856|      0|                        }
30857|      0|                        else {
30858|      0|                            if ((int const) * mode_string == 43) {
30859|      0|                                tmp___16 = 2;
30860|      0|                            }
30861|      0|                            else {
30862|      0|                                tmp___16 = 4;
30863|      0|                            }
30864|      0|                            tmp___17 = tmp___16;
30865|      0|                        }
30866|      0|                        if (ops_to_mask & (unsigned int)tmp___17) {
30867|      0|                            affected_masked &= ~umask_value;
30868|      0|                        }
30869|      0|                        {
30870|      0|                            change->affected = affected_masked;
30871|      0|                            change->value = (mode_t)0;
30872|      0|                            change->flags = (char)0;
30873|      0|                            mode_append_entry(&head, &tail, change);
30874|      0|                            mode_string++;
30875|      0|                        }
30876|      0|                        {
30877|      0|                            while (1) {
30878|      0|while_continue___2: /* CIL Label */
30879|      0|                                ;
30880|      0|                                {
30881|      0|                                    if ((int const) * mode_string == 114) {
30882|      0|                                        goto case_114;
30883|      0|                                    }
30884|      0|                                    if ((int const) * mode_string == 119) {
30885|      0|                                        goto case_119;
30886|      0|                                    }
30887|      0|                                    if ((int const) * mode_string == 88) {
30888|      0|                                        goto case_88;
30889|      0|                                    }
30890|      0|                                    if ((int const) * mode_string == 120) {
30891|      0|                                        goto case_120;
30892|      0|                                    }
30893|      0|                                    if ((int const) * mode_string == 115) {
30894|      0|                                        goto case_115;
30895|      0|                                    }
30896|      0|                                    if ((int const) * mode_string == 116) {
30897|      0|                                        goto case_116;
30898|      0|                                    }
30899|      0|                                    if ((int const) * mode_string == 117) {
30900|      0|                                        goto case_117___0;
30901|      0|                                    }
30902|      0|                                    if ((int const) * mode_string == 103) {
30903|      0|                                        goto case_103___0;
30904|      0|                                    }
30905|      0|                                    if ((int const) * mode_string == 111) {
30906|      0|                                        goto case_111___0;
30907|      0|                                    }
30908|      0|                                    goto switch_default___0;
30909|      0|case_114: /* CIL Label */
30910|      0|                                    change->value |=
30911|      0|                                        (unsigned int)((256 | (256 >> 3)) | ((256 >> 3) >> 3)) &
30912|      0|                                        affected_masked;
30913|      0|                                    goto switch_break___0;
30914|      0|case_119: /* CIL Label */
30915|      0|                                    change->value |=
30916|      0|                                        (unsigned int)((128 | (128 >> 3)) | ((128 >> 3) >> 3)) &
30917|      0|                                        affected_masked;
30918|      0|                                    goto switch_break___0;
30919|      0|case_88: /* CIL Label */
30920|      0|                                    change->flags = (char)((int)change->flags | 1);
30921|      0|case_120: /* CIL Label */
30922|      0|                                    change->value |=
30923|      0|                                        (unsigned int)((64 | (64 >> 3)) | ((64 >> 3) >> 3)) &
30924|      0|                                        affected_masked;
30925|      0|                                    goto switch_break___0;
30926|      0|case_115: /* CIL Label */
30927|      0|                                    change->value |= 3072U & affected_masked;
30928|      0|                                    goto switch_break___0;
30929|      0|case_116: /* CIL Label */
30930|      0|                                    change->value |= 512U & affected_masked;
30931|      0|                                    goto switch_break___0;
30932|      0|case_117___0: /* CIL Label */
30933|      0|                                    if (change->value) {
30934|      0|                                        goto invalid;
30935|      0|                                    }
30936|      0|                                    change->value = (mode_t)448;
30937|      0|                                    change->flags = (char)((int)change->flags | 2);
30938|      0|                                    goto switch_break___0;
30939|      0|case_103___0: /* CIL Label */
30940|      0|                                    if (change->value) {
30941|      0|                                        goto invalid;
30942|      0|                                    }
30943|      0|                                    change->value = (mode_t)(448 >> 3);
30944|      0|                                    change->flags = (char)((int)change->flags | 2);
30945|      0|                                    goto switch_break___0;
30946|      0|case_111___0: /* CIL Label */
30947|      0|                                    if (change->value) {
30948|      0|                                        goto invalid;
30949|      0|                                    }
30950|      0|                                    change->value = (mode_t)((448 >> 3) >> 3);
30951|      0|                                    change->flags = (char)((int)change->flags | 2);
30952|      0|                                    goto switch_break___0;
30953|      0|switch_default___0: /* CIL Label */
30954|      0|                                    goto no_more_values;
30955|      0|switch_break___0: /* CIL Label */
30956|      0|                                    ;
30957|      0|                                }
30958|      0|                                mode_string++;
30959|      0|                            }
30960|      0|while_break___2: /* CIL Label */
30961|      0|                            ;
30962|      0|                        }
30963|      0|no_more_values:
30964|      0|                        ;
30965|      0|                    }
30966|      0|while_break___1: /* CIL Label */
30967|      0|                    ;
30968|      0|                }
30969|      0|                if (!((int const) * mode_string == 44)) {
30970|      0|                    goto while_break;
30971|      0|                }
30972|      0|            }
30973|      0|while_break: /* CIL Label */
30974|      0|            ;
30975|      0|        }
30976|      0|        if ((int const) * mode_string == 0) {
30977|      0|            return (head);
30978|      0|        }
30979|      0|invalid : {
30980|      0|            mode_free(head);
30981|      0|        }
30982|      0|        return ((struct mode_change *)0);
30983|      0|    }
30984|      0|}
30985|       |mode_t mode_adjust(mode_t oldmode, struct mode_change const *changes)
30986|      0|{
30987|      0|    mode_t newmode;
30988|      0|    mode_t value;
30989|      0|    int tmp;
30990|      0|    int tmp___0;
30991|      0|    int tmp___1;
30992|      0|    int tmp___2;
30993|      0|    int tmp___3;
30994|      0|    int tmp___4;
30995|      0|    int tmp___5;
30996|      0|    int tmp___6;
30997|      0|    int tmp___7;
30998|       |
30999|      0|    {
31000|      0|        newmode = oldmode & (unsigned int)((4032 | (448 >> 3)) | ((448 >> 3) >> 3));
31001|      0|        {
31002|      0|            while (1) {
31003|      0|while_continue: /* CIL Label */
31004|      0|                ;
31005|      0|                if (!changes) {
31006|      0|                    goto while_break;
31007|      0|                }
31008|      0|                if ((int const)changes->flags & 2) {
31009|      0|                    value = newmode & (unsigned int)changes->value;
31010|      0|                    if (changes->value & 448U) {
31011|      0|                        if (value & 256U) {
31012|      0|                            tmp = (256 >> 3) | ((256 >> 3) >> 3);
31013|      0|                        }
31014|      0|                        else {
31015|      0|                            tmp = 0;
31016|      0|                        }
31017|      0|                        if (value & 128U) {
31018|      0|                            tmp___0 = (128 >> 3) | ((128 >> 3) >> 3);
31019|      0|                        }
31020|      0|                        else {
31021|      0|                            tmp___0 = 0;
31022|      0|                        }
31023|      0|                        if (value & 64U) {
31024|      0|                            tmp___1 = (64 >> 3) | ((64 >> 3) >> 3);
31025|      0|                        }
31026|      0|                        else {
31027|      0|                            tmp___1 = 0;
31028|      0|                        }
31029|      0|                        value |= (unsigned int)((tmp | tmp___0) | tmp___1);
31030|      0|                    }
31031|      0|                    else {
31032|      0|                        if (changes->value & (unsigned int const)(448 >> 3)) {
31033|      0|                            if (value & (unsigned int)(256 >> 3)) {
31034|      0|                                tmp___2 = 256 | ((256 >> 3) >> 3);
31035|      0|                            }
31036|      0|                            else {
31037|      0|                                tmp___2 = 0;
31038|      0|                            }
31039|      0|                            if (value & (unsigned int)(128 >> 3)) {
31040|      0|                                tmp___3 = 128 | ((128 >> 3) >> 3);
31041|      0|                            }
31042|      0|                            else {
31043|      0|                                tmp___3 = 0;
31044|      0|                            }
31045|      0|                            if (value & (unsigned int)(64 >> 3)) {
31046|      0|                                tmp___4 = 64 | ((64 >> 3) >> 3);
31047|      0|                            }
31048|      0|                            else {
31049|      0|                                tmp___4 = 0;
31050|      0|                            }
31051|      0|                            value |= (unsigned int)((tmp___2 | tmp___3) | tmp___4);
31052|      0|                        }
31053|      0|                        else {
31054|      0|                            if (value & (unsigned int)((256 >> 3) >> 3)) {
31055|      0|                                tmp___5 = 256 | (256 >> 3);
31056|      0|                            }
31057|      0|                            else {
31058|      0|                                tmp___5 = 0;
31059|      0|                            }
31060|      0|                            if (value & (unsigned int)((128 >> 3) >> 3)) {
31061|      0|                                tmp___6 = 128 | (128 >> 3);
31062|      0|                            }
31063|      0|                            else {
31064|      0|                                tmp___6 = 0;
31065|      0|                            }
31066|      0|                            if (value & (unsigned int)((64 >> 3) >> 3)) {
31067|      0|                                tmp___7 = 64 | (64 >> 3);
31068|      0|                            }
31069|      0|                            else {
31070|      0|                                tmp___7 = 0;
31071|      0|                            }
31072|      0|                            value |= (unsigned int)((tmp___5 | tmp___6) | tmp___7);
31073|      0|                        }
31074|      0|                    }
31075|      0|                    value &= (unsigned int)changes->affected;
31076|      0|                }
31077|      0|                else {
31078|      0|                    value = (mode_t)changes->value;
31079|      0|                    if ((int const)changes->flags & 1) {
31080|      0|                        if (!((oldmode & 61440U) == 16384U)) {
31081|      0|                            if ((newmode &
31082|      0|                                    (unsigned int)((64 | (64 >> 3)) | ((64 >> 3) >> 3))) == 0U) {
31083|      0|                                value &= (unsigned int)(~((64 | (64 >> 3)) | ((64 >> 3) >> 3)));
31084|      0|                            }
31085|      0|                        }
31086|      0|                    }
31087|      0|                }
31088|      0|                {
31089|      0|                    if ((int const)changes->op == 61) {
31090|      0|                        goto case_61;
31091|      0|                    }
31092|      0|                    if ((int const)changes->op == 43) {
31093|      0|                        goto case_43;
31094|      0|                    }
31095|      0|                    if ((int const)changes->op == 45) {
31096|      0|                        goto case_45;
31097|      0|                    }
31098|      0|                    goto switch_break;
31099|      0|case_61: /* CIL Label */
31100|      0|                    newmode = (newmode & (unsigned int)(~changes->affected)) | value;
31101|      0|                    goto switch_break;
31102|      0|case_43: /* CIL Label */
31103|      0|                    newmode |= value;
31104|      0|                    goto switch_break;
31105|      0|case_45: /* CIL Label */
31106|      0|                    newmode &= ~value;
31107|      0|                    goto switch_break;
31108|      0|switch_break: /* CIL Label */
31109|      0|                    ;
31110|      0|                }
31111|      0|                changes = (struct mode_change const *)changes->next;
31112|      0|            }
31113|      0|while_break: /* CIL Label */
31114|      0|            ;
31115|      0|        }
31116|      0|        return (newmode);
31117|      0|    }
31118|      0|}
31119|       |void mode_free(struct mode_change *changes)
31120|      0|{
31121|      0|    register struct mode_change *next;
31122|       |
31123|      0|    {
31124|      0|        {
31125|      0|            while (1) {
31126|      0|while_continue: /* CIL Label */
31127|      0|                ;
31128|      0|                if (!changes) {
31129|      0|                    goto while_break;
31130|      0|                }
31131|      0|                {
31132|      0|                    next = changes->next;
31133|      0|                    free((void *)changes);
31134|      0|                    changes = next;
31135|      0|                }
31136|      0|            }
31137|      0|while_break: /* CIL Label */
31138|      0|            ;
31139|      0|        }
31140|      0|        return;
31141|      0|    }
31142|      0|}
31143|       |/* #pragma merger("0","021.prepargs.o.i","") */
31144|       |static int prepend_args(char const *options, char *buf, char **argv)
31145|      0|{
31146|      0|    char const *o___0;
31147|      0|    char *b;
31148|      0|    int n;
31149|      0|    unsigned short const **tmp;
31150|      0|    char const *tmp___0;
31151|      0|    char *tmp___1;
31152|      0|    char tmp___2;
31153|      0|    char const *tmp___3;
31154|      0|    unsigned short const **tmp___4;
31155|      0|    char *tmp___5;
31156|       |
31157|      0|    {
31158|      0|        o___0 = options;
31159|      0|        b = buf;
31160|      0|        n = 0;
31161|      0|        {
31162|      0|            while (1) {
31163|      0|while_continue: /* CIL Label */
31164|      0|                ;
31165|      0|                {
31166|      0|                    while (1) {
31167|      0|while_continue___0: /* CIL Label */
31168|      0|                        ;
31169|      0|                        {
31170|      0|                            tmp = __ctype_b_loc();
31171|      0|                        }
31172|      0|                        if (!((int const) * (*tmp + (int)((unsigned char)*o___0)) & 8192)) {
31173|      0|                            goto while_break___0;
31174|      0|                        }
31175|      0|                        o___0++;
31176|      0|                    }
31177|      0|while_break___0: /* CIL Label */
31178|      0|                    ;
31179|      0|                }
31180|      0|                if (!*o___0) {
31181|      0|                    return (n);
31182|      0|                }
31183|      0|                if (argv) {
31184|      0|                    *(argv + n) = b;
31185|      0|                }
31186|      0|                n++;
31187|      0|                {
31188|      0|                    while (1) {
31189|      0|while_continue___1: /* CIL Label */
31190|      0|                        ;
31191|      0|                        tmp___1 = b;
31192|      0|                        b++;
31193|      0|                        tmp___3 = o___0;
31194|      0|                        o___0++;
31195|      0|                        tmp___2 = (char)*tmp___3;
31196|      0|                        *tmp___1 = tmp___2;
31197|      0|                        if ((int)tmp___2 == 92) {
31198|      0|                            if (*o___0) {
31199|      0|                                tmp___0 = o___0;
31200|      0|                                o___0++;
31201|      0|                                *(b + -1) = (char)*tmp___0;
31202|      0|                            }
31203|      0|                        }
31204|      0|                        if (*o___0) {
31205|      0|                            {
31206|      0|                                tmp___4 = __ctype_b_loc();
31207|      0|                            }
31208|      0|                            if ((int const) * (*tmp___4 + (int)((unsigned char)*o___0)) &
31209|      0|                                    8192) {
31210|      0|                                goto while_break___1;
31211|      0|                            }
31212|      0|                        }
31213|      0|                        else {
31214|      0|                            goto while_break___1;
31215|      0|                        }
31216|      0|                    }
31217|      0|while_break___1: /* CIL Label */
31218|      0|                    ;
31219|      0|                }
31220|      0|                tmp___5 = b;
31221|      0|                b++;
31222|      0|                *tmp___5 = (char)'\000';
31223|      0|            }
31224|      0|while_break: /* CIL Label */
31225|      0|            ;
31226|      0|        }
31227|      0|    }
31228|      0|}
31229|       |void prepend_default_options(char const *options, int *pargc, char ***pargv)
31230|      0|{
31231|      0|    char *buf;
31232|      0|    size_t tmp;
31233|      0|    void *tmp___0;
31234|      0|    int prepended;
31235|      0|    int tmp___1;
31236|      0|    int argc;
31237|      0|    char *const *argv;
31238|      0|    char **pp;
31239|      0|    void *tmp___2;
31240|      0|    char **tmp___3;
31241|      0|    char *const *tmp___4;
31242|      0|    int tmp___5;
31243|      0|    char **tmp___6;
31244|      0|    char *tmp___7;
31245|      0|    char *const *tmp___8;
31246|       |
31247|      0|    {
31248|      0|        if (options) {
31249|      0|            {
31250|      0|                tmp = strlen(options);
31251|      0|                tmp___0 = xmalloc(tmp + 1UL);
31252|      0|                buf = (char *)tmp___0;
31253|      0|                tmp___1 = prepend_args(options, buf, (char **)0);
31254|      0|                prepended = tmp___1;
31255|      0|                argc = *pargc;
31256|      0|                argv = (char *const *)*pargv;
31257|      0|                tmp___2 =
31258|      0|                    xmalloc((unsigned long)((prepended + argc) + 1) * sizeof(*pp));
31259|      0|                pp = (char **)tmp___2;
31260|      0|                *pargc = prepended + argc;
31261|      0|                *pargv = pp;
31262|      0|                tmp___3 = pp;
31263|      0|                pp++;
31264|      0|                tmp___4 = argv;
31265|      0|                argv++;
31266|      0|                *tmp___3 = (char *)*tmp___4;
31267|      0|                tmp___5 = prepend_args(options, buf, pp);
31268|      0|                pp += tmp___5;
31269|      0|            }
31270|      0|            {
31271|      0|                while (1) {
31272|      0|while_continue: /* CIL Label */
31273|      0|                    ;
31274|      0|                    tmp___6 = pp;
31275|      0|                    pp++;
31276|      0|                    tmp___8 = argv;
31277|      0|                    argv++;
31278|      0|                    tmp___7 = (char *)*tmp___8;
31279|      0|                    *tmp___6 = tmp___7;
31280|      0|                    if (!tmp___7) {
31281|      0|                        goto while_break;
31282|      0|                    }
31283|      0|                    goto while_continue;
31284|      0|                }
31285|      0|while_break: /* CIL Label */
31286|      0|                ;
31287|      0|            }
31288|      0|        }
31289|      0|        return;
31290|      0|    }
31291|      0|}
31292|       |/* #pragma merger("0","022.quotearg.o.i","") */
31293|       |char const *const quoting_style_args[8];
31294|       |enum quoting_style const quoting_style_vals[7];
31295|       |int set_char_quoting(struct quoting_options *o___0, char c, int i);
31296|       |char *quotearg_n(int n, char const *arg);
31297|       |char *quotearg_char(char const *arg, char ch);
31298|       |extern __attribute__((__nothrow__))
31299|       |size_t(__attribute__((__leaf__)) __ctype_get_mb_cur_max)(void);
31300|       |extern __attribute__((__nothrow__)) int(__attribute__((__leaf__))
31301|       |                                        mbsinit)(mbstate_t const *__ps)
31302|       |__attribute__((__pure__));
31303|       |extern __attribute__((__nothrow__))
31304|       |size_t(__attribute__((__leaf__))
31305|       |       mbrtowc)(wchar_t *__restrict __pwc, char const *__restrict __s,
31306|       |                size_t __n, mbstate_t *__restrict __p);
31307|       |extern __attribute__((__nothrow__)) int(__attribute__((__leaf__))
31308|       |                                        iswprint)(wint_t __wc);
31309|       |char const *const quoting_style_args[8] = {
31310|       |    (char const * /* const  */) "literal",
31311|       |    (char const * /* const  */) "shell",
31312|       |    (char const * /* const  */) "shell-always",
31313|       |    (char const * /* const  */) "c",
31314|       |    (char const * /* const  */) "escape",
31315|       |    (char const * /* const  */) "locale",
31316|       |    (char const * /* const  */) "clocale",
31317|       |    (char const * /* const  */)0
31318|       |};
31319|       |enum quoting_style const quoting_style_vals[7] = {
31320|       |    (enum quoting_style const)0, (enum quoting_style const)1,
31321|       |    (enum quoting_style const)2, (enum quoting_style const)3,
31322|       |    (enum quoting_style const)4, (enum quoting_style const)5,
31323|       |    (enum quoting_style const)6
31324|       |};
31325|       |static struct quoting_options default_quoting_options;
31326|       |struct quoting_options *clone_quoting_options(struct quoting_options *o___0)
31327|      0|{
31328|      0|    int e;
31329|      0|    int *tmp;
31330|      0|    struct quoting_options *p;
31331|      0|    void *tmp___0;
31332|      0|    int *tmp___1;
31333|      0|    struct quoting_options *tmp___2;
31334|       |
31335|      0|    {
31336|      0|        {
31337|      0|            tmp = __errno_location();
31338|      0|            e = *tmp;
31339|      0|            tmp___0 = xmalloc(sizeof(*p));
31340|      0|            p = (struct quoting_options *)tmp___0;
31341|      0|        }
31342|      0|        if (o___0) {
31343|      0|            tmp___2 = o___0;
31344|      0|        }
31345|      0|        else {
31346|      0|            tmp___2 = &default_quoting_options;
31347|      0|        }
31348|      0|        {
31349|      0|            *p = *tmp___2;
31350|      0|            tmp___1 = __errno_location();
31351|      0|            *tmp___1 = e;
31352|      0|        }
31353|      0|        return (p);
31354|      0|    }
31355|      0|}
31356|       |void set_quoting_style(struct quoting_options *o___0, enum quoting_style s)
31357|      0|{
31358|      0|    struct quoting_options *tmp;
31359|       |
31360|      0|    {
31361|      0|        if (o___0) {
31362|      0|            tmp = o___0;
31363|      0|        }
31364|      0|        else {
31365|      0|            tmp = &default_quoting_options;
31366|      0|        }
31367|      0|        tmp->style = s;
31368|      0|        return;
31369|      0|    }
31370|      0|}
31371|       |int set_char_quoting(struct quoting_options *o___0, char c, int i)
31372|      0|{
31373|      0|    unsigned char uc;
31374|      0|    int *p;
31375|      0|    int shift;
31376|      0|    int r;
31377|      0|    struct quoting_options *tmp;
31378|       |
31379|      0|    {
31380|      0|        uc = (unsigned char)c;
31381|      0|        if (o___0) {
31382|      0|            tmp = o___0;
31383|      0|        }
31384|      0|        else {
31385|      0|            tmp = &default_quoting_options;
31386|      0|        }
31387|      0|        p = tmp->quote_these_too + (unsigned long)uc / (sizeof(int) * 8UL);
31388|      0|        shift = (int)((unsigned long)uc % (sizeof(int) * 8UL));
31389|      0|        r = (*p >> shift) & 1;
31390|      0|        *p ^= ((i & 1) ^ r) << shift;
31391|      0|        return (r);
31392|      0|    }
31393|      0|}
31394|       |static char const *gettext_quote(char const *msgid, enum quoting_style s)
31395|      0|{
31396|      0|    char const *translation;
31397|      0|    char *tmp;
31398|      0|    char *__cil_tmp5;
31399|       |
31400|      0|    {
31401|      0|        {
31402|      0|            tmp = gettext(msgid);
31403|      0|            translation = (char const *)tmp;
31404|      0|        }
31405|      0|        if ((unsigned long)translation == (unsigned long)msgid) {
31406|      0|            if ((unsigned int)s == 6U) {
31407|      0|                translation = "\"";
31408|      0|            }
31409|      0|        }
31410|      0|        return (translation);
31411|      0|    }
31412|      0|}
31413|       |static size_t quotearg_buffer_restyled(char *buffer___2, size_t buffersize,
31414|       |                                       char const *arg, size_t argsize,
31415|       |                                       enum quoting_style quoting_style,
31416|       |                                       struct quoting_options const *o___0)
31417|      0|{
31418|      0|    size_t i;
31419|      0|    size_t len;
31420|      0|    char const *quote_string;
31421|      0|    size_t quote_string_len;
31422|      0|    int backslash_escapes;
31423|      0|    int unibyte_locale;
31424|      0|    size_t tmp;
31425|      0|    char const *left;
31426|      0|    char const *tmp___0;
31427|      0|    char const *right;
31428|      0|    char const *tmp___1;
31429|      0|    unsigned char c;
31430|      0|    unsigned char esc;
31431|      0|    int tmp___2;
31432|      0|    size_t m;
31433|      0|    int printable;
31434|      0|    unsigned short const **tmp___3;
31435|      0|    mbstate_t mbstate;
31436|      0|    wchar_t w;
31437|      0|    size_t bytes;
31438|      0|    size_t tmp___4;
31439|      0|    size_t j;
31440|      0|    int tmp___5;
31441|      0|    int tmp___6;
31442|      0|    size_t ilim;
31443|      0|    size_t tmp___7;
31444|      0|    int tmp___8;
31445|      0|    int tmp___9;
31446|      0|    void *__cil_tmp35;
31447|      0|    char *__cil_tmp36;
31448|      0|    char *__cil_tmp37;
31449|      0|    char *__cil_tmp38;
31450|      0|    char *__cil_tmp39;
31451|       |
31452|      0|    {
31453|      0|        {
31454|      0|            len = (size_t)0;
31455|      0|            quote_string = (char const *)0;
31456|      0|            quote_string_len = (size_t)0;
31457|      0|            backslash_escapes = 0;
31458|      0|            tmp = __ctype_get_mb_cur_max();
31459|      0|            unibyte_locale = tmp == 1UL;
31460|      0|        }
31461|      0|        {
31462|      0|            if ((unsigned int)quoting_style == 3U) {
31463|      0|                goto case_3;
31464|      0|            }
31465|      0|            if ((unsigned int)quoting_style == 4U) {
31466|      0|                goto case_4;
31467|      0|            }
31468|      0|            if ((unsigned int)quoting_style == 5U) {
31469|      0|                goto case_5;
31470|      0|            }
31471|      0|            if ((unsigned int)quoting_style == 6U) {
31472|      0|                goto case_5;
31473|      0|            }
31474|      0|            if ((unsigned int)quoting_style == 2U) {
31475|      0|                goto case_2;
31476|      0|            }
31477|      0|            goto switch_default;
31478|      0|case_3 : { /* CIL Label */
31479|      0|                while (1) {
31480|      0|while_continue: /* CIL Label */
31481|      0|                    ;
31482|      0|                    if (len < buffersize) {
31483|      0|                        *(buffer___2 + len) = (char)'\"';
31484|      0|                    }
31485|      0|                    len++;
31486|      0|                    goto while_break;
31487|      0|                }
31488|      0|while_break: /* CIL Label */
31489|      0|                ;
31490|      0|            }
31491|      0|            backslash_escapes = 1;
31492|      0|            quote_string = "\"";
31493|      0|            quote_string_len = (size_t)1;
31494|      0|            goto switch_break;
31495|      0|case_4: /* CIL Label */
31496|      0|            backslash_escapes = 1;
31497|      0|            goto switch_break;
31498|      0|case_5:  /* CIL Label */
31499|      0|case_6 : { /* CIL Label */
31500|      0|                tmp___0 = gettext_quote("`", quoting_style);
31501|      0|                left = tmp___0;
31502|      0|                tmp___1 = gettext_quote("\'", quoting_style);
31503|      0|                right = tmp___1;
31504|      0|                quote_string = left;
31505|      0|            }
31506|      0|            {
31507|      0|                while (1) {
31508|      0|while_continue___0: /* CIL Label */
31509|      0|                    ;
31510|      0|                    if (!*quote_string) {
31511|      0|                        goto while_break___0;
31512|      0|                    }
31513|      0|                    {
31514|      0|                        while (1) {
31515|      0|while_continue___1: /* CIL Label */
31516|      0|                            ;
31517|      0|                            if (len < buffersize) {
31518|      0|                                *(buffer___2 + len) = (char)*quote_string;
31519|      0|                            }
31520|      0|                            len++;
31521|      0|                            goto while_break___1;
31522|      0|                        }
31523|      0|while_break___1: /* CIL Label */
31524|      0|                        ;
31525|      0|                    }
31526|      0|                    quote_string++;
31527|      0|                }
31528|      0|while_break___0: /* CIL Label */
31529|      0|                ;
31530|      0|            }
31531|      0|            {
31532|      0|                backslash_escapes = 1;
31533|      0|                quote_string = right;
31534|      0|                quote_string_len = strlen(quote_string);
31535|      0|            }
31536|      0|            goto switch_break;
31537|      0|case_2 : { /* CIL Label */
31538|      0|                while (1) {
31539|      0|while_continue___2: /* CIL Label */
31540|      0|                    ;
31541|      0|                    if (len < buffersize) {
31542|      0|                        *(buffer___2 + len) = (char)'\'';
31543|      0|                    }
31544|      0|                    len++;
31545|      0|                    goto while_break___2;
31546|      0|                }
31547|      0|while_break___2: /* CIL Label */
31548|      0|                ;
31549|      0|            }
31550|      0|            quote_string = "\'";
31551|      0|            quote_string_len = (size_t)1;
31552|      0|            goto switch_break;
31553|      0|switch_default: /* CIL Label */
31554|      0|            goto switch_break;
31555|      0|switch_break: /* CIL Label */
31556|      0|            ;
31557|      0|        }
31558|      0|        i = (size_t)0;
31559|      0|        {
31560|      0|            while (1) {
31561|      0|while_continue___3: /* CIL Label */
31562|      0|                ;
31563|      0|                if (argsize == 0xffffffffffffffffUL) {
31564|      0|                    tmp___9 = (int const) * (arg + i) == 0;
31565|      0|                }
31566|      0|                else {
31567|      0|                    tmp___9 = i == argsize;
31568|      0|                }
31569|      0|                if (tmp___9) {
31570|      0|                    goto while_break___3;
31571|      0|                }
31572|      0|                if (backslash_escapes) {
31573|      0|                    if (quote_string_len) {
31574|      0|                        if (i + quote_string_len <= argsize) {
31575|      0|                            {
31576|      0|                                tmp___2 = memcmp((void const *)(arg + i),
31577|      0|                                                 (void const *)quote_string, quote_string_len);
31578|      0|                            }
31579|      0|                            if (tmp___2 == 0) {
31580|      0|                                {
31581|      0|                                    while (1) {
31582|      0|while_continue___4: /* CIL Label */
31583|      0|                                        ;
31584|      0|                                        if (len < buffersize) {
31585|      0|                                            *(buffer___2 + len) = (char)'\\';
31586|      0|                                        }
31587|      0|                                        len++;
31588|      0|                                        goto while_break___4;
31589|      0|                                    }
31590|      0|while_break___4: /* CIL Label */
31591|      0|                                    ;
31592|      0|                                }
31593|      0|                            }
31594|      0|                        }
31595|      0|                    }
31596|      0|                }
31597|      0|                c = (unsigned char)*(arg + i);
31598|      0|                {
31599|      0|                    if ((int)c == 0) {
31600|      0|                        goto case_0;
31601|      0|                    }
31602|      0|                    if ((int)c == 63) {
31603|      0|                        goto case_63;
31604|      0|                    }
31605|      0|                    if ((int)c == 7) {
31606|      0|                        goto case_7;
31607|      0|                    }
31608|      0|                    if ((int)c == 8) {
31609|      0|                        goto case_8;
31610|      0|                    }
31611|      0|                    if ((int)c == 12) {
31612|      0|                        goto case_12;
31613|      0|                    }
31614|      0|                    if ((int)c == 10) {
31615|      0|                        goto case_10;
31616|      0|                    }
31617|      0|                    if ((int)c == 13) {
31618|      0|                        goto case_13;
31619|      0|                    }
31620|      0|                    if ((int)c == 9) {
31621|      0|                        goto case_9;
31622|      0|                    }
31623|      0|                    if ((int)c == 11) {
31624|      0|                        goto case_11;
31625|      0|                    }
31626|      0|                    if ((int)c == 92) {
31627|      0|                        goto case_92;
31628|      0|                    }
31629|      0|                    if ((int)c == 123) {
31630|      0|                        goto case_123;
31631|      0|                    }
31632|      0|                    if ((int)c == 125) {
31633|      0|                        goto case_123;
31634|      0|                    }
31635|      0|                    if ((int)c == 35) {
31636|      0|                        goto case_35;
31637|      0|                    }
31638|      0|                    if ((int)c == 126) {
31639|      0|                        goto case_35;
31640|      0|                    }
31641|      0|                    if ((int)c == 32) {
31642|      0|                        goto case_32;
31643|      0|                    }
31644|      0|                    if ((int)c == 33) {
31645|      0|                        goto case_32;
31646|      0|                    }
31647|      0|                    if ((int)c == 34) {
31648|      0|                        goto case_32;
31649|      0|                    }
31650|      0|                    if ((int)c == 36) {
31651|      0|                        goto case_32;
31652|      0|                    }
31653|      0|                    if ((int)c == 38) {
31654|      0|                        goto case_32;
31655|      0|                    }
31656|      0|                    if ((int)c == 40) {
31657|      0|                        goto case_32;
31658|      0|                    }
31659|      0|                    if ((int)c == 41) {
31660|      0|                        goto case_32;
31661|      0|                    }
31662|      0|                    if ((int)c == 42) {
31663|      0|                        goto case_32;
31664|      0|                    }
31665|      0|                    if ((int)c == 59) {
31666|      0|                        goto case_32;
31667|      0|                    }
31668|      0|                    if ((int)c == 60) {
31669|      0|                        goto case_32;
31670|      0|                    }
31671|      0|                    if ((int)c == 61) {
31672|      0|                        goto case_32;
31673|      0|                    }
31674|      0|                    if ((int)c == 62) {
31675|      0|                        goto case_32;
31676|      0|                    }
31677|      0|                    if ((int)c == 91) {
31678|      0|                        goto case_32;
31679|      0|                    }
31680|      0|                    if ((int)c == 94) {
31681|      0|                        goto case_32;
31682|      0|                    }
31683|      0|                    if ((int)c == 96) {
31684|      0|                        goto case_32;
31685|      0|                    }
31686|      0|                    if ((int)c == 124) {
31687|      0|                        goto case_32;
31688|      0|                    }
31689|      0|                    if ((int)c == 39) {
31690|      0|                        goto case_39___0;
31691|      0|                    }
31692|      0|                    if ((int)c == 37) {
31693|      0|                        goto case_37;
31694|      0|                    }
31695|      0|                    if ((int)c == 43) {
31696|      0|                        goto case_37;
31697|      0|                    }
31698|      0|                    if ((int)c == 44) {
31699|      0|                        goto case_37;
31700|      0|                    }
31701|      0|                    if ((int)c == 45) {
31702|      0|                        goto case_37;
31703|      0|                    }
31704|      0|                    if ((int)c == 46) {
31705|      0|                        goto case_37;
31706|      0|                    }
31707|      0|                    if ((int)c == 47) {
31708|      0|                        goto case_37;
31709|      0|                    }
31710|      0|                    if ((int)c == 48) {
31711|      0|                        goto case_37;
31712|      0|                    }
31713|      0|                    if ((int)c == 49) {
31714|      0|                        goto case_37;
31715|      0|                    }
31716|      0|                    if ((int)c == 50) {
31717|      0|                        goto case_37;
31718|      0|                    }
31719|      0|                    if ((int)c == 51) {
31720|      0|                        goto case_37;
31721|      0|                    }
31722|      0|                    if ((int)c == 52) {
31723|      0|                        goto case_37;
31724|      0|                    }
31725|      0|                    if ((int)c == 53) {
31726|      0|                        goto case_37;
31727|      0|                    }
31728|      0|                    if ((int)c == 54) {
31729|      0|                        goto case_37;
31730|      0|                    }
31731|      0|                    if ((int)c == 55) {
31732|      0|                        goto case_37;
31733|      0|                    }
31734|      0|                    if ((int)c == 56) {
31735|      0|                        goto case_37;
31736|      0|                    }
31737|      0|                    if ((int)c == 57) {
31738|      0|                        goto case_37;
31739|      0|                    }
31740|      0|                    if ((int)c == 58) {
31741|      0|                        goto case_37;
31742|      0|                    }
31743|      0|                    if ((int)c == 65) {
31744|      0|                        goto case_37;
31745|      0|                    }
31746|      0|                    if ((int)c == 66) {
31747|      0|                        goto case_37;
31748|      0|                    }
31749|      0|                    if ((int)c == 67) {
31750|      0|                        goto case_37;
31751|      0|                    }
31752|      0|                    if ((int)c == 68) {
31753|      0|                        goto case_37;
31754|      0|                    }
31755|      0|                    if ((int)c == 69) {
31756|      0|                        goto case_37;
31757|      0|                    }
31758|      0|                    if ((int)c == 70) {
31759|      0|                        goto case_37;
31760|      0|                    }
31761|      0|                    if ((int)c == 71) {
31762|      0|                        goto case_37;
31763|      0|                    }
31764|      0|                    if ((int)c == 72) {
31765|      0|                        goto case_37;
31766|      0|                    }
31767|      0|                    if ((int)c == 73) {
31768|      0|                        goto case_37;
31769|      0|                    }
31770|      0|                    if ((int)c == 74) {
31771|      0|                        goto case_37;
31772|      0|                    }
31773|      0|                    if ((int)c == 75) {
31774|      0|                        goto case_37;
31775|      0|                    }
31776|      0|                    if ((int)c == 76) {
31777|      0|                        goto case_37;
31778|      0|                    }
31779|      0|                    if ((int)c == 77) {
31780|      0|                        goto case_37;
31781|      0|                    }
31782|      0|                    if ((int)c == 78) {
31783|      0|                        goto case_37;
31784|      0|                    }
31785|      0|                    if ((int)c == 79) {
31786|      0|                        goto case_37;
31787|      0|                    }
31788|      0|                    if ((int)c == 80) {
31789|      0|                        goto case_37;
31790|      0|                    }
31791|      0|                    if ((int)c == 81) {
31792|      0|                        goto case_37;
31793|      0|                    }
31794|      0|                    if ((int)c == 82) {
31795|      0|                        goto case_37;
31796|      0|                    }
31797|      0|                    if ((int)c == 83) {
31798|      0|                        goto case_37;
31799|      0|                    }
31800|      0|                    if ((int)c == 84) {
31801|      0|                        goto case_37;
31802|      0|                    }
31803|      0|                    if ((int)c == 85) {
31804|      0|                        goto case_37;
31805|      0|                    }
31806|      0|                    if ((int)c == 86) {
31807|      0|                        goto case_37;
31808|      0|                    }
31809|      0|                    if ((int)c == 87) {
31810|      0|                        goto case_37;
31811|      0|                    }
31812|      0|                    if ((int)c == 88) {
31813|      0|                        goto case_37;
31814|      0|                    }
31815|      0|                    if ((int)c == 89) {
31816|      0|                        goto case_37;
31817|      0|                    }
31818|      0|                    if ((int)c == 90) {
31819|      0|                        goto case_37;
31820|      0|                    }
31821|      0|                    if ((int)c == 93) {
31822|      0|                        goto case_37;
31823|      0|                    }
31824|      0|                    if ((int)c == 95) {
31825|      0|                        goto case_37;
31826|      0|                    }
31827|      0|                    if ((int)c == 97) {
31828|      0|                        goto case_37;
31829|      0|                    }
31830|      0|                    if ((int)c == 98) {
31831|      0|                        goto case_37;
31832|      0|                    }
31833|      0|                    if ((int)c == 99) {
31834|      0|                        goto case_37;
31835|      0|                    }
31836|      0|                    if ((int)c == 100) {
31837|      0|                        goto case_37;
31838|      0|                    }
31839|      0|                    if ((int)c == 101) {
31840|      0|                        goto case_37;
31841|      0|                    }
31842|      0|                    if ((int)c == 102) {
31843|      0|                        goto case_37;
31844|      0|                    }
31845|      0|                    if ((int)c == 103) {
31846|      0|                        goto case_37;
31847|      0|                    }
31848|      0|                    if ((int)c == 104) {
31849|      0|                        goto case_37;
31850|      0|                    }
31851|      0|                    if ((int)c == 105) {
31852|      0|                        goto case_37;
31853|      0|                    }
31854|      0|                    if ((int)c == 106) {
31855|      0|                        goto case_37;
31856|      0|                    }
31857|      0|                    if ((int)c == 107) {
31858|      0|                        goto case_37;
31859|      0|                    }
31860|      0|                    if ((int)c == 108) {
31861|      0|                        goto case_37;
31862|      0|                    }
31863|      0|                    if ((int)c == 109) {
31864|      0|                        goto case_37;
31865|      0|                    }
31866|      0|                    if ((int)c == 110) {
31867|      0|                        goto case_37;
31868|      0|                    }
31869|      0|                    if ((int)c == 111) {
31870|      0|                        goto case_37;
31871|      0|                    }
31872|      0|                    if ((int)c == 112) {
31873|      0|                        goto case_37;
31874|      0|                    }
31875|      0|                    if ((int)c == 113) {
31876|      0|                        goto case_37;
31877|      0|                    }
31878|      0|                    if ((int)c == 114) {
31879|      0|                        goto case_37;
31880|      0|                    }
31881|      0|                    if ((int)c == 115) {
31882|      0|                        goto case_37;
31883|      0|                    }
31884|      0|                    if ((int)c == 116) {
31885|      0|                        goto case_37;
31886|      0|                    }
31887|      0|                    if ((int)c == 117) {
31888|      0|                        goto case_37;
31889|      0|                    }
31890|      0|                    if ((int)c == 118) {
31891|      0|                        goto case_37;
31892|      0|                    }
31893|      0|                    if ((int)c == 119) {
31894|      0|                        goto case_37;
31895|      0|                    }
31896|      0|                    if ((int)c == 120) {
31897|      0|                        goto case_37;
31898|      0|                    }
31899|      0|                    if ((int)c == 121) {
31900|      0|                        goto case_37;
31901|      0|                    }
31902|      0|                    if ((int)c == 122) {
31903|      0|                        goto case_37;
31904|      0|                    }
31905|      0|                    goto switch_default___2;
31906|      0|case_0: /* CIL Label */
31907|      0|                    if (backslash_escapes) {
31908|      0|                        {
31909|      0|                            while (1) {
31910|      0|while_continue___5: /* CIL Label */
31911|      0|                                ;
31912|      0|                                if (len < buffersize) {
31913|      0|                                    *(buffer___2 + len) = (char)'\\';
31914|      0|                                }
31915|      0|                                len++;
31916|      0|                                goto while_break___5;
31917|      0|                            }
31918|      0|while_break___5: /* CIL Label */
31919|      0|                            ;
31920|      0|                        }
31921|      0|                        {
31922|      0|                            while (1) {
31923|      0|while_continue___6: /* CIL Label */
31924|      0|                                ;
31925|      0|                                if (len < buffersize) {
31926|      0|                                    *(buffer___2 + len) = (char)'0';
31927|      0|                                }
31928|      0|                                len++;
31929|      0|                                goto while_break___6;
31930|      0|                            }
31931|      0|while_break___6: /* CIL Label */
31932|      0|                            ;
31933|      0|                        }
31934|      0|                        {
31935|      0|                            while (1) {
31936|      0|while_continue___7: /* CIL Label */
31937|      0|                                ;
31938|      0|                                if (len < buffersize) {
31939|      0|                                    *(buffer___2 + len) = (char)'0';
31940|      0|                                }
31941|      0|                                len++;
31942|      0|                                goto while_break___7;
31943|      0|                            }
31944|      0|while_break___7: /* CIL Label */
31945|      0|                            ;
31946|      0|                        }
31947|      0|                        c = (unsigned char)'0';
31948|      0|                    }
31949|      0|                    goto switch_break___0;
31950|      0|case_63 : { /* CIL Label */
31951|      0|                        if ((unsigned int)quoting_style == 1U) {
31952|      0|                            goto case_1;
31953|      0|                        }
31954|      0|                        if ((unsigned int)quoting_style == 3U) {
31955|      0|                            goto case_3___0;
31956|      0|                        }
31957|      0|                        goto switch_default___0;
31958|      0|case_1: /* CIL Label */
31959|      0|                        goto use_shell_always_quoting_style;
31960|      0|case_3___0: /* CIL Label */
31961|      0|                        if (i + 2UL < argsize) {
31962|      0|                            if ((int const) * (arg + (i + 1UL)) == 63) {
31963|      0|                                {
31964|      0|                                    if ((int const) * (arg + (i + 2UL)) == 33) {
31965|      0|                                        goto case_33;
31966|      0|                                    }
31967|      0|                                    if ((int const) * (arg + (i + 2UL)) == 39) {
31968|      0|                                        goto case_33;
31969|      0|                                    }
31970|      0|                                    if ((int const) * (arg + (i + 2UL)) == 40) {
31971|      0|                                        goto case_33;
31972|      0|                                    }
31973|      0|                                    if ((int const) * (arg + (i + 2UL)) == 41) {
31974|      0|                                        goto case_33;
31975|      0|                                    }
31976|      0|                                    if ((int const) * (arg + (i + 2UL)) == 45) {
31977|      0|                                        goto case_33;
31978|      0|                                    }
31979|      0|                                    if ((int const) * (arg + (i + 2UL)) == 47) {
31980|      0|                                        goto case_33;
31981|      0|                                    }
31982|      0|                                    if ((int const) * (arg + (i + 2UL)) == 60) {
31983|      0|                                        goto case_33;
31984|      0|                                    }
31985|      0|                                    if ((int const) * (arg + (i + 2UL)) == 61) {
31986|      0|                                        goto case_33;
31987|      0|                                    }
31988|      0|                                    if ((int const) * (arg + (i + 2UL)) == 62) {
31989|      0|                                        goto case_33;
31990|      0|                                    }
31991|      0|                                    goto switch_break___2;
31992|      0|case_33: /* CIL Label */
31993|      0|case_39: /* CIL Label */
31994|      0|case_40: /* CIL Label */
31995|      0|case_41: /* CIL Label */
31996|      0|case_45: /* CIL Label */
31997|      0|case_47: /* CIL Label */
31998|      0|case_60: /* CIL Label */
31999|      0|case_61: /* CIL Label */
32000|      0|case_62: /* CIL Label */
32001|      0|                                    c = (unsigned char)*(arg + (i + 2UL));
32002|      0|                                    i += 2UL;
32003|      0|                                    {
32004|      0|                                        while (1) {
32005|      0|while_continue___8: /* CIL Label */
32006|      0|                                            ;
32007|      0|                                            if (len < buffersize) {
32008|      0|                                                *(buffer___2 + len) = (char)'?';
32009|      0|                                            }
32010|      0|                                            len++;
32011|      0|                                            goto while_break___8;
32012|      0|                                        }
32013|      0|while_break___8: /* CIL Label */
32014|      0|                                        ;
32015|      0|                                    }
32016|      0|                                    {
32017|      0|                                        while (1) {
32018|      0|while_continue___9: /* CIL Label */
32019|      0|                                            ;
32020|      0|                                            if (len < buffersize) {
32021|      0|                                                *(buffer___2 + len) = (char)'\\';
32022|      0|                                            }
32023|      0|                                            len++;
32024|      0|                                            goto while_break___9;
32025|      0|                                        }
32026|      0|while_break___9: /* CIL Label */
32027|      0|                                        ;
32028|      0|                                    }
32029|      0|                                    {
32030|      0|                                        while (1) {
32031|      0|while_continue___10: /* CIL Label */
32032|      0|                                            ;
32033|      0|                                            if (len < buffersize) {
32034|      0|                                                *(buffer___2 + len) = (char)'?';
32035|      0|                                            }
32036|      0|                                            len++;
32037|      0|                                            goto while_break___10;
32038|      0|                                        }
32039|      0|while_break___10: /* CIL Label */
32040|      0|                                        ;
32041|      0|                                    }
32042|      0|                                    goto switch_break___2;
32043|      0|switch_break___2: /* CIL Label */
32044|      0|                                    ;
32045|      0|                                }
32046|      0|                            }
32047|      0|                        }
32048|      0|                        goto switch_break___1;
32049|      0|switch_default___0: /* CIL Label */
32050|      0|                        goto switch_break___1;
32051|      0|switch_break___1: /* CIL Label */
32052|      0|                        ;
32053|      0|                    }
32054|      0|                    goto switch_break___0;
32055|      0|case_7: /* CIL Label */
32056|      0|                    esc = (unsigned char)'a';
32057|      0|                    goto c_escape;
32058|      0|case_8: /* CIL Label */
32059|      0|                    esc = (unsigned char)'b';
32060|      0|                    goto c_escape;
32061|      0|case_12: /* CIL Label */
32062|      0|                    esc = (unsigned char)'f';
32063|      0|                    goto c_escape;
32064|      0|case_10: /* CIL Label */
32065|      0|                    esc = (unsigned char)'n';
32066|      0|                    goto c_and_shell_escape;
32067|      0|case_13: /* CIL Label */
32068|      0|                    esc = (unsigned char)'r';
32069|      0|                    goto c_and_shell_escape;
32070|      0|case_9: /* CIL Label */
32071|      0|                    esc = (unsigned char)'t';
32072|      0|                    goto c_and_shell_escape;
32073|      0|case_11: /* CIL Label */
32074|      0|                    esc = (unsigned char)'v';
32075|      0|                    goto c_escape;
32076|      0|case_92: /* CIL Label */
32077|      0|                    esc = c;
32078|      0|                    goto c_and_shell_escape;
32079|      0|c_and_shell_escape:
32080|      0|                    if ((unsigned int)quoting_style == 1U) {
32081|      0|                        goto use_shell_always_quoting_style;
32082|      0|                    }
32083|      0|c_escape:
32084|      0|                    if (backslash_escapes) {
32085|      0|                        c = esc;
32086|      0|                        goto store_escape;
32087|      0|                    }
32088|      0|                    goto switch_break___0;
32089|      0|case_123: /* CIL Label */
32090|      0|case_125: /* CIL Label */
32091|      0|                    if (argsize == 0xffffffffffffffffUL) {
32092|      0|                        tmp___8 = (int const) * (arg + 1) == 0;
32093|      0|                    }
32094|      0|                    else {
32095|      0|                        tmp___8 = argsize == 1UL;
32096|      0|                    }
32097|      0|                    if (!tmp___8) {
32098|      0|                        goto switch_break___0;
32099|      0|                    }
32100|      0|case_35:  /* CIL Label */
32101|      0|case_126: /* CIL Label */
32102|      0|                    if (i != 0UL) {
32103|      0|                        goto switch_break___0;
32104|      0|                    }
32105|      0|case_32:     /* CIL Label */
32106|      0|case_33___0: /* CIL Label */
32107|      0|case_34:     /* CIL Label */
32108|      0|case_36:     /* CIL Label */
32109|      0|case_38:     /* CIL Label */
32110|      0|case_40___0: /* CIL Label */
32111|      0|case_41___0: /* CIL Label */
32112|      0|case_42:     /* CIL Label */
32113|      0|case_59:     /* CIL Label */
32114|      0|case_60___0: /* CIL Label */
32115|      0|case_61___0: /* CIL Label */
32116|      0|case_62___0: /* CIL Label */
32117|      0|case_91:     /* CIL Label */
32118|      0|case_94:     /* CIL Label */
32119|      0|case_96:     /* CIL Label */
32120|      0|case_124:    /* CIL Label */
32121|      0|                    if ((unsigned int)quoting_style == 1U) {
32122|      0|                        goto use_shell_always_quoting_style;
32123|      0|                    }
32124|      0|                    goto switch_break___0;
32125|      0|case_39___0 : { /* CIL Label */
32126|      0|                        if ((unsigned int)quoting_style == 1U) {
32127|      0|                            goto case_1___0;
32128|      0|                        }
32129|      0|                        if ((unsigned int)quoting_style == 2U) {
32130|      0|                            goto case_2___0;
32131|      0|                        }
32132|      0|                        goto switch_default___1;
32133|      0|case_1___0: /* CIL Label */
32134|      0|                        goto use_shell_always_quoting_style;
32135|      0|case_2___0 : { /* CIL Label */
32136|      0|                            while (1) {
32137|      0|while_continue___11: /* CIL Label */
32138|      0|                                ;
32139|      0|                                if (len < buffersize) {
32140|      0|                                    *(buffer___2 + len) = (char)'\'';
32141|      0|                                }
32142|      0|                                len++;
32143|      0|                                goto while_break___11;
32144|      0|                            }
32145|      0|while_break___11: /* CIL Label */
32146|      0|                            ;
32147|      0|                        }
32148|      0|                        {
32149|      0|                            while (1) {
32150|      0|while_continue___12: /* CIL Label */
32151|      0|                                ;
32152|      0|                                if (len < buffersize) {
32153|      0|                                    *(buffer___2 + len) = (char)'\\';
32154|      0|                                }
32155|      0|                                len++;
32156|      0|                                goto while_break___12;
32157|      0|                            }
32158|      0|while_break___12: /* CIL Label */
32159|      0|                            ;
32160|      0|                        }
32161|      0|                        {
32162|      0|                            while (1) {
32163|      0|while_continue___13: /* CIL Label */
32164|      0|                                ;
32165|      0|                                if (len < buffersize) {
32166|      0|                                    *(buffer___2 + len) = (char)'\'';
32167|      0|                                }
32168|      0|                                len++;
32169|      0|                                goto while_break___13;
32170|      0|                            }
32171|      0|while_break___13: /* CIL Label */
32172|      0|                            ;
32173|      0|                        }
32174|      0|                        goto switch_break___3;
32175|      0|switch_default___1: /* CIL Label */
32176|      0|                        goto switch_break___3;
32177|      0|switch_break___3: /* CIL Label */
32178|      0|                        ;
32179|      0|                    }
32180|      0|                    goto switch_break___0;
32181|      0|case_37:     /* CIL Label */
32182|      0|case_43:     /* CIL Label */
32183|      0|case_44:     /* CIL Label */
32184|      0|case_45___0: /* CIL Label */
32185|      0|case_46:     /* CIL Label */
32186|      0|case_47___0: /* CIL Label */
32187|      0|case_48:     /* CIL Label */
32188|      0|case_49:     /* CIL Label */
32189|      0|case_50:     /* CIL Label */
32190|      0|case_51:     /* CIL Label */
32191|      0|case_52:     /* CIL Label */
32192|      0|case_53:     /* CIL Label */
32193|      0|case_54:     /* CIL Label */
32194|      0|case_55:     /* CIL Label */
32195|      0|case_56:     /* CIL Label */
32196|      0|case_57:     /* CIL Label */
32197|      0|case_58:     /* CIL Label */
32198|      0|case_65:     /* CIL Label */
32199|      0|case_66:     /* CIL Label */
32200|      0|case_67:     /* CIL Label */
32201|      0|case_68:     /* CIL Label */
32202|      0|case_69:     /* CIL Label */
32203|      0|case_70:     /* CIL Label */
32204|      0|case_71:     /* CIL Label */
32205|      0|case_72:     /* CIL Label */
32206|      0|case_73:     /* CIL Label */
32207|      0|case_74:     /* CIL Label */
32208|      0|case_75:     /* CIL Label */
32209|      0|case_76:     /* CIL Label */
32210|      0|case_77:     /* CIL Label */
32211|      0|case_78:     /* CIL Label */
32212|      0|case_79:     /* CIL Label */
32213|      0|case_80:     /* CIL Label */
32214|      0|case_81:     /* CIL Label */
32215|      0|case_82:     /* CIL Label */
32216|      0|case_83:     /* CIL Label */
32217|      0|case_84:     /* CIL Label */
32218|      0|case_85:     /* CIL Label */
32219|      0|case_86:     /* CIL Label */
32220|      0|case_87:     /* CIL Label */
32221|      0|case_88:     /* CIL Label */
32222|      0|case_89:     /* CIL Label */
32223|      0|case_90:     /* CIL Label */
32224|      0|case_93:     /* CIL Label */
32225|      0|case_95:     /* CIL Label */
32226|      0|case_97:     /* CIL Label */
32227|      0|case_98:     /* CIL Label */
32228|      0|case_99:     /* CIL Label */
32229|      0|case_100:    /* CIL Label */
32230|      0|case_101:    /* CIL Label */
32231|      0|case_102:    /* CIL Label */
32232|      0|case_103:    /* CIL Label */
32233|      0|case_104:    /* CIL Label */
32234|      0|case_105:    /* CIL Label */
32235|      0|case_106:    /* CIL Label */
32236|      0|case_107:    /* CIL Label */
32237|      0|case_108:    /* CIL Label */
32238|      0|case_109:    /* CIL Label */
32239|      0|case_110:    /* CIL Label */
32240|      0|case_111:    /* CIL Label */
32241|      0|case_112:    /* CIL Label */
32242|      0|case_113:    /* CIL Label */
32243|      0|case_114:    /* CIL Label */
32244|      0|case_115:    /* CIL Label */
32245|      0|case_116:    /* CIL Label */
32246|      0|case_117:    /* CIL Label */
32247|      0|case_118:    /* CIL Label */
32248|      0|case_119:    /* CIL Label */
32249|      0|case_120:    /* CIL Label */
32250|      0|case_121:    /* CIL Label */
32251|      0|case_122:    /* CIL Label */
32252|      0|                    goto switch_break___0;
32253|      0|switch_default___2: /* CIL Label */
32254|      0|                    if (unibyte_locale) {
32255|      0|                        {
32256|      0|                            m = (size_t)1;
32257|      0|                            tmp___3 = __ctype_b_loc();
32258|      0|                            printable = (int)((int const) * (*tmp___3 + (int)c) & 16384);
32259|      0|                        }
32260|      0|                    }
32261|      0|                    else {
32262|      0|                        {
32263|      0|                            memset((void *)(&mbstate), 0, sizeof(mbstate));
32264|      0|                            m = (size_t)0;
32265|      0|                            printable = 1;
32266|      0|                        }
32267|      0|                        if (argsize == 0xffffffffffffffffUL) {
32268|      0|                            {
32269|      0|                                argsize = strlen(arg);
32270|      0|                            }
32271|      0|                        }
32272|      0|                        {
32273|      0|                            while (1) {
32274|      0|while_continue___14: /* CIL Label */
32275|      0|                                ;
32276|      0|                                {
32277|      0|                                    tmp___4 =
32278|      0|                                        mbrtowc((wchar_t * /* __restrict  */)(&w),
32279|      0|                                                (char const * /* __restrict  */)(arg + (i + m)),
32280|      0|                                                argsize - (i + m),
32281|      0|                                                (mbstate_t * /* __restrict  */)(&mbstate));
32282|      0|                                    bytes = tmp___4;
32283|      0|                                }
32284|      0|                                if (bytes == 0UL) {
32285|      0|                                    goto while_break___14;
32286|      0|                                }
32287|      0|                                else {
32288|      0|                                    if (bytes == 0xffffffffffffffffUL) {
32289|      0|                                        printable = 0;
32290|      0|                                        goto while_break___14;
32291|      0|                                    }
32292|      0|                                    else {
32293|      0|                                        if (bytes == 0xfffffffffffffffeUL) {
32294|      0|                                            printable = 0;
32295|      0|                                            {
32296|      0|                                                while (1) {
32297|      0|while_continue___15: /* CIL Label */
32298|      0|                                                    ;
32299|      0|                                                    if (i + m < argsize) {
32300|      0|                                                        if (!*(arg + (i + m))) {
32301|      0|                                                            goto while_break___15;
32302|      0|                                                        }
32303|      0|                                                    }
32304|      0|                                                    else {
32305|      0|                                                        goto while_break___15;
32306|      0|                                                    }
32307|      0|                                                    m++;
32308|      0|                                                }
32309|      0|while_break___15: /* CIL Label */
32310|      0|                                                ;
32311|      0|                                            }
32312|      0|                                            goto while_break___14;
32313|      0|                                        }
32314|      0|                                        else {
32315|      0|                                            if ((unsigned int)quoting_style == 1U) {
32316|      0|                                                j = (size_t)1;
32317|      0|                                                {
32318|      0|                                                    while (1) {
32319|      0|while_continue___16: /* CIL Label */
32320|      0|                                                        ;
32321|      0|                                                        if (!(j < bytes)) {
32322|      0|                                                            goto while_break___16;
32323|      0|                                                        }
32324|      0|                                                        {
32325|      0|                                                            if ((int const) * (arg + ((i + m) + j)) == 91) {
32326|      0|                                                                goto case_91___0;
32327|      0|                                                            }
32328|      0|                                                            if ((int const) * (arg + ((i + m) + j)) == 92) {
32329|      0|                                                                goto case_91___0;
32330|      0|                                                            }
32331|      0|                                                            if ((int const) * (arg + ((i + m) + j)) == 94) {
32332|      0|                                                                goto case_91___0;
32333|      0|                                                            }
32334|      0|                                                            if ((int const) * (arg + ((i + m) + j)) == 96) {
32335|      0|                                                                goto case_91___0;
32336|      0|                                                            }
32337|      0|                                                            if ((int const) * (arg + ((i + m) + j)) == 124) {
32338|      0|                                                                goto case_91___0;
32339|      0|                                                            }
32340|      0|                                                            goto switch_break___4;
32341|      0|case_91___0:  /* CIL Label */
32342|      0|case_92___0:  /* CIL Label */
32343|      0|case_94___0:  /* CIL Label */
32344|      0|case_96___0:  /* CIL Label */
32345|      0|case_124___0: /* CIL Label */
32346|      0|                                                            goto use_shell_always_quoting_style;
32347|      0|switch_break___4: /* CIL Label */
32348|      0|                                                            ;
32349|      0|                                                        }
32350|      0|                                                        j++;
32351|      0|                                                    }
32352|      0|while_break___16: /* CIL Label */
32353|      0|                                                    ;
32354|      0|                                                }
32355|      0|                                            }
32356|      0|                                            {
32357|      0|                                                tmp___5 = iswprint((wint_t)w);
32358|      0|                                            }
32359|      0|                                            if (!tmp___5) {
32360|      0|                                                printable = 0;
32361|      0|                                            }
32362|      0|                                            m += bytes;
32363|      0|                                        }
32364|      0|                                    }
32365|      0|                                }
32366|      0|                                {
32367|      0|                                    tmp___6 = mbsinit((mbstate_t const *)(&mbstate));
32368|      0|                                }
32369|      0|                                if (tmp___6) {
32370|      0|                                    goto while_break___14;
32371|      0|                                }
32372|      0|                            }
32373|      0|while_break___14: /* CIL Label */
32374|      0|                            ;
32375|      0|                        }
32376|      0|                    }
32377|      0|                    if (1UL < m) {
32378|      0|                        goto _L___3;
32379|      0|                    }
32380|      0|                    else {
32381|      0|                        if (backslash_escapes) {
32382|      0|                            if (!printable) {
32383|      0|_L___3: /* CIL Label */
32384|      0|                                ilim = i + m;
32385|      0|                                {
32386|      0|                                    while (1) {
32387|      0|while_continue___17: /* CIL Label */
32388|      0|                                        ;
32389|      0|                                        if (backslash_escapes) {
32390|      0|                                            if (!printable) {
32391|      0|                                                {
32392|      0|                                                    while (1) {
32393|      0|while_continue___18: /* CIL Label */
32394|      0|                                                        ;
32395|      0|                                                        if (len < buffersize) {
32396|      0|                                                            *(buffer___2 + len) = (char)'\\';
32397|      0|                                                        }
32398|      0|                                                        len++;
32399|      0|                                                        goto while_break___18;
32400|      0|                                                    }
32401|      0|while_break___18: /* CIL Label */
32402|      0|                                                    ;
32403|      0|                                                }
32404|      0|                                                {
32405|      0|                                                    while (1) {
32406|      0|while_continue___19: /* CIL Label */
32407|      0|                                                        ;
32408|      0|                                                        if (len < buffersize) {
32409|      0|                                                            *(buffer___2 + len) = (char)(48 + ((int)c >> 6));
32410|      0|                                                        }
32411|      0|                                                        len++;
32412|      0|                                                        goto while_break___19;
32413|      0|                                                    }
32414|      0|while_break___19: /* CIL Label */
32415|      0|                                                    ;
32416|      0|                                                }
32417|      0|                                                {
32418|      0|                                                    while (1) {
32419|      0|while_continue___20: /* CIL Label */
32420|      0|                                                        ;
32421|      0|                                                        if (len < buffersize) {
32422|      0|                                                            *(buffer___2 + len) =
32423|      0|                                                                (char)(48 + (((int)c >> 3) & 7));
32424|      0|                                                        }
32425|      0|                                                        len++;
32426|      0|                                                        goto while_break___20;
32427|      0|                                                    }
32428|      0|while_break___20: /* CIL Label */
32429|      0|                                                    ;
32430|      0|                                                }
32431|      0|                                                c = (unsigned char)(48 + ((int)c & 7));
32432|      0|                                            }
32433|      0|                                        }
32434|      0|                                        if (ilim <= i + 1UL) {
32435|      0|                                            goto while_break___17;
32436|      0|                                        }
32437|      0|                                        {
32438|      0|                                            while (1) {
32439|      0|while_continue___21: /* CIL Label */
32440|      0|                                                ;
32441|      0|                                                if (len < buffersize) {
32442|      0|                                                    *(buffer___2 + len) = (char)c;
32443|      0|                                                }
32444|      0|                                                len++;
32445|      0|                                                goto while_break___21;
32446|      0|                                            }
32447|      0|while_break___21: /* CIL Label */
32448|      0|                                            ;
32449|      0|                                        }
32450|      0|                                        i++;
32451|      0|                                        c = (unsigned char)*(arg + i);
32452|      0|                                    }
32453|      0|while_break___17: /* CIL Label */
32454|      0|                                    ;
32455|      0|                                }
32456|      0|                                goto store_c;
32457|      0|                            }
32458|      0|                        }
32459|      0|                    }
32460|      0|switch_break___0: /* CIL Label */
32461|      0|                    ;
32462|      0|                }
32463|      0|                if (backslash_escapes) {
32464|      0|                    if (!(o___0->quote_these_too[(unsigned long)c / (sizeof(int) * 8UL)] &
32465|      0|                            (1 << (unsigned long)c % (sizeof(int) * 8UL)))) {
32466|      0|                        goto store_c;
32467|      0|                    }
32468|      0|                }
32469|      0|                else {
32470|      0|                    goto store_c;
32471|      0|                }
32472|      0|store_escape : {
32473|      0|                    while (1) {
32474|      0|while_continue___22: /* CIL Label */
32475|      0|                        ;
32476|      0|                        if (len < buffersize) {
32477|      0|                            *(buffer___2 + len) = (char)'\\';
32478|      0|                        }
32479|      0|                        len++;
32480|      0|                        goto while_break___22;
32481|      0|                    }
32482|      0|while_break___22: /* CIL Label */
32483|      0|                    ;
32484|      0|                }
32485|      0|store_c : {
32486|      0|                    while (1) {
32487|      0|while_continue___23: /* CIL Label */
32488|      0|                        ;
32489|      0|                        if (len < buffersize) {
32490|      0|                            *(buffer___2 + len) = (char)c;
32491|      0|                        }
32492|      0|                        len++;
32493|      0|                        goto while_break___23;
32494|      0|                    }
32495|      0|while_break___23: /* CIL Label */
32496|      0|                    ;
32497|      0|                }
32498|      0|                i++;
32499|      0|            }
32500|      0|while_break___3: /* CIL Label */
32501|      0|            ;
32502|      0|        }
32503|      0|        if (i == 0UL) {
32504|      0|            if ((unsigned int)quoting_style == 1U) {
32505|      0|                goto use_shell_always_quoting_style;
32506|      0|            }
32507|      0|        }
32508|      0|        if (quote_string) {
32509|      0|            {
32510|      0|                while (1) {
32511|      0|while_continue___24: /* CIL Label */
32512|      0|                    ;
32513|      0|                    if (!*quote_string) {
32514|      0|                        goto while_break___24;
32515|      0|                    }
32516|      0|                    {
32517|      0|                        while (1) {
32518|      0|while_continue___25: /* CIL Label */
32519|      0|                            ;
32520|      0|                            if (len < buffersize) {
32521|      0|                                *(buffer___2 + len) = (char)*quote_string;
32522|      0|                            }
32523|      0|                            len++;
32524|      0|                            goto while_break___25;
32525|      0|                        }
32526|      0|while_break___25: /* CIL Label */
32527|      0|                        ;
32528|      0|                    }
32529|      0|                    quote_string++;
32530|      0|                }
32531|      0|while_break___24: /* CIL Label */
32532|      0|                ;
32533|      0|            }
32534|      0|        }
32535|      0|        if (len < buffersize) {
32536|      0|            *(buffer___2 + len) = (char)'\000';
32537|      0|        }
32538|      0|        return (len);
32539|      0|use_shell_always_quoting_style : {
32540|      0|            tmp___7 = quotearg_buffer_restyled(buffer___2, buffersize, arg, argsize,
32541|      0|                                               (enum quoting_style)2, o___0);
32542|      0|        }
32543|      0|        return (tmp___7);
32544|      0|    }
32545|      0|}
32546|       |size_t quotearg_buffer(char *buffer___2, size_t buffersize, char const *arg,
32547|       |                       size_t argsize, struct quoting_options const *o___0)
32548|      0|{
32549|      0|    struct quoting_options const *p;
32550|      0|    int e;
32551|      0|    int *tmp;
32552|      0|    size_t r;
32553|      0|    size_t tmp___0;
32554|      0|    int *tmp___1;
32555|       |
32556|      0|    {
32557|      0|        if (o___0) {
32558|      0|            p = o___0;
32559|      0|        }
32560|      0|        else {
32561|      0|            p = (struct quoting_options const *)(&default_quoting_options);
32562|      0|        }
32563|      0|        {
32564|      0|            tmp = __errno_location();
32565|      0|            e = *tmp;
32566|      0|            tmp___0 = quotearg_buffer_restyled(buffer___2, buffersize, arg, argsize,
32567|      0|                                               (enum quoting_style)p->style, p);
32568|      0|            r = tmp___0;
32569|      0|            tmp___1 = __errno_location();
32570|      0|            *tmp___1 = e;
32571|      0|        }
32572|      0|        return (r);
32573|      0|    }
32574|      0|}
32575|       |static char slot0[256];
32576|       |static char *quotearg_n_options(int n, char const *arg, size_t argsize,
32577|       |                                struct quoting_options const *options);
32578|       |static unsigned int nslots = 1U;
32579|       |static struct slotvec slotvec0 = {sizeof(slot0), slot0};
32580|       |static struct slotvec *slotvec = &slotvec0;
32581|       |static char *quotearg_n_options(int n, char const *arg, size_t argsize,
32582|       |                                struct quoting_options const *options)
32583|      0|{
32584|      0|    int e;
32585|      0|    int *tmp;
32586|      0|    unsigned int n0;
32587|      0|    unsigned int n1;
32588|      0|    void *tmp___0;
32589|      0|    void *tmp___1;
32590|      0|    size_t size;
32591|      0|    char *val;
32592|      0|    size_t qsize;
32593|      0|    size_t tmp___2;
32594|      0|    void *tmp___3;
32595|      0|    int *tmp___4;
32596|      0|    int tmp___5;
32597|       |
32598|      0|    {
32599|      0|        {
32600|      0|            tmp = __errno_location();
32601|      0|            e = *tmp;
32602|      0|            n0 = (unsigned int)n;
32603|      0|        }
32604|      0|        if (n < 0) {
32605|      0|            {
32606|      0|                abort();
32607|      0|            }
32608|      0|        }
32609|      0|        if (nslots <= n0) {
32610|      0|            n1 = n0 + 1U;
32611|      0|            if (sizeof(ptrdiff_t) <= sizeof(size_t)) {
32612|      0|                tmp___5 = -1;
32613|      0|            }
32614|      0|            else {
32615|      0|                tmp___5 = -2;
32616|      0|            }
32617|      0|            if ((size_t)tmp___5 / sizeof(*slotvec) < (size_t)n1) {
32618|      0|                {
32619|      0|                    xalloc_die();
32620|      0|                }
32621|      0|            }
32622|      0|            if ((unsigned long)slotvec == (unsigned long)(&slotvec0)) {
32623|      0|                {
32624|      0|                    tmp___0 = xmalloc(sizeof(*slotvec));
32625|      0|                    slotvec = (struct slotvec *)tmp___0;
32626|      0|                    *slotvec = slotvec0;
32627|      0|                }
32628|      0|            }
32629|      0|            {
32630|      0|                tmp___1 =
32631|      0|                    xrealloc((void *)slotvec, (unsigned long)n1 * sizeof(*slotvec));
32632|      0|                slotvec = (struct slotvec *)tmp___1;
32633|      0|                memset((void *)(slotvec + nslots), 0,
32634|      0|                       (unsigned long)(n1 - nslots) * sizeof(*slotvec));
32635|      0|                nslots = n1;
32636|      0|            }
32637|      0|        }
32638|      0|        {
32639|      0|            size = (slotvec + n)->size;
32640|      0|            val = (slotvec + n)->val;
32641|      0|            tmp___2 = quotearg_buffer(val, size, arg, argsize, options);
32642|      0|            qsize = tmp___2;
32643|      0|        }
32644|      0|        if (size <= qsize) {
32645|      0|            size = qsize + 1UL;
32646|      0|            (slotvec + n)->size = size;
32647|      0|            if ((unsigned long)val != (unsigned long)(slot0)) {
32648|      0|                {
32649|      0|                    free((void *)val);
32650|      0|                }
32651|      0|            }
32652|      0|            {
32653|      0|                tmp___3 = xmalloc(size);
32654|      0|                val = (char *)tmp___3;
32655|      0|                (slotvec + n)->val = val;
32656|      0|                quotearg_buffer(val, size, arg, argsize, options);
32657|      0|            }
32658|      0|        }
32659|      0|        {
32660|      0|            tmp___4 = __errno_location();
32661|      0|            *tmp___4 = e;
32662|      0|        }
32663|      0|        return (val);
32664|      0|    }
32665|      0|}
32666|       |char *quotearg_n(int n, char const *arg)
32667|      0|{
32668|      0|    char *tmp;
32669|       |
32670|      0|    {
32671|      0|        {
32672|      0|            tmp = quotearg_n_options(
32673|      0|                      n, arg, (size_t)-1,
32674|      0|                      (struct quoting_options const *)(&default_quoting_options));
32675|      0|        }
32676|      0|        return (tmp);
32677|      0|    }
32678|      0|}
32679|       |char *quotearg(char const *arg)
32680|      0|{
32681|      0|    char *tmp;
32682|       |
32683|      0|    {
32684|      0|        {
32685|      0|            tmp = quotearg_n(0, arg);
32686|      0|        }
32687|      0|        return (tmp);
32688|      0|    }
32689|      0|}
32690|       |static struct quoting_options
32691|       |quoting_options_from_style(enum quoting_style style)
32692|      0|{
32693|      0|    struct quoting_options o___0;
32694|      0|    void *__cil_tmp3;
32695|       |
32696|      0|    {
32697|      0|        {
32698|      0|            o___0.style = style;
32699|      0|            memset((void *)(o___0.quote_these_too), 0, sizeof(o___0.quote_these_too));
32700|      0|        }
32701|      0|        return (o___0);
32702|      0|    }
32703|      0|}
32704|       |char *quotearg_n_style(int n, enum quoting_style s, char const *arg)
32705|      0|{
32706|      0|    struct quoting_options o___0;
32707|      0|    struct quoting_options tmp;
32708|      0|    char *tmp___0;
32709|      0|    void *__cil_tmp7;
32710|      0|    void *__cil_tmp8;
32711|       |
32712|      0|    {
32713|      0|        {
32714|      0|            tmp = quoting_options_from_style(s);
32715|      0|            o___0 = tmp;
32716|      0|            tmp___0 = quotearg_n_options(n, arg, (size_t)-1,
32717|      0|                                         (struct quoting_options const *)(&o___0));
32718|      0|        }
32719|      0|        return (tmp___0);
32720|      0|    }
32721|      0|}
32722|       |char *quotearg_char(char const *arg, char ch)
32723|      0|{
32724|      0|    struct quoting_options options;
32725|      0|    char *tmp;
32726|      0|    void *__cil_tmp5;
32727|       |
32728|      0|    {
32729|      0|        {
32730|      0|            options = default_quoting_options;
32731|      0|            set_char_quoting(&options, ch, 1);
32732|      0|            tmp = quotearg_n_options(0, arg, (size_t)-1,
32733|      0|                                     (struct quoting_options const *)(&options));
32734|      0|        }
32735|      0|        return (tmp);
32736|      0|    }
32737|      0|}
32738|       |char *quotearg_colon(char const *arg)
32739|      0|{
32740|      0|    char *tmp;
32741|       |
32742|      0|    {
32743|      0|        {
32744|      0|            tmp = quotearg_char(arg, (char)':');
32745|      0|        }
32746|      0|        return (tmp);
32747|      0|    }
32748|      0|}
32749|       |/* #pragma merger("0","023.quote.o.i","") */
32750|       |/* #pragma merger("0","024.safe-read.o.i","") */
32751|       |extern ssize_t read(int __fd, void *__buf, size_t __nbytes);
32752|       |size_t safe_read(int fd, void *buf, size_t count)
32753|      0|{
32754|      0|    ssize_t result;
32755|      0|    int *tmp;
32756|       |
32757|      0|    {
32758|      0|        if (count > 2147483647UL) {
32759|      0|            count = (size_t)2147475456;
32760|      0|        }
32761|      0|        {
32762|      0|            while (1) {
32763|      0|while_continue: /* CIL Label */
32764|      0|                ;
32765|      0|                {
32766|      0|                    result = read(fd, buf, count);
32767|      0|                }
32768|      0|                if (result < 0L) {
32769|      0|                    {
32770|      0|                        tmp = __errno_location();
32771|      0|                    }
32772|      0|                    if (!(*tmp == 4)) {
32773|      0|                        goto while_break;
32774|      0|                    }
32775|      0|                }
32776|      0|                else {
32777|      0|                    goto while_break;
32778|      0|                }
32779|      0|            }
32780|      0|while_break: /* CIL Label */
32781|      0|            ;
32782|      0|        }
32783|      0|        return ((size_t)result);
32784|      0|    }
32785|      0|}
32786|       |/* #pragma merger("0","025.safe-write.o.i","") */
32787|       |extern ssize_t write(int __fd, void const *__buf, size_t __n);
32788|       |size_t safe_write(int fd, void const *buf, size_t count)
32789|      0|{
32790|      0|    ssize_t result;
32791|      0|    int *tmp;
32792|       |
32793|      0|    {
32794|      0|        if (count > 2147483647UL) {
32795|      0|            count = (size_t)2147475456;
32796|      0|        }
32797|      0|        {
32798|      0|            while (1) {
32799|      0|while_continue: /* CIL Label */
32800|      0|                ;
32801|      0|                {
32802|      0|                    result = write(fd, buf, count);
32803|      0|                }
32804|      0|                if (result < 0L) {
32805|      0|                    {
32806|      0|                        tmp = __errno_location();
32807|      0|                    }
32808|      0|                    if (!(*tmp == 4)) {
32809|      0|                        goto while_break;
32810|      0|                    }
32811|      0|                }
32812|      0|                else {
32813|      0|                    goto while_break;
32814|      0|                }
32815|      0|            }
32816|      0|while_break: /* CIL Label */
32817|      0|            ;
32818|      0|        }
32819|      0|        return ((size_t)result);
32820|      0|    }
32821|      0|}
32822|       |/* #pragma merger("0","026.save-cwd.o.i","") */
32823|       |extern __attribute__((__nothrow__)) int(__attribute__((__leaf__))
32824|       |                                        fchdir)(int __fd);
32825|       |char *xgetcwd(void);
32826|       |static int have_working_fchdir = 1;
32827|       |int save_cwd(struct saved_cwd *cwd)
32828|      0|{
32829|       |
32830|      0|    {
32831|      0|        cwd->desc = -1;
32832|      0|        cwd->name = (char *)((void *)0);
32833|      0|        if (have_working_fchdir) {
32834|      0|            {
32835|      0|                cwd->desc = open(".", 65536);
32836|      0|            }
32837|      0|            if (cwd->desc < 0) {
32838|      0|                return (1);
32839|      0|            }
32840|      0|        }
32841|      0|        if (!have_working_fchdir) {
32842|      0|            {
32843|      0|                cwd->name = xgetcwd();
32844|      0|            }
32845|      0|            if ((unsigned long)cwd->name == (unsigned long)((void *)0)) {
32846|      0|                return (1);
32847|      0|            }
32848|      0|        }
32849|      0|        return (0);
32850|      0|    }
32851|      0|}
32852|       |int restore_cwd(struct saved_cwd const *cwd)
32853|      0|{
32854|      0|    int tmp;
32855|      0|    int tmp___0;
32856|       |
32857|      0|    {
32858|      0|        if (0 <= (int)cwd->desc) {
32859|      0|            {
32860|      0|                tmp = fchdir((int)cwd->desc);
32861|      0|            }
32862|      0|            return (tmp < 0);
32863|      0|        }
32864|      0|        else {
32865|      0|            {
32866|      0|                tmp___0 = chdir((char const *)cwd->name);
32867|      0|            }
32868|      0|            return (tmp___0 < 0);
32869|      0|        }
32870|      0|    }
32871|      0|}
32872|       |/* #pragma merger("0","027.savedir.o.i","") */
32873|       |char *savedir(char const *dir)
32874|      0|{
32875|      0|    DIR *dirp;
32876|      0|    struct dirent *dp;
32877|      0|    char *name_space;
32878|      0|    size_t allocated;
32879|      0|    size_t used;
32880|      0|    int save_errno;
32881|      0|    void *tmp;
32882|      0|    int *tmp___0;
32883|      0|    char const *entry;
32884|      0|    size_t entry_size;
32885|      0|    size_t tmp___1;
32886|      0|    void *tmp___2;
32887|      0|    int *tmp___3;
32888|      0|    int *tmp___4;
32889|      0|    int tmp___5;
32890|      0|    int *tmp___6;
32891|      0|    int tmp___7;
32892|      0|    int tmp___8;
32893|       |
32894|      0|    {
32895|      0|        {
32896|      0|            allocated = (size_t)512;
32897|      0|            used = (size_t)0;
32898|      0|            dirp = opendir(dir);
32899|      0|        }
32900|      0|        if ((unsigned long)dirp == (unsigned long)((void *)0)) {
32901|      0|            return ((char *)((void *)0));
32902|      0|        }
32903|      0|        {
32904|      0|            tmp = xmalloc(allocated);
32905|      0|            name_space = (char *)tmp;
32906|      0|            tmp___0 = __errno_location();
32907|      0|            *tmp___0 = 0;
32908|      0|        }
32909|      0|        {
32910|      0|            while (1) {
32911|      0|while_continue: /* CIL Label */
32912|      0|                ;
32913|      0|                {
32914|      0|                    dp = readdir(dirp);
32915|      0|                }
32916|      0|                if (!((unsigned long)dp != (unsigned long)((void *)0))) {
32917|      0|                    goto while_break;
32918|      0|                }
32919|      0|                entry = (char const *)(dp->d_name);
32920|      0|                if ((int const) * (entry + 0) != 46) {
32921|      0|                    tmp___8 = 0;
32922|      0|                }
32923|      0|                else {
32924|      0|                    if ((int const) * (entry + 1) != 46) {
32925|      0|                        tmp___7 = 1;
32926|      0|                    }
32927|      0|                    else {
32928|      0|                        tmp___7 = 2;
32929|      0|                    }
32930|      0|                    tmp___8 = tmp___7;
32931|      0|                }
32932|      0|                if ((int const) * (entry + tmp___8) != 0) {
32933|      0|                    {
32934|      0|                        tmp___1 = strlen(entry);
32935|      0|                        entry_size = tmp___1 + 1UL;
32936|      0|                    }
32937|      0|                    if (used + entry_size < used) {
32938|      0|                        {
32939|      0|                            xalloc_die();
32940|      0|                        }
32941|      0|                    }
32942|      0|                    if (allocated <= used + entry_size) {
32943|      0|                        {
32944|      0|                            while (1) {
32945|      0|while_continue___0: /* CIL Label */
32946|      0|                                ;
32947|      0|                                if (2UL * allocated < allocated) {
32948|      0|                                    {
32949|      0|                                        xalloc_die();
32950|      0|                                    }
32951|      0|                                }
32952|      0|                                allocated *= 2UL;
32953|      0|                                if (!(allocated <= used + entry_size)) {
32954|      0|                                    goto while_break___0;
32955|      0|                                }
32956|      0|                            }
32957|      0|while_break___0: /* CIL Label */
32958|      0|                            ;
32959|      0|                        }
32960|      0|                        {
32961|      0|                            tmp___2 = xrealloc((void *)name_space, allocated);
32962|      0|                            name_space = (char *)tmp___2;
32963|      0|                        }
32964|      0|                    }
32965|      0|                    {
32966|      0|                        memcpy((void * /* __restrict  */)(name_space + used),
32967|      0|                               (void const * /* __restrict  */)entry, entry_size);
32968|      0|                        used += entry_size;
32969|      0|                    }
32970|      0|                }
32971|      0|            }
32972|      0|while_break: /* CIL Label */
32973|      0|            ;
32974|      0|        }
32975|      0|        {
32976|      0|            *(name_space + used) = (char)'\000';
32977|      0|            tmp___3 = __errno_location();
32978|      0|            save_errno = *tmp___3;
32979|      0|            tmp___5 = closedir(dirp);
32980|      0|        }
32981|      0|        if (tmp___5 != 0) {
32982|      0|            {
32983|      0|                tmp___4 = __errno_location();
32984|      0|                save_errno = *tmp___4;
32985|      0|            }
32986|      0|        }
32987|      0|        if (save_errno != 0) {
32988|      0|            {
32989|      0|                free((void *)name_space);
32990|      0|                tmp___6 = __errno_location();
32991|      0|                *tmp___6 = save_errno;
32992|      0|            }
32993|      0|            return ((char *)((void *)0));
32994|      0|        }
32995|      0|        return (name_space);
32996|      0|    }
32997|      0|}
32998|       |/* #pragma merger("0","028.stripslash.o.i","") */
32999|       |int strip_trailing_slashes(char *path)
33000|      0|{
33001|      0|    char *base;
33002|      0|    char *tmp;
33003|      0|    char *base_lim;
33004|      0|    size_t tmp___0;
33005|      0|    int had_slash;
33006|       |
33007|      0|    {
33008|      0|        {
33009|      0|            tmp = base_name((char const *)path);
33010|      0|            base = tmp;
33011|      0|            tmp___0 = base_len((char const *)base);
33012|      0|            base_lim = base + tmp___0;
33013|      0|            had_slash = (int)*base_lim;
33014|      0|            *base_lim = (char)'\000';
33015|      0|        }
33016|      0|        return (had_slash);
33017|      0|    }
33018|      0|}
33019|       |/* #pragma merger("0","029.xgetcwd.o.i","") */
33020|       |extern __attribute__((__nothrow__)) char *(__attribute__((__leaf__))
33021|       |        getcwd)(char *__buf, size_t __size);
33022|       |char *xgetcwd(void)
33023|      0|{
33024|      0|    char *cwd;
33025|      0|    char *tmp;
33026|      0|    int *tmp___0;
33027|       |
33028|      0|    {
33029|      0|        {
33030|      0|            tmp = getcwd((char *)((void *)0), (size_t)0);
33031|      0|            cwd = tmp;
33032|      0|        }
33033|      0|        if (!cwd) {
33034|      0|            {
33035|      0|                tmp___0 = __errno_location();
33036|      0|            }
33037|      0|            if (*tmp___0 == 12) {
33038|      0|                {
33039|      0|                    xalloc_die();
33040|      0|                }
33041|      0|            }
33042|      0|        }
33043|      0|        return (cwd);
33044|      0|    }
33045|      0|}
33046|       |/* #pragma merger("0","02a.xmalloc.o.i","") */
33047|       |char const xalloc_msg_memory_exhausted[17];
33048|       |void *xclone(void const *p, size_t s);
33049|       |extern
33050|       |__attribute__((__nothrow__)) void *(__attribute__((__warn_unused_result__,
33051|       |                                    __leaf__))
33052|       |                                    realloc)(void *__ptr, size_t __size);
33053|       |void (*xalloc_fail_func)(void) = (void (*)(void))0;
33054|       |char const xalloc_msg_memory_exhausted[17] = {
33055|       |    (char const)'m',   (char const)'e', (char const)'m', (char const)'o',
33056|       |    (char const)'r',   (char const)'y', (char const)' ', (char const)'e',
33057|       |    (char const)'x',   (char const)'h', (char const)'a', (char const)'u',
33058|       |    (char const)'s',   (char const)'t', (char const)'e', (char const)'d',
33059|       |    (char const)'\000'
33060|       |};
33061|       |__attribute__((__noreturn__)) void xalloc_die(void);
33062|       |void xalloc_die(void)
33063|      0|{
33064|      0|    char *tmp;
33065|       |
33066|      0|    {
33067|      0|        if (xalloc_fail_func) {
33068|      0|            {
33069|      0|                (*xalloc_fail_func)();
33070|      0|            }
33071|      0|        }
33072|      0|        {
33073|      0|            tmp = gettext(xalloc_msg_memory_exhausted);
33074|      0|            error((int)exit_failure, 0, "%s", tmp);
33075|      0|            abort();
33076|      0|        }
33077|      0|    }
33078|      0|}
33079|       |__inline static void *xnmalloc_inline(size_t n, size_t s)
33080|      0|{
33081|      0|    void *p;
33082|      0|    int tmp;
33083|       |
33084|      0|    {
33085|      0|        if (sizeof(ptrdiff_t) <= sizeof(size_t)) {
33086|      0|            tmp = -1;
33087|      0|        }
33088|      0|        else {
33089|      0|            tmp = -2;
33090|      0|        }
33091|      0|        if ((size_t)tmp / s < n) {
33092|      0|            {
33093|      0|                xalloc_die();
33094|      0|            }
33095|      0|        }
33096|      0|        else {
33097|      0|            {
33098|      0|                p = malloc(n * s);
33099|      0|            }
33100|      0|            if (!p) {
33101|      0|                {
33102|      0|                    xalloc_die();
33103|      0|                }
33104|      0|            }
33105|      0|        }
33106|      0|        return (p);
33107|      0|    }
33108|      0|}
33109|       |void *xmalloc(size_t n)
33110|      0|{
33111|      0|    void *tmp;
33112|       |
33113|      0|    {
33114|      0|        {
33115|      0|            tmp = xnmalloc_inline(n, (size_t)1);
33116|      0|        }
33117|      0|        return (tmp);
33118|      0|    }
33119|      0|}
33120|       |__inline static void *xnrealloc_inline(void *p, size_t n, size_t s)
33121|      0|{
33122|      0|    int tmp;
33123|       |
33124|      0|    {
33125|      0|        if (sizeof(ptrdiff_t) <= sizeof(size_t)) {
33126|      0|            tmp = -1;
33127|      0|        }
33128|      0|        else {
33129|      0|            tmp = -2;
33130|      0|        }
33131|      0|        if ((size_t)tmp / s < n) {
33132|      0|            {
33133|      0|                xalloc_die();
33134|      0|            }
33135|      0|        }
33136|      0|        else {
33137|      0|            {
33138|      0|                p = realloc(p, n * s);
33139|      0|            }
33140|      0|            if (!p) {
33141|      0|                {
33142|      0|                    xalloc_die();
33143|      0|                }
33144|      0|            }
33145|      0|        }
33146|      0|        return (p);
33147|      0|    }
33148|      0|}
33149|       |void *xrealloc(void *p, size_t n)
33150|      0|{
33151|      0|    void *tmp;
33152|       |
33153|      0|    {
33154|      0|        {
33155|      0|            tmp = xnrealloc_inline(p, n, (size_t)1);
33156|      0|        }
33157|      0|        return (tmp);
33158|      0|    }
33159|      0|}
33160|       |__inline static void *x2nrealloc_inline(void *p, size_t *pn, size_t s)
33161|      0|{
33162|      0|    size_t n;
33163|      0|    void *tmp;
33164|       |
33165|      0|    {
33166|      0|        n = *pn;
33167|      0|        if (!p) {
33168|      0|            if (!n) {
33169|      0|                n = 64UL / s;
33170|      0|                n += (size_t)(!n);
33171|      0|            }
33172|      0|        }
33173|      0|        else {
33174|      0|            if (9223372036854775807UL / s < n) {
33175|      0|                {
33176|      0|                    xalloc_die();
33177|      0|                }
33178|      0|            }
33179|      0|            n *= 2UL;
33180|      0|        }
33181|      0|        {
33182|      0|            *pn = n;
33183|      0|            tmp = xrealloc(p, n * s);
33184|      0|        }
33185|      0|        return (tmp);
33186|      0|    }
33187|      0|}
33188|       |void *x2nrealloc(void *p, size_t *pn, size_t s)
33189|      0|{
33190|      0|    void *tmp;
33191|       |
33192|      0|    {
33193|      0|        {
33194|      0|            tmp = x2nrealloc_inline(p, pn, s);
33195|      0|        }
33196|      0|        return (tmp);
33197|      0|    }
33198|      0|}
33199|       |void *x2realloc(void *p, size_t *pn)
33200|      0|{
33201|      0|    void *tmp;
33202|       |
33203|      0|    {
33204|      0|        {
33205|      0|            tmp = x2nrealloc_inline(p, pn, (size_t)1);
33206|      0|        }
33207|      0|        return (tmp);
33208|      0|    }
33209|      0|}
33210|       |void *xzalloc(size_t s)
33211|      0|{
33212|      0|    void *tmp;
33213|      0|    void *tmp___0;
33214|       |
33215|      0|    {
33216|      0|        {
33217|      0|            tmp = xmalloc(s);
33218|      0|            tmp___0 = memset(tmp, 0, s);
33219|      0|        }
33220|      0|        return (tmp___0);
33221|      0|    }
33222|      0|}
33223|       |void *xclone(void const *p, size_t s)
33224|      0|{
33225|      0|    void *tmp;
33226|      0|    void *tmp___0;
33227|       |
33228|      0|    {
33229|      0|        {
33230|      0|            tmp = xmalloc(s);
33231|      0|            tmp___0 = memcpy((void * /* __restrict  */)tmp,
33232|      0|                             (void const * /* __restrict  */)p, s);
33233|      0|        }
33234|      0|        return (tmp___0);
33235|      0|    }
33236|      0|}
33237|       |/* #pragma merger("0","02b.xstrdup.o.i","") */
33238|       |char *xstrdup(char const *string)
33239|      0|{
33240|      0|    size_t tmp;
33241|      0|    void *tmp___0;
33242|       |
33243|      0|    {
33244|      0|        {
33245|      0|            tmp = strlen(string);
33246|      0|            tmp___0 = xclone((void const *)string, tmp + 1UL);
33247|      0|        }
33248|      0|        return ((char *)tmp___0);
33249|      0|    }
33250|      0|}
33251|       |/* #pragma merger("0","02c.xstrtol.o.i","") */
33252|       |extern __attribute__((__nothrow__, __noreturn__)) void(__attribute__((
33253|       |            __leaf__)) __assert_fail)(char const *__assertion, char const *__file,
33254|       |                                      unsigned int __line, char const *__function);
33255|       |extern
33256|       |__attribute__((__nothrow__)) long(__attribute__((__nonnull__(1), __leaf__))
33257|       |                                  strtol)(char const *__restrict __nptr,
33258|       |                                          char **__restrict __endptr,
33259|       |                                          int __base);
33260|       |/* #pragma merger("0","02d.xstrtoul.o.i","") */
33261|       |static strtol_error bkm_scale___0(unsigned long *x, int scale_factor)
33262|      0|{
33263|       |
33264|      0|    {
33265|      0|        if (0xffffffffffffffffUL / (unsigned long)scale_factor < *x) {
33266|      0|            *x = 0xffffffffffffffffUL;
33267|      0|            return ((strtol_error)1);
33268|      0|        }
33269|      0|        *x *= (unsigned long)scale_factor;
33270|      0|        return ((strtol_error)0);
33271|      0|    }
33272|      0|}
33273|       |static strtol_error bkm_scale_by_power___0(unsigned long *x, int base,
33274|       |        int power)
33275|      0|{
33276|      0|    strtol_error err;
33277|      0|    strtol_error tmp;
33278|      0|    int tmp___0;
33279|       |
33280|      0|    {
33281|      0|        err = (strtol_error)0;
33282|      0|        {
33283|      0|            while (1) {
33284|      0|while_continue: /* CIL Label */
33285|      0|                ;
33286|      0|                tmp___0 = power;
33287|      0|                power--;
33288|      0|                if (!tmp___0) {
33289|      0|                    goto while_break;
33290|      0|                }
33291|      0|                {
33292|      0|                    tmp = bkm_scale___0(x, base);
33293|      0|                    err = (strtol_error)((unsigned int)err | (unsigned int)tmp);
33294|      0|                }
33295|      0|            }
33296|      0|while_break: /* CIL Label */
33297|      0|            ;
33298|      0|        }
33299|      0|        return (err);
33300|      0|    }
33301|      0|}
33302|       |strtol_error xstrtoul(char const *s, char **ptr, int strtol_base,
33303|       |                      unsigned long *val, char const *valid_suffixes)
33304|      0|{
33305|      0|    char *t_ptr;
33306|      0|    char **p;
33307|      0|    unsigned long tmp;
33308|      0|    strtol_error err;
33309|      0|    char const *q;
33310|      0|    unsigned short const **tmp___0;
33311|      0|    int *tmp___1;
33312|      0|    char *tmp___2;
33313|      0|    int *tmp___3;
33314|      0|    int *tmp___4;
33315|      0|    int base;
33316|      0|    int suffixes;
33317|      0|    strtol_error overflow;
33318|      0|    char *tmp___5;
33319|      0|    char *tmp___6;
33320|       |
33321|      0|    {
33322|      0|        err = (strtol_error)0;
33323|      0|        if (0 <= strtol_base) {
33324|      0|            if (!(strtol_base <= 36)) {
33325|      0|                {
33326|      0|                    __assert_fail(
33327|      0|                        "0 <= strtol_base && strtol_base <= 36",
33328|      0|                        "/home/wslee/project/cbenchmarks/tar-1.14/lib/xstrtol.c", 117U,
33329|      0|                        "xstrtoul");
33330|      0|                }
33331|      0|            }
33332|      0|        }
33333|      0|        else {
33334|      0|            {
33335|      0|                __assert_fail("0 <= strtol_base && strtol_base <= 36",
33336|      0|                              "/home/wslee/project/cbenchmarks/tar-1.14/lib/xstrtol.c",
33337|      0|                              117U, "xstrtoul");
33338|      0|            }
33339|      0|        }
33340|      0|        if (ptr) {
33341|      0|            p = ptr;
33342|      0|        }
33343|      0|        else {
33344|      0|            p = &t_ptr;
33345|      0|        }
33346|      0|        q = s;
33347|      0|        {
33348|      0|            while (1) {
33349|      0|while_continue: /* CIL Label */
33350|      0|                ;
33351|      0|                {
33352|      0|                    tmp___0 = __ctype_b_loc();
33353|      0|                }
33354|      0|                if (!((int const) * (*tmp___0 + (int)((unsigned char)*q)) & 8192)) {
33355|      0|                    goto while_break;
33356|      0|                }
33357|      0|                q++;
33358|      0|            }
33359|      0|while_break: /* CIL Label */
33360|      0|            ;
33361|      0|        }
33362|      0|        if ((int const) * q == 45) {
33363|      0|            return ((strtol_error)4);
33364|      0|        }
33365|      0|        {
33366|      0|            tmp___1 = __errno_location();
33367|      0|            *tmp___1 = 0;
33368|      0|            tmp = strtoul((char const * /* __restrict  */)s,
33369|      0|                          (char ** /* __restrict  */)p, strtol_base);
33370|      0|        }
33371|      0|        if ((unsigned long)*p == (unsigned long)s) {
33372|      0|            if (valid_suffixes) {
33373|      0|                if (*(*p)) {
33374|      0|                    {
33375|      0|                        tmp___2 = strchr(valid_suffixes, (int)*(*p));
33376|      0|                    }
33377|      0|                    if (tmp___2) {
33378|      0|                        tmp = 1UL;
33379|      0|                    }
33380|      0|                    else {
33381|      0|                        return ((strtol_error)4);
33382|      0|                    }
33383|      0|                }
33384|      0|                else {
33385|      0|                    return ((strtol_error)4);
33386|      0|                }
33387|      0|            }
33388|      0|            else {
33389|      0|                return ((strtol_error)4);
33390|      0|            }
33391|      0|        }
33392|      0|        else {
33393|      0|            {
33394|      0|                tmp___4 = __errno_location();
33395|      0|            }
33396|      0|            if (*tmp___4 != 0) {
33397|      0|                {
33398|      0|                    tmp___3 = __errno_location();
33399|      0|                }
33400|      0|                if (*tmp___3 != 34) {
33401|      0|                    return ((strtol_error)4);
33402|      0|                }
33403|      0|                err = (strtol_error)1;
33404|      0|            }
33405|      0|        }
33406|      0|        if (!valid_suffixes) {
33407|      0|            *val = tmp;
33408|      0|            return (err);
33409|      0|        }
33410|      0|        if ((int)*(*p) != 0) {
33411|      0|            {
33412|      0|                base = 1024;
33413|      0|                suffixes = 1;
33414|      0|                tmp___5 = strchr(valid_suffixes, (int)*(*p));
33415|      0|            }
33416|      0|            if (!tmp___5) {
33417|      0|                *val = tmp;
33418|      0|                return ((strtol_error)((unsigned int)err | 2U));
33419|      0|            }
33420|      0|            {
33421|      0|                tmp___6 = strchr(valid_suffixes, '0');
33422|      0|            }
33423|      0|            if (tmp___6) {
33424|      0|                {
33425|      0|                    if ((int)*(*(p + 0) + 1) == 105) {
33426|      0|                        goto case_105;
33427|      0|                    }
33428|      0|                    if ((int)*(*(p + 0) + 1) == 66) {
33429|      0|                        goto case_66;
33430|      0|                    }
33431|      0|                    if ((int)*(*(p + 0) + 1) == 68) {
33432|      0|                        goto case_66;
33433|      0|                    }
33434|      0|                    goto switch_break;
33435|      0|case_105: /* CIL Label */
33436|      0|                    if ((int)*(*(p + 0) + 2) == 66) {
33437|      0|                        suffixes += 2;
33438|      0|                    }
33439|      0|                    goto switch_break;
33440|      0|case_66: /* CIL Label */
33441|      0|case_68: /* CIL Label */
33442|      0|                    base = 1000;
33443|      0|                    suffixes++;
33444|      0|                    goto switch_break;
33445|      0|switch_break: /* CIL Label */
33446|      0|                    ;
33447|      0|                }
33448|      0|            }
33449|      0|            {
33450|      0|                if ((int)*(*p) == 98) {
33451|      0|                    goto case_98;
33452|      0|                }
33453|      0|                if ((int)*(*p) == 66) {
33454|      0|                    goto case_66___0;
33455|      0|                }
33456|      0|                if ((int)*(*p) == 99) {
33457|      0|                    goto case_99;
33458|      0|                }
33459|      0|                if ((int)*(*p) == 69) {
33460|      0|                    goto case_69;
33461|      0|                }
33462|      0|                if ((int)*(*p) == 71) {
33463|      0|                    goto case_71;
33464|      0|                }
33465|      0|                if ((int)*(*p) == 103) {
33466|      0|                    goto case_71;
33467|      0|                }
33468|      0|                if ((int)*(*p) == 107) {
33469|      0|                    goto case_107;
33470|      0|                }
33471|      0|                if ((int)*(*p) == 75) {
33472|      0|                    goto case_107;
33473|      0|                }
33474|      0|                if ((int)*(*p) == 77) {
33475|      0|                    goto case_77;
33476|      0|                }
33477|      0|                if ((int)*(*p) == 109) {
33478|      0|                    goto case_77;
33479|      0|                }
33480|      0|                if ((int)*(*p) == 80) {
33481|      0|                    goto case_80;
33482|      0|                }
33483|      0|                if ((int)*(*p) == 84) {
33484|      0|                    goto case_84;
33485|      0|                }
33486|      0|                if ((int)*(*p) == 116) {
33487|      0|                    goto case_84;
33488|      0|                }
33489|      0|                if ((int)*(*p) == 119) {
33490|      0|                    goto case_119;
33491|      0|                }
33492|      0|                if ((int)*(*p) == 89) {
33493|      0|                    goto case_89;
33494|      0|                }
33495|      0|                if ((int)*(*p) == 90) {
33496|      0|                    goto case_90;
33497|      0|                }
33498|      0|                goto switch_default;
33499|      0|case_98 : { /* CIL Label */
33500|      0|                    overflow = bkm_scale___0(&tmp, 512);
33501|      0|                }
33502|      0|                goto switch_break___0;
33503|      0|case_66___0 : { /* CIL Label */
33504|      0|                    overflow = bkm_scale___0(&tmp, 1024);
33505|      0|                }
33506|      0|                goto switch_break___0;
33507|      0|case_99: /* CIL Label */
33508|      0|                overflow = (strtol_error)0;
33509|      0|                goto switch_break___0;
33510|      0|case_69 : { /* CIL Label */
33511|      0|                    overflow = bkm_scale_by_power___0(&tmp, base, 6);
33512|      0|                }
33513|      0|                goto switch_break___0;
33514|      0|case_71:   /* CIL Label */
33515|      0|case_103 : { /* CIL Label */
33516|      0|                    overflow = bkm_scale_by_power___0(&tmp, base, 3);
33517|      0|                }
33518|      0|                goto switch_break___0;
33519|      0|case_107: /* CIL Label */
33520|      0|case_75 : { /* CIL Label */
33521|      0|                    overflow = bkm_scale_by_power___0(&tmp, base, 1);
33522|      0|                }
33523|      0|                goto switch_break___0;
33524|      0|case_77:   /* CIL Label */
33525|      0|case_109 : { /* CIL Label */
33526|      0|                    overflow = bkm_scale_by_power___0(&tmp, base, 2);
33527|      0|                }
33528|      0|                goto switch_break___0;
33529|      0|case_80 : { /* CIL Label */
33530|      0|                    overflow = bkm_scale_by_power___0(&tmp, base, 5);
33531|      0|                }
33532|      0|                goto switch_break___0;
33533|      0|case_84:   /* CIL Label */
33534|      0|case_116 : { /* CIL Label */
33535|      0|                    overflow = bkm_scale_by_power___0(&tmp, base, 4);
33536|      0|                }
33537|      0|                goto switch_break___0;
33538|      0|case_119 : { /* CIL Label */
33539|      0|                    overflow = bkm_scale___0(&tmp, 2);
33540|      0|                }
33541|      0|                goto switch_break___0;
33542|      0|case_89 : { /* CIL Label */
33543|      0|                    overflow = bkm_scale_by_power___0(&tmp, base, 8);
33544|      0|                }
33545|      0|                goto switch_break___0;
33546|      0|case_90 : { /* CIL Label */
33547|      0|                    overflow = bkm_scale_by_power___0(&tmp, base, 7);
33548|      0|                }
33549|      0|                goto switch_break___0;
33550|      0|switch_default: /* CIL Label */
33551|      0|                *val = tmp;
33552|      0|                return ((strtol_error)((unsigned int)err | 2U));
33553|      0|switch_break___0: /* CIL Label */
33554|      0|                ;
33555|      0|            }
33556|      0|            err = (strtol_error)((unsigned int)err | (unsigned int)overflow);
33557|      0|            *p += suffixes;
33558|      0|            if (*(*p)) {
33559|      0|                err = (strtol_error)((unsigned int)err | 2U);
33560|      0|            }
33561|      0|        }
33562|      0|        *val = tmp;
33563|      0|        return (err);
33564|      0|    }
33565|      0|}
33566|       |/* #pragma merger("0","02e.xstrtoumax.o.i","") */
33567|       |extern __attribute__((__nothrow__))
33568|       |uintmax_t(__attribute__((__leaf__)) strtoumax)(char const *__restrict __nptr,
33569|       |        char **__restrict __endptr,
33570|       |        int __base);
33571|       |static strtol_error bkm_scale___1(uintmax_t *x, int scale_factor)
33572|      0|{
33573|       |
33574|      0|    {
33575|      0|        if (0xffffffffffffffffUL / (unsigned long)scale_factor < *x) {
33576|      0|            *x = 0xffffffffffffffffUL;
33577|      0|            return ((strtol_error)1);
33578|      0|        }
33579|      0|        *x *= (uintmax_t)scale_factor;
33580|      0|        return ((strtol_error)0);
33581|      0|    }
33582|      0|}
33583|       |static strtol_error bkm_scale_by_power___1(uintmax_t *x, int base, int power)
33584|      0|{
33585|      0|    strtol_error err;
33586|      0|    strtol_error tmp;
33587|      0|    int tmp___0;
33588|       |
33589|      0|    {
33590|      0|        err = (strtol_error)0;
33591|      0|        {
33592|      0|            while (1) {
33593|      0|while_continue: /* CIL Label */
33594|      0|                ;
33595|      0|                tmp___0 = power;
33596|      0|                power--;
33597|      0|                if (!tmp___0) {
33598|      0|                    goto while_break;
33599|      0|                }
33600|      0|                {
33601|      0|                    tmp = bkm_scale___1(x, base);
33602|      0|                    err = (strtol_error)((unsigned int)err | (unsigned int)tmp);
33603|      0|                }
33604|      0|            }
33605|      0|while_break: /* CIL Label */
33606|      0|            ;
33607|      0|        }
33608|      0|        return (err);
33609|      0|    }
33610|      0|}
33611|       |strtol_error xstrtoumax(char const *s, char **ptr, int strtol_base,
33612|       |                        uintmax_t *val, char const *valid_suffixes)
33613|      0|{
33614|      0|    char *t_ptr;
33615|      0|    char **p;
33616|      0|    uintmax_t tmp;
33617|      0|    strtol_error err;
33618|      0|    char const *q;
33619|      0|    unsigned short const **tmp___0;
33620|      0|    int *tmp___1;
33621|      0|    char *tmp___2;
33622|      0|    int *tmp___3;
33623|      0|    int *tmp___4;
33624|      0|    int base;
33625|      0|    int suffixes;
33626|      0|    strtol_error overflow;
33627|      0|    char *tmp___5;
33628|      0|    char *tmp___6;
33629|       |
33630|      0|    {
33631|      0|        err = (strtol_error)0;
33632|      0|        if (0 <= strtol_base) {
33633|      0|            if (!(strtol_base <= 36)) {
33634|      0|                {
33635|      0|                    __assert_fail(
33636|      0|                        "0 <= strtol_base && strtol_base <= 36",
33637|      0|                        "/home/wslee/project/cbenchmarks/tar-1.14/lib/xstrtol.c", 117U,
33638|      0|                        "xstrtoumax");
33639|      0|                }
33640|      0|            }
33641|      0|        }
33642|      0|        else {
33643|      0|            {
33644|      0|                __assert_fail("0 <= strtol_base && strtol_base <= 36",
33645|      0|                              "/home/wslee/project/cbenchmarks/tar-1.14/lib/xstrtol.c",
33646|      0|                              117U, "xstrtoumax");
33647|      0|            }
33648|      0|        }
33649|      0|        if (ptr) {
33650|      0|            p = ptr;
33651|      0|        }
33652|      0|        else {
33653|      0|            p = &t_ptr;
33654|      0|        }
33655|      0|        q = s;
33656|      0|        {
33657|      0|            while (1) {
33658|      0|while_continue: /* CIL Label */
33659|      0|                ;
33660|      0|                {
33661|      0|                    tmp___0 = __ctype_b_loc();
33662|      0|                }
33663|      0|                if (!((int const) * (*tmp___0 + (int)((unsigned char)*q)) & 8192)) {
33664|      0|                    goto while_break;
33665|      0|                }
33666|      0|                q++;
33667|      0|            }
33668|      0|while_break: /* CIL Label */
33669|      0|            ;
33670|      0|        }
33671|      0|        if ((int const) * q == 45) {
33672|      0|            return ((strtol_error)4);
33673|      0|        }
33674|      0|        {
33675|      0|            tmp___1 = __errno_location();
33676|      0|            *tmp___1 = 0;
33677|      0|            tmp = strtoumax((char const * /* __restrict  */)s,
33678|      0|                            (char ** /* __restrict  */)p, strtol_base);
33679|      0|        }
33680|      0|        if ((unsigned long)*p == (unsigned long)s) {
33681|      0|            if (valid_suffixes) {
33682|      0|                if (*(*p)) {
33683|      0|                    {
33684|      0|                        tmp___2 = strchr(valid_suffixes, (int)*(*p));
33685|      0|                    }
33686|      0|                    if (tmp___2) {
33687|      0|                        tmp = (uintmax_t)1;
33688|      0|                    }
33689|      0|                    else {
33690|      0|                        return ((strtol_error)4);
33691|      0|                    }
33692|      0|                }
33693|      0|                else {
33694|      0|                    return ((strtol_error)4);
33695|      0|                }
33696|      0|            }
33697|      0|            else {
33698|      0|                return ((strtol_error)4);
33699|      0|            }
33700|      0|        }
33701|      0|        else {
33702|      0|            {
33703|      0|                tmp___4 = __errno_location();
33704|      0|            }
33705|      0|            if (*tmp___4 != 0) {
33706|      0|                {
33707|      0|                    tmp___3 = __errno_location();
33708|      0|                }
33709|      0|                if (*tmp___3 != 34) {
33710|      0|                    return ((strtol_error)4);
33711|      0|                }
33712|      0|                err = (strtol_error)1;
33713|      0|            }
33714|      0|        }
33715|      0|        if (!valid_suffixes) {
33716|      0|            *val = tmp;
33717|      0|            return (err);
33718|      0|        }
33719|      0|        if ((int)*(*p) != 0) {
33720|      0|            {
33721|      0|                base = 1024;
33722|      0|                suffixes = 1;
33723|      0|                tmp___5 = strchr(valid_suffixes, (int)*(*p));
33724|      0|            }
33725|      0|            if (!tmp___5) {
33726|      0|                *val = tmp;
33727|      0|                return ((strtol_error)((unsigned int)err | 2U));
33728|      0|            }
33729|      0|            {
33730|      0|                tmp___6 = strchr(valid_suffixes, '0');
33731|      0|            }
33732|      0|            if (tmp___6) {
33733|      0|                {
33734|      0|                    if ((int)*(*(p + 0) + 1) == 105) {
33735|      0|                        goto case_105;
33736|      0|                    }
33737|      0|                    if ((int)*(*(p + 0) + 1) == 66) {
33738|      0|                        goto case_66;
33739|      0|                    }
33740|      0|                    if ((int)*(*(p + 0) + 1) == 68) {
33741|      0|                        goto case_66;
33742|      0|                    }
33743|      0|                    goto switch_break;
33744|      0|case_105: /* CIL Label */
33745|      0|                    if ((int)*(*(p + 0) + 2) == 66) {
33746|      0|                        suffixes += 2;
33747|      0|                    }
33748|      0|                    goto switch_break;
33749|      0|case_66: /* CIL Label */
33750|      0|case_68: /* CIL Label */
33751|      0|                    base = 1000;
33752|      0|                    suffixes++;
33753|      0|                    goto switch_break;
33754|      0|switch_break: /* CIL Label */
33755|      0|                    ;
33756|      0|                }
33757|      0|            }
33758|      0|            {
33759|      0|                if ((int)*(*p) == 98) {
33760|      0|                    goto case_98;
33761|      0|                }
33762|      0|                if ((int)*(*p) == 66) {
33763|      0|                    goto case_66___0;
33764|      0|                }
33765|      0|                if ((int)*(*p) == 99) {
33766|      0|                    goto case_99;
33767|      0|                }
33768|      0|                if ((int)*(*p) == 69) {
33769|      0|                    goto case_69;
33770|      0|                }
33771|      0|                if ((int)*(*p) == 71) {
33772|      0|                    goto case_71;
33773|      0|                }
33774|      0|                if ((int)*(*p) == 103) {
33775|      0|                    goto case_71;
33776|      0|                }
33777|      0|                if ((int)*(*p) == 107) {
33778|      0|                    goto case_107;
33779|      0|                }
33780|      0|                if ((int)*(*p) == 75) {
33781|      0|                    goto case_107;
33782|      0|                }
33783|      0|                if ((int)*(*p) == 77) {
33784|      0|                    goto case_77;
33785|      0|                }
33786|      0|                if ((int)*(*p) == 109) {
33787|      0|                    goto case_77;
33788|      0|                }
33789|      0|                if ((int)*(*p) == 80) {
33790|      0|                    goto case_80;
33791|      0|                }
33792|      0|                if ((int)*(*p) == 84) {
33793|      0|                    goto case_84;
33794|      0|                }
33795|      0|                if ((int)*(*p) == 116) {
33796|      0|                    goto case_84;
33797|      0|                }
33798|      0|                if ((int)*(*p) == 119) {
33799|      0|                    goto case_119;
33800|      0|                }
33801|      0|                if ((int)*(*p) == 89) {
33802|      0|                    goto case_89;
33803|      0|                }
33804|      0|                if ((int)*(*p) == 90) {
33805|      0|                    goto case_90;
33806|      0|                }
33807|      0|                goto switch_default;
33808|      0|case_98 : { /* CIL Label */
33809|      0|                    overflow = bkm_scale___1(&tmp, 512);
33810|      0|                }
33811|      0|                goto switch_break___0;
33812|      0|case_66___0 : { /* CIL Label */
33813|      0|                    overflow = bkm_scale___1(&tmp, 1024);
33814|      0|                }
33815|      0|                goto switch_break___0;
33816|      0|case_99: /* CIL Label */
33817|      0|                overflow = (strtol_error)0;
33818|      0|                goto switch_break___0;
33819|      0|case_69 : { /* CIL Label */
33820|      0|                    overflow = bkm_scale_by_power___1(&tmp, base, 6);
33821|      0|                }
33822|      0|                goto switch_break___0;
33823|      0|case_71:   /* CIL Label */
33824|      0|case_103 : { /* CIL Label */
33825|      0|                    overflow = bkm_scale_by_power___1(&tmp, base, 3);
33826|      0|                }
33827|      0|                goto switch_break___0;
33828|      0|case_107: /* CIL Label */
33829|      0|case_75 : { /* CIL Label */
33830|      0|                    overflow = bkm_scale_by_power___1(&tmp, base, 1);
33831|      0|                }
33832|      0|                goto switch_break___0;
33833|      0|case_77:   /* CIL Label */
33834|      0|case_109 : { /* CIL Label */
33835|      0|                    overflow = bkm_scale_by_power___1(&tmp, base, 2);
33836|      0|                }
33837|      0|                goto switch_break___0;
33838|      0|case_80 : { /* CIL Label */
33839|      0|                    overflow = bkm_scale_by_power___1(&tmp, base, 5);
33840|      0|                }
33841|      0|                goto switch_break___0;
33842|      0|case_84:   /* CIL Label */
33843|      0|case_116 : { /* CIL Label */
33844|      0|                    overflow = bkm_scale_by_power___1(&tmp, base, 4);
33845|      0|                }
33846|      0|                goto switch_break___0;
33847|      0|case_119 : { /* CIL Label */
33848|      0|                    overflow = bkm_scale___1(&tmp, 2);
33849|      0|                }
33850|      0|                goto switch_break___0;
33851|      0|case_89 : { /* CIL Label */
33852|      0|                    overflow = bkm_scale_by_power___1(&tmp, base, 8);
33853|      0|                }
33854|      0|                goto switch_break___0;
33855|      0|case_90 : { /* CIL Label */
33856|      0|                    overflow = bkm_scale_by_power___1(&tmp, base, 7);
33857|      0|                }
33858|      0|                goto switch_break___0;
33859|      0|switch_default: /* CIL Label */
33860|      0|                *val = tmp;
33861|      0|                return ((strtol_error)((unsigned int)err | 2U));
33862|      0|switch_break___0: /* CIL Label */
33863|      0|                ;
33864|      0|            }
33865|      0|            err = (strtol_error)((unsigned int)err | (unsigned int)overflow);
33866|      0|            *p += suffixes;
33867|      0|            if (*(*p)) {
33868|      0|                err = (strtol_error)((unsigned int)err | 2U);
33869|      0|            }
33870|      0|        }
33871|      0|        *val = tmp;
33872|      0|        return (err);
33873|      0|    }
33874|      0|}
33875|       |/* #pragma merger("0","../../lib/addext.o.i","") */
33876|       |/* #pragma merger("0","../../lib/argmatch.o.i","") */
33877|       |/* #pragma merger("0","../../lib/backupfile.o.i","") */
33878|       |/* #pragma merger("0","../../lib/basename.o.i","") */
33879|       |/* #pragma merger("0","../../lib/dirname.o.i","") */
33880|       |/* #pragma merger("0","../../lib/exclude.o.i","") */
33881|       |/* #pragma merger("0","../../lib/exitfail.o.i","") */
33882|       |/* #pragma merger("0","../../lib/full-write.o.i","") */
33883|       |/* #pragma merger("0","../../lib/getdate.o.i","") */
33884|       |/* #pragma merger("0","../../lib/getopt1.o.i","") */
33885|       |/* #pragma merger("0","../../lib/getopt.o.i","") */
33886|       |/* #pragma merger("0","../../lib/gettime.o.i","") */
33887|       |/* #pragma merger("0","../../lib/hash.o.i","") */
33888|       |/* #pragma merger("0","../../lib/human.o.i","") */
33889|       |/* #pragma merger("0","../../lib/mktime.o.i","") */
33890|       |/* #pragma merger("0","../../lib/modechange.o.i","") */
33891|       |/* #pragma merger("0","../../lib/prepargs.o.i","") */
33892|       |/* #pragma merger("0","../../lib/quotearg.o.i","") */
33893|       |/* #pragma merger("0","../../lib/quote.o.i","") */
33894|       |/* #pragma merger("0","../../lib/safe-read.o.i","") */
33895|       |/* #pragma merger("0","../../lib/safe-write.o.i","") */
33896|       |/* #pragma merger("0","../../lib/save-cwd.o.i","") */
33897|       |/* #pragma merger("0","../../lib/savedir.o.i","") */
33898|       |/* #pragma merger("0","../../lib/stripslash.o.i","") */
33899|       |/* #pragma merger("0","../../lib/xgetcwd.o.i","") */
33900|       |/* #pragma merger("0","../../lib/xmalloc.o.i","") */
33901|       |/* #pragma merger("0","../../lib/xstrdup.o.i","") */
33902|       |/* #pragma merger("0","../../lib/xstrtol.o.i","") */
33903|       |/* #pragma merger("0","../../lib/xstrtoul.o.i","") */
33904|       |/* #pragma merger("0","../../lib/xstrtoumax.o.i","") */

