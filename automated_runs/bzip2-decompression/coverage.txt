    1|       |typedef int Int32;
    2|       |typedef unsigned char Bool;
    3|       |typedef unsigned char UChar;
    4|       |typedef unsigned long size_t;
    5|       |typedef long __off_t;
    6|       |typedef long __off64_t;
    7|       |struct _IO_FILE;
    8|       |struct _IO_FILE;
    9|       |typedef struct _IO_FILE FILE;
   10|       |typedef void _IO_lock_t;
   11|       |struct _IO_marker {
   12|       |    struct _IO_marker *_next;
   13|       |    struct _IO_FILE *_sbuf;
   14|       |    int _pos;
   15|       |};
   16|       |struct _IO_FILE {
   17|       |    int _flags;
   18|       |    char *_IO_read_ptr;
   19|       |    char *_IO_read_end;
   20|       |    char *_IO_read_base;
   21|       |    char *_IO_write_base;
   22|       |    char *_IO_write_ptr;
   23|       |    char *_IO_write_end;
   24|       |    char *_IO_buf_base;
   25|       |    char *_IO_buf_end;
   26|       |    char *_IO_save_base;
   27|       |    char *_IO_backup_base;
   28|       |    char *_IO_save_end;
   29|       |    struct _IO_marker *_markers;
   30|       |    struct _IO_FILE *_chain;
   31|       |    int _fileno;
   32|       |    int _flags2;
   33|       |    __off_t _old_offset;
   34|       |    unsigned short _cur_column;
   35|       |    signed char _vtable_offset;
   36|       |    char _shortbuf[1];
   37|       |    _IO_lock_t *_lock;
   38|       |    __off64_t _offset;
   39|       |    void *__pad1;
   40|       |    void *__pad2;
   41|       |    void *__pad3;
   42|       |    void *__pad4;
   43|       |    size_t __pad5;
   44|       |    int _mode;
   45|       |    char _unused2[(15UL * sizeof(int) - 4UL * sizeof(void *)) - sizeof(size_t)];
   46|       |};
   47|       |struct __anonstruct_bz_stream_26 {
   48|       |    char *next_in;
   49|       |    unsigned int avail_in;
   50|       |    unsigned int total_in_lo32;
   51|       |    unsigned int total_in_hi32;
   52|       |    char *next_out;
   53|       |    unsigned int avail_out;
   54|       |    unsigned int total_out_lo32;
   55|       |    unsigned int total_out_hi32;
   56|       |    void *state;
   57|       |    void *(*bzalloc)(void *, int, int);
   58|       |    void (*bzfree)(void *, void *);
   59|       |    void *opaque;
   60|       |};
   61|       |typedef struct __anonstruct_bz_stream_26 bz_stream;
   62|       |typedef unsigned int UInt32;
   63|       |typedef unsigned short UInt16;
   64|       |struct __anonstruct_DState_28 {
   65|       |    bz_stream *strm;
   66|       |    Int32 state;
   67|       |    UChar state_out_ch;
   68|       |    Int32 state_out_len;
   69|       |    Bool blockRandomised;
   70|       |    Int32 rNToGo;
   71|       |    Int32 rTPos;
   72|       |    UInt32 bsBuff;
   73|       |    Int32 bsLive;
   74|       |    Int32 blockSize100k;
   75|       |    Bool smallDecompress;
   76|       |    Int32 currBlockNo;
   77|       |    Int32 verbosity;
   78|       |    Int32 origPtr;
   79|       |    UInt32 tPos;
   80|       |    Int32 k0;
   81|       |    Int32 unzftab[256];
   82|       |    Int32 nblock_used;
   83|       |    Int32 cftab[257];
   84|       |    Int32 cftabCopy[257];
   85|       |    UInt32 *tt;
   86|       |    UInt16 *ll16;
   87|       |    UChar *ll4;
   88|       |    UInt32 storedBlockCRC;
   89|       |    UInt32 storedCombinedCRC;
   90|       |    UInt32 calculatedBlockCRC;
   91|       |    UInt32 calculatedCombinedCRC;
   92|       |    Int32 nInUse;
   93|       |    Bool inUse[256];
   94|       |    Bool inUse16[16];
   95|       |    UChar seqToUnseq[256];
   96|       |    UChar mtfa[4096];
   97|       |    Int32 mtfbase[16];
   98|       |    UChar selector[18002];
   99|       |    UChar selectorMtf[18002];
  100|       |    UChar len[6][258];
  101|       |    Int32 limit[6][258];
  102|       |    Int32 base[6][258];
  103|       |    Int32 perm[6][258];
  104|       |    Int32 minLens[6];
  105|       |    Int32 save_i;
  106|       |    Int32 save_j;
  107|       |    Int32 save_t;
  108|       |    Int32 save_alphaSize;
  109|       |    Int32 save_nGroups;
  110|       |    Int32 save_nSelectors;
  111|       |    Int32 save_EOB;
  112|       |    Int32 save_groupNo;
  113|       |    Int32 save_groupPos;
  114|       |    Int32 save_nextSym;
  115|       |    Int32 save_nblockMAX;
  116|       |    Int32 save_nblock;
  117|       |    Int32 save_es;
  118|       |    Int32 save_N;
  119|       |    Int32 save_curr;
  120|       |    Int32 save_zt;
  121|       |    Int32 save_zn;
  122|       |    Int32 save_zvec;
  123|       |    Int32 save_zj;
  124|       |    Int32 save_gSel;
  125|       |    Int32 save_gMinlen;
  126|       |    Int32 *save_gLimit;
  127|       |    Int32 *save_gBase;
  128|       |    Int32 *save_gPerm;
  129|       |};
  130|       |typedef struct __anonstruct_DState_28 DState;
  131|       |struct __anonstruct_EState_27 {
  132|       |    bz_stream *strm;
  133|       |    Int32 mode;
  134|       |    Int32 state;
  135|       |    UInt32 avail_in_expect;
  136|       |    UInt32 *arr1;
  137|       |    UInt32 *arr2;
  138|       |    UInt32 *ftab;
  139|       |    Int32 origPtr;
  140|       |    UInt32 *ptr;
  141|       |    UChar *block;
  142|       |    UInt16 *mtfv;
  143|       |    UChar *zbits;
  144|       |    Int32 workFactor;
  145|       |    UInt32 state_in_ch;
  146|       |    Int32 state_in_len;
  147|       |    Int32 rNToGo;
  148|       |    Int32 rTPos;
  149|       |    Int32 nblock;
  150|       |    Int32 nblockMAX;
  151|       |    Int32 numZ;
  152|       |    Int32 state_out_pos;
  153|       |    Int32 nInUse;
  154|       |    Bool inUse[256];
  155|       |    UChar unseqToSeq[256];
  156|       |    UInt32 bsBuff;
  157|       |    Int32 bsLive;
  158|       |    UInt32 blockCRC;
  159|       |    UInt32 combinedCRC;
  160|       |    Int32 verbosity;
  161|       |    Int32 blockNo;
  162|       |    Int32 blockSize100k;
  163|       |    Int32 nMTF;
  164|       |    Int32 mtfFreq[258];
  165|       |    UChar selector[18002];
  166|       |    UChar selectorMtf[18002];
  167|       |    UChar len[6][258];
  168|       |    Int32 code[6][258];
  169|       |    Int32 rfreq[6][258];
  170|       |    UInt32 len_pack[258][4];
  171|       |};
  172|       |typedef struct __anonstruct_EState_27 EState;
  173|       |typedef void BZFILE;
  174|       |typedef char Char;
  175|       |struct __anonstruct_bzFile_29 {
  176|       |    FILE *handle;
  177|       |    Char buf[5000];
  178|       |    Int32 bufN;
  179|       |    Bool writing;
  180|       |    bz_stream strm;
  181|       |    Int32 lastErr;
  182|       |    Bool initialisedOk;
  183|       |};
  184|       |typedef struct __anonstruct_bzFile_29 bzFile;
  185|       |typedef unsigned long __dev_t;
  186|       |typedef unsigned int __uid_t;
  187|       |typedef unsigned int __gid_t;
  188|       |typedef unsigned long __ino_t;
  189|       |typedef unsigned int __mode_t;
  190|       |typedef unsigned long __nlink_t;
  191|       |typedef long __time_t;
  192|       |typedef long __blksize_t;
  193|       |typedef long __blkcnt_t;
  194|       |typedef long __syscall_slong_t;
  195|       |struct timespec {
  196|       |    __time_t tv_sec;
  197|       |    __syscall_slong_t tv_nsec;
  198|       |};
  199|       |typedef void (*__sighandler_t)(int);
  200|       |struct stat {
  201|       |    __dev_t st_dev;
  202|       |    __ino_t st_ino;
  203|       |    __nlink_t st_nlink;
  204|       |    __mode_t st_mode;
  205|       |    __uid_t st_uid;
  206|       |    __gid_t st_gid;
  207|       |    int __pad0;
  208|       |    __dev_t st_rdev;
  209|       |    __off_t st_size;
  210|       |    __blksize_t st_blksize;
  211|       |    __blkcnt_t st_blocks;
  212|       |    struct timespec st_atim;
  213|       |    struct timespec st_mtim;
  214|       |    struct timespec st_ctim;
  215|       |    __syscall_slong_t __glibc_reserved[3];
  216|       |};
  217|       |struct utimbuf {
  218|       |    __time_t actime;
  219|       |    __time_t modtime;
  220|       |};
  221|       |typedef short Int16;
  222|       |typedef int IntNative;
  223|       |struct __anonstruct_UInt64_56 {
  224|       |    UChar b[8];
  225|       |};
  226|       |typedef struct __anonstruct_UInt64_56 UInt64;
  227|       |struct zzzz {
  228|       |    Char *name;
  229|       |    struct zzzz *link;
  230|       |};
  231|       |typedef struct zzzz Cell;
  232|       |Int32 BZ2_rNums[512];
  233|       |Int32 BZ2_rNums[512] = {
  234|       |    619, 720, 127, 481, 931, 816, 813, 233, 566, 247, 985, 724, 205, 454, 863,
  235|       |    491, 741, 242, 949, 214, 733, 859, 335, 708, 621, 574, 73,  654, 730, 472,
  236|       |    419, 436, 278, 496, 867, 210, 399, 680, 480, 51,  878, 465, 811, 169, 869,
  237|       |    675, 611, 697, 867, 561, 862, 687, 507, 283, 482, 129, 807, 591, 733, 623,
  238|       |    150, 238, 59,  379, 684, 877, 625, 169, 643, 105, 170, 607, 520, 932, 727,
  239|       |    476, 693, 425, 174, 647, 73,  122, 335, 530, 442, 853, 695, 249, 445, 515,
  240|       |    909, 545, 703, 919, 874, 474, 882, 500, 594, 612, 641, 801, 220, 162, 819,
  241|       |    984, 589, 513, 495, 799, 161, 604, 958, 533, 221, 400, 386, 867, 600, 782,
  242|       |    382, 596, 414, 171, 516, 375, 682, 485, 911, 276, 98,  553, 163, 354, 666,
  243|       |    933, 424, 341, 533, 870, 227, 730, 475, 186, 263, 647, 537, 686, 600, 224,
  244|       |    469, 68,  770, 919, 190, 373, 294, 822, 808, 206, 184, 943, 795, 384, 383,
  245|       |    461, 404, 758, 839, 887, 715, 67,  618, 276, 204, 918, 873, 777, 604, 560,
  246|       |    951, 160, 578, 722, 79,  804, 96,  409, 713, 940, 652, 934, 970, 447, 318,
  247|       |    353, 859, 672, 112, 785, 645, 863, 803, 350, 139, 93,  354, 99,  820, 908,
  248|       |    609, 772, 154, 274, 580, 184, 79,  626, 630, 742, 653, 282, 762, 623, 680,
  249|       |    81,  927, 626, 789, 125, 411, 521, 938, 300, 821, 78,  343, 175, 128, 250,
  250|       |    170, 774, 972, 275, 999, 639, 495, 78,  352, 126, 857, 956, 358, 619, 580,
  251|       |    124, 737, 594, 701, 612, 669, 112, 134, 694, 363, 992, 809, 743, 168, 974,
  252|       |    944, 375, 748, 52,  600, 747, 642, 182, 862, 81,  344, 805, 988, 739, 511,
  253|       |    655, 814, 334, 249, 515, 897, 955, 664, 981, 649, 113, 974, 459, 893, 228,
  254|       |    433, 837, 553, 268, 926, 240, 102, 654, 459, 51,  686, 754, 806, 760, 493,
  255|       |    403, 415, 394, 687, 700, 946, 670, 656, 610, 738, 392, 760, 799, 887, 653,
  256|       |    978, 321, 576, 617, 626, 502, 894, 679, 243, 440, 680, 879, 194, 572, 640,
  257|       |    724, 926, 56,  204, 700, 707, 151, 457, 449, 797, 195, 791, 558, 945, 679,
  258|       |    297, 59,  87,  824, 713, 663, 412, 693, 342, 606, 134, 108, 571, 364, 631,
  259|       |    212, 174, 643, 304, 329, 343, 97,  430, 751, 497, 314, 983, 374, 822, 928,
  260|       |    140, 206, 73,  263, 980, 736, 876, 478, 430, 305, 170, 514, 364, 692, 829,
  261|       |    82,  855, 953, 676, 246, 369, 970, 294, 750, 807, 827, 150, 790, 288, 923,
  262|       |    804, 378, 215, 828, 592, 281, 565, 555, 710, 82,  896, 831, 547, 261, 524,
  263|       |    462, 293, 465, 502, 56,  661, 821, 976, 991, 658, 869, 905, 758, 745, 193,
  264|       |    768, 550, 608, 933, 378, 286, 215, 979, 792, 961, 61,  688, 793, 644, 986,
  265|       |    403, 106, 366, 905, 644, 372, 567, 466, 434, 645, 210, 389, 550, 919, 135,
  266|       |    780, 773, 635, 389, 707, 100, 626, 958, 165, 504, 920, 176, 193, 713, 857,
  267|       |    265, 203, 50,  668, 108, 645, 990, 626, 197, 510, 357, 358, 850, 858, 364,
  268|       |    936, 638
  269|       |};
  270|       |void BZ2_bz__AssertH__fail(int errcode);
  271|       |void BZ2_hbAssignCodes(Int32 *code, UChar *length, Int32 minLen, Int32 maxLen,
  272|       |                       Int32 alphaSize);
  273|       |void BZ2_hbMakeCodeLengths(UChar *len, Int32 *freq, Int32 alphaSize,
  274|       |                           Int32 maxLen);
  275|       |void BZ2_hbCreateDecodeTables(Int32 *limit, Int32 *base, Int32 *perm,
  276|       |                              UChar *length, Int32 minLen, Int32 maxLen,
  277|       |                              Int32 alphaSize);
  278|       |void BZ2_hbMakeCodeLengths(UChar *len, Int32 *freq, Int32 alphaSize,
  279|       |                           Int32 maxLen)
  280|      8|{
  281|      8|    Int32 nNodes;
  282|      8|    Int32 nHeap;
  283|      8|    Int32 n1;
  284|      8|    Int32 n2;
  285|      8|    Int32 i;
  286|      8|    Int32 j;
  287|      8|    Int32 k;
  288|      8|    Bool tooLong;
  289|      8|    Int32 heap[260];
  290|      8|    Int32 weight[516];
  291|      8|    Int32 parent[516];
  292|      8|    int tmp;
  293|      8|    Int32 zz;
  294|      8|    Int32 tmp___0;
  295|      8|    Int32 zz___0;
  296|      8|    Int32 yy;
  297|      8|    Int32 tmp___1;
  298|      8|    Int32 zz___1;
  299|      8|    Int32 yy___0;
  300|      8|    Int32 tmp___2;
  301|      8|    Int32 tmp___3;
  302|      8|    int tmp___4;
  303|      8|    Int32 zz___2;
  304|      8|    Int32 tmp___5;
  305|      8|    void *__cil_tmp29;
  306|      8|    void *__cil_tmp30;
  307|      8|    void *__cil_tmp31;
  308|       |
  309|      8|    {
  310|      8|        i = 0;
  311|      8|        {
  312|    160|            while (1) {
  313|    160|while_continue: /* CIL Label */
  314|    160|                ;
  315|    160|                if (!(i < alphaSize)) {
  316|      8|                    goto while_break;
  317|      8|                }
  318|    152|                if (*(freq + i) == 0) {
  319|     88|                    tmp = 1;
  320|     88|                }
  321|     64|                else {
  322|     64|                    tmp = *(freq + i);
  323|     64|                }
  324|    152|                weight[i + 1] = tmp << 8;
  325|    152|                i++;
  326|    152|            }
  327|      8|while_break: /* CIL Label */
  328|      8|            ;
  329|      8|        }
  330|      0|        {
  331|      8|            while (1) {
  332|      8|while_continue___0: /* CIL Label */
  333|      8|                ;
  334|      8|                nNodes = alphaSize;
  335|      8|                nHeap = 0;
  336|      8|                heap[0] = 0;
  337|      8|                weight[0] = 0;
  338|      8|                parent[0] = -2;
  339|      8|                i = 1;
  340|      8|                {
  341|    160|                    while (1) {
  342|    160|while_continue___1: /* CIL Label */
  343|    160|                        ;
  344|    160|                        if (!(i <= alphaSize)) {
  345|      8|                            goto while_break___1;
  346|      8|                        }
  347|    152|                        parent[i] = -1;
  348|    152|                        nHeap++;
  349|    152|                        heap[nHeap] = i;
  350|    152|                        zz = nHeap;
  351|    152|                        tmp___0 = heap[zz];
  352|    152|                        {
  353|    160|                            while (1) {
  354|    160|while_continue___2: /* CIL Label */
  355|    160|                                ;
  356|    160|                                if (!(weight[tmp___0] < weight[heap[zz >> 1]])) {
  357|    152|                                    goto while_break___2;
  358|    152|                                }
  359|      8|                                heap[zz] = heap[zz >> 1];
  360|      8|                                zz >>= 1;
  361|      8|                            }
  362|    152|while_break___2: /* CIL Label */
  363|    152|                            ;
  364|    152|                        }
  365|      0|                        heap[zz] = tmp___0;
  366|    152|                        i++;
  367|    152|                    }
  368|      8|while_break___1: /* CIL Label */
  369|      8|                    ;
  370|      8|                }
  371|      8|                if (!(nHeap < 260)) {
  372|      0|                    {
  373|      0|                        BZ2_bz__AssertH__fail(2001);
  374|      0|                    }
  375|      0|                }
  376|      8|                {
  377|    152|                    while (1) {
  378|    152|while_continue___3: /* CIL Label */
  379|    152|                        ;
  380|    152|                        if (!(nHeap > 1)) {
  381|      8|                            goto while_break___3;
  382|      8|                        }
  383|    144|                        n1 = heap[1];
  384|    144|                        heap[1] = heap[nHeap];
  385|    144|                        nHeap--;
  386|    144|                        zz___0 = 1;
  387|    144|                        tmp___1 = heap[zz___0];
  388|    144|                        {
  389|    488|                            while (1) {
  390|    488|while_continue___4: /* CIL Label */
  391|    488|                                ;
  392|    488|                                yy = zz___0 << 1;
  393|    488|                                if (yy > nHeap) {
  394|    136|                                    goto while_break___4;
  395|    136|                                }
  396|    352|                                if (yy < nHeap) {
  397|    308|                                    if (weight[heap[yy + 1]] < weight[heap[yy]]) {
  398|     76|                                        yy++;
  399|     76|                                    }
  400|    308|                                }
  401|    352|                                if (weight[tmp___1] < weight[heap[yy]]) {
  402|      8|                                    goto while_break___4;
  403|      8|                                }
  404|    344|                                heap[zz___0] = heap[yy];
  405|    344|                                zz___0 = yy;
  406|    344|                            }
  407|    144|while_break___4: /* CIL Label */
  408|    144|                            ;
  409|    144|                        }
  410|      0|                        heap[zz___0] = tmp___1;
  411|    144|                        n2 = heap[1];
  412|    144|                        heap[1] = heap[nHeap];
  413|    144|                        nHeap--;
  414|    144|                        zz___1 = 1;
  415|    144|                        tmp___2 = heap[zz___1];
  416|    144|                        {
  417|    416|                            while (1) {
  418|    416|while_continue___5: /* CIL Label */
  419|    416|                                ;
  420|    416|                                yy___0 = zz___1 << 1;
  421|    416|                                if (yy___0 > nHeap) {
  422|    116|                                    goto while_break___5;
  423|    116|                                }
  424|    300|                                if (yy___0 < nHeap) {
  425|    272|                                    if (weight[heap[yy___0 + 1]] < weight[heap[yy___0]]) {
  426|    100|                                        yy___0++;
  427|    100|                                    }
  428|    272|                                }
  429|    300|                                if (weight[tmp___2] < weight[heap[yy___0]]) {
  430|     28|                                    goto while_break___5;
  431|     28|                                }
  432|    272|                                heap[zz___1] = heap[yy___0];
  433|    272|                                zz___1 = yy___0;
  434|    272|                            }
  435|    144|while_break___5: /* CIL Label */
  436|    144|                            ;
  437|    144|                        }
  438|      0|                        heap[zz___1] = tmp___2;
  439|    144|                        nNodes++;
  440|    144|                        tmp___3 = nNodes;
  441|    144|                        parent[n2] = tmp___3;
  442|    144|                        parent[n1] = tmp___3;
  443|    144|                        if ((weight[n1] & 255) > (weight[n2] & 255)) {
  444|      4|                            tmp___4 = weight[n1] & 255;
  445|      4|                        }
  446|    140|                        else {
  447|    140|                            tmp___4 = weight[n2] & 255;
  448|    140|                        }
  449|    144|                        weight[nNodes] =
  450|    144|                            (Int32)((((unsigned int)weight[n1] & 4294967040U) +
  451|    144|                                     ((unsigned int)weight[n2] & 4294967040U)) |
  452|    144|                                    (unsigned int)(1 + tmp___4));
  453|    144|                        parent[nNodes] = -1;
  454|    144|                        nHeap++;
  455|    144|                        heap[nHeap] = nNodes;
  456|    144|                        zz___2 = nHeap;
  457|    144|                        tmp___5 = heap[zz___2];
  458|    144|                        {
  459|    148|                            while (1) {
  460|    148|while_continue___6: /* CIL Label */
  461|    148|                                ;
  462|    148|                                if (!(weight[tmp___5] < weight[heap[zz___2 >> 1]])) {
  463|    144|                                    goto while_break___6;
  464|    144|                                }
  465|      4|                                heap[zz___2] = heap[zz___2 >> 1];
  466|      4|                                zz___2 >>= 1;
  467|      4|                            }
  468|    144|while_break___6: /* CIL Label */
  469|    144|                            ;
  470|    144|                        }
  471|      0|                        heap[zz___2] = tmp___5;
  472|    144|                    }
  473|      8|while_break___3: /* CIL Label */
  474|      8|                    ;
  475|      8|                }
  476|      8|                if (!(nNodes < 516)) {
  477|      0|                    {
  478|      0|                        BZ2_bz__AssertH__fail(2002);
  479|      0|                    }
  480|      0|                }
  481|      8|                tooLong = (Bool)0;
  482|      8|                i = 1;
  483|      8|                {
  484|    160|                    while (1) {
  485|    160|while_continue___7: /* CIL Label */
  486|    160|                        ;
  487|    160|                        if (!(i <= alphaSize)) {
  488|      8|                            goto while_break___7;
  489|      8|                        }
  490|    152|                        j = 0;
  491|    152|                        k = i;
  492|    152|                        {
  493|    816|                            while (1) {
  494|    816|while_continue___8: /* CIL Label */
  495|    816|                                ;
  496|    816|                                if (!(parent[k] >= 0)) {
  497|    152|                                    goto while_break___8;
  498|    152|                                }
  499|    664|                                k = parent[k];
  500|    664|                                j++;
  501|    664|                            }
  502|    152|while_break___8: /* CIL Label */
  503|    152|                            ;
  504|    152|                        }
  505|      0|                        *(len + (i - 1)) = (UChar)j;
  506|    152|                        if (j > maxLen) {
  507|      0|                            tooLong = (Bool)1;
  508|      0|                        }
  509|    152|                        i++;
  510|    152|                    }
  511|      8|while_break___7: /* CIL Label */
  512|      8|                    ;
  513|      8|                }
  514|      8|                if (!tooLong) {
  515|      8|                    goto while_break___0;
  516|      8|                }
  517|      0|                i = 1;
  518|      0|                {
  519|      0|                    while (1) {
  520|      0|while_continue___9: /* CIL Label */
  521|      0|                        ;
  522|      0|                        if (!(i <= alphaSize)) {
  523|      0|                            goto while_break___9;
  524|      0|                        }
  525|      0|                        j = weight[i] >> 8;
  526|      0|                        j = 1 + j / 2;
  527|      0|                        weight[i] = j << 8;
  528|      0|                        i++;
  529|      0|                    }
  530|      0|while_break___9: /* CIL Label */
  531|      0|                    ;
  532|      0|                }
  533|      0|            }
  534|      8|while_break___0: /* CIL Label */
  535|      8|            ;
  536|      8|        }
  537|      0|        return;
  538|      8|    }
  539|      8|}
  540|       |void BZ2_hbAssignCodes(Int32 *code, UChar *length, Int32 minLen, Int32 maxLen,
  541|       |                       Int32 alphaSize)
  542|      2|{
  543|      2|    Int32 n;
  544|      2|    Int32 vec;
  545|      2|    Int32 i;
  546|       |
  547|      2|    {
  548|      2|        vec = 0;
  549|      2|        n = minLen;
  550|      2|        {
  551|      7|            while (1) {
  552|      7|while_continue: /* CIL Label */
  553|      7|                ;
  554|      7|                if (!(n <= maxLen)) {
  555|      2|                    goto while_break;
  556|      2|                }
  557|      5|                i = 0;
  558|      5|                {
  559|    100|                    while (1) {
  560|    100|while_continue___0: /* CIL Label */
  561|    100|                        ;
  562|    100|                        if (!(i < alphaSize)) {
  563|      5|                            goto while_break___0;
  564|      5|                        }
  565|     95|                        if ((int)*(length + i) == n) {
  566|     38|                            *(code + i) = vec;
  567|     38|                            vec++;
  568|     38|                        }
  569|     95|                        i++;
  570|     95|                    }
  571|      5|while_break___0: /* CIL Label */
  572|      5|                    ;
  573|      5|                }
  574|      0|                vec <<= 1;
  575|      5|                n++;
  576|      5|            }
  577|      2|while_break: /* CIL Label */
  578|      2|            ;
  579|      2|        }
  580|      0|        return;
  581|      2|    }
  582|      2|}
  583|       |void BZ2_hbCreateDecodeTables(Int32 *limit, Int32 *base, Int32 *perm,
  584|       |                              UChar *length, Int32 minLen, Int32 maxLen,
  585|       |                              Int32 alphaSize)
  586|     20|{
  587|     20|    Int32 pp;
  588|     20|    Int32 i;
  589|     20|    Int32 j;
  590|     20|    Int32 vec;
  591|       |
  592|     20|    {
  593|     20|        pp = 0;
  594|     20|        i = minLen;
  595|     20|        {
  596|    180|            while (1) {
  597|    180|while_continue: /* CIL Label */
  598|    180|                ;
  599|    180|                if (!(i <= maxLen)) {
  600|     20|                    goto while_break;
  601|     20|                }
  602|    160|                j = 0;
  603|    160|                {
  604|  30.6k|                    while (1) {
  605|  30.6k|while_continue___0: /* CIL Label */
  606|  30.6k|                        ;
  607|  30.6k|                        if (!(j < alphaSize)) {
  608|    160|                            goto while_break___0;
  609|    160|                        }
  610|  30.4k|                        if ((int)*(length + j) == i) {
  611|  3.89k|                            *(perm + pp) = j;
  612|  3.89k|                            pp++;
  613|  3.89k|                        }
  614|  30.4k|                        j++;
  615|  30.4k|                    }
  616|    160|while_break___0: /* CIL Label */
  617|    160|                    ;
  618|    160|                }
  619|      0|                i++;
  620|    160|            }
  621|     20|while_break: /* CIL Label */
  622|     20|            ;
  623|     20|        }
  624|      0|        i = 0;
  625|     20|        {
  626|    480|            while (1) {
  627|    480|while_continue___1: /* CIL Label */
  628|    480|                ;
  629|    480|                if (!(i < 23)) {
  630|     20|                    goto while_break___1;
  631|     20|                }
  632|    460|                *(base + i) = 0;
  633|    460|                i++;
  634|    460|            }
  635|     20|while_break___1: /* CIL Label */
  636|     20|            ;
  637|     20|        }
  638|      0|        i = 0;
  639|     20|        {
  640|  3.91k|            while (1) {
  641|  3.91k|while_continue___2: /* CIL Label */
  642|  3.91k|                ;
  643|  3.91k|                if (!(i < alphaSize)) {
  644|     20|                    goto while_break___2;
  645|     20|                }
  646|  3.89k|                (*(base + ((int)*(length + i) + 1)))++;
  647|  3.89k|                i++;
  648|  3.89k|            }
  649|     20|while_break___2: /* CIL Label */
  650|     20|            ;
  651|     20|        }
  652|      0|        i = 1;
  653|     20|        {
  654|    460|            while (1) {
  655|    460|while_continue___3: /* CIL Label */
  656|    460|                ;
  657|    460|                if (!(i < 23)) {
  658|     20|                    goto while_break___3;
  659|     20|                }
  660|    440|                *(base + i) += *(base + (i - 1));
  661|    440|                i++;
  662|    440|            }
  663|     20|while_break___3: /* CIL Label */
  664|     20|            ;
  665|     20|        }
  666|      0|        i = 0;
  667|     20|        {
  668|    480|            while (1) {
  669|    480|while_continue___4: /* CIL Label */
  670|    480|                ;
  671|    480|                if (!(i < 23)) {
  672|     20|                    goto while_break___4;
  673|     20|                }
  674|    460|                *(limit + i) = 0;
  675|    460|                i++;
  676|    460|            }
  677|     20|while_break___4: /* CIL Label */
  678|     20|            ;
  679|     20|        }
  680|      0|        vec = 0;
  681|     20|        i = minLen;
  682|     20|        {
  683|    180|            while (1) {
  684|    180|while_continue___5: /* CIL Label */
  685|    180|                ;
  686|    180|                if (!(i <= maxLen)) {
  687|     20|                    goto while_break___5;
  688|     20|                }
  689|    160|                vec += *(base + (i + 1)) - *(base + i);
  690|    160|                *(limit + i) = vec - 1;
  691|    160|                vec <<= 1;
  692|    160|                i++;
  693|    160|            }
  694|     20|while_break___5: /* CIL Label */
  695|     20|            ;
  696|     20|        }
  697|      0|        i = minLen + 1;
  698|     20|        {
  699|    160|            while (1) {
  700|    160|while_continue___6: /* CIL Label */
  701|    160|                ;
  702|    160|                if (!(i <= maxLen)) {
  703|     20|                    goto while_break___6;
  704|     20|                }
  705|    140|                *(base + i) = ((*(limit + (i - 1)) + 1) << 1) - *(base + i);
  706|    140|                i++;
  707|    140|            }
  708|     20|while_break___6: /* CIL Label */
  709|     20|            ;
  710|     20|        }
  711|      0|        return;
  712|     20|    }
  713|     20|}
  714|       |extern struct _IO_FILE *stderr;
  715|       |extern int fprintf(FILE *__restrict __stream, char const *__restrict __format,
  716|       |                   ...);
  717|       |Int32 BZ2_indexIntoF(Int32 indx, Int32 *cftab);
  718|       |Int32 BZ2_decompress(DState *s);
  719|       |static void makeMaps_d(DState *s)
  720|      4|{
  721|      4|    Int32 i;
  722|       |
  723|      4|    {
  724|      4|        s->nInUse = 0;
  725|      4|        i = 0;
  726|      4|        {
  727|  1.02k|            while (1) {
  728|  1.02k|while_continue: /* CIL Label */
  729|  1.02k|                ;
  730|  1.02k|                if (!(i < 256)) {
  731|      4|                    goto while_break;
  732|      4|                }
  733|  1.02k|                if (s->inUse[i]) {
  734|    653|                    s->seqToUnseq[s->nInUse] = (UChar)i;
  735|    653|                    (s->nInUse)++;
  736|    653|                }
  737|  1.02k|                i++;
  738|  1.02k|            }
  739|      4|while_break: /* CIL Label */
  740|      4|            ;
  741|      4|        }
  742|      0|        return;
  743|      4|    }
  744|      4|}
  745|       |Int32 BZ2_decompress(DState *s)
  746|    226|{
  747|    226|    UChar uc;
  748|    226|    Int32 retVal;
  749|    226|    Int32 minLen;
  750|    226|    Int32 maxLen;
  751|    226|    bz_stream *strm;
  752|    226|    Int32 i;
  753|    226|    Int32 j;
  754|    226|    Int32 t;
  755|    226|    Int32 alphaSize;
  756|    226|    Int32 nGroups;
  757|    226|    Int32 nSelectors;
  758|    226|    Int32 EOB;
  759|    226|    Int32 groupNo;
  760|    226|    Int32 groupPos;
  761|    226|    Int32 nextSym;
  762|    226|    Int32 nblockMAX;
  763|    226|    Int32 nblock;
  764|    226|    Int32 es;
  765|    226|    Int32 N;
  766|    226|    Int32 curr;
  767|    226|    Int32 zt;
  768|    226|    Int32 zn;
  769|    226|    Int32 zvec;
  770|    226|    Int32 zj;
  771|    226|    Int32 gSel;
  772|    226|    Int32 gMinlen;
  773|    226|    Int32 *gLimit;
  774|    226|    Int32 *gBase;
  775|    226|    Int32 *gPerm;
  776|    226|    UInt32 v;
  777|    226|    UInt32 v___0;
  778|    226|    UInt32 v___1;
  779|    226|    UInt32 v___2;
  780|    226|    UInt32 v___3;
  781|    226|    UInt32 v___4;
  782|    226|    UInt32 v___5;
  783|    226|    UInt32 v___6;
  784|    226|    UInt32 v___7;
  785|    226|    UInt32 v___8;
  786|    226|    UInt32 v___9;
  787|    226|    UInt32 v___10;
  788|    226|    UInt32 v___11;
  789|    226|    UInt32 v___12;
  790|    226|    UInt32 v___13;
  791|    226|    UInt32 v___14;
  792|    226|    UInt32 v___15;
  793|    226|    UInt32 v___16;
  794|    226|    UInt32 v___17;
  795|    226|    UInt32 v___18;
  796|    226|    UInt32 v___19;
  797|    226|    UInt32 v___20;
  798|    226|    UInt32 v___21;
  799|    226|    UChar pos[6];
  800|    226|    UChar tmp;
  801|    226|    UChar v___22;
  802|    226|    UInt32 v___23;
  803|    226|    UInt32 v___24;
  804|    226|    UInt32 v___25;
  805|    226|    Int32 ii;
  806|    226|    Int32 jj;
  807|    226|    Int32 kk;
  808|    226|    UInt32 v___26;
  809|    226|    UInt32 v___27;
  810|    226|    UInt32 v___28;
  811|    226|    UInt32 v___29;
  812|    226|    Int32 ii___0;
  813|    226|    Int32 jj___0;
  814|    226|    Int32 kk___0;
  815|    226|    Int32 pp;
  816|    226|    Int32 lno;
  817|    226|    Int32 off;
  818|    226|    UInt32 nn;
  819|    226|    Int32 z;
  820|    226|    UInt32 v___30;
  821|    226|    UInt32 v___31;
  822|    226|    Int32 tmp___0;
  823|    226|    int tmp___1;
  824|    226|    int tmp___2;
  825|    226|    UInt32 v___32;
  826|    226|    UInt32 v___33;
  827|    226|    UInt32 v___34;
  828|    226|    UInt32 v___35;
  829|    226|    UInt32 v___36;
  830|    226|    UInt32 v___37;
  831|    226|    UInt32 v___38;
  832|    226|    UInt32 v___39;
  833|    226|    UInt32 v___40;
  834|    226|    void *__cil_tmp92;
  835|       |
  836|    226|    {
  837|    226|        strm = s->strm;
  838|    226|        if (s->state == 10) {
  839|      5|            s->save_i = 0;
  840|      5|            s->save_j = 0;
  841|      5|            s->save_t = 0;
  842|      5|            s->save_alphaSize = 0;
  843|      5|            s->save_nGroups = 0;
  844|      5|            s->save_nSelectors = 0;
  845|      5|            s->save_EOB = 0;
  846|      5|            s->save_groupNo = 0;
  847|      5|            s->save_groupPos = 0;
  848|      5|            s->save_nextSym = 0;
  849|      5|            s->save_nblockMAX = 0;
  850|      5|            s->save_nblock = 0;
  851|      5|            s->save_es = 0;
  852|      5|            s->save_N = 0;
  853|      5|            s->save_curr = 0;
  854|      5|            s->save_zt = 0;
  855|      5|            s->save_zn = 0;
  856|      5|            s->save_zvec = 0;
  857|      5|            s->save_zj = 0;
  858|      5|            s->save_gSel = 0;
  859|      5|            s->save_gMinlen = 0;
  860|      5|            s->save_gLimit = (Int32 *)((void *)0);
  861|      5|            s->save_gBase = (Int32 *)((void *)0);
  862|      5|            s->save_gPerm = (Int32 *)((void *)0);
  863|      5|        }
  864|    226|        i = s->save_i;
  865|    226|        j = s->save_j;
  866|    226|        t = s->save_t;
  867|    226|        alphaSize = s->save_alphaSize;
  868|    226|        nGroups = s->save_nGroups;
  869|    226|        nSelectors = s->save_nSelectors;
  870|    226|        EOB = s->save_EOB;
  871|    226|        groupNo = s->save_groupNo;
  872|    226|        groupPos = s->save_groupPos;
  873|    226|        nextSym = s->save_nextSym;
  874|    226|        nblockMAX = s->save_nblockMAX;
  875|    226|        nblock = s->save_nblock;
  876|    226|        es = s->save_es;
  877|    226|        N = s->save_N;
  878|    226|        curr = s->save_curr;
  879|    226|        zt = s->save_zt;
  880|    226|        zn = s->save_zn;
  881|    226|        zvec = s->save_zvec;
  882|    226|        zj = s->save_zj;
  883|    226|        gSel = s->save_gSel;
  884|    226|        gMinlen = s->save_gMinlen;
  885|    226|        gLimit = s->save_gLimit;
  886|    226|        gBase = s->save_gBase;
  887|    226|        gPerm = s->save_gPerm;
  888|    226|        retVal = 0;
  889|    226|        {
  890|    226|            if (s->state == 10) {
  891|      5|                goto case_10;
  892|      5|            }
  893|    221|            if (s->state == 11) {
  894|      0|                goto case_11;
  895|      0|            }
  896|    221|            if (s->state == 12) {
  897|      0|                goto case_12;
  898|      0|            }
  899|    221|            if (s->state == 13) {
  900|      0|                goto case_13;
  901|      0|            }
  902|    221|            if (s->state == 14) {
  903|      4|                goto case_14;
  904|      4|            }
  905|    217|            if (s->state == 15) {
  906|      0|                goto case_15;
  907|      0|            }
  908|    217|            if (s->state == 16) {
  909|      0|                goto case_16;
  910|      0|            }
  911|    217|            if (s->state == 17) {
  912|      0|                goto case_17;
  913|      0|            }
  914|    217|            if (s->state == 18) {
  915|      0|                goto case_18;
  916|      0|            }
  917|    217|            if (s->state == 19) {
  918|      0|                goto case_19;
  919|      0|            }
  920|    217|            if (s->state == 20) {
  921|      0|                goto case_20;
  922|      0|            }
  923|    217|            if (s->state == 21) {
  924|      0|                goto case_21;
  925|      0|            }
  926|    217|            if (s->state == 22) {
  927|      0|                goto case_22;
  928|      0|            }
  929|    217|            if (s->state == 23) {
  930|      0|                goto case_23;
  931|      0|            }
  932|    217|            if (s->state == 24) {
  933|      0|                goto case_24;
  934|      0|            }
  935|    217|            if (s->state == 25) {
  936|      0|                goto case_25;
  937|      0|            }
  938|    217|            if (s->state == 26) {
  939|      0|                goto case_26;
  940|      0|            }
  941|    217|            if (s->state == 27) {
  942|      0|                goto case_27;
  943|      0|            }
  944|    217|            if (s->state == 28) {
  945|      0|                goto case_28;
  946|      0|            }
  947|    217|            if (s->state == 29) {
  948|      0|                goto case_29;
  949|      0|            }
  950|    217|            if (s->state == 30) {
  951|      0|                goto case_30;
  952|      0|            }
  953|    217|            if (s->state == 31) {
  954|      0|                goto case_31;
  955|      0|            }
  956|    217|            if (s->state == 32) {
  957|      2|                goto case_32;
  958|      2|            }
  959|    215|            if (s->state == 33) {
  960|      0|                goto case_33;
  961|      0|            }
  962|    215|            if (s->state == 34) {
  963|      0|                goto case_34;
  964|      0|            }
  965|    215|            if (s->state == 35) {
  966|      0|                goto case_35;
  967|      0|            }
  968|    215|            if (s->state == 36) {
  969|      0|                goto case_36;
  970|      0|            }
  971|    215|            if (s->state == 37) {
  972|      0|                goto case_37;
  973|      0|            }
  974|    215|            if (s->state == 38) {
  975|      2|                goto case_38;
  976|      2|            }
  977|    213|            if (s->state == 39) {
  978|      0|                goto case_39;
  979|      0|            }
  980|    213|            if (s->state == 40) {
  981|    173|                goto case_40;
  982|    173|            }
  983|     40|            if (s->state == 41) {
  984|     40|                goto case_41;
  985|     40|            }
  986|      0|            if (s->state == 42) {
  987|      0|                goto endhdr_2;
  988|      0|            }
  989|      0|            if (s->state == 43) {
  990|      0|                goto case_43;
  991|      0|            }
  992|      0|            if (s->state == 44) {
  993|      0|                goto case_44;
  994|      0|            }
  995|      0|            if (s->state == 45) {
  996|      0|                goto case_45;
  997|      0|            }
  998|      0|            if (s->state == 46) {
  999|      0|                goto case_46;
 1000|      0|            }
 1001|      0|            if (s->state == 47) {
 1002|      0|                goto case_47;
 1003|      0|            }
 1004|      0|            if (s->state == 48) {
 1005|      0|                goto case_48;
 1006|      0|            }
 1007|      0|            if (s->state == 49) {
 1008|      0|                goto case_49;
 1009|      0|            }
 1010|      0|            if (s->state == 50) {
 1011|      0|                goto case_50;
 1012|      0|            }
 1013|      0|            goto switch_default;
 1014|      5|case_10: /* CIL Label */
 1015|      5|            s->state = 10;
 1016|      5|            {
 1017|     10|                while (1) {
 1018|     10|while_continue: /* CIL Label */
 1019|     10|                    ;
 1020|     10|                    if (s->bsLive >= 8) {
 1021|      5|                        v = (s->bsBuff >> (s->bsLive - 8)) & (unsigned int)((1 << 8) - 1);
 1022|      5|                        s->bsLive -= 8;
 1023|      5|                        uc = (UChar)v;
 1024|      5|                        goto while_break;
 1025|      5|                    }
 1026|      5|                    if ((s->strm)->avail_in == 0U) {
 1027|      0|                        retVal = 0;
 1028|      0|                        goto save_state_and_return;
 1029|      0|                    }
 1030|      5|                    s->bsBuff =
 1031|      5|                        (s->bsBuff << 8) | (UInt32) * ((UChar *)(s->strm)->next_in);
 1032|      5|                    s->bsLive += 8;
 1033|      5|                    ((s->strm)->next_in)++;
 1034|      5|                    ((s->strm)->avail_in)--;
 1035|      5|                    ((s->strm)->total_in_lo32)++;
 1036|      5|                    if ((s->strm)->total_in_lo32 == 0U) {
 1037|      0|                        ((s->strm)->total_in_hi32)++;
 1038|      0|                    }
 1039|      5|                }
 1040|      5|while_break: /* CIL Label */
 1041|      5|                ;
 1042|      5|            }
 1043|      5|            if ((int)uc != 66) {
 1044|      0|                retVal = -5;
 1045|      0|                goto save_state_and_return;
 1046|      0|            }
 1047|      5|case_11: /* CIL Label */
 1048|      5|            s->state = 11;
 1049|      5|            {
 1050|     10|                while (1) {
 1051|     10|while_continue___0: /* CIL Label */
 1052|     10|                    ;
 1053|     10|                    if (s->bsLive >= 8) {
 1054|      5|                        v___0 =
 1055|      5|                            (s->bsBuff >> (s->bsLive - 8)) & (unsigned int)((1 << 8) - 1);
 1056|      5|                        s->bsLive -= 8;
 1057|      5|                        uc = (UChar)v___0;
 1058|      5|                        goto while_break___0;
 1059|      5|                    }
 1060|      5|                    if ((s->strm)->avail_in == 0U) {
 1061|      0|                        retVal = 0;
 1062|      0|                        goto save_state_and_return;
 1063|      0|                    }
 1064|      5|                    s->bsBuff =
 1065|      5|                        (s->bsBuff << 8) | (UInt32) * ((UChar *)(s->strm)->next_in);
 1066|      5|                    s->bsLive += 8;
 1067|      5|                    ((s->strm)->next_in)++;
 1068|      5|                    ((s->strm)->avail_in)--;
 1069|      5|                    ((s->strm)->total_in_lo32)++;
 1070|      5|                    if ((s->strm)->total_in_lo32 == 0U) {
 1071|      0|                        ((s->strm)->total_in_hi32)++;
 1072|      0|                    }
 1073|      5|                }
 1074|      5|while_break___0: /* CIL Label */
 1075|      5|                ;
 1076|      5|            }
 1077|      5|            if ((int)uc != 90) {
 1078|      0|                retVal = -5;
 1079|      0|                goto save_state_and_return;
 1080|      0|            }
 1081|      5|case_12: /* CIL Label */
 1082|      5|            s->state = 12;
 1083|      5|            {
 1084|     10|                while (1) {
 1085|     10|while_continue___1: /* CIL Label */
 1086|     10|                    ;
 1087|     10|                    if (s->bsLive >= 8) {
 1088|      5|                        v___1 =
 1089|      5|                            (s->bsBuff >> (s->bsLive - 8)) & (unsigned int)((1 << 8) - 1);
 1090|      5|                        s->bsLive -= 8;
 1091|      5|                        uc = (UChar)v___1;
 1092|      5|                        goto while_break___1;
 1093|      5|                    }
 1094|      5|                    if ((s->strm)->avail_in == 0U) {
 1095|      0|                        retVal = 0;
 1096|      0|                        goto save_state_and_return;
 1097|      0|                    }
 1098|      5|                    s->bsBuff =
 1099|      5|                        (s->bsBuff << 8) | (UInt32) * ((UChar *)(s->strm)->next_in);
 1100|      5|                    s->bsLive += 8;
 1101|      5|                    ((s->strm)->next_in)++;
 1102|      5|                    ((s->strm)->avail_in)--;
 1103|      5|                    ((s->strm)->total_in_lo32)++;
 1104|      5|                    if ((s->strm)->total_in_lo32 == 0U) {
 1105|      0|                        ((s->strm)->total_in_hi32)++;
 1106|      0|                    }
 1107|      5|                }
 1108|      5|while_break___1: /* CIL Label */
 1109|      5|                ;
 1110|      5|            }
 1111|      5|            if ((int)uc != 104) {
 1112|      0|                retVal = -5;
 1113|      0|                goto save_state_and_return;
 1114|      0|            }
 1115|      5|case_13: /* CIL Label */
 1116|      5|            s->state = 13;
 1117|      5|            {
 1118|     10|                while (1) {
 1119|     10|while_continue___2: /* CIL Label */
 1120|     10|                    ;
 1121|     10|                    if (s->bsLive >= 8) {
 1122|      5|                        v___2 =
 1123|      5|                            (s->bsBuff >> (s->bsLive - 8)) & (unsigned int)((1 << 8) - 1);
 1124|      5|                        s->bsLive -= 8;
 1125|      5|                        s->blockSize100k = (Int32)v___2;
 1126|      5|                        goto while_break___2;
 1127|      5|                    }
 1128|      5|                    if ((s->strm)->avail_in == 0U) {
 1129|      0|                        retVal = 0;
 1130|      0|                        goto save_state_and_return;
 1131|      0|                    }
 1132|      5|                    s->bsBuff =
 1133|      5|                        (s->bsBuff << 8) | (UInt32) * ((UChar *)(s->strm)->next_in);
 1134|      5|                    s->bsLive += 8;
 1135|      5|                    ((s->strm)->next_in)++;
 1136|      5|                    ((s->strm)->avail_in)--;
 1137|      5|                    ((s->strm)->total_in_lo32)++;
 1138|      5|                    if ((s->strm)->total_in_lo32 == 0U) {
 1139|      0|                        ((s->strm)->total_in_hi32)++;
 1140|      0|                    }
 1141|      5|                }
 1142|      5|while_break___2: /* CIL Label */
 1143|      5|                ;
 1144|      5|            }
 1145|      5|            if (s->blockSize100k < 49) {
 1146|      0|                retVal = -5;
 1147|      0|                goto save_state_and_return;
 1148|      0|            }
 1149|      5|            else {
 1150|      5|                if (s->blockSize100k > 57) {
 1151|      0|                    retVal = -5;
 1152|      0|                    goto save_state_and_return;
 1153|      0|                }
 1154|      5|            }
 1155|      5|            s->blockSize100k -= 48;
 1156|      5|            if (s->smallDecompress) {
 1157|      0|                {
 1158|      0|                    s->ll16 = (UInt16 *)(*(strm->bzalloc))(
 1159|      0|                                  strm->opaque,
 1160|      0|                                  (int)((unsigned long)(s->blockSize100k * 100000) *
 1161|      0|                                        sizeof(UInt16)),
 1162|      0|                                  1);
 1163|      0|                    s->ll4 = (UChar *)(*(strm->bzalloc))(
 1164|      0|                                 strm->opaque,
 1165|      0|                                 (int)((unsigned long)((1 + s->blockSize100k * 100000) >> 1) *
 1166|      0|                                       sizeof(UChar)),
 1167|      0|                                 1);
 1168|      0|                }
 1169|      0|                if ((unsigned long)s->ll16 == (unsigned long)((void *)0)) {
 1170|      0|                    retVal = -3;
 1171|      0|                    goto save_state_and_return;
 1172|      0|                }
 1173|      0|                else {
 1174|      0|                    if ((unsigned long)s->ll4 == (unsigned long)((void *)0)) {
 1175|      0|                        retVal = -3;
 1176|      0|                        goto save_state_and_return;
 1177|      0|                    }
 1178|      0|                }
 1179|      0|            }
 1180|      5|            else {
 1181|      5|                {
 1182|      5|                    s->tt = (UInt32 *)(*(strm->bzalloc))(
 1183|      5|                                strm->opaque,
 1184|      5|                                (int)((unsigned long)(s->blockSize100k * 100000) * sizeof(Int32)),
 1185|      5|                                1);
 1186|      5|                }
 1187|      5|                if ((unsigned long)s->tt == (unsigned long)((void *)0)) {
 1188|      0|                    retVal = -3;
 1189|      0|                    goto save_state_and_return;
 1190|      0|                }
 1191|      5|            }
 1192|      9|case_14: /* CIL Label */
 1193|      9|            s->state = 14;
 1194|      9|            {
 1195|     18|                while (1) {
 1196|     18|while_continue___3: /* CIL Label */
 1197|     18|                    ;
 1198|     18|                    if (s->bsLive >= 8) {
 1199|      9|                        v___3 =
 1200|      9|                            (s->bsBuff >> (s->bsLive - 8)) & (unsigned int)((1 << 8) - 1);
 1201|      9|                        s->bsLive -= 8;
 1202|      9|                        uc = (UChar)v___3;
 1203|      9|                        goto while_break___3;
 1204|      9|                    }
 1205|      9|                    if ((s->strm)->avail_in == 0U) {
 1206|      0|                        retVal = 0;
 1207|      0|                        goto save_state_and_return;
 1208|      0|                    }
 1209|      9|                    s->bsBuff =
 1210|      9|                        (s->bsBuff << 8) | (UInt32) * ((UChar *)(s->strm)->next_in);
 1211|      9|                    s->bsLive += 8;
 1212|      9|                    ((s->strm)->next_in)++;
 1213|      9|                    ((s->strm)->avail_in)--;
 1214|      9|                    ((s->strm)->total_in_lo32)++;
 1215|      9|                    if ((s->strm)->total_in_lo32 == 0U) {
 1216|      0|                        ((s->strm)->total_in_hi32)++;
 1217|      0|                    }
 1218|      9|                }
 1219|      9|while_break___3: /* CIL Label */
 1220|      9|                ;
 1221|      9|            }
 1222|      9|            if ((int)uc == 23) {
 1223|      5|                goto endhdr_2;
 1224|      5|            }
 1225|      4|            if ((int)uc != 49) {
 1226|      0|                retVal = -4;
 1227|      0|                goto save_state_and_return;
 1228|      0|            }
 1229|      4|case_15: /* CIL Label */
 1230|      4|            s->state = 15;
 1231|      4|            {
 1232|      8|                while (1) {
 1233|      8|while_continue___4: /* CIL Label */
 1234|      8|                    ;
 1235|      8|                    if (s->bsLive >= 8) {
 1236|      4|                        v___4 =
 1237|      4|                            (s->bsBuff >> (s->bsLive - 8)) & (unsigned int)((1 << 8) - 1);
 1238|      4|                        s->bsLive -= 8;
 1239|      4|                        uc = (UChar)v___4;
 1240|      4|                        goto while_break___4;
 1241|      4|                    }
 1242|      4|                    if ((s->strm)->avail_in == 0U) {
 1243|      0|                        retVal = 0;
 1244|      0|                        goto save_state_and_return;
 1245|      0|                    }
 1246|      4|                    s->bsBuff =
 1247|      4|                        (s->bsBuff << 8) | (UInt32) * ((UChar *)(s->strm)->next_in);
 1248|      4|                    s->bsLive += 8;
 1249|      4|                    ((s->strm)->next_in)++;
 1250|      4|                    ((s->strm)->avail_in)--;
 1251|      4|                    ((s->strm)->total_in_lo32)++;
 1252|      4|                    if ((s->strm)->total_in_lo32 == 0U) {
 1253|      0|                        ((s->strm)->total_in_hi32)++;
 1254|      0|                    }
 1255|      4|                }
 1256|      4|while_break___4: /* CIL Label */
 1257|      4|                ;
 1258|      4|            }
 1259|      4|            if ((int)uc != 65) {
 1260|      0|                retVal = -4;
 1261|      0|                goto save_state_and_return;
 1262|      0|            }
 1263|      4|case_16: /* CIL Label */
 1264|      4|            s->state = 16;
 1265|      4|            {
 1266|      8|                while (1) {
 1267|      8|while_continue___5: /* CIL Label */
 1268|      8|                    ;
 1269|      8|                    if (s->bsLive >= 8) {
 1270|      4|                        v___5 =
 1271|      4|                            (s->bsBuff >> (s->bsLive - 8)) & (unsigned int)((1 << 8) - 1);
 1272|      4|                        s->bsLive -= 8;
 1273|      4|                        uc = (UChar)v___5;
 1274|      4|                        goto while_break___5;
 1275|      4|                    }
 1276|      4|                    if ((s->strm)->avail_in == 0U) {
 1277|      0|                        retVal = 0;
 1278|      0|                        goto save_state_and_return;
 1279|      0|                    }
 1280|      4|                    s->bsBuff =
 1281|      4|                        (s->bsBuff << 8) | (UInt32) * ((UChar *)(s->strm)->next_in);
 1282|      4|                    s->bsLive += 8;
 1283|      4|                    ((s->strm)->next_in)++;
 1284|      4|                    ((s->strm)->avail_in)--;
 1285|      4|                    ((s->strm)->total_in_lo32)++;
 1286|      4|                    if ((s->strm)->total_in_lo32 == 0U) {
 1287|      0|                        ((s->strm)->total_in_hi32)++;
 1288|      0|                    }
 1289|      4|                }
 1290|      4|while_break___5: /* CIL Label */
 1291|      4|                ;
 1292|      4|            }
 1293|      4|            if ((int)uc != 89) {
 1294|      0|                retVal = -4;
 1295|      0|                goto save_state_and_return;
 1296|      0|            }
 1297|      4|case_17: /* CIL Label */
 1298|      4|            s->state = 17;
 1299|      4|            {
 1300|      8|                while (1) {
 1301|      8|while_continue___6: /* CIL Label */
 1302|      8|                    ;
 1303|      8|                    if (s->bsLive >= 8) {
 1304|      4|                        v___6 =
 1305|      4|                            (s->bsBuff >> (s->bsLive - 8)) & (unsigned int)((1 << 8) - 1);
 1306|      4|                        s->bsLive -= 8;
 1307|      4|                        uc = (UChar)v___6;
 1308|      4|                        goto while_break___6;
 1309|      4|                    }
 1310|      4|                    if ((s->strm)->avail_in == 0U) {
 1311|      0|                        retVal = 0;
 1312|      0|                        goto save_state_and_return;
 1313|      0|                    }
 1314|      4|                    s->bsBuff =
 1315|      4|                        (s->bsBuff << 8) | (UInt32) * ((UChar *)(s->strm)->next_in);
 1316|      4|                    s->bsLive += 8;
 1317|      4|                    ((s->strm)->next_in)++;
 1318|      4|                    ((s->strm)->avail_in)--;
 1319|      4|                    ((s->strm)->total_in_lo32)++;
 1320|      4|                    if ((s->strm)->total_in_lo32 == 0U) {
 1321|      0|                        ((s->strm)->total_in_hi32)++;
 1322|      0|                    }
 1323|      4|                }
 1324|      4|while_break___6: /* CIL Label */
 1325|      4|                ;
 1326|      4|            }
 1327|      4|            if ((int)uc != 38) {
 1328|      0|                retVal = -4;
 1329|      0|                goto save_state_and_return;
 1330|      0|            }
 1331|      4|case_18: /* CIL Label */
 1332|      4|            s->state = 18;
 1333|      4|            {
 1334|      8|                while (1) {
 1335|      8|while_continue___7: /* CIL Label */
 1336|      8|                    ;
 1337|      8|                    if (s->bsLive >= 8) {
 1338|      4|                        v___7 =
 1339|      4|                            (s->bsBuff >> (s->bsLive - 8)) & (unsigned int)((1 << 8) - 1);
 1340|      4|                        s->bsLive -= 8;
 1341|      4|                        uc = (UChar)v___7;
 1342|      4|                        goto while_break___7;
 1343|      4|                    }
 1344|      4|                    if ((s->strm)->avail_in == 0U) {
 1345|      0|                        retVal = 0;
 1346|      0|                        goto save_state_and_return;
 1347|      0|                    }
 1348|      4|                    s->bsBuff =
 1349|      4|                        (s->bsBuff << 8) | (UInt32) * ((UChar *)(s->strm)->next_in);
 1350|      4|                    s->bsLive += 8;
 1351|      4|                    ((s->strm)->next_in)++;
 1352|      4|                    ((s->strm)->avail_in)--;
 1353|      4|                    ((s->strm)->total_in_lo32)++;
 1354|      4|                    if ((s->strm)->total_in_lo32 == 0U) {
 1355|      0|                        ((s->strm)->total_in_hi32)++;
 1356|      0|                    }
 1357|      4|                }
 1358|      4|while_break___7: /* CIL Label */
 1359|      4|                ;
 1360|      4|            }
 1361|      4|            if ((int)uc != 83) {
 1362|      0|                retVal = -4;
 1363|      0|                goto save_state_and_return;
 1364|      0|            }
 1365|      4|case_19: /* CIL Label */
 1366|      4|            s->state = 19;
 1367|      4|            {
 1368|      8|                while (1) {
 1369|      8|while_continue___8: /* CIL Label */
 1370|      8|                    ;
 1371|      8|                    if (s->bsLive >= 8) {
 1372|      4|                        v___8 =
 1373|      4|                            (s->bsBuff >> (s->bsLive - 8)) & (unsigned int)((1 << 8) - 1);
 1374|      4|                        s->bsLive -= 8;
 1375|      4|                        uc = (UChar)v___8;
 1376|      4|                        goto while_break___8;
 1377|      4|                    }
 1378|      4|                    if ((s->strm)->avail_in == 0U) {
 1379|      0|                        retVal = 0;
 1380|      0|                        goto save_state_and_return;
 1381|      0|                    }
 1382|      4|                    s->bsBuff =
 1383|      4|                        (s->bsBuff << 8) | (UInt32) * ((UChar *)(s->strm)->next_in);
 1384|      4|                    s->bsLive += 8;
 1385|      4|                    ((s->strm)->next_in)++;
 1386|      4|                    ((s->strm)->avail_in)--;
 1387|      4|                    ((s->strm)->total_in_lo32)++;
 1388|      4|                    if ((s->strm)->total_in_lo32 == 0U) {
 1389|      0|                        ((s->strm)->total_in_hi32)++;
 1390|      0|                    }
 1391|      4|                }
 1392|      4|while_break___8: /* CIL Label */
 1393|      4|                ;
 1394|      4|            }
 1395|      4|            if ((int)uc != 89) {
 1396|      0|                retVal = -4;
 1397|      0|                goto save_state_and_return;
 1398|      0|            }
 1399|      4|            (s->currBlockNo)++;
 1400|      4|            if (s->verbosity >= 2) {
 1401|      0|                {
 1402|      0|                    fprintf((FILE * /* __restrict  */) stderr,
 1403|      0|                            (char const * /* __restrict  */) "\n    [%d: huff+mtf ",
 1404|      0|                            s->currBlockNo);
 1405|      0|                }
 1406|      0|            }
 1407|      4|            s->storedBlockCRC = (UInt32)0;
 1408|      4|case_20: /* CIL Label */
 1409|      4|            s->state = 20;
 1410|      4|            {
 1411|      8|                while (1) {
 1412|      8|while_continue___9: /* CIL Label */
 1413|      8|                    ;
 1414|      8|                    if (s->bsLive >= 8) {
 1415|      4|                        v___9 =
 1416|      4|                            (s->bsBuff >> (s->bsLive - 8)) & (unsigned int)((1 << 8) - 1);
 1417|      4|                        s->bsLive -= 8;
 1418|      4|                        uc = (UChar)v___9;
 1419|      4|                        goto while_break___9;
 1420|      4|                    }
 1421|      4|                    if ((s->strm)->avail_in == 0U) {
 1422|      0|                        retVal = 0;
 1423|      0|                        goto save_state_and_return;
 1424|      0|                    }
 1425|      4|                    s->bsBuff =
 1426|      4|                        (s->bsBuff << 8) | (UInt32) * ((UChar *)(s->strm)->next_in);
 1427|      4|                    s->bsLive += 8;
 1428|      4|                    ((s->strm)->next_in)++;
 1429|      4|                    ((s->strm)->avail_in)--;
 1430|      4|                    ((s->strm)->total_in_lo32)++;
 1431|      4|                    if ((s->strm)->total_in_lo32 == 0U) {
 1432|      0|                        ((s->strm)->total_in_hi32)++;
 1433|      0|                    }
 1434|      4|                }
 1435|      4|while_break___9: /* CIL Label */
 1436|      4|                ;
 1437|      4|            }
 1438|      0|            s->storedBlockCRC = (s->storedBlockCRC << 8) | (UInt32)uc;
 1439|      4|case_21: /* CIL Label */
 1440|      4|            s->state = 21;
 1441|      4|            {
 1442|      8|                while (1) {
 1443|      8|while_continue___10: /* CIL Label */
 1444|      8|                    ;
 1445|      8|                    if (s->bsLive >= 8) {
 1446|      4|                        v___10 =
 1447|      4|                            (s->bsBuff >> (s->bsLive - 8)) & (unsigned int)((1 << 8) - 1);
 1448|      4|                        s->bsLive -= 8;
 1449|      4|                        uc = (UChar)v___10;
 1450|      4|                        goto while_break___10;
 1451|      4|                    }
 1452|      4|                    if ((s->strm)->avail_in == 0U) {
 1453|      0|                        retVal = 0;
 1454|      0|                        goto save_state_and_return;
 1455|      0|                    }
 1456|      4|                    s->bsBuff =
 1457|      4|                        (s->bsBuff << 8) | (UInt32) * ((UChar *)(s->strm)->next_in);
 1458|      4|                    s->bsLive += 8;
 1459|      4|                    ((s->strm)->next_in)++;
 1460|      4|                    ((s->strm)->avail_in)--;
 1461|      4|                    ((s->strm)->total_in_lo32)++;
 1462|      4|                    if ((s->strm)->total_in_lo32 == 0U) {
 1463|      0|                        ((s->strm)->total_in_hi32)++;
 1464|      0|                    }
 1465|      4|                }
 1466|      4|while_break___10: /* CIL Label */
 1467|      4|                ;
 1468|      4|            }
 1469|      0|            s->storedBlockCRC = (s->storedBlockCRC << 8) | (UInt32)uc;
 1470|      4|case_22: /* CIL Label */
 1471|      4|            s->state = 22;
 1472|      4|            {
 1473|      8|                while (1) {
 1474|      8|while_continue___11: /* CIL Label */
 1475|      8|                    ;
 1476|      8|                    if (s->bsLive >= 8) {
 1477|      4|                        v___11 =
 1478|      4|                            (s->bsBuff >> (s->bsLive - 8)) & (unsigned int)((1 << 8) - 1);
 1479|      4|                        s->bsLive -= 8;
 1480|      4|                        uc = (UChar)v___11;
 1481|      4|                        goto while_break___11;
 1482|      4|                    }
 1483|      4|                    if ((s->strm)->avail_in == 0U) {
 1484|      0|                        retVal = 0;
 1485|      0|                        goto save_state_and_return;
 1486|      0|                    }
 1487|      4|                    s->bsBuff =
 1488|      4|                        (s->bsBuff << 8) | (UInt32) * ((UChar *)(s->strm)->next_in);
 1489|      4|                    s->bsLive += 8;
 1490|      4|                    ((s->strm)->next_in)++;
 1491|      4|                    ((s->strm)->avail_in)--;
 1492|      4|                    ((s->strm)->total_in_lo32)++;
 1493|      4|                    if ((s->strm)->total_in_lo32 == 0U) {
 1494|      0|                        ((s->strm)->total_in_hi32)++;
 1495|      0|                    }
 1496|      4|                }
 1497|      4|while_break___11: /* CIL Label */
 1498|      4|                ;
 1499|      4|            }
 1500|      0|            s->storedBlockCRC = (s->storedBlockCRC << 8) | (UInt32)uc;
 1501|      4|case_23: /* CIL Label */
 1502|      4|            s->state = 23;
 1503|      4|            {
 1504|      8|                while (1) {
 1505|      8|while_continue___12: /* CIL Label */
 1506|      8|                    ;
 1507|      8|                    if (s->bsLive >= 8) {
 1508|      4|                        v___12 =
 1509|      4|                            (s->bsBuff >> (s->bsLive - 8)) & (unsigned int)((1 << 8) - 1);
 1510|      4|                        s->bsLive -= 8;
 1511|      4|                        uc = (UChar)v___12;
 1512|      4|                        goto while_break___12;
 1513|      4|                    }
 1514|      4|                    if ((s->strm)->avail_in == 0U) {
 1515|      0|                        retVal = 0;
 1516|      0|                        goto save_state_and_return;
 1517|      0|                    }
 1518|      4|                    s->bsBuff =
 1519|      4|                        (s->bsBuff << 8) | (UInt32) * ((UChar *)(s->strm)->next_in);
 1520|      4|                    s->bsLive += 8;
 1521|      4|                    ((s->strm)->next_in)++;
 1522|      4|                    ((s->strm)->avail_in)--;
 1523|      4|                    ((s->strm)->total_in_lo32)++;
 1524|      4|                    if ((s->strm)->total_in_lo32 == 0U) {
 1525|      0|                        ((s->strm)->total_in_hi32)++;
 1526|      0|                    }
 1527|      4|                }
 1528|      4|while_break___12: /* CIL Label */
 1529|      4|                ;
 1530|      4|            }
 1531|      0|            s->storedBlockCRC = (s->storedBlockCRC << 8) | (UInt32)uc;
 1532|      4|case_24: /* CIL Label */
 1533|      4|            s->state = 24;
 1534|      4|            {
 1535|      7|                while (1) {
 1536|      7|while_continue___13: /* CIL Label */
 1537|      7|                    ;
 1538|      7|                    if (s->bsLive >= 1) {
 1539|      4|                        v___13 =
 1540|      4|                            (s->bsBuff >> (s->bsLive - 1)) & (unsigned int)((1 << 1) - 1);
 1541|      4|                        (s->bsLive)--;
 1542|      4|                        s->blockRandomised = (Bool)v___13;
 1543|      4|                        goto while_break___13;
 1544|      4|                    }
 1545|      3|                    if ((s->strm)->avail_in == 0U) {
 1546|      0|                        retVal = 0;
 1547|      0|                        goto save_state_and_return;
 1548|      0|                    }
 1549|      3|                    s->bsBuff =
 1550|      3|                        (s->bsBuff << 8) | (UInt32) * ((UChar *)(s->strm)->next_in);
 1551|      3|                    s->bsLive += 8;
 1552|      3|                    ((s->strm)->next_in)++;
 1553|      3|                    ((s->strm)->avail_in)--;
 1554|      3|                    ((s->strm)->total_in_lo32)++;
 1555|      3|                    if ((s->strm)->total_in_lo32 == 0U) {
 1556|      0|                        ((s->strm)->total_in_hi32)++;
 1557|      0|                    }
 1558|      3|                }
 1559|      4|while_break___13: /* CIL Label */
 1560|      4|                ;
 1561|      4|            }
 1562|      0|            s->origPtr = 0;
 1563|      4|case_25: /* CIL Label */
 1564|      4|            s->state = 25;
 1565|      4|            {
 1566|      8|                while (1) {
 1567|      8|while_continue___14: /* CIL Label */
 1568|      8|                    ;
 1569|      8|                    if (s->bsLive >= 8) {
 1570|      4|                        v___14 =
 1571|      4|                            (s->bsBuff >> (s->bsLive - 8)) & (unsigned int)((1 << 8) - 1);
 1572|      4|                        s->bsLive -= 8;
 1573|      4|                        uc = (UChar)v___14;
 1574|      4|                        goto while_break___14;
 1575|      4|                    }
 1576|      4|                    if ((s->strm)->avail_in == 0U) {
 1577|      0|                        retVal = 0;
 1578|      0|                        goto save_state_and_return;
 1579|      0|                    }
 1580|      4|                    s->bsBuff =
 1581|      4|                        (s->bsBuff << 8) | (UInt32) * ((UChar *)(s->strm)->next_in);
 1582|      4|                    s->bsLive += 8;
 1583|      4|                    ((s->strm)->next_in)++;
 1584|      4|                    ((s->strm)->avail_in)--;
 1585|      4|                    ((s->strm)->total_in_lo32)++;
 1586|      4|                    if ((s->strm)->total_in_lo32 == 0U) {
 1587|      0|                        ((s->strm)->total_in_hi32)++;
 1588|      0|                    }
 1589|      4|                }
 1590|      4|while_break___14: /* CIL Label */
 1591|      4|                ;
 1592|      4|            }
 1593|      0|            s->origPtr = (s->origPtr << 8) | (Int32)uc;
 1594|      4|case_26: /* CIL Label */
 1595|      4|            s->state = 26;
 1596|      4|            {
 1597|      8|                while (1) {
 1598|      8|while_continue___15: /* CIL Label */
 1599|      8|                    ;
 1600|      8|                    if (s->bsLive >= 8) {
 1601|      4|                        v___15 =
 1602|      4|                            (s->bsBuff >> (s->bsLive - 8)) & (unsigned int)((1 << 8) - 1);
 1603|      4|                        s->bsLive -= 8;
 1604|      4|                        uc = (UChar)v___15;
 1605|      4|                        goto while_break___15;
 1606|      4|                    }
 1607|      4|                    if ((s->strm)->avail_in == 0U) {
 1608|      0|                        retVal = 0;
 1609|      0|                        goto save_state_and_return;
 1610|      0|                    }
 1611|      4|                    s->bsBuff =
 1612|      4|                        (s->bsBuff << 8) | (UInt32) * ((UChar *)(s->strm)->next_in);
 1613|      4|                    s->bsLive += 8;
 1614|      4|                    ((s->strm)->next_in)++;
 1615|      4|                    ((s->strm)->avail_in)--;
 1616|      4|                    ((s->strm)->total_in_lo32)++;
 1617|      4|                    if ((s->strm)->total_in_lo32 == 0U) {
 1618|      0|                        ((s->strm)->total_in_hi32)++;
 1619|      0|                    }
 1620|      4|                }
 1621|      4|while_break___15: /* CIL Label */
 1622|      4|                ;
 1623|      4|            }
 1624|      0|            s->origPtr = (s->origPtr << 8) | (Int32)uc;
 1625|      4|case_27: /* CIL Label */
 1626|      4|            s->state = 27;
 1627|      4|            {
 1628|      8|                while (1) {
 1629|      8|while_continue___16: /* CIL Label */
 1630|      8|                    ;
 1631|      8|                    if (s->bsLive >= 8) {
 1632|      4|                        v___16 =
 1633|      4|                            (s->bsBuff >> (s->bsLive - 8)) & (unsigned int)((1 << 8) - 1);
 1634|      4|                        s->bsLive -= 8;
 1635|      4|                        uc = (UChar)v___16;
 1636|      4|                        goto while_break___16;
 1637|      4|                    }
 1638|      4|                    if ((s->strm)->avail_in == 0U) {
 1639|      0|                        retVal = 0;
 1640|      0|                        goto save_state_and_return;
 1641|      0|                    }
 1642|      4|                    s->bsBuff =
 1643|      4|                        (s->bsBuff << 8) | (UInt32) * ((UChar *)(s->strm)->next_in);
 1644|      4|                    s->bsLive += 8;
 1645|      4|                    ((s->strm)->next_in)++;
 1646|      4|                    ((s->strm)->avail_in)--;
 1647|      4|                    ((s->strm)->total_in_lo32)++;
 1648|      4|                    if ((s->strm)->total_in_lo32 == 0U) {
 1649|      0|                        ((s->strm)->total_in_hi32)++;
 1650|      0|                    }
 1651|      4|                }
 1652|      4|while_break___16: /* CIL Label */
 1653|      4|                ;
 1654|      4|            }
 1655|      0|            s->origPtr = (s->origPtr << 8) | (Int32)uc;
 1656|      4|            if (s->origPtr < 0) {
 1657|      0|                retVal = -4;
 1658|      0|                goto save_state_and_return;
 1659|      0|            }
 1660|      4|            if (s->origPtr > 10 + 100000 * s->blockSize100k) {
 1661|      0|                retVal = -4;
 1662|      0|                goto save_state_and_return;
 1663|      0|            }
 1664|      4|            i = 0;
 1665|      4|            {
 1666|     68|                while (1) {
 1667|     68|while_continue___17: /* CIL Label */
 1668|     68|                    ;
 1669|     68|                    if (!(i < 16)) {
 1670|      4|                        goto while_break___17;
 1671|      4|                    }
 1672|     64|case_28: /* CIL Label */
 1673|     64|                    s->state = 28;
 1674|     64|                    {
 1675|     72|                        while (1) {
 1676|     72|while_continue___18: /* CIL Label */
 1677|     72|                            ;
 1678|     72|                            if (s->bsLive >= 1) {
 1679|     64|                                v___17 = (s->bsBuff >> (s->bsLive - 1)) &
 1680|     64|                                         (unsigned int)((1 << 1) - 1);
 1681|     64|                                (s->bsLive)--;
 1682|     64|                                uc = (UChar)v___17;
 1683|     64|                                goto while_break___18;
 1684|     64|                            }
 1685|      8|                            if ((s->strm)->avail_in == 0U) {
 1686|      0|                                retVal = 0;
 1687|      0|                                goto save_state_and_return;
 1688|      0|                            }
 1689|      8|                            s->bsBuff =
 1690|      8|                                (s->bsBuff << 8) | (UInt32) * ((UChar *)(s->strm)->next_in);
 1691|      8|                            s->bsLive += 8;
 1692|      8|                            ((s->strm)->next_in)++;
 1693|      8|                            ((s->strm)->avail_in)--;
 1694|      8|                            ((s->strm)->total_in_lo32)++;
 1695|      8|                            if ((s->strm)->total_in_lo32 == 0U) {
 1696|      0|                                ((s->strm)->total_in_hi32)++;
 1697|      0|                            }
 1698|      8|                        }
 1699|     64|while_break___18: /* CIL Label */
 1700|     64|                        ;
 1701|     64|                    }
 1702|     64|                    if ((int)uc == 1) {
 1703|     46|                        s->inUse16[i] = (Bool)1;
 1704|     46|                    }
 1705|     18|                    else {
 1706|     18|                        s->inUse16[i] = (Bool)0;
 1707|     18|                    }
 1708|     64|                    i++;
 1709|     64|                }
 1710|      4|while_break___17: /* CIL Label */
 1711|      4|                ;
 1712|      4|            }
 1713|      0|            i = 0;
 1714|      4|            {
 1715|  1.02k|                while (1) {
 1716|  1.02k|while_continue___19: /* CIL Label */
 1717|  1.02k|                    ;
 1718|  1.02k|                    if (!(i < 256)) {
 1719|      4|                        goto while_break___19;
 1720|      4|                    }
 1721|  1.02k|                    s->inUse[i] = (Bool)0;
 1722|  1.02k|                    i++;
 1723|  1.02k|                }
 1724|      4|while_break___19: /* CIL Label */
 1725|      4|                ;
 1726|      4|            }
 1727|      0|            i = 0;
 1728|      4|            {
 1729|     68|                while (1) {
 1730|     68|while_continue___20: /* CIL Label */
 1731|     68|                    ;
 1732|     68|                    if (!(i < 16)) {
 1733|      4|                        goto while_break___20;
 1734|      4|                    }
 1735|     64|                    if (s->inUse16[i]) {
 1736|     46|                        j = 0;
 1737|     46|                        {
 1738|    782|                            while (1) {
 1739|    782|while_continue___21: /* CIL Label */
 1740|    782|                                ;
 1741|    782|                                if (!(j < 16)) {
 1742|     46|                                    goto while_break___21;
 1743|     46|                                }
 1744|    736|case_29: /* CIL Label */
 1745|    736|                                s->state = 29;
 1746|    736|                                {
 1747|    828|                                    while (1) {
 1748|    828|while_continue___22: /* CIL Label */
 1749|    828|                                        ;
 1750|    828|                                        if (s->bsLive >= 1) {
 1751|    736|                                            v___18 = (s->bsBuff >> (s->bsLive - 1)) &
 1752|    736|                                                     (unsigned int)((1 << 1) - 1);
 1753|    736|                                            (s->bsLive)--;
 1754|    736|                                            uc = (UChar)v___18;
 1755|    736|                                            goto while_break___22;
 1756|    736|                                        }
 1757|     92|                                        if ((s->strm)->avail_in == 0U) {
 1758|      0|                                            retVal = 0;
 1759|      0|                                            goto save_state_and_return;
 1760|      0|                                        }
 1761|     92|                                        s->bsBuff = (s->bsBuff << 8) |
 1762|     92|                                                    (UInt32) * ((UChar *)(s->strm)->next_in);
 1763|     92|                                        s->bsLive += 8;
 1764|     92|                                        ((s->strm)->next_in)++;
 1765|     92|                                        ((s->strm)->avail_in)--;
 1766|     92|                                        ((s->strm)->total_in_lo32)++;
 1767|     92|                                        if ((s->strm)->total_in_lo32 == 0U) {
 1768|      0|                                            ((s->strm)->total_in_hi32)++;
 1769|      0|                                        }
 1770|     92|                                    }
 1771|    736|while_break___22: /* CIL Label */
 1772|    736|                                    ;
 1773|    736|                                }
 1774|    736|                                if ((int)uc == 1) {
 1775|    653|                                    s->inUse[i * 16 + j] = (Bool)1;
 1776|    653|                                }
 1777|    736|                                j++;
 1778|    736|                            }
 1779|     46|while_break___21: /* CIL Label */
 1780|     46|                            ;
 1781|     46|                        }
 1782|     46|                    }
 1783|     64|                    i++;
 1784|     64|                }
 1785|      4|while_break___20: /* CIL Label */
 1786|      4|                ;
 1787|      4|            }
 1788|      0|            {
 1789|      4|                makeMaps_d(s);
 1790|      4|            }
 1791|      4|            if (s->nInUse == 0) {
 1792|      0|                retVal = -4;
 1793|      0|                goto save_state_and_return;
 1794|      0|            }
 1795|      4|            alphaSize = s->nInUse + 2;
 1796|      4|case_30: /* CIL Label */
 1797|      4|            s->state = 30;
 1798|      4|            {
 1799|      5|                while (1) {
 1800|      5|while_continue___23: /* CIL Label */
 1801|      5|                    ;
 1802|      5|                    if (s->bsLive >= 3) {
 1803|      4|                        v___19 =
 1804|      4|                            (s->bsBuff >> (s->bsLive - 3)) & (unsigned int)((1 << 3) - 1);
 1805|      4|                        s->bsLive -= 3;
 1806|      4|                        nGroups = (Int32)v___19;
 1807|      4|                        goto while_break___23;
 1808|      4|                    }
 1809|      1|                    if ((s->strm)->avail_in == 0U) {
 1810|      0|                        retVal = 0;
 1811|      0|                        goto save_state_and_return;
 1812|      0|                    }
 1813|      1|                    s->bsBuff =
 1814|      1|                        (s->bsBuff << 8) | (UInt32) * ((UChar *)(s->strm)->next_in);
 1815|      1|                    s->bsLive += 8;
 1816|      1|                    ((s->strm)->next_in)++;
 1817|      1|                    ((s->strm)->avail_in)--;
 1818|      1|                    ((s->strm)->total_in_lo32)++;
 1819|      1|                    if ((s->strm)->total_in_lo32 == 0U) {
 1820|      0|                        ((s->strm)->total_in_hi32)++;
 1821|      0|                    }
 1822|      1|                }
 1823|      4|while_break___23: /* CIL Label */
 1824|      4|                ;
 1825|      4|            }
 1826|      4|            if (nGroups < 2) {
 1827|      0|                retVal = -4;
 1828|      0|                goto save_state_and_return;
 1829|      0|            }
 1830|      4|            else {
 1831|      4|                if (nGroups > 6) {
 1832|      0|                    retVal = -4;
 1833|      0|                    goto save_state_and_return;
 1834|      0|                }
 1835|      4|            }
 1836|      4|case_31: /* CIL Label */
 1837|      4|            s->state = 31;
 1838|      4|            {
 1839|     12|                while (1) {
 1840|     12|while_continue___24: /* CIL Label */
 1841|     12|                    ;
 1842|     12|                    if (s->bsLive >= 15) {
 1843|      4|                        v___20 =
 1844|      4|                            (s->bsBuff >> (s->bsLive - 15)) & (unsigned int)((1 << 15) - 1);
 1845|      4|                        s->bsLive -= 15;
 1846|      4|                        nSelectors = (Int32)v___20;
 1847|      4|                        goto while_break___24;
 1848|      4|                    }
 1849|      8|                    if ((s->strm)->avail_in == 0U) {
 1850|      0|                        retVal = 0;
 1851|      0|                        goto save_state_and_return;
 1852|      0|                    }
 1853|      8|                    s->bsBuff =
 1854|      8|                        (s->bsBuff << 8) | (UInt32) * ((UChar *)(s->strm)->next_in);
 1855|      8|                    s->bsLive += 8;
 1856|      8|                    ((s->strm)->next_in)++;
 1857|      8|                    ((s->strm)->avail_in)--;
 1858|      8|                    ((s->strm)->total_in_lo32)++;
 1859|      8|                    if ((s->strm)->total_in_lo32 == 0U) {
 1860|      0|                        ((s->strm)->total_in_hi32)++;
 1861|      0|                    }
 1862|      8|                }
 1863|      4|while_break___24: /* CIL Label */
 1864|      4|                ;
 1865|      4|            }
 1866|      4|            if (nSelectors < 1) {
 1867|      0|                retVal = -4;
 1868|      0|                goto save_state_and_return;
 1869|      0|            }
 1870|      4|            i = 0;
 1871|      4|            {
 1872|  22.5k|                while (1) {
 1873|  22.5k|while_continue___25: /* CIL Label */
 1874|  22.5k|                    ;
 1875|  22.5k|                    if (!(i < nSelectors)) {
 1876|      4|                        goto while_break___25;
 1877|      4|                    }
 1878|  22.5k|                    j = 0;
 1879|  22.5k|                    {
 1880|  62.1k|                        while (1) {
 1881|  62.1k|while_continue___26: /* CIL Label */
 1882|  62.1k|                            ;
 1883|  62.1k|case_32: /* CIL Label */
 1884|  62.1k|                            s->state = 32;
 1885|  62.1k|                            {
 1886|  69.9k|                                while (1) {
 1887|  69.9k|while_continue___27: /* CIL Label */
 1888|  69.9k|                                    ;
 1889|  69.9k|                                    if (s->bsLive >= 1) {
 1890|  62.1k|                                        v___21 = (s->bsBuff >> (s->bsLive - 1)) &
 1891|  62.1k|                                                 (unsigned int)((1 << 1) - 1);
 1892|  62.1k|                                        (s->bsLive)--;
 1893|  62.1k|                                        uc = (UChar)v___21;
 1894|  62.1k|                                        goto while_break___27;
 1895|  62.1k|                                    }
 1896|  7.77k|                                    if ((s->strm)->avail_in == 0U) {
 1897|      2|                                        retVal = 0;
 1898|      2|                                        goto save_state_and_return;
 1899|      2|                                    }
 1900|  7.77k|                                    s->bsBuff = (s->bsBuff << 8) |
 1901|  7.77k|                                                (UInt32) * ((UChar *)(s->strm)->next_in);
 1902|  7.77k|                                    s->bsLive += 8;
 1903|  7.77k|                                    ((s->strm)->next_in)++;
 1904|  7.77k|                                    ((s->strm)->avail_in)--;
 1905|  7.77k|                                    ((s->strm)->total_in_lo32)++;
 1906|  7.77k|                                    if ((s->strm)->total_in_lo32 == 0U) {
 1907|      0|                                        ((s->strm)->total_in_hi32)++;
 1908|      0|                                    }
 1909|  7.77k|                                }
 1910|  62.1k|while_break___27: /* CIL Label */
 1911|  62.1k|                                ;
 1912|  62.1k|                            }
 1913|  62.1k|                            if ((int)uc == 0) {
 1914|  22.5k|                                goto while_break___26;
 1915|  22.5k|                            }
 1916|  39.6k|                            j++;
 1917|  39.6k|                            if (j >= nGroups) {
 1918|      0|                                retVal = -4;
 1919|      0|                                goto save_state_and_return;
 1920|      0|                            }
 1921|  39.6k|                        }
 1922|  22.5k|while_break___26: /* CIL Label */
 1923|  22.5k|                        ;
 1924|  22.5k|                    }
 1925|      0|                    s->selectorMtf[i] = (UChar)j;
 1926|  22.5k|                    i++;
 1927|  22.5k|                }
 1928|      4|while_break___25: /* CIL Label */
 1929|      4|                ;
 1930|      4|            }
 1931|      0|            v___22 = (UChar)0;
 1932|      4|            {
 1933|     24|                while (1) {
 1934|     24|while_continue___28: /* CIL Label */
 1935|     24|                    ;
 1936|     24|                    if (!((int)v___22 < nGroups)) {
 1937|      4|                        goto while_break___28;
 1938|      4|                    }
 1939|     20|                    pos[v___22] = v___22;
 1940|     20|                    v___22 = (UChar)((int)v___22 + 1);
 1941|     20|                }
 1942|      4|while_break___28: /* CIL Label */
 1943|      4|                ;
 1944|      4|            }
 1945|      0|            i = 0;
 1946|      4|            {
 1947|  22.5k|                while (1) {
 1948|  22.5k|while_continue___29: /* CIL Label */
 1949|  22.5k|                    ;
 1950|  22.5k|                    if (!(i < nSelectors)) {
 1951|      4|                        goto while_break___29;
 1952|      4|                    }
 1953|  22.5k|                    v___22 = s->selectorMtf[i];
 1954|  22.5k|                    tmp = pos[v___22];
 1955|  22.5k|                    {
 1956|  62.1k|                        while (1) {
 1957|  62.1k|while_continue___30: /* CIL Label */
 1958|  62.1k|                            ;
 1959|  62.1k|                            if (!((int)v___22 > 0)) {
 1960|  22.5k|                                goto while_break___30;
 1961|  22.5k|                            }
 1962|  39.6k|                            pos[v___22] = pos[(int)v___22 - 1];
 1963|  39.6k|                            v___22 = (UChar)((int)v___22 - 1);
 1964|  39.6k|                        }
 1965|  22.5k|while_break___30: /* CIL Label */
 1966|  22.5k|                        ;
 1967|  22.5k|                    }
 1968|      0|                    pos[0] = tmp;
 1969|  22.5k|                    s->selector[i] = tmp;
 1970|  22.5k|                    i++;
 1971|  22.5k|                }
 1972|      4|while_break___29: /* CIL Label */
 1973|      4|                ;
 1974|      4|            }
 1975|      0|            t = 0;
 1976|      4|            {
 1977|     24|                while (1) {
 1978|     24|while_continue___31: /* CIL Label */
 1979|     24|                    ;
 1980|     24|                    if (!(t < nGroups)) {
 1981|      4|                        goto while_break___31;
 1982|      4|                    }
 1983|     20|case_33: /* CIL Label */
 1984|     20|                    s->state = 33;
 1985|     20|                    {
 1986|     32|                        while (1) {
 1987|     32|while_continue___32: /* CIL Label */
 1988|     32|                            ;
 1989|     32|                            if (s->bsLive >= 5) {
 1990|     20|                                v___23 = (s->bsBuff >> (s->bsLive - 5)) &
 1991|     20|                                         (unsigned int)((1 << 5) - 1);
 1992|     20|                                s->bsLive -= 5;
 1993|     20|                                curr = (Int32)v___23;
 1994|     20|                                goto while_break___32;
 1995|     20|                            }
 1996|     12|                            if ((s->strm)->avail_in == 0U) {
 1997|      0|                                retVal = 0;
 1998|      0|                                goto save_state_and_return;
 1999|      0|                            }
 2000|     12|                            s->bsBuff =
 2001|     12|                                (s->bsBuff << 8) | (UInt32) * ((UChar *)(s->strm)->next_in);
 2002|     12|                            s->bsLive += 8;
 2003|     12|                            ((s->strm)->next_in)++;
 2004|     12|                            ((s->strm)->avail_in)--;
 2005|     12|                            ((s->strm)->total_in_lo32)++;
 2006|     12|                            if ((s->strm)->total_in_lo32 == 0U) {
 2007|      0|                                ((s->strm)->total_in_hi32)++;
 2008|      0|                            }
 2009|     12|                        }
 2010|     20|while_break___32: /* CIL Label */
 2011|     20|                        ;
 2012|     20|                    }
 2013|      0|                    i = 0;
 2014|     20|                    {
 2015|  3.91k|                        while (1) {
 2016|  3.91k|while_continue___33: /* CIL Label */
 2017|  3.91k|                            ;
 2018|  3.91k|                            if (!(i < alphaSize)) {
 2019|     20|                                goto while_break___33;
 2020|     20|                            }
 2021|  3.89k|                            {
 2022|  5.00k|                                while (1) {
 2023|  5.00k|while_continue___34: /* CIL Label */
 2024|  5.00k|                                    ;
 2025|  5.00k|                                    if (curr < 1) {
 2026|      0|                                        retVal = -4;
 2027|      0|                                        goto save_state_and_return;
 2028|      0|                                    }
 2029|  5.00k|                                    else {
 2030|  5.00k|                                        if (curr > 20) {
 2031|      0|                                            retVal = -4;
 2032|      0|                                            goto save_state_and_return;
 2033|      0|                                        }
 2034|  5.00k|                                    }
 2035|  5.00k|case_34: /* CIL Label */
 2036|  5.00k|                                    s->state = 34;
 2037|  5.00k|                                    {
 2038|  5.62k|                                        while (1) {
 2039|  5.62k|while_continue___35: /* CIL Label */
 2040|  5.62k|                                            ;
 2041|  5.62k|                                            if (s->bsLive >= 1) {
 2042|  5.00k|                                                v___24 = (s->bsBuff >> (s->bsLive - 1)) &
 2043|  5.00k|                                                         (unsigned int)((1 << 1) - 1);
 2044|  5.00k|                                                (s->bsLive)--;
 2045|  5.00k|                                                uc = (UChar)v___24;
 2046|  5.00k|                                                goto while_break___35;
 2047|  5.00k|                                            }
 2048|    617|                                            if ((s->strm)->avail_in == 0U) {
 2049|      0|                                                retVal = 0;
 2050|      0|                                                goto save_state_and_return;
 2051|      0|                                            }
 2052|    617|                                            s->bsBuff = (s->bsBuff << 8) |
 2053|    617|                                                        (UInt32) * ((UChar *)(s->strm)->next_in);
 2054|    617|                                            s->bsLive += 8;
 2055|    617|                                            ((s->strm)->next_in)++;
 2056|    617|                                            ((s->strm)->avail_in)--;
 2057|    617|                                            ((s->strm)->total_in_lo32)++;
 2058|    617|                                            if ((s->strm)->total_in_lo32 == 0U) {
 2059|      0|                                                ((s->strm)->total_in_hi32)++;
 2060|      0|                                            }
 2061|    617|                                        }
 2062|  5.00k|while_break___35: /* CIL Label */
 2063|  5.00k|                                        ;
 2064|  5.00k|                                    }
 2065|  5.00k|                                    if ((int)uc == 0) {
 2066|  3.89k|                                        goto while_break___34;
 2067|  3.89k|                                    }
 2068|  1.11k|case_35: /* CIL Label */
 2069|  1.11k|                                    s->state = 35;
 2070|  1.11k|                                    {
 2071|  1.26k|                                        while (1) {
 2072|  1.26k|while_continue___36: /* CIL Label */
 2073|  1.26k|                                            ;
 2074|  1.26k|                                            if (s->bsLive >= 1) {
 2075|  1.11k|                                                v___25 = (s->bsBuff >> (s->bsLive - 1)) &
 2076|  1.11k|                                                         (unsigned int)((1 << 1) - 1);
 2077|  1.11k|                                                (s->bsLive)--;
 2078|  1.11k|                                                uc = (UChar)v___25;
 2079|  1.11k|                                                goto while_break___36;
 2080|  1.11k|                                            }
 2081|    148|                                            if ((s->strm)->avail_in == 0U) {
 2082|      0|                                                retVal = 0;
 2083|      0|                                                goto save_state_and_return;
 2084|      0|                                            }
 2085|    148|                                            s->bsBuff = (s->bsBuff << 8) |
 2086|    148|                                                        (UInt32) * ((UChar *)(s->strm)->next_in);
 2087|    148|                                            s->bsLive += 8;
 2088|    148|                                            ((s->strm)->next_in)++;
 2089|    148|                                            ((s->strm)->avail_in)--;
 2090|    148|                                            ((s->strm)->total_in_lo32)++;
 2091|    148|                                            if ((s->strm)->total_in_lo32 == 0U) {
 2092|      0|                                                ((s->strm)->total_in_hi32)++;
 2093|      0|                                            }
 2094|    148|                                        }
 2095|  1.11k|while_break___36: /* CIL Label */
 2096|  1.11k|                                        ;
 2097|  1.11k|                                    }
 2098|  1.11k|                                    if ((int)uc == 0) {
 2099|    615|                                        curr++;
 2100|    615|                                    }
 2101|    500|                                    else {
 2102|    500|                                        curr--;
 2103|    500|                                    }
 2104|  1.11k|                                }
 2105|  3.89k|while_break___34: /* CIL Label */
 2106|  3.89k|                                ;
 2107|  3.89k|                            }
 2108|      0|                            s->len[t][i] = (UChar)curr;
 2109|  3.89k|                            i++;
 2110|  3.89k|                        }
 2111|     20|while_break___33: /* CIL Label */
 2112|     20|                        ;
 2113|     20|                    }
 2114|      0|                    t++;
 2115|     20|                }
 2116|      4|while_break___31: /* CIL Label */
 2117|      4|                ;
 2118|      4|            }
 2119|      0|            t = 0;
 2120|      4|            {
 2121|     24|                while (1) {
 2122|     24|while_continue___37: /* CIL Label */
 2123|     24|                    ;
 2124|     24|                    if (!(t < nGroups)) {
 2125|      4|                        goto while_break___37;
 2126|      4|                    }
 2127|     20|                    minLen = 32;
 2128|     20|                    maxLen = 0;
 2129|     20|                    i = 0;
 2130|     20|                    {
 2131|  3.91k|                        while (1) {
 2132|  3.91k|while_continue___38: /* CIL Label */
 2133|  3.91k|                            ;
 2134|  3.91k|                            if (!(i < alphaSize)) {
 2135|     20|                                goto while_break___38;
 2136|     20|                            }
 2137|  3.89k|                            if ((int)s->len[t][i] > maxLen) {
 2138|     92|                                maxLen = (Int32)s->len[t][i];
 2139|     92|                            }
 2140|  3.89k|                            if ((int)s->len[t][i] < minLen) {
 2141|     36|                                minLen = (Int32)s->len[t][i];
 2142|     36|                            }
 2143|  3.89k|                            i++;
 2144|  3.89k|                        }
 2145|     20|while_break___38: /* CIL Label */
 2146|     20|                        ;
 2147|     20|                    }
 2148|      0|                    {
 2149|     20|                        BZ2_hbCreateDecodeTables(&s->limit[t][0], &s->base[t][0],
 2150|     20|                                                 &s->perm[t][0], &s->len[t][0], minLen,
 2151|     20|                                                 maxLen, alphaSize);
 2152|     20|                        s->minLens[t] = minLen;
 2153|     20|                        t++;
 2154|     20|                    }
 2155|     20|                }
 2156|      4|while_break___37: /* CIL Label */
 2157|      4|                ;
 2158|      4|            }
 2159|      0|            EOB = s->nInUse + 1;
 2160|      4|            nblockMAX = 100000 * s->blockSize100k;
 2161|      4|            groupNo = -1;
 2162|      4|            groupPos = 0;
 2163|      4|            i = 0;
 2164|      4|            {
 2165|  1.02k|                while (1) {
 2166|  1.02k|while_continue___39: /* CIL Label */
 2167|  1.02k|                    ;
 2168|  1.02k|                    if (!(i <= 255)) {
 2169|      4|                        goto while_break___39;
 2170|      4|                    }
 2171|  1.02k|                    s->unzftab[i] = 0;
 2172|  1.02k|                    i++;
 2173|  1.02k|                }
 2174|      4|while_break___39: /* CIL Label */
 2175|      4|                ;
 2176|      4|            }
 2177|      0|            kk = 4095;
 2178|      4|            ii = 15;
 2179|      4|            {
 2180|     68|                while (1) {
 2181|     68|while_continue___40: /* CIL Label */
 2182|     68|                    ;
 2183|     68|                    if (!(ii >= 0)) {
 2184|      4|                        goto while_break___40;
 2185|      4|                    }
 2186|     64|                    jj = 15;
 2187|     64|                    {
 2188|  1.08k|                        while (1) {
 2189|  1.08k|while_continue___41: /* CIL Label */
 2190|  1.08k|                            ;
 2191|  1.08k|                            if (!(jj >= 0)) {
 2192|     64|                                goto while_break___41;
 2193|     64|                            }
 2194|  1.02k|                            s->mtfa[kk] = (UChar)(ii * 16 + jj);
 2195|  1.02k|                            kk--;
 2196|  1.02k|                            jj--;
 2197|  1.02k|                        }
 2198|     64|while_break___41: /* CIL Label */
 2199|     64|                        ;
 2200|     64|                    }
 2201|      0|                    s->mtfbase[ii] = kk + 1;
 2202|     64|                    ii--;
 2203|     64|                }
 2204|      4|while_break___40: /* CIL Label */
 2205|      4|                ;
 2206|      4|            }
 2207|      0|            nblock = 0;
 2208|      4|            if (groupPos == 0) {
 2209|      4|                groupNo++;
 2210|      4|                if (groupNo >= nSelectors) {
 2211|      0|                    retVal = -4;
 2212|      0|                    goto save_state_and_return;
 2213|      0|                }
 2214|      4|                groupPos = 50;
 2215|      4|                gSel = (Int32)s->selector[groupNo];
 2216|      4|                gMinlen = s->minLens[gSel];
 2217|      4|                gLimit = &s->limit[gSel][0];
 2218|      4|                gPerm = &s->perm[gSel][0];
 2219|      4|                gBase = &s->base[gSel][0];
 2220|      4|            }
 2221|      4|            groupPos--;
 2222|      4|            zn = gMinlen;
 2223|      4|case_36: /* CIL Label */
 2224|      4|            s->state = 36;
 2225|      4|            {
 2226|      6|                while (1) {
 2227|      6|while_continue___42: /* CIL Label */
 2228|      6|                    ;
 2229|      6|                    if (s->bsLive >= zn) {
 2230|      4|                        v___26 =
 2231|      4|                            (s->bsBuff >> (s->bsLive - zn)) & (unsigned int)((1 << zn) - 1);
 2232|      4|                        s->bsLive -= zn;
 2233|      4|                        zvec = (Int32)v___26;
 2234|      4|                        goto while_break___42;
 2235|      4|                    }
 2236|      2|                    if ((s->strm)->avail_in == 0U) {
 2237|      0|                        retVal = 0;
 2238|      0|                        goto save_state_and_return;
 2239|      0|                    }
 2240|      2|                    s->bsBuff =
 2241|      2|                        (s->bsBuff << 8) | (UInt32) * ((UChar *)(s->strm)->next_in);
 2242|      2|                    s->bsLive += 8;
 2243|      2|                    ((s->strm)->next_in)++;
 2244|      2|                    ((s->strm)->avail_in)--;
 2245|      2|                    ((s->strm)->total_in_lo32)++;
 2246|      2|                    if ((s->strm)->total_in_lo32 == 0U) {
 2247|      0|                        ((s->strm)->total_in_hi32)++;
 2248|      0|                    }
 2249|      2|                }
 2250|      4|while_break___42: /* CIL Label */
 2251|      4|                ;
 2252|      4|            }
 2253|      0|            {
 2254|     16|                while (1) {
 2255|     16|while_continue___43: /* CIL Label */
 2256|     16|                    ;
 2257|     16|                    if (zn > 20) {
 2258|      0|                        retVal = -4;
 2259|      0|                        goto save_state_and_return;
 2260|      0|                    }
 2261|     16|                    if (zvec <= *(gLimit + zn)) {
 2262|      4|                        goto while_break___43;
 2263|      4|                    }
 2264|     12|                    zn++;
 2265|     12|case_37: /* CIL Label */
 2266|     12|                    s->state = 37;
 2267|     12|                    {
 2268|     14|                        while (1) {
 2269|     14|while_continue___44: /* CIL Label */
 2270|     14|                            ;
 2271|     14|                            if (s->bsLive >= 1) {
 2272|     12|                                v___27 = (s->bsBuff >> (s->bsLive - 1)) &
 2273|     12|                                         (unsigned int)((1 << 1) - 1);
 2274|     12|                                (s->bsLive)--;
 2275|     12|                                zj = (Int32)v___27;
 2276|     12|                                goto while_break___44;
 2277|     12|                            }
 2278|      2|                            if ((s->strm)->avail_in == 0U) {
 2279|      0|                                retVal = 0;
 2280|      0|                                goto save_state_and_return;
 2281|      0|                            }
 2282|      2|                            s->bsBuff =
 2283|      2|                                (s->bsBuff << 8) | (UInt32) * ((UChar *)(s->strm)->next_in);
 2284|      2|                            s->bsLive += 8;
 2285|      2|                            ((s->strm)->next_in)++;
 2286|      2|                            ((s->strm)->avail_in)--;
 2287|      2|                            ((s->strm)->total_in_lo32)++;
 2288|      2|                            if ((s->strm)->total_in_lo32 == 0U) {
 2289|      0|                                ((s->strm)->total_in_hi32)++;
 2290|      0|                            }
 2291|      2|                        }
 2292|     12|while_break___44: /* CIL Label */
 2293|     12|                        ;
 2294|     12|                    }
 2295|      0|                    zvec = (zvec << 1) | zj;
 2296|     12|                }
 2297|      4|while_break___43: /* CIL Label */
 2298|      4|                ;
 2299|      4|            }
 2300|      4|            if (zvec - *(gBase + zn) < 0) {
 2301|      0|                retVal = -4;
 2302|      0|                goto save_state_and_return;
 2303|      0|            }
 2304|      4|            else {
 2305|      4|                if (zvec - *(gBase + zn) >= 258) {
 2306|      0|                    retVal = -4;
 2307|      0|                    goto save_state_and_return;
 2308|      0|                }
 2309|      4|            }
 2310|      4|            nextSym = *(gPerm + (zvec - *(gBase + zn)));
 2311|      4|            {
 2312|      4|                while (1) {
 2313|  1.11M|while_continue___45: /* CIL Label */
 2314|  1.11M|                    ;
 2315|  1.11M|                    if (!(!(nextSym == EOB))) {
 2316|      4|                        goto while_break___45;
 2317|      4|                    }
 2318|  1.11M|                    if (nextSym == 0) {
 2319|  16.1k|                        goto _L;
 2320|  16.1k|                    }
 2321|  1.09M|                    else {
 2322|  1.09M|                        if (nextSym == 1) {
 2323|  22.3k|_L:
 2324|  22.3k|                            es = -1;
 2325|  22.3k|                            N = 1;
 2326|  22.3k|                            {
 2327|  38.7k|                                while (1) {
 2328|  38.7k|while_continue___46: /* CIL Label */
 2329|  38.7k|                                    ;
 2330|  38.7k|                                    if (nextSym == 0) {
 2331|  26.4k|                                        es += N;
 2332|  26.4k|                                    }
 2333|  12.3k|                                    else {
 2334|  12.3k|                                        if (nextSym == 1) {
 2335|  12.3k|                                            es += 2 * N;
 2336|  12.3k|                                        }
 2337|  12.3k|                                    }
 2338|  38.7k|                                    N *= 2;
 2339|  38.7k|                                    if (groupPos == 0) {
 2340|    778|                                        groupNo++;
 2341|    778|                                        if (groupNo >= nSelectors) {
 2342|      0|                                            retVal = -4;
 2343|      0|                                            goto save_state_and_return;
 2344|      0|                                        }
 2345|    778|                                        groupPos = 50;
 2346|    778|                                        gSel = (Int32)s->selector[groupNo];
 2347|    778|                                        gMinlen = s->minLens[gSel];
 2348|    778|                                        gLimit = &s->limit[gSel][0];
 2349|    778|                                        gPerm = &s->perm[gSel][0];
 2350|    778|                                        gBase = &s->base[gSel][0];
 2351|    778|                                    }
 2352|  38.7k|                                    groupPos--;
 2353|  38.7k|                                    zn = gMinlen;
 2354|  38.7k|case_38: /* CIL Label */
 2355|  38.7k|                                    s->state = 38;
 2356|  38.7k|                                    {
 2357|  50.0k|                                        while (1) {
 2358|  50.0k|while_continue___47: /* CIL Label */
 2359|  50.0k|                                            ;
 2360|  50.0k|                                            if (s->bsLive >= zn) {
 2361|  38.7k|                                                v___28 = (s->bsBuff >> (s->bsLive - zn)) &
 2362|  38.7k|                                                         (unsigned int)((1 << zn) - 1);
 2363|  38.7k|                                                s->bsLive -= zn;
 2364|  38.7k|                                                zvec = (Int32)v___28;
 2365|  38.7k|                                                goto while_break___47;
 2366|  38.7k|                                            }
 2367|  11.2k|                                            if ((s->strm)->avail_in == 0U) {
 2368|      2|                                                retVal = 0;
 2369|      2|                                                goto save_state_and_return;
 2370|      2|                                            }
 2371|  11.2k|                                            s->bsBuff = (s->bsBuff << 8) |
 2372|  11.2k|                                                        (UInt32) * ((UChar *)(s->strm)->next_in);
 2373|  11.2k|                                            s->bsLive += 8;
 2374|  11.2k|                                            ((s->strm)->next_in)++;
 2375|  11.2k|                                            ((s->strm)->avail_in)--;
 2376|  11.2k|                                            ((s->strm)->total_in_lo32)++;
 2377|  11.2k|                                            if ((s->strm)->total_in_lo32 == 0U) {
 2378|      0|                                                ((s->strm)->total_in_hi32)++;
 2379|      0|                                            }
 2380|  11.2k|                                        }
 2381|  38.7k|while_break___47: /* CIL Label */
 2382|  38.7k|                                        ;
 2383|  38.7k|                                    }
 2384|      0|                                    {
 2385|  99.1k|                                        while (1) {
 2386|  99.1k|while_continue___48: /* CIL Label */
 2387|  99.1k|                                            ;
 2388|  99.1k|                                            if (zn > 20) {
 2389|      0|                                                retVal = -4;
 2390|      0|                                                goto save_state_and_return;
 2391|      0|                                            }
 2392|  99.1k|                                            if (zvec <= *(gLimit + zn)) {
 2393|  38.7k|                                                goto while_break___48;
 2394|  38.7k|                                            }
 2395|  60.3k|                                            zn++;
 2396|  60.3k|case_39: /* CIL Label */
 2397|  60.3k|                                            s->state = 39;
 2398|  60.3k|                                            {
 2399|  67.9k|                                                while (1) {
 2400|  67.9k|while_continue___49: /* CIL Label */
 2401|  67.9k|                                                    ;
 2402|  67.9k|                                                    if (s->bsLive >= 1) {
 2403|  60.3k|                                                        v___29 = (s->bsBuff >> (s->bsLive - 1)) &
 2404|  60.3k|                                                                 (unsigned int)((1 << 1) - 1);
 2405|  60.3k|                                                        (s->bsLive)--;
 2406|  60.3k|                                                        zj = (Int32)v___29;
 2407|  60.3k|                                                        goto while_break___49;
 2408|  60.3k|                                                    }
 2409|  7.58k|                                                    if ((s->strm)->avail_in == 0U) {
 2410|      0|                                                        retVal = 0;
 2411|      0|                                                        goto save_state_and_return;
 2412|      0|                                                    }
 2413|  7.58k|                                                    s->bsBuff = (s->bsBuff << 8) |
 2414|  7.58k|                                                                (UInt32) * ((UChar *)(s->strm)->next_in);
 2415|  7.58k|                                                    s->bsLive += 8;
 2416|  7.58k|                                                    ((s->strm)->next_in)++;
 2417|  7.58k|                                                    ((s->strm)->avail_in)--;
 2418|  7.58k|                                                    ((s->strm)->total_in_lo32)++;
 2419|  7.58k|                                                    if ((s->strm)->total_in_lo32 == 0U) {
 2420|      0|                                                        ((s->strm)->total_in_hi32)++;
 2421|      0|                                                    }
 2422|  7.58k|                                                }
 2423|  60.3k|while_break___49: /* CIL Label */
 2424|  60.3k|                                                ;
 2425|  60.3k|                                            }
 2426|      0|                                            zvec = (zvec << 1) | zj;
 2427|  60.3k|                                        }
 2428|  38.7k|while_break___48: /* CIL Label */
 2429|  38.7k|                                        ;
 2430|  38.7k|                                    }
 2431|  38.7k|                                    if (zvec - *(gBase + zn) < 0) {
 2432|      0|                                        retVal = -4;
 2433|      0|                                        goto save_state_and_return;
 2434|      0|                                    }
 2435|  38.7k|                                    else {
 2436|  38.7k|                                        if (zvec - *(gBase + zn) >= 258) {
 2437|      0|                                            retVal = -4;
 2438|      0|                                            goto save_state_and_return;
 2439|      0|                                        }
 2440|  38.7k|                                    }
 2441|  38.7k|                                    nextSym = *(gPerm + (zvec - *(gBase + zn)));
 2442|  38.7k|                                    if (!(nextSym == 0)) {
 2443|  28.4k|                                        if (!(nextSym == 1)) {
 2444|  22.3k|                                            goto while_break___46;
 2445|  22.3k|                                        }
 2446|  28.4k|                                    }
 2447|  38.7k|                                }
 2448|  22.3k|while_break___46: /* CIL Label */
 2449|  22.3k|                                ;
 2450|  22.3k|                            }
 2451|      0|                            es++;
 2452|  22.3k|                            uc = s->seqToUnseq[s->mtfa[s->mtfbase[0]]];
 2453|  22.3k|                            s->unzftab[uc] += es;
 2454|  22.3k|                            if (s->smallDecompress) {
 2455|      0|                                {
 2456|      0|                                    while (1) {
 2457|      0|while_continue___50: /* CIL Label */
 2458|      0|                                        ;
 2459|      0|                                        if (!(es > 0)) {
 2460|      0|                                            goto while_break___50;
 2461|      0|                                        }
 2462|      0|                                        if (nblock >= nblockMAX) {
 2463|      0|                                            retVal = -4;
 2464|      0|                                            goto save_state_and_return;
 2465|      0|                                        }
 2466|      0|                                        *(s->ll16 + nblock) = (UInt16)uc;
 2467|      0|                                        nblock++;
 2468|      0|                                        es--;
 2469|      0|                                    }
 2470|      0|while_break___50: /* CIL Label */
 2471|      0|                                    ;
 2472|      0|                                }
 2473|      0|                            }
 2474|  22.3k|                            else {
 2475|  22.3k|                                {
 2476|   279k|                                    while (1) {
 2477|   279k|while_continue___51: /* CIL Label */
 2478|   279k|                                        ;
 2479|   279k|                                        if (!(es > 0)) {
 2480|  22.3k|                                            goto while_break___51;
 2481|  22.3k|                                        }
 2482|   257k|                                        if (nblock >= nblockMAX) {
 2483|      0|                                            retVal = -4;
 2484|      0|                                            goto save_state_and_return;
 2485|      0|                                        }
 2486|   257k|                                        *(s->tt + nblock) = (UInt32)uc;
 2487|   257k|                                        nblock++;
 2488|   257k|                                        es--;
 2489|   257k|                                    }
 2490|  22.3k|while_break___51: /* CIL Label */
 2491|  22.3k|                                    ;
 2492|  22.3k|                                }
 2493|  22.3k|                            }
 2494|  22.3k|                            goto while_continue___45;
 2495|  22.3k|                        }
 2496|  1.08M|                        else {
 2497|  1.08M|                            if (nblock >= nblockMAX) {
 2498|      0|                                retVal = -4;
 2499|      0|                                goto save_state_and_return;
 2500|      0|                            }
 2501|  1.08M|                            nn = (UInt32)(nextSym - 1);
 2502|  1.08M|                            if (nn < 16U) {
 2503|  99.4k|                                pp = s->mtfbase[0];
 2504|  99.4k|                                uc = s->mtfa[(UInt32)pp + nn];
 2505|  99.4k|                                {
 2506|   223k|                                    while (1) {
 2507|   223k|while_continue___52: /* CIL Label */
 2508|   223k|                                        ;
 2509|   223k|                                        if (!(nn > 3U)) {
 2510|  99.4k|                                            goto while_break___52;
 2511|  99.4k|                                        }
 2512|   123k|                                        z = (Int32)((UInt32)pp + nn);
 2513|   123k|                                        s->mtfa[z] = s->mtfa[z - 1];
 2514|   123k|                                        s->mtfa[z - 1] = s->mtfa[z - 2];
 2515|   123k|                                        s->mtfa[z - 2] = s->mtfa[z - 3];
 2516|   123k|                                        s->mtfa[z - 3] = s->mtfa[z - 4];
 2517|   123k|                                        nn -= 4U;
 2518|   123k|                                    }
 2519|  99.4k|while_break___52: /* CIL Label */
 2520|  99.4k|                                    ;
 2521|  99.4k|                                }
 2522|      0|                                {
 2523|   253k|                                    while (1) {
 2524|   253k|while_continue___53: /* CIL Label */
 2525|   253k|                                        ;
 2526|   253k|                                        if (!(nn > 0U)) {
 2527|  99.4k|                                            goto while_break___53;
 2528|  99.4k|                                        }
 2529|   153k|                                        s->mtfa[(UInt32)pp + nn] = s->mtfa[((UInt32)pp + nn) - 1U];
 2530|   153k|                                        nn--;
 2531|   153k|                                    }
 2532|  99.4k|while_break___53: /* CIL Label */
 2533|  99.4k|                                    ;
 2534|  99.4k|                                }
 2535|      0|                                s->mtfa[pp] = uc;
 2536|  99.4k|                            }
 2537|   988k|                            else {
 2538|   988k|                                lno = (Int32)(nn / 16U);
 2539|   988k|                                off = (Int32)(nn % 16U);
 2540|   988k|                                pp = s->mtfbase[lno] + off;
 2541|   988k|                                uc = s->mtfa[pp];
 2542|   988k|                                {
 2543|  8.40M|                                    while (1) {
 2544|  8.40M|while_continue___54: /* CIL Label */
 2545|  8.40M|                                        ;
 2546|  8.40M|                                        if (!(pp > s->mtfbase[lno])) {
 2547|   988k|                                            goto while_break___54;
 2548|   988k|                                        }
 2549|  7.41M|                                        s->mtfa[pp] = s->mtfa[pp - 1];
 2550|  7.41M|                                        pp--;
 2551|  7.41M|                                    }
 2552|   988k|while_break___54: /* CIL Label */
 2553|   988k|                                    ;
 2554|   988k|                                }
 2555|      0|                                (s->mtfbase[lno])++;
 2556|   988k|                                {
 2557|  8.86M|                                    while (1) {
 2558|  8.86M|while_continue___55: /* CIL Label */
 2559|  8.86M|                                        ;
 2560|  8.86M|                                        if (!(lno > 0)) {
 2561|   988k|                                            goto while_break___55;
 2562|   988k|                                        }
 2563|  7.87M|                                        (s->mtfbase[lno])--;
 2564|  7.87M|                                        s->mtfa[s->mtfbase[lno]] =
 2565|  7.87M|                                            s->mtfa[(s->mtfbase[lno - 1] + 16) - 1];
 2566|  7.87M|                                        lno--;
 2567|  7.87M|                                    }
 2568|   988k|while_break___55: /* CIL Label */
 2569|   988k|                                    ;
 2570|   988k|                                }
 2571|      0|                                (s->mtfbase[0])--;
 2572|   988k|                                s->mtfa[s->mtfbase[0]] = uc;
 2573|   988k|                                if (s->mtfbase[0] == 0) {
 2574|    256|                                    kk___0 = 4095;
 2575|    256|                                    ii___0 = 15;
 2576|    256|                                    {
 2577|  4.35k|                                        while (1) {
 2578|  4.35k|while_continue___56: /* CIL Label */
 2579|  4.35k|                                            ;
 2580|  4.35k|                                            if (!(ii___0 >= 0)) {
 2581|    256|                                                goto while_break___56;
 2582|    256|                                            }
 2583|  4.09k|                                            jj___0 = 15;
 2584|  4.09k|                                            {
 2585|  69.6k|                                                while (1) {
 2586|  69.6k|while_continue___57: /* CIL Label */
 2587|  69.6k|                                                    ;
 2588|  69.6k|                                                    if (!(jj___0 >= 0)) {
 2589|  4.09k|                                                        goto while_break___57;
 2590|  4.09k|                                                    }
 2591|  65.5k|                                                    s->mtfa[kk___0] =
 2592|  65.5k|                                                        s->mtfa[s->mtfbase[ii___0] + jj___0];
 2593|  65.5k|                                                    kk___0--;
 2594|  65.5k|                                                    jj___0--;
 2595|  65.5k|                                                }
 2596|  4.09k|while_break___57: /* CIL Label */
 2597|  4.09k|                                                ;
 2598|  4.09k|                                            }
 2599|      0|                                            s->mtfbase[ii___0] = kk___0 + 1;
 2600|  4.09k|                                            ii___0--;
 2601|  4.09k|                                        }
 2602|    256|while_break___56: /* CIL Label */
 2603|    256|                                        ;
 2604|    256|                                    }
 2605|    256|                                }
 2606|   988k|                            }
 2607|  1.08M|                            (s->unzftab[s->seqToUnseq[uc]])++;
 2608|  1.08M|                            if (s->smallDecompress) {
 2609|      0|                                *(s->ll16 + nblock) = (UInt16)s->seqToUnseq[uc];
 2610|      0|                            }
 2611|  1.08M|                            else {
 2612|  1.08M|                                *(s->tt + nblock) = (UInt32)s->seqToUnseq[uc];
 2613|  1.08M|                            }
 2614|  1.08M|                            nblock++;
 2615|  1.08M|                            if (groupPos == 0) {
 2616|  21.7k|                                groupNo++;
 2617|  21.7k|                                if (groupNo >= nSelectors) {
 2618|      0|                                    retVal = -4;
 2619|      0|                                    goto save_state_and_return;
 2620|      0|                                }
 2621|  21.7k|                                groupPos = 50;
 2622|  21.7k|                                gSel = (Int32)s->selector[groupNo];
 2623|  21.7k|                                gMinlen = s->minLens[gSel];
 2624|  21.7k|                                gLimit = &s->limit[gSel][0];
 2625|  21.7k|                                gPerm = &s->perm[gSel][0];
 2626|  21.7k|                                gBase = &s->base[gSel][0];
 2627|  21.7k|                            }
 2628|  1.08M|                            groupPos--;
 2629|  1.08M|                            zn = gMinlen;
 2630|  1.08M|case_40: /* CIL Label */
 2631|  1.08M|                            s->state = 40;
 2632|  1.08M|                            {
 2633|  1.95M|                                while (1) {
 2634|  1.95M|while_continue___58: /* CIL Label */
 2635|  1.95M|                                    ;
 2636|  1.95M|                                    if (s->bsLive >= zn) {
 2637|  1.08M|                                        v___30 = (s->bsBuff >> (s->bsLive - zn)) &
 2638|  1.08M|                                                 (unsigned int)((1 << zn) - 1);
 2639|  1.08M|                                        s->bsLive -= zn;
 2640|  1.08M|                                        zvec = (Int32)v___30;
 2641|  1.08M|                                        goto while_break___58;
 2642|  1.08M|                                    }
 2643|   862k|                                    if ((s->strm)->avail_in == 0U) {
 2644|    173|                                        retVal = 0;
 2645|    173|                                        goto save_state_and_return;
 2646|    173|                                    }
 2647|   861k|                                    s->bsBuff = (s->bsBuff << 8) |
 2648|   861k|                                                (UInt32) * ((UChar *)(s->strm)->next_in);
 2649|   861k|                                    s->bsLive += 8;
 2650|   861k|                                    ((s->strm)->next_in)++;
 2651|   861k|                                    ((s->strm)->avail_in)--;
 2652|   861k|                                    ((s->strm)->total_in_lo32)++;
 2653|   861k|                                    if ((s->strm)->total_in_lo32 == 0U) {
 2654|      0|                                        ((s->strm)->total_in_hi32)++;
 2655|      0|                                    }
 2656|   861k|                                }
 2657|  1.08M|while_break___58: /* CIL Label */
 2658|  1.08M|                                ;
 2659|  1.08M|                            }
 2660|      0|                            {
 2661|  2.69M|                                while (1) {
 2662|  2.69M|while_continue___59: /* CIL Label */
 2663|  2.69M|                                    ;
 2664|  2.69M|                                    if (zn > 20) {
 2665|      0|                                        retVal = -4;
 2666|      0|                                        goto save_state_and_return;
 2667|      0|                                    }
 2668|  2.69M|                                    if (zvec <= *(gLimit + zn)) {
 2669|  1.08M|                                        goto while_break___59;
 2670|  1.08M|                                    }
 2671|  1.60M|                                    zn++;
 2672|  1.60M|case_41: /* CIL Label */
 2673|  1.60M|                                    s->state = 41;
 2674|  1.60M|                                    {
 2675|  1.80M|                                        while (1) {
 2676|  1.80M|while_continue___60: /* CIL Label */
 2677|  1.80M|                                            ;
 2678|  1.80M|                                            if (s->bsLive >= 1) {
 2679|  1.60M|                                                v___31 = (s->bsBuff >> (s->bsLive - 1)) &
 2680|  1.60M|                                                         (unsigned int)((1 << 1) - 1);
 2681|  1.60M|                                                (s->bsLive)--;
 2682|  1.60M|                                                zj = (Int32)v___31;
 2683|  1.60M|                                                goto while_break___60;
 2684|  1.60M|                                            }
 2685|   199k|                                            if ((s->strm)->avail_in == 0U) {
 2686|     40|                                                retVal = 0;
 2687|     40|                                                goto save_state_and_return;
 2688|     40|                                            }
 2689|   199k|                                            s->bsBuff = (s->bsBuff << 8) |
 2690|   199k|                                                        (UInt32) * ((UChar *)(s->strm)->next_in);
 2691|   199k|                                            s->bsLive += 8;
 2692|   199k|                                            ((s->strm)->next_in)++;
 2693|   199k|                                            ((s->strm)->avail_in)--;
 2694|   199k|                                            ((s->strm)->total_in_lo32)++;
 2695|   199k|                                            if ((s->strm)->total_in_lo32 == 0U) {
 2696|      0|                                                ((s->strm)->total_in_hi32)++;
 2697|      0|                                            }
 2698|   199k|                                        }
 2699|  1.60M|while_break___60: /* CIL Label */
 2700|  1.60M|                                        ;
 2701|  1.60M|                                    }
 2702|      0|                                    zvec = (zvec << 1) | zj;
 2703|  1.60M|                                }
 2704|  1.08M|while_break___59: /* CIL Label */
 2705|  1.08M|                                ;
 2706|  1.08M|                            }
 2707|  1.08M|                            if (zvec - *(gBase + zn) < 0) {
 2708|      0|                                retVal = -4;
 2709|      0|                                goto save_state_and_return;
 2710|      0|                            }
 2711|  1.08M|                            else {
 2712|  1.08M|                                if (zvec - *(gBase + zn) >= 258) {
 2713|      0|                                    retVal = -4;
 2714|      0|                                    goto save_state_and_return;
 2715|      0|                                }
 2716|  1.08M|                            }
 2717|  1.08M|                            nextSym = *(gPerm + (zvec - *(gBase + zn)));
 2718|  1.08M|                            goto while_continue___45;
 2719|  1.08M|                        }
 2720|  1.09M|                    }
 2721|  1.11M|                }
 2722|      4|while_break___45: /* CIL Label */
 2723|      4|                ;
 2724|      4|            }
 2725|      4|            if (s->origPtr < 0) {
 2726|      0|                retVal = -4;
 2727|      0|                goto save_state_and_return;
 2728|      0|            }
 2729|      4|            else {
 2730|      4|                if (s->origPtr >= nblock) {
 2731|      0|                    retVal = -4;
 2732|      0|                    goto save_state_and_return;
 2733|      0|                }
 2734|      4|            }
 2735|      4|            s->cftab[0] = 0;
 2736|      4|            i = 1;
 2737|      4|            {
 2738|  1.02k|                while (1) {
 2739|  1.02k|while_continue___61: /* CIL Label */
 2740|  1.02k|                    ;
 2741|  1.02k|                    if (!(i <= 256)) {
 2742|      4|                        goto while_break___61;
 2743|      4|                    }
 2744|  1.02k|                    s->cftab[i] = s->unzftab[i - 1];
 2745|  1.02k|                    i++;
 2746|  1.02k|                }
 2747|      4|while_break___61: /* CIL Label */
 2748|      4|                ;
 2749|      4|            }
 2750|      0|            i = 1;
 2751|      4|            {
 2752|  1.02k|                while (1) {
 2753|  1.02k|while_continue___62: /* CIL Label */
 2754|  1.02k|                    ;
 2755|  1.02k|                    if (!(i <= 256)) {
 2756|      4|                        goto while_break___62;
 2757|      4|                    }
 2758|  1.02k|                    s->cftab[i] += s->cftab[i - 1];
 2759|  1.02k|                    i++;
 2760|  1.02k|                }
 2761|      4|while_break___62: /* CIL Label */
 2762|      4|                ;
 2763|      4|            }
 2764|      0|            i = 0;
 2765|      4|            {
 2766|  1.03k|                while (1) {
 2767|  1.03k|while_continue___63: /* CIL Label */
 2768|  1.03k|                    ;
 2769|  1.03k|                    if (!(i <= 256)) {
 2770|      4|                        goto while_break___63;
 2771|      4|                    }
 2772|  1.02k|                    if (s->cftab[i] < 0) {
 2773|      0|                        retVal = -4;
 2774|      0|                        goto save_state_and_return;
 2775|      0|                    }
 2776|  1.02k|                    else {
 2777|  1.02k|                        if (s->cftab[i] > nblock) {
 2778|      0|                            retVal = -4;
 2779|      0|                            goto save_state_and_return;
 2780|      0|                        }
 2781|  1.02k|                    }
 2782|  1.02k|                    i++;
 2783|  1.02k|                }
 2784|      4|while_break___63: /* CIL Label */
 2785|      4|                ;
 2786|      4|            }
 2787|      0|            s->state_out_len = 0;
 2788|      4|            s->state_out_ch = (UChar)0;
 2789|      4|            s->calculatedBlockCRC = (UInt32)4294967295L;
 2790|      4|            s->state = 2;
 2791|      4|            if (s->verbosity >= 2) {
 2792|      0|                {
 2793|      0|                    fprintf((FILE * /* __restrict  */) stderr,
 2794|      0|                            (char const * /* __restrict  */) "rt+rld");
 2795|      0|                }
 2796|      0|            }
 2797|      4|            if (s->smallDecompress) {
 2798|      0|                i = 0;
 2799|      0|                {
 2800|      0|                    while (1) {
 2801|      0|while_continue___64: /* CIL Label */
 2802|      0|                        ;
 2803|      0|                        if (!(i <= 256)) {
 2804|      0|                            goto while_break___64;
 2805|      0|                        }
 2806|      0|                        s->cftabCopy[i] = s->cftab[i];
 2807|      0|                        i++;
 2808|      0|                    }
 2809|      0|while_break___64: /* CIL Label */
 2810|      0|                    ;
 2811|      0|                }
 2812|      0|                i = 0;
 2813|      0|                {
 2814|      0|                    while (1) {
 2815|      0|while_continue___65: /* CIL Label */
 2816|      0|                        ;
 2817|      0|                        if (!(i < nblock)) {
 2818|      0|                            goto while_break___65;
 2819|      0|                        }
 2820|      0|                        uc = (UChar) * (s->ll16 + i);
 2821|      0|                        *(s->ll16 + i) = (UInt16)(s->cftabCopy[uc] & 65535);
 2822|      0|                        if ((i & 1) == 0) {
 2823|      0|                            *(s->ll4 + (i >> 1)) = (UChar)(((int)*(s->ll4 + (i >> 1)) & 240) |
 2824|      0|                                                           (s->cftabCopy[uc] >> 16));
 2825|      0|                        }
 2826|      0|                        else {
 2827|      0|                            *(s->ll4 + (i >> 1)) = (UChar)(((int)*(s->ll4 + (i >> 1)) & 15) |
 2828|      0|                                                           ((s->cftabCopy[uc] >> 16) << 4));
 2829|      0|                        }
 2830|      0|                        (s->cftabCopy[uc])++;
 2831|      0|                        i++;
 2832|      0|                    }
 2833|      0|while_break___65: /* CIL Label */
 2834|      0|                    ;
 2835|      0|                }
 2836|      0|                i = s->origPtr;
 2837|      0|                j = (Int32)(
 2838|      0|                        (UInt32) * (s->ll16 + i) |
 2839|      0|                        ((((UInt32) * (s->ll4 + (i >> 1)) >> ((i << 2) & 4)) & 15U) << 16));
 2840|      0|                {
 2841|      0|                    while (1) {
 2842|      0|while_continue___66: /* CIL Label */
 2843|      0|                        ;
 2844|      0|                        tmp___0 = (Int32)(
 2845|      0|                                      (UInt32) * (s->ll16 + j) |
 2846|      0|                                      ((((UInt32) * (s->ll4 + (j >> 1)) >> ((j << 2) & 4)) & 15U)
 2847|      0|                                       << 16));
 2848|      0|                        *(s->ll16 + j) = (UInt16)(i & 65535);
 2849|      0|                        if ((j & 1) == 0) {
 2850|      0|                            *(s->ll4 + (j >> 1)) =
 2851|      0|                                (UChar)(((int)*(s->ll4 + (j >> 1)) & 240) | (i >> 16));
 2852|      0|                        }
 2853|      0|                        else {
 2854|      0|                            *(s->ll4 + (j >> 1)) =
 2855|      0|                                (UChar)(((int)*(s->ll4 + (j >> 1)) & 15) | ((i >> 16) << 4));
 2856|      0|                        }
 2857|      0|                        i = j;
 2858|      0|                        j = tmp___0;
 2859|      0|                        if (!(i != s->origPtr)) {
 2860|      0|                            goto while_break___66;
 2861|      0|                        }
 2862|      0|                    }
 2863|      0|while_break___66: /* CIL Label */
 2864|      0|                    ;
 2865|      0|                }
 2866|      0|                s->tPos = (UInt32)s->origPtr;
 2867|      0|                s->nblock_used = 0;
 2868|      0|                if (s->blockRandomised) {
 2869|      0|                    s->rNToGo = 0;
 2870|      0|                    s->rTPos = 0;
 2871|      0|                    if (s->tPos >= 100000U * (UInt32)s->blockSize100k) {
 2872|      0|                        return ((Int32)((Bool)1));
 2873|      0|                    }
 2874|      0|                    {
 2875|      0|                        s->k0 = BZ2_indexIntoF((Int32)s->tPos, s->cftab);
 2876|      0|                        s->tPos = (UInt32) * (s->ll16 + s->tPos) |
 2877|      0|                                  ((((UInt32) * (s->ll4 + (s->tPos >> 1)) >>
 2878|      0|                                     ((s->tPos << 2) & 4U)) &
 2879|      0|                                    15U)
 2880|      0|                                   << 16);
 2881|      0|                        (s->nblock_used)++;
 2882|      0|                    }
 2883|      0|                    if (s->rNToGo == 0) {
 2884|      0|                        s->rNToGo = BZ2_rNums[s->rTPos];
 2885|      0|                        (s->rTPos)++;
 2886|      0|                        if (s->rTPos == 512) {
 2887|      0|                            s->rTPos = 0;
 2888|      0|                        }
 2889|      0|                    }
 2890|      0|                    (s->rNToGo)--;
 2891|      0|                    if (s->rNToGo == 1) {
 2892|      0|                        tmp___1 = 1;
 2893|      0|                    }
 2894|      0|                    else {
 2895|      0|                        tmp___1 = 0;
 2896|      0|                    }
 2897|      0|                    s->k0 ^= tmp___1;
 2898|      0|                }
 2899|      0|                else {
 2900|      0|                    if (s->tPos >= 100000U * (UInt32)s->blockSize100k) {
 2901|      0|                        return ((Int32)((Bool)1));
 2902|      0|                    }
 2903|      0|                    {
 2904|      0|                        s->k0 = BZ2_indexIntoF((Int32)s->tPos, s->cftab);
 2905|      0|                        s->tPos = (UInt32) * (s->ll16 + s->tPos) |
 2906|      0|                                  ((((UInt32) * (s->ll4 + (s->tPos >> 1)) >>
 2907|      0|                                     ((s->tPos << 2) & 4U)) &
 2908|      0|                                    15U)
 2909|      0|                                   << 16);
 2910|      0|                        (s->nblock_used)++;
 2911|      0|                    }
 2912|      0|                }
 2913|      0|            }
 2914|      4|            else {
 2915|      4|                i = 0;
 2916|      4|                {
 2917|  1.34M|                    while (1) {
 2918|  1.34M|while_continue___67: /* CIL Label */
 2919|  1.34M|                        ;
 2920|  1.34M|                        if (!(i < nblock)) {
 2921|      4|                            goto while_break___67;
 2922|      4|                        }
 2923|  1.34M|                        uc = (UChar)(*(s->tt + i) & 255U);
 2924|  1.34M|                        *(s->tt + s->cftab[uc]) |= (unsigned int)(i << 8);
 2925|  1.34M|                        (s->cftab[uc])++;
 2926|  1.34M|                        i++;
 2927|  1.34M|                    }
 2928|      4|while_break___67: /* CIL Label */
 2929|      4|                    ;
 2930|      4|                }
 2931|      0|                s->tPos = *(s->tt + s->origPtr) >> 8;
 2932|      4|                s->nblock_used = 0;
 2933|      4|                if (s->blockRandomised) {
 2934|      0|                    s->rNToGo = 0;
 2935|      0|                    s->rTPos = 0;
 2936|      0|                    if (s->tPos >= 100000U * (UInt32)s->blockSize100k) {
 2937|      0|                        return ((Int32)((Bool)1));
 2938|      0|                    }
 2939|      0|                    s->tPos = *(s->tt + s->tPos);
 2940|      0|                    s->k0 = (Int32)((UChar)(s->tPos & 255U));
 2941|      0|                    s->tPos >>= 8;
 2942|      0|                    (s->nblock_used)++;
 2943|      0|                    if (s->rNToGo == 0) {
 2944|      0|                        s->rNToGo = BZ2_rNums[s->rTPos];
 2945|      0|                        (s->rTPos)++;
 2946|      0|                        if (s->rTPos == 512) {
 2947|      0|                            s->rTPos = 0;
 2948|      0|                        }
 2949|      0|                    }
 2950|      0|                    (s->rNToGo)--;
 2951|      0|                    if (s->rNToGo == 1) {
 2952|      0|                        tmp___2 = 1;
 2953|      0|                    }
 2954|      0|                    else {
 2955|      0|                        tmp___2 = 0;
 2956|      0|                    }
 2957|      0|                    s->k0 ^= tmp___2;
 2958|      0|                }
 2959|      4|                else {
 2960|      4|                    if (s->tPos >= 100000U * (UInt32)s->blockSize100k) {
 2961|      0|                        return ((Int32)((Bool)1));
 2962|      0|                    }
 2963|      4|                    s->tPos = *(s->tt + s->tPos);
 2964|      4|                    s->k0 = (Int32)((UChar)(s->tPos & 255U));
 2965|      4|                    s->tPos >>= 8;
 2966|      4|                    (s->nblock_used)++;
 2967|      4|                }
 2968|      4|            }
 2969|      4|            retVal = 0;
 2970|      4|            goto save_state_and_return;
 2971|      5|endhdr_2:
 2972|      5|case_42: /* CIL Label */
 2973|      5|            s->state = 42;
 2974|      5|            {
 2975|     10|                while (1) {
 2976|     10|while_continue___68: /* CIL Label */
 2977|     10|                    ;
 2978|     10|                    if (s->bsLive >= 8) {
 2979|      5|                        v___32 =
 2980|      5|                            (s->bsBuff >> (s->bsLive - 8)) & (unsigned int)((1 << 8) - 1);
 2981|      5|                        s->bsLive -= 8;
 2982|      5|                        uc = (UChar)v___32;
 2983|      5|                        goto while_break___68;
 2984|      5|                    }
 2985|      5|                    if ((s->strm)->avail_in == 0U) {
 2986|      0|                        retVal = 0;
 2987|      0|                        goto save_state_and_return;
 2988|      0|                    }
 2989|      5|                    s->bsBuff =
 2990|      5|                        (s->bsBuff << 8) | (UInt32) * ((UChar *)(s->strm)->next_in);
 2991|      5|                    s->bsLive += 8;
 2992|      5|                    ((s->strm)->next_in)++;
 2993|      5|                    ((s->strm)->avail_in)--;
 2994|      5|                    ((s->strm)->total_in_lo32)++;
 2995|      5|                    if ((s->strm)->total_in_lo32 == 0U) {
 2996|      0|                        ((s->strm)->total_in_hi32)++;
 2997|      0|                    }
 2998|      5|                }
 2999|      5|while_break___68: /* CIL Label */
 3000|      5|                ;
 3001|      5|            }
 3002|      5|            if ((int)uc != 114) {
 3003|      0|                retVal = -4;
 3004|      0|                goto save_state_and_return;
 3005|      0|            }
 3006|      5|case_43: /* CIL Label */
 3007|      5|            s->state = 43;
 3008|      5|            {
 3009|     10|                while (1) {
 3010|     10|while_continue___69: /* CIL Label */
 3011|     10|                    ;
 3012|     10|                    if (s->bsLive >= 8) {
 3013|      5|                        v___33 =
 3014|      5|                            (s->bsBuff >> (s->bsLive - 8)) & (unsigned int)((1 << 8) - 1);
 3015|      5|                        s->bsLive -= 8;
 3016|      5|                        uc = (UChar)v___33;
 3017|      5|                        goto while_break___69;
 3018|      5|                    }
 3019|      5|                    if ((s->strm)->avail_in == 0U) {
 3020|      0|                        retVal = 0;
 3021|      0|                        goto save_state_and_return;
 3022|      0|                    }
 3023|      5|                    s->bsBuff =
 3024|      5|                        (s->bsBuff << 8) | (UInt32) * ((UChar *)(s->strm)->next_in);
 3025|      5|                    s->bsLive += 8;
 3026|      5|                    ((s->strm)->next_in)++;
 3027|      5|                    ((s->strm)->avail_in)--;
 3028|      5|                    ((s->strm)->total_in_lo32)++;
 3029|      5|                    if ((s->strm)->total_in_lo32 == 0U) {
 3030|      0|                        ((s->strm)->total_in_hi32)++;
 3031|      0|                    }
 3032|      5|                }
 3033|      5|while_break___69: /* CIL Label */
 3034|      5|                ;
 3035|      5|            }
 3036|      5|            if ((int)uc != 69) {
 3037|      0|                retVal = -4;
 3038|      0|                goto save_state_and_return;
 3039|      0|            }
 3040|      5|case_44: /* CIL Label */
 3041|      5|            s->state = 44;
 3042|      5|            {
 3043|     10|                while (1) {
 3044|     10|while_continue___70: /* CIL Label */
 3045|     10|                    ;
 3046|     10|                    if (s->bsLive >= 8) {
 3047|      5|                        v___34 =
 3048|      5|                            (s->bsBuff >> (s->bsLive - 8)) & (unsigned int)((1 << 8) - 1);
 3049|      5|                        s->bsLive -= 8;
 3050|      5|                        uc = (UChar)v___34;
 3051|      5|                        goto while_break___70;
 3052|      5|                    }
 3053|      5|                    if ((s->strm)->avail_in == 0U) {
 3054|      0|                        retVal = 0;
 3055|      0|                        goto save_state_and_return;
 3056|      0|                    }
 3057|      5|                    s->bsBuff =
 3058|      5|                        (s->bsBuff << 8) | (UInt32) * ((UChar *)(s->strm)->next_in);
 3059|      5|                    s->bsLive += 8;
 3060|      5|                    ((s->strm)->next_in)++;
 3061|      5|                    ((s->strm)->avail_in)--;
 3062|      5|                    ((s->strm)->total_in_lo32)++;
 3063|      5|                    if ((s->strm)->total_in_lo32 == 0U) {
 3064|      0|                        ((s->strm)->total_in_hi32)++;
 3065|      0|                    }
 3066|      5|                }
 3067|      5|while_break___70: /* CIL Label */
 3068|      5|                ;
 3069|      5|            }
 3070|      5|            if ((int)uc != 56) {
 3071|      0|                retVal = -4;
 3072|      0|                goto save_state_and_return;
 3073|      0|            }
 3074|      5|case_45: /* CIL Label */
 3075|      5|            s->state = 45;
 3076|      5|            {
 3077|     10|                while (1) {
 3078|     10|while_continue___71: /* CIL Label */
 3079|     10|                    ;
 3080|     10|                    if (s->bsLive >= 8) {
 3081|      5|                        v___35 =
 3082|      5|                            (s->bsBuff >> (s->bsLive - 8)) & (unsigned int)((1 << 8) - 1);
 3083|      5|                        s->bsLive -= 8;
 3084|      5|                        uc = (UChar)v___35;
 3085|      5|                        goto while_break___71;
 3086|      5|                    }
 3087|      5|                    if ((s->strm)->avail_in == 0U) {
 3088|      0|                        retVal = 0;
 3089|      0|                        goto save_state_and_return;
 3090|      0|                    }
 3091|      5|                    s->bsBuff =
 3092|      5|                        (s->bsBuff << 8) | (UInt32) * ((UChar *)(s->strm)->next_in);
 3093|      5|                    s->bsLive += 8;
 3094|      5|                    ((s->strm)->next_in)++;
 3095|      5|                    ((s->strm)->avail_in)--;
 3096|      5|                    ((s->strm)->total_in_lo32)++;
 3097|      5|                    if ((s->strm)->total_in_lo32 == 0U) {
 3098|      0|                        ((s->strm)->total_in_hi32)++;
 3099|      0|                    }
 3100|      5|                }
 3101|      5|while_break___71: /* CIL Label */
 3102|      5|                ;
 3103|      5|            }
 3104|      5|            if ((int)uc != 80) {
 3105|      0|                retVal = -4;
 3106|      0|                goto save_state_and_return;
 3107|      0|            }
 3108|      5|case_46: /* CIL Label */
 3109|      5|            s->state = 46;
 3110|      5|            {
 3111|     10|                while (1) {
 3112|     10|while_continue___72: /* CIL Label */
 3113|     10|                    ;
 3114|     10|                    if (s->bsLive >= 8) {
 3115|      5|                        v___36 =
 3116|      5|                            (s->bsBuff >> (s->bsLive - 8)) & (unsigned int)((1 << 8) - 1);
 3117|      5|                        s->bsLive -= 8;
 3118|      5|                        uc = (UChar)v___36;
 3119|      5|                        goto while_break___72;
 3120|      5|                    }
 3121|      5|                    if ((s->strm)->avail_in == 0U) {
 3122|      0|                        retVal = 0;
 3123|      0|                        goto save_state_and_return;
 3124|      0|                    }
 3125|      5|                    s->bsBuff =
 3126|      5|                        (s->bsBuff << 8) | (UInt32) * ((UChar *)(s->strm)->next_in);
 3127|      5|                    s->bsLive += 8;
 3128|      5|                    ((s->strm)->next_in)++;
 3129|      5|                    ((s->strm)->avail_in)--;
 3130|      5|                    ((s->strm)->total_in_lo32)++;
 3131|      5|                    if ((s->strm)->total_in_lo32 == 0U) {
 3132|      0|                        ((s->strm)->total_in_hi32)++;
 3133|      0|                    }
 3134|      5|                }
 3135|      5|while_break___72: /* CIL Label */
 3136|      5|                ;
 3137|      5|            }
 3138|      5|            if ((int)uc != 144) {
 3139|      0|                retVal = -4;
 3140|      0|                goto save_state_and_return;
 3141|      0|            }
 3142|      5|            s->storedCombinedCRC = (UInt32)0;
 3143|      5|case_47: /* CIL Label */
 3144|      5|            s->state = 47;
 3145|      5|            {
 3146|     10|                while (1) {
 3147|     10|while_continue___73: /* CIL Label */
 3148|     10|                    ;
 3149|     10|                    if (s->bsLive >= 8) {
 3150|      5|                        v___37 =
 3151|      5|                            (s->bsBuff >> (s->bsLive - 8)) & (unsigned int)((1 << 8) - 1);
 3152|      5|                        s->bsLive -= 8;
 3153|      5|                        uc = (UChar)v___37;
 3154|      5|                        goto while_break___73;
 3155|      5|                    }
 3156|      5|                    if ((s->strm)->avail_in == 0U) {
 3157|      0|                        retVal = 0;
 3158|      0|                        goto save_state_and_return;
 3159|      0|                    }
 3160|      5|                    s->bsBuff =
 3161|      5|                        (s->bsBuff << 8) | (UInt32) * ((UChar *)(s->strm)->next_in);
 3162|      5|                    s->bsLive += 8;
 3163|      5|                    ((s->strm)->next_in)++;
 3164|      5|                    ((s->strm)->avail_in)--;
 3165|      5|                    ((s->strm)->total_in_lo32)++;
 3166|      5|                    if ((s->strm)->total_in_lo32 == 0U) {
 3167|      0|                        ((s->strm)->total_in_hi32)++;
 3168|      0|                    }
 3169|      5|                }
 3170|      5|while_break___73: /* CIL Label */
 3171|      5|                ;
 3172|      5|            }
 3173|      0|            s->storedCombinedCRC = (s->storedCombinedCRC << 8) | (UInt32)uc;
 3174|      5|case_48: /* CIL Label */
 3175|      5|            s->state = 48;
 3176|      5|            {
 3177|     10|                while (1) {
 3178|     10|while_continue___74: /* CIL Label */
 3179|     10|                    ;
 3180|     10|                    if (s->bsLive >= 8) {
 3181|      5|                        v___38 =
 3182|      5|                            (s->bsBuff >> (s->bsLive - 8)) & (unsigned int)((1 << 8) - 1);
 3183|      5|                        s->bsLive -= 8;
 3184|      5|                        uc = (UChar)v___38;
 3185|      5|                        goto while_break___74;
 3186|      5|                    }
 3187|      5|                    if ((s->strm)->avail_in == 0U) {
 3188|      0|                        retVal = 0;
 3189|      0|                        goto save_state_and_return;
 3190|      0|                    }
 3191|      5|                    s->bsBuff =
 3192|      5|                        (s->bsBuff << 8) | (UInt32) * ((UChar *)(s->strm)->next_in);
 3193|      5|                    s->bsLive += 8;
 3194|      5|                    ((s->strm)->next_in)++;
 3195|      5|                    ((s->strm)->avail_in)--;
 3196|      5|                    ((s->strm)->total_in_lo32)++;
 3197|      5|                    if ((s->strm)->total_in_lo32 == 0U) {
 3198|      0|                        ((s->strm)->total_in_hi32)++;
 3199|      0|                    }
 3200|      5|                }
 3201|      5|while_break___74: /* CIL Label */
 3202|      5|                ;
 3203|      5|            }
 3204|      0|            s->storedCombinedCRC = (s->storedCombinedCRC << 8) | (UInt32)uc;
 3205|      5|case_49: /* CIL Label */
 3206|      5|            s->state = 49;
 3207|      5|            {
 3208|     10|                while (1) {
 3209|     10|while_continue___75: /* CIL Label */
 3210|     10|                    ;
 3211|     10|                    if (s->bsLive >= 8) {
 3212|      5|                        v___39 =
 3213|      5|                            (s->bsBuff >> (s->bsLive - 8)) & (unsigned int)((1 << 8) - 1);
 3214|      5|                        s->bsLive -= 8;
 3215|      5|                        uc = (UChar)v___39;
 3216|      5|                        goto while_break___75;
 3217|      5|                    }
 3218|      5|                    if ((s->strm)->avail_in == 0U) {
 3219|      0|                        retVal = 0;
 3220|      0|                        goto save_state_and_return;
 3221|      0|                    }
 3222|      5|                    s->bsBuff =
 3223|      5|                        (s->bsBuff << 8) | (UInt32) * ((UChar *)(s->strm)->next_in);
 3224|      5|                    s->bsLive += 8;
 3225|      5|                    ((s->strm)->next_in)++;
 3226|      5|                    ((s->strm)->avail_in)--;
 3227|      5|                    ((s->strm)->total_in_lo32)++;
 3228|      5|                    if ((s->strm)->total_in_lo32 == 0U) {
 3229|      0|                        ((s->strm)->total_in_hi32)++;
 3230|      0|                    }
 3231|      5|                }
 3232|      5|while_break___75: /* CIL Label */
 3233|      5|                ;
 3234|      5|            }
 3235|      0|            s->storedCombinedCRC = (s->storedCombinedCRC << 8) | (UInt32)uc;
 3236|      5|case_50: /* CIL Label */
 3237|      5|            s->state = 50;
 3238|      5|            {
 3239|     10|                while (1) {
 3240|     10|while_continue___76: /* CIL Label */
 3241|     10|                    ;
 3242|     10|                    if (s->bsLive >= 8) {
 3243|      5|                        v___40 =
 3244|      5|                            (s->bsBuff >> (s->bsLive - 8)) & (unsigned int)((1 << 8) - 1);
 3245|      5|                        s->bsLive -= 8;
 3246|      5|                        uc = (UChar)v___40;
 3247|      5|                        goto while_break___76;
 3248|      5|                    }
 3249|      5|                    if ((s->strm)->avail_in == 0U) {
 3250|      0|                        retVal = 0;
 3251|      0|                        goto save_state_and_return;
 3252|      0|                    }
 3253|      5|                    s->bsBuff =
 3254|      5|                        (s->bsBuff << 8) | (UInt32) * ((UChar *)(s->strm)->next_in);
 3255|      5|                    s->bsLive += 8;
 3256|      5|                    ((s->strm)->next_in)++;
 3257|      5|                    ((s->strm)->avail_in)--;
 3258|      5|                    ((s->strm)->total_in_lo32)++;
 3259|      5|                    if ((s->strm)->total_in_lo32 == 0U) {
 3260|      0|                        ((s->strm)->total_in_hi32)++;
 3261|      0|                    }
 3262|      5|                }
 3263|      5|while_break___76: /* CIL Label */
 3264|      5|                ;
 3265|      5|            }
 3266|      0|            s->storedCombinedCRC = (s->storedCombinedCRC << 8) | (UInt32)uc;
 3267|      5|            s->state = 1;
 3268|      5|            retVal = 4;
 3269|      5|            goto save_state_and_return;
 3270|      0|switch_default : { /* CIL Label */
 3271|      0|                BZ2_bz__AssertH__fail(4001);
 3272|      0|            }
 3273|      0|switch_break: /* CIL Label */
 3274|      0|            ;
 3275|      0|        }
 3276|      0|        {
 3277|      0|            BZ2_bz__AssertH__fail(4002);
 3278|      0|        }
 3279|    226|save_state_and_return:
 3280|    226|        s->save_i = i;
 3281|    226|        s->save_j = j;
 3282|    226|        s->save_t = t;
 3283|    226|        s->save_alphaSize = alphaSize;
 3284|    226|        s->save_nGroups = nGroups;
 3285|    226|        s->save_nSelectors = nSelectors;
 3286|    226|        s->save_EOB = EOB;
 3287|    226|        s->save_groupNo = groupNo;
 3288|    226|        s->save_groupPos = groupPos;
 3289|    226|        s->save_nextSym = nextSym;
 3290|    226|        s->save_nblockMAX = nblockMAX;
 3291|    226|        s->save_nblock = nblock;
 3292|    226|        s->save_es = es;
 3293|    226|        s->save_N = N;
 3294|    226|        s->save_curr = curr;
 3295|    226|        s->save_zt = zt;
 3296|    226|        s->save_zn = zn;
 3297|    226|        s->save_zvec = zvec;
 3298|    226|        s->save_zj = zj;
 3299|    226|        s->save_gSel = gSel;
 3300|    226|        s->save_gMinlen = gMinlen;
 3301|    226|        s->save_gLimit = gLimit;
 3302|    226|        s->save_gBase = gBase;
 3303|    226|        s->save_gPerm = gPerm;
 3304|    226|        return (retVal);
 3305|      0|    }
 3306|      0|}
 3307|       |UInt32 BZ2_crc32Table[256];
 3308|       |UInt32 BZ2_crc32Table[256] = {
 3309|       |    (UInt32)0L,          (UInt32)79764919L,   (UInt32)159529838L,
 3310|       |    (UInt32)222504665L,  (UInt32)319059676L,  (UInt32)398814059L,
 3311|       |    (UInt32)445009330L,  (UInt32)507990021L,  (UInt32)638119352L,
 3312|       |    (UInt32)583659535L,  (UInt32)797628118L,  (UInt32)726387553L,
 3313|       |    (UInt32)890018660L,  (UInt32)835552979L,  (UInt32)1015980042L,
 3314|       |    (UInt32)944750013L,  (UInt32)1276238704L, (UInt32)1221641927L,
 3315|       |    (UInt32)1167319070L, (UInt32)1095957929L, (UInt32)1595256236L,
 3316|       |    (UInt32)1540665371L, (UInt32)1452775106L, (UInt32)1381403509L,
 3317|       |    (UInt32)1780037320L, (UInt32)1859660671L, (UInt32)1671105958L,
 3318|       |    (UInt32)1733955601L, (UInt32)2031960084L, (UInt32)2111593891L,
 3319|       |    (UInt32)1889500026L, (UInt32)1952343757L, (UInt32)2552477408L,
 3320|       |    (UInt32)2632100695L, (UInt32)2443283854L, (UInt32)2506133561L,
 3321|       |    (UInt32)2334638140L, (UInt32)2414271883L, (UInt32)2191915858L,
 3322|       |    (UInt32)2254759653L, (UInt32)3190512472L, (UInt32)3135915759L,
 3323|       |    (UInt32)3081330742L, (UInt32)3009969537L, (UInt32)2905550212L,
 3324|       |    (UInt32)2850959411L, (UInt32)2762807018L, (UInt32)2691435357L,
 3325|       |    (UInt32)3560074640L, (UInt32)3505614887L, (UInt32)3719321342L,
 3326|       |    (UInt32)3648080713L, (UInt32)3342211916L, (UInt32)3287746299L,
 3327|       |    (UInt32)3467911202L, (UInt32)3396681109L, (UInt32)4063920168L,
 3328|       |    (UInt32)4143685023L, (UInt32)4223187782L, (UInt32)4286162673L,
 3329|       |    (UInt32)3779000052L, (UInt32)3858754371L, (UInt32)3904687514L,
 3330|       |    (UInt32)3967668269L, (UInt32)881225847L,  (UInt32)809987520L,
 3331|       |    (UInt32)1023691545L, (UInt32)969234094L,  (UInt32)662832811L,
 3332|       |    (UInt32)591600412L,  (UInt32)771767749L,  (UInt32)717299826L,
 3333|       |    (UInt32)311336399L,  (UInt32)374308984L,  (UInt32)453813921L,
 3334|       |    (UInt32)533576470L,  (UInt32)25881363L,   (UInt32)88864420L,
 3335|       |    (UInt32)134795389L,  (UInt32)214552010L,  (UInt32)2023205639L,
 3336|       |    (UInt32)2086057648L, (UInt32)1897238633L, (UInt32)1976864222L,
 3337|       |    (UInt32)1804852699L, (UInt32)1867694188L, (UInt32)1645340341L,
 3338|       |    (UInt32)1724971778L, (UInt32)1587496639L, (UInt32)1516133128L,
 3339|       |    (UInt32)1461550545L, (UInt32)1406951526L, (UInt32)1302016099L,
 3340|       |    (UInt32)1230646740L, (UInt32)1142491917L, (UInt32)1087903418L,
 3341|       |    (UInt32)2896545431L, (UInt32)2825181984L, (UInt32)2770861561L,
 3342|       |    (UInt32)2716262478L, (UInt32)3215044683L, (UInt32)3143675388L,
 3343|       |    (UInt32)3055782693L, (UInt32)3001194130L, (UInt32)2326604591L,
 3344|       |    (UInt32)2389456536L, (UInt32)2200899649L, (UInt32)2280525302L,
 3345|       |    (UInt32)2578013683L, (UInt32)2640855108L, (UInt32)2418763421L,
 3346|       |    (UInt32)2498394922L, (UInt32)3769900519L, (UInt32)3832873040L,
 3347|       |    (UInt32)3912640137L, (UInt32)3992402750L, (UInt32)4088425275L,
 3348|       |    (UInt32)4151408268L, (UInt32)4197601365L, (UInt32)4277358050L,
 3349|       |    (UInt32)3334271071L, (UInt32)3263032808L, (UInt32)3476998961L,
 3350|       |    (UInt32)3422541446L, (UInt32)3585640067L, (UInt32)3514407732L,
 3351|       |    (UInt32)3694837229L, (UInt32)3640369242L, (UInt32)1762451694L,
 3352|       |    (UInt32)1842216281L, (UInt32)1619975040L, (UInt32)1682949687L,
 3353|       |    (UInt32)2047383090L, (UInt32)2127137669L, (UInt32)1938468188L,
 3354|       |    (UInt32)2001449195L, (UInt32)1325665622L, (UInt32)1271206113L,
 3355|       |    (UInt32)1183200824L, (UInt32)1111960463L, (UInt32)1543535498L,
 3356|       |    (UInt32)1489069629L, (UInt32)1434599652L, (UInt32)1363369299L,
 3357|       |    (UInt32)622672798L,  (UInt32)568075817L,  (UInt32)748617968L,
 3358|       |    (UInt32)677256519L,  (UInt32)907627842L,  (UInt32)853037301L,
 3359|       |    (UInt32)1067152940L, (UInt32)995781531L,  (UInt32)51762726L,
 3360|       |    (UInt32)131386257L,  (UInt32)177728840L,  (UInt32)240578815L,
 3361|       |    (UInt32)269590778L,  (UInt32)349224269L,  (UInt32)429104020L,
 3362|       |    (UInt32)491947555L,  (UInt32)4046411278L, (UInt32)4126034873L,
 3363|       |    (UInt32)4172115296L, (UInt32)4234965207L, (UInt32)3794477266L,
 3364|       |    (UInt32)3874110821L, (UInt32)3953728444L, (UInt32)4016571915L,
 3365|       |    (UInt32)3609705398L, (UInt32)3555108353L, (UInt32)3735388376L,
 3366|       |    (UInt32)3664026991L, (UInt32)3290680682L, (UInt32)3236090077L,
 3367|       |    (UInt32)3449943556L, (UInt32)3378572211L, (UInt32)3174993278L,
 3368|       |    (UInt32)3120533705L, (UInt32)3032266256L, (UInt32)2961025959L,
 3369|       |    (UInt32)2923101090L, (UInt32)2868635157L, (UInt32)2813903052L,
 3370|       |    (UInt32)2742672763L, (UInt32)2604032198L, (UInt32)2683796849L,
 3371|       |    (UInt32)2461293480L, (UInt32)2524268063L, (UInt32)2284983834L,
 3372|       |    (UInt32)2364738477L, (UInt32)2175806836L, (UInt32)2238787779L,
 3373|       |    (UInt32)1569362073L, (UInt32)1498123566L, (UInt32)1409854455L,
 3374|       |    (UInt32)1355396672L, (UInt32)1317987909L, (UInt32)1246755826L,
 3375|       |    (UInt32)1192025387L, (UInt32)1137557660L, (UInt32)2072149281L,
 3376|       |    (UInt32)2135122070L, (UInt32)1912620623L, (UInt32)1992383480L,
 3377|       |    (UInt32)1753615357L, (UInt32)1816598090L, (UInt32)1627664531L,
 3378|       |    (UInt32)1707420964L, (UInt32)295390185L,  (UInt32)358241886L,
 3379|       |    (UInt32)404320391L,  (UInt32)483945776L,  (UInt32)43990325L,
 3380|       |    (UInt32)106832002L,  (UInt32)186451547L,  (UInt32)266083308L,
 3381|       |    (UInt32)932423249L,  (UInt32)861060070L,  (UInt32)1041341759L,
 3382|       |    (UInt32)986742920L,  (UInt32)613929101L,  (UInt32)542559546L,
 3383|       |    (UInt32)756411363L,  (UInt32)701822548L,  (UInt32)3316196985L,
 3384|       |    (UInt32)3244833742L, (UInt32)3425377559L, (UInt32)3370778784L,
 3385|       |    (UInt32)3601682597L, (UInt32)3530312978L, (UInt32)3744426955L,
 3386|       |    (UInt32)3689838204L, (UInt32)3819031489L, (UInt32)3881883254L,
 3387|       |    (UInt32)3928223919L, (UInt32)4007849240L, (UInt32)4037393693L,
 3388|       |    (UInt32)4100235434L, (UInt32)4180117107L, (UInt32)4259748804L,
 3389|       |    (UInt32)2310601993L, (UInt32)2373574846L, (UInt32)2151335527L,
 3390|       |    (UInt32)2231098320L, (UInt32)2596047829L, (UInt32)2659030626L,
 3391|       |    (UInt32)2470359227L, (UInt32)2550115596L, (UInt32)2947551409L,
 3392|       |    (UInt32)2876312838L, (UInt32)2788305887L, (UInt32)2733848168L,
 3393|       |    (UInt32)3165939309L, (UInt32)3094707162L, (UInt32)3040238851L,
 3394|       |    (UInt32)2985771188L
 3395|       |};
 3396|       |void BZ2_blockSort(EState *s);
 3397|       |void BZ2_compressBlock(EState *s, Bool is_last_block);
 3398|       |void BZ2_bsInitWrite(EState *s);
 3399|       |void BZ2_bsInitWrite(EState *s)
 3400|      1|{
 3401|       |
 3402|      1|    {
 3403|      1|        s->bsLive = 0;
 3404|      1|        s->bsBuff = (UInt32)0;
 3405|      1|        return;
 3406|      1|    }
 3407|      1|}
 3408|       |static void bsFinishWrite(EState *s)
 3409|      1|{
 3410|       |
 3411|      1|    {
 3412|      1|        {
 3413|      2|            while (1) {
 3414|      2|while_continue: /* CIL Label */
 3415|      2|                ;
 3416|      2|                if (!(s->bsLive > 0)) {
 3417|      1|                    goto while_break;
 3418|      1|                }
 3419|      1|                *(s->zbits + s->numZ) = (UChar)(s->bsBuff >> 24);
 3420|      1|                (s->numZ)++;
 3421|      1|                s->bsBuff <<= 8;
 3422|      1|                s->bsLive -= 8;
 3423|      1|            }
 3424|      1|while_break: /* CIL Label */
 3425|      1|            ;
 3426|      1|        }
 3427|      0|        return;
 3428|      1|    }
 3429|      1|}
 3430|       |__inline static void bsW(EState *s, Int32 n, UInt32 v)
 3431|    224|{
 3432|       |
 3433|    224|    {
 3434|    224|        {
 3435|    290|            while (1) {
 3436|    290|while_continue: /* CIL Label */
 3437|    290|                ;
 3438|    290|                if (!(s->bsLive >= 8)) {
 3439|    224|                    goto while_break;
 3440|    224|                }
 3441|     66|                *(s->zbits + s->numZ) = (UChar)(s->bsBuff >> 24);
 3442|     66|                (s->numZ)++;
 3443|     66|                s->bsBuff <<= 8;
 3444|     66|                s->bsLive -= 8;
 3445|     66|            }
 3446|    224|while_break: /* CIL Label */
 3447|    224|            ;
 3448|    224|        }
 3449|      0|        s->bsBuff |= v << ((32 - s->bsLive) - n);
 3450|    224|        s->bsLive += n;
 3451|    224|        return;
 3452|    224|    }
 3453|    224|}
 3454|       |static void bsPutUInt32(EState *s, UInt32 u)
 3455|      2|{
 3456|       |
 3457|      2|    {
 3458|      2|        {
 3459|      2|            bsW(s, 8, (UInt32)((long)(u >> 24) & 255L));
 3460|      2|            bsW(s, 8, (UInt32)((long)(u >> 16) & 255L));
 3461|      2|            bsW(s, 8, (UInt32)((long)(u >> 8) & 255L));
 3462|      2|            bsW(s, 8, (UInt32)((long)u & 255L));
 3463|      2|        }
 3464|      2|        return;
 3465|      2|    }
 3466|      2|}
 3467|       |static void bsPutUChar(EState *s, UChar c)
 3468|     16|{
 3469|       |
 3470|     16|    {
 3471|     16|        {
 3472|     16|            bsW(s, 8, (UInt32)c);
 3473|     16|        }
 3474|     16|        return;
 3475|     16|    }
 3476|     16|}
 3477|       |static void makeMaps_e(EState *s)
 3478|      1|{
 3479|      1|    Int32 i;
 3480|       |
 3481|      1|    {
 3482|      1|        s->nInUse = 0;
 3483|      1|        i = 0;
 3484|      1|        {
 3485|    257|            while (1) {
 3486|    257|while_continue: /* CIL Label */
 3487|    257|                ;
 3488|    257|                if (!(i < 256)) {
 3489|      1|                    goto while_break;
 3490|      1|                }
 3491|    256|                if (s->inUse[i]) {
 3492|     17|                    s->unseqToSeq[i] = (UChar)s->nInUse;
 3493|     17|                    (s->nInUse)++;
 3494|     17|                }
 3495|    256|                i++;
 3496|    256|            }
 3497|      1|while_break: /* CIL Label */
 3498|      1|            ;
 3499|      1|        }
 3500|      0|        return;
 3501|      1|    }
 3502|      1|}
 3503|       |static void generateMTFValues(EState *s)
 3504|      1|{
 3505|      1|    UChar yy[256];
 3506|      1|    Int32 i;
 3507|      1|    Int32 j;
 3508|      1|    Int32 zPend;
 3509|      1|    Int32 wr;
 3510|      1|    Int32 EOB;
 3511|      1|    UInt32 *ptr;
 3512|      1|    UChar *block;
 3513|      1|    UInt16 *mtfv;
 3514|      1|    UChar ll_i;
 3515|      1|    register UChar rtmp;
 3516|      1|    register UChar *ryy_j;
 3517|      1|    register UChar rll_i;
 3518|      1|    register UChar rtmp2;
 3519|      1|    void *__cil_tmp16;
 3520|       |
 3521|      1|    {
 3522|      1|        {
 3523|      1|            ptr = s->ptr;
 3524|      1|            block = s->block;
 3525|      1|            mtfv = s->mtfv;
 3526|      1|            makeMaps_e(s);
 3527|      1|            EOB = s->nInUse + 1;
 3528|      1|            i = 0;
 3529|      1|        }
 3530|      1|        {
 3531|     20|            while (1) {
 3532|     20|while_continue: /* CIL Label */
 3533|     20|                ;
 3534|     20|                if (!(i <= EOB)) {
 3535|      1|                    goto while_break;
 3536|      1|                }
 3537|     19|                s->mtfFreq[i] = 0;
 3538|     19|                i++;
 3539|     19|            }
 3540|      1|while_break: /* CIL Label */
 3541|      1|            ;
 3542|      1|        }
 3543|      0|        wr = 0;
 3544|      1|        zPend = 0;
 3545|      1|        i = 0;
 3546|      1|        {
 3547|     18|            while (1) {
 3548|     18|while_continue___0: /* CIL Label */
 3549|     18|                ;
 3550|     18|                if (!(i < s->nInUse)) {
 3551|      1|                    goto while_break___0;
 3552|      1|                }
 3553|     17|                yy[i] = (UChar)i;
 3554|     17|                i++;
 3555|     17|            }
 3556|      1|while_break___0: /* CIL Label */
 3557|      1|            ;
 3558|      1|        }
 3559|      0|        i = 0;
 3560|      1|        {
 3561|     28|            while (1) {
 3562|     28|while_continue___1: /* CIL Label */
 3563|     28|                ;
 3564|     28|                if (!(i < s->nblock)) {
 3565|      1|                    goto while_break___1;
 3566|      1|                }
 3567|     27|                j = (Int32)(*(ptr + i) - 1U);
 3568|     27|                if (j < 0) {
 3569|      1|                    j += s->nblock;
 3570|      1|                }
 3571|     27|                ll_i = s->unseqToSeq[*(block + j)];
 3572|     27|                if ((int)yy[0] == (int)ll_i) {
 3573|      3|                    zPend++;
 3574|      3|                }
 3575|     24|                else {
 3576|     24|                    if (zPend > 0) {
 3577|      2|                        zPend--;
 3578|      2|                        {
 3579|      2|                            while (1) {
 3580|      2|while_continue___2: /* CIL Label */
 3581|      2|                                ;
 3582|      2|                                if (zPend & 1) {
 3583|      1|                                    *(mtfv + wr) = (UInt16)1;
 3584|      1|                                    wr++;
 3585|      1|                                    (s->mtfFreq[1])++;
 3586|      1|                                }
 3587|      1|                                else {
 3588|      1|                                    *(mtfv + wr) = (UInt16)0;
 3589|      1|                                    wr++;
 3590|      1|                                    (s->mtfFreq[0])++;
 3591|      1|                                }
 3592|      2|                                if (zPend < 2) {
 3593|      2|                                    goto while_break___2;
 3594|      2|                                }
 3595|      0|                                zPend = (zPend - 2) / 2;
 3596|      0|                            }
 3597|      2|while_break___2: /* CIL Label */
 3598|      2|                            ;
 3599|      2|                        }
 3600|      0|                        zPend = 0;
 3601|      2|                    }
 3602|     24|                    rtmp = yy[1];
 3603|     24|                    yy[1] = yy[0];
 3604|     24|                    ryy_j = &yy[1];
 3605|     24|                    rll_i = ll_i;
 3606|     24|                    {
 3607|    232|                        while (1) {
 3608|    232|while_continue___3: /* CIL Label */
 3609|    232|                            ;
 3610|    232|                            if (!((int)rll_i != (int)rtmp)) {
 3611|     24|                                goto while_break___3;
 3612|     24|                            }
 3613|    208|                            ryy_j++;
 3614|    208|                            rtmp2 = rtmp;
 3615|    208|                            rtmp = *ryy_j;
 3616|    208|                            *ryy_j = rtmp2;
 3617|    208|                        }
 3618|     24|while_break___3: /* CIL Label */
 3619|     24|                        ;
 3620|     24|                    }
 3621|      0|                    yy[0] = rtmp;
 3622|     24|                    j = (Int32)(ryy_j - &yy[0]);
 3623|     24|                    *(mtfv + wr) = (UInt16)(j + 1);
 3624|     24|                    wr++;
 3625|     24|                    (s->mtfFreq[j + 1])++;
 3626|     24|                }
 3627|     27|                i++;
 3628|     27|            }
 3629|      1|while_break___1: /* CIL Label */
 3630|      1|            ;
 3631|      1|        }
 3632|      1|        if (zPend > 0) {
 3633|      0|            zPend--;
 3634|      0|            {
 3635|      0|                while (1) {
 3636|      0|while_continue___4: /* CIL Label */
 3637|      0|                    ;
 3638|      0|                    if (zPend & 1) {
 3639|      0|                        *(mtfv + wr) = (UInt16)1;
 3640|      0|                        wr++;
 3641|      0|                        (s->mtfFreq[1])++;
 3642|      0|                    }
 3643|      0|                    else {
 3644|      0|                        *(mtfv + wr) = (UInt16)0;
 3645|      0|                        wr++;
 3646|      0|                        (s->mtfFreq[0])++;
 3647|      0|                    }
 3648|      0|                    if (zPend < 2) {
 3649|      0|                        goto while_break___4;
 3650|      0|                    }
 3651|      0|                    zPend = (zPend - 2) / 2;
 3652|      0|                }
 3653|      0|while_break___4: /* CIL Label */
 3654|      0|                ;
 3655|      0|            }
 3656|      0|            zPend = 0;
 3657|      0|        }
 3658|      1|        *(mtfv + wr) = (UInt16)EOB;
 3659|      1|        wr++;
 3660|      1|        (s->mtfFreq[EOB])++;
 3661|      1|        s->nMTF = wr;
 3662|      1|        return;
 3663|      1|    }
 3664|      1|}
 3665|       |static void sendMTFValues(EState *s)
 3666|      1|{
 3667|      1|    Int32 v;
 3668|      1|    Int32 t;
 3669|      1|    Int32 i;
 3670|      1|    Int32 j;
 3671|      1|    Int32 gs;
 3672|      1|    Int32 ge;
 3673|      1|    Int32 totc;
 3674|      1|    Int32 bt;
 3675|      1|    Int32 bc;
 3676|      1|    Int32 iter;
 3677|      1|    Int32 nSelectors;
 3678|      1|    Int32 alphaSize;
 3679|      1|    Int32 minLen;
 3680|      1|    Int32 maxLen;
 3681|      1|    Int32 selCtr;
 3682|      1|    Int32 nGroups;
 3683|      1|    Int32 nBytes;
 3684|      1|    UInt16 cost[6];
 3685|      1|    Int32 fave[6];
 3686|      1|    UInt16 *mtfv;
 3687|      1|    Int32 nPart;
 3688|      1|    Int32 remF;
 3689|      1|    Int32 tFreq;
 3690|      1|    Int32 aFreq;
 3691|      1|    register UInt32 cost01;
 3692|      1|    register UInt32 cost23;
 3693|      1|    register UInt32 cost45;
 3694|      1|    register UInt16 icv;
 3695|      1|    UInt16 icv___0;
 3696|      1|    UChar pos[6];
 3697|      1|    UChar ll_i;
 3698|      1|    UChar tmp2;
 3699|      1|    UChar tmp;
 3700|      1|    Bool inUse16[16];
 3701|      1|    Int32 curr;
 3702|      1|    UInt16 mtfv_i;
 3703|      1|    UChar *s_len_sel_selCtr;
 3704|      1|    Int32 *s_code_sel_selCtr;
 3705|      1|    void *__cil_tmp40;
 3706|      1|    void *__cil_tmp41;
 3707|      1|    void *__cil_tmp42;
 3708|      1|    void *__cil_tmp43;
 3709|       |
 3710|      1|    {
 3711|      1|        mtfv = s->mtfv;
 3712|      1|        if (s->verbosity >= 3) {
 3713|      0|            {
 3714|      0|                fprintf(
 3715|      0|                    (FILE * /* __restrict  */) stderr,
 3716|      0|                    (char const * /* __restrict  */) "      %d in block, %d after MTF "
 3717|      0|                    "& 1-2 coding, %d+2 syms in use\n",
 3718|      0|                    s->nblock, s->nMTF, s->nInUse);
 3719|      0|            }
 3720|      0|        }
 3721|      1|        alphaSize = s->nInUse + 2;
 3722|      1|        t = 0;
 3723|      1|        {
 3724|      7|            while (1) {
 3725|      7|while_continue: /* CIL Label */
 3726|      7|                ;
 3727|      7|                if (!(t < 6)) {
 3728|      1|                    goto while_break;
 3729|      1|                }
 3730|      6|                v = 0;
 3731|      6|                {
 3732|    120|                    while (1) {
 3733|    120|while_continue___0: /* CIL Label */
 3734|    120|                        ;
 3735|    120|                        if (!(v < alphaSize)) {
 3736|      6|                            goto while_break___0;
 3737|      6|                        }
 3738|    114|                        s->len[t][v] = (UChar)15;
 3739|    114|                        v++;
 3740|    114|                    }
 3741|      6|while_break___0: /* CIL Label */
 3742|      6|                    ;
 3743|      6|                }
 3744|      0|                t++;
 3745|      6|            }
 3746|      1|while_break: /* CIL Label */
 3747|      1|            ;
 3748|      1|        }
 3749|      1|        if (!(s->nMTF > 0)) {
 3750|      0|            {
 3751|      0|                BZ2_bz__AssertH__fail(3001);
 3752|      0|            }
 3753|      0|        }
 3754|      1|        if (s->nMTF < 200) {
 3755|      1|            nGroups = 2;
 3756|      1|        }
 3757|      0|        else {
 3758|      0|            if (s->nMTF < 600) {
 3759|      0|                nGroups = 3;
 3760|      0|            }
 3761|      0|            else {
 3762|      0|                if (s->nMTF < 1200) {
 3763|      0|                    nGroups = 4;
 3764|      0|                }
 3765|      0|                else {
 3766|      0|                    if (s->nMTF < 2400) {
 3767|      0|                        nGroups = 5;
 3768|      0|                    }
 3769|      0|                    else {
 3770|      0|                        nGroups = 6;
 3771|      0|                    }
 3772|      0|                }
 3773|      0|            }
 3774|      0|        }
 3775|      1|        nPart = nGroups;
 3776|      1|        remF = s->nMTF;
 3777|      1|        gs = 0;
 3778|      1|        {
 3779|      3|            while (1) {
 3780|      3|while_continue___1: /* CIL Label */
 3781|      3|                ;
 3782|      3|                if (!(nPart > 0)) {
 3783|      1|                    goto while_break___1;
 3784|      1|                }
 3785|      2|                tFreq = remF / nPart;
 3786|      2|                ge = gs - 1;
 3787|      2|                aFreq = 0;
 3788|      2|                {
 3789|     21|                    while (1) {
 3790|     21|while_continue___2: /* CIL Label */
 3791|     21|                        ;
 3792|     21|                        if (aFreq < tFreq) {
 3793|     19|                            if (!(ge < alphaSize - 1)) {
 3794|      0|                                goto while_break___2;
 3795|      0|                            }
 3796|     19|                        }
 3797|      2|                        else {
 3798|      2|                            goto while_break___2;
 3799|      2|                        }
 3800|     19|                        ge++;
 3801|     19|                        aFreq += s->mtfFreq[ge];
 3802|     19|                    }
 3803|      2|while_break___2: /* CIL Label */
 3804|      2|                    ;
 3805|      2|                }
 3806|      2|                if (ge > gs) {
 3807|      2|                    if (nPart != nGroups) {
 3808|      1|                        if (nPart != 1) {
 3809|      0|                            if ((nGroups - nPart) % 2 == 1) {
 3810|      0|                                aFreq -= s->mtfFreq[ge];
 3811|      0|                                ge--;
 3812|      0|                            }
 3813|      0|                        }
 3814|      1|                    }
 3815|      2|                }
 3816|      2|                if (s->verbosity >= 3) {
 3817|      0|                    {
 3818|      0|                        fprintf((FILE * /* __restrict  */) stderr,
 3819|      0|                                (char const
 3820|      0|                                 * /* __restrict  */) "      initial group %d, [%d .. "
 3821|      0|                                "%d], has %d syms (%4.1f%%)\n",
 3822|      0|                                nPart, gs, ge, aFreq,
 3823|      0|                                (100.0 * (double)((float)aFreq)) /
 3824|      0|                                (double)((float)s->nMTF));
 3825|      0|                    }
 3826|      0|                }
 3827|      2|                v = 0;
 3828|      2|                {
 3829|     40|                    while (1) {
 3830|     40|while_continue___3: /* CIL Label */
 3831|     40|                        ;
 3832|     40|                        if (!(v < alphaSize)) {
 3833|      2|                            goto while_break___3;
 3834|      2|                        }
 3835|     38|                        if (v >= gs) {
 3836|     27|                            if (v <= ge) {
 3837|     19|                                s->len[nPart - 1][v] = (UChar)0;
 3838|     19|                            }
 3839|      8|                            else {
 3840|      8|                                s->len[nPart - 1][v] = (UChar)15;
 3841|      8|                            }
 3842|     27|                        }
 3843|     11|                        else {
 3844|     11|                            s->len[nPart - 1][v] = (UChar)15;
 3845|     11|                        }
 3846|     38|                        v++;
 3847|     38|                    }
 3848|      2|while_break___3: /* CIL Label */
 3849|      2|                    ;
 3850|      2|                }
 3851|      0|                nPart--;
 3852|      2|                gs = ge + 1;
 3853|      2|                remF -= aFreq;
 3854|      2|            }
 3855|      1|while_break___1: /* CIL Label */
 3856|      1|            ;
 3857|      1|        }
 3858|      0|        iter = 0;
 3859|      1|        {
 3860|      5|            while (1) {
 3861|      5|while_continue___4: /* CIL Label */
 3862|      5|                ;
 3863|      5|                if (!(iter < 4)) {
 3864|      1|                    goto while_break___4;
 3865|      1|                }
 3866|      4|                t = 0;
 3867|      4|                {
 3868|     12|                    while (1) {
 3869|     12|while_continue___5: /* CIL Label */
 3870|     12|                        ;
 3871|     12|                        if (!(t < nGroups)) {
 3872|      4|                            goto while_break___5;
 3873|      4|                        }
 3874|      8|                        fave[t] = 0;
 3875|      8|                        t++;
 3876|      8|                    }
 3877|      4|while_break___5: /* CIL Label */
 3878|      4|                    ;
 3879|      4|                }
 3880|      0|                t = 0;
 3881|      4|                {
 3882|     12|                    while (1) {
 3883|     12|while_continue___6: /* CIL Label */
 3884|     12|                        ;
 3885|     12|                        if (!(t < nGroups)) {
 3886|      4|                            goto while_break___6;
 3887|      4|                        }
 3888|      8|                        v = 0;
 3889|      8|                        {
 3890|    160|                            while (1) {
 3891|    160|while_continue___7: /* CIL Label */
 3892|    160|                                ;
 3893|    160|                                if (!(v < alphaSize)) {
 3894|      8|                                    goto while_break___7;
 3895|      8|                                }
 3896|    152|                                s->rfreq[t][v] = 0;
 3897|    152|                                v++;
 3898|    152|                            }
 3899|      8|while_break___7: /* CIL Label */
 3900|      8|                            ;
 3901|      8|                        }
 3902|      0|                        t++;
 3903|      8|                    }
 3904|      4|while_break___6: /* CIL Label */
 3905|      4|                    ;
 3906|      4|                }
 3907|      4|                if (nGroups == 6) {
 3908|      0|                    v = 0;
 3909|      0|                    {
 3910|      0|                        while (1) {
 3911|      0|while_continue___8: /* CIL Label */
 3912|      0|                            ;
 3913|      0|                            if (!(v < alphaSize)) {
 3914|      0|                                goto while_break___8;
 3915|      0|                            }
 3916|      0|                            s->len_pack[v][0] =
 3917|      0|                                (UInt32)(((int)s->len[1][v] << 16) | (int)s->len[0][v]);
 3918|      0|                            s->len_pack[v][1] =
 3919|      0|                                (UInt32)(((int)s->len[3][v] << 16) | (int)s->len[2][v]);
 3920|      0|                            s->len_pack[v][2] =
 3921|      0|                                (UInt32)(((int)s->len[5][v] << 16) | (int)s->len[4][v]);
 3922|      0|                            v++;
 3923|      0|                        }
 3924|      0|while_break___8: /* CIL Label */
 3925|      0|                        ;
 3926|      0|                    }
 3927|      0|                }
 3928|      4|                nSelectors = 0;
 3929|      4|                totc = 0;
 3930|      4|                gs = 0;
 3931|      4|                {
 3932|      8|                    while (1) {
 3933|      8|while_continue___9: /* CIL Label */
 3934|      8|                        ;
 3935|      8|                        if (!(!(gs >= s->nMTF))) {
 3936|      4|                            goto while_break___9;
 3937|      4|                        }
 3938|      4|                        ge = (gs + 50) - 1;
 3939|      4|                        if (ge >= s->nMTF) {
 3940|      4|                            ge = s->nMTF - 1;
 3941|      4|                        }
 3942|      4|                        t = 0;
 3943|      4|                        {
 3944|     12|                            while (1) {
 3945|     12|while_continue___10: /* CIL Label */
 3946|     12|                                ;
 3947|     12|                                if (!(t < nGroups)) {
 3948|      4|                                    goto while_break___10;
 3949|      4|                                }
 3950|      8|                                cost[t] = (UInt16)0;
 3951|      8|                                t++;
 3952|      8|                            }
 3953|      4|while_break___10: /* CIL Label */
 3954|      4|                            ;
 3955|      4|                        }
 3956|      4|                        if (nGroups == 6) {
 3957|      0|                            if (50 == (ge - gs) + 1) {
 3958|      0|                                cost45 = (UInt32)0;
 3959|      0|                                cost23 = cost45;
 3960|      0|                                cost01 = cost23;
 3961|      0|                                icv = *(mtfv + gs);
 3962|      0|                                cost01 += s->len_pack[icv][0];
 3963|      0|                                cost23 += s->len_pack[icv][1];
 3964|      0|                                cost45 += s->len_pack[icv][2];
 3965|      0|                                icv = *(mtfv + (gs + 1));
 3966|      0|                                cost01 += s->len_pack[icv][0];
 3967|      0|                                cost23 += s->len_pack[icv][1];
 3968|      0|                                cost45 += s->len_pack[icv][2];
 3969|      0|                                icv = *(mtfv + (gs + 2));
 3970|      0|                                cost01 += s->len_pack[icv][0];
 3971|      0|                                cost23 += s->len_pack[icv][1];
 3972|      0|                                cost45 += s->len_pack[icv][2];
 3973|      0|                                icv = *(mtfv + (gs + 3));
 3974|      0|                                cost01 += s->len_pack[icv][0];
 3975|      0|                                cost23 += s->len_pack[icv][1];
 3976|      0|                                cost45 += s->len_pack[icv][2];
 3977|      0|                                icv = *(mtfv + (gs + 4));
 3978|      0|                                cost01 += s->len_pack[icv][0];
 3979|      0|                                cost23 += s->len_pack[icv][1];
 3980|      0|                                cost45 += s->len_pack[icv][2];
 3981|      0|                                icv = *(mtfv + (gs + 5));
 3982|      0|                                cost01 += s->len_pack[icv][0];
 3983|      0|                                cost23 += s->len_pack[icv][1];
 3984|      0|                                cost45 += s->len_pack[icv][2];
 3985|      0|                                icv = *(mtfv + (gs + 6));
 3986|      0|                                cost01 += s->len_pack[icv][0];
 3987|      0|                                cost23 += s->len_pack[icv][1];
 3988|      0|                                cost45 += s->len_pack[icv][2];
 3989|      0|                                icv = *(mtfv + (gs + 7));
 3990|      0|                                cost01 += s->len_pack[icv][0];
 3991|      0|                                cost23 += s->len_pack[icv][1];
 3992|      0|                                cost45 += s->len_pack[icv][2];
 3993|      0|                                icv = *(mtfv + (gs + 8));
 3994|      0|                                cost01 += s->len_pack[icv][0];
 3995|      0|                                cost23 += s->len_pack[icv][1];
 3996|      0|                                cost45 += s->len_pack[icv][2];
 3997|      0|                                icv = *(mtfv + (gs + 9));
 3998|      0|                                cost01 += s->len_pack[icv][0];
 3999|      0|                                cost23 += s->len_pack[icv][1];
 4000|      0|                                cost45 += s->len_pack[icv][2];
 4001|      0|                                icv = *(mtfv + (gs + 10));
 4002|      0|                                cost01 += s->len_pack[icv][0];
 4003|      0|                                cost23 += s->len_pack[icv][1];
 4004|      0|                                cost45 += s->len_pack[icv][2];
 4005|      0|                                icv = *(mtfv + (gs + 11));
 4006|      0|                                cost01 += s->len_pack[icv][0];
 4007|      0|                                cost23 += s->len_pack[icv][1];
 4008|      0|                                cost45 += s->len_pack[icv][2];
 4009|      0|                                icv = *(mtfv + (gs + 12));
 4010|      0|                                cost01 += s->len_pack[icv][0];
 4011|      0|                                cost23 += s->len_pack[icv][1];
 4012|      0|                                cost45 += s->len_pack[icv][2];
 4013|      0|                                icv = *(mtfv + (gs + 13));
 4014|      0|                                cost01 += s->len_pack[icv][0];
 4015|      0|                                cost23 += s->len_pack[icv][1];
 4016|      0|                                cost45 += s->len_pack[icv][2];
 4017|      0|                                icv = *(mtfv + (gs + 14));
 4018|      0|                                cost01 += s->len_pack[icv][0];
 4019|      0|                                cost23 += s->len_pack[icv][1];
 4020|      0|                                cost45 += s->len_pack[icv][2];
 4021|      0|                                icv = *(mtfv + (gs + 15));
 4022|      0|                                cost01 += s->len_pack[icv][0];
 4023|      0|                                cost23 += s->len_pack[icv][1];
 4024|      0|                                cost45 += s->len_pack[icv][2];
 4025|      0|                                icv = *(mtfv + (gs + 16));
 4026|      0|                                cost01 += s->len_pack[icv][0];
 4027|      0|                                cost23 += s->len_pack[icv][1];
 4028|      0|                                cost45 += s->len_pack[icv][2];
 4029|      0|                                icv = *(mtfv + (gs + 17));
 4030|      0|                                cost01 += s->len_pack[icv][0];
 4031|      0|                                cost23 += s->len_pack[icv][1];
 4032|      0|                                cost45 += s->len_pack[icv][2];
 4033|      0|                                icv = *(mtfv + (gs + 18));
 4034|      0|                                cost01 += s->len_pack[icv][0];
 4035|      0|                                cost23 += s->len_pack[icv][1];
 4036|      0|                                cost45 += s->len_pack[icv][2];
 4037|      0|                                icv = *(mtfv + (gs + 19));
 4038|      0|                                cost01 += s->len_pack[icv][0];
 4039|      0|                                cost23 += s->len_pack[icv][1];
 4040|      0|                                cost45 += s->len_pack[icv][2];
 4041|      0|                                icv = *(mtfv + (gs + 20));
 4042|      0|                                cost01 += s->len_pack[icv][0];
 4043|      0|                                cost23 += s->len_pack[icv][1];
 4044|      0|                                cost45 += s->len_pack[icv][2];
 4045|      0|                                icv = *(mtfv + (gs + 21));
 4046|      0|                                cost01 += s->len_pack[icv][0];
 4047|      0|                                cost23 += s->len_pack[icv][1];
 4048|      0|                                cost45 += s->len_pack[icv][2];
 4049|      0|                                icv = *(mtfv + (gs + 22));
 4050|      0|                                cost01 += s->len_pack[icv][0];
 4051|      0|                                cost23 += s->len_pack[icv][1];
 4052|      0|                                cost45 += s->len_pack[icv][2];
 4053|      0|                                icv = *(mtfv + (gs + 23));
 4054|      0|                                cost01 += s->len_pack[icv][0];
 4055|      0|                                cost23 += s->len_pack[icv][1];
 4056|      0|                                cost45 += s->len_pack[icv][2];
 4057|      0|                                icv = *(mtfv + (gs + 24));
 4058|      0|                                cost01 += s->len_pack[icv][0];
 4059|      0|                                cost23 += s->len_pack[icv][1];
 4060|      0|                                cost45 += s->len_pack[icv][2];
 4061|      0|                                icv = *(mtfv + (gs + 25));
 4062|      0|                                cost01 += s->len_pack[icv][0];
 4063|      0|                                cost23 += s->len_pack[icv][1];
 4064|      0|                                cost45 += s->len_pack[icv][2];
 4065|      0|                                icv = *(mtfv + (gs + 26));
 4066|      0|                                cost01 += s->len_pack[icv][0];
 4067|      0|                                cost23 += s->len_pack[icv][1];
 4068|      0|                                cost45 += s->len_pack[icv][2];
 4069|      0|                                icv = *(mtfv + (gs + 27));
 4070|      0|                                cost01 += s->len_pack[icv][0];
 4071|      0|                                cost23 += s->len_pack[icv][1];
 4072|      0|                                cost45 += s->len_pack[icv][2];
 4073|      0|                                icv = *(mtfv + (gs + 28));
 4074|      0|                                cost01 += s->len_pack[icv][0];
 4075|      0|                                cost23 += s->len_pack[icv][1];
 4076|      0|                                cost45 += s->len_pack[icv][2];
 4077|      0|                                icv = *(mtfv + (gs + 29));
 4078|      0|                                cost01 += s->len_pack[icv][0];
 4079|      0|                                cost23 += s->len_pack[icv][1];
 4080|      0|                                cost45 += s->len_pack[icv][2];
 4081|      0|                                icv = *(mtfv + (gs + 30));
 4082|      0|                                cost01 += s->len_pack[icv][0];
 4083|      0|                                cost23 += s->len_pack[icv][1];
 4084|      0|                                cost45 += s->len_pack[icv][2];
 4085|      0|                                icv = *(mtfv + (gs + 31));
 4086|      0|                                cost01 += s->len_pack[icv][0];
 4087|      0|                                cost23 += s->len_pack[icv][1];
 4088|      0|                                cost45 += s->len_pack[icv][2];
 4089|      0|                                icv = *(mtfv + (gs + 32));
 4090|      0|                                cost01 += s->len_pack[icv][0];
 4091|      0|                                cost23 += s->len_pack[icv][1];
 4092|      0|                                cost45 += s->len_pack[icv][2];
 4093|      0|                                icv = *(mtfv + (gs + 33));
 4094|      0|                                cost01 += s->len_pack[icv][0];
 4095|      0|                                cost23 += s->len_pack[icv][1];
 4096|      0|                                cost45 += s->len_pack[icv][2];
 4097|      0|                                icv = *(mtfv + (gs + 34));
 4098|      0|                                cost01 += s->len_pack[icv][0];
 4099|      0|                                cost23 += s->len_pack[icv][1];
 4100|      0|                                cost45 += s->len_pack[icv][2];
 4101|      0|                                icv = *(mtfv + (gs + 35));
 4102|      0|                                cost01 += s->len_pack[icv][0];
 4103|      0|                                cost23 += s->len_pack[icv][1];
 4104|      0|                                cost45 += s->len_pack[icv][2];
 4105|      0|                                icv = *(mtfv + (gs + 36));
 4106|      0|                                cost01 += s->len_pack[icv][0];
 4107|      0|                                cost23 += s->len_pack[icv][1];
 4108|      0|                                cost45 += s->len_pack[icv][2];
 4109|      0|                                icv = *(mtfv + (gs + 37));
 4110|      0|                                cost01 += s->len_pack[icv][0];
 4111|      0|                                cost23 += s->len_pack[icv][1];
 4112|      0|                                cost45 += s->len_pack[icv][2];
 4113|      0|                                icv = *(mtfv + (gs + 38));
 4114|      0|                                cost01 += s->len_pack[icv][0];
 4115|      0|                                cost23 += s->len_pack[icv][1];
 4116|      0|                                cost45 += s->len_pack[icv][2];
 4117|      0|                                icv = *(mtfv + (gs + 39));
 4118|      0|                                cost01 += s->len_pack[icv][0];
 4119|      0|                                cost23 += s->len_pack[icv][1];
 4120|      0|                                cost45 += s->len_pack[icv][2];
 4121|      0|                                icv = *(mtfv + (gs + 40));
 4122|      0|                                cost01 += s->len_pack[icv][0];
 4123|      0|                                cost23 += s->len_pack[icv][1];
 4124|      0|                                cost45 += s->len_pack[icv][2];
 4125|      0|                                icv = *(mtfv + (gs + 41));
 4126|      0|                                cost01 += s->len_pack[icv][0];
 4127|      0|                                cost23 += s->len_pack[icv][1];
 4128|      0|                                cost45 += s->len_pack[icv][2];
 4129|      0|                                icv = *(mtfv + (gs + 42));
 4130|      0|                                cost01 += s->len_pack[icv][0];
 4131|      0|                                cost23 += s->len_pack[icv][1];
 4132|      0|                                cost45 += s->len_pack[icv][2];
 4133|      0|                                icv = *(mtfv + (gs + 43));
 4134|      0|                                cost01 += s->len_pack[icv][0];
 4135|      0|                                cost23 += s->len_pack[icv][1];
 4136|      0|                                cost45 += s->len_pack[icv][2];
 4137|      0|                                icv = *(mtfv + (gs + 44));
 4138|      0|                                cost01 += s->len_pack[icv][0];
 4139|      0|                                cost23 += s->len_pack[icv][1];
 4140|      0|                                cost45 += s->len_pack[icv][2];
 4141|      0|                                icv = *(mtfv + (gs + 45));
 4142|      0|                                cost01 += s->len_pack[icv][0];
 4143|      0|                                cost23 += s->len_pack[icv][1];
 4144|      0|                                cost45 += s->len_pack[icv][2];
 4145|      0|                                icv = *(mtfv + (gs + 46));
 4146|      0|                                cost01 += s->len_pack[icv][0];
 4147|      0|                                cost23 += s->len_pack[icv][1];
 4148|      0|                                cost45 += s->len_pack[icv][2];
 4149|      0|                                icv = *(mtfv + (gs + 47));
 4150|      0|                                cost01 += s->len_pack[icv][0];
 4151|      0|                                cost23 += s->len_pack[icv][1];
 4152|      0|                                cost45 += s->len_pack[icv][2];
 4153|      0|                                icv = *(mtfv + (gs + 48));
 4154|      0|                                cost01 += s->len_pack[icv][0];
 4155|      0|                                cost23 += s->len_pack[icv][1];
 4156|      0|                                cost45 += s->len_pack[icv][2];
 4157|      0|                                icv = *(mtfv + (gs + 49));
 4158|      0|                                cost01 += s->len_pack[icv][0];
 4159|      0|                                cost23 += s->len_pack[icv][1];
 4160|      0|                                cost45 += s->len_pack[icv][2];
 4161|      0|                                cost[0] = (UInt16)(cost01 & 65535U);
 4162|      0|                                cost[1] = (UInt16)(cost01 >> 16);
 4163|      0|                                cost[2] = (UInt16)(cost23 & 65535U);
 4164|      0|                                cost[3] = (UInt16)(cost23 >> 16);
 4165|      0|                                cost[4] = (UInt16)(cost45 & 65535U);
 4166|      0|                                cost[5] = (UInt16)(cost45 >> 16);
 4167|      0|                            }
 4168|      0|                            else {
 4169|      0|                                goto _L;
 4170|      0|                            }
 4171|      0|                        }
 4172|      4|                        else {
 4173|      4|_L:
 4174|      4|                            i = gs;
 4175|      4|                            {
 4176|    112|                                while (1) {
 4177|    112|while_continue___11: /* CIL Label */
 4178|    112|                                    ;
 4179|    112|                                    if (!(i <= ge)) {
 4180|      4|                                        goto while_break___11;
 4181|      4|                                    }
 4182|    108|                                    icv___0 = *(mtfv + i);
 4183|    108|                                    t = 0;
 4184|    108|                                    {
 4185|    324|                                        while (1) {
 4186|    324|while_continue___12: /* CIL Label */
 4187|    324|                                            ;
 4188|    324|                                            if (!(t < nGroups)) {
 4189|    108|                                                goto while_break___12;
 4190|    108|                                            }
 4191|    216|                                            cost[t] =
 4192|    216|                                                (UInt16)((int)cost[t] + (int)s->len[t][icv___0]);
 4193|    216|                                            t++;
 4194|    216|                                        }
 4195|    108|while_break___12: /* CIL Label */
 4196|    108|                                        ;
 4197|    108|                                    }
 4198|      0|                                    i++;
 4199|    108|                                }
 4200|      4|while_break___11: /* CIL Label */
 4201|      4|                                ;
 4202|      4|                            }
 4203|      4|                        }
 4204|      4|                        bc = 999999999;
 4205|      4|                        bt = -1;
 4206|      4|                        t = 0;
 4207|      4|                        {
 4208|     12|                            while (1) {
 4209|     12|while_continue___13: /* CIL Label */
 4210|     12|                                ;
 4211|     12|                                if (!(t < nGroups)) {
 4212|      4|                                    goto while_break___13;
 4213|      4|                                }
 4214|      8|                                if ((int)cost[t] < bc) {
 4215|      8|                                    bc = (Int32)cost[t];
 4216|      8|                                    bt = t;
 4217|      8|                                }
 4218|      8|                                t++;
 4219|      8|                            }
 4220|      4|while_break___13: /* CIL Label */
 4221|      4|                            ;
 4222|      4|                        }
 4223|      0|                        totc += bc;
 4224|      4|                        (fave[bt])++;
 4225|      4|                        s->selector[nSelectors] = (UChar)bt;
 4226|      4|                        nSelectors++;
 4227|      4|                        if (nGroups == 6) {
 4228|      0|                            if (50 == (ge - gs) + 1) {
 4229|      0|                                (s->rfreq[bt][*(mtfv + gs)])++;
 4230|      0|                                (s->rfreq[bt][*(mtfv + (gs + 1))])++;
 4231|      0|                                (s->rfreq[bt][*(mtfv + (gs + 2))])++;
 4232|      0|                                (s->rfreq[bt][*(mtfv + (gs + 3))])++;
 4233|      0|                                (s->rfreq[bt][*(mtfv + (gs + 4))])++;
 4234|      0|                                (s->rfreq[bt][*(mtfv + (gs + 5))])++;
 4235|      0|                                (s->rfreq[bt][*(mtfv + (gs + 6))])++;
 4236|      0|                                (s->rfreq[bt][*(mtfv + (gs + 7))])++;
 4237|      0|                                (s->rfreq[bt][*(mtfv + (gs + 8))])++;
 4238|      0|                                (s->rfreq[bt][*(mtfv + (gs + 9))])++;
 4239|      0|                                (s->rfreq[bt][*(mtfv + (gs + 10))])++;
 4240|      0|                                (s->rfreq[bt][*(mtfv + (gs + 11))])++;
 4241|      0|                                (s->rfreq[bt][*(mtfv + (gs + 12))])++;
 4242|      0|                                (s->rfreq[bt][*(mtfv + (gs + 13))])++;
 4243|      0|                                (s->rfreq[bt][*(mtfv + (gs + 14))])++;
 4244|      0|                                (s->rfreq[bt][*(mtfv + (gs + 15))])++;
 4245|      0|                                (s->rfreq[bt][*(mtfv + (gs + 16))])++;
 4246|      0|                                (s->rfreq[bt][*(mtfv + (gs + 17))])++;
 4247|      0|                                (s->rfreq[bt][*(mtfv + (gs + 18))])++;
 4248|      0|                                (s->rfreq[bt][*(mtfv + (gs + 19))])++;
 4249|      0|                                (s->rfreq[bt][*(mtfv + (gs + 20))])++;
 4250|      0|                                (s->rfreq[bt][*(mtfv + (gs + 21))])++;
 4251|      0|                                (s->rfreq[bt][*(mtfv + (gs + 22))])++;
 4252|      0|                                (s->rfreq[bt][*(mtfv + (gs + 23))])++;
 4253|      0|                                (s->rfreq[bt][*(mtfv + (gs + 24))])++;
 4254|      0|                                (s->rfreq[bt][*(mtfv + (gs + 25))])++;
 4255|      0|                                (s->rfreq[bt][*(mtfv + (gs + 26))])++;
 4256|      0|                                (s->rfreq[bt][*(mtfv + (gs + 27))])++;
 4257|      0|                                (s->rfreq[bt][*(mtfv + (gs + 28))])++;
 4258|      0|                                (s->rfreq[bt][*(mtfv + (gs + 29))])++;
 4259|      0|                                (s->rfreq[bt][*(mtfv + (gs + 30))])++;
 4260|      0|                                (s->rfreq[bt][*(mtfv + (gs + 31))])++;
 4261|      0|                                (s->rfreq[bt][*(mtfv + (gs + 32))])++;
 4262|      0|                                (s->rfreq[bt][*(mtfv + (gs + 33))])++;
 4263|      0|                                (s->rfreq[bt][*(mtfv + (gs + 34))])++;
 4264|      0|                                (s->rfreq[bt][*(mtfv + (gs + 35))])++;
 4265|      0|                                (s->rfreq[bt][*(mtfv + (gs + 36))])++;
 4266|      0|                                (s->rfreq[bt][*(mtfv + (gs + 37))])++;
 4267|      0|                                (s->rfreq[bt][*(mtfv + (gs + 38))])++;
 4268|      0|                                (s->rfreq[bt][*(mtfv + (gs + 39))])++;
 4269|      0|                                (s->rfreq[bt][*(mtfv + (gs + 40))])++;
 4270|      0|                                (s->rfreq[bt][*(mtfv + (gs + 41))])++;
 4271|      0|                                (s->rfreq[bt][*(mtfv + (gs + 42))])++;
 4272|      0|                                (s->rfreq[bt][*(mtfv + (gs + 43))])++;
 4273|      0|                                (s->rfreq[bt][*(mtfv + (gs + 44))])++;
 4274|      0|                                (s->rfreq[bt][*(mtfv + (gs + 45))])++;
 4275|      0|                                (s->rfreq[bt][*(mtfv + (gs + 46))])++;
 4276|      0|                                (s->rfreq[bt][*(mtfv + (gs + 47))])++;
 4277|      0|                                (s->rfreq[bt][*(mtfv + (gs + 48))])++;
 4278|      0|                                (s->rfreq[bt][*(mtfv + (gs + 49))])++;
 4279|      0|                            }
 4280|      0|                            else {
 4281|      0|                                goto _L___0;
 4282|      0|                            }
 4283|      0|                        }
 4284|      4|                        else {
 4285|      4|_L___0:
 4286|      4|                            i = gs;
 4287|      4|                            {
 4288|    112|                                while (1) {
 4289|    112|while_continue___14: /* CIL Label */
 4290|    112|                                    ;
 4291|    112|                                    if (!(i <= ge)) {
 4292|      4|                                        goto while_break___14;
 4293|      4|                                    }
 4294|    108|                                    (s->rfreq[bt][*(mtfv + i)])++;
 4295|    108|                                    i++;
 4296|    108|                                }
 4297|      4|while_break___14: /* CIL Label */
 4298|      4|                                ;
 4299|      4|                            }
 4300|      4|                        }
 4301|      4|                        gs = ge + 1;
 4302|      4|                    }
 4303|      4|while_break___9: /* CIL Label */
 4304|      4|                    ;
 4305|      4|                }
 4306|      4|                if (s->verbosity >= 3) {
 4307|      0|                    {
 4308|      0|                        fprintf((FILE * /* __restrict  */) stderr,
 4309|      0|                                (char const * /* __restrict  */) "      pass %d: size is "
 4310|      0|                                "%d, grp uses are ",
 4311|      0|                                iter + 1, totc / 8);
 4312|      0|                        t = 0;
 4313|      0|                    }
 4314|      0|                    {
 4315|      0|                        while (1) {
 4316|      0|while_continue___15: /* CIL Label */
 4317|      0|                            ;
 4318|      0|                            if (!(t < nGroups)) {
 4319|      0|                                goto while_break___15;
 4320|      0|                            }
 4321|      0|                            {
 4322|      0|                                fprintf((FILE * /* __restrict  */) stderr,
 4323|      0|                                        (char const * /* __restrict  */) "%d ", fave[t]);
 4324|      0|                                t++;
 4325|      0|                            }
 4326|      0|                        }
 4327|      0|while_break___15: /* CIL Label */
 4328|      0|                        ;
 4329|      0|                    }
 4330|      0|                    {
 4331|      0|                        fprintf((FILE * /* __restrict  */) stderr,
 4332|      0|                                (char const * /* __restrict  */) "\n");
 4333|      0|                    }
 4334|      0|                }
 4335|      4|                t = 0;
 4336|      4|                {
 4337|     12|                    while (1) {
 4338|     12|while_continue___16: /* CIL Label */
 4339|     12|                        ;
 4340|     12|                        if (!(t < nGroups)) {
 4341|      4|                            goto while_break___16;
 4342|      4|                        }
 4343|      8|                        {
 4344|      8|                            BZ2_hbMakeCodeLengths(&s->len[t][0], &s->rfreq[t][0], alphaSize,
 4345|      8|                                                  17);
 4346|      8|                            t++;
 4347|      8|                        }
 4348|      8|                    }
 4349|      4|while_break___16: /* CIL Label */
 4350|      4|                    ;
 4351|      4|                }
 4352|      0|                iter++;
 4353|      4|            }
 4354|      1|while_break___4: /* CIL Label */
 4355|      1|            ;
 4356|      1|        }
 4357|      1|        if (!(nGroups < 8)) {
 4358|      0|            {
 4359|      0|                BZ2_bz__AssertH__fail(3002);
 4360|      0|            }
 4361|      0|        }
 4362|      1|        if (nSelectors < 32768) {
 4363|      1|            if (!(nSelectors <= 18002)) {
 4364|      0|                {
 4365|      0|                    BZ2_bz__AssertH__fail(3003);
 4366|      0|                }
 4367|      0|            }
 4368|      1|        }
 4369|      0|        else {
 4370|      0|            {
 4371|      0|                BZ2_bz__AssertH__fail(3003);
 4372|      0|            }
 4373|      0|        }
 4374|      1|        i = 0;
 4375|      1|        {
 4376|      3|            while (1) {
 4377|      3|while_continue___17: /* CIL Label */
 4378|      3|                ;
 4379|      3|                if (!(i < nGroups)) {
 4380|      1|                    goto while_break___17;
 4381|      1|                }
 4382|      2|                pos[i] = (UChar)i;
 4383|      2|                i++;
 4384|      2|            }
 4385|      1|while_break___17: /* CIL Label */
 4386|      1|            ;
 4387|      1|        }
 4388|      0|        i = 0;
 4389|      1|        {
 4390|      2|            while (1) {
 4391|      2|while_continue___18: /* CIL Label */
 4392|      2|                ;
 4393|      2|                if (!(i < nSelectors)) {
 4394|      1|                    goto while_break___18;
 4395|      1|                }
 4396|      1|                ll_i = s->selector[i];
 4397|      1|                j = 0;
 4398|      1|                tmp = pos[j];
 4399|      1|                {
 4400|      2|                    while (1) {
 4401|      2|while_continue___19: /* CIL Label */
 4402|      2|                        ;
 4403|      2|                        if (!((int)ll_i != (int)tmp)) {
 4404|      1|                            goto while_break___19;
 4405|      1|                        }
 4406|      1|                        j++;
 4407|      1|                        tmp2 = tmp;
 4408|      1|                        tmp = pos[j];
 4409|      1|                        pos[j] = tmp2;
 4410|      1|                    }
 4411|      1|while_break___19: /* CIL Label */
 4412|      1|                    ;
 4413|      1|                }
 4414|      0|                pos[0] = tmp;
 4415|      1|                s->selectorMtf[i] = (UChar)j;
 4416|      1|                i++;
 4417|      1|            }
 4418|      1|while_break___18: /* CIL Label */
 4419|      1|            ;
 4420|      1|        }
 4421|      0|        t = 0;
 4422|      1|        {
 4423|      3|            while (1) {
 4424|      3|while_continue___20: /* CIL Label */
 4425|      3|                ;
 4426|      3|                if (!(t < nGroups)) {
 4427|      1|                    goto while_break___20;
 4428|      1|                }
 4429|      2|                minLen = 32;
 4430|      2|                maxLen = 0;
 4431|      2|                i = 0;
 4432|      2|                {
 4433|     40|                    while (1) {
 4434|     40|while_continue___21: /* CIL Label */
 4435|     40|                        ;
 4436|     40|                        if (!(i < alphaSize)) {
 4437|      2|                            goto while_break___21;
 4438|      2|                        }
 4439|     38|                        if ((int)s->len[t][i] > maxLen) {
 4440|      2|                            maxLen = (Int32)s->len[t][i];
 4441|      2|                        }
 4442|     38|                        if ((int)s->len[t][i] < minLen) {
 4443|      4|                            minLen = (Int32)s->len[t][i];
 4444|      4|                        }
 4445|     38|                        i++;
 4446|     38|                    }
 4447|      2|while_break___21: /* CIL Label */
 4448|      2|                    ;
 4449|      2|                }
 4450|      2|                if (!(!(maxLen > 17))) {
 4451|      0|                    {
 4452|      0|                        BZ2_bz__AssertH__fail(3004);
 4453|      0|                    }
 4454|      0|                }
 4455|      2|                if (!(!(minLen < 1))) {
 4456|      0|                    {
 4457|      0|                        BZ2_bz__AssertH__fail(3005);
 4458|      0|                    }
 4459|      0|                }
 4460|      2|                {
 4461|      2|                    BZ2_hbAssignCodes(&s->code[t][0], &s->len[t][0], minLen, maxLen,
 4462|      2|                                      alphaSize);
 4463|      2|                    t++;
 4464|      2|                }
 4465|      2|            }
 4466|      1|while_break___20: /* CIL Label */
 4467|      1|            ;
 4468|      1|        }
 4469|      0|        i = 0;
 4470|      1|        {
 4471|     17|            while (1) {
 4472|     17|while_continue___22: /* CIL Label */
 4473|     17|                ;
 4474|     17|                if (!(i < 16)) {
 4475|      1|                    goto while_break___22;
 4476|      1|                }
 4477|     16|                inUse16[i] = (Bool)0;
 4478|     16|                j = 0;
 4479|     16|                {
 4480|    272|                    while (1) {
 4481|    272|while_continue___23: /* CIL Label */
 4482|    272|                        ;
 4483|    272|                        if (!(j < 16)) {
 4484|     16|                            goto while_break___23;
 4485|     16|                        }
 4486|    256|                        if (s->inUse[i * 16 + j]) {
 4487|     17|                            inUse16[i] = (Bool)1;
 4488|     17|                        }
 4489|    256|                        j++;
 4490|    256|                    }
 4491|     16|while_break___23: /* CIL Label */
 4492|     16|                    ;
 4493|     16|                }
 4494|      0|                i++;
 4495|     16|            }
 4496|      1|while_break___22: /* CIL Label */
 4497|      1|            ;
 4498|      1|        }
 4499|      0|        nBytes = s->numZ;
 4500|      1|        i = 0;
 4501|      1|        {
 4502|     17|            while (1) {
 4503|     17|while_continue___24: /* CIL Label */
 4504|     17|                ;
 4505|     17|                if (!(i < 16)) {
 4506|      1|                    goto while_break___24;
 4507|      1|                }
 4508|     16|                if (inUse16[i]) {
 4509|      6|                    {
 4510|      6|                        bsW(s, 1, (UInt32)1);
 4511|      6|                    }
 4512|      6|                }
 4513|     10|                else {
 4514|     10|                    {
 4515|     10|                        bsW(s, 1, (UInt32)0);
 4516|     10|                    }
 4517|     10|                }
 4518|     16|                i++;
 4519|     16|            }
 4520|      1|while_break___24: /* CIL Label */
 4521|      1|            ;
 4522|      1|        }
 4523|      0|        i = 0;
 4524|      1|        {
 4525|     17|            while (1) {
 4526|     17|while_continue___25: /* CIL Label */
 4527|     17|                ;
 4528|     17|                if (!(i < 16)) {
 4529|      1|                    goto while_break___25;
 4530|      1|                }
 4531|     16|                if (inUse16[i]) {
 4532|      6|                    j = 0;
 4533|      6|                    {
 4534|    102|                        while (1) {
 4535|    102|while_continue___26: /* CIL Label */
 4536|    102|                            ;
 4537|    102|                            if (!(j < 16)) {
 4538|      6|                                goto while_break___26;
 4539|      6|                            }
 4540|     96|                            if (s->inUse[i * 16 + j]) {
 4541|     17|                                {
 4542|     17|                                    bsW(s, 1, (UInt32)1);
 4543|     17|                                }
 4544|     17|                            }
 4545|     79|                            else {
 4546|     79|                                {
 4547|     79|                                    bsW(s, 1, (UInt32)0);
 4548|     79|                                }
 4549|     79|                            }
 4550|     96|                            j++;
 4551|     96|                        }
 4552|      6|while_break___26: /* CIL Label */
 4553|      6|                        ;
 4554|      6|                    }
 4555|      6|                }
 4556|     16|                i++;
 4557|     16|            }
 4558|      1|while_break___25: /* CIL Label */
 4559|      1|            ;
 4560|      1|        }
 4561|      1|        if (s->verbosity >= 3) {
 4562|      0|            {
 4563|      0|                fprintf((FILE * /* __restrict  */) stderr,
 4564|      0|                        (char const * /* __restrict  */) "      bytes: mapping %d, ",
 4565|      0|                        s->numZ - nBytes);
 4566|      0|            }
 4567|      0|        }
 4568|      1|        {
 4569|      1|            nBytes = s->numZ;
 4570|      1|            bsW(s, 3, (UInt32)nGroups);
 4571|      1|            bsW(s, 15, (UInt32)nSelectors);
 4572|      1|            i = 0;
 4573|      1|        }
 4574|      1|        {
 4575|      2|            while (1) {
 4576|      2|while_continue___27: /* CIL Label */
 4577|      2|                ;
 4578|      2|                if (!(i < nSelectors)) {
 4579|      1|                    goto while_break___27;
 4580|      1|                }
 4581|      1|                j = 0;
 4582|      1|                {
 4583|      2|                    while (1) {
 4584|      2|while_continue___28: /* CIL Label */
 4585|      2|                        ;
 4586|      2|                        if (!(j < (Int32)s->selectorMtf[i])) {
 4587|      1|                            goto while_break___28;
 4588|      1|                        }
 4589|      1|                        {
 4590|      1|                            bsW(s, 1, (UInt32)1);
 4591|      1|                            j++;
 4592|      1|                        }
 4593|      1|                    }
 4594|      1|while_break___28: /* CIL Label */
 4595|      1|                    ;
 4596|      1|                }
 4597|      0|                {
 4598|      1|                    bsW(s, 1, (UInt32)0);
 4599|      1|                    i++;
 4600|      1|                }
 4601|      1|            }
 4602|      1|while_break___27: /* CIL Label */
 4603|      1|            ;
 4604|      1|        }
 4605|      1|        if (s->verbosity >= 3) {
 4606|      0|            {
 4607|      0|                fprintf((FILE * /* __restrict  */) stderr,
 4608|      0|                        (char const * /* __restrict  */) "selectors %d, ",
 4609|      0|                        s->numZ - nBytes);
 4610|      0|            }
 4611|      0|        }
 4612|      1|        nBytes = s->numZ;
 4613|      1|        t = 0;
 4614|      1|        {
 4615|      3|            while (1) {
 4616|      3|while_continue___29: /* CIL Label */
 4617|      3|                ;
 4618|      3|                if (!(t < nGroups)) {
 4619|      1|                    goto while_break___29;
 4620|      1|                }
 4621|      2|                {
 4622|      2|                    curr = (Int32)s->len[t][0];
 4623|      2|                    bsW(s, 5, (UInt32)curr);
 4624|      2|                    i = 0;
 4625|      2|                }
 4626|      2|                {
 4627|     40|                    while (1) {
 4628|     40|while_continue___30: /* CIL Label */
 4629|     40|                        ;
 4630|     40|                        if (!(i < alphaSize)) {
 4631|      2|                            goto while_break___30;
 4632|      2|                        }
 4633|     38|                        {
 4634|     45|                            while (1) {
 4635|     45|while_continue___31: /* CIL Label */
 4636|     45|                                ;
 4637|     45|                                if (!(curr < (Int32)s->len[t][i])) {
 4638|     38|                                    goto while_break___31;
 4639|     38|                                }
 4640|      7|                                {
 4641|      7|                                    bsW(s, 2, (UInt32)2);
 4642|      7|                                    curr++;
 4643|      7|                                }
 4644|      7|                            }
 4645|     38|while_break___31: /* CIL Label */
 4646|     38|                            ;
 4647|     38|                        }
 4648|      0|                        {
 4649|     46|                            while (1) {
 4650|     46|while_continue___32: /* CIL Label */
 4651|     46|                                ;
 4652|     46|                                if (!(curr > (Int32)s->len[t][i])) {
 4653|     38|                                    goto while_break___32;
 4654|     38|                                }
 4655|      8|                                {
 4656|      8|                                    bsW(s, 2, (UInt32)3);
 4657|      8|                                    curr--;
 4658|      8|                                }
 4659|      8|                            }
 4660|     38|while_break___32: /* CIL Label */
 4661|     38|                            ;
 4662|     38|                        }
 4663|      0|                        {
 4664|     38|                            bsW(s, 1, (UInt32)0);
 4665|     38|                            i++;
 4666|     38|                        }
 4667|     38|                    }
 4668|      2|while_break___30: /* CIL Label */
 4669|      2|                    ;
 4670|      2|                }
 4671|      0|                t++;
 4672|      2|            }
 4673|      1|while_break___29: /* CIL Label */
 4674|      1|            ;
 4675|      1|        }
 4676|      1|        if (s->verbosity >= 3) {
 4677|      0|            {
 4678|      0|                fprintf((FILE * /* __restrict  */) stderr,
 4679|      0|                        (char const * /* __restrict  */) "code lengths %d, ",
 4680|      0|                        s->numZ - nBytes);
 4681|      0|            }
 4682|      0|        }
 4683|      1|        nBytes = s->numZ;
 4684|      1|        selCtr = 0;
 4685|      1|        gs = 0;
 4686|      1|        {
 4687|      2|            while (1) {
 4688|      2|while_continue___33: /* CIL Label */
 4689|      2|                ;
 4690|      2|                if (!(!(gs >= s->nMTF))) {
 4691|      1|                    goto while_break___33;
 4692|      1|                }
 4693|      1|                ge = (gs + 50) - 1;
 4694|      1|                if (ge >= s->nMTF) {
 4695|      1|                    ge = s->nMTF - 1;
 4696|      1|                }
 4697|      1|                if (!((int)s->selector[selCtr] < nGroups)) {
 4698|      0|                    {
 4699|      0|                        BZ2_bz__AssertH__fail(3006);
 4700|      0|                    }
 4701|      0|                }
 4702|      1|                if (nGroups == 6) {
 4703|      0|                    if (50 == (ge - gs) + 1) {
 4704|      0|                        {
 4705|      0|                            s_len_sel_selCtr = &s->len[s->selector[selCtr]][0];
 4706|      0|                            s_code_sel_selCtr = &s->code[s->selector[selCtr]][0];
 4707|      0|                            mtfv_i = *(mtfv + gs);
 4708|      0|                            bsW(s, (Int32) * (s_len_sel_selCtr + (int)mtfv_i),
 4709|      0|                                (UInt32) * (s_code_sel_selCtr + (int)mtfv_i));
 4710|      0|                            mtfv_i = *(mtfv + (gs + 1));
 4711|      0|                            bsW(s, (Int32) * (s_len_sel_selCtr + (int)mtfv_i),
 4712|      0|                                (UInt32) * (s_code_sel_selCtr + (int)mtfv_i));
 4713|      0|                            mtfv_i = *(mtfv + (gs + 2));
 4714|      0|                            bsW(s, (Int32) * (s_len_sel_selCtr + (int)mtfv_i),
 4715|      0|                                (UInt32) * (s_code_sel_selCtr + (int)mtfv_i));
 4716|      0|                            mtfv_i = *(mtfv + (gs + 3));
 4717|      0|                            bsW(s, (Int32) * (s_len_sel_selCtr + (int)mtfv_i),
 4718|      0|                                (UInt32) * (s_code_sel_selCtr + (int)mtfv_i));
 4719|      0|                            mtfv_i = *(mtfv + (gs + 4));
 4720|      0|                            bsW(s, (Int32) * (s_len_sel_selCtr + (int)mtfv_i),
 4721|      0|                                (UInt32) * (s_code_sel_selCtr + (int)mtfv_i));
 4722|      0|                            mtfv_i = *(mtfv + (gs + 5));
 4723|      0|                            bsW(s, (Int32) * (s_len_sel_selCtr + (int)mtfv_i),
 4724|      0|                                (UInt32) * (s_code_sel_selCtr + (int)mtfv_i));
 4725|      0|                            mtfv_i = *(mtfv + (gs + 6));
 4726|      0|                            bsW(s, (Int32) * (s_len_sel_selCtr + (int)mtfv_i),
 4727|      0|                                (UInt32) * (s_code_sel_selCtr + (int)mtfv_i));
 4728|      0|                            mtfv_i = *(mtfv + (gs + 7));
 4729|      0|                            bsW(s, (Int32) * (s_len_sel_selCtr + (int)mtfv_i),
 4730|      0|                                (UInt32) * (s_code_sel_selCtr + (int)mtfv_i));
 4731|      0|                            mtfv_i = *(mtfv + (gs + 8));
 4732|      0|                            bsW(s, (Int32) * (s_len_sel_selCtr + (int)mtfv_i),
 4733|      0|                                (UInt32) * (s_code_sel_selCtr + (int)mtfv_i));
 4734|      0|                            mtfv_i = *(mtfv + (gs + 9));
 4735|      0|                            bsW(s, (Int32) * (s_len_sel_selCtr + (int)mtfv_i),
 4736|      0|                                (UInt32) * (s_code_sel_selCtr + (int)mtfv_i));
 4737|      0|                            mtfv_i = *(mtfv + (gs + 10));
 4738|      0|                            bsW(s, (Int32) * (s_len_sel_selCtr + (int)mtfv_i),
 4739|      0|                                (UInt32) * (s_code_sel_selCtr + (int)mtfv_i));
 4740|      0|                            mtfv_i = *(mtfv + (gs + 11));
 4741|      0|                            bsW(s, (Int32) * (s_len_sel_selCtr + (int)mtfv_i),
 4742|      0|                                (UInt32) * (s_code_sel_selCtr + (int)mtfv_i));
 4743|      0|                            mtfv_i = *(mtfv + (gs + 12));
 4744|      0|                            bsW(s, (Int32) * (s_len_sel_selCtr + (int)mtfv_i),
 4745|      0|                                (UInt32) * (s_code_sel_selCtr + (int)mtfv_i));
 4746|      0|                            mtfv_i = *(mtfv + (gs + 13));
 4747|      0|                            bsW(s, (Int32) * (s_len_sel_selCtr + (int)mtfv_i),
 4748|      0|                                (UInt32) * (s_code_sel_selCtr + (int)mtfv_i));
 4749|      0|                            mtfv_i = *(mtfv + (gs + 14));
 4750|      0|                            bsW(s, (Int32) * (s_len_sel_selCtr + (int)mtfv_i),
 4751|      0|                                (UInt32) * (s_code_sel_selCtr + (int)mtfv_i));
 4752|      0|                            mtfv_i = *(mtfv + (gs + 15));
 4753|      0|                            bsW(s, (Int32) * (s_len_sel_selCtr + (int)mtfv_i),
 4754|      0|                                (UInt32) * (s_code_sel_selCtr + (int)mtfv_i));
 4755|      0|                            mtfv_i = *(mtfv + (gs + 16));
 4756|      0|                            bsW(s, (Int32) * (s_len_sel_selCtr + (int)mtfv_i),
 4757|      0|                                (UInt32) * (s_code_sel_selCtr + (int)mtfv_i));
 4758|      0|                            mtfv_i = *(mtfv + (gs + 17));
 4759|      0|                            bsW(s, (Int32) * (s_len_sel_selCtr + (int)mtfv_i),
 4760|      0|                                (UInt32) * (s_code_sel_selCtr + (int)mtfv_i));
 4761|      0|                            mtfv_i = *(mtfv + (gs + 18));
 4762|      0|                            bsW(s, (Int32) * (s_len_sel_selCtr + (int)mtfv_i),
 4763|      0|                                (UInt32) * (s_code_sel_selCtr + (int)mtfv_i));
 4764|      0|                            mtfv_i = *(mtfv + (gs + 19));
 4765|      0|                            bsW(s, (Int32) * (s_len_sel_selCtr + (int)mtfv_i),
 4766|      0|                                (UInt32) * (s_code_sel_selCtr + (int)mtfv_i));
 4767|      0|                            mtfv_i = *(mtfv + (gs + 20));
 4768|      0|                            bsW(s, (Int32) * (s_len_sel_selCtr + (int)mtfv_i),
 4769|      0|                                (UInt32) * (s_code_sel_selCtr + (int)mtfv_i));
 4770|      0|                            mtfv_i = *(mtfv + (gs + 21));
 4771|      0|                            bsW(s, (Int32) * (s_len_sel_selCtr + (int)mtfv_i),
 4772|      0|                                (UInt32) * (s_code_sel_selCtr + (int)mtfv_i));
 4773|      0|                            mtfv_i = *(mtfv + (gs + 22));
 4774|      0|                            bsW(s, (Int32) * (s_len_sel_selCtr + (int)mtfv_i),
 4775|      0|                                (UInt32) * (s_code_sel_selCtr + (int)mtfv_i));
 4776|      0|                            mtfv_i = *(mtfv + (gs + 23));
 4777|      0|                            bsW(s, (Int32) * (s_len_sel_selCtr + (int)mtfv_i),
 4778|      0|                                (UInt32) * (s_code_sel_selCtr + (int)mtfv_i));
 4779|      0|                            mtfv_i = *(mtfv + (gs + 24));
 4780|      0|                            bsW(s, (Int32) * (s_len_sel_selCtr + (int)mtfv_i),
 4781|      0|                                (UInt32) * (s_code_sel_selCtr + (int)mtfv_i));
 4782|      0|                            mtfv_i = *(mtfv + (gs + 25));
 4783|      0|                            bsW(s, (Int32) * (s_len_sel_selCtr + (int)mtfv_i),
 4784|      0|                                (UInt32) * (s_code_sel_selCtr + (int)mtfv_i));
 4785|      0|                            mtfv_i = *(mtfv + (gs + 26));
 4786|      0|                            bsW(s, (Int32) * (s_len_sel_selCtr + (int)mtfv_i),
 4787|      0|                                (UInt32) * (s_code_sel_selCtr + (int)mtfv_i));
 4788|      0|                            mtfv_i = *(mtfv + (gs + 27));
 4789|      0|                            bsW(s, (Int32) * (s_len_sel_selCtr + (int)mtfv_i),
 4790|      0|                                (UInt32) * (s_code_sel_selCtr + (int)mtfv_i));
 4791|      0|                            mtfv_i = *(mtfv + (gs + 28));
 4792|      0|                            bsW(s, (Int32) * (s_len_sel_selCtr + (int)mtfv_i),
 4793|      0|                                (UInt32) * (s_code_sel_selCtr + (int)mtfv_i));
 4794|      0|                            mtfv_i = *(mtfv + (gs + 29));
 4795|      0|                            bsW(s, (Int32) * (s_len_sel_selCtr + (int)mtfv_i),
 4796|      0|                                (UInt32) * (s_code_sel_selCtr + (int)mtfv_i));
 4797|      0|                            mtfv_i = *(mtfv + (gs + 30));
 4798|      0|                            bsW(s, (Int32) * (s_len_sel_selCtr + (int)mtfv_i),
 4799|      0|                                (UInt32) * (s_code_sel_selCtr + (int)mtfv_i));
 4800|      0|                            mtfv_i = *(mtfv + (gs + 31));
 4801|      0|                            bsW(s, (Int32) * (s_len_sel_selCtr + (int)mtfv_i),
 4802|      0|                                (UInt32) * (s_code_sel_selCtr + (int)mtfv_i));
 4803|      0|                            mtfv_i = *(mtfv + (gs + 32));
 4804|      0|                            bsW(s, (Int32) * (s_len_sel_selCtr + (int)mtfv_i),
 4805|      0|                                (UInt32) * (s_code_sel_selCtr + (int)mtfv_i));
 4806|      0|                            mtfv_i = *(mtfv + (gs + 33));
 4807|      0|                            bsW(s, (Int32) * (s_len_sel_selCtr + (int)mtfv_i),
 4808|      0|                                (UInt32) * (s_code_sel_selCtr + (int)mtfv_i));
 4809|      0|                            mtfv_i = *(mtfv + (gs + 34));
 4810|      0|                            bsW(s, (Int32) * (s_len_sel_selCtr + (int)mtfv_i),
 4811|      0|                                (UInt32) * (s_code_sel_selCtr + (int)mtfv_i));
 4812|      0|                            mtfv_i = *(mtfv + (gs + 35));
 4813|      0|                            bsW(s, (Int32) * (s_len_sel_selCtr + (int)mtfv_i),
 4814|      0|                                (UInt32) * (s_code_sel_selCtr + (int)mtfv_i));
 4815|      0|                            mtfv_i = *(mtfv + (gs + 36));
 4816|      0|                            bsW(s, (Int32) * (s_len_sel_selCtr + (int)mtfv_i),
 4817|      0|                                (UInt32) * (s_code_sel_selCtr + (int)mtfv_i));
 4818|      0|                            mtfv_i = *(mtfv + (gs + 37));
 4819|      0|                            bsW(s, (Int32) * (s_len_sel_selCtr + (int)mtfv_i),
 4820|      0|                                (UInt32) * (s_code_sel_selCtr + (int)mtfv_i));
 4821|      0|                            mtfv_i = *(mtfv + (gs + 38));
 4822|      0|                            bsW(s, (Int32) * (s_len_sel_selCtr + (int)mtfv_i),
 4823|      0|                                (UInt32) * (s_code_sel_selCtr + (int)mtfv_i));
 4824|      0|                            mtfv_i = *(mtfv + (gs + 39));
 4825|      0|                            bsW(s, (Int32) * (s_len_sel_selCtr + (int)mtfv_i),
 4826|      0|                                (UInt32) * (s_code_sel_selCtr + (int)mtfv_i));
 4827|      0|                            mtfv_i = *(mtfv + (gs + 40));
 4828|      0|                            bsW(s, (Int32) * (s_len_sel_selCtr + (int)mtfv_i),
 4829|      0|                                (UInt32) * (s_code_sel_selCtr + (int)mtfv_i));
 4830|      0|                            mtfv_i = *(mtfv + (gs + 41));
 4831|      0|                            bsW(s, (Int32) * (s_len_sel_selCtr + (int)mtfv_i),
 4832|      0|                                (UInt32) * (s_code_sel_selCtr + (int)mtfv_i));
 4833|      0|                            mtfv_i = *(mtfv + (gs + 42));
 4834|      0|                            bsW(s, (Int32) * (s_len_sel_selCtr + (int)mtfv_i),
 4835|      0|                                (UInt32) * (s_code_sel_selCtr + (int)mtfv_i));
 4836|      0|                            mtfv_i = *(mtfv + (gs + 43));
 4837|      0|                            bsW(s, (Int32) * (s_len_sel_selCtr + (int)mtfv_i),
 4838|      0|                                (UInt32) * (s_code_sel_selCtr + (int)mtfv_i));
 4839|      0|                            mtfv_i = *(mtfv + (gs + 44));
 4840|      0|                            bsW(s, (Int32) * (s_len_sel_selCtr + (int)mtfv_i),
 4841|      0|                                (UInt32) * (s_code_sel_selCtr + (int)mtfv_i));
 4842|      0|                            mtfv_i = *(mtfv + (gs + 45));
 4843|      0|                            bsW(s, (Int32) * (s_len_sel_selCtr + (int)mtfv_i),
 4844|      0|                                (UInt32) * (s_code_sel_selCtr + (int)mtfv_i));
 4845|      0|                            mtfv_i = *(mtfv + (gs + 46));
 4846|      0|                            bsW(s, (Int32) * (s_len_sel_selCtr + (int)mtfv_i),
 4847|      0|                                (UInt32) * (s_code_sel_selCtr + (int)mtfv_i));
 4848|      0|                            mtfv_i = *(mtfv + (gs + 47));
 4849|      0|                            bsW(s, (Int32) * (s_len_sel_selCtr + (int)mtfv_i),
 4850|      0|                                (UInt32) * (s_code_sel_selCtr + (int)mtfv_i));
 4851|      0|                            mtfv_i = *(mtfv + (gs + 48));
 4852|      0|                            bsW(s, (Int32) * (s_len_sel_selCtr + (int)mtfv_i),
 4853|      0|                                (UInt32) * (s_code_sel_selCtr + (int)mtfv_i));
 4854|      0|                            mtfv_i = *(mtfv + (gs + 49));
 4855|      0|                            bsW(s, (Int32) * (s_len_sel_selCtr + (int)mtfv_i),
 4856|      0|                                (UInt32) * (s_code_sel_selCtr + (int)mtfv_i));
 4857|      0|                        }
 4858|      0|                    }
 4859|      0|                    else {
 4860|      0|                        goto _L___1;
 4861|      0|                    }
 4862|      0|                }
 4863|      1|                else {
 4864|      1|_L___1:
 4865|      1|                    i = gs;
 4866|      1|                    {
 4867|     28|                        while (1) {
 4868|     28|while_continue___34: /* CIL Label */
 4869|     28|                            ;
 4870|     28|                            if (!(i <= ge)) {
 4871|      1|                                goto while_break___34;
 4872|      1|                            }
 4873|     27|                            {
 4874|     27|                                bsW(s, (Int32)s->len[s->selector[selCtr]][*(mtfv + i)],
 4875|     27|                                    (UInt32)s->code[s->selector[selCtr]][*(mtfv + i)]);
 4876|     27|                                i++;
 4877|     27|                            }
 4878|     27|                        }
 4879|      1|while_break___34: /* CIL Label */
 4880|      1|                        ;
 4881|      1|                    }
 4882|      1|                }
 4883|      1|                gs = ge + 1;
 4884|      1|                selCtr++;
 4885|      1|            }
 4886|      1|while_break___33: /* CIL Label */
 4887|      1|            ;
 4888|      1|        }
 4889|      1|        if (!(selCtr == nSelectors)) {
 4890|      0|            {
 4891|      0|                BZ2_bz__AssertH__fail(3007);
 4892|      0|            }
 4893|      0|        }
 4894|      1|        if (s->verbosity >= 3) {
 4895|      0|            {
 4896|      0|                fprintf((FILE * /* __restrict  */) stderr,
 4897|      0|                        (char const * /* __restrict  */) "codes %d\n",
 4898|      0|                        s->numZ - nBytes);
 4899|      0|            }
 4900|      0|        }
 4901|      1|        return;
 4902|      1|    }
 4903|      1|}
 4904|       |void BZ2_compressBlock(EState *s, Bool is_last_block)
 4905|      1|{
 4906|       |
 4907|      1|    {
 4908|      1|        if (s->nblock > 0) {
 4909|      1|            s->blockCRC = ~s->blockCRC;
 4910|      1|            s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
 4911|      1|            s->combinedCRC ^= s->blockCRC;
 4912|      1|            if (s->blockNo > 1) {
 4913|      0|                s->numZ = 0;
 4914|      0|            }
 4915|      1|            if (s->verbosity >= 2) {
 4916|      0|                {
 4917|      0|                    fprintf(
 4918|      0|                        (FILE * /* __restrict  */) stderr,
 4919|      0|                        (char const
 4920|      0|                         * /* __restrict  */) "    block %d: crc = 0x%08x, combined "
 4921|      0|                        "CRC = 0x%08x, size = %d\n",
 4922|      0|                        s->blockNo, s->blockCRC, s->combinedCRC, s->nblock);
 4923|      0|                }
 4924|      0|            }
 4925|      1|            {
 4926|      1|                BZ2_blockSort(s);
 4927|      1|            }
 4928|      1|        }
 4929|      1|        s->zbits = (UChar *)s->arr2 + s->nblock;
 4930|      1|        if (s->blockNo == 1) {
 4931|      1|            {
 4932|      1|                BZ2_bsInitWrite(s);
 4933|      1|                bsPutUChar(s, (UChar)66);
 4934|      1|                bsPutUChar(s, (UChar)90);
 4935|      1|                bsPutUChar(s, (UChar)104);
 4936|      1|                bsPutUChar(s, (UChar)(48 + s->blockSize100k));
 4937|      1|            }
 4938|      1|        }
 4939|      1|        if (s->nblock > 0) {
 4940|      1|            {
 4941|      1|                bsPutUChar(s, (UChar)49);
 4942|      1|                bsPutUChar(s, (UChar)65);
 4943|      1|                bsPutUChar(s, (UChar)89);
 4944|      1|                bsPutUChar(s, (UChar)38);
 4945|      1|                bsPutUChar(s, (UChar)83);
 4946|      1|                bsPutUChar(s, (UChar)89);
 4947|      1|                bsPutUInt32(s, s->blockCRC);
 4948|      1|                bsW(s, 1, (UInt32)0);
 4949|      1|                bsW(s, 24, (UInt32)s->origPtr);
 4950|      1|                generateMTFValues(s);
 4951|      1|                sendMTFValues(s);
 4952|      1|            }
 4953|      1|        }
 4954|      1|        if (is_last_block) {
 4955|      1|            {
 4956|      1|                bsPutUChar(s, (UChar)23);
 4957|      1|                bsPutUChar(s, (UChar)114);
 4958|      1|                bsPutUChar(s, (UChar)69);
 4959|      1|                bsPutUChar(s, (UChar)56);
 4960|      1|                bsPutUChar(s, (UChar)80);
 4961|      1|                bsPutUChar(s, (UChar)144);
 4962|      1|                bsPutUInt32(s, s->combinedCRC);
 4963|      1|            }
 4964|      1|            if (s->verbosity >= 2) {
 4965|      0|                {
 4966|      0|                    fprintf(
 4967|      0|                        (FILE * /* __restrict  */) stderr,
 4968|      0|                        (char const
 4969|      0|                         * /* __restrict  */) "    final combined CRC = 0x%08x\n   ",
 4970|      0|                        s->combinedCRC);
 4971|      0|                }
 4972|      0|            }
 4973|      1|            {
 4974|      1|                bsFinishWrite(s);
 4975|      1|            }
 4976|      1|        }
 4977|      1|        return;
 4978|      1|    }
 4979|      1|}
 4980|       |extern __attribute__((__nothrow__)) void *(__attribute__((__leaf__))
 4981|       |        malloc)(size_t __size)
 4982|       |__attribute__((__malloc__));
 4983|       |extern __attribute__((__nothrow__)) void(__attribute__((__leaf__))
 4984|       |        free)(void *__ptr);
 4985|       |extern __attribute__((__nothrow__, __noreturn__)) void(__attribute__((__leaf__))
 4986|       |        exit)(int __status);
 4987|       |extern struct _IO_FILE *stdin;
 4988|       |extern struct _IO_FILE *stdout;
 4989|       |extern int fclose(FILE *__stream);
 4990|       |extern int fflush(FILE *__stream);
 4991|       |
 4992|       |extern __attribute__((__nothrow__))
 4993|       |FILE *(__attribute__((__leaf__)) fdopen)(int __fd, char const *__modes);
 4994|       |extern int fgetc(FILE *__stream);
 4995|       |extern int ungetc(int __c, FILE *__stream);
 4996|       |extern size_t fread(void *__restrict __ptr, size_t __size, size_t __n,
 4997|       |                    FILE *__restrict __stream);
 4998|       |extern size_t fwrite(void const *__restrict __ptr, size_t __size, size_t __n,
 4999|       |                     FILE *__restrict __s);
 5000|       |extern __attribute__((__nothrow__)) int(__attribute__((__leaf__))
 5001|       |                                        ferror)(FILE *__stream);
 5002|       |extern __attribute__((__nothrow__)) unsigned short const **(
 5003|       |    __attribute__((__leaf__)) __ctype_b_loc)(void)__attribute__((__const__));
 5004|       |extern __attribute__((__nothrow__)) char *(
 5005|       |    __attribute__((__nonnull__(1, 2), __leaf__))
 5006|       |    strcat)(char *__restrict __dest, char const *__restrict __src);
 5007|       |extern __attribute__((__nothrow__)) int(
 5008|       |    __attribute__((__nonnull__(1, 2), __leaf__))
 5009|       |    strcmp)(char const *__s1, char const *__s2) __attribute__((__pure__));
 5010|       |int BZ2_bzCompressInit(bz_stream *strm, int blockSize100k___0,
 5011|       |                       int verbosity___0, int workFactor___0);
 5012|       |int BZ2_bzCompress(bz_stream *strm, int action);
 5013|       |int BZ2_bzCompressEnd(bz_stream *strm);
 5014|       |int BZ2_bzDecompressInit(bz_stream *strm, int verbosity___0, int small);
 5015|       |int BZ2_bzDecompress(bz_stream *strm);
 5016|       |int BZ2_bzDecompressEnd(bz_stream *strm);
 5017|       |BZFILE *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity___0, int small,
 5018|       |                       void *unused, int nUnused);
 5019|       |void BZ2_bzReadClose(int *bzerror, BZFILE *b);
 5020|       |void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused, int *nUnused);
 5021|       |int BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
 5022|       |BZFILE *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k___0,
 5023|       |                        int verbosity___0, int workFactor___0);
 5024|       |void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
 5025|       |void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
 5026|       |                        unsigned int *nbytes_in_lo32,
 5027|       |                        unsigned int *nbytes_in_hi32,
 5028|       |                        unsigned int *nbytes_out_lo32,
 5029|       |                        unsigned int *nbytes_out_hi32);
 5030|       |char const *BZ2_bzlibVersion(void);
 5031|       |void BZ2_bz__AssertH__fail(int errcode)
 5032|      0|{
 5033|      0|    char const *tmp;
 5034|       |
 5035|      0|    {
 5036|      0|        {
 5037|      0|            tmp = BZ2_bzlibVersion();
 5038|      0|            fprintf(
 5039|      0|                (FILE * /* __restrict  */) stderr,
 5040|      0|                (char const
 5041|      0|                 * /* __restrict  */) "\n\nbzip2/libbzip2: internal error number "
 5042|      0|                "%d.\nThis is a bug in bzip2/libbzip2, "
 5043|      0|                "%s.\nPlease report it to me at: "
 5044|      0|                "jseward@bzip.org.  If this happened\nwhen "
 5045|      0|                "you were using some program which uses "
 5046|      0|                "libbzip2 as a\ncomponent, you should also "
 5047|      0|                "report this bug to the author(s)\nof that "
 5048|      0|                "program.  Please make an effort to report "
 5049|      0|                "this bug;\ntimely and accurate bug "
 5050|      0|                "reports eventually lead to "
 5051|      0|                "higher\nquality software.  Thanks.  "
 5052|      0|                "Julian Seward, 10 December 2007.\n\n",
 5053|      0|                errcode, tmp);
 5054|      0|        }
 5055|      0|        if (errcode == 1007) {
 5056|      0|            {
 5057|      0|                fprintf(
 5058|      0|                    (FILE * /* __restrict  */) stderr,
 5059|      0|                    (char const
 5060|      0|                     * /* __restrict  */) "\n*** A special note about internal "
 5061|      0|                    "error number 1007 ***\n\nExperience "
 5062|      0|                    "suggests that a common cause of i.e. "
 5063|      0|                    "1007\nis unreliable memory or other "
 5064|      0|                    "hardware.  The 1007 assertion\njust "
 5065|      0|                    "happens to cross-check the results of "
 5066|      0|                    "huge numbers of\nmemory reads/writes, "
 5067|      0|                    "and so acts (unintendedly) as a "
 5068|      0|                    "stress\ntest of your memory "
 5069|      0|                    "system.\n\nI suggest the following: try "
 5070|      0|                    "compressing the file again,\npossibly "
 5071|      0|                    "monitoring progress in detail with the "
 5072|      0|                    "-vv flag.\n\n* If the error cannot be "
 5073|      0|                    "reproduced, and/or happens at "
 5074|      0|                    "different\n  points in compression, you "
 5075|      0|                    "may have a flaky memory system.\n  Try "
 5076|      0|                    "a memory-test program.  I have used "
 5077|      0|                    "Memtest86\n  (www.memtest86.com).  At "
 5078|      0|                    "the time of writing it is free "
 5079|      0|                    "(GPLd).\n  Memtest86 tests memory much "
 5080|      0|                    "more thorougly than your BIOSs\n  "
 5081|      0|                    "power-on test, and may find failures "
 5082|      0|                    "that the BIOS doesn\'t.\n\n* If the "
 5083|      0|                    "error can be repeatably reproduced, "
 5084|      0|                    "this is a bug in\n  bzip2, and I would "
 5085|      0|                    "very much like to hear about it.  "
 5086|      0|                    "Please\n  let me know, and, ideally, "
 5087|      0|                    "save a copy of the file causing the\n  "
 5088|      0|                    "problem -- without which I will be "
 5089|      0|                    "unable to investigate it.\n\n");
 5090|      0|            }
 5091|      0|        }
 5092|      0|        {
 5093|      0|            exit(3);
 5094|      0|        }
 5095|      0|    }
 5096|      0|}
 5097|       |static int bz_config_ok(void)
 5098|      6|{
 5099|       |
 5100|      6|    {
 5101|      6|        if (sizeof(int) != 4UL) {
 5102|      0|            return (0);
 5103|      0|        }
 5104|      6|        if (sizeof(short) != 2UL) {
 5105|      0|            return (0);
 5106|      0|        }
 5107|      6|        if (sizeof(char) != 1UL) {
 5108|      0|            return (0);
 5109|      0|        }
 5110|      6|        return (1);
 5111|      6|    }
 5112|      6|}
 5113|       |static void *default_bzalloc(void *opaque, Int32 items, Int32 size)
 5114|     14|{
 5115|     14|    void *v;
 5116|     14|    void *tmp;
 5117|       |
 5118|     14|    {
 5119|     14|        {
 5120|     14|            tmp = malloc((size_t)(items * size));
 5121|     14|            v = tmp;
 5122|     14|        }
 5123|     14|        return (v);
 5124|     14|    }
 5125|     14|}
 5126|       |static void default_bzfree(void *opaque, void *addr)
 5127|     14|{
 5128|       |
 5129|     14|    {
 5130|     14|        if ((unsigned long)addr != (unsigned long)((void *)0)) {
 5131|     14|            {
 5132|     14|                free(addr);
 5133|     14|            }
 5134|     14|        }
 5135|     14|        return;
 5136|     14|    }
 5137|     14|}
 5138|       |static void prepare_new_block(EState *s)
 5139|      1|{
 5140|      1|    Int32 i;
 5141|       |
 5142|      1|    {
 5143|      1|        s->nblock = 0;
 5144|      1|        s->numZ = 0;
 5145|      1|        s->state_out_pos = 0;
 5146|      1|        s->blockCRC = (UInt32)4294967295L;
 5147|      1|        i = 0;
 5148|      1|        {
 5149|    257|            while (1) {
 5150|    257|while_continue: /* CIL Label */
 5151|    257|                ;
 5152|    257|                if (!(i < 256)) {
 5153|      1|                    goto while_break;
 5154|      1|                }
 5155|    256|                s->inUse[i] = (Bool)0;
 5156|    256|                i++;
 5157|    256|            }
 5158|      1|while_break: /* CIL Label */
 5159|      1|            ;
 5160|      1|        }
 5161|      0|        (s->blockNo)++;
 5162|      1|        return;
 5163|      1|    }
 5164|      1|}
 5165|       |static void init_RL(EState *s)
 5166|      2|{
 5167|       |
 5168|      2|    {
 5169|      2|        s->state_in_ch = (UInt32)256;
 5170|      2|        s->state_in_len = 0;
 5171|      2|        return;
 5172|      2|    }
 5173|      2|}
 5174|       |static Bool isempty_RL(EState *s)
 5175|      2|{
 5176|       |
 5177|      2|    {
 5178|      2|        if (s->state_in_ch < 256U) {
 5179|      0|            if (s->state_in_len > 0) {
 5180|      0|                return ((Bool)0);
 5181|      0|            }
 5182|      0|            else {
 5183|      0|                return ((Bool)1);
 5184|      0|            }
 5185|      0|        }
 5186|      2|        else {
 5187|      2|            return ((Bool)1);
 5188|      2|        }
 5189|      2|    }
 5190|      2|}
 5191|       |int BZ2_bzCompressInit(bz_stream *strm, int blockSize100k___0,
 5192|       |                       int verbosity___0, int workFactor___0)
 5193|      1|{
 5194|      1|    Int32 n;
 5195|      1|    EState *s;
 5196|      1|    int tmp;
 5197|       |
 5198|      1|    {
 5199|      1|        {
 5200|      1|            tmp = bz_config_ok();
 5201|      1|        }
 5202|      1|        if (!tmp) {
 5203|      0|            return (-9);
 5204|      0|        }
 5205|      1|        if ((unsigned long)strm == (unsigned long)((void *)0)) {
 5206|      0|            return (-2);
 5207|      0|        }
 5208|      1|        else {
 5209|      1|            if (blockSize100k___0 < 1) {
 5210|      0|                return (-2);
 5211|      0|            }
 5212|      1|            else {
 5213|      1|                if (blockSize100k___0 > 9) {
 5214|      0|                    return (-2);
 5215|      0|                }
 5216|      1|                else {
 5217|      1|                    if (workFactor___0 < 0) {
 5218|      0|                        return (-2);
 5219|      0|                    }
 5220|      1|                    else {
 5221|      1|                        if (workFactor___0 > 250) {
 5222|      0|                            return (-2);
 5223|      0|                        }
 5224|      1|                    }
 5225|      1|                }
 5226|      1|            }
 5227|      1|        }
 5228|      1|        if (workFactor___0 == 0) {
 5229|      0|            workFactor___0 = 30;
 5230|      0|        }
 5231|      1|        if ((unsigned long)strm->bzalloc == (unsigned long)((void *)0)) {
 5232|      1|            strm->bzalloc = &default_bzalloc;
 5233|      1|        }
 5234|      1|        if ((unsigned long)strm->bzfree == (unsigned long)((void *)0)) {
 5235|      1|            strm->bzfree = &default_bzfree;
 5236|      1|        }
 5237|      1|        {
 5238|      1|            s = (EState *)(*(strm->bzalloc))(strm->opaque, (int)sizeof(EState), 1);
 5239|      1|        }
 5240|      1|        if ((unsigned long)s == (unsigned long)((void *)0)) {
 5241|      0|            return (-3);
 5242|      0|        }
 5243|      1|        {
 5244|      1|            s->strm = strm;
 5245|      1|            s->arr1 = (UInt32 *)((void *)0);
 5246|      1|            s->arr2 = (UInt32 *)((void *)0);
 5247|      1|            s->ftab = (UInt32 *)((void *)0);
 5248|      1|            n = 100000 * blockSize100k___0;
 5249|      1|            s->arr1 = (UInt32 *)(*(strm->bzalloc))(
 5250|      1|                          strm->opaque, (int)((unsigned long)n * sizeof(UInt32)), 1);
 5251|      1|            s->arr2 = (UInt32 *)(*(strm->bzalloc))(
 5252|      1|                          strm->opaque, (int)((unsigned long)(n + 34) * sizeof(UInt32)), 1);
 5253|      1|            s->ftab = (UInt32 *)(*(strm->bzalloc))(
 5254|      1|                          strm->opaque, (int)(65537UL * sizeof(UInt32)), 1);
 5255|      1|        }
 5256|      1|        if ((unsigned long)s->arr1 == (unsigned long)((void *)0)) {
 5257|      0|            goto _L;
 5258|      0|        }
 5259|      1|        else {
 5260|      1|            if ((unsigned long)s->arr2 == (unsigned long)((void *)0)) {
 5261|      0|                goto _L;
 5262|      0|            }
 5263|      1|            else {
 5264|      1|                if ((unsigned long)s->ftab == (unsigned long)((void *)0)) {
 5265|      0|_L:
 5266|      0|                    if ((unsigned long)s->arr1 != (unsigned long)((void *)0)) {
 5267|      0|                        {
 5268|      0|                            (*(strm->bzfree))(strm->opaque, (void *)s->arr1);
 5269|      0|                        }
 5270|      0|                    }
 5271|      0|                    if ((unsigned long)s->arr2 != (unsigned long)((void *)0)) {
 5272|      0|                        {
 5273|      0|                            (*(strm->bzfree))(strm->opaque, (void *)s->arr2);
 5274|      0|                        }
 5275|      0|                    }
 5276|      0|                    if ((unsigned long)s->ftab != (unsigned long)((void *)0)) {
 5277|      0|                        {
 5278|      0|                            (*(strm->bzfree))(strm->opaque, (void *)s->ftab);
 5279|      0|                        }
 5280|      0|                    }
 5281|      0|                    if ((unsigned long)s != (unsigned long)((void *)0)) {
 5282|      0|                        {
 5283|      0|                            (*(strm->bzfree))(strm->opaque, (void *)s);
 5284|      0|                        }
 5285|      0|                    }
 5286|      0|                    return (-3);
 5287|      0|                }
 5288|      1|            }
 5289|      1|        }
 5290|      1|        {
 5291|      1|            s->blockNo = 0;
 5292|      1|            s->state = 2;
 5293|      1|            s->mode = 2;
 5294|      1|            s->combinedCRC = (UInt32)0;
 5295|      1|            s->blockSize100k = blockSize100k___0;
 5296|      1|            s->nblockMAX = 100000 * blockSize100k___0 - 19;
 5297|      1|            s->verbosity = verbosity___0;
 5298|      1|            s->workFactor = workFactor___0;
 5299|      1|            s->block = (UChar *)s->arr2;
 5300|      1|            s->mtfv = (UInt16 *)s->arr1;
 5301|      1|            s->zbits = (UChar *)((void *)0);
 5302|      1|            s->ptr = s->arr1;
 5303|      1|            strm->state = (void *)s;
 5304|      1|            strm->total_in_lo32 = 0U;
 5305|      1|            strm->total_in_hi32 = 0U;
 5306|      1|            strm->total_out_lo32 = 0U;
 5307|      1|            strm->total_out_hi32 = 0U;
 5308|      1|            init_RL(s);
 5309|      1|            prepare_new_block(s);
 5310|      1|        }
 5311|      1|        return (0);
 5312|      1|    }
 5313|      1|}
 5314|       |static void add_pair_to_block(EState *s)
 5315|      1|{
 5316|      1|    Int32 i;
 5317|      1|    UChar ch;
 5318|       |
 5319|      1|    {
 5320|      1|        ch = (UChar)s->state_in_ch;
 5321|      1|        i = 0;
 5322|      1|        {
 5323|      2|            while (1) {
 5324|      2|while_continue: /* CIL Label */
 5325|      2|                ;
 5326|      2|                if (!(i < s->state_in_len)) {
 5327|      1|                    goto while_break;
 5328|      1|                }
 5329|      1|                s->blockCRC = (s->blockCRC << 8) ^
 5330|      1|                              BZ2_crc32Table[(s->blockCRC >> 24) ^ (unsigned int)ch];
 5331|      1|                i++;
 5332|      1|            }
 5333|      1|while_break: /* CIL Label */
 5334|      1|            ;
 5335|      1|        }
 5336|      0|        s->inUse[s->state_in_ch] = (Bool)1;
 5337|      1|        {
 5338|      1|            if (s->state_in_len == 1) {
 5339|      1|                goto case_1;
 5340|      1|            }
 5341|      0|            if (s->state_in_len == 2) {
 5342|      0|                goto case_2;
 5343|      0|            }
 5344|      0|            if (s->state_in_len == 3) {
 5345|      0|                goto case_3;
 5346|      0|            }
 5347|      0|            goto switch_default;
 5348|      1|case_1: /* CIL Label */
 5349|      1|            *(s->block + s->nblock) = ch;
 5350|      1|            (s->nblock)++;
 5351|      1|            goto switch_break;
 5352|      0|case_2: /* CIL Label */
 5353|      0|            *(s->block + s->nblock) = ch;
 5354|      0|            (s->nblock)++;
 5355|      0|            *(s->block + s->nblock) = ch;
 5356|      0|            (s->nblock)++;
 5357|      0|            goto switch_break;
 5358|      0|case_3: /* CIL Label */
 5359|      0|            *(s->block + s->nblock) = ch;
 5360|      0|            (s->nblock)++;
 5361|      0|            *(s->block + s->nblock) = ch;
 5362|      0|            (s->nblock)++;
 5363|      0|            *(s->block + s->nblock) = ch;
 5364|      0|            (s->nblock)++;
 5365|      0|            goto switch_break;
 5366|      0|switch_default: /* CIL Label */
 5367|      0|            s->inUse[s->state_in_len - 4] = (Bool)1;
 5368|      0|            *(s->block + s->nblock) = ch;
 5369|      0|            (s->nblock)++;
 5370|      0|            *(s->block + s->nblock) = ch;
 5371|      0|            (s->nblock)++;
 5372|      0|            *(s->block + s->nblock) = ch;
 5373|      0|            (s->nblock)++;
 5374|      0|            *(s->block + s->nblock) = ch;
 5375|      0|            (s->nblock)++;
 5376|      0|            *(s->block + s->nblock) = (UChar)(s->state_in_len - 4);
 5377|      0|            (s->nblock)++;
 5378|      0|            goto switch_break;
 5379|      1|switch_break: /* CIL Label */
 5380|      1|            ;
 5381|      1|        }
 5382|      0|        return;
 5383|      0|    }
 5384|      0|}
 5385|       |static void flush_RL(EState *s)
 5386|      1|{
 5387|       |
 5388|      1|    {
 5389|      1|        if (s->state_in_ch < 256U) {
 5390|      1|            {
 5391|      1|                add_pair_to_block(s);
 5392|      1|            }
 5393|      1|        }
 5394|      1|        {
 5395|      1|            init_RL(s);
 5396|      1|        }
 5397|      1|        return;
 5398|      1|    }
 5399|      1|}
 5400|       |static Bool copy_input_until_stop(EState *s)
 5401|      2|{
 5402|      2|    Bool progress_in;
 5403|      2|    UInt32 zchh;
 5404|      2|    UChar ch;
 5405|      2|    UInt32 zchh___0;
 5406|      2|    UChar ch___0;
 5407|       |
 5408|      2|    {
 5409|      2|        progress_in = (Bool)0;
 5410|      2|        if (s->mode == 2) {
 5411|      1|            {
 5412|     28|                while (1) {
 5413|     28|while_continue: /* CIL Label */
 5414|     28|                    ;
 5415|     28|                    if (!(!(s->nblock >= s->nblockMAX))) {
 5416|      0|                        goto while_break;
 5417|      0|                    }
 5418|     28|                    if ((s->strm)->avail_in == 0U) {
 5419|      1|                        goto while_break;
 5420|      1|                    }
 5421|     27|                    progress_in = (Bool)1;
 5422|     27|                    zchh = (UInt32) * ((UChar *)(s->strm)->next_in);
 5423|     27|                    if (zchh != s->state_in_ch) {
 5424|     27|                        if (s->state_in_len == 1) {
 5425|     26|                            ch = (UChar)s->state_in_ch;
 5426|     26|                            s->blockCRC =
 5427|     26|                                (s->blockCRC << 8) ^
 5428|     26|                                BZ2_crc32Table[(s->blockCRC >> 24) ^ (unsigned int)ch];
 5429|     26|                            s->inUse[s->state_in_ch] = (Bool)1;
 5430|     26|                            *(s->block + s->nblock) = ch;
 5431|     26|                            (s->nblock)++;
 5432|     26|                            s->state_in_ch = zchh;
 5433|     26|                        }
 5434|      1|                        else {
 5435|      1|                            goto _L___0;
 5436|      1|                        }
 5437|     27|                    }
 5438|      0|                    else {
 5439|      1|_L___0:
 5440|      1|                        if (zchh != s->state_in_ch) {
 5441|      1|                            goto _L;
 5442|      1|                        }
 5443|      0|                        else {
 5444|      0|                            if (s->state_in_len == 255) {
 5445|      1|_L:
 5446|      1|                                if (s->state_in_ch < 256U) {
 5447|      0|                                    {
 5448|      0|                                        add_pair_to_block(s);
 5449|      0|                                    }
 5450|      0|                                }
 5451|      1|                                s->state_in_ch = zchh;
 5452|      1|                                s->state_in_len = 1;
 5453|      1|                            }
 5454|      0|                            else {
 5455|      0|                                (s->state_in_len)++;
 5456|      0|                            }
 5457|      0|                        }
 5458|      1|                    }
 5459|     27|                    ((s->strm)->next_in)++;
 5460|     27|                    ((s->strm)->avail_in)--;
 5461|     27|                    ((s->strm)->total_in_lo32)++;
 5462|     27|                    if ((s->strm)->total_in_lo32 == 0U) {
 5463|      0|                        ((s->strm)->total_in_hi32)++;
 5464|      0|                    }
 5465|     27|                }
 5466|      1|while_break: /* CIL Label */
 5467|      1|                ;
 5468|      1|            }
 5469|      1|        }
 5470|      1|        else {
 5471|      1|            {
 5472|      1|                while (1) {
 5473|      1|while_continue___0: /* CIL Label */
 5474|      1|                    ;
 5475|      1|                    if (!(!(s->nblock >= s->nblockMAX))) {
 5476|      0|                        goto while_break___0;
 5477|      0|                    }
 5478|      1|                    if ((s->strm)->avail_in == 0U) {
 5479|      1|                        goto while_break___0;
 5480|      1|                    }
 5481|      0|                    if (s->avail_in_expect == 0U) {
 5482|      0|                        goto while_break___0;
 5483|      0|                    }
 5484|      0|                    progress_in = (Bool)1;
 5485|      0|                    zchh___0 = (UInt32) * ((UChar *)(s->strm)->next_in);
 5486|      0|                    if (zchh___0 != s->state_in_ch) {
 5487|      0|                        if (s->state_in_len == 1) {
 5488|      0|                            ch___0 = (UChar)s->state_in_ch;
 5489|      0|                            s->blockCRC =
 5490|      0|                                (s->blockCRC << 8) ^
 5491|      0|                                BZ2_crc32Table[(s->blockCRC >> 24) ^ (unsigned int)ch___0];
 5492|      0|                            s->inUse[s->state_in_ch] = (Bool)1;
 5493|      0|                            *(s->block + s->nblock) = ch___0;
 5494|      0|                            (s->nblock)++;
 5495|      0|                            s->state_in_ch = zchh___0;
 5496|      0|                        }
 5497|      0|                        else {
 5498|      0|                            goto _L___2;
 5499|      0|                        }
 5500|      0|                    }
 5501|      0|                    else {
 5502|      0|_L___2:
 5503|      0|                        if (zchh___0 != s->state_in_ch) {
 5504|      0|                            goto _L___1;
 5505|      0|                        }
 5506|      0|                        else {
 5507|      0|                            if (s->state_in_len == 255) {
 5508|      0|_L___1:
 5509|      0|                                if (s->state_in_ch < 256U) {
 5510|      0|                                    {
 5511|      0|                                        add_pair_to_block(s);
 5512|      0|                                    }
 5513|      0|                                }
 5514|      0|                                s->state_in_ch = zchh___0;
 5515|      0|                                s->state_in_len = 1;
 5516|      0|                            }
 5517|      0|                            else {
 5518|      0|                                (s->state_in_len)++;
 5519|      0|                            }
 5520|      0|                        }
 5521|      0|                    }
 5522|      0|                    ((s->strm)->next_in)++;
 5523|      0|                    ((s->strm)->avail_in)--;
 5524|      0|                    ((s->strm)->total_in_lo32)++;
 5525|      0|                    if ((s->strm)->total_in_lo32 == 0U) {
 5526|      0|                        ((s->strm)->total_in_hi32)++;
 5527|      0|                    }
 5528|      0|                    (s->avail_in_expect)--;
 5529|      0|                }
 5530|      1|while_break___0: /* CIL Label */
 5531|      1|                ;
 5532|      1|            }
 5533|      1|        }
 5534|      2|        return (progress_in);
 5535|      2|    }
 5536|      2|}
 5537|       |static Bool copy_output_until_stop(EState *s)
 5538|      1|{
 5539|      1|    Bool progress_out;
 5540|       |
 5541|      1|    {
 5542|      1|        progress_out = (Bool)0;
 5543|      1|        {
 5544|     68|            while (1) {
 5545|     68|while_continue: /* CIL Label */
 5546|     68|                ;
 5547|     68|                if (!(!((s->strm)->avail_out == 0U))) {
 5548|      0|                    goto while_break;
 5549|      0|                }
 5550|     68|                if (s->state_out_pos >= s->numZ) {
 5551|      1|                    goto while_break;
 5552|      1|                }
 5553|     67|                progress_out = (Bool)1;
 5554|     67|                *((s->strm)->next_out) = (char)*(s->zbits + s->state_out_pos);
 5555|     67|                (s->state_out_pos)++;
 5556|     67|                ((s->strm)->avail_out)--;
 5557|     67|                ((s->strm)->next_out)++;
 5558|     67|                ((s->strm)->total_out_lo32)++;
 5559|     67|                if ((s->strm)->total_out_lo32 == 0U) {
 5560|      0|                    ((s->strm)->total_out_hi32)++;
 5561|      0|                }
 5562|     67|            }
 5563|      1|while_break: /* CIL Label */
 5564|      1|            ;
 5565|      1|        }
 5566|      0|        return (progress_out);
 5567|      1|    }
 5568|      1|}
 5569|       |static Bool handle_compress(bz_stream *strm)
 5570|      2|{
 5571|      2|    Bool progress_in;
 5572|      2|    Bool progress_out;
 5573|      2|    EState *s;
 5574|      2|    Bool tmp;
 5575|      2|    Bool tmp___0;
 5576|      2|    Bool tmp___1;
 5577|      2|    Bool tmp___2;
 5578|      2|    int tmp___3;
 5579|       |
 5580|      2|    {
 5581|      2|        progress_in = (Bool)0;
 5582|      2|        progress_out = (Bool)0;
 5583|      2|        s = (EState *)strm->state;
 5584|      2|        {
 5585|      3|            while (1) {
 5586|      3|while_continue: /* CIL Label */
 5587|      3|                ;
 5588|      3|                if (s->state == 1) {
 5589|      1|                    {
 5590|      1|                        tmp = copy_output_until_stop(s);
 5591|      1|                        progress_out = (Bool)((int)progress_out | (int)tmp);
 5592|      1|                    }
 5593|      1|                    if (s->state_out_pos < s->numZ) {
 5594|      0|                        goto while_break;
 5595|      0|                    }
 5596|      1|                    if (s->mode == 4) {
 5597|      1|                        if (s->avail_in_expect == 0U) {
 5598|      1|                            {
 5599|      1|                                tmp___0 = isempty_RL(s);
 5600|      1|                            }
 5601|      1|                            if (tmp___0) {
 5602|      1|                                goto while_break;
 5603|      1|                            }
 5604|      1|                        }
 5605|      1|                    }
 5606|      0|                    {
 5607|      0|                        prepare_new_block(s);
 5608|      0|                        s->state = 2;
 5609|      0|                    }
 5610|      0|                    if (s->mode == 3) {
 5611|      0|                        if (s->avail_in_expect == 0U) {
 5612|      0|                            {
 5613|      0|                                tmp___1 = isempty_RL(s);
 5614|      0|                            }
 5615|      0|                            if (tmp___1) {
 5616|      0|                                goto while_break;
 5617|      0|                            }
 5618|      0|                        }
 5619|      0|                    }
 5620|      0|                }
 5621|      2|                if (s->state == 2) {
 5622|      2|                    {
 5623|      2|                        tmp___2 = copy_input_until_stop(s);
 5624|      2|                        progress_in = (Bool)((int)progress_in | (int)tmp___2);
 5625|      2|                    }
 5626|      2|                    if (s->mode != 2) {
 5627|      1|                        if (s->avail_in_expect == 0U) {
 5628|      1|                            {
 5629|      1|                                flush_RL(s);
 5630|      1|                                BZ2_compressBlock(s, (Bool)(s->mode == 4));
 5631|      1|                                s->state = 1;
 5632|      1|                            }
 5633|      1|                        }
 5634|      0|                        else {
 5635|      0|                            goto _L;
 5636|      0|                        }
 5637|      1|                    }
 5638|      1|                    else {
 5639|      1|_L:
 5640|      1|                        if (s->nblock >= s->nblockMAX) {
 5641|      0|                            {
 5642|      0|                                BZ2_compressBlock(s, (Bool)0);
 5643|      0|                                s->state = 1;
 5644|      0|                            }
 5645|      0|                        }
 5646|      1|                        else {
 5647|      1|                            if ((s->strm)->avail_in == 0U) {
 5648|      1|                                goto while_break;
 5649|      1|                            }
 5650|      1|                        }
 5651|      1|                    }
 5652|      2|                }
 5653|      2|            }
 5654|      2|while_break: /* CIL Label */
 5655|      2|            ;
 5656|      2|        }
 5657|      2|        if (progress_in) {
 5658|      1|            tmp___3 = 1;
 5659|      1|        }
 5660|      1|        else {
 5661|      1|            if (progress_out) {
 5662|      1|                tmp___3 = 1;
 5663|      1|            }
 5664|      0|            else {
 5665|      0|                tmp___3 = 0;
 5666|      0|            }
 5667|      1|        }
 5668|      2|        return ((Bool)tmp___3);
 5669|      2|    }
 5670|      2|}
 5671|       |int BZ2_bzCompress(bz_stream *strm, int action)
 5672|      2|{
 5673|      2|    Bool progress;
 5674|      2|    EState *s;
 5675|      2|    int tmp;
 5676|      2|    Bool tmp___0;
 5677|      2|    Bool tmp___1;
 5678|       |
 5679|      2|    {
 5680|      2|        if ((unsigned long)strm == (unsigned long)((void *)0)) {
 5681|      0|            return (-2);
 5682|      0|        }
 5683|      2|        s = (EState *)strm->state;
 5684|      2|        if ((unsigned long)s == (unsigned long)((void *)0)) {
 5685|      0|            return (-2);
 5686|      0|        }
 5687|      2|        if ((unsigned long)s->strm != (unsigned long)strm) {
 5688|      0|            return (-2);
 5689|      0|        }
 5690|      3|preswitch : {
 5691|      3|            if (s->mode == 1) {
 5692|      0|                goto case_1;
 5693|      0|            }
 5694|      3|            if (s->mode == 2) {
 5695|      2|                goto case_2;
 5696|      2|            }
 5697|      1|            if (s->mode == 3) {
 5698|      0|                goto case_3;
 5699|      0|            }
 5700|      1|            if (s->mode == 4) {
 5701|      1|                goto case_4;
 5702|      1|            }
 5703|      0|            goto switch_break;
 5704|      0|case_1: /* CIL Label */
 5705|      0|            return (-1);
 5706|      2|case_2: /* CIL Label */
 5707|      2|            if (action == 0) {
 5708|      1|                {
 5709|      1|                    progress = handle_compress(strm);
 5710|      1|                }
 5711|      1|                if (progress) {
 5712|      1|                    tmp = 1;
 5713|      1|                }
 5714|      0|                else {
 5715|      0|                    tmp = -2;
 5716|      0|                }
 5717|      1|                return (tmp);
 5718|      1|            }
 5719|      1|            else {
 5720|      1|                if (action == 1) {
 5721|      0|                    s->avail_in_expect = strm->avail_in;
 5722|      0|                    s->mode = 3;
 5723|      0|                    goto preswitch;
 5724|      0|                }
 5725|      1|                else {
 5726|      1|                    if (action == 2) {
 5727|      1|                        s->avail_in_expect = strm->avail_in;
 5728|      1|                        s->mode = 4;
 5729|      1|                        goto preswitch;
 5730|      1|                    }
 5731|      0|                    else {
 5732|      0|                        return (-2);
 5733|      0|                    }
 5734|      1|                }
 5735|      1|            }
 5736|      0|case_3: /* CIL Label */
 5737|      0|            if (action != 1) {
 5738|      0|                return (-1);
 5739|      0|            }
 5740|      0|            if (s->avail_in_expect != (s->strm)->avail_in) {
 5741|      0|                return (-1);
 5742|      0|            }
 5743|      0|            {
 5744|      0|                progress = handle_compress(strm);
 5745|      0|            }
 5746|      0|            if (s->avail_in_expect > 0U) {
 5747|      0|                return (2);
 5748|      0|            }
 5749|      0|            else {
 5750|      0|                {
 5751|      0|                    tmp___0 = isempty_RL(s);
 5752|      0|                }
 5753|      0|                if (tmp___0) {
 5754|      0|                    if (s->state_out_pos < s->numZ) {
 5755|      0|                        return (2);
 5756|      0|                    }
 5757|      0|                }
 5758|      0|                else {
 5759|      0|                    return (2);
 5760|      0|                }
 5761|      0|            }
 5762|      0|            s->mode = 2;
 5763|      0|            return (1);
 5764|      1|case_4: /* CIL Label */
 5765|      1|            if (action != 2) {
 5766|      0|                return (-1);
 5767|      0|            }
 5768|      1|            if (s->avail_in_expect != (s->strm)->avail_in) {
 5769|      0|                return (-1);
 5770|      0|            }
 5771|      1|            {
 5772|      1|                progress = handle_compress(strm);
 5773|      1|            }
 5774|      1|            if (!progress) {
 5775|      0|                return (-1);
 5776|      0|            }
 5777|      1|            if (s->avail_in_expect > 0U) {
 5778|      0|                return (3);
 5779|      0|            }
 5780|      1|            else {
 5781|      1|                {
 5782|      1|                    tmp___1 = isempty_RL(s);
 5783|      1|                }
 5784|      1|                if (tmp___1) {
 5785|      1|                    if (s->state_out_pos < s->numZ) {
 5786|      0|                        return (3);
 5787|      0|                    }
 5788|      1|                }
 5789|      0|                else {
 5790|      0|                    return (3);
 5791|      0|                }
 5792|      1|            }
 5793|      1|            s->mode = 1;
 5794|      1|            return (4);
 5795|      0|switch_break: /* CIL Label */
 5796|      0|            ;
 5797|      0|        }
 5798|      0|        return (0);
 5799|      1|    }
 5800|      1|}
 5801|       |int BZ2_bzCompressEnd(bz_stream *strm)
 5802|      1|{
 5803|      1|    EState *s;
 5804|       |
 5805|      1|    {
 5806|      1|        if ((unsigned long)strm == (unsigned long)((void *)0)) {
 5807|      0|            return (-2);
 5808|      0|        }
 5809|      1|        s = (EState *)strm->state;
 5810|      1|        if ((unsigned long)s == (unsigned long)((void *)0)) {
 5811|      0|            return (-2);
 5812|      0|        }
 5813|      1|        if ((unsigned long)s->strm != (unsigned long)strm) {
 5814|      0|            return (-2);
 5815|      0|        }
 5816|      1|        if ((unsigned long)s->arr1 != (unsigned long)((void *)0)) {
 5817|      1|            {
 5818|      1|                (*(strm->bzfree))(strm->opaque, (void *)s->arr1);
 5819|      1|            }
 5820|      1|        }
 5821|      1|        if ((unsigned long)s->arr2 != (unsigned long)((void *)0)) {
 5822|      1|            {
 5823|      1|                (*(strm->bzfree))(strm->opaque, (void *)s->arr2);
 5824|      1|            }
 5825|      1|        }
 5826|      1|        if ((unsigned long)s->ftab != (unsigned long)((void *)0)) {
 5827|      1|            {
 5828|      1|                (*(strm->bzfree))(strm->opaque, (void *)s->ftab);
 5829|      1|            }
 5830|      1|        }
 5831|      1|        {
 5832|      1|            (*(strm->bzfree))(strm->opaque, strm->state);
 5833|      1|            strm->state = (void *)0;
 5834|      1|        }
 5835|      1|        return (0);
 5836|      1|    }
 5837|      1|}
 5838|       |int BZ2_bzDecompressInit(bz_stream *strm, int verbosity___0, int small)
 5839|      5|{
 5840|      5|    DState *s;
 5841|      5|    int tmp;
 5842|       |
 5843|      5|    {
 5844|      5|        {
 5845|      5|            tmp = bz_config_ok();
 5846|      5|        }
 5847|      5|        if (!tmp) {
 5848|      0|            return (-9);
 5849|      0|        }
 5850|      5|        if ((unsigned long)strm == (unsigned long)((void *)0)) {
 5851|      0|            return (-2);
 5852|      0|        }
 5853|      5|        if (small != 0) {
 5854|      0|            if (small != 1) {
 5855|      0|                return (-2);
 5856|      0|            }
 5857|      0|        }
 5858|      5|        if (verbosity___0 < 0) {
 5859|      0|            return (-2);
 5860|      0|        }
 5861|      5|        else {
 5862|      5|            if (verbosity___0 > 4) {
 5863|      0|                return (-2);
 5864|      0|            }
 5865|      5|        }
 5866|      5|        if ((unsigned long)strm->bzalloc == (unsigned long)((void *)0)) {
 5867|      5|            strm->bzalloc = &default_bzalloc;
 5868|      5|        }
 5869|      5|        if ((unsigned long)strm->bzfree == (unsigned long)((void *)0)) {
 5870|      5|            strm->bzfree = &default_bzfree;
 5871|      5|        }
 5872|      5|        {
 5873|      5|            s = (DState *)(*(strm->bzalloc))(strm->opaque, (int)sizeof(DState), 1);
 5874|      5|        }
 5875|      5|        if ((unsigned long)s == (unsigned long)((void *)0)) {
 5876|      0|            return (-3);
 5877|      0|        }
 5878|      5|        s->strm = strm;
 5879|      5|        strm->state = (void *)s;
 5880|      5|        s->state = 10;
 5881|      5|        s->bsLive = 0;
 5882|      5|        s->bsBuff = (UInt32)0;
 5883|      5|        s->calculatedCombinedCRC = (UInt32)0;
 5884|      5|        strm->total_in_lo32 = 0U;
 5885|      5|        strm->total_in_hi32 = 0U;
 5886|      5|        strm->total_out_lo32 = 0U;
 5887|      5|        strm->total_out_hi32 = 0U;
 5888|      5|        s->smallDecompress = (Bool)small;
 5889|      5|        s->ll4 = (UChar *)((void *)0);
 5890|      5|        s->ll16 = (UInt16 *)((void *)0);
 5891|      5|        s->tt = (UInt32 *)((void *)0);
 5892|      5|        s->currBlockNo = 0;
 5893|      5|        s->verbosity = verbosity___0;
 5894|      5|        return (0);
 5895|      5|    }
 5896|      5|}
 5897|       |static Bool unRLE_obuf_to_output_FAST(DState *s)
 5898|    306|{
 5899|    306|    UChar k1;
 5900|    306|    int tmp;
 5901|    306|    int tmp___0;
 5902|    306|    int tmp___1;
 5903|    306|    int tmp___2;
 5904|    306|    int tmp___3;
 5905|    306|    UInt32 c_calculatedBlockCRC;
 5906|    306|    UChar c_state_out_ch;
 5907|    306|    Int32 c_state_out_len;
 5908|    306|    Int32 c_nblock_used;
 5909|    306|    Int32 c_k0;
 5910|    306|    UInt32 *c_tt;
 5911|    306|    UInt32 c_tPos;
 5912|    306|    char *cs_next_out;
 5913|    306|    unsigned int cs_avail_out;
 5914|    306|    Int32 ro_blockSize100k;
 5915|    306|    UInt32 avail_out_INIT;
 5916|    306|    Int32 s_save_nblockPP;
 5917|    306|    unsigned int total_out_lo32_old;
 5918|       |
 5919|    306|    {
 5920|    306|        if (s->blockRandomised) {
 5921|      0|            {
 5922|      0|                while (1) {
 5923|      0|while_continue: /* CIL Label */
 5924|      0|                    ;
 5925|      0|                    {
 5926|      0|                        while (1) {
 5927|      0|while_continue___0: /* CIL Label */
 5928|      0|                            ;
 5929|      0|                            if ((s->strm)->avail_out == 0U) {
 5930|      0|                                return ((Bool)0);
 5931|      0|                            }
 5932|      0|                            if (s->state_out_len == 0) {
 5933|      0|                                goto while_break___0;
 5934|      0|                            }
 5935|      0|                            *((UChar *)(s->strm)->next_out) = s->state_out_ch;
 5936|      0|                            s->calculatedBlockCRC =
 5937|      0|                                (s->calculatedBlockCRC << 8) ^
 5938|      0|                                BZ2_crc32Table[(s->calculatedBlockCRC >> 24) ^
 5939|      0|                                                                             (unsigned int)s->state_out_ch];
 5940|      0|                            (s->state_out_len)--;
 5941|      0|                            ((s->strm)->next_out)++;
 5942|      0|                            ((s->strm)->avail_out)--;
 5943|      0|                            ((s->strm)->total_out_lo32)++;
 5944|      0|                            if ((s->strm)->total_out_lo32 == 0U) {
 5945|      0|                                ((s->strm)->total_out_hi32)++;
 5946|      0|                            }
 5947|      0|                        }
 5948|      0|while_break___0: /* CIL Label */
 5949|      0|                        ;
 5950|      0|                    }
 5951|      0|                    if (s->nblock_used == s->save_nblock + 1) {
 5952|      0|                        return ((Bool)0);
 5953|      0|                    }
 5954|      0|                    if (s->nblock_used > s->save_nblock + 1) {
 5955|      0|                        return ((Bool)1);
 5956|      0|                    }
 5957|      0|                    s->state_out_len = 1;
 5958|      0|                    s->state_out_ch = (UChar)s->k0;
 5959|      0|                    if (s->tPos >= 100000U * (UInt32)s->blockSize100k) {
 5960|      0|                        return ((Bool)1);
 5961|      0|                    }
 5962|      0|                    s->tPos = *(s->tt + s->tPos);
 5963|      0|                    k1 = (UChar)(s->tPos & 255U);
 5964|      0|                    s->tPos >>= 8;
 5965|      0|                    if (s->rNToGo == 0) {
 5966|      0|                        s->rNToGo = BZ2_rNums[s->rTPos];
 5967|      0|                        (s->rTPos)++;
 5968|      0|                        if (s->rTPos == 512) {
 5969|      0|                            s->rTPos = 0;
 5970|      0|                        }
 5971|      0|                    }
 5972|      0|                    (s->rNToGo)--;
 5973|      0|                    if (s->rNToGo == 1) {
 5974|      0|                        tmp = 1;
 5975|      0|                    }
 5976|      0|                    else {
 5977|      0|                        tmp = 0;
 5978|      0|                    }
 5979|      0|                    k1 = (UChar)((int)k1 ^ tmp);
 5980|      0|                    (s->nblock_used)++;
 5981|      0|                    if (s->nblock_used == s->save_nblock + 1) {
 5982|      0|                        goto while_continue;
 5983|      0|                    }
 5984|      0|                    if ((int)k1 != s->k0) {
 5985|      0|                        s->k0 = (Int32)k1;
 5986|      0|                        goto while_continue;
 5987|      0|                    }
 5988|      0|                    s->state_out_len = 2;
 5989|      0|                    if (s->tPos >= 100000U * (UInt32)s->blockSize100k) {
 5990|      0|                        return ((Bool)1);
 5991|      0|                    }
 5992|      0|                    s->tPos = *(s->tt + s->tPos);
 5993|      0|                    k1 = (UChar)(s->tPos & 255U);
 5994|      0|                    s->tPos >>= 8;
 5995|      0|                    if (s->rNToGo == 0) {
 5996|      0|                        s->rNToGo = BZ2_rNums[s->rTPos];
 5997|      0|                        (s->rTPos)++;
 5998|      0|                        if (s->rTPos == 512) {
 5999|      0|                            s->rTPos = 0;
 6000|      0|                        }
 6001|      0|                    }
 6002|      0|                    (s->rNToGo)--;
 6003|      0|                    if (s->rNToGo == 1) {
 6004|      0|                        tmp___0 = 1;
 6005|      0|                    }
 6006|      0|                    else {
 6007|      0|                        tmp___0 = 0;
 6008|      0|                    }
 6009|      0|                    k1 = (UChar)((int)k1 ^ tmp___0);
 6010|      0|                    (s->nblock_used)++;
 6011|      0|                    if (s->nblock_used == s->save_nblock + 1) {
 6012|      0|                        goto while_continue;
 6013|      0|                    }
 6014|      0|                    if ((int)k1 != s->k0) {
 6015|      0|                        s->k0 = (Int32)k1;
 6016|      0|                        goto while_continue;
 6017|      0|                    }
 6018|      0|                    s->state_out_len = 3;
 6019|      0|                    if (s->tPos >= 100000U * (UInt32)s->blockSize100k) {
 6020|      0|                        return ((Bool)1);
 6021|      0|                    }
 6022|      0|                    s->tPos = *(s->tt + s->tPos);
 6023|      0|                    k1 = (UChar)(s->tPos & 255U);
 6024|      0|                    s->tPos >>= 8;
 6025|      0|                    if (s->rNToGo == 0) {
 6026|      0|                        s->rNToGo = BZ2_rNums[s->rTPos];
 6027|      0|                        (s->rTPos)++;
 6028|      0|                        if (s->rTPos == 512) {
 6029|      0|                            s->rTPos = 0;
 6030|      0|                        }
 6031|      0|                    }
 6032|      0|                    (s->rNToGo)--;
 6033|      0|                    if (s->rNToGo == 1) {
 6034|      0|                        tmp___1 = 1;
 6035|      0|                    }
 6036|      0|                    else {
 6037|      0|                        tmp___1 = 0;
 6038|      0|                    }
 6039|      0|                    k1 = (UChar)((int)k1 ^ tmp___1);
 6040|      0|                    (s->nblock_used)++;
 6041|      0|                    if (s->nblock_used == s->save_nblock + 1) {
 6042|      0|                        goto while_continue;
 6043|      0|                    }
 6044|      0|                    if ((int)k1 != s->k0) {
 6045|      0|                        s->k0 = (Int32)k1;
 6046|      0|                        goto while_continue;
 6047|      0|                    }
 6048|      0|                    if (s->tPos >= 100000U * (UInt32)s->blockSize100k) {
 6049|      0|                        return ((Bool)1);
 6050|      0|                    }
 6051|      0|                    s->tPos = *(s->tt + s->tPos);
 6052|      0|                    k1 = (UChar)(s->tPos & 255U);
 6053|      0|                    s->tPos >>= 8;
 6054|      0|                    if (s->rNToGo == 0) {
 6055|      0|                        s->rNToGo = BZ2_rNums[s->rTPos];
 6056|      0|                        (s->rTPos)++;
 6057|      0|                        if (s->rTPos == 512) {
 6058|      0|                            s->rTPos = 0;
 6059|      0|                        }
 6060|      0|                    }
 6061|      0|                    (s->rNToGo)--;
 6062|      0|                    if (s->rNToGo == 1) {
 6063|      0|                        tmp___2 = 1;
 6064|      0|                    }
 6065|      0|                    else {
 6066|      0|                        tmp___2 = 0;
 6067|      0|                    }
 6068|      0|                    k1 = (UChar)((int)k1 ^ tmp___2);
 6069|      0|                    (s->nblock_used)++;
 6070|      0|                    s->state_out_len = (Int32)k1 + 4;
 6071|      0|                    if (s->tPos >= 100000U * (UInt32)s->blockSize100k) {
 6072|      0|                        return ((Bool)1);
 6073|      0|                    }
 6074|      0|                    s->tPos = *(s->tt + s->tPos);
 6075|      0|                    s->k0 = (Int32)((UChar)(s->tPos & 255U));
 6076|      0|                    s->tPos >>= 8;
 6077|      0|                    if (s->rNToGo == 0) {
 6078|      0|                        s->rNToGo = BZ2_rNums[s->rTPos];
 6079|      0|                        (s->rTPos)++;
 6080|      0|                        if (s->rTPos == 512) {
 6081|      0|                            s->rTPos = 0;
 6082|      0|                        }
 6083|      0|                    }
 6084|      0|                    (s->rNToGo)--;
 6085|      0|                    if (s->rNToGo == 1) {
 6086|      0|                        tmp___3 = 1;
 6087|      0|                    }
 6088|      0|                    else {
 6089|      0|                        tmp___3 = 0;
 6090|      0|                    }
 6091|      0|                    s->k0 ^= tmp___3;
 6092|      0|                    (s->nblock_used)++;
 6093|      0|                }
 6094|      0|while_break: /* CIL Label */
 6095|      0|                ;
 6096|      0|            }
 6097|      0|        }
 6098|    306|        else {
 6099|    306|            c_calculatedBlockCRC = s->calculatedBlockCRC;
 6100|    306|            c_state_out_ch = s->state_out_ch;
 6101|    306|            c_state_out_len = s->state_out_len;
 6102|    306|            c_nblock_used = s->nblock_used;
 6103|    306|            c_k0 = s->k0;
 6104|    306|            c_tt = s->tt;
 6105|    306|            c_tPos = s->tPos;
 6106|    306|            cs_next_out = (s->strm)->next_out;
 6107|    306|            cs_avail_out = (s->strm)->avail_out;
 6108|    306|            ro_blockSize100k = s->blockSize100k;
 6109|    306|            avail_out_INIT = cs_avail_out;
 6110|    306|            s_save_nblockPP = s->save_nblock + 1;
 6111|    306|            {
 6112|  12.3k|                while (1) {
 6113|  25.7k|while_continue___1: /* CIL Label */
 6114|  25.7k|                    ;
 6115|  25.7k|                    if (c_state_out_len > 0) {
 6116|  25.7k|                        {
 6117|   259k|                            while (1) {
 6118|   259k|while_continue___2: /* CIL Label */
 6119|   259k|                                ;
 6120|   259k|                                if (cs_avail_out == 0U) {
 6121|     57|                                    goto return_notr;
 6122|     57|                                }
 6123|   259k|                                if (c_state_out_len == 1) {
 6124|  25.7k|                                    goto while_break___2;
 6125|  25.7k|                                }
 6126|   233k|                                *((UChar *)cs_next_out) = c_state_out_ch;
 6127|   233k|                                c_calculatedBlockCRC =
 6128|   233k|                                    (c_calculatedBlockCRC << 8) ^
 6129|   233k|                                    BZ2_crc32Table[(c_calculatedBlockCRC >> 24) ^
 6130|   233k|                                                                                (unsigned int)c_state_out_ch];
 6131|   233k|                                c_state_out_len--;
 6132|   233k|                                cs_next_out++;
 6133|   233k|                                cs_avail_out--;
 6134|   233k|                            }
 6135|  25.7k|while_break___2: /* CIL Label */
 6136|  25.7k|                            ;
 6137|  25.7k|                        }
 6138|  1.28M|s_state_out_len_eq_one:
 6139|  1.28M|                        if (cs_avail_out == 0U) {
 6140|    245|                            c_state_out_len = 1;
 6141|    245|                            goto return_notr;
 6142|    245|                        }
 6143|  1.28M|                        *((UChar *)cs_next_out) = c_state_out_ch;
 6144|  1.28M|                        c_calculatedBlockCRC = (c_calculatedBlockCRC << 8) ^
 6145|  1.28M|                                               BZ2_crc32Table[(c_calculatedBlockCRC >> 24) ^
 6146|  1.28M|                                                                                           (unsigned int)c_state_out_ch];
 6147|  1.28M|                        cs_next_out++;
 6148|  1.28M|                        cs_avail_out--;
 6149|  1.28M|                    }
 6150|  1.28M|                    if (c_nblock_used > s_save_nblockPP) {
 6151|      0|                        return ((Bool)1);
 6152|      0|                    }
 6153|  1.28M|                    if (c_nblock_used == s_save_nblockPP) {
 6154|      4|                        c_state_out_len = 0;
 6155|      4|                        goto return_notr;
 6156|      4|                    }
 6157|  1.28M|                    c_state_out_ch = (UChar)c_k0;
 6158|  1.28M|                    if (c_tPos >= 100000U * (UInt32)ro_blockSize100k) {
 6159|      0|                        return ((Bool)1);
 6160|      0|                    }
 6161|  1.28M|                    c_tPos = *(c_tt + c_tPos);
 6162|  1.28M|                    k1 = (UChar)(c_tPos & 255U);
 6163|  1.28M|                    c_tPos >>= 8;
 6164|  1.28M|                    c_nblock_used++;
 6165|  1.28M|                    if ((int)k1 != c_k0) {
 6166|  1.25M|                        c_k0 = (Int32)k1;
 6167|  1.25M|                        goto s_state_out_len_eq_one;
 6168|  1.25M|                    }
 6169|  25.4k|                    if (c_nblock_used == s_save_nblockPP) {
 6170|      0|                        goto s_state_out_len_eq_one;
 6171|      0|                    }
 6172|  25.4k|                    c_state_out_len = 2;
 6173|  25.4k|                    if (c_tPos >= 100000U * (UInt32)ro_blockSize100k) {
 6174|      0|                        return ((Bool)1);
 6175|      0|                    }
 6176|  25.4k|                    c_tPos = *(c_tt + c_tPos);
 6177|  25.4k|                    k1 = (UChar)(c_tPos & 255U);
 6178|  25.4k|                    c_tPos >>= 8;
 6179|  25.4k|                    c_nblock_used++;
 6180|  25.4k|                    if (c_nblock_used == s_save_nblockPP) {
 6181|      0|                        goto while_continue___1;
 6182|      0|                    }
 6183|  25.4k|                    if ((int)k1 != c_k0) {
 6184|  11.7k|                        c_k0 = (Int32)k1;
 6185|  11.7k|                        goto while_continue___1;
 6186|  11.7k|                    }
 6187|  13.7k|                    c_state_out_len = 3;
 6188|  13.7k|                    if (c_tPos >= 100000U * (UInt32)ro_blockSize100k) {
 6189|      0|                        return ((Bool)1);
 6190|      0|                    }
 6191|  13.7k|                    c_tPos = *(c_tt + c_tPos);
 6192|  13.7k|                    k1 = (UChar)(c_tPos & 255U);
 6193|  13.7k|                    c_tPos >>= 8;
 6194|  13.7k|                    c_nblock_used++;
 6195|  13.7k|                    if (c_nblock_used == s_save_nblockPP) {
 6196|      0|                        goto while_continue___1;
 6197|      0|                    }
 6198|  13.7k|                    if ((int)k1 != c_k0) {
 6199|  1.68k|                        c_k0 = (Int32)k1;
 6200|  1.68k|                        goto while_continue___1;
 6201|  1.68k|                    }
 6202|  12.0k|                    if (c_tPos >= 100000U * (UInt32)ro_blockSize100k) {
 6203|      0|                        return ((Bool)1);
 6204|      0|                    }
 6205|  12.0k|                    c_tPos = *(c_tt + c_tPos);
 6206|  12.0k|                    k1 = (UChar)(c_tPos & 255U);
 6207|  12.0k|                    c_tPos >>= 8;
 6208|  12.0k|                    c_nblock_used++;
 6209|  12.0k|                    c_state_out_len = (Int32)k1 + 4;
 6210|  12.0k|                    if (c_tPos >= 100000U * (UInt32)ro_blockSize100k) {
 6211|      0|                        return ((Bool)1);
 6212|      0|                    }
 6213|  12.0k|                    c_tPos = *(c_tt + c_tPos);
 6214|  12.0k|                    c_k0 = (Int32)((UChar)(c_tPos & 255U));
 6215|  12.0k|                    c_tPos >>= 8;
 6216|  12.0k|                    c_nblock_used++;
 6217|  12.0k|                }
 6218|      0|while_break___1: /* CIL Label */
 6219|      0|                ;
 6220|      0|            }
 6221|    306|return_notr:
 6222|    306|            total_out_lo32_old = (s->strm)->total_out_lo32;
 6223|    306|            (s->strm)->total_out_lo32 += avail_out_INIT - cs_avail_out;
 6224|    306|            if ((s->strm)->total_out_lo32 < total_out_lo32_old) {
 6225|      0|                ((s->strm)->total_out_hi32)++;
 6226|      0|            }
 6227|    306|            s->calculatedBlockCRC = c_calculatedBlockCRC;
 6228|    306|            s->state_out_ch = c_state_out_ch;
 6229|    306|            s->state_out_len = c_state_out_len;
 6230|    306|            s->nblock_used = c_nblock_used;
 6231|    306|            s->k0 = c_k0;
 6232|    306|            s->tt = c_tt;
 6233|    306|            s->tPos = c_tPos;
 6234|    306|            (s->strm)->next_out = cs_next_out;
 6235|    306|            (s->strm)->avail_out = cs_avail_out;
 6236|    306|        }
 6237|    306|        return ((Bool)0);
 6238|    306|    }
 6239|    306|}
 6240|       |Int32 BZ2_indexIntoF(Int32 indx, Int32 *cftab)
 6241|      0|{
 6242|      0|    Int32 nb;
 6243|      0|    Int32 na;
 6244|      0|    Int32 mid;
 6245|       |
 6246|      0|    {
 6247|      0|        nb = 0;
 6248|      0|        na = 256;
 6249|      0|        {
 6250|      0|            while (1) {
 6251|      0|while_continue: /* CIL Label */
 6252|      0|                ;
 6253|      0|                mid = (nb + na) >> 1;
 6254|      0|                if (indx >= *(cftab + mid)) {
 6255|      0|                    nb = mid;
 6256|      0|                }
 6257|      0|                else {
 6258|      0|                    na = mid;
 6259|      0|                }
 6260|      0|                if (!(na - nb != 1)) {
 6261|      0|                    goto while_break;
 6262|      0|                }
 6263|      0|            }
 6264|      0|while_break: /* CIL Label */
 6265|      0|            ;
 6266|      0|        }
 6267|      0|        return (nb);
 6268|      0|    }
 6269|      0|}
 6270|       |static Bool unRLE_obuf_to_output_SMALL(DState *s)
 6271|      0|{
 6272|      0|    UChar k1;
 6273|      0|    int tmp;
 6274|      0|    int tmp___0;
 6275|      0|    int tmp___1;
 6276|      0|    int tmp___2;
 6277|      0|    int tmp___3;
 6278|       |
 6279|      0|    {
 6280|      0|        if (s->blockRandomised) {
 6281|      0|            {
 6282|      0|                while (1) {
 6283|      0|while_continue: /* CIL Label */
 6284|      0|                    ;
 6285|      0|                    {
 6286|      0|                        while (1) {
 6287|      0|while_continue___0: /* CIL Label */
 6288|      0|                            ;
 6289|      0|                            if ((s->strm)->avail_out == 0U) {
 6290|      0|                                return ((Bool)0);
 6291|      0|                            }
 6292|      0|                            if (s->state_out_len == 0) {
 6293|      0|                                goto while_break___0;
 6294|      0|                            }
 6295|      0|                            *((UChar *)(s->strm)->next_out) = s->state_out_ch;
 6296|      0|                            s->calculatedBlockCRC =
 6297|      0|                                (s->calculatedBlockCRC << 8) ^
 6298|      0|                                BZ2_crc32Table[(s->calculatedBlockCRC >> 24) ^
 6299|      0|                                                                             (unsigned int)s->state_out_ch];
 6300|      0|                            (s->state_out_len)--;
 6301|      0|                            ((s->strm)->next_out)++;
 6302|      0|                            ((s->strm)->avail_out)--;
 6303|      0|                            ((s->strm)->total_out_lo32)++;
 6304|      0|                            if ((s->strm)->total_out_lo32 == 0U) {
 6305|      0|                                ((s->strm)->total_out_hi32)++;
 6306|      0|                            }
 6307|      0|                        }
 6308|      0|while_break___0: /* CIL Label */
 6309|      0|                        ;
 6310|      0|                    }
 6311|      0|                    if (s->nblock_used == s->save_nblock + 1) {
 6312|      0|                        return ((Bool)0);
 6313|      0|                    }
 6314|      0|                    if (s->nblock_used > s->save_nblock + 1) {
 6315|      0|                        return ((Bool)1);
 6316|      0|                    }
 6317|      0|                    s->state_out_len = 1;
 6318|      0|                    s->state_out_ch = (UChar)s->k0;
 6319|      0|                    if (s->tPos >= 100000U * (UInt32)s->blockSize100k) {
 6320|      0|                        return ((Bool)1);
 6321|      0|                    }
 6322|      0|                    {
 6323|      0|                        k1 = (UChar)BZ2_indexIntoF((Int32)s->tPos, s->cftab);
 6324|      0|                        s->tPos = (UInt32) * (s->ll16 + s->tPos) |
 6325|      0|                                  ((((UInt32) * (s->ll4 + (s->tPos >> 1)) >>
 6326|      0|                                     ((s->tPos << 2) & 4U)) &
 6327|      0|                                    15U)
 6328|      0|                                   << 16);
 6329|      0|                    }
 6330|      0|                    if (s->rNToGo == 0) {
 6331|      0|                        s->rNToGo = BZ2_rNums[s->rTPos];
 6332|      0|                        (s->rTPos)++;
 6333|      0|                        if (s->rTPos == 512) {
 6334|      0|                            s->rTPos = 0;
 6335|      0|                        }
 6336|      0|                    }
 6337|      0|                    (s->rNToGo)--;
 6338|      0|                    if (s->rNToGo == 1) {
 6339|      0|                        tmp = 1;
 6340|      0|                    }
 6341|      0|                    else {
 6342|      0|                        tmp = 0;
 6343|      0|                    }
 6344|      0|                    k1 = (UChar)((int)k1 ^ tmp);
 6345|      0|                    (s->nblock_used)++;
 6346|      0|                    if (s->nblock_used == s->save_nblock + 1) {
 6347|      0|                        goto while_continue;
 6348|      0|                    }
 6349|      0|                    if ((int)k1 != s->k0) {
 6350|      0|                        s->k0 = (Int32)k1;
 6351|      0|                        goto while_continue;
 6352|      0|                    }
 6353|      0|                    s->state_out_len = 2;
 6354|      0|                    if (s->tPos >= 100000U * (UInt32)s->blockSize100k) {
 6355|      0|                        return ((Bool)1);
 6356|      0|                    }
 6357|      0|                    {
 6358|      0|                        k1 = (UChar)BZ2_indexIntoF((Int32)s->tPos, s->cftab);
 6359|      0|                        s->tPos = (UInt32) * (s->ll16 + s->tPos) |
 6360|      0|                                  ((((UInt32) * (s->ll4 + (s->tPos >> 1)) >>
 6361|      0|                                     ((s->tPos << 2) & 4U)) &
 6362|      0|                                    15U)
 6363|      0|                                   << 16);
 6364|      0|                    }
 6365|      0|                    if (s->rNToGo == 0) {
 6366|      0|                        s->rNToGo = BZ2_rNums[s->rTPos];
 6367|      0|                        (s->rTPos)++;
 6368|      0|                        if (s->rTPos == 512) {
 6369|      0|                            s->rTPos = 0;
 6370|      0|                        }
 6371|      0|                    }
 6372|      0|                    (s->rNToGo)--;
 6373|      0|                    if (s->rNToGo == 1) {
 6374|      0|                        tmp___0 = 1;
 6375|      0|                    }
 6376|      0|                    else {
 6377|      0|                        tmp___0 = 0;
 6378|      0|                    }
 6379|      0|                    k1 = (UChar)((int)k1 ^ tmp___0);
 6380|      0|                    (s->nblock_used)++;
 6381|      0|                    if (s->nblock_used == s->save_nblock + 1) {
 6382|      0|                        goto while_continue;
 6383|      0|                    }
 6384|      0|                    if ((int)k1 != s->k0) {
 6385|      0|                        s->k0 = (Int32)k1;
 6386|      0|                        goto while_continue;
 6387|      0|                    }
 6388|      0|                    s->state_out_len = 3;
 6389|      0|                    if (s->tPos >= 100000U * (UInt32)s->blockSize100k) {
 6390|      0|                        return ((Bool)1);
 6391|      0|                    }
 6392|      0|                    {
 6393|      0|                        k1 = (UChar)BZ2_indexIntoF((Int32)s->tPos, s->cftab);
 6394|      0|                        s->tPos = (UInt32) * (s->ll16 + s->tPos) |
 6395|      0|                                  ((((UInt32) * (s->ll4 + (s->tPos >> 1)) >>
 6396|      0|                                     ((s->tPos << 2) & 4U)) &
 6397|      0|                                    15U)
 6398|      0|                                   << 16);
 6399|      0|                    }
 6400|      0|                    if (s->rNToGo == 0) {
 6401|      0|                        s->rNToGo = BZ2_rNums[s->rTPos];
 6402|      0|                        (s->rTPos)++;
 6403|      0|                        if (s->rTPos == 512) {
 6404|      0|                            s->rTPos = 0;
 6405|      0|                        }
 6406|      0|                    }
 6407|      0|                    (s->rNToGo)--;
 6408|      0|                    if (s->rNToGo == 1) {
 6409|      0|                        tmp___1 = 1;
 6410|      0|                    }
 6411|      0|                    else {
 6412|      0|                        tmp___1 = 0;
 6413|      0|                    }
 6414|      0|                    k1 = (UChar)((int)k1 ^ tmp___1);
 6415|      0|                    (s->nblock_used)++;
 6416|      0|                    if (s->nblock_used == s->save_nblock + 1) {
 6417|      0|                        goto while_continue;
 6418|      0|                    }
 6419|      0|                    if ((int)k1 != s->k0) {
 6420|      0|                        s->k0 = (Int32)k1;
 6421|      0|                        goto while_continue;
 6422|      0|                    }
 6423|      0|                    if (s->tPos >= 100000U * (UInt32)s->blockSize100k) {
 6424|      0|                        return ((Bool)1);
 6425|      0|                    }
 6426|      0|                    {
 6427|      0|                        k1 = (UChar)BZ2_indexIntoF((Int32)s->tPos, s->cftab);
 6428|      0|                        s->tPos = (UInt32) * (s->ll16 + s->tPos) |
 6429|      0|                                  ((((UInt32) * (s->ll4 + (s->tPos >> 1)) >>
 6430|      0|                                     ((s->tPos << 2) & 4U)) &
 6431|      0|                                    15U)
 6432|      0|                                   << 16);
 6433|      0|                    }
 6434|      0|                    if (s->rNToGo == 0) {
 6435|      0|                        s->rNToGo = BZ2_rNums[s->rTPos];
 6436|      0|                        (s->rTPos)++;
 6437|      0|                        if (s->rTPos == 512) {
 6438|      0|                            s->rTPos = 0;
 6439|      0|                        }
 6440|      0|                    }
 6441|      0|                    (s->rNToGo)--;
 6442|      0|                    if (s->rNToGo == 1) {
 6443|      0|                        tmp___2 = 1;
 6444|      0|                    }
 6445|      0|                    else {
 6446|      0|                        tmp___2 = 0;
 6447|      0|                    }
 6448|      0|                    k1 = (UChar)((int)k1 ^ tmp___2);
 6449|      0|                    (s->nblock_used)++;
 6450|      0|                    s->state_out_len = (Int32)k1 + 4;
 6451|      0|                    if (s->tPos >= 100000U * (UInt32)s->blockSize100k) {
 6452|      0|                        return ((Bool)1);
 6453|      0|                    }
 6454|      0|                    {
 6455|      0|                        s->k0 = BZ2_indexIntoF((Int32)s->tPos, s->cftab);
 6456|      0|                        s->tPos = (UInt32) * (s->ll16 + s->tPos) |
 6457|      0|                                  ((((UInt32) * (s->ll4 + (s->tPos >> 1)) >>
 6458|      0|                                     ((s->tPos << 2) & 4U)) &
 6459|      0|                                    15U)
 6460|      0|                                   << 16);
 6461|      0|                    }
 6462|      0|                    if (s->rNToGo == 0) {
 6463|      0|                        s->rNToGo = BZ2_rNums[s->rTPos];
 6464|      0|                        (s->rTPos)++;
 6465|      0|                        if (s->rTPos == 512) {
 6466|      0|                            s->rTPos = 0;
 6467|      0|                        }
 6468|      0|                    }
 6469|      0|                    (s->rNToGo)--;
 6470|      0|                    if (s->rNToGo == 1) {
 6471|      0|                        tmp___3 = 1;
 6472|      0|                    }
 6473|      0|                    else {
 6474|      0|                        tmp___3 = 0;
 6475|      0|                    }
 6476|      0|                    s->k0 ^= tmp___3;
 6477|      0|                    (s->nblock_used)++;
 6478|      0|                }
 6479|      0|while_break: /* CIL Label */
 6480|      0|                ;
 6481|      0|            }
 6482|      0|        }
 6483|      0|        else {
 6484|      0|            {
 6485|      0|                while (1) {
 6486|      0|while_continue___1: /* CIL Label */
 6487|      0|                    ;
 6488|      0|                    {
 6489|      0|                        while (1) {
 6490|      0|while_continue___2: /* CIL Label */
 6491|      0|                            ;
 6492|      0|                            if ((s->strm)->avail_out == 0U) {
 6493|      0|                                return ((Bool)0);
 6494|      0|                            }
 6495|      0|                            if (s->state_out_len == 0) {
 6496|      0|                                goto while_break___2;
 6497|      0|                            }
 6498|      0|                            *((UChar *)(s->strm)->next_out) = s->state_out_ch;
 6499|      0|                            s->calculatedBlockCRC =
 6500|      0|                                (s->calculatedBlockCRC << 8) ^
 6501|      0|                                BZ2_crc32Table[(s->calculatedBlockCRC >> 24) ^
 6502|      0|                                                                             (unsigned int)s->state_out_ch];
 6503|      0|                            (s->state_out_len)--;
 6504|      0|                            ((s->strm)->next_out)++;
 6505|      0|                            ((s->strm)->avail_out)--;
 6506|      0|                            ((s->strm)->total_out_lo32)++;
 6507|      0|                            if ((s->strm)->total_out_lo32 == 0U) {
 6508|      0|                                ((s->strm)->total_out_hi32)++;
 6509|      0|                            }
 6510|      0|                        }
 6511|      0|while_break___2: /* CIL Label */
 6512|      0|                        ;
 6513|      0|                    }
 6514|      0|                    if (s->nblock_used == s->save_nblock + 1) {
 6515|      0|                        return ((Bool)0);
 6516|      0|                    }
 6517|      0|                    if (s->nblock_used > s->save_nblock + 1) {
 6518|      0|                        return ((Bool)1);
 6519|      0|                    }
 6520|      0|                    s->state_out_len = 1;
 6521|      0|                    s->state_out_ch = (UChar)s->k0;
 6522|      0|                    if (s->tPos >= 100000U * (UInt32)s->blockSize100k) {
 6523|      0|                        return ((Bool)1);
 6524|      0|                    }
 6525|      0|                    {
 6526|      0|                        k1 = (UChar)BZ2_indexIntoF((Int32)s->tPos, s->cftab);
 6527|      0|                        s->tPos = (UInt32) * (s->ll16 + s->tPos) |
 6528|      0|                                  ((((UInt32) * (s->ll4 + (s->tPos >> 1)) >>
 6529|      0|                                     ((s->tPos << 2) & 4U)) &
 6530|      0|                                    15U)
 6531|      0|                                   << 16);
 6532|      0|                        (s->nblock_used)++;
 6533|      0|                    }
 6534|      0|                    if (s->nblock_used == s->save_nblock + 1) {
 6535|      0|                        goto while_continue___1;
 6536|      0|                    }
 6537|      0|                    if ((int)k1 != s->k0) {
 6538|      0|                        s->k0 = (Int32)k1;
 6539|      0|                        goto while_continue___1;
 6540|      0|                    }
 6541|      0|                    s->state_out_len = 2;
 6542|      0|                    if (s->tPos >= 100000U * (UInt32)s->blockSize100k) {
 6543|      0|                        return ((Bool)1);
 6544|      0|                    }
 6545|      0|                    {
 6546|      0|                        k1 = (UChar)BZ2_indexIntoF((Int32)s->tPos, s->cftab);
 6547|      0|                        s->tPos = (UInt32) * (s->ll16 + s->tPos) |
 6548|      0|                                  ((((UInt32) * (s->ll4 + (s->tPos >> 1)) >>
 6549|      0|                                     ((s->tPos << 2) & 4U)) &
 6550|      0|                                    15U)
 6551|      0|                                   << 16);
 6552|      0|                        (s->nblock_used)++;
 6553|      0|                    }
 6554|      0|                    if (s->nblock_used == s->save_nblock + 1) {
 6555|      0|                        goto while_continue___1;
 6556|      0|                    }
 6557|      0|                    if ((int)k1 != s->k0) {
 6558|      0|                        s->k0 = (Int32)k1;
 6559|      0|                        goto while_continue___1;
 6560|      0|                    }
 6561|      0|                    s->state_out_len = 3;
 6562|      0|                    if (s->tPos >= 100000U * (UInt32)s->blockSize100k) {
 6563|      0|                        return ((Bool)1);
 6564|      0|                    }
 6565|      0|                    {
 6566|      0|                        k1 = (UChar)BZ2_indexIntoF((Int32)s->tPos, s->cftab);
 6567|      0|                        s->tPos = (UInt32) * (s->ll16 + s->tPos) |
 6568|      0|                                  ((((UInt32) * (s->ll4 + (s->tPos >> 1)) >>
 6569|      0|                                     ((s->tPos << 2) & 4U)) &
 6570|      0|                                    15U)
 6571|      0|                                   << 16);
 6572|      0|                        (s->nblock_used)++;
 6573|      0|                    }
 6574|      0|                    if (s->nblock_used == s->save_nblock + 1) {
 6575|      0|                        goto while_continue___1;
 6576|      0|                    }
 6577|      0|                    if ((int)k1 != s->k0) {
 6578|      0|                        s->k0 = (Int32)k1;
 6579|      0|                        goto while_continue___1;
 6580|      0|                    }
 6581|      0|                    if (s->tPos >= 100000U * (UInt32)s->blockSize100k) {
 6582|      0|                        return ((Bool)1);
 6583|      0|                    }
 6584|      0|                    {
 6585|      0|                        k1 = (UChar)BZ2_indexIntoF((Int32)s->tPos, s->cftab);
 6586|      0|                        s->tPos = (UInt32) * (s->ll16 + s->tPos) |
 6587|      0|                                  ((((UInt32) * (s->ll4 + (s->tPos >> 1)) >>
 6588|      0|                                     ((s->tPos << 2) & 4U)) &
 6589|      0|                                    15U)
 6590|      0|                                   << 16);
 6591|      0|                        (s->nblock_used)++;
 6592|      0|                        s->state_out_len = (Int32)k1 + 4;
 6593|      0|                    }
 6594|      0|                    if (s->tPos >= 100000U * (UInt32)s->blockSize100k) {
 6595|      0|                        return ((Bool)1);
 6596|      0|                    }
 6597|      0|                    {
 6598|      0|                        s->k0 = BZ2_indexIntoF((Int32)s->tPos, s->cftab);
 6599|      0|                        s->tPos = (UInt32) * (s->ll16 + s->tPos) |
 6600|      0|                                  ((((UInt32) * (s->ll4 + (s->tPos >> 1)) >>
 6601|      0|                                     ((s->tPos << 2) & 4U)) &
 6602|      0|                                    15U)
 6603|      0|                                   << 16);
 6604|      0|                        (s->nblock_used)++;
 6605|      0|                    }
 6606|      0|                }
 6607|      0|while_break___1: /* CIL Label */
 6608|      0|                ;
 6609|      0|            }
 6610|      0|        }
 6611|      0|    }
 6612|      0|}
 6613|       |int BZ2_bzDecompress(bz_stream *strm)
 6614|    524|{
 6615|    524|    Bool corrupt;
 6616|    524|    DState *s;
 6617|    524|    Int32 r;
 6618|    524|    Int32 tmp;
 6619|       |
 6620|    524|    {
 6621|    524|        if ((unsigned long)strm == (unsigned long)((void *)0)) {
 6622|      0|            return (-2);
 6623|      0|        }
 6624|    524|        s = (DState *)strm->state;
 6625|    524|        if ((unsigned long)s == (unsigned long)((void *)0)) {
 6626|      0|            return (-2);
 6627|      0|        }
 6628|    524|        if ((unsigned long)s->strm != (unsigned long)strm) {
 6629|      0|            return (-2);
 6630|      0|        }
 6631|    524|        {
 6632|    528|            while (1) {
 6633|    528|while_continue: /* CIL Label */
 6634|    528|                ;
 6635|    528|                if (s->state == 1) {
 6636|      0|                    return (-1);
 6637|      0|                }
 6638|    528|                if (s->state == 2) {
 6639|    306|                    if (s->smallDecompress) {
 6640|      0|                        {
 6641|      0|                            corrupt = unRLE_obuf_to_output_SMALL(s);
 6642|      0|                        }
 6643|      0|                    }
 6644|    306|                    else {
 6645|    306|                        {
 6646|    306|                            corrupt = unRLE_obuf_to_output_FAST(s);
 6647|    306|                        }
 6648|    306|                    }
 6649|    306|                    if (corrupt) {
 6650|      0|                        return (-4);
 6651|      0|                    }
 6652|    306|                    if (s->nblock_used == s->save_nblock + 1) {
 6653|      4|                        if (s->state_out_len == 0) {
 6654|      4|                            s->calculatedBlockCRC = ~s->calculatedBlockCRC;
 6655|      4|                            if (s->verbosity >= 3) {
 6656|      0|                                {
 6657|      0|                                    fprintf((FILE * /* __restrict  */) stderr,
 6658|      0|                                            (char const * /* __restrict  */) " {0x%08x, 0x%08x}",
 6659|      0|                                            s->storedBlockCRC, s->calculatedBlockCRC);
 6660|      0|                                }
 6661|      0|                            }
 6662|      4|                            if (s->verbosity >= 2) {
 6663|      0|                                {
 6664|      0|                                    fprintf((FILE * /* __restrict  */) stderr,
 6665|      0|                                            (char const * /* __restrict  */) "]");
 6666|      0|                                }
 6667|      0|                            }
 6668|      4|                            if (s->calculatedBlockCRC != s->storedBlockCRC) {
 6669|      0|                                return (-4);
 6670|      0|                            }
 6671|      4|                            s->calculatedCombinedCRC = (s->calculatedCombinedCRC << 1) |
 6672|      4|                                                       (s->calculatedCombinedCRC >> 31);
 6673|      4|                            s->calculatedCombinedCRC ^= s->calculatedBlockCRC;
 6674|      4|                            s->state = 14;
 6675|      4|                        }
 6676|      0|                        else {
 6677|      0|                            return (0);
 6678|      0|                        }
 6679|      4|                    }
 6680|    302|                    else {
 6681|    302|                        return (0);
 6682|    302|                    }
 6683|    306|                }
 6684|    226|                if (s->state >= 10) {
 6685|    226|                    {
 6686|    226|                        tmp = BZ2_decompress(s);
 6687|    226|                        r = tmp;
 6688|    226|                    }
 6689|    226|                    if (r == 4) {
 6690|      5|                        if (s->verbosity >= 3) {
 6691|      0|                            {
 6692|      0|                                fprintf((FILE * /* __restrict  */) stderr,
 6693|      0|                                        (char const
 6694|      0|                                         * /* __restrict  */) "\n    combined CRCs: stored "
 6695|      0|                                        "= 0x%08x, computed = 0x%08x",
 6696|      0|                                        s->storedCombinedCRC, s->calculatedCombinedCRC);
 6697|      0|                            }
 6698|      0|                        }
 6699|      5|                        if (s->calculatedCombinedCRC != s->storedCombinedCRC) {
 6700|      0|                            return (-4);
 6701|      0|                        }
 6702|      5|                        return (r);
 6703|      5|                    }
 6704|    221|                    if (s->state != 2) {
 6705|    217|                        return (r);
 6706|    217|                    }
 6707|    221|                }
 6708|    226|            }
 6709|      0|while_break: /* CIL Label */
 6710|      0|            ;
 6711|      0|        }
 6712|      0|        {
 6713|      0|            BZ2_bz__AssertH__fail(6001);
 6714|      0|        }
 6715|      0|        return (0);
 6716|    524|    }
 6717|    524|}
 6718|       |int BZ2_bzDecompressEnd(bz_stream *strm)
 6719|      5|{
 6720|      5|    DState *s;
 6721|       |
 6722|      5|    {
 6723|      5|        if ((unsigned long)strm == (unsigned long)((void *)0)) {
 6724|      0|            return (-2);
 6725|      0|        }
 6726|      5|        s = (DState *)strm->state;
 6727|      5|        if ((unsigned long)s == (unsigned long)((void *)0)) {
 6728|      0|            return (-2);
 6729|      0|        }
 6730|      5|        if ((unsigned long)s->strm != (unsigned long)strm) {
 6731|      0|            return (-2);
 6732|      0|        }
 6733|      5|        if ((unsigned long)s->tt != (unsigned long)((void *)0)) {
 6734|      5|            {
 6735|      5|                (*(strm->bzfree))(strm->opaque, (void *)s->tt);
 6736|      5|            }
 6737|      5|        }
 6738|      5|        if ((unsigned long)s->ll16 != (unsigned long)((void *)0)) {
 6739|      0|            {
 6740|      0|                (*(strm->bzfree))(strm->opaque, (void *)s->ll16);
 6741|      0|            }
 6742|      0|        }
 6743|      5|        if ((unsigned long)s->ll4 != (unsigned long)((void *)0)) {
 6744|      0|            {
 6745|      0|                (*(strm->bzfree))(strm->opaque, (void *)s->ll4);
 6746|      0|            }
 6747|      0|        }
 6748|      5|        {
 6749|      5|            (*(strm->bzfree))(strm->opaque, strm->state);
 6750|      5|            strm->state = (void *)0;
 6751|      5|        }
 6752|      5|        return (0);
 6753|      5|    }
 6754|      5|}
 6755|       |static Bool myfeof(FILE *f)
 6756|    741|{
 6757|    741|    Int32 c;
 6758|    741|    Int32 tmp;
 6759|       |
 6760|    741|    {
 6761|    741|        {
 6762|    741|            tmp = fgetc(f);
 6763|    741|            c = tmp;
 6764|    741|        }
 6765|    741|        if (c == -1) {
 6766|    123|            return ((Bool)1);
 6767|    123|        }
 6768|    618|        {
 6769|    618|            ungetc(c, f);
 6770|    618|        }
 6771|    618|        return ((Bool)0);
 6772|    741|    }
 6773|    741|}
 6774|       |BZFILE *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k___0,
 6775|       |                        int verbosity___0, int workFactor___0)
 6776|      1|{
 6777|      1|    Int32 ret;
 6778|      1|    bzFile *bzf;
 6779|      1|    int tmp;
 6780|      1|    void *__cil_tmp10;
 6781|       |
 6782|      1|    {
 6783|      1|        bzf = (bzFile *)((void *)0);
 6784|      1|        if ((unsigned long)bzerror != (unsigned long)((void *)0)) {
 6785|      1|            *bzerror = 0;
 6786|      1|        }
 6787|      1|        if ((unsigned long)bzf != (unsigned long)((void *)0)) {
 6788|      0|            bzf->lastErr = 0;
 6789|      0|        }
 6790|      1|        if ((unsigned long)f == (unsigned long)((void *)0)) {
 6791|      0|            goto _L___0;
 6792|      0|        }
 6793|      1|        else {
 6794|      1|            if (blockSize100k___0 < 1) {
 6795|      0|                goto _L___0;
 6796|      0|            }
 6797|      1|            else {
 6798|      1|                if (blockSize100k___0 > 9) {
 6799|      0|                    goto _L___0;
 6800|      0|                }
 6801|      1|                else {
 6802|      1|                    if (workFactor___0 < 0) {
 6803|      0|                        goto _L___0;
 6804|      0|                    }
 6805|      1|                    else {
 6806|      1|                        if (workFactor___0 > 250) {
 6807|      0|                            goto _L___0;
 6808|      0|                        }
 6809|      1|                        else {
 6810|      1|                            if (verbosity___0 < 0) {
 6811|      0|                                goto _L___0;
 6812|      0|                            }
 6813|      1|                            else {
 6814|      1|                                if (verbosity___0 > 4) {
 6815|      0|_L___0:
 6816|      0|                                    if ((unsigned long)bzerror != (unsigned long)((void *)0)) {
 6817|      0|                                        *bzerror = -2;
 6818|      0|                                    }
 6819|      0|                                    if ((unsigned long)bzf != (unsigned long)((void *)0)) {
 6820|      0|                                        bzf->lastErr = -2;
 6821|      0|                                    }
 6822|      0|                                    return ((void *)0);
 6823|      0|                                }
 6824|      1|                            }
 6825|      1|                        }
 6826|      1|                    }
 6827|      1|                }
 6828|      1|            }
 6829|      1|        }
 6830|      1|        {
 6831|      1|            tmp = ferror(f);
 6832|      1|        }
 6833|      1|        if (tmp) {
 6834|      0|            if ((unsigned long)bzerror != (unsigned long)((void *)0)) {
 6835|      0|                *bzerror = -6;
 6836|      0|            }
 6837|      0|            if ((unsigned long)bzf != (unsigned long)((void *)0)) {
 6838|      0|                bzf->lastErr = -6;
 6839|      0|            }
 6840|      0|            return ((void *)0);
 6841|      0|        }
 6842|      1|        {
 6843|      1|            bzf = (bzFile *)malloc(sizeof(bzFile));
 6844|      1|        }
 6845|      1|        if ((unsigned long)bzf == (unsigned long)((void *)0)) {
 6846|      0|            if ((unsigned long)bzerror != (unsigned long)((void *)0)) {
 6847|      0|                *bzerror = -3;
 6848|      0|            }
 6849|      0|            if ((unsigned long)bzf != (unsigned long)((void *)0)) {
 6850|      0|                bzf->lastErr = -3;
 6851|      0|            }
 6852|      0|            return ((void *)0);
 6853|      0|        }
 6854|      1|        if ((unsigned long)bzerror != (unsigned long)((void *)0)) {
 6855|      1|            *bzerror = 0;
 6856|      1|        }
 6857|      1|        if ((unsigned long)bzf != (unsigned long)((void *)0)) {
 6858|      1|            bzf->lastErr = 0;
 6859|      1|        }
 6860|      1|        bzf->initialisedOk = (Bool)0;
 6861|      1|        bzf->bufN = 0;
 6862|      1|        bzf->handle = f;
 6863|      1|        bzf->writing = (Bool)1;
 6864|      1|        bzf->strm.bzalloc = (void *(*)(void *, int, int))((void *)0);
 6865|      1|        bzf->strm.bzfree = (void (*)(void *, void *))((void *)0);
 6866|      1|        bzf->strm.opaque = (void *)0;
 6867|      1|        if (workFactor___0 == 0) {
 6868|      0|            workFactor___0 = 30;
 6869|      0|        }
 6870|      1|        {
 6871|      1|            ret = BZ2_bzCompressInit(&bzf->strm, blockSize100k___0, verbosity___0,
 6872|      1|                                     workFactor___0);
 6873|      1|        }
 6874|      1|        if (ret != 0) {
 6875|      0|            if ((unsigned long)bzerror != (unsigned long)((void *)0)) {
 6876|      0|                *bzerror = ret;
 6877|      0|            }
 6878|      0|            if ((unsigned long)bzf != (unsigned long)((void *)0)) {
 6879|      0|                bzf->lastErr = ret;
 6880|      0|            }
 6881|      0|            {
 6882|      0|                free((void *)bzf);
 6883|      0|            }
 6884|      0|            return ((void *)0);
 6885|      0|        }
 6886|      1|        bzf->strm.avail_in = 0U;
 6887|      1|        bzf->initialisedOk = (Bool)1;
 6888|      1|        return ((BZFILE *)bzf);
 6889|      1|    }
 6890|      1|}
 6891|       |void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len)
 6892|      1|{
 6893|      1|    Int32 n;
 6894|      1|    Int32 n2;
 6895|      1|    Int32 ret;
 6896|      1|    bzFile *bzf;
 6897|      1|    int tmp;
 6898|      1|    int tmp___0;
 6899|       |
 6900|      1|    {
 6901|      1|        bzf = (bzFile *)b;
 6902|      1|        if ((unsigned long)bzerror != (unsigned long)((void *)0)) {
 6903|      1|            *bzerror = 0;
 6904|      1|        }
 6905|      1|        if ((unsigned long)bzf != (unsigned long)((void *)0)) {
 6906|      1|            bzf->lastErr = 0;
 6907|      1|        }
 6908|      1|        if ((unsigned long)bzf == (unsigned long)((void *)0)) {
 6909|      0|            goto _L;
 6910|      0|        }
 6911|      1|        else {
 6912|      1|            if ((unsigned long)buf == (unsigned long)((void *)0)) {
 6913|      0|                goto _L;
 6914|      0|            }
 6915|      1|            else {
 6916|      1|                if (len < 0) {
 6917|      0|_L:
 6918|      0|                    if ((unsigned long)bzerror != (unsigned long)((void *)0)) {
 6919|      0|                        *bzerror = -2;
 6920|      0|                    }
 6921|      0|                    if ((unsigned long)bzf != (unsigned long)((void *)0)) {
 6922|      0|                        bzf->lastErr = -2;
 6923|      0|                    }
 6924|      0|                    return;
 6925|      0|                }
 6926|      1|            }
 6927|      1|        }
 6928|      1|        if (!bzf->writing) {
 6929|      0|            if ((unsigned long)bzerror != (unsigned long)((void *)0)) {
 6930|      0|                *bzerror = -1;
 6931|      0|            }
 6932|      0|            if ((unsigned long)bzf != (unsigned long)((void *)0)) {
 6933|      0|                bzf->lastErr = -1;
 6934|      0|            }
 6935|      0|            return;
 6936|      0|        }
 6937|      1|        {
 6938|      1|            tmp = ferror(bzf->handle);
 6939|      1|        }
 6940|      1|        if (tmp) {
 6941|      0|            if ((unsigned long)bzerror != (unsigned long)((void *)0)) {
 6942|      0|                *bzerror = -6;
 6943|      0|            }
 6944|      0|            if ((unsigned long)bzf != (unsigned long)((void *)0)) {
 6945|      0|                bzf->lastErr = -6;
 6946|      0|            }
 6947|      0|            return;
 6948|      0|        }
 6949|      1|        if (len == 0) {
 6950|      0|            if ((unsigned long)bzerror != (unsigned long)((void *)0)) {
 6951|      0|                *bzerror = 0;
 6952|      0|            }
 6953|      0|            if ((unsigned long)bzf != (unsigned long)((void *)0)) {
 6954|      0|                bzf->lastErr = 0;
 6955|      0|            }
 6956|      0|            return;
 6957|      0|        }
 6958|      1|        bzf->strm.avail_in = (unsigned int)len;
 6959|      1|        bzf->strm.next_in = (char *)buf;
 6960|      1|        {
 6961|      1|            while (1) {
 6962|      1|while_continue: /* CIL Label */
 6963|      1|                ;
 6964|      1|                {
 6965|      1|                    bzf->strm.avail_out = 5000U;
 6966|      1|                    bzf->strm.next_out = bzf->buf;
 6967|      1|                    ret = BZ2_bzCompress(&bzf->strm, 0);
 6968|      1|                }
 6969|      1|                if (ret != 1) {
 6970|      0|                    if ((unsigned long)bzerror != (unsigned long)((void *)0)) {
 6971|      0|                        *bzerror = ret;
 6972|      0|                    }
 6973|      0|                    if ((unsigned long)bzf != (unsigned long)((void *)0)) {
 6974|      0|                        bzf->lastErr = ret;
 6975|      0|                    }
 6976|      0|                    return;
 6977|      0|                }
 6978|      1|                if (bzf->strm.avail_out < 5000U) {
 6979|      0|                    {
 6980|      0|                        n = (Int32)(5000U - bzf->strm.avail_out);
 6981|      0|                        n2 = (Int32)fwrite(
 6982|      0|                                 (void const * /* __restrict  */)((void *)(bzf->buf)),
 6983|      0|                                 sizeof(UChar), (size_t)n,
 6984|      0|                                 (FILE * /* __restrict  */) bzf->handle);
 6985|      0|                    }
 6986|      0|                    if (n != n2) {
 6987|      0|                        goto _L___0;
 6988|      0|                    }
 6989|      0|                    else {
 6990|      0|                        {
 6991|      0|                            tmp___0 = ferror(bzf->handle);
 6992|      0|                        }
 6993|      0|                        if (tmp___0) {
 6994|      0|_L___0:
 6995|      0|                            if ((unsigned long)bzerror != (unsigned long)((void *)0)) {
 6996|      0|                                *bzerror = -6;
 6997|      0|                            }
 6998|      0|                            if ((unsigned long)bzf != (unsigned long)((void *)0)) {
 6999|      0|                                bzf->lastErr = -6;
 7000|      0|                            }
 7001|      0|                            return;
 7002|      0|                        }
 7003|      0|                    }
 7004|      0|                }
 7005|      1|                if (bzf->strm.avail_in == 0U) {
 7006|      1|                    if ((unsigned long)bzerror != (unsigned long)((void *)0)) {
 7007|      1|                        *bzerror = 0;
 7008|      1|                    }
 7009|      1|                    if ((unsigned long)bzf != (unsigned long)((void *)0)) {
 7010|      1|                        bzf->lastErr = 0;
 7011|      1|                    }
 7012|      1|                    return;
 7013|      1|                }
 7014|      1|            }
 7015|      0|while_break: /* CIL Label */
 7016|      0|            ;
 7017|      0|        }
 7018|      0|    }
 7019|      0|}
 7020|       |void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
 7021|       |                        unsigned int *nbytes_in_lo32,
 7022|       |                        unsigned int *nbytes_in_hi32,
 7023|       |                        unsigned int *nbytes_out_lo32,
 7024|       |                        unsigned int *nbytes_out_hi32)
 7025|      1|{
 7026|      1|    Int32 n;
 7027|      1|    Int32 n2;
 7028|      1|    Int32 ret;
 7029|      1|    bzFile *bzf;
 7030|      1|    int tmp;
 7031|      1|    int tmp___0;
 7032|      1|    int tmp___1;
 7033|      1|    int tmp___2;
 7034|       |
 7035|      1|    {
 7036|      1|        bzf = (bzFile *)b;
 7037|      1|        if ((unsigned long)bzf == (unsigned long)((void *)0)) {
 7038|      0|            if ((unsigned long)bzerror != (unsigned long)((void *)0)) {
 7039|      0|                *bzerror = 0;
 7040|      0|            }
 7041|      0|            if ((unsigned long)bzf != (unsigned long)((void *)0)) {
 7042|      0|                bzf->lastErr = 0;
 7043|      0|            }
 7044|      0|            return;
 7045|      0|        }
 7046|      1|        if (!bzf->writing) {
 7047|      0|            if ((unsigned long)bzerror != (unsigned long)((void *)0)) {
 7048|      0|                *bzerror = -1;
 7049|      0|            }
 7050|      0|            if ((unsigned long)bzf != (unsigned long)((void *)0)) {
 7051|      0|                bzf->lastErr = -1;
 7052|      0|            }
 7053|      0|            return;
 7054|      0|        }
 7055|      1|        {
 7056|      1|            tmp = ferror(bzf->handle);
 7057|      1|        }
 7058|      1|        if (tmp) {
 7059|      0|            if ((unsigned long)bzerror != (unsigned long)((void *)0)) {
 7060|      0|                *bzerror = -6;
 7061|      0|            }
 7062|      0|            if ((unsigned long)bzf != (unsigned long)((void *)0)) {
 7063|      0|                bzf->lastErr = -6;
 7064|      0|            }
 7065|      0|            return;
 7066|      0|        }
 7067|      1|        if ((unsigned long)nbytes_in_lo32 != (unsigned long)((void *)0)) {
 7068|      1|            *nbytes_in_lo32 = 0U;
 7069|      1|        }
 7070|      1|        if ((unsigned long)nbytes_in_hi32 != (unsigned long)((void *)0)) {
 7071|      1|            *nbytes_in_hi32 = 0U;
 7072|      1|        }
 7073|      1|        if ((unsigned long)nbytes_out_lo32 != (unsigned long)((void *)0)) {
 7074|      1|            *nbytes_out_lo32 = 0U;
 7075|      1|        }
 7076|      1|        if ((unsigned long)nbytes_out_hi32 != (unsigned long)((void *)0)) {
 7077|      1|            *nbytes_out_hi32 = 0U;
 7078|      1|        }
 7079|      1|        if (!abandon) {
 7080|      1|            if (bzf->lastErr == 0) {
 7081|      1|                {
 7082|      1|                    while (1) {
 7083|      1|while_continue: /* CIL Label */
 7084|      1|                        ;
 7085|      1|                        {
 7086|      1|                            bzf->strm.avail_out = 5000U;
 7087|      1|                            bzf->strm.next_out = bzf->buf;
 7088|      1|                            ret = BZ2_bzCompress(&bzf->strm, 2);
 7089|      1|                        }
 7090|      1|                        if (ret != 3) {
 7091|      1|                            if (ret != 4) {
 7092|      0|                                if ((unsigned long)bzerror != (unsigned long)((void *)0)) {
 7093|      0|                                    *bzerror = ret;
 7094|      0|                                }
 7095|      0|                                if ((unsigned long)bzf != (unsigned long)((void *)0)) {
 7096|      0|                                    bzf->lastErr = ret;
 7097|      0|                                }
 7098|      0|                                return;
 7099|      0|                            }
 7100|      1|                        }
 7101|      1|                        if (bzf->strm.avail_out < 5000U) {
 7102|      1|                            {
 7103|      1|                                n = (Int32)(5000U - bzf->strm.avail_out);
 7104|      1|                                n2 = (Int32)fwrite(
 7105|      1|                                         (void const * /* __restrict  */)((void *)(bzf->buf)),
 7106|      1|                                         sizeof(UChar), (size_t)n,
 7107|      1|                                         (FILE * /* __restrict  */) bzf->handle);
 7108|      1|                            }
 7109|      1|                            if (n != n2) {
 7110|      0|                                goto _L;
 7111|      0|                            }
 7112|      1|                            else {
 7113|      1|                                {
 7114|      1|                                    tmp___0 = ferror(bzf->handle);
 7115|      1|                                }
 7116|      1|                                if (tmp___0) {
 7117|      0|_L:
 7118|      0|                                    if ((unsigned long)bzerror != (unsigned long)((void *)0)) {
 7119|      0|                                        *bzerror = -6;
 7120|      0|                                    }
 7121|      0|                                    if ((unsigned long)bzf != (unsigned long)((void *)0)) {
 7122|      0|                                        bzf->lastErr = -6;
 7123|      0|                                    }
 7124|      0|                                    return;
 7125|      0|                                }
 7126|      1|                            }
 7127|      1|                        }
 7128|      1|                        if (ret == 4) {
 7129|      1|                            goto while_break;
 7130|      1|                        }
 7131|      1|                    }
 7132|      1|while_break: /* CIL Label */
 7133|      1|                    ;
 7134|      1|                }
 7135|      1|            }
 7136|      1|        }
 7137|      1|        if (!abandon) {
 7138|      1|            {
 7139|      1|                tmp___2 = ferror(bzf->handle);
 7140|      1|            }
 7141|      1|            if (!tmp___2) {
 7142|      1|                {
 7143|      1|                    fflush(bzf->handle);
 7144|      1|                    tmp___1 = ferror(bzf->handle);
 7145|      1|                }
 7146|      1|                if (tmp___1) {
 7147|      0|                    if ((unsigned long)bzerror != (unsigned long)((void *)0)) {
 7148|      0|                        *bzerror = -6;
 7149|      0|                    }
 7150|      0|                    if ((unsigned long)bzf != (unsigned long)((void *)0)) {
 7151|      0|                        bzf->lastErr = -6;
 7152|      0|                    }
 7153|      0|                    return;
 7154|      0|                }
 7155|      1|            }
 7156|      1|        }
 7157|      1|        if ((unsigned long)nbytes_in_lo32 != (unsigned long)((void *)0)) {
 7158|      1|            *nbytes_in_lo32 = bzf->strm.total_in_lo32;
 7159|      1|        }
 7160|      1|        if ((unsigned long)nbytes_in_hi32 != (unsigned long)((void *)0)) {
 7161|      1|            *nbytes_in_hi32 = bzf->strm.total_in_hi32;
 7162|      1|        }
 7163|      1|        if ((unsigned long)nbytes_out_lo32 != (unsigned long)((void *)0)) {
 7164|      1|            *nbytes_out_lo32 = bzf->strm.total_out_lo32;
 7165|      1|        }
 7166|      1|        if ((unsigned long)nbytes_out_hi32 != (unsigned long)((void *)0)) {
 7167|      1|            *nbytes_out_hi32 = bzf->strm.total_out_hi32;
 7168|      1|        }
 7169|      1|        if ((unsigned long)bzerror != (unsigned long)((void *)0)) {
 7170|      1|            *bzerror = 0;
 7171|      1|        }
 7172|      1|        if ((unsigned long)bzf != (unsigned long)((void *)0)) {
 7173|      1|            bzf->lastErr = 0;
 7174|      1|        }
 7175|      1|        {
 7176|      1|            BZ2_bzCompressEnd(&bzf->strm);
 7177|      1|            free((void *)bzf);
 7178|      1|        }
 7179|      1|        return;
 7180|      1|    }
 7181|      1|}
 7182|       |BZFILE *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity___0, int small,
 7183|       |                       void *unused, int nUnused)
 7184|      5|{
 7185|      5|    bzFile *bzf;
 7186|      5|    int ret;
 7187|      5|    int tmp;
 7188|      5|    void *__cil_tmp11;
 7189|       |
 7190|      5|    {
 7191|      5|        bzf = (bzFile *)((void *)0);
 7192|      5|        if ((unsigned long)bzerror != (unsigned long)((void *)0)) {
 7193|      5|            *bzerror = 0;
 7194|      5|        }
 7195|      5|        if ((unsigned long)bzf != (unsigned long)((void *)0)) {
 7196|      0|            bzf->lastErr = 0;
 7197|      0|        }
 7198|      5|        if ((unsigned long)f == (unsigned long)((void *)0)) {
 7199|      0|            goto _L___0;
 7200|      0|        }
 7201|      5|        else {
 7202|      5|            if (small != 0) {
 7203|      0|                if (small != 1) {
 7204|      0|                    goto _L___0;
 7205|      0|                }
 7206|      0|                else {
 7207|      0|                    goto _L___2;
 7208|      0|                }
 7209|      0|            }
 7210|      5|            else {
 7211|      5|_L___2:
 7212|      5|                if (verbosity___0 < 0) {
 7213|      0|                    goto _L___0;
 7214|      0|                }
 7215|      5|                else {
 7216|      5|                    if (verbosity___0 > 4) {
 7217|      0|                        goto _L___0;
 7218|      0|                    }
 7219|      5|                    else {
 7220|      5|                        if ((unsigned long)unused == (unsigned long)((void *)0)) {
 7221|      0|                            if (nUnused != 0) {
 7222|      0|                                goto _L___0;
 7223|      0|                            }
 7224|      0|                            else {
 7225|      0|                                goto _L___1;
 7226|      0|                            }
 7227|      0|                        }
 7228|      5|                        else {
 7229|      5|_L___1:
 7230|      5|                            if ((unsigned long)unused != (unsigned long)((void *)0)) {
 7231|      5|                                if (nUnused < 0) {
 7232|      0|                                    goto _L___0;
 7233|      0|                                }
 7234|      5|                                else {
 7235|      5|                                    if (nUnused > 5000) {
 7236|      0|_L___0:
 7237|      0|                                        if ((unsigned long)bzerror != (unsigned long)((void *)0)) {
 7238|      0|                                            *bzerror = -2;
 7239|      0|                                        }
 7240|      0|                                        if ((unsigned long)bzf != (unsigned long)((void *)0)) {
 7241|      0|                                            bzf->lastErr = -2;
 7242|      0|                                        }
 7243|      0|                                        return ((void *)0);
 7244|      0|                                    }
 7245|      5|                                }
 7246|      5|                            }
 7247|      5|                        }
 7248|      5|                    }
 7249|      5|                }
 7250|      5|            }
 7251|      5|        }
 7252|      5|        {
 7253|      5|            tmp = ferror(f);
 7254|      5|        }
 7255|      5|        if (tmp) {
 7256|      0|            if ((unsigned long)bzerror != (unsigned long)((void *)0)) {
 7257|      0|                *bzerror = -6;
 7258|      0|            }
 7259|      0|            if ((unsigned long)bzf != (unsigned long)((void *)0)) {
 7260|      0|                bzf->lastErr = -6;
 7261|      0|            }
 7262|      0|            return ((void *)0);
 7263|      0|        }
 7264|      5|        {
 7265|      5|            bzf = (bzFile *)malloc(sizeof(bzFile));
 7266|      5|        }
 7267|      5|        if ((unsigned long)bzf == (unsigned long)((void *)0)) {
 7268|      0|            if ((unsigned long)bzerror != (unsigned long)((void *)0)) {
 7269|      0|                *bzerror = -3;
 7270|      0|            }
 7271|      0|            if ((unsigned long)bzf != (unsigned long)((void *)0)) {
 7272|      0|                bzf->lastErr = -3;
 7273|      0|            }
 7274|      0|            return ((void *)0);
 7275|      0|        }
 7276|      5|        if ((unsigned long)bzerror != (unsigned long)((void *)0)) {
 7277|      5|            *bzerror = 0;
 7278|      5|        }
 7279|      5|        if ((unsigned long)bzf != (unsigned long)((void *)0)) {
 7280|      5|            bzf->lastErr = 0;
 7281|      5|        }
 7282|      5|        bzf->initialisedOk = (Bool)0;
 7283|      5|        bzf->handle = f;
 7284|      5|        bzf->bufN = 0;
 7285|      5|        bzf->writing = (Bool)0;
 7286|      5|        bzf->strm.bzalloc = (void *(*)(void *, int, int))((void *)0);
 7287|      5|        bzf->strm.bzfree = (void (*)(void *, void *))((void *)0);
 7288|      5|        bzf->strm.opaque = (void *)0;
 7289|      5|        {
 7290|      5|            while (1) {
 7291|      5|while_continue: /* CIL Label */
 7292|      5|                ;
 7293|      5|                if (!(nUnused > 0)) {
 7294|      5|                    goto while_break;
 7295|      5|                }
 7296|      0|                bzf->buf[bzf->bufN] = (Char) * ((UChar *)unused);
 7297|      0|                (bzf->bufN)++;
 7298|      0|                unused = (void *)((UChar *)unused + 1);
 7299|      0|                nUnused--;
 7300|      0|            }
 7301|      5|while_break: /* CIL Label */
 7302|      5|            ;
 7303|      5|        }
 7304|      0|        {
 7305|      5|            ret = BZ2_bzDecompressInit(&bzf->strm, verbosity___0, small);
 7306|      5|        }
 7307|      5|        if (ret != 0) {
 7308|      0|            if ((unsigned long)bzerror != (unsigned long)((void *)0)) {
 7309|      0|                *bzerror = ret;
 7310|      0|            }
 7311|      0|            if ((unsigned long)bzf != (unsigned long)((void *)0)) {
 7312|      0|                bzf->lastErr = ret;
 7313|      0|            }
 7314|      0|            {
 7315|      0|                free((void *)bzf);
 7316|      0|            }
 7317|      0|            return ((void *)0);
 7318|      0|        }
 7319|      5|        bzf->strm.avail_in = (unsigned int)bzf->bufN;
 7320|      5|        bzf->strm.next_in = bzf->buf;
 7321|      5|        bzf->initialisedOk = (Bool)1;
 7322|      5|        return ((BZFILE *)bzf);
 7323|      5|    }
 7324|      5|}
 7325|       |void BZ2_bzReadClose(int *bzerror, BZFILE *b)
 7326|      5|{
 7327|      5|    bzFile *bzf;
 7328|       |
 7329|      5|    {
 7330|      5|        bzf = (bzFile *)b;
 7331|      5|        if ((unsigned long)bzerror != (unsigned long)((void *)0)) {
 7332|      5|            *bzerror = 0;
 7333|      5|        }
 7334|      5|        if ((unsigned long)bzf != (unsigned long)((void *)0)) {
 7335|      5|            bzf->lastErr = 0;
 7336|      5|        }
 7337|      5|        if ((unsigned long)bzf == (unsigned long)((void *)0)) {
 7338|      0|            if ((unsigned long)bzerror != (unsigned long)((void *)0)) {
 7339|      0|                *bzerror = 0;
 7340|      0|            }
 7341|      0|            if ((unsigned long)bzf != (unsigned long)((void *)0)) {
 7342|      0|                bzf->lastErr = 0;
 7343|      0|            }
 7344|      0|            return;
 7345|      0|        }
 7346|      5|        if (bzf->writing) {
 7347|      0|            if ((unsigned long)bzerror != (unsigned long)((void *)0)) {
 7348|      0|                *bzerror = -1;
 7349|      0|            }
 7350|      0|            if ((unsigned long)bzf != (unsigned long)((void *)0)) {
 7351|      0|                bzf->lastErr = -1;
 7352|      0|            }
 7353|      0|            return;
 7354|      0|        }
 7355|      5|        if (bzf->initialisedOk) {
 7356|      5|            {
 7357|      5|                BZ2_bzDecompressEnd(&bzf->strm);
 7358|      5|            }
 7359|      5|        }
 7360|      5|        {
 7361|      5|            free((void *)bzf);
 7362|      5|        }
 7363|      5|        return;
 7364|      5|    }
 7365|      5|}
 7366|       |int BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len)
 7367|    307|{
 7368|    307|    Int32 n;
 7369|    307|    Int32 ret;
 7370|    307|    bzFile *bzf;
 7371|    307|    int tmp;
 7372|    307|    int tmp___0;
 7373|    307|    Bool tmp___1;
 7374|    307|    Bool tmp___2;
 7375|       |
 7376|    307|    {
 7377|    307|        bzf = (bzFile *)b;
 7378|    307|        if ((unsigned long)bzerror != (unsigned long)((void *)0)) {
 7379|    307|            *bzerror = 0;
 7380|    307|        }
 7381|    307|        if ((unsigned long)bzf != (unsigned long)((void *)0)) {
 7382|    307|            bzf->lastErr = 0;
 7383|    307|        }
 7384|    307|        if ((unsigned long)bzf == (unsigned long)((void *)0)) {
 7385|      0|            goto _L;
 7386|      0|        }
 7387|    307|        else {
 7388|    307|            if ((unsigned long)buf == (unsigned long)((void *)0)) {
 7389|      0|                goto _L;
 7390|      0|            }
 7391|    307|            else {
 7392|    307|                if (len < 0) {
 7393|      0|_L:
 7394|      0|                    if ((unsigned long)bzerror != (unsigned long)((void *)0)) {
 7395|      0|                        *bzerror = -2;
 7396|      0|                    }
 7397|      0|                    if ((unsigned long)bzf != (unsigned long)((void *)0)) {
 7398|      0|                        bzf->lastErr = -2;
 7399|      0|                    }
 7400|      0|                    return (0);
 7401|      0|                }
 7402|    307|            }
 7403|    307|        }
 7404|    307|        if (bzf->writing) {
 7405|      0|            if ((unsigned long)bzerror != (unsigned long)((void *)0)) {
 7406|      0|                *bzerror = -1;
 7407|      0|            }
 7408|      0|            if ((unsigned long)bzf != (unsigned long)((void *)0)) {
 7409|      0|                bzf->lastErr = -1;
 7410|      0|            }
 7411|      0|            return (0);
 7412|      0|        }
 7413|    307|        if (len == 0) {
 7414|      0|            if ((unsigned long)bzerror != (unsigned long)((void *)0)) {
 7415|      0|                *bzerror = 0;
 7416|      0|            }
 7417|      0|            if ((unsigned long)bzf != (unsigned long)((void *)0)) {
 7418|      0|                bzf->lastErr = 0;
 7419|      0|            }
 7420|      0|            return (0);
 7421|      0|        }
 7422|    307|        bzf->strm.avail_out = (unsigned int)len;
 7423|    307|        bzf->strm.next_out = (char *)buf;
 7424|    307|        {
 7425|    524|            while (1) {
 7426|    524|while_continue: /* CIL Label */
 7427|    524|                ;
 7428|    524|                {
 7429|    524|                    tmp = ferror(bzf->handle);
 7430|    524|                }
 7431|    524|                if (tmp) {
 7432|      0|                    if ((unsigned long)bzerror != (unsigned long)((void *)0)) {
 7433|      0|                        *bzerror = -6;
 7434|      0|                    }
 7435|      0|                    if ((unsigned long)bzf != (unsigned long)((void *)0)) {
 7436|      0|                        bzf->lastErr = -6;
 7437|      0|                    }
 7438|      0|                    return (0);
 7439|      0|                }
 7440|    524|                if (bzf->strm.avail_in == 0U) {
 7441|    222|                    {
 7442|    222|                        tmp___1 = myfeof(bzf->handle);
 7443|    222|                    }
 7444|    222|                    if (!tmp___1) {
 7445|    222|                        {
 7446|    222|                            n = (Int32)fread((void * /* __restrict  */)(bzf->buf),
 7447|    222|                                             sizeof(UChar), (size_t)5000,
 7448|    222|                                             (FILE * /* __restrict  */) bzf->handle);
 7449|    222|                            tmp___0 = ferror(bzf->handle);
 7450|    222|                        }
 7451|    222|                        if (tmp___0) {
 7452|      0|                            if ((unsigned long)bzerror != (unsigned long)((void *)0)) {
 7453|      0|                                *bzerror = -6;
 7454|      0|                            }
 7455|      0|                            if ((unsigned long)bzf != (unsigned long)((void *)0)) {
 7456|      0|                                bzf->lastErr = -6;
 7457|      0|                            }
 7458|      0|                            return (0);
 7459|      0|                        }
 7460|    222|                        bzf->bufN = n;
 7461|    222|                        bzf->strm.avail_in = (unsigned int)bzf->bufN;
 7462|    222|                        bzf->strm.next_in = bzf->buf;
 7463|    222|                    }
 7464|    222|                }
 7465|    524|                {
 7466|    524|                    ret = BZ2_bzDecompress(&bzf->strm);
 7467|    524|                }
 7468|    524|                if (ret != 0) {
 7469|      5|                    if (ret != 4) {
 7470|      0|                        if ((unsigned long)bzerror != (unsigned long)((void *)0)) {
 7471|      0|                            *bzerror = ret;
 7472|      0|                        }
 7473|      0|                        if ((unsigned long)bzf != (unsigned long)((void *)0)) {
 7474|      0|                            bzf->lastErr = ret;
 7475|      0|                        }
 7476|      0|                        return (0);
 7477|      0|                    }
 7478|      5|                }
 7479|    524|                if (ret == 0) {
 7480|    519|                    {
 7481|    519|                        tmp___2 = myfeof(bzf->handle);
 7482|    519|                    }
 7483|    519|                    if (tmp___2) {
 7484|    123|                        if (bzf->strm.avail_in == 0U) {
 7485|      0|                            if (bzf->strm.avail_out > 0U) {
 7486|      0|                                if ((unsigned long)bzerror != (unsigned long)((void *)0)) {
 7487|      0|                                    *bzerror = -7;
 7488|      0|                                }
 7489|      0|                                if ((unsigned long)bzf != (unsigned long)((void *)0)) {
 7490|      0|                                    bzf->lastErr = -7;
 7491|      0|                                }
 7492|      0|                                return (0);
 7493|      0|                            }
 7494|      0|                        }
 7495|    123|                    }
 7496|    519|                }
 7497|    524|                if (ret == 4) {
 7498|      5|                    if ((unsigned long)bzerror != (unsigned long)((void *)0)) {
 7499|      5|                        *bzerror = 4;
 7500|      5|                    }
 7501|      5|                    if ((unsigned long)bzf != (unsigned long)((void *)0)) {
 7502|      5|                        bzf->lastErr = 4;
 7503|      5|                    }
 7504|      5|                    return ((int)((unsigned int)len - bzf->strm.avail_out));
 7505|      5|                }
 7506|    519|                if (bzf->strm.avail_out == 0U) {
 7507|    302|                    if ((unsigned long)bzerror != (unsigned long)((void *)0)) {
 7508|    302|                        *bzerror = 0;
 7509|    302|                    }
 7510|    302|                    if ((unsigned long)bzf != (unsigned long)((void *)0)) {
 7511|    302|                        bzf->lastErr = 0;
 7512|    302|                    }
 7513|    302|                    return (len);
 7514|    302|                }
 7515|    519|            }
 7516|      0|while_break: /* CIL Label */
 7517|      0|            ;
 7518|      0|        }
 7519|      0|        return (0);
 7520|    307|    }
 7521|    307|}
 7522|       |void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused, int *nUnused)
 7523|      5|{
 7524|      5|    bzFile *bzf;
 7525|       |
 7526|      5|    {
 7527|      5|        bzf = (bzFile *)b;
 7528|      5|        if ((unsigned long)bzf == (unsigned long)((void *)0)) {
 7529|      0|            if ((unsigned long)bzerror != (unsigned long)((void *)0)) {
 7530|      0|                *bzerror = -2;
 7531|      0|            }
 7532|      0|            if ((unsigned long)bzf != (unsigned long)((void *)0)) {
 7533|      0|                bzf->lastErr = -2;
 7534|      0|            }
 7535|      0|            return;
 7536|      0|        }
 7537|      5|        if (bzf->lastErr != 4) {
 7538|      0|            if ((unsigned long)bzerror != (unsigned long)((void *)0)) {
 7539|      0|                *bzerror = -1;
 7540|      0|            }
 7541|      0|            if ((unsigned long)bzf != (unsigned long)((void *)0)) {
 7542|      0|                bzf->lastErr = -1;
 7543|      0|            }
 7544|      0|            return;
 7545|      0|        }
 7546|      5|        if ((unsigned long)unused == (unsigned long)((void *)0)) {
 7547|      0|            goto _L;
 7548|      0|        }
 7549|      5|        else {
 7550|      5|            if ((unsigned long)nUnused == (unsigned long)((void *)0)) {
 7551|      0|_L:
 7552|      0|                if ((unsigned long)bzerror != (unsigned long)((void *)0)) {
 7553|      0|                    *bzerror = -2;
 7554|      0|                }
 7555|      0|                if ((unsigned long)bzf != (unsigned long)((void *)0)) {
 7556|      0|                    bzf->lastErr = -2;
 7557|      0|                }
 7558|      0|                return;
 7559|      0|            }
 7560|      5|        }
 7561|      5|        if ((unsigned long)bzerror != (unsigned long)((void *)0)) {
 7562|      5|            *bzerror = 0;
 7563|      5|        }
 7564|      5|        if ((unsigned long)bzf != (unsigned long)((void *)0)) {
 7565|      5|            bzf->lastErr = 0;
 7566|      5|        }
 7567|      5|        *nUnused = (int)bzf->strm.avail_in;
 7568|      5|        *unused = (void *)bzf->strm.next_in;
 7569|      5|        return;
 7570|      5|    }
 7571|      5|}
 7572|       |char const *BZ2_bzlibVersion(void)
 7573|      0|{
 7574|      0|    char *__cil_tmp1;
 7575|       |
 7576|      0|    {
 7577|      0|        return ("1.0.5, 10-Dec-2007");
 7578|      0|    }
 7579|      0|}
 7580|       |static char const *bzerrorstrings[16] = {"OK",           "SEQUENCE_ERROR",
 7581|       |                                         "PARAM_ERROR",  "MEM_ERROR",
 7582|       |                                         "DATA_ERROR",   "DATA_ERROR_MAGIC",
 7583|       |                                         "IO_ERROR",     "UNEXPECTED_EOF",
 7584|       |                                         "OUTBUFF_FULL", "CONFIG_ERROR",
 7585|       |                                         "???",          "???",
 7586|       |                                         "???",          "???",
 7587|       |                                         "???",          "???"
 7588|       |                                        };
 7589|       |extern __attribute__((__nothrow__)) int(__attribute__((__leaf__))
 7590|       |                                        remove)(char const *__filename);
 7591|       |extern void rewind(FILE *__stream);
 7592|       |extern void perror(char const *__s);
 7593|       |extern __attribute__((__nothrow__)) int(__attribute__((__leaf__))
 7594|       |                                        fileno)(FILE *__stream);
 7595|       |extern __attribute__((__nothrow__)) char *(__attribute__((__nonnull__(1),
 7596|       |        __leaf__))
 7597|       |        getenv)(char const *__name);
 7598|       |extern __attribute__((__nothrow__)) char *(
 7599|       |    __attribute__((__nonnull__(1, 2), __leaf__))
 7600|       |    strcpy)(char *__restrict __dest, char const *__restrict __src);
 7601|       |extern __attribute__((__nothrow__)) char *(
 7602|       |    __attribute__((__nonnull__(1, 2), __leaf__))
 7603|       |    strncpy)(char *__restrict __dest, char const *__restrict __src, size_t __n);
 7604|       |extern __attribute__((__nothrow__)) int(
 7605|       |    __attribute__((__nonnull__(1, 2), __leaf__))
 7606|       |    strncmp)(char const *__s1, char const *__s2, size_t __n)
 7607|       |__attribute__((__pure__));
 7608|       |extern __attribute__((__nothrow__)) char *(
 7609|       |    __attribute__((__nonnull__(1, 2), __leaf__))
 7610|       |    strstr)(char const *__haystack, char const *__needle)
 7611|       |__attribute__((__pure__));
 7612|       |extern __attribute__((__nothrow__))
 7613|       |size_t(__attribute__((__nonnull__(1), __leaf__)) strlen)(char const *__s)
 7614|       |__attribute__((__pure__));
 7615|       |extern __attribute__((__nothrow__)) char *(__attribute__((__leaf__))
 7616|       |        strerror)(int __errnum);
 7617|       |extern __attribute__((__nothrow__))
 7618|       |__sighandler_t(__attribute__((__leaf__)) signal)(int __sig,
 7619|       |        void (*__handler)(int));
 7620|       |extern __attribute__((__nothrow__)) int *(
 7621|       |    __attribute__((__leaf__)) __errno_location)(void)__attribute__((__const__));
 7622|       |extern int(__attribute__((__nonnull__(1)))
 7623|       |           open)(char const *__file, int __oflag, ...) __asm__("open64");
 7624|       |extern
 7625|       |__attribute__((__nothrow__)) int(__attribute__((__nonnull__(1), __leaf__))
 7626|       |                                 utime)(char const *__file,
 7627|       |                                        struct utimbuf const *__file_times);
 7628|       |extern int close(int __fd);
 7629|       |extern __attribute__((__nothrow__)) int(__attribute__((__leaf__))
 7630|       |                                        fchown)(int __fd, __uid_t __owner,
 7631|       |                                                __gid_t __group);
 7632|       |extern __attribute__((__nothrow__)) int(__attribute__((__leaf__))
 7633|       |                                        isatty)(int __fd);
 7634|       |extern __attribute__((__nothrow__)) int(
 7635|       |    __attribute__((__nonnull__(1, 2), __leaf__))
 7636|       |    stat)(char const *__restrict __file,
 7637|       |          struct stat *__restrict __buf) __asm__("stat64");
 7638|       |extern __attribute__((__nothrow__)) int(
 7639|       |    __attribute__((__nonnull__(1, 2), __leaf__))
 7640|       |    lstat)(char const *__restrict __file,
 7641|       |           struct stat *__restrict __buf) __asm__("lstat64");
 7642|       |extern __attribute__((__nothrow__)) int(__attribute__((__leaf__))
 7643|       |                                        fchmod)(int __fd, __mode_t __mode);
 7644|       |Int32 verbosity;
 7645|       |Bool keepInputFiles;
 7646|       |Bool smallMode;
 7647|       |Bool deleteOutputOnInterrupt;
 7648|       |Bool forceOverwrite;
 7649|       |Bool testFailsExist;
 7650|       |Bool unzFailsExist;
 7651|       |Bool noisy;
 7652|       |Int32 numFileNames;
 7653|       |Int32 numFilesProcessed;
 7654|       |Int32 blockSize100k;
 7655|       |Int32 exitValue;
 7656|       |Int32 opMode;
 7657|       |Int32 srcMode;
 7658|       |Int32 longestFileName;
 7659|       |Char inName[1034];
 7660|       |Char outName[1034];
 7661|       |Char tmpName[1034];
 7662|       |Char *progName;
 7663|       |Char progNameReally[1034];
 7664|       |FILE *outputHandleJustInCase;
 7665|       |Int32 workFactor;
 7666|       |static __attribute__((__noreturn__)) void panic(Char const *s);
 7667|       |static __attribute__((__noreturn__)) void ioError(void);
 7668|       |static __attribute__((__noreturn__)) void outOfMemory(void);
 7669|       |static __attribute__((__noreturn__)) void configError(void);
 7670|       |static __attribute__((__noreturn__)) void crcError(void);
 7671|       |static __attribute__((__noreturn__)) void cleanUpAndFail(Int32 ec);
 7672|       |static __attribute__((__noreturn__)) void compressedStreamEOF(void);
 7673|       |static void copyFileName(Char *to, Char *from);
 7674|       |static void *myMalloc(Int32 n);
 7675|       |static void applySavedFileAttrToOutputFile(IntNative fd);
 7676|       |static void uInt64_from_UInt32s(UInt64 *n, UInt32 lo32, UInt32 hi32)
 7677|      0|{
 7678|       |
 7679|      0|    {
 7680|      0|        n->b[7] = (UChar)((hi32 >> 24) & 255U);
 7681|      0|        n->b[6] = (UChar)((hi32 >> 16) & 255U);
 7682|      0|        n->b[5] = (UChar)((hi32 >> 8) & 255U);
 7683|      0|        n->b[4] = (UChar)(hi32 & 255U);
 7684|      0|        n->b[3] = (UChar)((lo32 >> 24) & 255U);
 7685|      0|        n->b[2] = (UChar)((lo32 >> 16) & 255U);
 7686|      0|        n->b[1] = (UChar)((lo32 >> 8) & 255U);
 7687|      0|        n->b[0] = (UChar)(lo32 & 255U);
 7688|      0|        return;
 7689|      0|    }
 7690|      0|}
 7691|       |static double uInt64_to_double(UInt64 *n)
 7692|      0|{
 7693|      0|    Int32 i;
 7694|      0|    double base;
 7695|      0|    double sum;
 7696|       |
 7697|      0|    {
 7698|      0|        base = 1.0;
 7699|      0|        sum = 0.0;
 7700|      0|        i = 0;
 7701|      0|        {
 7702|      0|            while (1) {
 7703|      0|while_continue: /* CIL Label */
 7704|      0|                ;
 7705|      0|                if (!(i < 8)) {
 7706|      0|                    goto while_break;
 7707|      0|                }
 7708|      0|                sum += base * (double)n->b[i];
 7709|      0|                base *= 256.0;
 7710|      0|                i++;
 7711|      0|            }
 7712|      0|while_break: /* CIL Label */
 7713|      0|            ;
 7714|      0|        }
 7715|      0|        return (sum);
 7716|      0|    }
 7717|      0|}
 7718|       |static Bool uInt64_isZero(UInt64 *n)
 7719|      0|{
 7720|      0|    Int32 i;
 7721|       |
 7722|      0|    {
 7723|      0|        i = 0;
 7724|      0|        {
 7725|      0|            while (1) {
 7726|      0|while_continue: /* CIL Label */
 7727|      0|                ;
 7728|      0|                if (!(i < 8)) {
 7729|      0|                    goto while_break;
 7730|      0|                }
 7731|      0|                if ((int)n->b[i] != 0) {
 7732|      0|                    return ((Bool)0);
 7733|      0|                }
 7734|      0|                i++;
 7735|      0|            }
 7736|      0|while_break: /* CIL Label */
 7737|      0|            ;
 7738|      0|        }
 7739|      0|        return ((Bool)1);
 7740|      0|    }
 7741|      0|}
 7742|       |static Int32 uInt64_qrm10(UInt64 *n)
 7743|      0|{
 7744|      0|    UInt32 rem;
 7745|      0|    UInt32 tmp;
 7746|      0|    Int32 i;
 7747|       |
 7748|      0|    {
 7749|      0|        rem = (UInt32)0;
 7750|      0|        i = 7;
 7751|      0|        {
 7752|      0|            while (1) {
 7753|      0|while_continue: /* CIL Label */
 7754|      0|                ;
 7755|      0|                if (!(i >= 0)) {
 7756|      0|                    goto while_break;
 7757|      0|                }
 7758|      0|                tmp = rem * 256U + (UInt32)n->b[i];
 7759|      0|                n->b[i] = (UChar)(tmp / 10U);
 7760|      0|                rem = tmp % 10U;
 7761|      0|                i--;
 7762|      0|            }
 7763|      0|while_break: /* CIL Label */
 7764|      0|            ;
 7765|      0|        }
 7766|      0|        return ((Int32)rem);
 7767|      0|    }
 7768|      0|}
 7769|       |static void uInt64_toAscii(char *outbuf, UInt64 *n)
 7770|      0|{
 7771|      0|    Int32 i;
 7772|      0|    Int32 q;
 7773|      0|    UChar buf[32];
 7774|      0|    Int32 nBuf;
 7775|      0|    UInt64 n_copy;
 7776|      0|    Bool tmp;
 7777|      0|    void *__cil_tmp9;
 7778|      0|    void *__cil_tmp10;
 7779|       |
 7780|      0|    {
 7781|      0|        nBuf = 0;
 7782|      0|        n_copy = *n;
 7783|      0|        {
 7784|      0|            while (1) {
 7785|      0|while_continue: /* CIL Label */
 7786|      0|                ;
 7787|      0|                {
 7788|      0|                    q = uInt64_qrm10(&n_copy);
 7789|      0|                    buf[nBuf] = (UChar)(q + 48);
 7790|      0|                    nBuf++;
 7791|      0|                    tmp = uInt64_isZero(&n_copy);
 7792|      0|                }
 7793|      0|                if (tmp) {
 7794|      0|                    goto while_break;
 7795|      0|                }
 7796|      0|            }
 7797|      0|while_break: /* CIL Label */
 7798|      0|            ;
 7799|      0|        }
 7800|      0|        *(outbuf + nBuf) = (char)0;
 7801|      0|        i = 0;
 7802|      0|        {
 7803|      0|            while (1) {
 7804|      0|while_continue___0: /* CIL Label */
 7805|      0|                ;
 7806|      0|                if (!(i < nBuf)) {
 7807|      0|                    goto while_break___0;
 7808|      0|                }
 7809|      0|                *(outbuf + i) = (char)buf[(nBuf - i) - 1];
 7810|      0|                i++;
 7811|      0|            }
 7812|      0|while_break___0: /* CIL Label */
 7813|      0|            ;
 7814|      0|        }
 7815|      0|        return;
 7816|      0|    }
 7817|      0|}
 7818|       |static Bool myfeof___0(FILE *f)
 7819|      7|{
 7820|      7|    Int32 c;
 7821|      7|    Int32 tmp;
 7822|       |
 7823|      7|    {
 7824|      7|        {
 7825|      7|            tmp = fgetc(f);
 7826|      7|            c = tmp;
 7827|      7|        }
 7828|      7|        if (c == -1) {
 7829|      6|            return ((Bool)1);
 7830|      6|        }
 7831|      1|        {
 7832|      1|            ungetc(c, f);
 7833|      1|        }
 7834|      1|        return ((Bool)0);
 7835|      7|    }
 7836|      7|}
 7837|       |static void compressStream(FILE *stream, FILE *zStream)
 7838|      1|{
 7839|      1|    BZFILE *bzf;
 7840|      1|    UChar ibuf[5000];
 7841|      1|    Int32 nIbuf;
 7842|      1|    UInt32 nbytes_in_lo32;
 7843|      1|    UInt32 nbytes_in_hi32;
 7844|      1|    UInt32 nbytes_out_lo32;
 7845|      1|    UInt32 nbytes_out_hi32;
 7846|      1|    Int32 bzerr;
 7847|      1|    Int32 bzerr_dummy;
 7848|      1|    Int32 ret;
 7849|      1|    int tmp;
 7850|      1|    int tmp___0;
 7851|      1|    Bool tmp___1;
 7852|      1|    int tmp___2;
 7853|      1|    int tmp___3;
 7854|      1|    Int32 fd;
 7855|      1|    Int32 tmp___4;
 7856|      1|    int tmp___5;
 7857|      1|    Char buf_nin[32];
 7858|      1|    Char buf_nout[32];
 7859|      1|    UInt64 nbytes_in;
 7860|      1|    UInt64 nbytes_out;
 7861|      1|    double nbytes_in_d;
 7862|      1|    double nbytes_out_d;
 7863|      1|    void *__cil_tmp28;
 7864|      1|    void *__cil_tmp29;
 7865|      1|    void *__cil_tmp30;
 7866|      1|    void *__cil_tmp31;
 7867|      1|    void *__cil_tmp32;
 7868|      1|    char *__cil_tmp33;
 7869|      1|    char *__cil_tmp34;
 7870|       |
 7871|      1|    {
 7872|      1|        {
 7873|      1|            bzf = (void *)0;
 7874|      1|            tmp = ferror(stream);
 7875|      1|        }
 7876|      1|        if (tmp) {
 7877|      0|            goto errhandler_io;
 7878|      0|        }
 7879|      1|        {
 7880|      1|            tmp___0 = ferror(zStream);
 7881|      1|        }
 7882|      1|        if (tmp___0) {
 7883|      0|            goto errhandler_io;
 7884|      0|        }
 7885|      1|        {
 7886|      1|            bzf = BZ2_bzWriteOpen(&bzerr, zStream, blockSize100k, verbosity,
 7887|      1|                                  workFactor);
 7888|      1|        }
 7889|      1|        if (bzerr != 0) {
 7890|      0|            goto errhandler;
 7891|      0|        }
 7892|      1|        if (verbosity >= 2) {
 7893|      0|            {
 7894|      0|                fprintf((FILE * /* __restrict  */) stderr,
 7895|      0|                        (char const * /* __restrict  */) "\n");
 7896|      0|            }
 7897|      0|        }
 7898|      1|        {
 7899|      2|            while (1) {
 7900|      2|while_continue: /* CIL Label */
 7901|      2|                ;
 7902|      2|                {
 7903|      2|                    tmp___1 = myfeof___0(stream);
 7904|      2|                }
 7905|      2|                if (tmp___1) {
 7906|      1|                    goto while_break;
 7907|      1|                }
 7908|      1|                {
 7909|      1|                    nIbuf = (Int32)fread((void * /* __restrict  */)(ibuf), sizeof(UChar),
 7910|      1|                                         (size_t)5000, (FILE * /* __restrict  */) stream);
 7911|      1|                    tmp___2 = ferror(stream);
 7912|      1|                }
 7913|      1|                if (tmp___2) {
 7914|      0|                    goto errhandler_io;
 7915|      0|                }
 7916|      1|                if (nIbuf > 0) {
 7917|      1|                    {
 7918|      1|                        BZ2_bzWrite(&bzerr, bzf, (void *)(ibuf), nIbuf);
 7919|      1|                    }
 7920|      1|                }
 7921|      1|                if (bzerr != 0) {
 7922|      0|                    goto errhandler;
 7923|      0|                }
 7924|      1|            }
 7925|      1|while_break: /* CIL Label */
 7926|      1|            ;
 7927|      1|        }
 7928|      0|        {
 7929|      1|            BZ2_bzWriteClose64(&bzerr, bzf, 0, &nbytes_in_lo32, &nbytes_in_hi32,
 7930|      1|                               &nbytes_out_lo32, &nbytes_out_hi32);
 7931|      1|        }
 7932|      1|        if (bzerr != 0) {
 7933|      0|            goto errhandler;
 7934|      0|        }
 7935|      1|        {
 7936|      1|            tmp___3 = ferror(zStream);
 7937|      1|        }
 7938|      1|        if (tmp___3) {
 7939|      0|            goto errhandler_io;
 7940|      0|        }
 7941|      1|        {
 7942|      1|            ret = fflush(zStream);
 7943|      1|        }
 7944|      1|        if (ret == -1) {
 7945|      0|            goto errhandler_io;
 7946|      0|        }
 7947|      1|        if ((unsigned long)zStream != (unsigned long)stdout) {
 7948|      1|            {
 7949|      1|                tmp___4 = fileno(zStream);
 7950|      1|                fd = tmp___4;
 7951|      1|            }
 7952|      1|            if (fd < 0) {
 7953|      0|                goto errhandler_io;
 7954|      0|            }
 7955|      1|            {
 7956|      1|                applySavedFileAttrToOutputFile(fd);
 7957|      1|                ret = fclose(zStream);
 7958|      1|                outputHandleJustInCase = (FILE *)((void *)0);
 7959|      1|            }
 7960|      1|            if (ret == -1) {
 7961|      0|                goto errhandler_io;
 7962|      0|            }
 7963|      1|        }
 7964|      1|        {
 7965|      1|            outputHandleJustInCase = (FILE *)((void *)0);
 7966|      1|            tmp___5 = ferror(stream);
 7967|      1|        }
 7968|      1|        if (tmp___5) {
 7969|      0|            goto errhandler_io;
 7970|      0|        }
 7971|      1|        {
 7972|      1|            ret = fclose(stream);
 7973|      1|        }
 7974|      1|        if (ret == -1) {
 7975|      0|            goto errhandler_io;
 7976|      0|        }
 7977|      1|        if (verbosity >= 1) {
 7978|      0|            if (nbytes_in_lo32 == 0U) {
 7979|      0|                if (nbytes_in_hi32 == 0U) {
 7980|      0|                    {
 7981|      0|                        fprintf((FILE * /* __restrict  */) stderr,
 7982|      0|                                (char const * /* __restrict  */) " no data compressed.\n");
 7983|      0|                    }
 7984|      0|                }
 7985|      0|                else {
 7986|      0|                    goto _L;
 7987|      0|                }
 7988|      0|            }
 7989|      0|            else {
 7990|      0|_L : {
 7991|      0|                    uInt64_from_UInt32s(&nbytes_in, nbytes_in_lo32, nbytes_in_hi32);
 7992|      0|                    uInt64_from_UInt32s(&nbytes_out, nbytes_out_lo32, nbytes_out_hi32);
 7993|      0|                    nbytes_in_d = uInt64_to_double(&nbytes_in);
 7994|      0|                    nbytes_out_d = uInt64_to_double(&nbytes_out);
 7995|      0|                    uInt64_toAscii(buf_nin, &nbytes_in);
 7996|      0|                    uInt64_toAscii(buf_nout, &nbytes_out);
 7997|      0|                    fprintf(
 7998|      0|                        (FILE * /* __restrict  */) stderr,
 7999|      0|                        (char const * /* __restrict  */) "%6.3f:1, %6.3f bits/byte, "
 8000|      0|                        "%5.2f%% saved, %s in, %s out.\n",
 8001|      0|                        nbytes_in_d / nbytes_out_d, (8.0 * nbytes_out_d) / nbytes_in_d,
 8002|      0|                        100.0 * (1.0 - nbytes_out_d / nbytes_in_d), buf_nin, buf_nout);
 8003|      0|                }
 8004|      0|            }
 8005|      0|        }
 8006|      1|        return;
 8007|      1|errhandler : {
 8008|      0|            BZ2_bzWriteClose64(&bzerr_dummy, bzf, 1, &nbytes_in_lo32, &nbytes_in_hi32,
 8009|      0|                               &nbytes_out_lo32, &nbytes_out_hi32);
 8010|      0|        }
 8011|      0|        {
 8012|      0|            if (bzerr == -9) {
 8013|      0|                goto case_neg_9;
 8014|      0|            }
 8015|      0|            if (bzerr == -3) {
 8016|      0|                goto case_neg_3;
 8017|      0|            }
 8018|      0|            if (bzerr == -6) {
 8019|      0|                goto errhandler_io;
 8020|      0|            }
 8021|      0|            goto switch_default;
 8022|      0|case_neg_9 : { /* CIL Label */
 8023|      0|                configError();
 8024|      0|            }
 8025|      0|            goto switch_break;
 8026|      0|case_neg_3 : { /* CIL Label */
 8027|      0|                outOfMemory();
 8028|      0|            }
 8029|      0|            goto switch_break;
 8030|      0|errhandler_io:
 8031|      0|case_neg_6 : { /* CIL Label */
 8032|      0|                ioError();
 8033|      0|            }
 8034|      0|            goto switch_break;
 8035|      0|switch_default : { /* CIL Label */
 8036|      0|                panic("compress:unexpected error");
 8037|      0|            }
 8038|      0|switch_break: /* CIL Label */
 8039|      0|            ;
 8040|      0|        }
 8041|      0|        {
 8042|      0|            panic("compress:end");
 8043|      0|        }
 8044|      0|    }
 8045|      0|}
 8046|       |static Bool uncompressStream(FILE *zStream, FILE *stream)
 8047|      5|{
 8048|      5|    BZFILE *bzf;
 8049|      5|    Int32 bzerr;
 8050|      5|    Int32 bzerr_dummy;
 8051|      5|    Int32 ret;
 8052|      5|    Int32 nread;
 8053|      5|    Int32 streamNo;
 8054|      5|    Int32 i;
 8055|      5|    UChar obuf[5000];
 8056|      5|    UChar unused[5000];
 8057|      5|    Int32 nUnused;
 8058|      5|    void *unusedTmpV;
 8059|      5|    UChar *unusedTmp;
 8060|      5|    int tmp;
 8061|      5|    int tmp___0;
 8062|      5|    int tmp___1;
 8063|      5|    Bool tmp___2;
 8064|      5|    int tmp___3;
 8065|      5|    Int32 fd;
 8066|      5|    Int32 tmp___4;
 8067|      5|    int tmp___5;
 8068|      5|    Bool tmp___6;
 8069|      5|    int tmp___7;
 8070|      5|    int tmp___8;
 8071|      5|    void *__cil_tmp27;
 8072|      5|    void *__cil_tmp28;
 8073|      5|    char *__cil_tmp29;
 8074|      5|    char *__cil_tmp30;
 8075|      5|    char *__cil_tmp31;
 8076|      5|    char *__cil_tmp32;
 8077|       |
 8078|      5|    {
 8079|      5|        {
 8080|      5|            bzf = (void *)0;
 8081|      5|            nUnused = 0;
 8082|      5|            streamNo = 0;
 8083|      5|            tmp = ferror(stream);
 8084|      5|        }
 8085|      5|        if (tmp) {
 8086|      0|            goto errhandler_io;
 8087|      0|        }
 8088|      5|        {
 8089|      5|            tmp___0 = ferror(zStream);
 8090|      5|        }
 8091|      5|        if (tmp___0) {
 8092|      0|            goto errhandler_io;
 8093|      0|        }
 8094|      5|        {
 8095|      5|            while (1) {
 8096|      5|while_continue: /* CIL Label */
 8097|      5|                ;
 8098|      5|                {
 8099|      5|                    bzf = BZ2_bzReadOpen(&bzerr, zStream, verbosity, (int)smallMode,
 8100|      5|                                         (void *)(unused), nUnused);
 8101|      5|                }
 8102|      5|                if ((unsigned long)bzf == (unsigned long)((void *)0)) {
 8103|      0|                    goto errhandler;
 8104|      0|                }
 8105|      5|                else {
 8106|      5|                    if (bzerr != 0) {
 8107|      0|                        goto errhandler;
 8108|      0|                    }
 8109|      5|                }
 8110|      5|                streamNo++;
 8111|      5|                {
 8112|    312|                    while (1) {
 8113|    312|while_continue___0: /* CIL Label */
 8114|    312|                        ;
 8115|    312|                        if (!(bzerr == 0)) {
 8116|      5|                            goto while_break___0;
 8117|      5|                        }
 8118|    307|                        {
 8119|    307|                            nread = BZ2_bzRead(&bzerr, bzf, (void *)(obuf), 5000);
 8120|    307|                        }
 8121|    307|                        if (bzerr == -5) {
 8122|      0|                            goto trycat;
 8123|      0|                        }
 8124|    307|                        if (bzerr == 0) {
 8125|    302|                            goto _L;
 8126|    302|                        }
 8127|      5|                        else {
 8128|      5|                            if (bzerr == 4) {
 8129|    307|_L:
 8130|    307|                                if (nread > 0) {
 8131|    305|                                    {
 8132|    305|                                        fwrite((void const * /* __restrict  */)(obuf),
 8133|    305|                                               sizeof(UChar), (size_t)nread,
 8134|    305|                                               (FILE * /* __restrict  */) stream);
 8135|    305|                                    }
 8136|    305|                                }
 8137|    307|                            }
 8138|      5|                        }
 8139|    307|                        {
 8140|    307|                            tmp___1 = ferror(stream);
 8141|    307|                        }
 8142|    307|                        if (tmp___1) {
 8143|      0|                            goto errhandler_io;
 8144|      0|                        }
 8145|    307|                    }
 8146|      5|while_break___0: /* CIL Label */
 8147|      5|                    ;
 8148|      5|                }
 8149|      5|                if (bzerr != 4) {
 8150|      0|                    goto errhandler;
 8151|      0|                }
 8152|      5|                {
 8153|      5|                    BZ2_bzReadGetUnused(&bzerr, bzf, &unusedTmpV, &nUnused);
 8154|      5|                }
 8155|      5|                if (bzerr != 0) {
 8156|      0|                    {
 8157|      0|                        panic("decompress:bzReadGetUnused");
 8158|      0|                    }
 8159|      0|                }
 8160|      5|                unusedTmp = (UChar *)unusedTmpV;
 8161|      5|                i = 0;
 8162|      5|                {
 8163|      5|                    while (1) {
 8164|      5|while_continue___1: /* CIL Label */
 8165|      5|                        ;
 8166|      5|                        if (!(i < nUnused)) {
 8167|      5|                            goto while_break___1;
 8168|      5|                        }
 8169|      0|                        unused[i] = *(unusedTmp + i);
 8170|      0|                        i++;
 8171|      0|                    }
 8172|      5|while_break___1: /* CIL Label */
 8173|      5|                    ;
 8174|      5|                }
 8175|      0|                {
 8176|      5|                    BZ2_bzReadClose(&bzerr, bzf);
 8177|      5|                }
 8178|      5|                if (bzerr != 0) {
 8179|      0|                    {
 8180|      0|                        panic("decompress:bzReadGetUnused");
 8181|      0|                    }
 8182|      0|                }
 8183|      5|                if (nUnused == 0) {
 8184|      5|                    {
 8185|      5|                        tmp___2 = myfeof___0(zStream);
 8186|      5|                    }
 8187|      5|                    if (tmp___2) {
 8188|      5|                        goto while_break;
 8189|      5|                    }
 8190|      5|                }
 8191|      5|            }
 8192|      5|while_break: /* CIL Label */
 8193|      5|            ;
 8194|      5|        }
 8195|      5|closeok : {
 8196|      5|            tmp___3 = ferror(zStream);
 8197|      5|        }
 8198|      5|        if (tmp___3) {
 8199|      0|            goto errhandler_io;
 8200|      0|        }
 8201|      5|        if ((unsigned long)stream != (unsigned long)stdout) {
 8202|      5|            {
 8203|      5|                tmp___4 = fileno(stream);
 8204|      5|                fd = tmp___4;
 8205|      5|            }
 8206|      5|            if (fd < 0) {
 8207|      0|                goto errhandler_io;
 8208|      0|            }
 8209|      5|            {
 8210|      5|                applySavedFileAttrToOutputFile(fd);
 8211|      5|            }
 8212|      5|        }
 8213|      5|        {
 8214|      5|            ret = fclose(zStream);
 8215|      5|        }
 8216|      5|        if (ret == -1) {
 8217|      0|            goto errhandler_io;
 8218|      0|        }
 8219|      5|        {
 8220|      5|            tmp___5 = ferror(stream);
 8221|      5|        }
 8222|      5|        if (tmp___5) {
 8223|      0|            goto errhandler_io;
 8224|      0|        }
 8225|      5|        {
 8226|      5|            ret = fflush(stream);
 8227|      5|        }
 8228|      5|        if (ret != 0) {
 8229|      0|            goto errhandler_io;
 8230|      0|        }
 8231|      5|        if ((unsigned long)stream != (unsigned long)stdout) {
 8232|      5|            {
 8233|      5|                ret = fclose(stream);
 8234|      5|                outputHandleJustInCase = (FILE *)((void *)0);
 8235|      5|            }
 8236|      5|            if (ret == -1) {
 8237|      0|                goto errhandler_io;
 8238|      0|            }
 8239|      5|        }
 8240|      5|        outputHandleJustInCase = (FILE *)((void *)0);
 8241|      5|        if (verbosity >= 2) {
 8242|      0|            {
 8243|      0|                fprintf((FILE * /* __restrict  */) stderr,
 8244|      0|                        (char const * /* __restrict  */) "\n    ");
 8245|      0|            }
 8246|      0|        }
 8247|      5|        return ((Bool)1);
 8248|      0|trycat:
 8249|      0|        if (forceOverwrite) {
 8250|      0|            {
 8251|      0|                rewind(zStream);
 8252|      0|            }
 8253|      0|            {
 8254|      0|                while (1) {
 8255|      0|while_continue___2: /* CIL Label */
 8256|      0|                    ;
 8257|      0|                    {
 8258|      0|                        tmp___6 = myfeof___0(zStream);
 8259|      0|                    }
 8260|      0|                    if (tmp___6) {
 8261|      0|                        goto while_break___2;
 8262|      0|                    }
 8263|      0|                    {
 8264|      0|                        nread =
 8265|      0|                            (Int32)fread((void * /* __restrict  */)(obuf), sizeof(UChar),
 8266|      0|                                         (size_t)5000, (FILE * /* __restrict  */) zStream);
 8267|      0|                        tmp___7 = ferror(zStream);
 8268|      0|                    }
 8269|      0|                    if (tmp___7) {
 8270|      0|                        goto errhandler_io;
 8271|      0|                    }
 8272|      0|                    if (nread > 0) {
 8273|      0|                        {
 8274|      0|                            fwrite((void const * /* __restrict  */)(obuf), sizeof(UChar),
 8275|      0|                                   (size_t)nread, (FILE * /* __restrict  */) stream);
 8276|      0|                        }
 8277|      0|                    }
 8278|      0|                    {
 8279|      0|                        tmp___8 = ferror(stream);
 8280|      0|                    }
 8281|      0|                    if (tmp___8) {
 8282|      0|                        goto errhandler_io;
 8283|      0|                    }
 8284|      0|                }
 8285|      0|while_break___2: /* CIL Label */
 8286|      0|                ;
 8287|      0|            }
 8288|      0|            goto closeok;
 8289|      0|        }
 8290|      0|errhandler : {
 8291|      0|            BZ2_bzReadClose(&bzerr_dummy, bzf);
 8292|      0|        }
 8293|      0|        {
 8294|      0|            if (bzerr == -9) {
 8295|      0|                goto case_neg_9;
 8296|      0|            }
 8297|      0|            if (bzerr == -6) {
 8298|      0|                goto errhandler_io;
 8299|      0|            }
 8300|      0|            if (bzerr == -4) {
 8301|      0|                goto case_neg_4;
 8302|      0|            }
 8303|      0|            if (bzerr == -3) {
 8304|      0|                goto case_neg_3;
 8305|      0|            }
 8306|      0|            if (bzerr == -7) {
 8307|      0|                goto case_neg_7;
 8308|      0|            }
 8309|      0|            if (bzerr == -5) {
 8310|      0|                goto case_neg_5;
 8311|      0|            }
 8312|      0|            goto switch_default;
 8313|      0|case_neg_9 : { /* CIL Label */
 8314|      0|                configError();
 8315|      0|            }
 8316|      0|            goto switch_break;
 8317|      0|errhandler_io:
 8318|      0|case_neg_6 : { /* CIL Label */
 8319|      0|                ioError();
 8320|      0|            }
 8321|      0|            goto switch_break;
 8322|      0|case_neg_4 : { /* CIL Label */
 8323|      0|                crcError();
 8324|      0|            }
 8325|      0|case_neg_3 : { /* CIL Label */
 8326|      0|                outOfMemory();
 8327|      0|            }
 8328|      0|case_neg_7 : { /* CIL Label */
 8329|      0|                compressedStreamEOF();
 8330|      0|            }
 8331|      0|case_neg_5: /* CIL Label */
 8332|      0|            if ((unsigned long)zStream != (unsigned long)stdin) {
 8333|      0|                {
 8334|      0|                    fclose(zStream);
 8335|      0|                }
 8336|      0|            }
 8337|      0|            if ((unsigned long)stream != (unsigned long)stdout) {
 8338|      0|                {
 8339|      0|                    fclose(stream);
 8340|      0|                }
 8341|      0|            }
 8342|      0|            if (streamNo == 1) {
 8343|      0|                return ((Bool)0);
 8344|      0|            }
 8345|      0|            else {
 8346|      0|                if (noisy) {
 8347|      0|                    {
 8348|      0|                        fprintf(
 8349|      0|                            (FILE * /* __restrict  */) stderr,
 8350|      0|                            (char const * /* __restrict  */) "\n%s: %s: trailing garbage "
 8351|      0|                            "after EOF ignored\n",
 8352|      0|                            progName, inName);
 8353|      0|                    }
 8354|      0|                }
 8355|      0|                return ((Bool)1);
 8356|      0|            }
 8357|      0|switch_default : { /* CIL Label */
 8358|      0|                panic("decompress:unexpected error");
 8359|      0|            }
 8360|      0|switch_break: /* CIL Label */
 8361|      0|            ;
 8362|      0|        }
 8363|      0|        {
 8364|      0|            panic("decompress:end");
 8365|      0|        }
 8366|      0|        return ((Bool)1);
 8367|      0|    }
 8368|      0|}
 8369|       |static Bool testStream(FILE *zStream)
 8370|      0|{
 8371|      0|    BZFILE *bzf;
 8372|      0|    Int32 bzerr;
 8373|      0|    Int32 bzerr_dummy;
 8374|      0|    Int32 ret;
 8375|      0|    Int32 nread;
 8376|      0|    Int32 streamNo;
 8377|      0|    Int32 i;
 8378|      0|    UChar obuf[5000];
 8379|      0|    UChar unused[5000];
 8380|      0|    Int32 nUnused;
 8381|      0|    void *unusedTmpV;
 8382|      0|    UChar *unusedTmp;
 8383|      0|    int tmp;
 8384|      0|    Bool tmp___0;
 8385|      0|    int tmp___1;
 8386|      0|    void *__cil_tmp17;
 8387|      0|    void *__cil_tmp18;
 8388|      0|    char *__cil_tmp19;
 8389|      0|    char *__cil_tmp20;
 8390|      0|    char *__cil_tmp21;
 8391|      0|    char *__cil_tmp22;
 8392|       |
 8393|      0|    {
 8394|      0|        {
 8395|      0|            bzf = (void *)0;
 8396|      0|            nUnused = 0;
 8397|      0|            streamNo = 0;
 8398|      0|            tmp = ferror(zStream);
 8399|      0|        }
 8400|      0|        if (tmp) {
 8401|      0|            goto errhandler_io;
 8402|      0|        }
 8403|      0|        {
 8404|      0|            while (1) {
 8405|      0|while_continue: /* CIL Label */
 8406|      0|                ;
 8407|      0|                {
 8408|      0|                    bzf = BZ2_bzReadOpen(&bzerr, zStream, verbosity, (int)smallMode,
 8409|      0|                                         (void *)(unused), nUnused);
 8410|      0|                }
 8411|      0|                if ((unsigned long)bzf == (unsigned long)((void *)0)) {
 8412|      0|                    goto errhandler;
 8413|      0|                }
 8414|      0|                else {
 8415|      0|                    if (bzerr != 0) {
 8416|      0|                        goto errhandler;
 8417|      0|                    }
 8418|      0|                }
 8419|      0|                streamNo++;
 8420|      0|                {
 8421|      0|                    while (1) {
 8422|      0|while_continue___0: /* CIL Label */
 8423|      0|                        ;
 8424|      0|                        if (!(bzerr == 0)) {
 8425|      0|                            goto while_break___0;
 8426|      0|                        }
 8427|      0|                        {
 8428|      0|                            nread = BZ2_bzRead(&bzerr, bzf, (void *)(obuf), 5000);
 8429|      0|                        }
 8430|      0|                        if (bzerr == -5) {
 8431|      0|                            goto errhandler;
 8432|      0|                        }
 8433|      0|                    }
 8434|      0|while_break___0: /* CIL Label */
 8435|      0|                    ;
 8436|      0|                }
 8437|      0|                if (bzerr != 4) {
 8438|      0|                    goto errhandler;
 8439|      0|                }
 8440|      0|                {
 8441|      0|                    BZ2_bzReadGetUnused(&bzerr, bzf, &unusedTmpV, &nUnused);
 8442|      0|                }
 8443|      0|                if (bzerr != 0) {
 8444|      0|                    {
 8445|      0|                        panic("test:bzReadGetUnused");
 8446|      0|                    }
 8447|      0|                }
 8448|      0|                unusedTmp = (UChar *)unusedTmpV;
 8449|      0|                i = 0;
 8450|      0|                {
 8451|      0|                    while (1) {
 8452|      0|while_continue___1: /* CIL Label */
 8453|      0|                        ;
 8454|      0|                        if (!(i < nUnused)) {
 8455|      0|                            goto while_break___1;
 8456|      0|                        }
 8457|      0|                        unused[i] = *(unusedTmp + i);
 8458|      0|                        i++;
 8459|      0|                    }
 8460|      0|while_break___1: /* CIL Label */
 8461|      0|                    ;
 8462|      0|                }
 8463|      0|                {
 8464|      0|                    BZ2_bzReadClose(&bzerr, bzf);
 8465|      0|                }
 8466|      0|                if (bzerr != 0) {
 8467|      0|                    {
 8468|      0|                        panic("test:bzReadGetUnused");
 8469|      0|                    }
 8470|      0|                }
 8471|      0|                if (nUnused == 0) {
 8472|      0|                    {
 8473|      0|                        tmp___0 = myfeof___0(zStream);
 8474|      0|                    }
 8475|      0|                    if (tmp___0) {
 8476|      0|                        goto while_break;
 8477|      0|                    }
 8478|      0|                }
 8479|      0|            }
 8480|      0|while_break: /* CIL Label */
 8481|      0|            ;
 8482|      0|        }
 8483|      0|        {
 8484|      0|            tmp___1 = ferror(zStream);
 8485|      0|        }
 8486|      0|        if (tmp___1) {
 8487|      0|            goto errhandler_io;
 8488|      0|        }
 8489|      0|        {
 8490|      0|            ret = fclose(zStream);
 8491|      0|        }
 8492|      0|        if (ret == -1) {
 8493|      0|            goto errhandler_io;
 8494|      0|        }
 8495|      0|        if (verbosity >= 2) {
 8496|      0|            {
 8497|      0|                fprintf((FILE * /* __restrict  */) stderr,
 8498|      0|                        (char const * /* __restrict  */) "\n    ");
 8499|      0|            }
 8500|      0|        }
 8501|      0|        return ((Bool)1);
 8502|      0|errhandler : {
 8503|      0|            BZ2_bzReadClose(&bzerr_dummy, bzf);
 8504|      0|        }
 8505|      0|        if (verbosity == 0) {
 8506|      0|            {
 8507|      0|                fprintf((FILE * /* __restrict  */) stderr,
 8508|      0|                        (char const * /* __restrict  */) "%s: %s: ", progName, inName);
 8509|      0|            }
 8510|      0|        }
 8511|      0|        {
 8512|      0|            if (bzerr == -9) {
 8513|      0|                goto case_neg_9;
 8514|      0|            }
 8515|      0|            if (bzerr == -6) {
 8516|      0|                goto errhandler_io;
 8517|      0|            }
 8518|      0|            if (bzerr == -4) {
 8519|      0|                goto case_neg_4;
 8520|      0|            }
 8521|      0|            if (bzerr == -3) {
 8522|      0|                goto case_neg_3;
 8523|      0|            }
 8524|      0|            if (bzerr == -7) {
 8525|      0|                goto case_neg_7;
 8526|      0|            }
 8527|      0|            if (bzerr == -5) {
 8528|      0|                goto case_neg_5;
 8529|      0|            }
 8530|      0|            goto switch_default;
 8531|      0|case_neg_9 : { /* CIL Label */
 8532|      0|                configError();
 8533|      0|            }
 8534|      0|            goto switch_break;
 8535|      0|errhandler_io:
 8536|      0|case_neg_6 : { /* CIL Label */
 8537|      0|                ioError();
 8538|      0|            }
 8539|      0|            goto switch_break;
 8540|      0|case_neg_4 : { /* CIL Label */
 8541|      0|                fprintf((FILE * /* __restrict  */) stderr,
 8542|      0|                        (char const
 8543|      0|                         * /* __restrict  */) "data integrity (CRC) error in data\n");
 8544|      0|            }
 8545|      0|            return ((Bool)0);
 8546|      0|case_neg_3 : { /* CIL Label */
 8547|      0|                outOfMemory();
 8548|      0|            }
 8549|      0|case_neg_7 : { /* CIL Label */
 8550|      0|                fprintf((FILE * /* __restrict  */) stderr,
 8551|      0|                        (char const * /* __restrict  */) "file ends unexpectedly\n");
 8552|      0|            }
 8553|      0|            return ((Bool)0);
 8554|      0|case_neg_5: /* CIL Label */
 8555|      0|            if ((unsigned long)zStream != (unsigned long)stdin) {
 8556|      0|                {
 8557|      0|                    fclose(zStream);
 8558|      0|                }
 8559|      0|            }
 8560|      0|            if (streamNo == 1) {
 8561|      0|                {
 8562|      0|                    fprintf((FILE * /* __restrict  */) stderr,
 8563|      0|                            (char const * /* __restrict  */) "bad magic number (file not "
 8564|      0|                            "created by bzip2)\n");
 8565|      0|                }
 8566|      0|                return ((Bool)0);
 8567|      0|            }
 8568|      0|            else {
 8569|      0|                if (noisy) {
 8570|      0|                    {
 8571|      0|                        fprintf((FILE * /* __restrict  */) stderr,
 8572|      0|                                (char const * /* __restrict  */) "trailing garbage after "
 8573|      0|                                "EOF ignored\n");
 8574|      0|                    }
 8575|      0|                }
 8576|      0|                return ((Bool)1);
 8577|      0|            }
 8578|      0|switch_default : { /* CIL Label */
 8579|      0|                panic("test:unexpected error");
 8580|      0|            }
 8581|      0|switch_break: /* CIL Label */
 8582|      0|            ;
 8583|      0|        }
 8584|      0|        {
 8585|      0|            panic("test:end");
 8586|      0|        }
 8587|      0|        return ((Bool)1);
 8588|      0|    }
 8589|      0|}
 8590|       |static void setExit(Int32 v)
 8591|      0|{
 8592|       |
 8593|      0|    {
 8594|      0|        if (v > exitValue) {
 8595|      0|            exitValue = v;
 8596|      0|        }
 8597|      0|        return;
 8598|      0|    }
 8599|      0|}
 8600|       |static void cadvise(void)
 8601|      0|{
 8602|       |
 8603|      0|    {
 8604|      0|        if (noisy) {
 8605|      0|            {
 8606|      0|                fprintf(
 8607|      0|                    (FILE * /* __restrict  */) stderr,
 8608|      0|                    (char const
 8609|      0|                     * /* __restrict  */) "\nIt is possible that the compressed "
 8610|      0|                    "file(s) have become corrupted.\nYou can "
 8611|      0|                    "use the -tvv option to test integrity "
 8612|      0|                    "of such files.\n\nYou can use the "
 8613|      0|                    "`bzip2recover\' program to attempt to "
 8614|      0|                    "recover\ndata from undamaged sections "
 8615|      0|                    "of corrupted files.\n\n");
 8616|      0|            }
 8617|      0|        }
 8618|      0|        return;
 8619|      0|    }
 8620|      0|}
 8621|       |static void showFileNames(void)
 8622|      0|{
 8623|       |
 8624|      0|    {
 8625|      0|        if (noisy) {
 8626|      0|            {
 8627|      0|                fprintf(
 8628|      0|                    (FILE * /* __restrict  */) stderr,
 8629|      0|                    (char const
 8630|      0|                     * /* __restrict  */) "\tInput file = %s, output file = %s\n",
 8631|      0|                    inName, outName);
 8632|      0|            }
 8633|      0|        }
 8634|      0|        return;
 8635|      0|    }
 8636|      0|}
 8637|       |static __attribute__((__noreturn__)) void cleanUpAndFail(Int32 ec);
 8638|       |static void cleanUpAndFail(Int32 ec)
 8639|      0|{
 8640|      0|    IntNative retVal;
 8641|      0|    struct stat statBuf;
 8642|      0|    void *__cil_tmp4;
 8643|       |
 8644|      0|    {
 8645|      0|        if (srcMode == 3) {
 8646|      0|            if (opMode != 3) {
 8647|      0|                if (deleteOutputOnInterrupt) {
 8648|      0|                    {
 8649|      0|                        retVal = stat((char const * /* __restrict  */)(inName),
 8650|      0|                                      (struct stat * /* __restrict  */)(&statBuf));
 8651|      0|                    }
 8652|      0|                    if (retVal == 0) {
 8653|      0|                        if (noisy) {
 8654|      0|                            {
 8655|      0|                                fprintf(
 8656|      0|                                    (FILE * /* __restrict  */) stderr,
 8657|      0|                                    (char const * /* __restrict  */) "%s: Deleting output file "
 8658|      0|                                    "%s, if it exists.\n",
 8659|      0|                                    progName, outName);
 8660|      0|                            }
 8661|      0|                        }
 8662|      0|                        if ((unsigned long)outputHandleJustInCase !=
 8663|      0|                                (unsigned long)((void *)0)) {
 8664|      0|                            {
 8665|      0|                                fclose(outputHandleJustInCase);
 8666|      0|                            }
 8667|      0|                        }
 8668|      0|                        {
 8669|      0|                            retVal = remove((char const *)(outName));
 8670|      0|                        }
 8671|      0|                        if (retVal != 0) {
 8672|      0|                            {
 8673|      0|                                fprintf(
 8674|      0|                                    (FILE * /* __restrict  */) stderr,
 8675|      0|                                    (char const
 8676|      0|                                     * /* __restrict  */) "%s: WARNING: deletion of output "
 8677|      0|                                    "file (apparently) failed.\n",
 8678|      0|                                    progName);
 8679|      0|                            }
 8680|      0|                        }
 8681|      0|                    }
 8682|      0|                    else {
 8683|      0|                        {
 8684|      0|                            fprintf(
 8685|      0|                                (FILE * /* __restrict  */) stderr,
 8686|      0|                                (char const * /* __restrict  */) "%s: WARNING: deletion of "
 8687|      0|                                "output file suppressed\n",
 8688|      0|                                progName);
 8689|      0|                            fprintf((FILE * /* __restrict  */) stderr,
 8690|      0|                                    (char const
 8691|      0|                                     * /* __restrict  */) "%s:    since input file no "
 8692|      0|                                    "longer exists.  Output file\n",
 8693|      0|                                    progName);
 8694|      0|                            fprintf(
 8695|      0|                                (FILE * /* __restrict  */) stderr,
 8696|      0|                                (char const
 8697|      0|                                 * /* __restrict  */) "%s:    `%s\' may be incomplete.\n",
 8698|      0|                                progName, outName);
 8699|      0|                            fprintf((FILE * /* __restrict  */) stderr,
 8700|      0|                                    (char const * /* __restrict  */) "%s:    I suggest doing "
 8701|      0|                                    "an integrity test "
 8702|      0|                                    "(bzip2 -tv) of it.\n",
 8703|      0|                                    progName);
 8704|      0|                        }
 8705|      0|                    }
 8706|      0|                }
 8707|      0|            }
 8708|      0|        }
 8709|      0|        if (noisy) {
 8710|      0|            if (numFileNames > 0) {
 8711|      0|                if (numFilesProcessed < numFileNames) {
 8712|      0|                    {
 8713|      0|                        fprintf((FILE * /* __restrict  */) stderr,
 8714|      0|                                (char const
 8715|      0|                                 * /* __restrict  */) "%s: WARNING: some files have "
 8716|      0|                                "not been processed:\n%s:    %d "
 8717|      0|                                "specified on command line, %d "
 8718|      0|                                "not processed yet.\n\n",
 8719|      0|                                progName, progName, numFileNames,
 8720|      0|                                numFileNames - numFilesProcessed);
 8721|      0|                    }
 8722|      0|                }
 8723|      0|            }
 8724|      0|        }
 8725|      0|        {
 8726|      0|            setExit(ec);
 8727|      0|            exit(exitValue);
 8728|      0|        }
 8729|      0|    }
 8730|      0|}
 8731|       |static __attribute__((__noreturn__)) void panic(Char const *s);
 8732|       |static void panic(Char const *s)
 8733|      0|{
 8734|       |
 8735|      0|    {
 8736|      0|        {
 8737|      0|            fprintf(
 8738|      0|                (FILE * /* __restrict  */) stderr,
 8739|      0|                (char const
 8740|      0|                 * /* __restrict  */) "\n%s: PANIC -- internal consistency "
 8741|      0|                "error:\n\t%s\n\tThis is a BUG.  Please "
 8742|      0|                "report it to me at:\n\tjseward@bzip.org\n",
 8743|      0|                progName, s);
 8744|      0|            showFileNames();
 8745|      0|            cleanUpAndFail(3);
 8746|      0|        }
 8747|      0|    }
 8748|      0|}
 8749|       |static __attribute__((__noreturn__)) void crcError(void);
 8750|       |static void crcError(void)
 8751|      0|{
 8752|       |
 8753|      0|    {
 8754|      0|        {
 8755|      0|            fprintf((FILE * /* __restrict  */) stderr,
 8756|      0|                    (char const * /* __restrict  */) "\n%s: Data integrity error "
 8757|      0|                    "when decompressing.\n",
 8758|      0|                    progName);
 8759|      0|            showFileNames();
 8760|      0|            cadvise();
 8761|      0|            cleanUpAndFail(2);
 8762|      0|        }
 8763|      0|    }
 8764|      0|}
 8765|       |static __attribute__((__noreturn__)) void compressedStreamEOF(void);
 8766|       |static void compressedStreamEOF(void)
 8767|      0|{
 8768|       |
 8769|      0|    {
 8770|      0|        if (noisy) {
 8771|      0|            {
 8772|      0|                fprintf((FILE * /* __restrict  */) stderr,
 8773|      0|                        (char const * /* __restrict  */) "\n%s: Compressed file ends "
 8774|      0|                        "unexpectedly;\n\tperhaps it "
 8775|      0|                        "is corrupted?  *Possible* "
 8776|      0|                        "reason follows.\n",
 8777|      0|                        progName);
 8778|      0|                perror((char const *)progName);
 8779|      0|                showFileNames();
 8780|      0|                cadvise();
 8781|      0|            }
 8782|      0|        }
 8783|      0|        {
 8784|      0|            cleanUpAndFail(2);
 8785|      0|        }
 8786|      0|    }
 8787|      0|}
 8788|       |static __attribute__((__noreturn__)) void ioError(void);
 8789|       |static void ioError(void)
 8790|      0|{
 8791|       |
 8792|      0|    {
 8793|      0|        {
 8794|      0|            fprintf(
 8795|      0|                (FILE * /* __restrict  */) stderr,
 8796|      0|                (char const * /* __restrict  */) "\n%s: I/O or other error, bailing "
 8797|      0|                "out.  Possible reason follows.\n",
 8798|      0|                progName);
 8799|      0|            perror((char const *)progName);
 8800|      0|            showFileNames();
 8801|      0|            cleanUpAndFail(1);
 8802|      0|        }
 8803|      0|    }
 8804|      0|}
 8805|       |static void mySignalCatcher(IntNative n)
 8806|      0|{
 8807|       |
 8808|      0|    {
 8809|      0|        {
 8810|      0|            fprintf((FILE * /* __restrict  */) stderr,
 8811|      0|                    (char const * /* __restrict  */) "\n%s: Control-C or similar "
 8812|      0|                    "caught, quitting.\n",
 8813|      0|                    progName);
 8814|      0|            cleanUpAndFail(1);
 8815|      0|        }
 8816|      0|    }
 8817|      0|}
 8818|       |static void mySIGSEGVorSIGBUScatcher(IntNative n)
 8819|      0|{
 8820|       |
 8821|      0|    {
 8822|      0|        if (opMode == 1) {
 8823|      0|            {
 8824|      0|                fprintf(
 8825|      0|                    (FILE * /* __restrict  */) stderr,
 8826|      0|                    (char const
 8827|      0|                     * /* __restrict  */) "\n%s: Caught a SIGSEGV or SIGBUS whilst "
 8828|      0|                    "compressing.\n\n   Possible causes are "
 8829|      0|                    "(most likely first):\n   (1) This "
 8830|      0|                    "computer has unreliable memory or cache "
 8831|      0|                    "hardware\n       (a surprisingly common "
 8832|      0|                    "problem; try a different machine.)\n   "
 8833|      0|                    "(2) A bug in the compiler used to "
 8834|      0|                    "create this executable\n       "
 8835|      0|                    "(unlikely, if you didn\'t compile bzip2 "
 8836|      0|                    "yourself.)\n   (3) A real bug in bzip2 "
 8837|      0|                    "-- I hope this should never be the "
 8838|      0|                    "case.\n   The user\'s manual, Section "
 8839|      0|                    "4.3, has more info on (1) and (2).\n   "
 8840|      0|                    "\n   If you suspect this is a bug in "
 8841|      0|                    "bzip2, or are unsure about (1)\n   or "
 8842|      0|                    "(2), feel free to report it to me at: "
 8843|      0|                    "jseward@bzip.org.\n   Section 4.3 of "
 8844|      0|                    "the user\'s manual describes the info a "
 8845|      0|                    "useful\n   bug report should have.  If "
 8846|      0|                    "the manual is available on your\n   "
 8847|      0|                    "system, please try and read it before "
 8848|      0|                    "mailing me.  If you don\'t\n   have the "
 8849|      0|                    "manual or can\'t be bothered to read "
 8850|      0|                    "it, mail me anyway.\n\n",
 8851|      0|                    progName);
 8852|      0|            }
 8853|      0|        }
 8854|      0|        else {
 8855|      0|            {
 8856|      0|                fprintf(
 8857|      0|                    (FILE * /* __restrict  */) stderr,
 8858|      0|                    (char const
 8859|      0|                     * /* __restrict  */) "\n%s: Caught a SIGSEGV or SIGBUS whilst "
 8860|      0|                    "decompressing.\n\n   Possible causes "
 8861|      0|                    "are (most likely first):\n   (1) The "
 8862|      0|                    "compressed data is corrupted, and "
 8863|      0|                    "bzip2\'s usual checks\n       failed to "
 8864|      0|                    "detect this.  Try bzip2 -tvv "
 8865|      0|                    "my_file.bz2.\n   (2) This computer has "
 8866|      0|                    "unreliable memory or cache hardware\n   "
 8867|      0|                    "    (a surprisingly common problem; try "
 8868|      0|                    "a different machine.)\n   (3) A bug in "
 8869|      0|                    "the compiler used to create this "
 8870|      0|                    "executable\n       (unlikely, if you "
 8871|      0|                    "didn\'t compile bzip2 yourself.)\n   "
 8872|      0|                    "(4) A real bug in bzip2 -- I hope this "
 8873|      0|                    "should never be the case.\n   The "
 8874|      0|                    "user\'s manual, Section 4.3, has more "
 8875|      0|                    "info on (2) and (3).\n   \n   If you "
 8876|      0|                    "suspect this is a bug in bzip2, or are "
 8877|      0|                    "unsure about (2)\n   or (3), feel free "
 8878|      0|                    "to report it to me at: "
 8879|      0|                    "jseward@bzip.org.\n   Section 4.3 of "
 8880|      0|                    "the user\'s manual describes the info a "
 8881|      0|                    "useful\n   bug report should have.  If "
 8882|      0|                    "the manual is available on your\n   "
 8883|      0|                    "system, please try and read it before "
 8884|      0|                    "mailing me.  If you don\'t\n   have the "
 8885|      0|                    "manual or can\'t be bothered to read "
 8886|      0|                    "it, mail me anyway.\n\n",
 8887|      0|                    progName);
 8888|      0|            }
 8889|      0|        }
 8890|      0|        {
 8891|      0|            showFileNames();
 8892|      0|        }
 8893|      0|        if (opMode == 1) {
 8894|      0|            {
 8895|      0|                cleanUpAndFail(3);
 8896|      0|            }
 8897|      0|        }
 8898|      0|        else {
 8899|      0|            {
 8900|      0|                cadvise();
 8901|      0|                cleanUpAndFail(2);
 8902|      0|            }
 8903|      0|        }
 8904|      0|    }
 8905|      0|}
 8906|       |static __attribute__((__noreturn__)) void outOfMemory(void);
 8907|       |static void outOfMemory(void)
 8908|      0|{
 8909|       |
 8910|      0|    {
 8911|      0|        {
 8912|      0|            fprintf(
 8913|      0|                (FILE * /* __restrict  */) stderr,
 8914|      0|                (char const
 8915|      0|                 * /* __restrict  */) "\n%s: couldn\'t allocate enough memory\n",
 8916|      0|                progName);
 8917|      0|            showFileNames();
 8918|      0|            cleanUpAndFail(1);
 8919|      0|        }
 8920|      0|    }
 8921|      0|}
 8922|       |static __attribute__((__noreturn__)) void configError(void);
 8923|       |static void configError(void)
 8924|      0|{
 8925|       |
 8926|      0|    {
 8927|      0|        {
 8928|      0|            fprintf(
 8929|      0|                (FILE * /* __restrict  */) stderr,
 8930|      0|                (char const
 8931|      0|                 * /* __restrict  */) "bzip2: I\'m not configured correctly for "
 8932|      0|                "this platform!\n\tI require Int32, Int16 "
 8933|      0|                "and Char to have sizes\n\tof 4, 2 and 1 "
 8934|      0|                "bytes to run properly, and they "
 8935|      0|                "don\'t.\n\tProbably you can fix this by "
 8936|      0|                "defining them correctly,\n\tand "
 8937|      0|                "recompiling.  Bye!\n");
 8938|      0|            setExit(3);
 8939|      0|            exit(exitValue);
 8940|      0|        }
 8941|      0|    }
 8942|      0|}
 8943|       |static void pad(Char *s)
 8944|      0|{
 8945|      0|    Int32 i;
 8946|      0|    size_t tmp;
 8947|      0|    size_t tmp___0;
 8948|       |
 8949|      0|    {
 8950|      0|        {
 8951|      0|            tmp = strlen((char const *)s);
 8952|      0|        }
 8953|      0|        if ((Int32)tmp >= longestFileName) {
 8954|      0|            return;
 8955|      0|        }
 8956|      0|        i = 1;
 8957|      0|        {
 8958|      0|            while (1) {
 8959|      0|while_continue: /* CIL Label */
 8960|      0|                ;
 8961|      0|                {
 8962|      0|                    tmp___0 = strlen((char const *)s);
 8963|      0|                }
 8964|      0|                if (!(i <= longestFileName - (Int32)tmp___0)) {
 8965|      0|                    goto while_break;
 8966|      0|                }
 8967|      0|                {
 8968|      0|                    fprintf((FILE * /* __restrict  */) stderr,
 8969|      0|                            (char const * /* __restrict  */) " ");
 8970|      0|                    i++;
 8971|      0|                }
 8972|      0|            }
 8973|      0|while_break: /* CIL Label */
 8974|      0|            ;
 8975|      0|        }
 8976|      0|        return;
 8977|      0|    }
 8978|      0|}
 8979|       |static void copyFileName(Char *to, Char *from)
 8980|     24|{
 8981|     24|    size_t tmp;
 8982|       |
 8983|     24|    {
 8984|     24|        {
 8985|     24|            tmp = strlen((char const *)from);
 8986|     24|        }
 8987|     24|        if (tmp > 1024UL) {
 8988|      0|            {
 8989|      0|                fprintf((FILE * /* __restrict  */) stderr,
 8990|      0|                        (char const
 8991|      0|                         * /* __restrict  */) "bzip2: file name\n`%s\'\nis "
 8992|      0|                        "suspiciously (more than %d chars) "
 8993|      0|                        "long.\nTry using a reasonable file "
 8994|      0|                        "name instead.  Sorry! :-)\n",
 8995|      0|                        from, 1024);
 8996|      0|                setExit(1);
 8997|      0|                exit(exitValue);
 8998|      0|            }
 8999|      0|        }
 9000|     24|        {
 9001|     24|            strncpy((char * /* __restrict  */)to,
 9002|     24|                    (char const * /* __restrict  */)from, (size_t)1024);
 9003|     24|            *(to + 1024) = (Char)'\000';
 9004|     24|        }
 9005|     24|        return;
 9006|     24|    }
 9007|     24|}
 9008|       |static Bool fileExists(Char *name)
 9009|     12|{
 9010|     12|    FILE *tmp;
 9011|     12|    FILE *tmp___0;
 9012|     12|    Bool exists;
 9013|       |
 9014|     12|    {
 9015|     12|        {
 9016|     12|            tmp___0 = fopen((char const * /* __restrict  */)name,
 9017|     12|                            (char const * /* __restrict  */) "rb");
 9018|     12|            tmp = tmp___0;
 9019|     12|            exists = (Bool)((unsigned long)tmp != (unsigned long)((void *)0));
 9020|     12|        }
 9021|     12|        if ((unsigned long)tmp != (unsigned long)((void *)0)) {
 9022|      6|            {
 9023|      6|                fclose(tmp);
 9024|      6|            }
 9025|      6|        }
 9026|     12|        return (exists);
 9027|     12|    }
 9028|     12|}
 9029|       |static FILE *fopen_output_safely(Char *name, char const *mode)
 9030|      6|{
 9031|      6|    FILE *fp;
 9032|      6|    IntNative fh;
 9033|       |
 9034|      6|    {
 9035|      6|        {
 9036|      6|            fh = open((char const *)name, 193, 384);
 9037|      6|        }
 9038|      6|        if (fh == -1) {
 9039|      0|            return ((FILE *)((void *)0));
 9040|      0|        }
 9041|      6|        {
 9042|      6|            fp = fdopen(fh, mode);
 9043|      6|        }
 9044|      6|        if ((unsigned long)fp == (unsigned long)((void *)0)) {
 9045|      0|            {
 9046|      0|                close(fh);
 9047|      0|            }
 9048|      0|        }
 9049|      6|        return (fp);
 9050|      6|    }
 9051|      6|}
 9052|       |static Bool notAStandardFile(Char *name)
 9053|      6|{
 9054|      6|    IntNative i;
 9055|      6|    struct stat statBuf;
 9056|      6|    void *__cil_tmp4;
 9057|       |
 9058|      6|    {
 9059|      6|        {
 9060|      6|            i = lstat((char const * /* __restrict  */)name,
 9061|      6|                      (struct stat * /* __restrict  */)(&statBuf));
 9062|      6|        }
 9063|      6|        if (i != 0) {
 9064|      0|            return ((Bool)1);
 9065|      0|        }
 9066|      6|        if ((statBuf.st_mode & 61440U) == 32768U) {
 9067|      6|            return ((Bool)0);
 9068|      6|        }
 9069|      0|        return ((Bool)1);
 9070|      6|    }
 9071|      6|}
 9072|       |static Int32 countHardLinks(Char *name)
 9073|      6|{
 9074|      6|    IntNative i;
 9075|      6|    struct stat statBuf;
 9076|      6|    void *__cil_tmp4;
 9077|       |
 9078|      6|    {
 9079|      6|        {
 9080|      6|            i = lstat((char const * /* __restrict  */)name,
 9081|      6|                      (struct stat * /* __restrict  */)(&statBuf));
 9082|      6|        }
 9083|      6|        if (i != 0) {
 9084|      0|            return (0);
 9085|      0|        }
 9086|      6|        return ((Int32)(statBuf.st_nlink - 1UL));
 9087|      6|    }
 9088|      6|}
 9089|       |static struct stat fileMetaInfo;
 9090|       |static void saveInputFileMetaInfo(Char *srcName)
 9091|      6|{
 9092|      6|    IntNative retVal;
 9093|       |
 9094|      6|    {
 9095|      6|        {
 9096|      6|            retVal = stat((char const * /* __restrict  */)srcName,
 9097|      6|                          (struct stat * /* __restrict  */)(&fileMetaInfo));
 9098|      6|        }
 9099|      6|        if (retVal != 0) {
 9100|      0|            {
 9101|      0|                ioError();
 9102|      0|            }
 9103|      0|        }
 9104|      6|        return;
 9105|      6|    }
 9106|      6|}
 9107|       |static void applySavedTimeInfoToOutputFile(Char *dstName)
 9108|      6|{
 9109|      6|    IntNative retVal;
 9110|      6|    struct utimbuf uTimBuf;
 9111|       |
 9112|      6|    {
 9113|      6|        {
 9114|      6|            uTimBuf.actime = fileMetaInfo.st_atim.tv_sec;
 9115|      6|            uTimBuf.modtime = fileMetaInfo.st_mtim.tv_sec;
 9116|      6|            retVal = utime((char const *)dstName, (struct utimbuf const *)(&uTimBuf));
 9117|      6|        }
 9118|      6|        if (retVal != 0) {
 9119|      0|            {
 9120|      0|                ioError();
 9121|      0|            }
 9122|      0|        }
 9123|      6|        return;
 9124|      6|    }
 9125|      6|}
 9126|       |static void applySavedFileAttrToOutputFile(IntNative fd)
 9127|      6|{
 9128|      6|    IntNative retVal;
 9129|       |
 9130|      6|    {
 9131|      6|        {
 9132|      6|            retVal = fchmod(fd, fileMetaInfo.st_mode);
 9133|      6|        }
 9134|      6|        if (retVal != 0) {
 9135|      0|            {
 9136|      0|                ioError();
 9137|      0|            }
 9138|      0|        }
 9139|      6|        {
 9140|      6|            fchown(fd, fileMetaInfo.st_uid, fileMetaInfo.st_gid);
 9141|      6|        }
 9142|      6|        return;
 9143|      6|    }
 9144|      6|}
 9145|       |static Bool containsDubiousChars(Char *name)
 9146|      6|{
 9147|       |
 9148|      6|    {
 9149|      6|        return ((Bool)0);
 9150|      6|    }
 9151|      6|}
 9152|       |Char const *zSuffix[4] = {".bz2", ".bz", ".tbz2", ".tbz"};
 9153|       |Char const *unzSuffix[4] = {"", "", ".tar", ".tar"};
 9154|       |static Bool hasSuffix(Char *s, Char const *suffix)
 9155|      9|{
 9156|      9|    Int32 ns;
 9157|      9|    Int32 tmp;
 9158|      9|    Int32 nx;
 9159|      9|    Int32 tmp___0;
 9160|      9|    int tmp___1;
 9161|       |
 9162|      9|    {
 9163|      9|        {
 9164|      9|            tmp = (Int32)strlen((char const *)s);
 9165|      9|            ns = tmp;
 9166|      9|            tmp___0 = (Int32)strlen(suffix);
 9167|      9|            nx = tmp___0;
 9168|      9|        }
 9169|      9|        if (ns < nx) {
 9170|      0|            return ((Bool)0);
 9171|      0|        }
 9172|      9|        {
 9173|      9|            tmp___1 = strcmp((char const *)((s + ns) - nx), suffix);
 9174|      9|        }
 9175|      9|        if (tmp___1 == 0) {
 9176|      5|            return ((Bool)1);
 9177|      5|        }
 9178|      4|        return ((Bool)0);
 9179|      9|    }
 9180|      9|}
 9181|       |static Bool mapSuffix(Char *name, Char const *oldSuffix,
 9182|       |                      Char const *newSuffix)
 9183|      5|{
 9184|      5|    Bool tmp;
 9185|      5|    size_t tmp___0;
 9186|      5|    size_t tmp___1;
 9187|       |
 9188|      5|    {
 9189|      5|        {
 9190|      5|            tmp = hasSuffix(name, oldSuffix);
 9191|      5|        }
 9192|      5|        if (!tmp) {
 9193|      0|            return ((Bool)0);
 9194|      0|        }
 9195|      5|        {
 9196|      5|            tmp___0 = strlen((char const *)name);
 9197|      5|            tmp___1 = strlen(oldSuffix);
 9198|      5|            *(name + (tmp___0 - tmp___1)) = (Char)0;
 9199|      5|            strcat((char * /* __restrict  */)name,
 9200|      5|                   (char const * /* __restrict  */)newSuffix);
 9201|      5|        }
 9202|      5|        return ((Bool)1);
 9203|      5|    }
 9204|      5|}
 9205|       |static void compress(Char *name)
 9206|      1|{
 9207|      1|    FILE *inStr;
 9208|      1|    FILE *outStr;
 9209|      1|    Int32 n;
 9210|      1|    Int32 i;
 9211|      1|    struct stat statBuf;
 9212|      1|    Bool tmp;
 9213|      1|    int *tmp___0;
 9214|      1|    char *tmp___1;
 9215|      1|    Bool tmp___2;
 9216|      1|    Bool tmp___3;
 9217|      1|    Bool tmp___4;
 9218|      1|    Bool tmp___5;
 9219|      1|    char const *tmp___6;
 9220|      1|    int tmp___7;
 9221|      1|    int tmp___8;
 9222|      1|    int tmp___9;
 9223|      1|    int tmp___10;
 9224|      1|    int *tmp___11;
 9225|      1|    char *tmp___12;
 9226|      1|    int *tmp___13;
 9227|      1|    char *tmp___14;
 9228|      1|    int *tmp___15;
 9229|      1|    char *tmp___16;
 9230|      1|    IntNative retVal;
 9231|      1|    IntNative tmp___17;
 9232|      1|    void *__cil_tmp27;
 9233|      1|    char *__cil_tmp28;
 9234|      1|    char *__cil_tmp29;
 9235|      1|    char *__cil_tmp30;
 9236|      1|    char *__cil_tmp31;
 9237|      1|    char *__cil_tmp32;
 9238|      1|    char *__cil_tmp33;
 9239|      1|    char *__cil_tmp34;
 9240|      1|    char *__cil_tmp35;
 9241|      1|    char *__cil_tmp36;
 9242|       |
 9243|      1|    {
 9244|      1|        deleteOutputOnInterrupt = (Bool)0;
 9245|      1|        if ((unsigned long)name == (unsigned long)((void *)0)) {
 9246|      0|            if (srcMode != 1) {
 9247|      0|                {
 9248|      0|                    panic("compress: bad modes\n");
 9249|      0|                }
 9250|      0|            }
 9251|      0|        }
 9252|      1|        {
 9253|      1|            if (srcMode == 1) {
 9254|      0|                goto case_1;
 9255|      0|            }
 9256|      1|            if (srcMode == 3) {
 9257|      1|                goto case_3;
 9258|      1|            }
 9259|      0|            if (srcMode == 2) {
 9260|      0|                goto case_2;
 9261|      0|            }
 9262|      0|            goto switch_break;
 9263|      0|case_1 : { /* CIL Label */
 9264|      0|                copyFileName(inName, (Char *)"(stdin)");
 9265|      0|                copyFileName(outName, (Char *)"(stdout)");
 9266|      0|            }
 9267|      0|            goto switch_break;
 9268|      1|case_3 : { /* CIL Label */
 9269|      1|                copyFileName(inName, name);
 9270|      1|                copyFileName(outName, name);
 9271|      1|                strcat((char * /* __restrict  */)(outName),
 9272|      1|                       (char const * /* __restrict  */) ".bz2");
 9273|      1|            }
 9274|      1|            goto switch_break;
 9275|      0|case_2 : { /* CIL Label */
 9276|      0|                copyFileName(inName, name);
 9277|      0|                copyFileName(outName, (Char *)"(stdout)");
 9278|      0|            }
 9279|      0|            goto switch_break;
 9280|      1|switch_break: /* CIL Label */
 9281|      1|            ;
 9282|      1|        }
 9283|      1|        if (srcMode != 1) {
 9284|      1|            {
 9285|      1|                tmp = containsDubiousChars(inName);
 9286|      1|            }
 9287|      1|            if (tmp) {
 9288|      0|                if (noisy) {
 9289|      0|                    {
 9290|      0|                        fprintf((FILE * /* __restrict  */) stderr,
 9291|      0|                                (char const * /* __restrict  */) "%s: There are no files "
 9292|      0|                                "matching `%s\'.\n",
 9293|      0|                                progName, inName);
 9294|      0|                    }
 9295|      0|                }
 9296|      0|                {
 9297|      0|                    setExit(1);
 9298|      0|                }
 9299|      0|                return;
 9300|      0|            }
 9301|      1|        }
 9302|      1|        if (srcMode != 1) {
 9303|      1|            {
 9304|      1|                tmp___2 = fileExists(inName);
 9305|      1|            }
 9306|      1|            if (!tmp___2) {
 9307|      0|                {
 9308|      0|                    tmp___0 = __errno_location();
 9309|      0|                    tmp___1 = strerror(*tmp___0);
 9310|      0|                    fprintf(
 9311|      0|                        (FILE * /* __restrict  */) stderr,
 9312|      0|                        (char const
 9313|      0|                         * /* __restrict  */) "%s: Can\'t open input file %s: %s.\n",
 9314|      0|                        progName, inName, tmp___1);
 9315|      0|                    setExit(1);
 9316|      0|                }
 9317|      0|                return;
 9318|      0|            }
 9319|      1|        }
 9320|      1|        i = 0;
 9321|      1|        {
 9322|      5|            while (1) {
 9323|      5|while_continue: /* CIL Label */
 9324|      5|                ;
 9325|      5|                if (!(i < 4)) {
 9326|      1|                    goto while_break;
 9327|      1|                }
 9328|      4|                {
 9329|      4|                    tmp___3 = hasSuffix(inName, zSuffix[i]);
 9330|      4|                }
 9331|      4|                if (tmp___3) {
 9332|      0|                    if (noisy) {
 9333|      0|                        {
 9334|      0|                            fprintf(
 9335|      0|                                (FILE * /* __restrict  */) stderr,
 9336|      0|                                (char const * /* __restrict  */) "%s: Input file %s already "
 9337|      0|                                "has %s suffix.\n",
 9338|      0|                                progName, inName, zSuffix[i]);
 9339|      0|                        }
 9340|      0|                    }
 9341|      0|                    {
 9342|      0|                        setExit(1);
 9343|      0|                    }
 9344|      0|                    return;
 9345|      0|                }
 9346|      4|                i++;
 9347|      4|            }
 9348|      1|while_break: /* CIL Label */
 9349|      1|            ;
 9350|      1|        }
 9351|      1|        if (srcMode == 3) {
 9352|      1|            goto _L;
 9353|      1|        }
 9354|      0|        else {
 9355|      0|            if (srcMode == 2) {
 9356|      1|_L : {
 9357|      1|                    stat((char const * /* __restrict  */)(inName),
 9358|      1|                         (struct stat * /* __restrict  */)(&statBuf));
 9359|      1|                }
 9360|      1|                if ((statBuf.st_mode & 61440U) == 16384U) {
 9361|      0|                    {
 9362|      0|                        fprintf(
 9363|      0|                            (FILE * /* __restrict  */) stderr,
 9364|      0|                            (char const
 9365|      0|                             * /* __restrict  */) "%s: Input file %s is a directory.\n",
 9366|      0|                            progName, inName);
 9367|      0|                        setExit(1);
 9368|      0|                    }
 9369|      0|                    return;
 9370|      0|                }
 9371|      1|            }
 9372|      0|        }
 9373|      1|        if (srcMode == 3) {
 9374|      1|            if (!forceOverwrite) {
 9375|      1|                {
 9376|      1|                    tmp___4 = notAStandardFile(inName);
 9377|      1|                }
 9378|      1|                if (tmp___4) {
 9379|      0|                    if (noisy) {
 9380|      0|                        {
 9381|      0|                            fprintf((FILE * /* __restrict  */) stderr,
 9382|      0|                                    (char const * /* __restrict  */) "%s: Input file %s is "
 9383|      0|                                    "not a normal file.\n",
 9384|      0|                                    progName, inName);
 9385|      0|                        }
 9386|      0|                    }
 9387|      0|                    {
 9388|      0|                        setExit(1);
 9389|      0|                    }
 9390|      0|                    return;
 9391|      0|                }
 9392|      1|            }
 9393|      1|        }
 9394|      1|        if (srcMode == 3) {
 9395|      1|            {
 9396|      1|                tmp___5 = fileExists(outName);
 9397|      1|            }
 9398|      1|            if (tmp___5) {
 9399|      0|                if (forceOverwrite) {
 9400|      0|                    {
 9401|      0|                        remove((char const *)(outName));
 9402|      0|                    }
 9403|      0|                }
 9404|      0|                else {
 9405|      0|                    {
 9406|      0|                        fprintf((FILE * /* __restrict  */) stderr,
 9407|      0|                                (char const * /* __restrict  */) "%s: Output file %s "
 9408|      0|                                "already exists.\n",
 9409|      0|                                progName, outName);
 9410|      0|                        setExit(1);
 9411|      0|                    }
 9412|      0|                    return;
 9413|      0|                }
 9414|      0|            }
 9415|      1|        }
 9416|      1|        if (srcMode == 3) {
 9417|      1|            if (!forceOverwrite) {
 9418|      1|                {
 9419|      1|                    n = countHardLinks(inName);
 9420|      1|                }
 9421|      1|                if (n > 0) {
 9422|      0|                    if (n > 1) {
 9423|      0|                        tmp___6 = "s";
 9424|      0|                    }
 9425|      0|                    else {
 9426|      0|                        tmp___6 = "";
 9427|      0|                    }
 9428|      0|                    {
 9429|      0|                        fprintf((FILE * /* __restrict  */) stderr,
 9430|      0|                                (char const * /* __restrict  */) "%s: Input file %s has %d "
 9431|      0|                                "other link%s.\n",
 9432|      0|                                progName, inName, n, tmp___6);
 9433|      0|                        setExit(1);
 9434|      0|                    }
 9435|      0|                    return;
 9436|      0|                }
 9437|      1|            }
 9438|      1|        }
 9439|      1|        if (srcMode == 3) {
 9440|      1|            {
 9441|      1|                saveInputFileMetaInfo(inName);
 9442|      1|            }
 9443|      1|        }
 9444|      1|        {
 9445|      1|            if (srcMode == 1) {
 9446|      0|                goto case_1___0;
 9447|      0|            }
 9448|      1|            if (srcMode == 2) {
 9449|      0|                goto case_2___0;
 9450|      0|            }
 9451|      1|            if (srcMode == 3) {
 9452|      1|                goto case_3___0;
 9453|      1|            }
 9454|      0|            goto switch_default;
 9455|      0|case_1___0 : { /* CIL Label */
 9456|      0|                inStr = stdin;
 9457|      0|                outStr = stdout;
 9458|      0|                tmp___7 = fileno(stdout);
 9459|      0|                tmp___8 = isatty(tmp___7);
 9460|      0|            }
 9461|      0|            if (tmp___8) {
 9462|      0|                {
 9463|      0|                    fprintf(
 9464|      0|                        (FILE * /* __restrict  */) stderr,
 9465|      0|                        (char const * /* __restrict  */) "%s: I won\'t write compressed "
 9466|      0|                        "data to a terminal.\n",
 9467|      0|                        progName);
 9468|      0|                    fprintf(
 9469|      0|                        (FILE * /* __restrict  */) stderr,
 9470|      0|                        (char const
 9471|      0|                         * /* __restrict  */) "%s: For help, type: `%s --help\'.\n",
 9472|      0|                        progName, progName);
 9473|      0|                    setExit(1);
 9474|      0|                }
 9475|      0|                return;
 9476|      0|            }
 9477|      0|            goto switch_break___0;
 9478|      0|case_2___0 : { /* CIL Label */
 9479|      0|                inStr = fopen((char const * /* __restrict  */)(inName),
 9480|      0|                              (char const * /* __restrict  */) "rb");
 9481|      0|                outStr = stdout;
 9482|      0|                tmp___9 = fileno(stdout);
 9483|      0|                tmp___10 = isatty(tmp___9);
 9484|      0|            }
 9485|      0|            if (tmp___10) {
 9486|      0|                {
 9487|      0|                    fprintf(
 9488|      0|                        (FILE * /* __restrict  */) stderr,
 9489|      0|                        (char const * /* __restrict  */) "%s: I won\'t write compressed "
 9490|      0|                        "data to a terminal.\n",
 9491|      0|                        progName);
 9492|      0|                    fprintf(
 9493|      0|                        (FILE * /* __restrict  */) stderr,
 9494|      0|                        (char const
 9495|      0|                         * /* __restrict  */) "%s: For help, type: `%s --help\'.\n",
 9496|      0|                        progName, progName);
 9497|      0|                }
 9498|      0|                if ((unsigned long)inStr != (unsigned long)((void *)0)) {
 9499|      0|                    {
 9500|      0|                        fclose(inStr);
 9501|      0|                    }
 9502|      0|                }
 9503|      0|                {
 9504|      0|                    setExit(1);
 9505|      0|                }
 9506|      0|                return;
 9507|      0|            }
 9508|      0|            if ((unsigned long)inStr == (unsigned long)((void *)0)) {
 9509|      0|                {
 9510|      0|                    tmp___11 = __errno_location();
 9511|      0|                    tmp___12 = strerror(*tmp___11);
 9512|      0|                    fprintf(
 9513|      0|                        (FILE * /* __restrict  */) stderr,
 9514|      0|                        (char const
 9515|      0|                         * /* __restrict  */) "%s: Can\'t open input file %s: %s.\n",
 9516|      0|                        progName, inName, tmp___12);
 9517|      0|                    setExit(1);
 9518|      0|                }
 9519|      0|                return;
 9520|      0|            }
 9521|      0|            goto switch_break___0;
 9522|      1|case_3___0 : { /* CIL Label */
 9523|      1|                inStr = fopen((char const * /* __restrict  */)(inName),
 9524|      1|                              (char const * /* __restrict  */) "rb");
 9525|      1|                outStr = fopen_output_safely(outName, "wb");
 9526|      1|            }
 9527|      1|            if ((unsigned long)outStr == (unsigned long)((void *)0)) {
 9528|      0|                {
 9529|      0|                    tmp___13 = __errno_location();
 9530|      0|                    tmp___14 = strerror(*tmp___13);
 9531|      0|                    fprintf((FILE * /* __restrict  */) stderr,
 9532|      0|                            (char const * /* __restrict  */) "%s: Can\'t create output "
 9533|      0|                            "file %s: %s.\n",
 9534|      0|                            progName, outName, tmp___14);
 9535|      0|                }
 9536|      0|                if ((unsigned long)inStr != (unsigned long)((void *)0)) {
 9537|      0|                    {
 9538|      0|                        fclose(inStr);
 9539|      0|                    }
 9540|      0|                }
 9541|      0|                {
 9542|      0|                    setExit(1);
 9543|      0|                }
 9544|      0|                return;
 9545|      0|            }
 9546|      1|            if ((unsigned long)inStr == (unsigned long)((void *)0)) {
 9547|      0|                {
 9548|      0|                    tmp___15 = __errno_location();
 9549|      0|                    tmp___16 = strerror(*tmp___15);
 9550|      0|                    fprintf(
 9551|      0|                        (FILE * /* __restrict  */) stderr,
 9552|      0|                        (char const
 9553|      0|                         * /* __restrict  */) "%s: Can\'t open input file %s: %s.\n",
 9554|      0|                        progName, inName, tmp___16);
 9555|      0|                }
 9556|      0|                if ((unsigned long)outStr != (unsigned long)((void *)0)) {
 9557|      0|                    {
 9558|      0|                        fclose(outStr);
 9559|      0|                    }
 9560|      0|                }
 9561|      0|                {
 9562|      0|                    setExit(1);
 9563|      0|                }
 9564|      0|                return;
 9565|      0|            }
 9566|      1|            goto switch_break___0;
 9567|      1|switch_default : { /* CIL Label */
 9568|      0|                panic("compress: bad srcMode");
 9569|      1|            }
 9570|      0|            goto switch_break___0;
 9571|      1|switch_break___0: /* CIL Label */
 9572|      1|            ;
 9573|      1|        }
 9574|      1|        if (verbosity >= 1) {
 9575|      0|            {
 9576|      0|                fprintf((FILE * /* __restrict  */) stderr,
 9577|      0|                        (char const * /* __restrict  */) "  %s: ", inName);
 9578|      0|                pad(inName);
 9579|      0|                fflush(stderr);
 9580|      0|            }
 9581|      0|        }
 9582|      1|        {
 9583|      1|            outputHandleJustInCase = outStr;
 9584|      1|            deleteOutputOnInterrupt = (Bool)1;
 9585|      1|            compressStream(inStr, outStr);
 9586|      1|            outputHandleJustInCase = (FILE *)((void *)0);
 9587|      1|        }
 9588|      1|        if (srcMode == 3) {
 9589|      1|            {
 9590|      1|                applySavedTimeInfoToOutputFile(outName);
 9591|      1|                deleteOutputOnInterrupt = (Bool)0;
 9592|      1|            }
 9593|      1|            if (!keepInputFiles) {
 9594|      1|                {
 9595|      1|                    tmp___17 = remove((char const *)(inName));
 9596|      1|                    retVal = tmp___17;
 9597|      1|                }
 9598|      1|                if (retVal != 0) {
 9599|      0|                    {
 9600|      0|                        ioError();
 9601|      0|                    }
 9602|      0|                }
 9603|      1|            }
 9604|      1|        }
 9605|      1|        deleteOutputOnInterrupt = (Bool)0;
 9606|      1|        return;
 9607|      1|    }
 9608|      1|}
 9609|       |static void uncompress(Char *name)
 9610|      5|{
 9611|      5|    FILE *inStr;
 9612|      5|    FILE *outStr;
 9613|      5|    Int32 n;
 9614|      5|    Int32 i;
 9615|      5|    Bool magicNumberOK;
 9616|      5|    Bool cantGuess;
 9617|      5|    struct stat statBuf;
 9618|      5|    Bool tmp;
 9619|      5|    Bool tmp___0;
 9620|      5|    int *tmp___1;
 9621|      5|    char *tmp___2;
 9622|      5|    Bool tmp___3;
 9623|      5|    Bool tmp___4;
 9624|      5|    Bool tmp___5;
 9625|      5|    char const *tmp___6;
 9626|      5|    int tmp___7;
 9627|      5|    int tmp___8;
 9628|      5|    int *tmp___9;
 9629|      5|    char *tmp___10;
 9630|      5|    int *tmp___11;
 9631|      5|    char *tmp___12;
 9632|      5|    int *tmp___13;
 9633|      5|    char *tmp___14;
 9634|      5|    IntNative retVal;
 9635|      5|    IntNative tmp___15;
 9636|      5|    IntNative retVal___0;
 9637|      5|    IntNative tmp___16;
 9638|      5|    void *__cil_tmp29;
 9639|      5|    char *__cil_tmp30;
 9640|      5|    char *__cil_tmp31;
 9641|      5|    char *__cil_tmp32;
 9642|      5|    char *__cil_tmp33;
 9643|      5|    char *__cil_tmp34;
 9644|      5|    char *__cil_tmp35;
 9645|      5|    char *__cil_tmp36;
 9646|      5|    char *__cil_tmp37;
 9647|      5|    char *__cil_tmp38;
 9648|       |
 9649|      5|    {
 9650|      5|        deleteOutputOnInterrupt = (Bool)0;
 9651|      5|        if ((unsigned long)name == (unsigned long)((void *)0)) {
 9652|      0|            if (srcMode != 1) {
 9653|      0|                {
 9654|      0|                    panic("uncompress: bad modes\n");
 9655|      0|                }
 9656|      0|            }
 9657|      0|        }
 9658|      5|        cantGuess = (Bool)0;
 9659|      5|        {
 9660|      5|            if (srcMode == 1) {
 9661|      0|                goto case_1;
 9662|      0|            }
 9663|      5|            if (srcMode == 3) {
 9664|      5|                goto case_3;
 9665|      5|            }
 9666|      0|            if (srcMode == 2) {
 9667|      0|                goto case_2;
 9668|      0|            }
 9669|      0|            goto switch_break;
 9670|      0|case_1 : { /* CIL Label */
 9671|      0|                copyFileName(inName, (Char *)"(stdin)");
 9672|      0|                copyFileName(outName, (Char *)"(stdout)");
 9673|      0|            }
 9674|      0|            goto switch_break;
 9675|      5|case_3 : { /* CIL Label */
 9676|      5|                copyFileName(inName, name);
 9677|      5|                copyFileName(outName, name);
 9678|      5|                i = 0;
 9679|      5|            }
 9680|      5|            {
 9681|      5|                while (1) {
 9682|      5|while_continue: /* CIL Label */
 9683|      5|                    ;
 9684|      5|                    if (!(i < 4)) {
 9685|      0|                        goto while_break;
 9686|      0|                    }
 9687|      5|                    {
 9688|      5|                        tmp = mapSuffix(outName, zSuffix[i], unzSuffix[i]);
 9689|      5|                    }
 9690|      5|                    if (tmp) {
 9691|      5|                        goto zzz;
 9692|      5|                    }
 9693|      0|                    i++;
 9694|      0|                }
 9695|      0|while_break: /* CIL Label */
 9696|      0|                ;
 9697|      0|            }
 9698|      0|            {
 9699|      0|                cantGuess = (Bool)1;
 9700|      0|                strcat((char * /* __restrict  */)(outName),
 9701|      0|                       (char const * /* __restrict  */) ".out");
 9702|      0|            }
 9703|      0|            goto switch_break;
 9704|      0|case_2 : { /* CIL Label */
 9705|      0|                copyFileName(inName, name);
 9706|      0|                copyFileName(outName, (Char *)"(stdout)");
 9707|      0|            }
 9708|      0|            goto switch_break;
 9709|      0|switch_break: /* CIL Label */
 9710|      0|            ;
 9711|      0|        }
 9712|      5|zzz:
 9713|      5|        if (srcMode != 1) {
 9714|      5|            {
 9715|      5|                tmp___0 = containsDubiousChars(inName);
 9716|      5|            }
 9717|      5|            if (tmp___0) {
 9718|      0|                if (noisy) {
 9719|      0|                    {
 9720|      0|                        fprintf((FILE * /* __restrict  */) stderr,
 9721|      0|                                (char const * /* __restrict  */) "%s: There are no files "
 9722|      0|                                "matching `%s\'.\n",
 9723|      0|                                progName, inName);
 9724|      0|                    }
 9725|      0|                }
 9726|      0|                {
 9727|      0|                    setExit(1);
 9728|      0|                }
 9729|      0|                return;
 9730|      0|            }
 9731|      5|        }
 9732|      5|        if (srcMode != 1) {
 9733|      5|            {
 9734|      5|                tmp___3 = fileExists(inName);
 9735|      5|            }
 9736|      5|            if (!tmp___3) {
 9737|      0|                {
 9738|      0|                    tmp___1 = __errno_location();
 9739|      0|                    tmp___2 = strerror(*tmp___1);
 9740|      0|                    fprintf(
 9741|      0|                        (FILE * /* __restrict  */) stderr,
 9742|      0|                        (char const
 9743|      0|                         * /* __restrict  */) "%s: Can\'t open input file %s: %s.\n",
 9744|      0|                        progName, inName, tmp___2);
 9745|      0|                    setExit(1);
 9746|      0|                }
 9747|      0|                return;
 9748|      0|            }
 9749|      5|        }
 9750|      5|        if (srcMode == 3) {
 9751|      5|            goto _L;
 9752|      5|        }
 9753|      0|        else {
 9754|      0|            if (srcMode == 2) {
 9755|      5|_L : {
 9756|      5|                    stat((char const * /* __restrict  */)(inName),
 9757|      5|                         (struct stat * /* __restrict  */)(&statBuf));
 9758|      5|                }
 9759|      5|                if ((statBuf.st_mode & 61440U) == 16384U) {
 9760|      0|                    {
 9761|      0|                        fprintf(
 9762|      0|                            (FILE * /* __restrict  */) stderr,
 9763|      0|                            (char const
 9764|      0|                             * /* __restrict  */) "%s: Input file %s is a directory.\n",
 9765|      0|                            progName, inName);
 9766|      0|                        setExit(1);
 9767|      0|                    }
 9768|      0|                    return;
 9769|      0|                }
 9770|      5|            }
 9771|      0|        }
 9772|      5|        if (srcMode == 3) {
 9773|      5|            if (!forceOverwrite) {
 9774|      5|                {
 9775|      5|                    tmp___4 = notAStandardFile(inName);
 9776|      5|                }
 9777|      5|                if (tmp___4) {
 9778|      0|                    if (noisy) {
 9779|      0|                        {
 9780|      0|                            fprintf((FILE * /* __restrict  */) stderr,
 9781|      0|                                    (char const * /* __restrict  */) "%s: Input file %s is "
 9782|      0|                                    "not a normal file.\n",
 9783|      0|                                    progName, inName);
 9784|      0|                        }
 9785|      0|                    }
 9786|      0|                    {
 9787|      0|                        setExit(1);
 9788|      0|                    }
 9789|      0|                    return;
 9790|      0|                }
 9791|      5|            }
 9792|      5|        }
 9793|      5|        if (cantGuess) {
 9794|      0|            if (noisy) {
 9795|      0|                {
 9796|      0|                    fprintf((FILE * /* __restrict  */) stderr,
 9797|      0|                            (char const * /* __restrict  */) "%s: Can\'t guess original "
 9798|      0|                            "name for %s -- using %s\n",
 9799|      0|                            progName, inName, outName);
 9800|      0|                }
 9801|      0|            }
 9802|      0|        }
 9803|      5|        if (srcMode == 3) {
 9804|      5|            {
 9805|      5|                tmp___5 = fileExists(outName);
 9806|      5|            }
 9807|      5|            if (tmp___5) {
 9808|      0|                if (forceOverwrite) {
 9809|      0|                    {
 9810|      0|                        remove((char const *)(outName));
 9811|      0|                    }
 9812|      0|                }
 9813|      0|                else {
 9814|      0|                    {
 9815|      0|                        fprintf((FILE * /* __restrict  */) stderr,
 9816|      0|                                (char const * /* __restrict  */) "%s: Output file %s "
 9817|      0|                                "already exists.\n",
 9818|      0|                                progName, outName);
 9819|      0|                        setExit(1);
 9820|      0|                    }
 9821|      0|                    return;
 9822|      0|                }
 9823|      0|            }
 9824|      5|        }
 9825|      5|        if (srcMode == 3) {
 9826|      5|            if (!forceOverwrite) {
 9827|      5|                {
 9828|      5|                    n = countHardLinks(inName);
 9829|      5|                }
 9830|      5|                if (n > 0) {
 9831|      0|                    if (n > 1) {
 9832|      0|                        tmp___6 = "s";
 9833|      0|                    }
 9834|      0|                    else {
 9835|      0|                        tmp___6 = "";
 9836|      0|                    }
 9837|      0|                    {
 9838|      0|                        fprintf((FILE * /* __restrict  */) stderr,
 9839|      0|                                (char const * /* __restrict  */) "%s: Input file %s has %d "
 9840|      0|                                "other link%s.\n",
 9841|      0|                                progName, inName, n, tmp___6);
 9842|      0|                        setExit(1);
 9843|      0|                    }
 9844|      0|                    return;
 9845|      0|                }
 9846|      5|            }
 9847|      5|        }
 9848|      5|        if (srcMode == 3) {
 9849|      5|            {
 9850|      5|                saveInputFileMetaInfo(inName);
 9851|      5|            }
 9852|      5|        }
 9853|      5|        {
 9854|      5|            if (srcMode == 1) {
 9855|      0|                goto case_1___0;
 9856|      0|            }
 9857|      5|            if (srcMode == 2) {
 9858|      0|                goto case_2___0;
 9859|      0|            }
 9860|      5|            if (srcMode == 3) {
 9861|      5|                goto case_3___0;
 9862|      5|            }
 9863|      0|            goto switch_default;
 9864|      0|case_1___0 : { /* CIL Label */
 9865|      0|                inStr = stdin;
 9866|      0|                outStr = stdout;
 9867|      0|                tmp___7 = fileno(stdin);
 9868|      0|                tmp___8 = isatty(tmp___7);
 9869|      0|            }
 9870|      0|            if (tmp___8) {
 9871|      0|                {
 9872|      0|                    fprintf(
 9873|      0|                        (FILE * /* __restrict  */) stderr,
 9874|      0|                        (char const * /* __restrict  */) "%s: I won\'t read compressed "
 9875|      0|                        "data from a terminal.\n",
 9876|      0|                        progName);
 9877|      0|                    fprintf(
 9878|      0|                        (FILE * /* __restrict  */) stderr,
 9879|      0|                        (char const
 9880|      0|                         * /* __restrict  */) "%s: For help, type: `%s --help\'.\n",
 9881|      0|                        progName, progName);
 9882|      0|                    setExit(1);
 9883|      0|                }
 9884|      0|                return;
 9885|      0|            }
 9886|      0|            goto switch_break___0;
 9887|      0|case_2___0 : { /* CIL Label */
 9888|      0|                inStr = fopen((char const * /* __restrict  */)(inName),
 9889|      0|                              (char const * /* __restrict  */) "rb");
 9890|      0|                outStr = stdout;
 9891|      0|            }
 9892|      0|            if ((unsigned long)inStr == (unsigned long)((void *)0)) {
 9893|      0|                {
 9894|      0|                    tmp___9 = __errno_location();
 9895|      0|                    tmp___10 = strerror(*tmp___9);
 9896|      0|                    fprintf(
 9897|      0|                        (FILE * /* __restrict  */) stderr,
 9898|      0|                        (char const
 9899|      0|                         * /* __restrict  */) "%s: Can\'t open input file %s:%s.\n",
 9900|      0|                        progName, inName, tmp___10);
 9901|      0|                }
 9902|      0|                if ((unsigned long)inStr != (unsigned long)((void *)0)) {
 9903|      0|                    {
 9904|      0|                        fclose(inStr);
 9905|      0|                    }
 9906|      0|                }
 9907|      0|                {
 9908|      0|                    setExit(1);
 9909|      0|                }
 9910|      0|                return;
 9911|      0|            }
 9912|      0|            goto switch_break___0;
 9913|      5|case_3___0 : { /* CIL Label */
 9914|      5|                inStr = fopen((char const * /* __restrict  */)(inName),
 9915|      5|                              (char const * /* __restrict  */) "rb");
 9916|      5|                outStr = fopen_output_safely(outName, "wb");
 9917|      5|            }
 9918|      5|            if ((unsigned long)outStr == (unsigned long)((void *)0)) {
 9919|      0|                {
 9920|      0|                    tmp___11 = __errno_location();
 9921|      0|                    tmp___12 = strerror(*tmp___11);
 9922|      0|                    fprintf((FILE * /* __restrict  */) stderr,
 9923|      0|                            (char const * /* __restrict  */) "%s: Can\'t create output "
 9924|      0|                            "file %s: %s.\n",
 9925|      0|                            progName, outName, tmp___12);
 9926|      0|                }
 9927|      0|                if ((unsigned long)inStr != (unsigned long)((void *)0)) {
 9928|      0|                    {
 9929|      0|                        fclose(inStr);
 9930|      0|                    }
 9931|      0|                }
 9932|      0|                {
 9933|      0|                    setExit(1);
 9934|      0|                }
 9935|      0|                return;
 9936|      0|            }
 9937|      5|            if ((unsigned long)inStr == (unsigned long)((void *)0)) {
 9938|      0|                {
 9939|      0|                    tmp___13 = __errno_location();
 9940|      0|                    tmp___14 = strerror(*tmp___13);
 9941|      0|                    fprintf(
 9942|      0|                        (FILE * /* __restrict  */) stderr,
 9943|      0|                        (char const
 9944|      0|                         * /* __restrict  */) "%s: Can\'t open input file %s: %s.\n",
 9945|      0|                        progName, inName, tmp___14);
 9946|      0|                }
 9947|      0|                if ((unsigned long)outStr != (unsigned long)((void *)0)) {
 9948|      0|                    {
 9949|      0|                        fclose(outStr);
 9950|      0|                    }
 9951|      0|                }
 9952|      0|                {
 9953|      0|                    setExit(1);
 9954|      0|                }
 9955|      0|                return;
 9956|      0|            }
 9957|      5|            goto switch_break___0;
 9958|      5|switch_default : { /* CIL Label */
 9959|      0|                panic("uncompress: bad srcMode");
 9960|      5|            }
 9961|      0|            goto switch_break___0;
 9962|      5|switch_break___0: /* CIL Label */
 9963|      5|            ;
 9964|      5|        }
 9965|      5|        if (verbosity >= 1) {
 9966|      0|            {
 9967|      0|                fprintf((FILE * /* __restrict  */) stderr,
 9968|      0|                        (char const * /* __restrict  */) "  %s: ", inName);
 9969|      0|                pad(inName);
 9970|      0|                fflush(stderr);
 9971|      0|            }
 9972|      0|        }
 9973|      5|        {
 9974|      5|            outputHandleJustInCase = outStr;
 9975|      5|            deleteOutputOnInterrupt = (Bool)1;
 9976|      5|            magicNumberOK = uncompressStream(inStr, outStr);
 9977|      5|            outputHandleJustInCase = (FILE *)((void *)0);
 9978|      5|        }
 9979|      5|        if (magicNumberOK) {
 9980|      5|            if (srcMode == 3) {
 9981|      5|                {
 9982|      5|                    applySavedTimeInfoToOutputFile(outName);
 9983|      5|                    deleteOutputOnInterrupt = (Bool)0;
 9984|      5|                }
 9985|      5|                if (!keepInputFiles) {
 9986|      5|                    {
 9987|      5|                        tmp___15 = remove((char const *)(inName));
 9988|      5|                        retVal = tmp___15;
 9989|      5|                    }
 9990|      5|                    if (retVal != 0) {
 9991|      0|                        {
 9992|      0|                            ioError();
 9993|      0|                        }
 9994|      0|                    }
 9995|      5|                }
 9996|      5|            }
 9997|      5|        }
 9998|      0|        else {
 9999|      0|            unzFailsExist = (Bool)1;
10000|      0|            deleteOutputOnInterrupt = (Bool)0;
10001|      0|            if (srcMode == 3) {
10002|      0|                {
10003|      0|                    tmp___16 = remove((char const *)(outName));
10004|      0|                    retVal___0 = tmp___16;
10005|      0|                }
10006|      0|                if (retVal___0 != 0) {
10007|      0|                    {
10008|      0|                        ioError();
10009|      0|                    }
10010|      0|                }
10011|      0|            }
10012|      0|        }
10013|      5|        deleteOutputOnInterrupt = (Bool)0;
10014|      5|        if (magicNumberOK) {
10015|      5|            if (verbosity >= 1) {
10016|      0|                {
10017|      0|                    fprintf((FILE * /* __restrict  */) stderr,
10018|      0|                            (char const * /* __restrict  */) "done\n");
10019|      0|                }
10020|      0|            }
10021|      5|        }
10022|      0|        else {
10023|      0|            {
10024|      0|                setExit(2);
10025|      0|            }
10026|      0|            if (verbosity >= 1) {
10027|      0|                {
10028|      0|                    fprintf((FILE * /* __restrict  */) stderr,
10029|      0|                            (char const * /* __restrict  */) "not a bzip2 file.\n");
10030|      0|                }
10031|      0|            }
10032|      0|            else {
10033|      0|                {
10034|      0|                    fprintf(
10035|      0|                        (FILE * /* __restrict  */) stderr,
10036|      0|                        (char const * /* __restrict  */) "%s: %s is not a bzip2 file.\n",
10037|      0|                        progName, inName);
10038|      0|                }
10039|      0|            }
10040|      0|        }
10041|      5|        return;
10042|      5|    }
10043|      5|}
10044|       |static void testf(Char *name)
10045|      0|{
10046|      0|    FILE *inStr;
10047|      0|    Bool allOK;
10048|      0|    struct stat statBuf;
10049|      0|    Bool tmp;
10050|      0|    int *tmp___0;
10051|      0|    char *tmp___1;
10052|      0|    Bool tmp___2;
10053|      0|    int tmp___3;
10054|      0|    int tmp___4;
10055|      0|    int *tmp___5;
10056|      0|    char *tmp___6;
10057|      0|    void *__cil_tmp13;
10058|      0|    char *__cil_tmp14;
10059|      0|    char *__cil_tmp15;
10060|      0|    char *__cil_tmp16;
10061|      0|    char *__cil_tmp17;
10062|       |
10063|      0|    {
10064|      0|        deleteOutputOnInterrupt = (Bool)0;
10065|      0|        if ((unsigned long)name == (unsigned long)((void *)0)) {
10066|      0|            if (srcMode != 1) {
10067|      0|                {
10068|      0|                    panic("testf: bad modes\n");
10069|      0|                }
10070|      0|            }
10071|      0|        }
10072|      0|        {
10073|      0|            copyFileName(outName, (Char *)"(none)");
10074|      0|        }
10075|      0|        {
10076|      0|            if (srcMode == 1) {
10077|      0|                goto case_1;
10078|      0|            }
10079|      0|            if (srcMode == 3) {
10080|      0|                goto case_3;
10081|      0|            }
10082|      0|            if (srcMode == 2) {
10083|      0|                goto case_2;
10084|      0|            }
10085|      0|            goto switch_break;
10086|      0|case_1 : { /* CIL Label */
10087|      0|                copyFileName(inName, (Char *)"(stdin)");
10088|      0|            }
10089|      0|            goto switch_break;
10090|      0|case_3 : { /* CIL Label */
10091|      0|                copyFileName(inName, name);
10092|      0|            }
10093|      0|            goto switch_break;
10094|      0|case_2 : { /* CIL Label */
10095|      0|                copyFileName(inName, name);
10096|      0|            }
10097|      0|            goto switch_break;
10098|      0|switch_break: /* CIL Label */
10099|      0|            ;
10100|      0|        }
10101|      0|        if (srcMode != 1) {
10102|      0|            {
10103|      0|                tmp = containsDubiousChars(inName);
10104|      0|            }
10105|      0|            if (tmp) {
10106|      0|                if (noisy) {
10107|      0|                    {
10108|      0|                        fprintf((FILE * /* __restrict  */) stderr,
10109|      0|                                (char const * /* __restrict  */) "%s: There are no files "
10110|      0|                                "matching `%s\'.\n",
10111|      0|                                progName, inName);
10112|      0|                    }
10113|      0|                }
10114|      0|                {
10115|      0|                    setExit(1);
10116|      0|                }
10117|      0|                return;
10118|      0|            }
10119|      0|        }
10120|      0|        if (srcMode != 1) {
10121|      0|            {
10122|      0|                tmp___2 = fileExists(inName);
10123|      0|            }
10124|      0|            if (!tmp___2) {
10125|      0|                {
10126|      0|                    tmp___0 = __errno_location();
10127|      0|                    tmp___1 = strerror(*tmp___0);
10128|      0|                    fprintf((FILE * /* __restrict  */) stderr,
10129|      0|                            (char const
10130|      0|                             * /* __restrict  */) "%s: Can\'t open input %s: %s.\n",
10131|      0|                            progName, inName, tmp___1);
10132|      0|                    setExit(1);
10133|      0|                }
10134|      0|                return;
10135|      0|            }
10136|      0|        }
10137|      0|        if (srcMode != 1) {
10138|      0|            {
10139|      0|                stat((char const * /* __restrict  */)(inName),
10140|      0|                     (struct stat * /* __restrict  */)(&statBuf));
10141|      0|            }
10142|      0|            if ((statBuf.st_mode & 61440U) == 16384U) {
10143|      0|                {
10144|      0|                    fprintf(
10145|      0|                        (FILE * /* __restrict  */) stderr,
10146|      0|                        (char const
10147|      0|                         * /* __restrict  */) "%s: Input file %s is a directory.\n",
10148|      0|                        progName, inName);
10149|      0|                    setExit(1);
10150|      0|                }
10151|      0|                return;
10152|      0|            }
10153|      0|        }
10154|      0|        {
10155|      0|            if (srcMode == 1) {
10156|      0|                goto case_1___0;
10157|      0|            }
10158|      0|            if (srcMode == 2) {
10159|      0|                goto case_2___0;
10160|      0|            }
10161|      0|            if (srcMode == 3) {
10162|      0|                goto case_2___0;
10163|      0|            }
10164|      0|            goto switch_default;
10165|      0|case_1___0 : { /* CIL Label */
10166|      0|                tmp___3 = fileno(stdin);
10167|      0|                tmp___4 = isatty(tmp___3);
10168|      0|            }
10169|      0|            if (tmp___4) {
10170|      0|                {
10171|      0|                    fprintf(
10172|      0|                        (FILE * /* __restrict  */) stderr,
10173|      0|                        (char const * /* __restrict  */) "%s: I won\'t read compressed "
10174|      0|                        "data from a terminal.\n",
10175|      0|                        progName);
10176|      0|                    fprintf(
10177|      0|                        (FILE * /* __restrict  */) stderr,
10178|      0|                        (char const
10179|      0|                         * /* __restrict  */) "%s: For help, type: `%s --help\'.\n",
10180|      0|                        progName, progName);
10181|      0|                    setExit(1);
10182|      0|                }
10183|      0|                return;
10184|      0|            }
10185|      0|            inStr = stdin;
10186|      0|            goto switch_break___0;
10187|      0|case_2___0:  /* CIL Label */
10188|      0|case_3___0 : { /* CIL Label */
10189|      0|                inStr = fopen((char const * /* __restrict  */)(inName),
10190|      0|                              (char const * /* __restrict  */) "rb");
10191|      0|            }
10192|      0|            if ((unsigned long)inStr == (unsigned long)((void *)0)) {
10193|      0|                {
10194|      0|                    tmp___5 = __errno_location();
10195|      0|                    tmp___6 = strerror(*tmp___5);
10196|      0|                    fprintf(
10197|      0|                        (FILE * /* __restrict  */) stderr,
10198|      0|                        (char const
10199|      0|                         * /* __restrict  */) "%s: Can\'t open input file %s:%s.\n",
10200|      0|                        progName, inName, tmp___6);
10201|      0|                    setExit(1);
10202|      0|                }
10203|      0|                return;
10204|      0|            }
10205|      0|            goto switch_break___0;
10206|      0|switch_default : { /* CIL Label */
10207|      0|                panic("testf: bad srcMode");
10208|      0|            }
10209|      0|            goto switch_break___0;
10210|      0|switch_break___0: /* CIL Label */
10211|      0|            ;
10212|      0|        }
10213|      0|        if (verbosity >= 1) {
10214|      0|            {
10215|      0|                fprintf((FILE * /* __restrict  */) stderr,
10216|      0|                        (char const * /* __restrict  */) "  %s: ", inName);
10217|      0|                pad(inName);
10218|      0|                fflush(stderr);
10219|      0|            }
10220|      0|        }
10221|      0|        {
10222|      0|            outputHandleJustInCase = (FILE *)((void *)0);
10223|      0|            allOK = testStream(inStr);
10224|      0|        }
10225|      0|        if (allOK) {
10226|      0|            if (verbosity >= 1) {
10227|      0|                {
10228|      0|                    fprintf((FILE * /* __restrict  */) stderr,
10229|      0|                            (char const * /* __restrict  */) "ok\n");
10230|      0|                }
10231|      0|            }
10232|      0|        }
10233|      0|        if (!allOK) {
10234|      0|            testFailsExist = (Bool)1;
10235|      0|        }
10236|      0|        return;
10237|      0|    }
10238|      0|}
10239|       |static void license(void)
10240|      0|{
10241|      0|    char const *tmp;
10242|       |
10243|      0|    {
10244|      0|        {
10245|      0|            tmp = BZ2_bzlibVersion();
10246|      0|            fprintf(
10247|      0|                (FILE * /* __restrict  */) stderr,
10248|      0|                (char const
10249|      0|                 * /* __restrict  */) "bzip2, a block-sorting file compressor.  "
10250|      0|                "Version %s.\n   \n   Copyright (C) "
10251|      0|                "1996-2007 by Julian Seward.\n   \n   This "
10252|      0|                "program is free software; you can "
10253|      0|                "redistribute it and/or modify\n   it "
10254|      0|                "under the terms set out in the LICENSE "
10255|      0|                "file, which is included\n   in the "
10256|      0|                "bzip2-1.0.5 source distribution.\n   \n   "
10257|      0|                "This program is distributed in the hope "
10258|      0|                "that it will be useful,\n   but WITHOUT "
10259|      0|                "ANY WARRANTY; without even the implied "
10260|      0|                "warranty of\n   MERCHANTABILITY or "
10261|      0|                "FITNESS FOR A PARTICULAR PURPOSE.  See "
10262|      0|                "the\n   LICENSE file for more details.\n  "
10263|      0|                " \n",
10264|      0|                tmp);
10265|      0|        }
10266|      0|        return;
10267|      0|    }
10268|      0|}
10269|       |static void usage(Char *fullProgName)
10270|      0|{
10271|      0|    char const *tmp;
10272|       |
10273|      0|    {
10274|      0|        {
10275|      0|            tmp = BZ2_bzlibVersion();
10276|      0|            fprintf(
10277|      0|                (FILE * /* __restrict  */) stderr,
10278|      0|                (char const
10279|      0|                 * /* __restrict  */) "bzip2, a block-sorting file compressor.  "
10280|      0|                "Version %s.\n\n   usage: %s [flags and "
10281|      0|                "input files in any order]\n\n   -h --help "
10282|      0|                "          print this message\n   -d "
10283|      0|                "--decompress     force decompression\n   "
10284|      0|                "-z --compress       force compression\n   "
10285|      0|                "-k --keep           keep (don\'t delete) "
10286|      0|                "input files\n   -f --force          "
10287|      0|                "overwrite existing output files\n   -t "
10288|      0|                "--test           test compressed file "
10289|      0|                "integrity\n   -c --stdout         output "
10290|      0|                "to standard out\n   -q --quiet          "
10291|      0|                "suppress noncritical error messages\n   "
10292|      0|                "-v --verbose        be verbose (a 2nd -v "
10293|      0|                "gives more)\n   -L --license        "
10294|      0|                "display software version & license\n   -V "
10295|      0|                "--version        display software version "
10296|      0|                "& license\n   -s --small          use "
10297|      0|                "less memory (at most 2500k)\n   -1 .. -9  "
10298|      0|                "          set block size to 100k .. "
10299|      0|                "900k\n   --fast              alias for "
10300|      0|                "-1\n   --best              alias for "
10301|      0|                "-9\n\n   If invoked as `bzip2\', default "
10302|      0|                "action is to compress.\n              as "
10303|      0|                "`bunzip2\',  default action is to "
10304|      0|                "decompress.\n              as `bzcat\', "
10305|      0|                "default action is to decompress to "
10306|      0|                "stdout.\n\n   If no file names are given, "
10307|      0|                "bzip2 compresses or decompresses\n   from "
10308|      0|                "standard input to standard output.  You "
10309|      0|                "can combine\n   short flags, so `-v -4\' "
10310|      0|                "means the same as -v4 or -4v, &c.\n\n",
10311|      0|                tmp, fullProgName);
10312|      0|        }
10313|      0|        return;
10314|      0|    }
10315|      0|}
10316|       |static void redundant(Char *flag)
10317|      0|{
10318|       |
10319|      0|    {
10320|      0|        {
10321|      0|            fprintf((FILE * /* __restrict  */) stderr,
10322|      0|                    (char const * /* __restrict  */) "%s: %s is redundant in "
10323|      0|                    "versions 0.9.5 and above\n",
10324|      0|                    progName, flag);
10325|      0|        }
10326|      0|        return;
10327|      0|    }
10328|      0|}
10329|       |static void *myMalloc(Int32 n)
10330|     18|{
10331|     18|    void *p;
10332|       |
10333|     18|    {
10334|     18|        {
10335|     18|            p = malloc((size_t)n);
10336|     18|        }
10337|     18|        if ((unsigned long)p == (unsigned long)((void *)0)) {
10338|      0|            {
10339|      0|                outOfMemory();
10340|      0|            }
10341|      0|        }
10342|     18|        return (p);
10343|     18|    }
10344|     18|}
10345|       |static Cell *mkCell(void)
10346|      9|{
10347|      9|    Cell *c;
10348|       |
10349|      9|    {
10350|      9|        {
10351|      9|            c = (Cell *)myMalloc((Int32)sizeof(Cell));
10352|      9|            c->name = (Char *)((void *)0);
10353|      9|            c->link = (struct zzzz *)((void *)0);
10354|      9|        }
10355|      9|        return (c);
10356|      9|    }
10357|      9|}
10358|       |static Cell *snocString(Cell *root, Char *name)
10359|     14|{
10360|     14|    Cell *tmp;
10361|     14|    Cell *tmp___0;
10362|     14|    size_t tmp___1;
10363|     14|    Cell *tmp___3;
10364|       |
10365|     14|    {
10366|     14|        if ((unsigned long)root == (unsigned long)((void *)0)) {
10367|      9|            {
10368|      9|                tmp___0 = mkCell();
10369|      9|                tmp = tmp___0;
10370|      9|                tmp___1 = strlen((char const *)name);
10371|      9|                tmp->name = (Char *)myMalloc((Int32)(5UL + tmp___1));
10372|      9|                strcpy((char * /* __restrict  */)tmp->name,
10373|      9|                       (char const * /* __restrict  */)name);
10374|      9|            }
10375|      9|            return (tmp);
10376|      9|        }
10377|      5|        else {
10378|      5|            tmp___3 = root;
10379|      5|            {
10380|      8|                while (1) {
10381|      8|while_continue: /* CIL Label */
10382|      8|                    ;
10383|      8|                    if (!((unsigned long)tmp___3->link != (unsigned long)((void *)0))) {
10384|      5|                        goto while_break;
10385|      5|                    }
10386|      3|                    tmp___3 = tmp___3->link;
10387|      3|                }
10388|      5|while_break: /* CIL Label */
10389|      5|                ;
10390|      5|            }
10391|      0|            {
10392|      5|                tmp___3->link = snocString(tmp___3->link, name);
10393|      5|            }
10394|      5|            return (root);
10395|      5|        }
10396|     14|    }
10397|     14|}
10398|       |static void addFlagsFromEnvVar(Cell **argList, Char *varName)
10399|      8|{
10400|      8|    Int32 i;
10401|      8|    Int32 j;
10402|      8|    Int32 k;
10403|      8|    Char *envbase;
10404|      8|    Char *p;
10405|      8|    unsigned short const **tmp;
10406|      8|    unsigned short const **tmp___0;
10407|       |
10408|      8|    {
10409|      8|        {
10410|      8|            envbase = getenv((char const *)varName);
10411|      8|        }
10412|      8|        if ((unsigned long)envbase != (unsigned long)((void *)0)) {
10413|      0|            p = envbase;
10414|      0|            i = 0;
10415|      0|            {
10416|      0|                while (1) {
10417|      0|while_continue: /* CIL Label */
10418|      0|                    ;
10419|      0|                    if (!(!((int)*(p + i) == 0))) {
10420|      0|                        goto while_break;
10421|      0|                    }
10422|      0|                    p += i;
10423|      0|                    i = 0;
10424|      0|                    {
10425|      0|                        while (1) {
10426|      0|while_continue___0: /* CIL Label */
10427|      0|                            ;
10428|      0|                            {
10429|      0|                                tmp = __ctype_b_loc();
10430|      0|                            }
10431|      0|                            if (!((int const) * (*tmp + (Int32) * (p + 0)) & 8192)) {
10432|      0|                                goto while_break___0;
10433|      0|                            }
10434|      0|                            p++;
10435|      0|                        }
10436|      0|while_break___0: /* CIL Label */
10437|      0|                        ;
10438|      0|                    }
10439|      0|                    {
10440|      0|                        while (1) {
10441|      0|while_continue___1: /* CIL Label */
10442|      0|                            ;
10443|      0|                            if ((int)*(p + i) != 0) {
10444|      0|                                {
10445|      0|                                    tmp___0 = __ctype_b_loc();
10446|      0|                                }
10447|      0|                                if ((int const) * (*tmp___0 + (Int32) * (p + i)) & 8192) {
10448|      0|                                    goto while_break___1;
10449|      0|                                }
10450|      0|                            }
10451|      0|                            else {
10452|      0|                                goto while_break___1;
10453|      0|                            }
10454|      0|                            i++;
10455|      0|                        }
10456|      0|while_break___1: /* CIL Label */
10457|      0|                        ;
10458|      0|                    }
10459|      0|                    if (i > 0) {
10460|      0|                        k = i;
10461|      0|                        if (k > 1024) {
10462|      0|                            k = 1024;
10463|      0|                        }
10464|      0|                        j = 0;
10465|      0|                        {
10466|      0|                            while (1) {
10467|      0|while_continue___2: /* CIL Label */
10468|      0|                                ;
10469|      0|                                if (!(j < k)) {
10470|      0|                                    goto while_break___2;
10471|      0|                                }
10472|      0|                                tmpName[j] = *(p + j);
10473|      0|                                j++;
10474|      0|                            }
10475|      0|while_break___2: /* CIL Label */
10476|      0|                            ;
10477|      0|                        }
10478|      0|                        {
10479|      0|                            tmpName[k] = (Char)0;
10480|      0|                            *argList = snocString(*argList, tmpName);
10481|      0|                        }
10482|      0|                    }
10483|      0|                }
10484|      0|while_break: /* CIL Label */
10485|      0|                ;
10486|      0|            }
10487|      0|        }
10488|      8|        return;
10489|      8|    }
10490|      8|}
10491|       |IntNative main(IntNative argc, Char **argv)
10492|      4|{
10493|      4|    Int32 i;
10494|      4|    Int32 j;
10495|      4|    Char *tmp;
10496|      4|    Cell *argList;
10497|      4|    Cell *aa;
10498|      4|    Bool decode;
10499|      4|    int tmp___0;
10500|      4|    size_t tmp___2;
10501|      4|    char *tmp___3;
10502|      4|    char *tmp___4;
10503|      4|    char *tmp___5;
10504|      4|    char *tmp___6;
10505|      4|    char *tmp___7;
10506|      4|    char *tmp___8;
10507|      4|    int tmp___9;
10508|      4|    int tmp___10;
10509|      4|    int tmp___11;
10510|      4|    int tmp___12;
10511|      4|    int tmp___13;
10512|      4|    int tmp___14;
10513|      4|    int tmp___15;
10514|      4|    int tmp___16;
10515|      4|    int tmp___17;
10516|      4|    int tmp___18;
10517|      4|    int tmp___19;
10518|      4|    int tmp___20;
10519|      4|    int tmp___21;
10520|      4|    int tmp___22;
10521|      4|    int tmp___23;
10522|      4|    int tmp___24;
10523|      4|    int tmp___25;
10524|      4|    int tmp___26;
10525|      4|    int tmp___27;
10526|      4|    int tmp___28;
10527|      4|    int tmp___29;
10528|      4|    int tmp___30;
10529|      4|    int tmp___31;
10530|      4|    Cell *aa2;
10531|      4|    char *__cil_tmp42;
10532|      4|    char *__cil_tmp43;
10533|      4|    char *__cil_tmp44;
10534|      4|    char *__cil_tmp45;
10535|       |
10536|      4|    {
10537|      4|        if (sizeof(Int32) != 4UL) {
10538|      0|            {
10539|      0|                configError();
10540|      0|            }
10541|      0|        }
10542|      4|        else {
10543|      4|            if (sizeof(UInt32) != 4UL) {
10544|      0|                {
10545|      0|                    configError();
10546|      0|                }
10547|      0|            }
10548|      4|            else {
10549|      4|                if (sizeof(Int16) != 2UL) {
10550|      0|                    {
10551|      0|                        configError();
10552|      0|                    }
10553|      0|                }
10554|      4|                else {
10555|      4|                    if (sizeof(UInt16) != 2UL) {
10556|      0|                        {
10557|      0|                            configError();
10558|      0|                        }
10559|      0|                    }
10560|      4|                    else {
10561|      4|                        if (sizeof(Char) != 1UL) {
10562|      0|                            {
10563|      0|                                configError();
10564|      0|                            }
10565|      0|                        }
10566|      4|                        else {
10567|      4|                            if (sizeof(UChar) != 1UL) {
10568|      0|                                {
10569|      0|                                    configError();
10570|      0|                                }
10571|      0|                            }
10572|      4|                        }
10573|      4|                    }
10574|      4|                }
10575|      4|            }
10576|      4|        }
10577|      4|        {
10578|      4|            outputHandleJustInCase = (FILE *)((void *)0);
10579|      4|            smallMode = (Bool)0;
10580|      4|            keepInputFiles = (Bool)0;
10581|      4|            forceOverwrite = (Bool)0;
10582|      4|            noisy = (Bool)1;
10583|      4|            verbosity = 0;
10584|      4|            blockSize100k = 9;
10585|      4|            testFailsExist = (Bool)0;
10586|      4|            unzFailsExist = (Bool)0;
10587|      4|            numFileNames = 0;
10588|      4|            numFilesProcessed = 0;
10589|      4|            workFactor = 30;
10590|      4|            deleteOutputOnInterrupt = (Bool)0;
10591|      4|            exitValue = 0;
10592|      4|            j = 0;
10593|      4|            i = j;
10594|      4|            signal(11, &mySIGSEGVorSIGBUScatcher);
10595|      4|            signal(7, &mySIGSEGVorSIGBUScatcher);
10596|      4|            copyFileName(inName, (Char *)"(none)");
10597|      4|            copyFileName(outName, (Char *)"(none)");
10598|      4|            copyFileName(progNameReally, *(argv + 0));
10599|      4|            progName = &progNameReally[0];
10600|      4|            tmp = &progNameReally[0];
10601|      4|        }
10602|      4|        {
10603|     52|            while (1) {
10604|     52|while_continue: /* CIL Label */
10605|     52|                ;
10606|     52|                if (!((int)*tmp != 0)) {
10607|      4|                    goto while_break;
10608|      4|                }
10609|     48|                if ((int)*tmp == 47) {
10610|      4|                    progName = tmp + 1;
10611|      4|                }
10612|     48|                tmp++;
10613|     48|            }
10614|      4|while_break: /* CIL Label */
10615|      4|            ;
10616|      4|        }
10617|      0|        {
10618|      4|            argList = (Cell *)((void *)0);
10619|      4|            addFlagsFromEnvVar(&argList, (Char *)"BZIP2");
10620|      4|            addFlagsFromEnvVar(&argList, (Char *)"BZIP");
10621|      4|            i = 1;
10622|      4|        }
10623|      4|        {
10624|     13|            while (1) {
10625|     13|while_continue___0: /* CIL Label */
10626|     13|                ;
10627|     13|                if (!(i <= argc - 1)) {
10628|      4|                    goto while_break___0;
10629|      4|                }
10630|      9|                {
10631|      9|                    argList = snocString(argList, *(argv + i));
10632|      9|                    i++;
10633|      9|                }
10634|      9|            }
10635|      4|while_break___0: /* CIL Label */
10636|      4|            ;
10637|      4|        }
10638|      0|        longestFileName = 7;
10639|      4|        numFileNames = 0;
10640|      4|        decode = (Bool)1;
10641|      4|        aa = argList;
10642|      4|        {
10643|     13|            while (1) {
10644|     13|while_continue___1: /* CIL Label */
10645|     13|                ;
10646|     13|                if (!((unsigned long)aa != (unsigned long)((void *)0))) {
10647|      4|                    goto while_break___1;
10648|      4|                }
10649|      9|                {
10650|      9|                    tmp___0 = strcmp((char const *)aa->name, "--");
10651|      9|                }
10652|      9|                if (tmp___0 == 0) {
10653|      0|                    decode = (Bool)0;
10654|      0|                    goto __Cont;
10655|      0|                }
10656|      9|                if ((int)*(aa->name + 0) == 45) {
10657|      3|                    if (decode) {
10658|      3|                        goto __Cont;
10659|      3|                    }
10660|      3|                }
10661|      6|                {
10662|      6|                    numFileNames++;
10663|      6|                    tmp___2 = strlen((char const *)aa->name);
10664|      6|                }
10665|      6|                if (longestFileName < (Int32)tmp___2) {
10666|      4|                    {
10667|      4|                        longestFileName = (Int32)strlen((char const *)aa->name);
10668|      4|                    }
10669|      4|                }
10670|      9|__Cont:
10671|      9|                aa = aa->link;
10672|      9|            }
10673|      4|while_break___1: /* CIL Label */
10674|      4|            ;
10675|      4|        }
10676|      4|        if (numFileNames == 0) {
10677|      0|            srcMode = 1;
10678|      0|        }
10679|      4|        else {
10680|      4|            srcMode = 3;
10681|      4|        }
10682|      4|        {
10683|      4|            opMode = 1;
10684|      4|            tmp___3 = strstr((char const *)progName, "unzip");
10685|      4|        }
10686|      4|        if ((unsigned long)tmp___3 != (unsigned long)((char *)0)) {
10687|      0|            opMode = 2;
10688|      0|        }
10689|      4|        else {
10690|      4|            {
10691|      4|                tmp___4 = strstr((char const *)progName, "UNZIP");
10692|      4|            }
10693|      4|            if ((unsigned long)tmp___4 != (unsigned long)((char *)0)) {
10694|      0|                opMode = 2;
10695|      0|            }
10696|      4|        }
10697|      4|        {
10698|      4|            tmp___5 = strstr((char const *)progName, "z2cat");
10699|      4|        }
10700|      4|        if ((unsigned long)tmp___5 != (unsigned long)((char *)0)) {
10701|      0|            goto _L;
10702|      0|        }
10703|      4|        else {
10704|      4|            {
10705|      4|                tmp___6 = strstr((char const *)progName, "Z2CAT");
10706|      4|            }
10707|      4|            if ((unsigned long)tmp___6 != (unsigned long)((char *)0)) {
10708|      0|                goto _L;
10709|      0|            }
10710|      4|            else {
10711|      4|                {
10712|      4|                    tmp___7 = strstr((char const *)progName, "zcat");
10713|      4|                }
10714|      4|                if ((unsigned long)tmp___7 != (unsigned long)((char *)0)) {
10715|      0|                    goto _L;
10716|      0|                }
10717|      4|                else {
10718|      4|                    {
10719|      4|                        tmp___8 = strstr((char const *)progName, "ZCAT");
10720|      4|                    }
10721|      4|                    if ((unsigned long)tmp___8 != (unsigned long)((char *)0)) {
10722|      0|_L:
10723|      0|                        opMode = 2;
10724|      0|                        if (numFileNames == 0) {
10725|      0|                            srcMode = 1;
10726|      0|                        }
10727|      0|                        else {
10728|      0|                            srcMode = 2;
10729|      0|                        }
10730|      0|                    }
10731|      4|                }
10732|      4|            }
10733|      4|        }
10734|      4|        aa = argList;
10735|      4|        {
10736|     13|            while (1) {
10737|     13|while_continue___2: /* CIL Label */
10738|     13|                ;
10739|     13|                if (!((unsigned long)aa != (unsigned long)((void *)0))) {
10740|      4|                    goto while_break___2;
10741|      4|                }
10742|      9|                {
10743|      9|                    tmp___9 = strcmp((char const *)aa->name, "--");
10744|      9|                }
10745|      9|                if (tmp___9 == 0) {
10746|      0|                    goto while_break___2;
10747|      0|                }
10748|      9|                if ((int)*(aa->name + 0) == 45) {
10749|      3|                    if ((int)*(aa->name + 1) != 45) {
10750|      3|                        j = 1;
10751|      3|                        {
10752|      6|                            while (1) {
10753|      6|while_continue___3: /* CIL Label */
10754|      6|                                ;
10755|      6|                                if (!((int)*(aa->name + j) != 0)) {
10756|      3|                                    goto while_break___3;
10757|      3|                                }
10758|      3|                                {
10759|      3|                                    if ((int)*(aa->name + j) == 99) {
10760|      0|                                        goto case_99;
10761|      0|                                    }
10762|      3|                                    if ((int)*(aa->name + j) == 100) {
10763|      3|                                        goto case_100;
10764|      3|                                    }
10765|      0|                                    if ((int)*(aa->name + j) == 122) {
10766|      0|                                        goto case_122;
10767|      0|                                    }
10768|      0|                                    if ((int)*(aa->name + j) == 102) {
10769|      0|                                        goto case_102;
10770|      0|                                    }
10771|      0|                                    if ((int)*(aa->name + j) == 116) {
10772|      0|                                        goto case_116;
10773|      0|                                    }
10774|      0|                                    if ((int)*(aa->name + j) == 107) {
10775|      0|                                        goto case_107;
10776|      0|                                    }
10777|      0|                                    if ((int)*(aa->name + j) == 115) {
10778|      0|                                        goto case_115;
10779|      0|                                    }
10780|      0|                                    if ((int)*(aa->name + j) == 113) {
10781|      0|                                        goto case_113;
10782|      0|                                    }
10783|      0|                                    if ((int)*(aa->name + j) == 49) {
10784|      0|                                        goto case_49;
10785|      0|                                    }
10786|      0|                                    if ((int)*(aa->name + j) == 50) {
10787|      0|                                        goto case_50;
10788|      0|                                    }
10789|      0|                                    if ((int)*(aa->name + j) == 51) {
10790|      0|                                        goto case_51;
10791|      0|                                    }
10792|      0|                                    if ((int)*(aa->name + j) == 52) {
10793|      0|                                        goto case_52;
10794|      0|                                    }
10795|      0|                                    if ((int)*(aa->name + j) == 53) {
10796|      0|                                        goto case_53;
10797|      0|                                    }
10798|      0|                                    if ((int)*(aa->name + j) == 54) {
10799|      0|                                        goto case_54;
10800|      0|                                    }
10801|      0|                                    if ((int)*(aa->name + j) == 55) {
10802|      0|                                        goto case_55;
10803|      0|                                    }
10804|      0|                                    if ((int)*(aa->name + j) == 56) {
10805|      0|                                        goto case_56;
10806|      0|                                    }
10807|      0|                                    if ((int)*(aa->name + j) == 57) {
10808|      0|                                        goto case_57;
10809|      0|                                    }
10810|      0|                                    if ((int)*(aa->name + j) == 86) {
10811|      0|                                        goto case_86;
10812|      0|                                    }
10813|      0|                                    if ((int)*(aa->name + j) == 76) {
10814|      0|                                        goto case_86;
10815|      0|                                    }
10816|      0|                                    if ((int)*(aa->name + j) == 118) {
10817|      0|                                        goto case_118;
10818|      0|                                    }
10819|      0|                                    if ((int)*(aa->name + j) == 104) {
10820|      0|                                        goto case_104;
10821|      0|                                    }
10822|      0|                                    goto switch_default;
10823|      0|case_99: /* CIL Label */
10824|      0|                                    srcMode = 2;
10825|      0|                                    goto switch_break;
10826|      3|case_100: /* CIL Label */
10827|      3|                                    opMode = 2;
10828|      3|                                    goto switch_break;
10829|      0|case_122: /* CIL Label */
10830|      0|                                    opMode = 1;
10831|      0|                                    goto switch_break;
10832|      0|case_102: /* CIL Label */
10833|      0|                                    forceOverwrite = (Bool)1;
10834|      0|                                    goto switch_break;
10835|      0|case_116: /* CIL Label */
10836|      0|                                    opMode = 3;
10837|      0|                                    goto switch_break;
10838|      0|case_107: /* CIL Label */
10839|      0|                                    keepInputFiles = (Bool)1;
10840|      0|                                    goto switch_break;
10841|      0|case_115: /* CIL Label */
10842|      0|                                    smallMode = (Bool)1;
10843|      0|                                    goto switch_break;
10844|      0|case_113: /* CIL Label */
10845|      0|                                    noisy = (Bool)0;
10846|      0|                                    goto switch_break;
10847|      0|case_49: /* CIL Label */
10848|      0|                                    blockSize100k = 1;
10849|      0|                                    goto switch_break;
10850|      0|case_50: /* CIL Label */
10851|      0|                                    blockSize100k = 2;
10852|      0|                                    goto switch_break;
10853|      0|case_51: /* CIL Label */
10854|      0|                                    blockSize100k = 3;
10855|      0|                                    goto switch_break;
10856|      0|case_52: /* CIL Label */
10857|      0|                                    blockSize100k = 4;
10858|      0|                                    goto switch_break;
10859|      0|case_53: /* CIL Label */
10860|      0|                                    blockSize100k = 5;
10861|      0|                                    goto switch_break;
10862|      0|case_54: /* CIL Label */
10863|      0|                                    blockSize100k = 6;
10864|      0|                                    goto switch_break;
10865|      0|case_55: /* CIL Label */
10866|      0|                                    blockSize100k = 7;
10867|      0|                                    goto switch_break;
10868|      0|case_56: /* CIL Label */
10869|      0|                                    blockSize100k = 8;
10870|      0|                                    goto switch_break;
10871|      0|case_57: /* CIL Label */
10872|      0|                                    blockSize100k = 9;
10873|      0|                                    goto switch_break;
10874|      0|case_86:  /* CIL Label */
10875|      0|case_76 : { /* CIL Label */
10876|      0|                                        license();
10877|      0|                                    }
10878|      0|                                    goto switch_break;
10879|      0|case_118: /* CIL Label */
10880|      0|                                    verbosity++;
10881|      0|                                    goto switch_break;
10882|      0|case_104 : { /* CIL Label */
10883|      0|                                        usage(progName);
10884|      0|                                        exit(0);
10885|      0|                                    }
10886|      0|                                    goto switch_break;
10887|      0|switch_default : { /* CIL Label */
10888|      0|                                        fprintf(
10889|      0|                                            (FILE * /* __restrict  */) stderr,
10890|      0|                                            (char const * /* __restrict  */) "%s: Bad flag `%s\'\n",
10891|      0|                                            progName, aa->name);
10892|      0|                                        usage(progName);
10893|      0|                                        exit(1);
10894|      0|                                    }
10895|      0|                                    goto switch_break;
10896|      3|switch_break: /* CIL Label */
10897|      3|                                    ;
10898|      3|                                }
10899|      0|                                j++;
10900|      3|                            }
10901|      3|while_break___3: /* CIL Label */
10902|      3|                            ;
10903|      3|                        }
10904|      3|                    }
10905|      3|                }
10906|      9|                aa = aa->link;
10907|      9|            }
10908|      4|while_break___2: /* CIL Label */
10909|      4|            ;
10910|      4|        }
10911|      0|        aa = argList;
10912|      4|        {
10913|     13|            while (1) {
10914|     13|while_continue___4: /* CIL Label */
10915|     13|                ;
10916|     13|                if (!((unsigned long)aa != (unsigned long)((void *)0))) {
10917|      4|                    goto while_break___4;
10918|      4|                }
10919|      9|                {
10920|      9|                    tmp___10 = strcmp((char const *)aa->name, "--");
10921|      9|                }
10922|      9|                if (tmp___10 == 0) {
10923|      0|                    goto while_break___4;
10924|      0|                }
10925|      9|                {
10926|      9|                    tmp___28 = strcmp((char const *)aa->name, "--stdout");
10927|      9|                }
10928|      9|                if (tmp___28 == 0) {
10929|      0|                    srcMode = 2;
10930|      0|                }
10931|      9|                else {
10932|      9|                    {
10933|      9|                        tmp___27 = strcmp((char const *)aa->name, "--decompress");
10934|      9|                    }
10935|      9|                    if (tmp___27 == 0) {
10936|      0|                        opMode = 2;
10937|      0|                    }
10938|      9|                    else {
10939|      9|                        {
10940|      9|                            tmp___26 = strcmp((char const *)aa->name, "--compress");
10941|      9|                        }
10942|      9|                        if (tmp___26 == 0) {
10943|      0|                            opMode = 1;
10944|      0|                        }
10945|      9|                        else {
10946|      9|                            {
10947|      9|                                tmp___25 = strcmp((char const *)aa->name, "--force");
10948|      9|                            }
10949|      9|                            if (tmp___25 == 0) {
10950|      0|                                forceOverwrite = (Bool)1;
10951|      0|                            }
10952|      9|                            else {
10953|      9|                                {
10954|      9|                                    tmp___24 = strcmp((char const *)aa->name, "--test");
10955|      9|                                }
10956|      9|                                if (tmp___24 == 0) {
10957|      0|                                    opMode = 3;
10958|      0|                                }
10959|      9|                                else {
10960|      9|                                    {
10961|      9|                                        tmp___23 = strcmp((char const *)aa->name, "--keep");
10962|      9|                                    }
10963|      9|                                    if (tmp___23 == 0) {
10964|      0|                                        keepInputFiles = (Bool)1;
10965|      0|                                    }
10966|      9|                                    else {
10967|      9|                                        {
10968|      9|                                            tmp___22 = strcmp((char const *)aa->name, "--small");
10969|      9|                                        }
10970|      9|                                        if (tmp___22 == 0) {
10971|      0|                                            smallMode = (Bool)1;
10972|      0|                                        }
10973|      9|                                        else {
10974|      9|                                            {
10975|      9|                                                tmp___21 = strcmp((char const *)aa->name, "--quiet");
10976|      9|                                            }
10977|      9|                                            if (tmp___21 == 0) {
10978|      0|                                                noisy = (Bool)0;
10979|      0|                                            }
10980|      9|                                            else {
10981|      9|                                                {
10982|      9|                                                    tmp___20 =
10983|      9|                                                        strcmp((char const *)aa->name, "--version");
10984|      9|                                                }
10985|      9|                                                if (tmp___20 == 0) {
10986|      0|                                                    {
10987|      0|                                                        license();
10988|      0|                                                    }
10989|      0|                                                }
10990|      9|                                                else {
10991|      9|                                                    {
10992|      9|                                                        tmp___19 =
10993|      9|                                                            strcmp((char const *)aa->name, "--license");
10994|      9|                                                    }
10995|      9|                                                    if (tmp___19 == 0) {
10996|      0|                                                        {
10997|      0|                                                            license();
10998|      0|                                                        }
10999|      0|                                                    }
11000|      9|                                                    else {
11001|      9|                                                        {
11002|      9|                                                            tmp___18 = strcmp((char const *)aa->name,
11003|      9|                                                                              "--exponential");
11004|      9|                                                        }
11005|      9|                                                        if (tmp___18 == 0) {
11006|      0|                                                            workFactor = 1;
11007|      0|                                                        }
11008|      9|                                                        else {
11009|      9|                                                            {
11010|      9|                                                                tmp___17 = strcmp((char const *)aa->name,
11011|      9|                                                                                  "--repetitive-best");
11012|      9|                                                            }
11013|      9|                                                            if (tmp___17 == 0) {
11014|      0|                                                                {
11015|      0|                                                                    redundant(aa->name);
11016|      0|                                                                }
11017|      0|                                                            }
11018|      9|                                                            else {
11019|      9|                                                                {
11020|      9|                                                                    tmp___16 = strcmp((char const *)aa->name,
11021|      9|                                                                                      "--repetitive-fast");
11022|      9|                                                                }
11023|      9|                                                                if (tmp___16 == 0) {
11024|      0|                                                                    {
11025|      0|                                                                        redundant(aa->name);
11026|      0|                                                                    }
11027|      0|                                                                }
11028|      9|                                                                else {
11029|      9|                                                                    {
11030|      9|                                                                        tmp___15 = strcmp((char const *)aa->name,
11031|      9|                                                                                          "--fast");
11032|      9|                                                                    }
11033|      9|                                                                    if (tmp___15 == 0) {
11034|      0|                                                                        blockSize100k = 1;
11035|      0|                                                                    }
11036|      9|                                                                    else {
11037|      9|                                                                        {
11038|      9|                                                                            tmp___14 = strcmp((char const *)aa->name,
11039|      9|                                                                                              "--best");
11040|      9|                                                                        }
11041|      9|                                                                        if (tmp___14 == 0) {
11042|      0|                                                                            blockSize100k = 9;
11043|      0|                                                                        }
11044|      9|                                                                        else {
11045|      9|                                                                            {
11046|      9|                                                                                tmp___13 =
11047|      9|                                                                                    strcmp((char const *)aa->name,
11048|      9|                                                                                           "--verbose");
11049|      9|                                                                            }
11050|      9|                                                                            if (tmp___13 == 0) {
11051|      0|                                                                                verbosity++;
11052|      0|                                                                            }
11053|      9|                                                                            else {
11054|      9|                                                                                {
11055|      9|                                                                                    tmp___12 = strcmp(
11056|      9|                                                                                                   (char const *)aa->name, "--help");
11057|      9|                                                                                }
11058|      9|                                                                                if (tmp___12 == 0) {
11059|      0|                                                                                    {
11060|      0|                                                                                        usage(progName);
11061|      0|                                                                                        exit(0);
11062|      0|                                                                                    }
11063|      0|                                                                                }
11064|      9|                                                                                else {
11065|      9|                                                                                    {
11066|      9|                                                                                        tmp___11 =
11067|      9|                                                                                            strncmp((char const *)aa->name,
11068|      9|                                                                                                    "--", (size_t)2);
11069|      9|                                                                                    }
11070|      9|                                                                                    if (tmp___11 == 0) {
11071|      0|                                                                                        {
11072|      0|                                                                                            fprintf(
11073|      0|                                                                                                (FILE * /* __restrict  */)
11074|      0|                                                                                                stderr,
11075|      0|                                                                                                (char const
11076|      0|                                                                                                 * /* __restrict  */) "%s"
11077|      0|                                                                                                ": "
11078|      0|                                                                                                "Ba"
11079|      0|                                                                                                "d "
11080|      0|                                                                                                "fl"
11081|      0|                                                                                                "ag"
11082|      0|                                                                                                " `"
11083|      0|                                                                                                "%s"
11084|      0|                                                                                                "\'"
11085|      0|                                                                                                "\n",
11086|      0|                                                                                                progName, aa->name);
11087|      0|                                                                                            usage(progName);
11088|      0|                                                                                            exit(1);
11089|      0|                                                                                        }
11090|      0|                                                                                    }
11091|      9|                                                                                }
11092|      9|                                                                            }
11093|      9|                                                                        }
11094|      9|                                                                    }
11095|      9|                                                                }
11096|      9|                                                            }
11097|      9|                                                        }
11098|      9|                                                    }
11099|      9|                                                }
11100|      9|                                            }
11101|      9|                                        }
11102|      9|                                    }
11103|      9|                                }
11104|      9|                            }
11105|      9|                        }
11106|      9|                    }
11107|      9|                }
11108|      9|                aa = aa->link;
11109|      9|            }
11110|      4|while_break___4: /* CIL Label */
11111|      4|            ;
11112|      4|        }
11113|      4|        if (verbosity > 4) {
11114|      0|            verbosity = 4;
11115|      0|        }
11116|      4|        if (opMode == 1) {
11117|      1|            if (smallMode) {
11118|      0|                if (blockSize100k > 2) {
11119|      0|                    blockSize100k = 2;
11120|      0|                }
11121|      0|            }
11122|      1|        }
11123|      4|        if (opMode == 3) {
11124|      0|            if (srcMode == 2) {
11125|      0|                {
11126|      0|                    fprintf((FILE * /* __restrict  */) stderr,
11127|      0|                            (char const * /* __restrict  */) "%s: -c and -t cannot be "
11128|      0|                            "used together.\n",
11129|      0|                            progName);
11130|      0|                    exit(1);
11131|      0|                }
11132|      0|            }
11133|      0|        }
11134|      4|        if (srcMode == 2) {
11135|      0|            if (numFileNames == 0) {
11136|      0|                srcMode = 1;
11137|      0|            }
11138|      0|        }
11139|      4|        if (opMode != 1) {
11140|      3|            blockSize100k = 0;
11141|      3|        }
11142|      4|        if (srcMode == 3) {
11143|      4|            {
11144|      4|                signal(2, &mySignalCatcher);
11145|      4|                signal(15, &mySignalCatcher);
11146|      4|                signal(1, &mySignalCatcher);
11147|      4|            }
11148|      4|        }
11149|      4|        if (opMode == 1) {
11150|      1|            if (srcMode == 1) {
11151|      0|                {
11152|      0|                    compress((Char *)((void *)0));
11153|      0|                }
11154|      0|            }
11155|      1|            else {
11156|      1|                decode = (Bool)1;
11157|      1|                aa = argList;
11158|      1|                {
11159|      2|                    while (1) {
11160|      2|while_continue___5: /* CIL Label */
11161|      2|                        ;
11162|      2|                        if (!((unsigned long)aa != (unsigned long)((void *)0))) {
11163|      1|                            goto while_break___5;
11164|      1|                        }
11165|      1|                        {
11166|      1|                            tmp___29 = strcmp((char const *)aa->name, "--");
11167|      1|                        }
11168|      1|                        if (tmp___29 == 0) {
11169|      0|                            decode = (Bool)0;
11170|      0|                            goto __Cont___0;
11171|      0|                        }
11172|      1|                        if ((int)*(aa->name + 0) == 45) {
11173|      0|                            if (decode) {
11174|      0|                                goto __Cont___0;
11175|      0|                            }
11176|      0|                        }
11177|      1|                        {
11178|      1|                            numFilesProcessed++;
11179|      1|                            compress(aa->name);
11180|      1|                        }
11181|      1|__Cont___0:
11182|      1|                        aa = aa->link;
11183|      1|                    }
11184|      1|while_break___5: /* CIL Label */
11185|      1|                    ;
11186|      1|                }
11187|      1|            }
11188|      1|        }
11189|      3|        else {
11190|      3|            if (opMode == 2) {
11191|      3|                unzFailsExist = (Bool)0;
11192|      3|                if (srcMode == 1) {
11193|      0|                    {
11194|      0|                        uncompress((Char *)((void *)0));
11195|      0|                    }
11196|      0|                }
11197|      3|                else {
11198|      3|                    decode = (Bool)1;
11199|      3|                    aa = argList;
11200|      3|                    {
11201|     11|                        while (1) {
11202|     11|while_continue___6: /* CIL Label */
11203|     11|                            ;
11204|     11|                            if (!((unsigned long)aa != (unsigned long)((void *)0))) {
11205|      3|                                goto while_break___6;
11206|      3|                            }
11207|      8|                            {
11208|      8|                                tmp___30 = strcmp((char const *)aa->name, "--");
11209|      8|                            }
11210|      8|                            if (tmp___30 == 0) {
11211|      0|                                decode = (Bool)0;
11212|      0|                                goto __Cont___1;
11213|      0|                            }
11214|      8|                            if ((int)*(aa->name + 0) == 45) {
11215|      3|                                if (decode) {
11216|      3|                                    goto __Cont___1;
11217|      3|                                }
11218|      3|                            }
11219|      5|                            {
11220|      5|                                numFilesProcessed++;
11221|      5|                                uncompress(aa->name);
11222|      5|                            }
11223|      8|__Cont___1:
11224|      8|                            aa = aa->link;
11225|      8|                        }
11226|      3|while_break___6: /* CIL Label */
11227|      3|                        ;
11228|      3|                    }
11229|      3|                }
11230|      3|                if (unzFailsExist) {
11231|      0|                    {
11232|      0|                        setExit(2);
11233|      0|                        exit(exitValue);
11234|      0|                    }
11235|      0|                }
11236|      3|            }
11237|      0|            else {
11238|      0|                testFailsExist = (Bool)0;
11239|      0|                if (srcMode == 1) {
11240|      0|                    {
11241|      0|                        testf((Char *)((void *)0));
11242|      0|                    }
11243|      0|                }
11244|      0|                else {
11245|      0|                    decode = (Bool)1;
11246|      0|                    aa = argList;
11247|      0|                    {
11248|      0|                        while (1) {
11249|      0|while_continue___7: /* CIL Label */
11250|      0|                            ;
11251|      0|                            if (!((unsigned long)aa != (unsigned long)((void *)0))) {
11252|      0|                                goto while_break___7;
11253|      0|                            }
11254|      0|                            {
11255|      0|                                tmp___31 = strcmp((char const *)aa->name, "--");
11256|      0|                            }
11257|      0|                            if (tmp___31 == 0) {
11258|      0|                                decode = (Bool)0;
11259|      0|                                goto __Cont___2;
11260|      0|                            }
11261|      0|                            if ((int)*(aa->name + 0) == 45) {
11262|      0|                                if (decode) {
11263|      0|                                    goto __Cont___2;
11264|      0|                                }
11265|      0|                            }
11266|      0|                            {
11267|      0|                                numFilesProcessed++;
11268|      0|                                testf(aa->name);
11269|      0|                            }
11270|      0|__Cont___2:
11271|      0|                            aa = aa->link;
11272|      0|                        }
11273|      0|while_break___7: /* CIL Label */
11274|      0|                        ;
11275|      0|                    }
11276|      0|                }
11277|      0|                if (testFailsExist) {
11278|      0|                    if (noisy) {
11279|      0|                        {
11280|      0|                            fprintf(
11281|      0|                                (FILE * /* __restrict  */) stderr,
11282|      0|                                (char const
11283|      0|                                 * /* __restrict  */) "\nYou can use the `bzip2recover\' "
11284|      0|                                "program to attempt to "
11285|      0|                                "recover\ndata from undamaged "
11286|      0|                                "sections of corrupted files.\n\n");
11287|      0|                            setExit(2);
11288|      0|                            exit(exitValue);
11289|      0|                        }
11290|      0|                    }
11291|      0|                }
11292|      0|            }
11293|      3|        }
11294|      4|        aa = argList;
11295|      4|        {
11296|     13|            while (1) {
11297|     13|while_continue___8: /* CIL Label */
11298|     13|                ;
11299|     13|                if (!((unsigned long)aa != (unsigned long)((void *)0))) {
11300|      4|                    goto while_break___8;
11301|      4|                }
11302|      9|                aa2 = aa->link;
11303|      9|                if ((unsigned long)aa->name != (unsigned long)((void *)0)) {
11304|      9|                    {
11305|      9|                        free((void *)aa->name);
11306|      9|                    }
11307|      9|                }
11308|      9|                {
11309|      9|                    free((void *)aa);
11310|      9|                    aa = aa2;
11311|      9|                }
11312|      9|            }
11313|      4|while_break___8: /* CIL Label */
11314|      4|            ;
11315|      4|        }
11316|      0|        return (exitValue);
11317|      4|    }
11318|      4|}
11319|       |__inline static void fallbackSimpleSort(UInt32 *fmap, UInt32 *eclass, Int32 lo,
11320|       |                                        Int32 hi)
11321|      8|{
11322|      8|    Int32 i;
11323|      8|    Int32 j;
11324|      8|    Int32 tmp;
11325|      8|    UInt32 ec_tmp;
11326|       |
11327|      8|    {
11328|      8|        if (lo == hi) {
11329|      0|            return;
11330|      0|        }
11331|      8|        if (hi - lo > 3) {
11332|      1|            i = hi - 4;
11333|      1|            {
11334|      3|                while (1) {
11335|      3|while_continue: /* CIL Label */
11336|      3|                    ;
11337|      3|                    if (!(i >= lo)) {
11338|      1|                        goto while_break;
11339|      1|                    }
11340|      2|                    tmp = (Int32) * (fmap + i);
11341|      2|                    ec_tmp = *(eclass + tmp);
11342|      2|                    j = i + 4;
11343|      2|                    {
11344|      4|                        while (1) {
11345|      4|while_continue___0: /* CIL Label */
11346|      4|                            ;
11347|      4|                            if (j <= hi) {
11348|      2|                                if (!(ec_tmp > *(eclass + *(fmap + j)))) {
11349|      0|                                    goto while_break___0;
11350|      0|                                }
11351|      2|                            }
11352|      2|                            else {
11353|      2|                                goto while_break___0;
11354|      2|                            }
11355|      2|                            *(fmap + (j - 4)) = *(fmap + j);
11356|      2|                            j += 4;
11357|      2|                        }
11358|      2|while_break___0: /* CIL Label */
11359|      2|                        ;
11360|      2|                    }
11361|      0|                    *(fmap + (j - 4)) = (UInt32)tmp;
11362|      2|                    i--;
11363|      2|                }
11364|      1|while_break: /* CIL Label */
11365|      1|                ;
11366|      1|            }
11367|      1|        }
11368|      8|        i = hi - 1;
11369|      8|        {
11370|     20|            while (1) {
11371|     20|while_continue___1: /* CIL Label */
11372|     20|                ;
11373|     20|                if (!(i >= lo)) {
11374|      8|                    goto while_break___1;
11375|      8|                }
11376|     12|                tmp = (Int32) * (fmap + i);
11377|     12|                ec_tmp = *(eclass + tmp);
11378|     12|                j = i + 1;
11379|     12|                {
11380|     17|                    while (1) {
11381|     17|while_continue___2: /* CIL Label */
11382|     17|                        ;
11383|     17|                        if (j <= hi) {
11384|     14|                            if (!(ec_tmp > *(eclass + *(fmap + j)))) {
11385|      9|                                goto while_break___2;
11386|      9|                            }
11387|     14|                        }
11388|      3|                        else {
11389|      3|                            goto while_break___2;
11390|      3|                        }
11391|      5|                        *(fmap + (j - 1)) = *(fmap + j);
11392|      5|                        j++;
11393|      5|                    }
11394|     12|while_break___2: /* CIL Label */
11395|     12|                    ;
11396|     12|                }
11397|      0|                *(fmap + (j - 1)) = (UInt32)tmp;
11398|     12|                i--;
11399|     12|            }
11400|      8|while_break___1: /* CIL Label */
11401|      8|            ;
11402|      8|        }
11403|      0|        return;
11404|      8|    }
11405|      8|}
11406|       |static void fallbackQSort3(UInt32 *fmap, UInt32 *eclass, Int32 loSt,
11407|       |                           Int32 hiSt)
11408|      8|{
11409|      8|    Int32 unLo;
11410|      8|    Int32 unHi;
11411|      8|    Int32 ltLo;
11412|      8|    Int32 gtHi;
11413|      8|    Int32 n;
11414|      8|    Int32 m;
11415|      8|    Int32 sp;
11416|      8|    Int32 lo;
11417|      8|    Int32 hi;
11418|      8|    UInt32 med;
11419|      8|    UInt32 r;
11420|      8|    UInt32 r3;
11421|      8|    Int32 stackLo[100];
11422|      8|    Int32 stackHi[100];
11423|      8|    Int32 zztmp;
11424|      8|    Int32 zztmp___0;
11425|      8|    Int32 zztmp___1;
11426|      8|    Int32 yyp1;
11427|      8|    Int32 yyp2;
11428|      8|    Int32 yyn;
11429|      8|    Int32 zztmp___2;
11430|      8|    Int32 yyp1___0;
11431|      8|    Int32 yyp2___0;
11432|      8|    Int32 yyn___0;
11433|      8|    Int32 zztmp___3;
11434|      8|    void *__cil_tmp30;
11435|      8|    void *__cil_tmp31;
11436|       |
11437|      8|    {
11438|      8|        r = (UInt32)0;
11439|      8|        sp = 0;
11440|      8|        stackLo[sp] = loSt;
11441|      8|        stackHi[sp] = hiSt;
11442|      8|        sp++;
11443|      8|        {
11444|      8|            while (1) {
11445|     16|while_continue: /* CIL Label */
11446|     16|                ;
11447|     16|                if (!(sp > 0)) {
11448|      8|                    goto while_break;
11449|      8|                }
11450|      8|                if (!(sp < 99)) {
11451|      0|                    {
11452|      0|                        BZ2_bz__AssertH__fail(1004);
11453|      0|                    }
11454|      0|                }
11455|      8|                sp--;
11456|      8|                lo = stackLo[sp];
11457|      8|                hi = stackHi[sp];
11458|      8|                if (hi - lo < 10) {
11459|      8|                    {
11460|      8|                        fallbackSimpleSort(fmap, eclass, lo, hi);
11461|      8|                    }
11462|      8|                    goto while_continue;
11463|      8|                }
11464|      0|                r = (r * 7621U + 1U) % 32768U;
11465|      0|                r3 = r % 3U;
11466|      0|                if (r3 == 0U) {
11467|      0|                    med = *(eclass + *(fmap + lo));
11468|      0|                }
11469|      0|                else {
11470|      0|                    if (r3 == 1U) {
11471|      0|                        med = *(eclass + *(fmap + ((lo + hi) >> 1)));
11472|      0|                    }
11473|      0|                    else {
11474|      0|                        med = *(eclass + *(fmap + hi));
11475|      0|                    }
11476|      0|                }
11477|      0|                ltLo = lo;
11478|      0|                unLo = ltLo;
11479|      0|                gtHi = hi;
11480|      0|                unHi = gtHi;
11481|      0|                {
11482|      0|                    while (1) {
11483|      0|while_continue___0: /* CIL Label */
11484|      0|                        ;
11485|      0|                        {
11486|      0|                            while (1) {
11487|      0|while_continue___1: /* CIL Label */
11488|      0|                                ;
11489|      0|                                if (!(!(unLo > unHi))) {
11490|      0|                                    goto while_break___1;
11491|      0|                                }
11492|      0|                                n = (Int32) * (eclass + *(fmap + unLo)) - (Int32)med;
11493|      0|                                if (n == 0) {
11494|      0|                                    zztmp = (Int32) * (fmap + unLo);
11495|      0|                                    *(fmap + unLo) = *(fmap + ltLo);
11496|      0|                                    *(fmap + ltLo) = (UInt32)zztmp;
11497|      0|                                    ltLo++;
11498|      0|                                    unLo++;
11499|      0|                                    goto while_continue___1;
11500|      0|                                }
11501|      0|                                if (n > 0) {
11502|      0|                                    goto while_break___1;
11503|      0|                                }
11504|      0|                                unLo++;
11505|      0|                            }
11506|      0|while_break___1: /* CIL Label */
11507|      0|                            ;
11508|      0|                        }
11509|      0|                        {
11510|      0|                            while (1) {
11511|      0|while_continue___2: /* CIL Label */
11512|      0|                                ;
11513|      0|                                if (!(!(unLo > unHi))) {
11514|      0|                                    goto while_break___2;
11515|      0|                                }
11516|      0|                                n = (Int32) * (eclass + *(fmap + unHi)) - (Int32)med;
11517|      0|                                if (n == 0) {
11518|      0|                                    zztmp___0 = (Int32) * (fmap + unHi);
11519|      0|                                    *(fmap + unHi) = *(fmap + gtHi);
11520|      0|                                    *(fmap + gtHi) = (UInt32)zztmp___0;
11521|      0|                                    gtHi--;
11522|      0|                                    unHi--;
11523|      0|                                    goto while_continue___2;
11524|      0|                                }
11525|      0|                                if (n < 0) {
11526|      0|                                    goto while_break___2;
11527|      0|                                }
11528|      0|                                unHi--;
11529|      0|                            }
11530|      0|while_break___2: /* CIL Label */
11531|      0|                            ;
11532|      0|                        }
11533|      0|                        if (unLo > unHi) {
11534|      0|                            goto while_break___0;
11535|      0|                        }
11536|      0|                        zztmp___1 = (Int32) * (fmap + unLo);
11537|      0|                        *(fmap + unLo) = *(fmap + unHi);
11538|      0|                        *(fmap + unHi) = (UInt32)zztmp___1;
11539|      0|                        unLo++;
11540|      0|                        unHi--;
11541|      0|                    }
11542|      0|while_break___0: /* CIL Label */
11543|      0|                    ;
11544|      0|                }
11545|      0|                if (gtHi < ltLo) {
11546|      0|                    goto while_continue;
11547|      0|                }
11548|      0|                if (ltLo - lo < unLo - ltLo) {
11549|      0|                    n = ltLo - lo;
11550|      0|                }
11551|      0|                else {
11552|      0|                    n = unLo - ltLo;
11553|      0|                }
11554|      0|                yyp1 = lo;
11555|      0|                yyp2 = unLo - n;
11556|      0|                yyn = n;
11557|      0|                {
11558|      0|                    while (1) {
11559|      0|while_continue___3: /* CIL Label */
11560|      0|                        ;
11561|      0|                        if (!(yyn > 0)) {
11562|      0|                            goto while_break___3;
11563|      0|                        }
11564|      0|                        zztmp___2 = (Int32) * (fmap + yyp1);
11565|      0|                        *(fmap + yyp1) = *(fmap + yyp2);
11566|      0|                        *(fmap + yyp2) = (UInt32)zztmp___2;
11567|      0|                        yyp1++;
11568|      0|                        yyp2++;
11569|      0|                        yyn--;
11570|      0|                    }
11571|      0|while_break___3: /* CIL Label */
11572|      0|                    ;
11573|      0|                }
11574|      0|                if (hi - gtHi < gtHi - unHi) {
11575|      0|                    m = hi - gtHi;
11576|      0|                }
11577|      0|                else {
11578|      0|                    m = gtHi - unHi;
11579|      0|                }
11580|      0|                yyp1___0 = unLo;
11581|      0|                yyp2___0 = (hi - m) + 1;
11582|      0|                yyn___0 = m;
11583|      0|                {
11584|      0|                    while (1) {
11585|      0|while_continue___4: /* CIL Label */
11586|      0|                        ;
11587|      0|                        if (!(yyn___0 > 0)) {
11588|      0|                            goto while_break___4;
11589|      0|                        }
11590|      0|                        zztmp___3 = (Int32) * (fmap + yyp1___0);
11591|      0|                        *(fmap + yyp1___0) = *(fmap + yyp2___0);
11592|      0|                        *(fmap + yyp2___0) = (UInt32)zztmp___3;
11593|      0|                        yyp1___0++;
11594|      0|                        yyp2___0++;
11595|      0|                        yyn___0--;
11596|      0|                    }
11597|      0|while_break___4: /* CIL Label */
11598|      0|                    ;
11599|      0|                }
11600|      0|                n = ((lo + unLo) - ltLo) - 1;
11601|      0|                m = (hi - (gtHi - unHi)) + 1;
11602|      0|                if (n - lo > hi - m) {
11603|      0|                    stackLo[sp] = lo;
11604|      0|                    stackHi[sp] = n;
11605|      0|                    sp++;
11606|      0|                    stackLo[sp] = m;
11607|      0|                    stackHi[sp] = hi;
11608|      0|                    sp++;
11609|      0|                }
11610|      0|                else {
11611|      0|                    stackLo[sp] = m;
11612|      0|                    stackHi[sp] = hi;
11613|      0|                    sp++;
11614|      0|                    stackLo[sp] = lo;
11615|      0|                    stackHi[sp] = n;
11616|      0|                    sp++;
11617|      0|                }
11618|      0|            }
11619|      8|while_break: /* CIL Label */
11620|      8|            ;
11621|      8|        }
11622|      0|        return;
11623|      8|    }
11624|      8|}
11625|       |static void fallbackSort(UInt32 *fmap, UInt32 *eclass, UInt32 *bhtab,
11626|       |                         Int32 nblock, Int32 verb)
11627|      1|{
11628|      1|    Int32 ftab[257];
11629|      1|    Int32 ftabCopy[256];
11630|      1|    Int32 H;
11631|      1|    Int32 i;
11632|      1|    Int32 j;
11633|      1|    Int32 k;
11634|      1|    Int32 l;
11635|      1|    Int32 r;
11636|      1|    Int32 cc;
11637|      1|    Int32 cc1;
11638|      1|    Int32 nNotDone;
11639|      1|    Int32 nBhtab;
11640|      1|    UChar *eclass8;
11641|      1|    void *__cil_tmp19;
11642|      1|    void *__cil_tmp20;
11643|       |
11644|      1|    {
11645|      1|        eclass8 = (UChar *)eclass;
11646|      1|        if (verb >= 4) {
11647|      0|            {
11648|      0|                fprintf(
11649|      0|                    (FILE * /* __restrict  */) stderr,
11650|      0|                    (char const * /* __restrict  */) "        bucket sorting ...\n");
11651|      0|            }
11652|      0|        }
11653|      1|        i = 0;
11654|      1|        {
11655|    258|            while (1) {
11656|    258|while_continue: /* CIL Label */
11657|    258|                ;
11658|    258|                if (!(i < 257)) {
11659|      1|                    goto while_break;
11660|      1|                }
11661|    257|                ftab[i] = 0;
11662|    257|                i++;
11663|    257|            }
11664|      1|while_break: /* CIL Label */
11665|      1|            ;
11666|      1|        }
11667|      0|        i = 0;
11668|      1|        {
11669|     28|            while (1) {
11670|     28|while_continue___0: /* CIL Label */
11671|     28|                ;
11672|     28|                if (!(i < nblock)) {
11673|      1|                    goto while_break___0;
11674|      1|                }
11675|     27|                (ftab[*(eclass8 + i)])++;
11676|     27|                i++;
11677|     27|            }
11678|      1|while_break___0: /* CIL Label */
11679|      1|            ;
11680|      1|        }
11681|      0|        i = 0;
11682|      1|        {
11683|    257|            while (1) {
11684|    257|while_continue___1: /* CIL Label */
11685|    257|                ;
11686|    257|                if (!(i < 256)) {
11687|      1|                    goto while_break___1;
11688|      1|                }
11689|    256|                ftabCopy[i] = ftab[i];
11690|    256|                i++;
11691|    256|            }
11692|      1|while_break___1: /* CIL Label */
11693|      1|            ;
11694|      1|        }
11695|      0|        i = 1;
11696|      1|        {
11697|    257|            while (1) {
11698|    257|while_continue___2: /* CIL Label */
11699|    257|                ;
11700|    257|                if (!(i < 257)) {
11701|      1|                    goto while_break___2;
11702|      1|                }
11703|    256|                ftab[i] += ftab[i - 1];
11704|    256|                i++;
11705|    256|            }
11706|      1|while_break___2: /* CIL Label */
11707|      1|            ;
11708|      1|        }
11709|      0|        i = 0;
11710|      1|        {
11711|     28|            while (1) {
11712|     28|while_continue___3: /* CIL Label */
11713|     28|                ;
11714|     28|                if (!(i < nblock)) {
11715|      1|                    goto while_break___3;
11716|      1|                }
11717|     27|                j = (Int32) * (eclass8 + i);
11718|     27|                k = ftab[j] - 1;
11719|     27|                ftab[j] = k;
11720|     27|                *(fmap + k) = (UInt32)i;
11721|     27|                i++;
11722|     27|            }
11723|      1|while_break___3: /* CIL Label */
11724|      1|            ;
11725|      1|        }
11726|      0|        nBhtab = 2 + nblock / 32;
11727|      1|        i = 0;
11728|      1|        {
11729|      3|            while (1) {
11730|      3|while_continue___4: /* CIL Label */
11731|      3|                ;
11732|      3|                if (!(i < nBhtab)) {
11733|      1|                    goto while_break___4;
11734|      1|                }
11735|      2|                *(bhtab + i) = (UInt32)0;
11736|      2|                i++;
11737|      2|            }
11738|      1|while_break___4: /* CIL Label */
11739|      1|            ;
11740|      1|        }
11741|      0|        i = 0;
11742|      1|        {
11743|    257|            while (1) {
11744|    257|while_continue___5: /* CIL Label */
11745|    257|                ;
11746|    257|                if (!(i < 256)) {
11747|      1|                    goto while_break___5;
11748|      1|                }
11749|    256|                *(bhtab + (ftab[i] >> 5)) |= (unsigned int)(1 << (ftab[i] & 31));
11750|    256|                i++;
11751|    256|            }
11752|      1|while_break___5: /* CIL Label */
11753|      1|            ;
11754|      1|        }
11755|      0|        i = 0;
11756|      1|        {
11757|     33|            while (1) {
11758|     33|while_continue___6: /* CIL Label */
11759|     33|                ;
11760|     33|                if (!(i < 32)) {
11761|      1|                    goto while_break___6;
11762|      1|                }
11763|     32|                *(bhtab + ((nblock + 2 * i) >> 5)) |=
11764|     32|                    (unsigned int)(1 << ((nblock + 2 * i) & 31));
11765|     32|                *(bhtab + (((nblock + 2 * i) + 1) >> 5)) &=
11766|     32|                    (unsigned int)(~(1 << (((nblock + 2 * i) + 1) & 31)));
11767|     32|                i++;
11768|     32|            }
11769|      1|while_break___6: /* CIL Label */
11770|      1|            ;
11771|      1|        }
11772|      0|        H = 1;
11773|      1|        {
11774|      3|            while (1) {
11775|      3|while_continue___7: /* CIL Label */
11776|      3|                ;
11777|      3|                if (verb >= 4) {
11778|      0|                    {
11779|      0|                        fprintf((FILE * /* __restrict  */) stderr,
11780|      0|                                (char const * /* __restrict  */) "        depth %6d has ",
11781|      0|                                H);
11782|      0|                    }
11783|      0|                }
11784|      3|                j = 0;
11785|      3|                i = 0;
11786|      3|                {
11787|     84|                    while (1) {
11788|     84|while_continue___8: /* CIL Label */
11789|     84|                        ;
11790|     84|                        if (!(i < nblock)) {
11791|      3|                            goto while_break___8;
11792|      3|                        }
11793|     81|                        if (*(bhtab + (i >> 5)) & (unsigned int)(1 << (i & 31))) {
11794|     69|                            j = i;
11795|     69|                        }
11796|     81|                        k = (Int32)(*(fmap + i) - (UInt32)H);
11797|     81|                        if (k < 0) {
11798|      7|                            k += nblock;
11799|      7|                        }
11800|     81|                        *(eclass + k) = (UInt32)j;
11801|     81|                        i++;
11802|     81|                    }
11803|      3|while_break___8: /* CIL Label */
11804|      3|                    ;
11805|      3|                }
11806|      0|                nNotDone = 0;
11807|      3|                r = -1;
11808|      3|                {
11809|     11|                    while (1) {
11810|     11|while_continue___9: /* CIL Label */
11811|     11|                        ;
11812|     11|                        k = r + 1;
11813|     11|                        {
11814|     51|                            while (1) {
11815|     51|while_continue___10: /* CIL Label */
11816|     51|                                ;
11817|     51|                                if (*(bhtab + (k >> 5)) & (unsigned int)(1 << (k & 31))) {
11818|     43|                                    if (!(k & 31)) {
11819|      3|                                        goto while_break___10;
11820|      3|                                    }
11821|     43|                                }
11822|      8|                                else {
11823|      8|                                    goto while_break___10;
11824|      8|                                }
11825|     40|                                k++;
11826|     40|                            }
11827|     11|while_break___10: /* CIL Label */
11828|     11|                            ;
11829|     11|                        }
11830|     11|                        if (*(bhtab + (k >> 5)) & (unsigned int)(1 << (k & 31))) {
11831|      3|                            {
11832|      3|                                while (1) {
11833|      3|while_continue___11: /* CIL Label */
11834|      3|                                    ;
11835|      3|                                    if (!(*(bhtab + (k >> 5)) == 4294967295U)) {
11836|      3|                                        goto while_break___11;
11837|      3|                                    }
11838|      0|                                    k += 32;
11839|      0|                                }
11840|      3|while_break___11: /* CIL Label */
11841|      3|                                ;
11842|      3|                            }
11843|      0|                            {
11844|     35|                                while (1) {
11845|     35|while_continue___12: /* CIL Label */
11846|     35|                                    ;
11847|     35|                                    if (!(*(bhtab + (k >> 5)) & (unsigned int)(1 << (k & 31)))) {
11848|      3|                                        goto while_break___12;
11849|      3|                                    }
11850|     32|                                    k++;
11851|     32|                                }
11852|      3|while_break___12: /* CIL Label */
11853|      3|                                ;
11854|      3|                            }
11855|      3|                        }
11856|     11|                        l = k - 1;
11857|     11|                        if (l >= nblock) {
11858|      3|                            goto while_break___9;
11859|      3|                        }
11860|      8|                        {
11861|     20|                            while (1) {
11862|     20|while_continue___13: /* CIL Label */
11863|     20|                                ;
11864|     20|                                if (!(*(bhtab + (k >> 5)) & (unsigned int)(1 << (k & 31)))) {
11865|     12|                                    if (!(k & 31)) {
11866|      0|                                        goto while_break___13;
11867|      0|                                    }
11868|     12|                                }
11869|      8|                                else {
11870|      8|                                    goto while_break___13;
11871|      8|                                }
11872|     12|                                k++;
11873|     12|                            }
11874|      8|while_break___13: /* CIL Label */
11875|      8|                            ;
11876|      8|                        }
11877|      8|                        if (!(*(bhtab + (k >> 5)) & (unsigned int)(1 << (k & 31)))) {
11878|      0|                            {
11879|      0|                                while (1) {
11880|      0|while_continue___14: /* CIL Label */
11881|      0|                                    ;
11882|      0|                                    if (!(*(bhtab + (k >> 5)) == 0U)) {
11883|      0|                                        goto while_break___14;
11884|      0|                                    }
11885|      0|                                    k += 32;
11886|      0|                                }
11887|      0|while_break___14: /* CIL Label */
11888|      0|                                ;
11889|      0|                            }
11890|      0|                            {
11891|      0|                                while (1) {
11892|      0|while_continue___15: /* CIL Label */
11893|      0|                                    ;
11894|      0|                                    if (!(!(*(bhtab + (k >> 5)) &
11895|      0|                                            (unsigned int)(1 << (k & 31))))) {
11896|      0|                                        goto while_break___15;
11897|      0|                                    }
11898|      0|                                    k++;
11899|      0|                                }
11900|      0|while_break___15: /* CIL Label */
11901|      0|                                ;
11902|      0|                            }
11903|      0|                        }
11904|      8|                        r = k - 1;
11905|      8|                        if (r >= nblock) {
11906|      0|                            goto while_break___9;
11907|      0|                        }
11908|      8|                        if (r > l) {
11909|      8|                            {
11910|      8|                                nNotDone += (r - l) + 1;
11911|      8|                                fallbackQSort3(fmap, eclass, l, r);
11912|      8|                                cc = -1;
11913|      8|                                i = l;
11914|      8|                            }
11915|      8|                            {
11916|     28|                                while (1) {
11917|     28|while_continue___16: /* CIL Label */
11918|     28|                                    ;
11919|     28|                                    if (!(i <= r)) {
11920|      8|                                        goto while_break___16;
11921|      8|                                    }
11922|     20|                                    cc1 = (Int32) * (eclass + *(fmap + i));
11923|     20|                                    if (cc != cc1) {
11924|     18|                                        *(bhtab + (i >> 5)) |= (unsigned int)(1 << (i & 31));
11925|     18|                                        cc = cc1;
11926|     18|                                    }
11927|     20|                                    i++;
11928|     20|                                }
11929|      8|while_break___16: /* CIL Label */
11930|      8|                                ;
11931|      8|                            }
11932|      8|                        }
11933|      8|                    }
11934|      3|while_break___9: /* CIL Label */
11935|      3|                    ;
11936|      3|                }
11937|      3|                if (verb >= 4) {
11938|      0|                    {
11939|      0|                        fprintf((FILE * /* __restrict  */) stderr,
11940|      0|                                (char const * /* __restrict  */) "%6d unresolved strings\n",
11941|      0|                                nNotDone);
11942|      0|                    }
11943|      0|                }
11944|      3|                H *= 2;
11945|      3|                if (H > nblock) {
11946|      0|                    goto while_break___7;
11947|      0|                }
11948|      3|                else {
11949|      3|                    if (nNotDone == 0) {
11950|      1|                        goto while_break___7;
11951|      1|                    }
11952|      3|                }
11953|      3|            }
11954|      1|while_break___7: /* CIL Label */
11955|      1|            ;
11956|      1|        }
11957|      1|        if (verb >= 4) {
11958|      0|            {
11959|      0|                fprintf((FILE * /* __restrict  */) stderr,
11960|      0|                        (char const
11961|      0|                         * /* __restrict  */) "        reconstructing block ...\n");
11962|      0|            }
11963|      0|        }
11964|      1|        j = 0;
11965|      1|        i = 0;
11966|      1|        {
11967|     28|            while (1) {
11968|     28|while_continue___17: /* CIL Label */
11969|     28|                ;
11970|     28|                if (!(i < nblock)) {
11971|      1|                    goto while_break___17;
11972|      1|                }
11973|     27|                {
11974|    149|                    while (1) {
11975|    149|while_continue___18: /* CIL Label */
11976|    149|                        ;
11977|    149|                        if (!(ftabCopy[j] == 0)) {
11978|     27|                            goto while_break___18;
11979|     27|                        }
11980|    122|                        j++;
11981|    122|                    }
11982|     27|while_break___18: /* CIL Label */
11983|     27|                    ;
11984|     27|                }
11985|      0|                (ftabCopy[j])--;
11986|     27|                *(eclass8 + *(fmap + i)) = (UChar)j;
11987|     27|                i++;
11988|     27|            }
11989|      1|while_break___17: /* CIL Label */
11990|      1|            ;
11991|      1|        }
11992|      1|        if (!(j < 256)) {
11993|      0|            {
11994|      0|                BZ2_bz__AssertH__fail(1005);
11995|      0|            }
11996|      0|        }
11997|      1|        return;
11998|      1|    }
11999|      1|}
12000|       |__inline static Bool mainGtU(UInt32 i1, UInt32 i2, UChar *block,
12001|       |                             UInt16 *quadrant, UInt32 nblock, Int32 *budget)
12002|      0|{
12003|      0|    Int32 k;
12004|      0|    UChar c1;
12005|      0|    UChar c2;
12006|      0|    UInt16 s1;
12007|      0|    UInt16 s2;
12008|       |
12009|      0|    {
12010|      0|        c1 = *(block + i1);
12011|      0|        c2 = *(block + i2);
12012|      0|        if ((int)c1 != (int)c2) {
12013|      0|            return ((Bool)((int)c1 > (int)c2));
12014|      0|        }
12015|      0|        i1++;
12016|      0|        i2++;
12017|      0|        c1 = *(block + i1);
12018|      0|        c2 = *(block + i2);
12019|      0|        if ((int)c1 != (int)c2) {
12020|      0|            return ((Bool)((int)c1 > (int)c2));
12021|      0|        }
12022|      0|        i1++;
12023|      0|        i2++;
12024|      0|        c1 = *(block + i1);
12025|      0|        c2 = *(block + i2);
12026|      0|        if ((int)c1 != (int)c2) {
12027|      0|            return ((Bool)((int)c1 > (int)c2));
12028|      0|        }
12029|      0|        i1++;
12030|      0|        i2++;
12031|      0|        c1 = *(block + i1);
12032|      0|        c2 = *(block + i2);
12033|      0|        if ((int)c1 != (int)c2) {
12034|      0|            return ((Bool)((int)c1 > (int)c2));
12035|      0|        }
12036|      0|        i1++;
12037|      0|        i2++;
12038|      0|        c1 = *(block + i1);
12039|      0|        c2 = *(block + i2);
12040|      0|        if ((int)c1 != (int)c2) {
12041|      0|            return ((Bool)((int)c1 > (int)c2));
12042|      0|        }
12043|      0|        i1++;
12044|      0|        i2++;
12045|      0|        c1 = *(block + i1);
12046|      0|        c2 = *(block + i2);
12047|      0|        if ((int)c1 != (int)c2) {
12048|      0|            return ((Bool)((int)c1 > (int)c2));
12049|      0|        }
12050|      0|        i1++;
12051|      0|        i2++;
12052|      0|        c1 = *(block + i1);
12053|      0|        c2 = *(block + i2);
12054|      0|        if ((int)c1 != (int)c2) {
12055|      0|            return ((Bool)((int)c1 > (int)c2));
12056|      0|        }
12057|      0|        i1++;
12058|      0|        i2++;
12059|      0|        c1 = *(block + i1);
12060|      0|        c2 = *(block + i2);
12061|      0|        if ((int)c1 != (int)c2) {
12062|      0|            return ((Bool)((int)c1 > (int)c2));
12063|      0|        }
12064|      0|        i1++;
12065|      0|        i2++;
12066|      0|        c1 = *(block + i1);
12067|      0|        c2 = *(block + i2);
12068|      0|        if ((int)c1 != (int)c2) {
12069|      0|            return ((Bool)((int)c1 > (int)c2));
12070|      0|        }
12071|      0|        i1++;
12072|      0|        i2++;
12073|      0|        c1 = *(block + i1);
12074|      0|        c2 = *(block + i2);
12075|      0|        if ((int)c1 != (int)c2) {
12076|      0|            return ((Bool)((int)c1 > (int)c2));
12077|      0|        }
12078|      0|        i1++;
12079|      0|        i2++;
12080|      0|        c1 = *(block + i1);
12081|      0|        c2 = *(block + i2);
12082|      0|        if ((int)c1 != (int)c2) {
12083|      0|            return ((Bool)((int)c1 > (int)c2));
12084|      0|        }
12085|      0|        i1++;
12086|      0|        i2++;
12087|      0|        c1 = *(block + i1);
12088|      0|        c2 = *(block + i2);
12089|      0|        if ((int)c1 != (int)c2) {
12090|      0|            return ((Bool)((int)c1 > (int)c2));
12091|      0|        }
12092|      0|        i1++;
12093|      0|        i2++;
12094|      0|        k = (Int32)(nblock + 8U);
12095|      0|        {
12096|      0|            while (1) {
12097|      0|while_continue: /* CIL Label */
12098|      0|                ;
12099|      0|                c1 = *(block + i1);
12100|      0|                c2 = *(block + i2);
12101|      0|                if ((int)c1 != (int)c2) {
12102|      0|                    return ((Bool)((int)c1 > (int)c2));
12103|      0|                }
12104|      0|                s1 = *(quadrant + i1);
12105|      0|                s2 = *(quadrant + i2);
12106|      0|                if ((int)s1 != (int)s2) {
12107|      0|                    return ((Bool)((int)s1 > (int)s2));
12108|      0|                }
12109|      0|                i1++;
12110|      0|                i2++;
12111|      0|                c1 = *(block + i1);
12112|      0|                c2 = *(block + i2);
12113|      0|                if ((int)c1 != (int)c2) {
12114|      0|                    return ((Bool)((int)c1 > (int)c2));
12115|      0|                }
12116|      0|                s1 = *(quadrant + i1);
12117|      0|                s2 = *(quadrant + i2);
12118|      0|                if ((int)s1 != (int)s2) {
12119|      0|                    return ((Bool)((int)s1 > (int)s2));
12120|      0|                }
12121|      0|                i1++;
12122|      0|                i2++;
12123|      0|                c1 = *(block + i1);
12124|      0|                c2 = *(block + i2);
12125|      0|                if ((int)c1 != (int)c2) {
12126|      0|                    return ((Bool)((int)c1 > (int)c2));
12127|      0|                }
12128|      0|                s1 = *(quadrant + i1);
12129|      0|                s2 = *(quadrant + i2);
12130|      0|                if ((int)s1 != (int)s2) {
12131|      0|                    return ((Bool)((int)s1 > (int)s2));
12132|      0|                }
12133|      0|                i1++;
12134|      0|                i2++;
12135|      0|                c1 = *(block + i1);
12136|      0|                c2 = *(block + i2);
12137|      0|                if ((int)c1 != (int)c2) {
12138|      0|                    return ((Bool)((int)c1 > (int)c2));
12139|      0|                }
12140|      0|                s1 = *(quadrant + i1);
12141|      0|                s2 = *(quadrant + i2);
12142|      0|                if ((int)s1 != (int)s2) {
12143|      0|                    return ((Bool)((int)s1 > (int)s2));
12144|      0|                }
12145|      0|                i1++;
12146|      0|                i2++;
12147|      0|                c1 = *(block + i1);
12148|      0|                c2 = *(block + i2);
12149|      0|                if ((int)c1 != (int)c2) {
12150|      0|                    return ((Bool)((int)c1 > (int)c2));
12151|      0|                }
12152|      0|                s1 = *(quadrant + i1);
12153|      0|                s2 = *(quadrant + i2);
12154|      0|                if ((int)s1 != (int)s2) {
12155|      0|                    return ((Bool)((int)s1 > (int)s2));
12156|      0|                }
12157|      0|                i1++;
12158|      0|                i2++;
12159|      0|                c1 = *(block + i1);
12160|      0|                c2 = *(block + i2);
12161|      0|                if ((int)c1 != (int)c2) {
12162|      0|                    return ((Bool)((int)c1 > (int)c2));
12163|      0|                }
12164|      0|                s1 = *(quadrant + i1);
12165|      0|                s2 = *(quadrant + i2);
12166|      0|                if ((int)s1 != (int)s2) {
12167|      0|                    return ((Bool)((int)s1 > (int)s2));
12168|      0|                }
12169|      0|                i1++;
12170|      0|                i2++;
12171|      0|                c1 = *(block + i1);
12172|      0|                c2 = *(block + i2);
12173|      0|                if ((int)c1 != (int)c2) {
12174|      0|                    return ((Bool)((int)c1 > (int)c2));
12175|      0|                }
12176|      0|                s1 = *(quadrant + i1);
12177|      0|                s2 = *(quadrant + i2);
12178|      0|                if ((int)s1 != (int)s2) {
12179|      0|                    return ((Bool)((int)s1 > (int)s2));
12180|      0|                }
12181|      0|                i1++;
12182|      0|                i2++;
12183|      0|                c1 = *(block + i1);
12184|      0|                c2 = *(block + i2);
12185|      0|                if ((int)c1 != (int)c2) {
12186|      0|                    return ((Bool)((int)c1 > (int)c2));
12187|      0|                }
12188|      0|                s1 = *(quadrant + i1);
12189|      0|                s2 = *(quadrant + i2);
12190|      0|                if ((int)s1 != (int)s2) {
12191|      0|                    return ((Bool)((int)s1 > (int)s2));
12192|      0|                }
12193|      0|                i1++;
12194|      0|                i2++;
12195|      0|                if (i1 >= nblock) {
12196|      0|                    i1 -= nblock;
12197|      0|                }
12198|      0|                if (i2 >= nblock) {
12199|      0|                    i2 -= nblock;
12200|      0|                }
12201|      0|                k -= 8;
12202|      0|                (*budget)--;
12203|      0|                if (!(k >= 0)) {
12204|      0|                    goto while_break;
12205|      0|                }
12206|      0|            }
12207|      0|while_break: /* CIL Label */
12208|      0|            ;
12209|      0|        }
12210|      0|        return ((Bool)0);
12211|      0|    }
12212|      0|}
12213|       |static Int32 incs[14] = {1,    4,    13,    40,    121,    364,    1093,
12214|       |                         3280, 9841, 29524, 88573, 265720, 797161, 2391484
12215|       |                        };
12216|       |static void mainSimpleSort(UInt32 *ptr, UChar *block, UInt16 *quadrant,
12217|       |                           Int32 nblock, Int32 lo, Int32 hi, Int32 d,
12218|       |                           Int32 *budget)
12219|      0|{
12220|      0|    Int32 i;
12221|      0|    Int32 j;
12222|      0|    Int32 h;
12223|      0|    Int32 bigN;
12224|      0|    Int32 hp;
12225|      0|    UInt32 v;
12226|      0|    Bool tmp;
12227|      0|    Bool tmp___0;
12228|      0|    Bool tmp___1;
12229|       |
12230|      0|    {
12231|      0|        bigN = (hi - lo) + 1;
12232|      0|        if (bigN < 2) {
12233|      0|            return;
12234|      0|        }
12235|      0|        hp = 0;
12236|      0|        {
12237|      0|            while (1) {
12238|      0|while_continue: /* CIL Label */
12239|      0|                ;
12240|      0|                if (!(incs[hp] < bigN)) {
12241|      0|                    goto while_break;
12242|      0|                }
12243|      0|                hp++;
12244|      0|            }
12245|      0|while_break: /* CIL Label */
12246|      0|            ;
12247|      0|        }
12248|      0|        hp--;
12249|      0|        {
12250|      0|            while (1) {
12251|      0|while_continue___0: /* CIL Label */
12252|      0|                ;
12253|      0|                if (!(hp >= 0)) {
12254|      0|                    goto while_break___0;
12255|      0|                }
12256|      0|                h = incs[hp];
12257|      0|                i = lo + h;
12258|      0|                {
12259|      0|                    while (1) {
12260|      0|while_continue___1: /* CIL Label */
12261|      0|                        ;
12262|      0|                        if (!(!(i > hi))) {
12263|      0|                            goto while_break___1;
12264|      0|                        }
12265|      0|                        v = *(ptr + i);
12266|      0|                        j = i;
12267|      0|                        {
12268|      0|                            while (1) {
12269|      0|while_continue___2: /* CIL Label */
12270|      0|                                ;
12271|      0|                                {
12272|      0|                                    tmp = mainGtU(*(ptr + (j - h)) + (UInt32)d, v + (UInt32)d,
12273|      0|                                                  block, quadrant, (UInt32)nblock, budget);
12274|      0|                                }
12275|      0|                                if (!tmp) {
12276|      0|                                    goto while_break___2;
12277|      0|                                }
12278|      0|                                *(ptr + j) = *(ptr + (j - h));
12279|      0|                                j -= h;
12280|      0|                                if (j <= (lo + h) - 1) {
12281|      0|                                    goto while_break___2;
12282|      0|                                }
12283|      0|                            }
12284|      0|while_break___2: /* CIL Label */
12285|      0|                            ;
12286|      0|                        }
12287|      0|                        *(ptr + j) = v;
12288|      0|                        i++;
12289|      0|                        if (i > hi) {
12290|      0|                            goto while_break___1;
12291|      0|                        }
12292|      0|                        v = *(ptr + i);
12293|      0|                        j = i;
12294|      0|                        {
12295|      0|                            while (1) {
12296|      0|while_continue___3: /* CIL Label */
12297|      0|                                ;
12298|      0|                                {
12299|      0|                                    tmp___0 = mainGtU(*(ptr + (j - h)) + (UInt32)d, v + (UInt32)d,
12300|      0|                                                      block, quadrant, (UInt32)nblock, budget);
12301|      0|                                }
12302|      0|                                if (!tmp___0) {
12303|      0|                                    goto while_break___3;
12304|      0|                                }
12305|      0|                                *(ptr + j) = *(ptr + (j - h));
12306|      0|                                j -= h;
12307|      0|                                if (j <= (lo + h) - 1) {
12308|      0|                                    goto while_break___3;
12309|      0|                                }
12310|      0|                            }
12311|      0|while_break___3: /* CIL Label */
12312|      0|                            ;
12313|      0|                        }
12314|      0|                        *(ptr + j) = v;
12315|      0|                        i++;
12316|      0|                        if (i > hi) {
12317|      0|                            goto while_break___1;
12318|      0|                        }
12319|      0|                        v = *(ptr + i);
12320|      0|                        j = i;
12321|      0|                        {
12322|      0|                            while (1) {
12323|      0|while_continue___4: /* CIL Label */
12324|      0|                                ;
12325|      0|                                {
12326|      0|                                    tmp___1 = mainGtU(*(ptr + (j - h)) + (UInt32)d, v + (UInt32)d,
12327|      0|                                                      block, quadrant, (UInt32)nblock, budget);
12328|      0|                                }
12329|      0|                                if (!tmp___1) {
12330|      0|                                    goto while_break___4;
12331|      0|                                }
12332|      0|                                *(ptr + j) = *(ptr + (j - h));
12333|      0|                                j -= h;
12334|      0|                                if (j <= (lo + h) - 1) {
12335|      0|                                    goto while_break___4;
12336|      0|                                }
12337|      0|                            }
12338|      0|while_break___4: /* CIL Label */
12339|      0|                            ;
12340|      0|                        }
12341|      0|                        *(ptr + j) = v;
12342|      0|                        i++;
12343|      0|                        if (*budget < 0) {
12344|      0|                            return;
12345|      0|                        }
12346|      0|                    }
12347|      0|while_break___1: /* CIL Label */
12348|      0|                    ;
12349|      0|                }
12350|      0|                hp--;
12351|      0|            }
12352|      0|while_break___0: /* CIL Label */
12353|      0|            ;
12354|      0|        }
12355|      0|        return;
12356|      0|    }
12357|      0|}
12358|       |__inline static UChar mmed3(UChar a, UChar b, UChar c)
12359|      0|{
12360|      0|    UChar t;
12361|       |
12362|      0|    {
12363|      0|        if ((int)a > (int)b) {
12364|      0|            t = a;
12365|      0|            a = b;
12366|      0|            b = t;
12367|      0|        }
12368|      0|        if ((int)b > (int)c) {
12369|      0|            b = c;
12370|      0|            if ((int)a > (int)b) {
12371|      0|                b = a;
12372|      0|            }
12373|      0|        }
12374|      0|        return (b);
12375|      0|    }
12376|      0|}
12377|       |static void mainQSort3(UInt32 *ptr, UChar *block, UInt16 *quadrant,
12378|       |                       Int32 nblock, Int32 loSt, Int32 hiSt, Int32 dSt,
12379|       |                       Int32 *budget)
12380|      0|{
12381|      0|    Int32 unLo;
12382|      0|    Int32 unHi;
12383|      0|    Int32 ltLo;
12384|      0|    Int32 gtHi;
12385|      0|    Int32 n;
12386|      0|    Int32 m;
12387|      0|    Int32 med;
12388|      0|    Int32 sp;
12389|      0|    Int32 lo;
12390|      0|    Int32 hi;
12391|      0|    Int32 d;
12392|      0|    Int32 stackLo[100];
12393|      0|    Int32 stackHi[100];
12394|      0|    Int32 stackD[100];
12395|      0|    Int32 nextLo[3];
12396|      0|    Int32 nextHi[3];
12397|      0|    Int32 nextD[3];
12398|      0|    Int32 zztmp;
12399|      0|    Int32 zztmp___0;
12400|      0|    Int32 zztmp___1;
12401|      0|    Int32 yyp1;
12402|      0|    Int32 yyp2;
12403|      0|    Int32 yyn;
12404|      0|    Int32 zztmp___2;
12405|      0|    Int32 yyp1___0;
12406|      0|    Int32 yyp2___0;
12407|      0|    Int32 yyn___0;
12408|      0|    Int32 zztmp___3;
12409|      0|    Int32 tz;
12410|      0|    Int32 tz___0;
12411|      0|    Int32 tz___1;
12412|      0|    void *__cil_tmp41;
12413|      0|    void *__cil_tmp42;
12414|      0|    void *__cil_tmp43;
12415|      0|    void *__cil_tmp44;
12416|      0|    void *__cil_tmp45;
12417|      0|    void *__cil_tmp46;
12418|       |
12419|      0|    {
12420|      0|        sp = 0;
12421|      0|        stackLo[sp] = loSt;
12422|      0|        stackHi[sp] = hiSt;
12423|      0|        stackD[sp] = dSt;
12424|      0|        sp++;
12425|      0|        {
12426|      0|            while (1) {
12427|      0|while_continue: /* CIL Label */
12428|      0|                ;
12429|      0|                if (!(sp > 0)) {
12430|      0|                    goto while_break;
12431|      0|                }
12432|      0|                if (!(sp < 98)) {
12433|      0|                    {
12434|      0|                        BZ2_bz__AssertH__fail(1001);
12435|      0|                    }
12436|      0|                }
12437|      0|                sp--;
12438|      0|                lo = stackLo[sp];
12439|      0|                hi = stackHi[sp];
12440|      0|                d = stackD[sp];
12441|      0|                if (hi - lo < 20) {
12442|      0|                    goto _L;
12443|      0|                }
12444|      0|                else {
12445|      0|                    if (d > 14) {
12446|      0|_L : {
12447|      0|                            mainSimpleSort(ptr, block, quadrant, nblock, lo, hi, d, budget);
12448|      0|                        }
12449|      0|                        if (*budget < 0) {
12450|      0|                            return;
12451|      0|                        }
12452|      0|                        goto while_continue;
12453|      0|                    }
12454|      0|                }
12455|      0|                {
12456|      0|                    med =
12457|      0|                        (Int32)mmed3(*(block + (*(ptr + lo) + (UInt32)d)),
12458|      0|                                     *(block + (*(ptr + hi) + (UInt32)d)),
12459|      0|                                     *(block + (*(ptr + ((lo + hi) >> 1)) + (UInt32)d)));
12460|      0|                    ltLo = lo;
12461|      0|                    unLo = ltLo;
12462|      0|                    gtHi = hi;
12463|      0|                    unHi = gtHi;
12464|      0|                }
12465|      0|                {
12466|      0|                    while (1) {
12467|      0|while_continue___0: /* CIL Label */
12468|      0|                        ;
12469|      0|                        {
12470|      0|                            while (1) {
12471|      0|while_continue___1: /* CIL Label */
12472|      0|                                ;
12473|      0|                                if (!(!(unLo > unHi))) {
12474|      0|                                    goto while_break___1;
12475|      0|                                }
12476|      0|                                n = (Int32) * (block + (*(ptr + unLo) + (UInt32)d)) - med;
12477|      0|                                if (n == 0) {
12478|      0|                                    zztmp = (Int32) * (ptr + unLo);
12479|      0|                                    *(ptr + unLo) = *(ptr + ltLo);
12480|      0|                                    *(ptr + ltLo) = (UInt32)zztmp;
12481|      0|                                    ltLo++;
12482|      0|                                    unLo++;
12483|      0|                                    goto while_continue___1;
12484|      0|                                }
12485|      0|                                if (n > 0) {
12486|      0|                                    goto while_break___1;
12487|      0|                                }
12488|      0|                                unLo++;
12489|      0|                            }
12490|      0|while_break___1: /* CIL Label */
12491|      0|                            ;
12492|      0|                        }
12493|      0|                        {
12494|      0|                            while (1) {
12495|      0|while_continue___2: /* CIL Label */
12496|      0|                                ;
12497|      0|                                if (!(!(unLo > unHi))) {
12498|      0|                                    goto while_break___2;
12499|      0|                                }
12500|      0|                                n = (Int32) * (block + (*(ptr + unHi) + (UInt32)d)) - med;
12501|      0|                                if (n == 0) {
12502|      0|                                    zztmp___0 = (Int32) * (ptr + unHi);
12503|      0|                                    *(ptr + unHi) = *(ptr + gtHi);
12504|      0|                                    *(ptr + gtHi) = (UInt32)zztmp___0;
12505|      0|                                    gtHi--;
12506|      0|                                    unHi--;
12507|      0|                                    goto while_continue___2;
12508|      0|                                }
12509|      0|                                if (n < 0) {
12510|      0|                                    goto while_break___2;
12511|      0|                                }
12512|      0|                                unHi--;
12513|      0|                            }
12514|      0|while_break___2: /* CIL Label */
12515|      0|                            ;
12516|      0|                        }
12517|      0|                        if (unLo > unHi) {
12518|      0|                            goto while_break___0;
12519|      0|                        }
12520|      0|                        zztmp___1 = (Int32) * (ptr + unLo);
12521|      0|                        *(ptr + unLo) = *(ptr + unHi);
12522|      0|                        *(ptr + unHi) = (UInt32)zztmp___1;
12523|      0|                        unLo++;
12524|      0|                        unHi--;
12525|      0|                    }
12526|      0|while_break___0: /* CIL Label */
12527|      0|                    ;
12528|      0|                }
12529|      0|                if (gtHi < ltLo) {
12530|      0|                    stackLo[sp] = lo;
12531|      0|                    stackHi[sp] = hi;
12532|      0|                    stackD[sp] = d + 1;
12533|      0|                    sp++;
12534|      0|                    goto while_continue;
12535|      0|                }
12536|      0|                if (ltLo - lo < unLo - ltLo) {
12537|      0|                    n = ltLo - lo;
12538|      0|                }
12539|      0|                else {
12540|      0|                    n = unLo - ltLo;
12541|      0|                }
12542|      0|                yyp1 = lo;
12543|      0|                yyp2 = unLo - n;
12544|      0|                yyn = n;
12545|      0|                {
12546|      0|                    while (1) {
12547|      0|while_continue___3: /* CIL Label */
12548|      0|                        ;
12549|      0|                        if (!(yyn > 0)) {
12550|      0|                            goto while_break___3;
12551|      0|                        }
12552|      0|                        zztmp___2 = (Int32) * (ptr + yyp1);
12553|      0|                        *(ptr + yyp1) = *(ptr + yyp2);
12554|      0|                        *(ptr + yyp2) = (UInt32)zztmp___2;
12555|      0|                        yyp1++;
12556|      0|                        yyp2++;
12557|      0|                        yyn--;
12558|      0|                    }
12559|      0|while_break___3: /* CIL Label */
12560|      0|                    ;
12561|      0|                }
12562|      0|                if (hi - gtHi < gtHi - unHi) {
12563|      0|                    m = hi - gtHi;
12564|      0|                }
12565|      0|                else {
12566|      0|                    m = gtHi - unHi;
12567|      0|                }
12568|      0|                yyp1___0 = unLo;
12569|      0|                yyp2___0 = (hi - m) + 1;
12570|      0|                yyn___0 = m;
12571|      0|                {
12572|      0|                    while (1) {
12573|      0|while_continue___4: /* CIL Label */
12574|      0|                        ;
12575|      0|                        if (!(yyn___0 > 0)) {
12576|      0|                            goto while_break___4;
12577|      0|                        }
12578|      0|                        zztmp___3 = (Int32) * (ptr + yyp1___0);
12579|      0|                        *(ptr + yyp1___0) = *(ptr + yyp2___0);
12580|      0|                        *(ptr + yyp2___0) = (UInt32)zztmp___3;
12581|      0|                        yyp1___0++;
12582|      0|                        yyp2___0++;
12583|      0|                        yyn___0--;
12584|      0|                    }
12585|      0|while_break___4: /* CIL Label */
12586|      0|                    ;
12587|      0|                }
12588|      0|                n = ((lo + unLo) - ltLo) - 1;
12589|      0|                m = (hi - (gtHi - unHi)) + 1;
12590|      0|                nextLo[0] = lo;
12591|      0|                nextHi[0] = n;
12592|      0|                nextD[0] = d;
12593|      0|                nextLo[1] = m;
12594|      0|                nextHi[1] = hi;
12595|      0|                nextD[1] = d;
12596|      0|                nextLo[2] = n + 1;
12597|      0|                nextHi[2] = m - 1;
12598|      0|                nextD[2] = d + 1;
12599|      0|                if (nextHi[0] - nextLo[0] < nextHi[1] - nextLo[1]) {
12600|      0|                    tz = nextLo[0];
12601|      0|                    nextLo[0] = nextLo[1];
12602|      0|                    nextLo[1] = tz;
12603|      0|                    tz = nextHi[0];
12604|      0|                    nextHi[0] = nextHi[1];
12605|      0|                    nextHi[1] = tz;
12606|      0|                    tz = nextD[0];
12607|      0|                    nextD[0] = nextD[1];
12608|      0|                    nextD[1] = tz;
12609|      0|                }
12610|      0|                if (nextHi[1] - nextLo[1] < nextHi[2] - nextLo[2]) {
12611|      0|                    tz___0 = nextLo[1];
12612|      0|                    nextLo[1] = nextLo[2];
12613|      0|                    nextLo[2] = tz___0;
12614|      0|                    tz___0 = nextHi[1];
12615|      0|                    nextHi[1] = nextHi[2];
12616|      0|                    nextHi[2] = tz___0;
12617|      0|                    tz___0 = nextD[1];
12618|      0|                    nextD[1] = nextD[2];
12619|      0|                    nextD[2] = tz___0;
12620|      0|                }
12621|      0|                if (nextHi[0] - nextLo[0] < nextHi[1] - nextLo[1]) {
12622|      0|                    tz___1 = nextLo[0];
12623|      0|                    nextLo[0] = nextLo[1];
12624|      0|                    nextLo[1] = tz___1;
12625|      0|                    tz___1 = nextHi[0];
12626|      0|                    nextHi[0] = nextHi[1];
12627|      0|                    nextHi[1] = tz___1;
12628|      0|                    tz___1 = nextD[0];
12629|      0|                    nextD[0] = nextD[1];
12630|      0|                    nextD[1] = tz___1;
12631|      0|                }
12632|      0|                stackLo[sp] = nextLo[0];
12633|      0|                stackHi[sp] = nextHi[0];
12634|      0|                stackD[sp] = nextD[0];
12635|      0|                sp++;
12636|      0|                stackLo[sp] = nextLo[1];
12637|      0|                stackHi[sp] = nextHi[1];
12638|      0|                stackD[sp] = nextD[1];
12639|      0|                sp++;
12640|      0|                stackLo[sp] = nextLo[2];
12641|      0|                stackHi[sp] = nextHi[2];
12642|      0|                stackD[sp] = nextD[2];
12643|      0|                sp++;
12644|      0|            }
12645|      0|while_break: /* CIL Label */
12646|      0|            ;
12647|      0|        }
12648|      0|        return;
12649|      0|    }
12650|      0|}
12651|       |static void mainSort(UInt32 *ptr, UChar *block, UInt16 *quadrant, UInt32 *ftab,
12652|       |                     Int32 nblock, Int32 verb, Int32 *budget)
12653|      0|{
12654|      0|    Int32 i;
12655|      0|    Int32 j;
12656|      0|    Int32 k;
12657|      0|    Int32 ss;
12658|      0|    Int32 sb;
12659|      0|    Int32 runningOrder[256];
12660|      0|    Bool bigDone[256];
12661|      0|    Int32 copyStart[256];
12662|      0|    Int32 copyEnd[256];
12663|      0|    UChar c1;
12664|      0|    Int32 numQSorted;
12665|      0|    UInt16 s;
12666|      0|    Int32 vv;
12667|      0|    Int32 h;
12668|      0|    Int32 lo;
12669|      0|    Int32 hi;
12670|      0|    Int32 tmp;
12671|      0|    Int32 tmp___0;
12672|      0|    Int32 bbStart;
12673|      0|    Int32 bbSize;
12674|      0|    Int32 shifts;
12675|      0|    Int32 a2update;
12676|      0|    UInt16 qVal;
12677|      0|    void *__cil_tmp31;
12678|      0|    void *__cil_tmp32;
12679|      0|    void *__cil_tmp33;
12680|      0|    void *__cil_tmp34;
12681|       |
12682|      0|    {
12683|      0|        if (verb >= 4) {
12684|      0|            {
12685|      0|                fprintf((FILE * /* __restrict  */) stderr,
12686|      0|                        (char const
12687|      0|                         * /* __restrict  */) "        main sort initialise ...\n");
12688|      0|            }
12689|      0|        }
12690|      0|        i = 65536;
12691|      0|        {
12692|      0|            while (1) {
12693|      0|while_continue: /* CIL Label */
12694|      0|                ;
12695|      0|                if (!(i >= 0)) {
12696|      0|                    goto while_break;
12697|      0|                }
12698|      0|                *(ftab + i) = (UInt32)0;
12699|      0|                i--;
12700|      0|            }
12701|      0|while_break: /* CIL Label */
12702|      0|            ;
12703|      0|        }
12704|      0|        j = (int)*(block + 0) << 8;
12705|      0|        i = nblock - 1;
12706|      0|        {
12707|      0|            while (1) {
12708|      0|while_continue___0: /* CIL Label */
12709|      0|                ;
12710|      0|                if (!(i >= 3)) {
12711|      0|                    goto while_break___0;
12712|      0|                }
12713|      0|                *(quadrant + i) = (UInt16)0;
12714|      0|                j = (j >> 8) | ((int)((UInt16) * (block + i)) << 8);
12715|      0|                (*(ftab + j))++;
12716|      0|                *(quadrant + (i - 1)) = (UInt16)0;
12717|      0|                j = (j >> 8) | ((int)((UInt16) * (block + (i - 1))) << 8);
12718|      0|                (*(ftab + j))++;
12719|      0|                *(quadrant + (i - 2)) = (UInt16)0;
12720|      0|                j = (j >> 8) | ((int)((UInt16) * (block + (i - 2))) << 8);
12721|      0|                (*(ftab + j))++;
12722|      0|                *(quadrant + (i - 3)) = (UInt16)0;
12723|      0|                j = (j >> 8) | ((int)((UInt16) * (block + (i - 3))) << 8);
12724|      0|                (*(ftab + j))++;
12725|      0|                i -= 4;
12726|      0|            }
12727|      0|while_break___0: /* CIL Label */
12728|      0|            ;
12729|      0|        }
12730|      0|        {
12731|      0|            while (1) {
12732|      0|while_continue___1: /* CIL Label */
12733|      0|                ;
12734|      0|                if (!(i >= 0)) {
12735|      0|                    goto while_break___1;
12736|      0|                }
12737|      0|                *(quadrant + i) = (UInt16)0;
12738|      0|                j = (j >> 8) | ((int)((UInt16) * (block + i)) << 8);
12739|      0|                (*(ftab + j))++;
12740|      0|                i--;
12741|      0|            }
12742|      0|while_break___1: /* CIL Label */
12743|      0|            ;
12744|      0|        }
12745|      0|        i = 0;
12746|      0|        {
12747|      0|            while (1) {
12748|      0|while_continue___2: /* CIL Label */
12749|      0|                ;
12750|      0|                if (!(i < 34)) {
12751|      0|                    goto while_break___2;
12752|      0|                }
12753|      0|                *(block + (nblock + i)) = *(block + i);
12754|      0|                *(quadrant + (nblock + i)) = (UInt16)0;
12755|      0|                i++;
12756|      0|            }
12757|      0|while_break___2: /* CIL Label */
12758|      0|            ;
12759|      0|        }
12760|      0|        if (verb >= 4) {
12761|      0|            {
12762|      0|                fprintf(
12763|      0|                    (FILE * /* __restrict  */) stderr,
12764|      0|                    (char const * /* __restrict  */) "        bucket sorting ...\n");
12765|      0|            }
12766|      0|        }
12767|      0|        i = 1;
12768|      0|        {
12769|      0|            while (1) {
12770|      0|while_continue___3: /* CIL Label */
12771|      0|                ;
12772|      0|                if (!(i <= 65536)) {
12773|      0|                    goto while_break___3;
12774|      0|                }
12775|      0|                *(ftab + i) += *(ftab + (i - 1));
12776|      0|                i++;
12777|      0|            }
12778|      0|while_break___3: /* CIL Label */
12779|      0|            ;
12780|      0|        }
12781|      0|        s = (UInt16)((int)*(block + 0) << 8);
12782|      0|        i = nblock - 1;
12783|      0|        {
12784|      0|            while (1) {
12785|      0|while_continue___4: /* CIL Label */
12786|      0|                ;
12787|      0|                if (!(i >= 3)) {
12788|      0|                    goto while_break___4;
12789|      0|                }
12790|      0|                s = (UInt16)(((int)s >> 8) | ((int)*(block + i) << 8));
12791|      0|                j = (Int32)(*(ftab + (int)s) - 1U);
12792|      0|                *(ftab + (int)s) = (UInt32)j;
12793|      0|                *(ptr + j) = (UInt32)i;
12794|      0|                s = (UInt16)(((int)s >> 8) | ((int)*(block + (i - 1)) << 8));
12795|      0|                j = (Int32)(*(ftab + (int)s) - 1U);
12796|      0|                *(ftab + (int)s) = (UInt32)j;
12797|      0|                *(ptr + j) = (UInt32)(i - 1);
12798|      0|                s = (UInt16)(((int)s >> 8) | ((int)*(block + (i - 2)) << 8));
12799|      0|                j = (Int32)(*(ftab + (int)s) - 1U);
12800|      0|                *(ftab + (int)s) = (UInt32)j;
12801|      0|                *(ptr + j) = (UInt32)(i - 2);
12802|      0|                s = (UInt16)(((int)s >> 8) | ((int)*(block + (i - 3)) << 8));
12803|      0|                j = (Int32)(*(ftab + (int)s) - 1U);
12804|      0|                *(ftab + (int)s) = (UInt32)j;
12805|      0|                *(ptr + j) = (UInt32)(i - 3);
12806|      0|                i -= 4;
12807|      0|            }
12808|      0|while_break___4: /* CIL Label */
12809|      0|            ;
12810|      0|        }
12811|      0|        {
12812|      0|            while (1) {
12813|      0|while_continue___5: /* CIL Label */
12814|      0|                ;
12815|      0|                if (!(i >= 0)) {
12816|      0|                    goto while_break___5;
12817|      0|                }
12818|      0|                s = (UInt16)(((int)s >> 8) | ((int)*(block + i) << 8));
12819|      0|                j = (Int32)(*(ftab + (int)s) - 1U);
12820|      0|                *(ftab + (int)s) = (UInt32)j;
12821|      0|                *(ptr + j) = (UInt32)i;
12822|      0|                i--;
12823|      0|            }
12824|      0|while_break___5: /* CIL Label */
12825|      0|            ;
12826|      0|        }
12827|      0|        i = 0;
12828|      0|        {
12829|      0|            while (1) {
12830|      0|while_continue___6: /* CIL Label */
12831|      0|                ;
12832|      0|                if (!(i <= 255)) {
12833|      0|                    goto while_break___6;
12834|      0|                }
12835|      0|                bigDone[i] = (Bool)0;
12836|      0|                runningOrder[i] = i;
12837|      0|                i++;
12838|      0|            }
12839|      0|while_break___6: /* CIL Label */
12840|      0|            ;
12841|      0|        }
12842|      0|        h = 1;
12843|      0|        {
12844|      0|            while (1) {
12845|      0|while_continue___7: /* CIL Label */
12846|      0|                ;
12847|      0|                h = 3 * h + 1;
12848|      0|                if (!(h <= 256)) {
12849|      0|                    goto while_break___7;
12850|      0|                }
12851|      0|            }
12852|      0|while_break___7: /* CIL Label */
12853|      0|            ;
12854|      0|        }
12855|      0|        {
12856|      0|            while (1) {
12857|      0|while_continue___8: /* CIL Label */
12858|      0|                ;
12859|      0|                h /= 3;
12860|      0|                i = h;
12861|      0|                {
12862|      0|                    while (1) {
12863|      0|while_continue___9: /* CIL Label */
12864|      0|                        ;
12865|      0|                        if (!(i <= 255)) {
12866|      0|                            goto while_break___9;
12867|      0|                        }
12868|      0|                        vv = runningOrder[i];
12869|      0|                        j = i;
12870|      0|                        {
12871|      0|                            while (1) {
12872|      0|while_continue___10: /* CIL Label */
12873|      0|                                ;
12874|      0|                                if (!(*(ftab + ((runningOrder[j - h] + 1) << 8)) -
12875|      0|                                        *(ftab + (runningOrder[j - h] << 8)) >
12876|      0|                                        *(ftab + ((vv + 1) << 8)) - *(ftab + (vv << 8)))) {
12877|      0|                                    goto while_break___10;
12878|      0|                                }
12879|      0|                                runningOrder[j] = runningOrder[j - h];
12880|      0|                                j -= h;
12881|      0|                                if (j <= h - 1) {
12882|      0|                                    goto zero;
12883|      0|                                }
12884|      0|                            }
12885|      0|while_break___10: /* CIL Label */
12886|      0|                            ;
12887|      0|                        }
12888|      0|zero:
12889|      0|                        runningOrder[j] = vv;
12890|      0|                        i++;
12891|      0|                    }
12892|      0|while_break___9: /* CIL Label */
12893|      0|                    ;
12894|      0|                }
12895|      0|                if (!(h != 1)) {
12896|      0|                    goto while_break___8;
12897|      0|                }
12898|      0|            }
12899|      0|while_break___8: /* CIL Label */
12900|      0|            ;
12901|      0|        }
12902|      0|        numQSorted = 0;
12903|      0|        i = 0;
12904|      0|        {
12905|      0|            while (1) {
12906|      0|while_continue___11: /* CIL Label */
12907|      0|                ;
12908|      0|                if (!(i <= 255)) {
12909|      0|                    goto while_break___11;
12910|      0|                }
12911|      0|                ss = runningOrder[i];
12912|      0|                j = 0;
12913|      0|                {
12914|      0|                    while (1) {
12915|      0|while_continue___12: /* CIL Label */
12916|      0|                        ;
12917|      0|                        if (!(j <= 255)) {
12918|      0|                            goto while_break___12;
12919|      0|                        }
12920|      0|                        if (j != ss) {
12921|      0|                            sb = (ss << 8) + j;
12922|      0|                            if (!(*(ftab + sb) & (unsigned int)(1 << 21))) {
12923|      0|                                lo = (Int32)(*(ftab + sb) & (unsigned int)(~(1 << 21)));
12924|      0|                                hi = (Int32)((*(ftab + (sb + 1)) & (unsigned int)(~(1 << 21))) -
12925|      0|                                             1U);
12926|      0|                                if (hi > lo) {
12927|      0|                                    if (verb >= 4) {
12928|      0|                                        {
12929|      0|                                            fprintf((FILE * /* __restrict  */) stderr,
12930|      0|                                                    (char const
12931|      0|                                                     * /* __restrict  */) "        qsort [0x%x, "
12932|      0|                                                    "0x%x]   done %d   "
12933|      0|                                                    "this %d\n",
12934|      0|                                                    ss, j, numQSorted, (hi - lo) + 1);
12935|      0|                                        }
12936|      0|                                    }
12937|      0|                                    {
12938|      0|                                        mainQSort3(ptr, block, quadrant, nblock, lo, hi, 2, budget);
12939|      0|                                        numQSorted += (hi - lo) + 1;
12940|      0|                                    }
12941|      0|                                    if (*budget < 0) {
12942|      0|                                        return;
12943|      0|                                    }
12944|      0|                                }
12945|      0|                            }
12946|      0|                            *(ftab + sb) |= (unsigned int)(1 << 21);
12947|      0|                        }
12948|      0|                        j++;
12949|      0|                    }
12950|      0|while_break___12: /* CIL Label */
12951|      0|                    ;
12952|      0|                }
12953|      0|                if (!(!bigDone[ss])) {
12954|      0|                    {
12955|      0|                        BZ2_bz__AssertH__fail(1006);
12956|      0|                    }
12957|      0|                }
12958|      0|                j = 0;
12959|      0|                {
12960|      0|                    while (1) {
12961|      0|while_continue___13: /* CIL Label */
12962|      0|                        ;
12963|      0|                        if (!(j <= 255)) {
12964|      0|                            goto while_break___13;
12965|      0|                        }
12966|      0|                        copyStart[j] =
12967|      0|                            (Int32)(*(ftab + ((j << 8) + ss)) & (unsigned int)(~(1 << 21)));
12968|      0|                        copyEnd[j] = (Int32)(
12969|      0|                                         (*(ftab + (((j << 8) + ss) + 1)) & (unsigned int)(~(1 << 21))) -
12970|      0|                                         1U);
12971|      0|                        j++;
12972|      0|                    }
12973|      0|while_break___13: /* CIL Label */
12974|      0|                    ;
12975|      0|                }
12976|      0|                j = (Int32)(*(ftab + (ss << 8)) & (unsigned int)(~(1 << 21)));
12977|      0|                {
12978|      0|                    while (1) {
12979|      0|while_continue___14: /* CIL Label */
12980|      0|                        ;
12981|      0|                        if (!(j < copyStart[ss])) {
12982|      0|                            goto while_break___14;
12983|      0|                        }
12984|      0|                        k = (Int32)(*(ptr + j) - 1U);
12985|      0|                        if (k < 0) {
12986|      0|                            k += nblock;
12987|      0|                        }
12988|      0|                        c1 = *(block + k);
12989|      0|                        if (!bigDone[c1]) {
12990|      0|                            tmp = copyStart[c1];
12991|      0|                            (copyStart[c1])++;
12992|      0|                            *(ptr + tmp) = (UInt32)k;
12993|      0|                        }
12994|      0|                        j++;
12995|      0|                    }
12996|      0|while_break___14: /* CIL Label */
12997|      0|                    ;
12998|      0|                }
12999|      0|                j = (Int32)((*(ftab + ((ss + 1) << 8)) & (unsigned int)(~(1 << 21))) -
13000|      0|                            1U);
13001|      0|                {
13002|      0|                    while (1) {
13003|      0|while_continue___15: /* CIL Label */
13004|      0|                        ;
13005|      0|                        if (!(j > copyEnd[ss])) {
13006|      0|                            goto while_break___15;
13007|      0|                        }
13008|      0|                        k = (Int32)(*(ptr + j) - 1U);
13009|      0|                        if (k < 0) {
13010|      0|                            k += nblock;
13011|      0|                        }
13012|      0|                        c1 = *(block + k);
13013|      0|                        if (!bigDone[c1]) {
13014|      0|                            tmp___0 = copyEnd[c1];
13015|      0|                            (copyEnd[c1])--;
13016|      0|                            *(ptr + tmp___0) = (UInt32)k;
13017|      0|                        }
13018|      0|                        j--;
13019|      0|                    }
13020|      0|while_break___15: /* CIL Label */
13021|      0|                    ;
13022|      0|                }
13023|      0|                if (!(copyStart[ss] - 1 == copyEnd[ss])) {
13024|      0|                    if (copyStart[ss] == 0) {
13025|      0|                        if (!(copyEnd[ss] == nblock - 1)) {
13026|      0|                            {
13027|      0|                                BZ2_bz__AssertH__fail(1007);
13028|      0|                            }
13029|      0|                        }
13030|      0|                    }
13031|      0|                    else {
13032|      0|                        {
13033|      0|                            BZ2_bz__AssertH__fail(1007);
13034|      0|                        }
13035|      0|                    }
13036|      0|                }
13037|      0|                j = 0;
13038|      0|                {
13039|      0|                    while (1) {
13040|      0|while_continue___16: /* CIL Label */
13041|      0|                        ;
13042|      0|                        if (!(j <= 255)) {
13043|      0|                            goto while_break___16;
13044|      0|                        }
13045|      0|                        *(ftab + ((j << 8) + ss)) |= (unsigned int)(1 << 21);
13046|      0|                        j++;
13047|      0|                    }
13048|      0|while_break___16: /* CIL Label */
13049|      0|                    ;
13050|      0|                }
13051|      0|                bigDone[ss] = (Bool)1;
13052|      0|                if (i < 255) {
13053|      0|                    bbStart = (Int32)(*(ftab + (ss << 8)) & (unsigned int)(~(1 << 21)));
13054|      0|                    bbSize =
13055|      0|                        (Int32)((*(ftab + ((ss + 1) << 8)) & (unsigned int)(~(1 << 21))) -
13056|      0|                                (unsigned int)bbStart);
13057|      0|                    shifts = 0;
13058|      0|                    {
13059|      0|                        while (1) {
13060|      0|while_continue___17: /* CIL Label */
13061|      0|                            ;
13062|      0|                            if (!(bbSize >> shifts > 65534)) {
13063|      0|                                goto while_break___17;
13064|      0|                            }
13065|      0|                            shifts++;
13066|      0|                        }
13067|      0|while_break___17: /* CIL Label */
13068|      0|                        ;
13069|      0|                    }
13070|      0|                    j = bbSize - 1;
13071|      0|                    {
13072|      0|                        while (1) {
13073|      0|while_continue___18: /* CIL Label */
13074|      0|                            ;
13075|      0|                            if (!(j >= 0)) {
13076|      0|                                goto while_break___18;
13077|      0|                            }
13078|      0|                            a2update = (Int32) * (ptr + (bbStart + j));
13079|      0|                            qVal = (UInt16)(j >> shifts);
13080|      0|                            *(quadrant + a2update) = qVal;
13081|      0|                            if (a2update < 34) {
13082|      0|                                *(quadrant + (a2update + nblock)) = qVal;
13083|      0|                            }
13084|      0|                            j--;
13085|      0|                        }
13086|      0|while_break___18: /* CIL Label */
13087|      0|                        ;
13088|      0|                    }
13089|      0|                    if (!((bbSize - 1) >> shifts <= 65535)) {
13090|      0|                        {
13091|      0|                            BZ2_bz__AssertH__fail(1002);
13092|      0|                        }
13093|      0|                    }
13094|      0|                }
13095|      0|                i++;
13096|      0|            }
13097|      0|while_break___11: /* CIL Label */
13098|      0|            ;
13099|      0|        }
13100|      0|        if (verb >= 4) {
13101|      0|            {
13102|      0|                fprintf((FILE * /* __restrict  */) stderr,
13103|      0|                        (char const * /* __restrict  */) "        %d pointers, %d "
13104|      0|                        "sorted, %d scanned\n",
13105|      0|                        nblock, numQSorted, nblock - numQSorted);
13106|      0|            }
13107|      0|        }
13108|      0|        return;
13109|      0|    }
13110|      0|}
13111|       |void BZ2_blockSort(EState *s)
13112|      1|{
13113|      1|    UInt32 *ptr;
13114|      1|    UChar *block;
13115|      1|    UInt32 *ftab;
13116|      1|    Int32 nblock;
13117|      1|    Int32 verb;
13118|      1|    Int32 wfact;
13119|      1|    UInt16 *quadrant;
13120|      1|    Int32 budget;
13121|      1|    Int32 budgetInit;
13122|      1|    Int32 i;
13123|      1|    int tmp;
13124|       |
13125|      1|    {
13126|      1|        ptr = s->ptr;
13127|      1|        block = s->block;
13128|      1|        ftab = s->ftab;
13129|      1|        nblock = s->nblock;
13130|      1|        verb = s->verbosity;
13131|      1|        wfact = s->workFactor;
13132|      1|        if (nblock < 10000) {
13133|      1|            {
13134|      1|                fallbackSort(s->arr1, s->arr2, ftab, nblock, verb);
13135|      1|            }
13136|      1|        }
13137|      0|        else {
13138|      0|            i = nblock + 34;
13139|      0|            if (i & 1) {
13140|      0|                i++;
13141|      0|            }
13142|      0|            quadrant = (UInt16 *)(block + i);
13143|      0|            if (wfact < 1) {
13144|      0|                wfact = 1;
13145|      0|            }
13146|      0|            if (wfact > 100) {
13147|      0|                wfact = 100;
13148|      0|            }
13149|      0|            {
13150|      0|                budgetInit = nblock * ((wfact - 1) / 3);
13151|      0|                budget = budgetInit;
13152|      0|                mainSort(ptr, block, quadrant, ftab, nblock, verb, &budget);
13153|      0|            }
13154|      0|            if (verb >= 3) {
13155|      0|                if (nblock == 0) {
13156|      0|                    tmp = 1;
13157|      0|                }
13158|      0|                else {
13159|      0|                    tmp = nblock;
13160|      0|                }
13161|      0|                {
13162|      0|                    fprintf((FILE * /* __restrict  */) stderr,
13163|      0|                            (char const * /* __restrict  */) "      %d work, %d block, "
13164|      0|                            "ratio %5.2f\n",
13165|      0|                            budgetInit - budget, nblock,
13166|      0|                            (double)((float)(budgetInit - budget) / (float)tmp));
13167|      0|                }
13168|      0|            }
13169|      0|            if (budget < 0) {
13170|      0|                if (verb >= 2) {
13171|      0|                    {
13172|      0|                        fprintf((FILE * /* __restrict  */) stderr,
13173|      0|                                (char const
13174|      0|                                 * /* __restrict  */) "    too repetitive; using "
13175|      0|                                "fallback sorting algorithm\n");
13176|      0|                    }
13177|      0|                }
13178|      0|                {
13179|      0|                    fallbackSort(s->arr1, s->arr2, ftab, nblock, verb);
13180|      0|                }
13181|      0|            }
13182|      0|        }
13183|      1|        s->origPtr = -1;
13184|      1|        i = 0;
13185|      1|        {
13186|      9|            while (1) {
13187|      9|while_continue: /* CIL Label */
13188|      9|                ;
13189|      9|                if (!(i < s->nblock)) {
13190|      0|                    goto while_break;
13191|      0|                }
13192|      9|                if (*(ptr + i) == 0U) {
13193|      1|                    s->origPtr = i;
13194|      1|                    goto while_break;
13195|      1|                }
13196|      8|                i++;
13197|      8|            }
13198|      1|while_break: /* CIL Label */
13199|      1|            ;
13200|      1|        }
13201|      1|        if (!(s->origPtr != -1)) {
13202|      0|            {
13203|      0|                BZ2_bz__AssertH__fail(1003);
13204|      0|            }
13205|      0|        }
13206|      1|        return;
13207|      1|    }
13208|      1|}

