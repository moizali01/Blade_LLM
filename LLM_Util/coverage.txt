    1|       |typedef unsigned long uintmax_t;
    2|       |enum strtol_error {
    3|       |  LONGINT_OK = 0,
    4|       |  LONGINT_OVERFLOW = 1,
    5|       |  LONGINT_INVALID_SUFFIX_CHAR = 2,
    6|       |  LONGINT_INVALID_SUFFIX_CHAR_WITH_OVERFLOW = 3,
    7|       |  LONGINT_INVALID = 4
    8|       |};
    9|       |typedef enum strtol_error strtol_error;
   10|       |typedef long intmax_t;
   11|       |typedef unsigned long size_t;
   12|       |typedef long __ssize_t;
   13|       |typedef __ssize_t ssize_t;
   14|       |typedef long __time_t;
   15|       |typedef long __syscall_slong_t;
   16|       |typedef __time_t time_t;
   17|       |struct timespec {
   18|       |  __time_t tv_sec;
   19|       |  __syscall_slong_t tv_nsec;
   20|       |};
   21|       |enum quoting_style {
   22|       |  literal_quoting_style = 0,
   23|       |  shell_quoting_style = 1,
   24|       |  shell_always_quoting_style = 2,
   25|       |  c_quoting_style = 3,
   26|       |  escape_quoting_style = 4,
   27|       |  locale_quoting_style = 5,
   28|       |  clocale_quoting_style = 6
   29|       |};
   30|       |typedef long ptrdiff_t;
   31|       |typedef unsigned short __u_short;
   32|       |typedef unsigned long __dev_t;
   33|       |typedef unsigned int __uid_t;
   34|       |typedef unsigned int __gid_t;
   35|       |typedef unsigned long __ino_t;
   36|       |typedef unsigned int __mode_t;
   37|       |typedef unsigned long __nlink_t;
   38|       |typedef long __off_t;
   39|       |typedef long __blksize_t;
   40|       |typedef long __blkcnt_t;
   41|       |typedef __u_short u_short;
   42|       |typedef __ino_t ino_t;
   43|       |typedef __dev_t dev_t;
   44|       |typedef __nlink_t nlink_t;
   45|       |struct hash_table;
   46|       |struct hash_table;
   47|       |typedef struct hash_table Hash_table;
   48|       |struct stat {
   49|       |  __dev_t st_dev;
   50|       |  __ino_t st_ino;
   51|       |  __nlink_t st_nlink;
   52|       |  __mode_t st_mode;
   53|       |  __uid_t st_uid;
   54|       |  __gid_t st_gid;
   55|       |  int __pad0;
   56|       |  __dev_t st_rdev;
   57|       |  __off_t st_size;
   58|       |  __blksize_t st_blksize;
   59|       |  __blkcnt_t st_blocks;
   60|       |  struct timespec st_atim;
   61|       |  struct timespec st_mtim;
   62|       |  struct timespec st_ctim;
   63|       |  __syscall_slong_t __glibc_reserved[3];
   64|       |};
   65|       |struct dev_ino {
   66|       |  ino_t st_ino;
   67|       |  dev_t st_dev;
   68|       |};
   69|       |struct cycle_check_state {
   70|       |  struct dev_ino dev_ino;
   71|       |  size_t chdir_counter;
   72|       |  unsigned long magic;
   73|       |};
   74|       |struct _ftsent;
   75|       |struct _ftsent;
   76|       |struct __anonstruct_FTS_26 {
   77|       |  struct _ftsent *fts_cur;
   78|       |  struct _ftsent *fts_child;
   79|       |  struct _ftsent **fts_array;
   80|       |  dev_t fts_dev;
   81|       |  char *fts_path;
   82|       |  int fts_rfd;
   83|       |  size_t fts_pathlen;
   84|       |  int fts_nitems;
   85|       |  int (*fts_compar)(void const *, void const *);
   86|       |  int fts_options;
   87|       |  Hash_table *active_dir_ht;
   88|       |  struct cycle_check_state *cycle_state;
   89|       |};
   90|       |typedef struct __anonstruct_FTS_26 FTS;
   91|       |struct _ftsent {
   92|       |  struct _ftsent *fts_cycle;
   93|       |  struct _ftsent *fts_parent;
   94|       |  struct _ftsent *fts_link;
   95|       |  long fts_number;
   96|       |  void *fts_pointer;
   97|       |  char *fts_accpath;
   98|       |  char *fts_path;
   99|       |  int fts_errno;
  100|       |  int fts_symfd;
  101|       |  size_t fts_pathlen;
  102|       |  ino_t fts_ino;
  103|       |  dev_t fts_dev;
  104|       |  nlink_t fts_nlink;
  105|       |  int fts_level;
  106|       |  u_short fts_namelen;
  107|       |  u_short fts_info;
  108|       |  u_short fts_flags;
  109|       |  u_short fts_instr;
  110|       |  struct stat *fts_statp;
  111|       |  char fts_name[1];
  112|       |};
  113|       |typedef struct _ftsent FTSENT;
  114|       |typedef __builtin_va_list __gnuc_va_list;
  115|       |typedef __gnuc_va_list va_list;
  116|       |typedef long __off64_t;
  117|       |struct _IO_FILE;
  118|       |struct _IO_FILE;
  119|       |typedef struct _IO_FILE FILE;
  120|       |typedef void _IO_lock_t;
  121|       |struct _IO_marker {
  122|       |  struct _IO_marker *_next;
  123|       |  struct _IO_FILE *_sbuf;
  124|       |  int _pos;
  125|       |};
  126|       |struct _IO_FILE {
  127|       |  int _flags;
  128|       |  char *_IO_read_ptr;
  129|       |  char *_IO_read_end;
  130|       |  char *_IO_read_base;
  131|       |  char *_IO_write_base;
  132|       |  char *_IO_write_ptr;
  133|       |  char *_IO_write_end;
  134|       |  char *_IO_buf_base;
  135|       |  char *_IO_buf_end;
  136|       |  char *_IO_save_base;
  137|       |  char *_IO_backup_base;
  138|       |  char *_IO_save_end;
  139|       |  struct _IO_marker *_markers;
  140|       |  struct _IO_FILE *_chain;
  141|       |  int _fileno;
  142|       |  int _flags2;
  143|       |  __off_t _old_offset;
  144|       |  unsigned short _cur_column;
  145|       |  signed char _vtable_offset;
  146|       |  char _shortbuf[1];
  147|       |  _IO_lock_t *_lock;
  148|       |  __off64_t _offset;
  149|       |  void *__pad1;
  150|       |  void *__pad2;
  151|       |  void *__pad3;
  152|       |  void *__pad4;
  153|       |  size_t __pad5;
  154|       |  int _mode;
  155|       |  char _unused2[(15UL * sizeof(int) - 4UL * sizeof(void *)) - sizeof(size_t)];
  156|       |};
  157|       |typedef int wchar_t;
  158|       |typedef unsigned int wint_t;
  159|       |enum __anonenum_arg_type_26 {
  160|       |  TYPE_NONE = 0,
  161|       |  TYPE_SCHAR = 1,
  162|       |  TYPE_UCHAR = 2,
  163|       |  TYPE_SHORT = 3,
  164|       |  TYPE_USHORT = 4,
  165|       |  TYPE_INT = 5,
  166|       |  TYPE_UINT = 6,
  167|       |  TYPE_LONGINT = 7,
  168|       |  TYPE_ULONGINT = 8,
  169|       |  TYPE_LONGLONGINT = 9,
  170|       |  TYPE_ULONGLONGINT = 10,
  171|       |  TYPE_DOUBLE = 11,
  172|       |  TYPE_LONGDOUBLE = 12,
  173|       |  TYPE_CHAR = 13,
  174|       |  TYPE_WIDE_CHAR = 14,
  175|       |  TYPE_STRING = 15,
  176|       |  TYPE_WIDE_STRING = 16,
  177|       |  TYPE_POINTER = 17,
  178|       |  TYPE_COUNT_SCHAR_POINTER = 18,
  179|       |  TYPE_COUNT_SHORT_POINTER = 19,
  180|       |  TYPE_COUNT_INT_POINTER = 20,
  181|       |  TYPE_COUNT_LONGINT_POINTER = 21,
  182|       |  TYPE_COUNT_LONGLONGINT_POINTER = 22
  183|       |};
  184|       |typedef enum __anonenum_arg_type_26 arg_type;
  185|       |union __anonunion_a_28 {
  186|       |  signed char a_schar;
  187|       |  unsigned char a_uchar;
  188|       |  short a_short;
  189|       |  unsigned short a_ushort;
  190|       |  int a_int;
  191|       |  unsigned int a_uint;
  192|       |  long a_longint;
  193|       |  unsigned long a_ulongint;
  194|       |  long long a_longlongint;
  195|       |  unsigned long long a_ulonglongint;
  196|       |  float a_float;
  197|       |  double a_double;
  198|       |  long double a_longdouble;
  199|       |  int a_char;
  200|       |  wint_t a_wide_char;
  201|       |  char const *a_string;
  202|       |  wchar_t const *a_wide_string;
  203|       |  void *a_pointer;
  204|       |  signed char *a_count_schar_pointer;
  205|       |  short *a_count_short_pointer;
  206|       |  int *a_count_int_pointer;
  207|       |  long *a_count_longint_pointer;
  208|       |  long long *a_count_longlongint_pointer;
  209|       |};
  210|       |struct __anonstruct_argument_27 {
  211|       |  arg_type type;
  212|       |  union __anonunion_a_28 a;
  213|       |};
  214|       |typedef struct __anonstruct_argument_27 argument;
  215|       |struct __anonstruct_arguments_29 {
  216|       |  unsigned int count;
  217|       |  argument *arg;
  218|       |};
  219|       |typedef struct __anonstruct_arguments_29 arguments;
  220|       |struct __anonstruct_char_directive_30 {
  221|       |  char const *dir_start;
  222|       |  char const *dir_end;
  223|       |  int flags;
  224|       |  char const *width_start;
  225|       |  char const *width_end;
  226|       |  int width_arg_index;
  227|       |  char const *precision_start;
  228|       |  char const *precision_end;
  229|       |  int precision_arg_index;
  230|       |  char conversion;
  231|       |  int arg_index;
  232|       |};
  233|       |typedef struct __anonstruct_char_directive_30 char_directive;
  234|       |struct __anonstruct_char_directives_31 {
  235|       |  unsigned int count;
  236|       |  char_directive *dir;
  237|       |  unsigned int max_width_length;
  238|       |  unsigned int max_precision_length;
  239|       |};
  240|       |typedef struct __anonstruct_char_directives_31 char_directives;
  241|       |typedef long __suseconds_t;
  242|       |struct timeval {
  243|       |  __time_t tv_sec;
  244|       |  __suseconds_t tv_usec;
  245|       |};
  246|       |typedef __gid_t gid_t;
  247|       |typedef __uid_t uid_t;
  248|       |struct passwd {
  249|       |  char *pw_name;
  250|       |  char *pw_passwd;
  251|       |  __uid_t pw_uid;
  252|       |  __gid_t pw_gid;
  253|       |  char *pw_gecos;
  254|       |  char *pw_dir;
  255|       |  char *pw_shell;
  256|       |};
  257|       |struct group {
  258|       |  char *gr_name;
  259|       |  char *gr_passwd;
  260|       |  __gid_t gr_gid;
  261|       |  char **gr_mem;
  262|       |};
  263|       |typedef void *iconv_t;
  264|       |struct tm {
  265|       |  int tm_sec;
  266|       |  int tm_min;
  267|       |  int tm_hour;
  268|       |  int tm_mday;
  269|       |  int tm_mon;
  270|       |  int tm_year;
  271|       |  int tm_wday;
  272|       |  int tm_yday;
  273|       |  int tm_isdst;
  274|       |  long tm_gmtoff;
  275|       |  char const *tm_zone;
  276|       |};
  277|       |union __anonunion___value_16 {
  278|       |  unsigned int __wch;
  279|       |  char __wchb[4];
  280|       |};
  281|       |struct __anonstruct___mbstate_t_15 {
  282|       |  int __count;
  283|       |  union __anonunion___value_16 __value;
  284|       |};
  285|       |typedef struct __anonstruct___mbstate_t_15 __mbstate_t;
  286|       |typedef __mbstate_t mbstate_t;
  287|       |struct numname {
  288|       |  int num;
  289|       |  char const name[8];
  290|       |};
  291|       |typedef unsigned int md5_uint32;
  292|       |typedef unsigned long md5_uintptr;
  293|       |struct sha_ctx {
  294|       |  md5_uint32 A;
  295|       |  md5_uint32 B;
  296|       |  md5_uint32 C;
  297|       |  md5_uint32 D;
  298|       |  md5_uint32 E;
  299|       |  md5_uint32 total[2];
  300|       |  md5_uint32 buflen;
  301|       |  char buffer[128];
  302|       |};
  303|       |typedef int __clockid_t;
  304|       |typedef __clockid_t clockid_t;
  305|       |struct timezone {
  306|       |  int tz_minuteswest;
  307|       |  int tz_dsttime;
  308|       |};
  309|       |struct dirent {
  310|       |  __ino_t d_ino;
  311|       |  __off_t d_off;
  312|       |  unsigned short d_reclen;
  313|       |  unsigned char d_type;
  314|       |  char d_name[256];
  315|       |};
  316|       |struct __dirstream;
  317|       |struct __dirstream;
  318|       |typedef struct __dirstream DIR;
  319|       |struct saved_cwd {
  320|       |  int desc;
  321|       |  char *name;
  322|       |};
  323|       |typedef int __int32_t;
  324|       |typedef int __pid_t;
  325|       |struct __exit_status {
  326|       |  short e_termination;
  327|       |  short e_exit;
  328|       |};
  329|       |struct __anonstruct_ut_tv_27 {
  330|       |  __int32_t tv_sec;
  331|       |  __int32_t tv_usec;
  332|       |};
  333|       |struct utmpx {
  334|       |  short ut_type;
  335|       |  __pid_t ut_pid;
  336|       |  char ut_line[32];
  337|       |  char ut_id[4];
  338|       |  char ut_user[32];
  339|       |  char ut_host[256];
  340|       |  struct __exit_status ut_exit;
  341|       |  __int32_t ut_session;
  342|       |  struct __anonstruct_ut_tv_27 ut_tv;
  343|       |  __int32_t ut_addr_v6[4];
  344|       |  char __glibc_reserved[20];
  345|       |};
  346|       |typedef struct utmpx STRUCT_UTMP;
  347|       |struct tokenbuffer {
  348|       |  long size;
  349|       |  char *buffer;
  350|       |};
  351|       |typedef struct tokenbuffer token_buffer;
  352|       |struct quoting_options;
  353|       |struct quoting_options;
  354|       |struct quoting_options {
  355|       |  enum quoting_style style;
  356|       |  int quote_these_too[255UL / (sizeof(int) * 8UL) + 1UL];
  357|       |};
  358|       |struct slotvec {
  359|       |  size_t size;
  360|       |  char *val;
  361|       |};
  362|       |typedef __off_t off_t;
  363|       |struct mntent {
  364|       |  char *mnt_fsname;
  365|       |  char *mnt_dir;
  366|       |  char *mnt_type;
  367|       |  char *mnt_opts;
  368|       |  int mnt_freq;
  369|       |  int mnt_passno;
  370|       |};
  371|       |struct mount_entry {
  372|       |  char *me_devname;
  373|       |  char *me_mountdir;
  374|       |  char *me_type;
  375|       |  dev_t me_dev;
  376|       |  unsigned int me_dummy : 1;
  377|       |  unsigned int me_remote : 1;
  378|       |  unsigned int me_type_malloced : 1;
  379|       |  struct mount_entry *me_next;
  380|       |};
  381|       |typedef __mode_t mode_t;
  382|       |struct mode_change {
  383|       |  char op;
  384|       |  char flags;
  385|       |  mode_t affected;
  386|       |  mode_t value;
  387|       |  struct mode_change *next;
  388|       |};
  389|       |struct md5_ctx {
  390|       |  md5_uint32 A;
  391|       |  md5_uint32 B;
  392|       |  md5_uint32 C;
  393|       |  md5_uint32 D;
  394|       |  md5_uint32 total[2];
  395|       |  md5_uint32 buflen;
  396|       |  char buffer[128];
  397|       |};
  398|       |struct ptr_list {
  399|       |  char *dirname_end;
  400|       |  struct ptr_list *next;
  401|       |};
  402|       |struct option {
  403|       |  char const *name;
  404|       |  int has_arg;
  405|       |  int *flag;
  406|       |  int val;
  407|       |};
  408|       |typedef int nl_item;
  409|       |struct linebuffer {
  410|       |  size_t size;
  411|       |  size_t length;
  412|       |  char *buffer;
  413|       |};
  414|       |union __anonunion_id_22 {
  415|       |  uid_t u;
  416|       |  gid_t g;
  417|       |};
  418|       |struct userid {
  419|       |  union __anonunion_id_22 id;
  420|       |  char *name;
  421|       |  struct userid *next;
  422|       |};
  423|       |struct lconv {
  424|       |  char *decimal_point;
  425|       |  char *thousands_sep;
  426|       |  char *grouping;
  427|       |  char *int_curr_symbol;
  428|       |  char *currency_symbol;
  429|       |  char *mon_decimal_point;
  430|       |  char *mon_thousands_sep;
  431|       |  char *mon_grouping;
  432|       |  char *positive_sign;
  433|       |  char *negative_sign;
  434|       |  char int_frac_digits;
  435|       |  char frac_digits;
  436|       |  char p_cs_precedes;
  437|       |  char p_sep_by_space;
  438|       |  char n_cs_precedes;
  439|       |  char n_sep_by_space;
  440|       |  char p_sign_posn;
  441|       |  char n_sign_posn;
  442|       |  char int_p_cs_precedes;
  443|       |  char int_p_sep_by_space;
  444|       |  char int_n_cs_precedes;
  445|       |  char int_n_sep_by_space;
  446|       |  char int_p_sign_posn;
  447|       |  char int_n_sign_posn;
  448|       |};
  449|       |struct hash_entry {
  450|       |  void *data;
  451|       |  struct hash_entry *next;
  452|       |};
  453|       |struct hash_tuning {
  454|       |  float shrink_threshold;
  455|       |  float shrink_factor;
  456|       |  float growth_threshold;
  457|       |  float growth_factor;
  458|       |  _Bool is_n_buckets;
  459|       |};
  460|       |typedef struct hash_tuning Hash_tuning;
  461|       |struct hash_table {
  462|       |  struct hash_entry *bucket;
  463|       |  struct hash_entry const *bucket_limit;
  464|       |  size_t n_buckets;
  465|       |  size_t n_buckets_used;
  466|       |  size_t n_entries;
  467|       |  Hash_tuning const *tuning;
  468|       |  size_t (*hasher)(void const *, size_t);
  469|       |  _Bool (*comparator)(void const *, void const *);
  470|       |  void (*data_freer)(void *);
  471|       |  struct hash_entry *free_entry_list;
  472|       |};
  473|       |typedef struct timezone *__restrict __timezone_ptr_t;
  474|       |struct __anonstruct_textint_22 {
  475|       |  int value;
  476|       |  int digits;
  477|       |};
  478|       |typedef struct __anonstruct_textint_22 textint;
  479|       |struct __anonstruct_table_23 {
  480|       |  char const *name;
  481|       |  int type;
  482|       |  int value;
  483|       |};
  484|       |typedef struct __anonstruct_table_23 table;
  485|       |struct __anonstruct_parser_control_25 {
  486|       |  char const *input;
  487|       |  int day_ordinal;
  488|       |  int day_number;
  489|       |  int local_isdst;
  490|       |  int time_zone;
  491|       |  int meridian;
  492|       |  textint year;
  493|       |  int month;
  494|       |  int day;
  495|       |  int hour;
  496|       |  int minutes;
  497|       |  int seconds;
  498|       |  int rel_year;
  499|       |  int rel_month;
  500|       |  int rel_day;
  501|       |  int rel_hour;
  502|       |  int rel_minutes;
  503|       |  int rel_seconds;
  504|       |  int dates_seen;
  505|       |  int days_seen;
  506|       |  int local_zones_seen;
  507|       |  int rels_seen;
  508|       |  int times_seen;
  509|       |  int zones_seen;
  510|       |  table local_time_zone_table[3];
  511|       |};
  512|       |typedef struct __anonstruct_parser_control_25 parser_control;
  513|       |union YYSTYPE {
  514|       |  int intval;
  515|       |  textint textintval;
  516|       |};
  517|       |typedef union YYSTYPE YYSTYPE;
  518|       |union yyalloc {
  519|       |  short yyss;
  520|       |  YYSTYPE yyvs;
  521|       |};
  522|       |typedef signed char yysigned_char;
  523|       |typedef unsigned int __u_int;
  524|       |typedef __u_int u_int;
  525|       |struct Active_dir {
  526|       |  dev_t dev;
  527|       |  ino_t ino;
  528|       |  FTSENT *fts_ent;
  529|       |};
  530|       |struct __anonstruct___fsid_t_2 {
  531|       |  int __val[2];
  532|       |};
  533|       |typedef struct __anonstruct___fsid_t_2 __fsid_t;
  534|       |typedef unsigned long __fsblkcnt_t;
  535|       |typedef unsigned long __fsfilcnt_t;
  536|       |typedef long __fsword_t;
  537|       |struct fs_usage {
  538|       |  int fsu_blocksize;
  539|       |  uintmax_t fsu_blocks;
  540|       |  uintmax_t fsu_bfree;
  541|       |  uintmax_t fsu_bavail;
  542|       |  int fsu_bavail_top_bit_set;
  543|       |  uintmax_t fsu_files;
  544|       |  uintmax_t fsu_ffree;
  545|       |};
  546|       |struct statfs {
  547|       |  __fsword_t f_type;
  548|       |  __fsword_t f_bsize;
  549|       |  __fsblkcnt_t f_blocks;
  550|       |  __fsblkcnt_t f_bfree;
  551|       |  __fsblkcnt_t f_bavail;
  552|       |  __fsfilcnt_t f_files;
  553|       |  __fsfilcnt_t f_ffree;
  554|       |  __fsid_t f_fsid;
  555|       |  __fsword_t f_namelen;
  556|       |  __fsword_t f_frsize;
  557|       |  __fsword_t f_flags;
  558|       |  __fsword_t f_spare[4];
  559|       |};
  560|       |struct exclude;
  561|       |struct exclude;
  562|       |struct patopts {
  563|       |  char const *pattern;
  564|       |  int options;
  565|       |};
  566|       |struct exclude {
  567|       |  struct patopts *exclude;
  568|       |  size_t exclude_alloc;
  569|       |  size_t exclude_count;
  570|       |};
  571|       |typedef unsigned int __socklen_t;
  572|       |typedef unsigned int uint32_t;
  573|       |typedef uint32_t in_addr_t;
  574|       |struct in_addr {
  575|       |  in_addr_t s_addr;
  576|       |};
  577|       |struct hostent {
  578|       |  char *h_name;
  579|       |  char **h_aliases;
  580|       |  int h_addrtype;
  581|       |  int h_length;
  582|       |  char **h_addr_list;
  583|       |};
  584|       |enum backup_type { none = 0, simple = 1, numbered_existing = 2, numbered = 3 };
  585|       |extern __attribute__((__nothrow__)) unsigned short const **(
  586|       |    __attribute__((__leaf__)) __ctype_b_loc)(void)__attribute__((__const__));
  587|       |extern __attribute__((__nothrow__)) int(
  588|       |    __attribute__((__nonnull__(1), __leaf__)) rpmatch)(char const *response);
  589|       |extern int getchar_unlocked(void);
  590|       |extern __attribute__((__nothrow__))
  591|       |uintmax_t(__attribute__((__leaf__)) strtoumax)(char const *__restrict __nptr,
  592|       |                                               char **__restrict __endptr,
  593|       |                                               int __base);
  594|       |extern __attribute__((__nothrow__, __noreturn__)) void(__attribute__((
  595|       |    __leaf__)) __assert_fail)(char const *__assertion, char const *__file,
  596|       |                              unsigned int __line, char const *__function);
  597|       |extern __attribute__((__nothrow__)) char *(
  598|       |    __attribute__((__nonnull__(1), __leaf__)) strchr)(char const *__s, int __c)
  599|       |    __attribute__((__pure__));
  600|       |extern __attribute__((__nothrow__)) int *(
  601|       |    __attribute__((__leaf__)) __errno_location)(void)__attribute__((__const__));
  602|       |extern __attribute__((__nothrow__)) unsigned long(__attribute__((
  603|       |    __nonnull__(1), __leaf__)) strtoul)(char const *__restrict __nptr,
  604|       |                                        char **__restrict __endptr, int __base);
  605|       |strtol_error xstrtoul(char const *s, char **ptr, int strtol_base,
  606|       |                      unsigned long *val, char const *valid_suffixes);
  607|      0|static strtol_error bkm_scale___0(unsigned long *x, int scale_factor) {
  608|       |
  609|      0|  {
  610|      0|    if (0xffffffffffffffffUL / (unsigned long)scale_factor < *x) {
  611|      0|      *x = 0xffffffffffffffffUL;
  612|      0|      return ((strtol_error)1);
  613|      0|    }
  614|      0|    *x *= (unsigned long)scale_factor;
  615|      0|    return ((strtol_error)0);
  616|      0|  }
  617|      0|}
  618|       |static strtol_error bkm_scale_by_power___0(unsigned long *x, int base,
  619|      0|                                           int power) {
  620|      0|  strtol_error err;
  621|      0|  strtol_error tmp;
  622|      0|  int tmp___0;
  623|       |
  624|      0|  {
  625|      0|    err = (strtol_error)0;
  626|      0|    {
  627|      0|      while (1) {
  628|      0|      while_continue: /* CIL Label */
  629|      0|          ;
  630|      0|        tmp___0 = power;
  631|      0|        power--;
  632|      0|        if (!tmp___0) {
  633|      0|          goto while_break;
  634|      0|        }
  635|      0|        {
  636|      0|          tmp = bkm_scale___0(x, base);
  637|      0|          err = (strtol_error)((unsigned int)err | (unsigned int)tmp);
  638|      0|        }
  639|      0|      }
  640|      0|    while_break___0: /* CIL Label */
  641|      0|        ;
  642|      0|    }
  643|      0|  while_break:;
  644|      0|    return (err);
  645|      0|  }
  646|      0|}
  647|       |strtol_error xstrtoul(char const *s, char **ptr, int strtol_base,
  648|      6|                      unsigned long *val, char const *valid_suffixes) {
  649|      6|  char *t_ptr;
  650|      6|  char **p;
  651|      6|  unsigned long tmp;
  652|      6|  strtol_error err;
  653|      6|  char const *q;
  654|      6|  unsigned short const **tmp___0;
  655|      6|  int *tmp___1;
  656|      6|  char *tmp___2;
  657|      6|  int *tmp___3;
  658|      6|  int *tmp___4;
  659|      6|  int base;
  660|      6|  int suffixes;
  661|      6|  strtol_error overflow;
  662|      6|  char *tmp___5;
  663|      6|  char *tmp___6;
  664|       |
  665|      6|  {
  666|      6|    err = (strtol_error)0;
  667|      6|    if (0 <= strtol_base) {
  668|      6|      if (!(strtol_base <= 36)) {
  669|      0|        {
  670|      0|          __assert_fail(
  671|      0|              "0 <= strtol_base && strtol_base <= 36",
  672|      0|              "/home/khheo/project/benchmark/coreutils-5.2.1/lib/xstrtol.c",
  673|      0|              117U, "xstrtoul");
  674|      0|        }
  675|      0|      }
  676|      6|    } else {
  677|      0|      {
  678|      0|        __assert_fail(
  679|      0|            "0 <= strtol_base && strtol_base <= 36",
  680|      0|            "/home/khheo/project/benchmark/coreutils-5.2.1/lib/xstrtol.c", 117U,
  681|      0|            "xstrtoul");
  682|      0|      }
  683|      0|    }
  684|      6|    if (ptr) {
  685|      0|      p = ptr;
  686|      6|    } else {
  687|      6|      p = &t_ptr;
  688|      6|    }
  689|      6|    q = s;
  690|      6|    {
  691|      6|      while (1) {
  692|      6|      while_continue: /* CIL Label */
  693|      6|          ;
  694|      6|        { tmp___0 = __ctype_b_loc(); }
  695|      6|        if (!((int const) * (*tmp___0 + (int)((unsigned char)*q)) & 8192)) {
  696|      6|          goto while_break;
  697|      6|        }
  698|      0|        q++;
  699|      0|      }
  700|      0|    while_break___0: /* CIL Label */
  701|      0|        ;
  702|      0|    }
  703|      6|  while_break:;
  704|      6|    if ((int const) * q == 45) {
  705|      0|      return ((strtol_error)4);
  706|      0|    }
  707|      6|    {
  708|      6|      tmp___1 = __errno_location();
  709|      6|      *tmp___1 = 0;
  710|      6|      tmp = strtoul((char const * /* __restrict  */)s,
  711|      6|                    (char ** /* __restrict  */)p, strtol_base);
  712|      6|    }
  713|      6|    if ((unsigned long)*p == (unsigned long)s) {
  714|      0|      if (valid_suffixes) {
  715|      0|        if (*(*p)) {
  716|      0|          {
  717|      0|            tmp___2 = strchr(valid_suffixes, (int)*(*p));
  718|      0|          }
  719|      0|          if (tmp___2) {
  720|      0|            tmp = 1UL;
  721|      0|          } else {
  722|      0|            return ((strtol_error)4);
  723|      0|          }
  724|      0|        } else {
  725|      0|          return ((strtol_error)4);
  726|      0|        }
  727|      0|      } else {
  728|      0|        return ((strtol_error)4);
  729|      0|      }
  730|      6|    } else {
  731|      6|      { tmp___4 = __errno_location(); }
  732|      6|      if (*tmp___4 != 0) {
  733|      0|        {
  734|      0|          tmp___3 = __errno_location();
  735|      0|        }
  736|      0|        if (*tmp___3 != 34) {
  737|      0|          return ((strtol_error)4);
  738|      0|        }
  739|      0|        err = (strtol_error)1;
  740|      0|      }
  741|      6|    }
  742|      6|    if (!valid_suffixes) {
  743|      0|      *val = tmp;
  744|      0|      return (err);
  745|      0|    }
  746|      6|    if ((int)*(*p) != 0) {
  747|      0|      {
  748|      0|        base = 1024;
  749|      0|        suffixes = 1;
  750|      0|        tmp___5 = strchr(valid_suffixes, (int)*(*p));
  751|      0|      }
  752|      0|      if (!tmp___5) {
  753|      0|        *val = tmp;
  754|      0|        return ((strtol_error)((unsigned int)err | 2U));
  755|      0|      }
  756|      0|      { tmp___6 = strchr(valid_suffixes, '0'); }
  757|      0|      if (tmp___6) {
  758|      0|        if ((int)*(*(p + 0) + 1) == 105) {
  759|      0|          goto case_105;
  760|      0|        }
  761|      0|        if ((int)*(*(p + 0) + 1) == 68) {
  762|      0|          goto case_68;
  763|      0|        }
  764|      0|        if ((int)*(*(p + 0) + 1) == 66) {
  765|      0|          goto case_68;
  766|      0|        }
  767|      0|        goto switch_break;
  768|      0|      case_105:
  769|      0|        if ((int)*(*(p + 0) + 2) == 66) {
  770|      0|          suffixes += 2;
  771|      0|        }
  772|      0|        goto switch_break;
  773|      0|      case_68:
  774|      0|        base = 1000;
  775|      0|        suffixes++;
  776|      0|        goto switch_break;
  777|      0|      switch_break:;
  778|      0|      }
  779|      0|      if ((int)*(*p) == 98) {
  780|      0|        goto case_98;
  781|      0|      }
  782|      0|      if ((int)*(*p) == 66) {
  783|      0|        goto case_66___0;
  784|      0|      }
  785|      0|      if ((int)*(*p) == 99) {
  786|      0|        goto case_99;
  787|      0|      }
  788|      0|      if ((int)*(*p) == 69) {
  789|      0|        goto case_69;
  790|      0|      }
  791|      0|      if ((int)*(*p) == 103) {
  792|      0|        goto case_103;
  793|      0|      }
  794|      0|      if ((int)*(*p) == 71) {
  795|      0|        goto case_103;
  796|      0|      }
  797|      0|      if ((int)*(*p) == 75) {
  798|      0|        goto case_75;
  799|      0|      }
  800|      0|      if ((int)*(*p) == 107) {
  801|      0|        goto case_75;
  802|      0|      }
  803|      0|      if ((int)*(*p) == 109) {
  804|      0|        goto case_109;
  805|      0|      }
  806|      0|      if ((int)*(*p) == 77) {
  807|      0|        goto case_109;
  808|      0|      }
  809|      0|      if ((int)*(*p) == 80) {
  810|      0|        goto case_80;
  811|      0|      }
  812|      0|      if ((int)*(*p) == 116) {
  813|      0|        goto case_116;
  814|      0|      }
  815|      0|      if ((int)*(*p) == 84) {
  816|      0|        goto case_116;
  817|      0|      }
  818|      0|      if ((int)*(*p) == 119) {
  819|      0|        goto case_119;
  820|      0|      }
  821|      0|      if ((int)*(*p) == 89) {
  822|      0|        goto case_89;
  823|      0|      }
  824|      0|      if ((int)*(*p) == 90) {
  825|      0|        goto case_90;
  826|      0|      }
  827|      0|      goto switch_default;
  828|      0|    case_98: { overflow = bkm_scale___0(&tmp, 512); }
  829|      0|      goto switch_break___0;
  830|      0|    case_66___0: { overflow = bkm_scale___0(&tmp, 1024); }
  831|      0|      goto switch_break___0;
  832|      0|    case_99:
  833|      0|      overflow = (strtol_error)0;
  834|      0|      goto switch_break___0;
  835|      0|    case_69: { overflow = bkm_scale_by_power___0(&tmp, base, 6); }
  836|      0|      goto switch_break___0;
  837|      0|    case_103: { overflow = bkm_scale_by_power___0(&tmp, base, 3); }
  838|      0|      goto switch_break___0;
  839|      0|    case_75: { overflow = bkm_scale_by_power___0(&tmp, base, 1); }
  840|      0|      goto switch_break___0;
  841|      0|    case_109: { overflow = bkm_scale_by_power___0(&tmp, base, 2); }
  842|      0|      goto switch_break___0;
  843|      0|    case_80: { overflow = bkm_scale_by_power___0(&tmp, base, 5); }
  844|      0|      goto switch_break___0;
  845|      0|    case_116: { overflow = bkm_scale_by_power___0(&tmp, base, 4); }
  846|      0|      goto switch_break___0;
  847|      0|    case_119: { overflow = bkm_scale___0(&tmp, 2); }
  848|      0|      goto switch_break___0;
  849|      0|    case_89: { overflow = bkm_scale_by_power___0(&tmp, base, 8); }
  850|      0|      goto switch_break___0;
  851|      0|    case_90: { overflow = bkm_scale_by_power___0(&tmp, base, 7); }
  852|      0|      goto switch_break___0;
  853|      0|    switch_default:
  854|      0|      *val = tmp;
  855|      0|      return ((strtol_error)((unsigned int)err | 2U));
  856|      0|    switch_break___0:
  857|      0|      err = (strtol_error)((unsigned int)err | (unsigned int)overflow);
  858|      0|      *p += suffixes;
  859|      0|      if (*(*p)) {
  860|      0|        err = (strtol_error)((unsigned int)err | 2U);
  861|      0|      }
  862|      0|    }
  863|      6|    *val = tmp;
  864|      6|    return (err);
  865|      6|  }
  866|      6|}
  867|       |extern __attribute__((__nothrow__)) long(__attribute__((
  868|       |    __nonnull__(1), __leaf__)) strtol)(char const *__restrict __nptr,
  869|       |                                       char **__restrict __endptr, int __base);
  870|       |extern __attribute__((__nothrow__))
  871|       |intmax_t(__attribute__((__leaf__)) strtoimax)(char const *__restrict __nptr,
  872|       |                                              char **__restrict __endptr,
  873|       |                                              int __base);
  874|       |extern __attribute__((__nothrow__)) char *(__attribute__((
  875|       |    __nonnull__(1), __leaf__)) strndup)(char const *__string, size_t __n)
  876|       |    __attribute__((__malloc__));
  877|       |__attribute__((__noreturn__)) void xalloc_die(void);
  878|       |extern __attribute__((__nothrow__))
  879|       |size_t(__attribute__((__nonnull__(1), __leaf__)) strlen)(char const *__s)
  880|       |    __attribute__((__pure__));
  881|       |__attribute__((__nothrow__)) void(__attribute__((__leaf__)) rpl_free)(void *p);
  882|       |extern __attribute__((__nothrow__))
  883|       |ssize_t(__attribute__((__nonnull__(1, 2), __leaf__)) readlink)(
  884|       |    char const *__restrict __path, char *__restrict __buf, size_t __len);
  885|       |void *xmalloc(size_t n);
  886|       |extern int nanosleep(struct timespec const *__requested_time,
  887|       |                     struct timespec *__remaining);
  888|       |extern __attribute__((__nothrow__)) char *(__attribute__((__leaf__)) gettext)(
  889|       |    char const *__msgid) __attribute__((__format_arg__(1)));
  890|       |extern void error(int __status, int __errnum, char const *__format, ...);
  891|       |int volatile exit_failure;
  892|       |void (*xalloc_fail_func)(void);
  893|       |char const xalloc_msg_memory_exhausted[17];
  894|       |void *xrealloc(void *p, size_t n);
  895|       |extern __attribute__((__nothrow__)) void *(__attribute__((__leaf__)) malloc)(
  896|       |    size_t __size) __attribute__((__malloc__));
  897|       |extern __attribute__((__nothrow__)) void *(__attribute__((__leaf__)) calloc)(
  898|       |    size_t __nmemb, size_t __size) __attribute__((__malloc__));
  899|       |extern __attribute__((__nothrow__)) void *(__attribute__((
  900|       |    __warn_unused_result__, __leaf__)) realloc)(void *__ptr, size_t __size);
  901|       |extern
  902|       |    __attribute__((__nothrow__,
  903|       |                   __noreturn__)) void(__attribute__((__leaf__)) abort)(void);
  904|       |extern __attribute__((__nothrow__)) void *(__attribute__((__nonnull__(1, 2),
  905|       |                                                          __leaf__)) memcpy)(
  906|       |    void *__restrict __dest, void const *__restrict __src, size_t __n);
  907|       |extern __attribute__((__nothrow__)) void *(__attribute__((
  908|       |    __nonnull__(1), __leaf__)) memset)(void *__s, int __c, size_t __n);
  909|       |void (*xalloc_fail_func)(void) = (void (*)(void))0;
  910|       |char const xalloc_msg_memory_exhausted[17] = {
  911|       |    (char const)'m',   (char const)'e', (char const)'m', (char const)'o',
  912|       |    (char const)'r',   (char const)'y', (char const)' ', (char const)'e',
  913|       |    (char const)'x',   (char const)'h', (char const)'a', (char const)'u',
  914|       |    (char const)'s',   (char const)'t', (char const)'e', (char const)'d',
  915|       |    (char const)'\000'};
  916|       |__attribute__((__noreturn__)) void xalloc_die(void);
  917|      0|void xalloc_die(void) {
  918|      0|  char *tmp;
  919|       |
  920|      0|  {
  921|      0|    if (xalloc_fail_func) {
  922|      0|      {
  923|      0|        (*xalloc_fail_func)();
  924|      0|      }
  925|      0|    }
  926|      0|    {
  927|      0|      tmp = gettext(xalloc_msg_memory_exhausted);
  928|      0|      error((int)exit_failure, 0, "%s", tmp);
  929|      0|      abort();
  930|      0|    }
  931|      0|  }
  932|      0|}
  933|      0|__inline static void *xnmalloc_inline(size_t n, size_t s) {
  934|      0|  void *p;
  935|      0|  int tmp;
  936|       |
  937|      0|  {
  938|      0|    if (sizeof(ptrdiff_t) <= sizeof(size_t)) {
  939|      0|      tmp = -1;
  940|      0|    } else {
  941|      0|      tmp = -2;
  942|      0|    }
  943|      0|    if ((size_t)tmp / s < n) {
  944|      0|      {
  945|      0|        xalloc_die();
  946|      0|      }
  947|      0|    } else {
  948|      0|      { p = malloc(n * s); }
  949|      0|      if (!p) {
  950|      0|        {
  951|      0|          xalloc_die();
  952|      0|        }
  953|      0|      }
  954|      0|    }
  955|      0|    return (p);
  956|      0|  }
  957|      0|}
  958|      0|void *xmalloc(size_t n) {
  959|      0|  void *tmp;
  960|       |
  961|      0|  {
  962|      0|    { tmp = xnmalloc_inline(n, (size_t)1); }
  963|      0|    return (tmp);
  964|      0|  }
  965|      0|}
  966|      0|__inline static void *xnrealloc_inline(void *p, size_t n, size_t s) {
  967|      0|  int tmp;
  968|       |
  969|      0|  {
  970|      0|    if (sizeof(ptrdiff_t) <= sizeof(size_t)) {
  971|      0|      tmp = -1;
  972|      0|    } else {
  973|      0|      tmp = -2;
  974|      0|    }
  975|      0|    if ((size_t)tmp / s < n) {
  976|      0|      {
  977|      0|        xalloc_die();
  978|      0|      }
  979|      0|    } else {
  980|      0|      { p = realloc(p, n * s); }
  981|      0|      if (!p) {
  982|      0|        {
  983|      0|          xalloc_die();
  984|      0|        }
  985|      0|      }
  986|      0|    }
  987|      0|    return (p);
  988|      0|  }
  989|      0|}
  990|      0|void *xrealloc(void *p, size_t n) {
  991|      0|  void *tmp;
  992|       |
  993|      0|  {
  994|      0|    { tmp = xnrealloc_inline(p, n, (size_t)1); }
  995|      0|    return (tmp);
  996|      0|  }
  997|      0|}
  998|       |extern int gethostname();
  999|       |__attribute__((__nothrow__)) char *(__attribute__((__leaf__)) rpl_getcwd)(
 1000|       |    char *buf, size_t size);
 1001|       |char *xgetcwd(void);
 1002|      0|char *xgetcwd(void) {
 1003|      0|  char *cwd;
 1004|      0|  char *tmp;
 1005|      0|  int *tmp___0;
 1006|       |
 1007|      0|  {
 1008|      0|    {
 1009|      0|      tmp = rpl_getcwd((char *)((void *)0), (size_t)0);
 1010|      0|      cwd = tmp;
 1011|      0|    }
 1012|      0|    if (!cwd) {
 1013|      0|      {
 1014|      0|        tmp___0 = __errno_location();
 1015|      0|      }
 1016|      0|      if (*tmp___0 == 12) {
 1017|      0|        {
 1018|      0|          xalloc_die();
 1019|      0|        }
 1020|      0|      }
 1021|      0|    }
 1022|      0|    return (cwd);
 1023|      0|  }
 1024|      0|}
 1025|       |char const *quote(char const *name);
 1026|       |extern int fprintf(FILE *__restrict __stream, char const *__restrict __format,
 1027|       |                   ...);
 1028|       |extern int vfprintf(FILE *__restrict __s, char const *__restrict __format,
 1029|       |                    __gnuc_va_list __arg);
 1030|       |extern int putc_unlocked(int __c, FILE *__stream);
 1031|       |extern int fputs_unlocked(char const *__restrict __s,
 1032|       |                          FILE *__restrict __stream);
 1033|       |char const *version_etc_copyright;
 1034|       |void version_etc_va(FILE *stream, char const *command_name, char const *package,
 1035|       |                    char const *version, va_list authors);
 1036|       |void version_etc(FILE *stream, char const *command_name, char const *package,
 1037|       |                 char const *version, ...);
 1038|       |char const *version_etc_copyright =
 1039|       |    "Copyright (C) 2004 Free Software Foundation, Inc.";
 1040|       |void version_etc_va(FILE *stream, char const *command_name, char const *package,
 1041|      0|                    char const *version, va_list authors) {
 1042|      0|  unsigned int n_authors;
 1043|      0|  va_list tmp_authors;
 1044|      0|  char const *tmp___0;
 1045|      0|  char *tmp___1;
 1046|      0|  char *tmp___2;
 1047|      0|  char *tmp___3;
 1048|      0|  char *tmp___4;
 1049|      0|  char *tmp___5;
 1050|      0|  char *tmp___6;
 1051|      0|  char *tmp___7;
 1052|      0|  char *tmp___8;
 1053|      0|  char *tmp___9;
 1054|      0|  char *tmp___10;
 1055|      0|  char *tmp___11;
 1056|      0|  char *__cil_tmp20;
 1057|      0|  char *__cil_tmp21;
 1058|      0|  char *__cil_tmp22;
 1059|      0|  char *__cil_tmp23;
 1060|      0|  char *__cil_tmp24;
 1061|      0|  char *__cil_tmp25;
 1062|      0|  char *__cil_tmp26;
 1063|      0|  char *__cil_tmp27;
 1064|      0|  char *__cil_tmp28;
 1065|      0|  char *__cil_tmp29;
 1066|      0|  char *__cil_tmp30;
 1067|       |
 1068|      0|  {
 1069|      0|    {
 1070|      0|      __builtin_va_copy(tmp_authors, authors);
 1071|      0|      n_authors = 0U;
 1072|      0|    }
 1073|      0|    {
 1074|      0|      while (1) {
 1075|      0|      while_continue: /* CIL Label */
 1076|      0|          ;
 1077|      0|        { tmp___0 = __builtin_va_arg(tmp_authors, char const *); }
 1078|      0|        if (!((unsigned long)tmp___0 != (unsigned long)((void *)0))) {
 1079|      0|          goto while_break;
 1080|      0|        }
 1081|      0|        n_authors++;
 1082|      0|      }
 1083|      0|    while_break___0: /* CIL Label */
 1084|      0|        ;
 1085|      0|    }
 1086|      0|  while_break:;
 1087|      0|    if (command_name) {
 1088|      0|      {
 1089|      0|        fprintf((FILE * /* __restrict  */)stream,
 1090|      0|                (char const * /* __restrict  */) "%s (%s) %s\n", command_name,
 1091|      0|                package, version);
 1092|      0|      }
 1093|      0|    } else {
 1094|      0|      {
 1095|      0|        fprintf((FILE * /* __restrict  */)stream,
 1096|      0|                (char const * /* __restrict  */) "%s %s\n", package, version);
 1097|      0|      }
 1098|      0|    }
 1099|      0|    if (n_authors == 0U) {
 1100|      0|      goto case_0;
 1101|      0|    }
 1102|      0|    if (n_authors == 1U) {
 1103|      0|      goto case_1;
 1104|      0|    }
 1105|      0|    if (n_authors == 2U) {
 1106|      0|      goto case_2;
 1107|      0|    }
 1108|      0|    if (n_authors == 3U) {
 1109|      0|      goto case_3;
 1110|      0|    }
 1111|      0|    if (n_authors == 4U) {
 1112|      0|      goto case_4;
 1113|      0|    }
 1114|      0|    if (n_authors == 5U) {
 1115|      0|      goto case_5;
 1116|      0|    }
 1117|      0|    if (n_authors == 6U) {
 1118|      0|      goto case_6;
 1119|      0|    }
 1120|      0|    if (n_authors == 7U) {
 1121|      0|      goto case_7;
 1122|      0|    }
 1123|      0|    if (n_authors == 8U) {
 1124|      0|      goto case_8;
 1125|      0|    }
 1126|      0|    if (n_authors == 9U) {
 1127|      0|      goto case_9;
 1128|      0|    }
 1129|      0|    goto switch_default;
 1130|      0|  case_0: { abort(); }
 1131|      0|  case_1: {
 1132|      0|    tmp___1 = gettext("Written by %s.\n");
 1133|      0|    vfprintf((FILE * /* __restrict  */)stream,
 1134|      0|             (char const * /* __restrict  */)((char const *)tmp___1), authors);
 1135|      0|  }
 1136|      0|    goto switch_break;
 1137|      0|  case_2: {
 1138|      0|    tmp___2 = gettext("Written by %s and %s.\n");
 1139|      0|    vfprintf((FILE * /* __restrict  */)stream,
 1140|      0|             (char const * /* __restrict  */)((char const *)tmp___2), authors);
 1141|      0|  }
 1142|      0|    goto switch_break;
 1143|      0|  case_3: {
 1144|      0|    tmp___3 = gettext("Written by %s, %s, and %s.\n");
 1145|      0|    vfprintf((FILE * /* __restrict  */)stream,
 1146|      0|             (char const * /* __restrict  */)((char const *)tmp___3), authors);
 1147|      0|  }
 1148|      0|    goto switch_break;
 1149|      0|  case_4: {
 1150|      0|    tmp___4 = gettext("Written by %s, %s, %s,\nand %s.\n");
 1151|      0|    vfprintf((FILE * /* __restrict  */)stream,
 1152|      0|             (char const * /* __restrict  */)((char const *)tmp___4), authors);
 1153|      0|  }
 1154|      0|    goto switch_break;
 1155|      0|  case_5: {
 1156|      0|    tmp___5 = gettext("Written by %s, %s, %s,\n%s, and %s.\n");
 1157|      0|    vfprintf((FILE * /* __restrict  */)stream,
 1158|      0|             (char const * /* __restrict  */)((char const *)tmp___5), authors);
 1159|      0|  }
 1160|      0|    goto switch_break;
 1161|      0|  case_6: {
 1162|      0|    tmp___6 = gettext("Written by %s, %s, %s,\n%s, %s, and %s.\n");
 1163|      0|    vfprintf((FILE * /* __restrict  */)stream,
 1164|      0|             (char const * /* __restrict  */)((char const *)tmp___6), authors);
 1165|      0|  }
 1166|      0|    goto switch_break;
 1167|      0|  case_7: {
 1168|      0|    tmp___7 = gettext("Written by %s, %s, %s,\n%s, %s, %s, and %s.\n");
 1169|      0|    vfprintf((FILE * /* __restrict  */)stream,
 1170|      0|             (char const * /* __restrict  */)((char const *)tmp___7), authors);
 1171|      0|  }
 1172|      0|    goto switch_break;
 1173|      0|  case_8: {
 1174|      0|    tmp___8 = gettext("Written by %s, %s, %s,\n%s, %s, %s, %s,\nand %s.\n");
 1175|      0|    vfprintf((FILE * /* __restrict  */)stream,
 1176|      0|             (char const * /* __restrict  */)((char const *)tmp___8), authors);
 1177|      0|  }
 1178|      0|    goto switch_break;
 1179|      0|  case_9: {
 1180|      0|    tmp___9 = gettext("Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, and %s.\n");
 1181|      0|    vfprintf((FILE * /* __restrict  */)stream,
 1182|      0|             (char const * /* __restrict  */)((char const *)tmp___9), authors);
 1183|      0|  }
 1184|      0|    goto switch_break;
 1185|      0|  switch_default: {
 1186|      0|    tmp___10 = gettext(
 1187|      0|        "Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, %s, and others.\n");
 1188|      0|    vfprintf((FILE * /* __restrict  */)stream,
 1189|      0|             (char const * /* __restrict  */)((char const *)tmp___10), authors);
 1190|      0|  }
 1191|      0|    goto switch_break;
 1192|      0|  switch_break: {
 1193|      0|    __builtin_va_end(authors);
 1194|      0|    putc_unlocked('\n', stream);
 1195|      0|    fputs_unlocked((char const * /* __restrict  */)version_etc_copyright,
 1196|      0|                   (FILE * /* __restrict  */)stream);
 1197|      0|    putc_unlocked('\n', stream);
 1198|      0|    tmp___11 =
 1199|      0|        gettext("This is free software; see the source for copying conditions. "
 1200|      0|                " There is NO\nwarranty; not even for MERCHANTABILITY or "
 1201|      0|                "FITNESS FOR A PARTICULAR PURPOSE.\n");
 1202|      0|    fputs_unlocked((char const * /* __restrict  */)((char const *)tmp___11),
 1203|      0|                   (FILE * /* __restrict  */)stream);
 1204|      0|  }
 1205|      0|    return;
 1206|      0|  }
 1207|      0|}
 1208|       |void version_etc(FILE *stream, char const *command_name, char const *package,
 1209|      0|                 char const *version, ...) {
 1210|      0|  va_list authors;
 1211|       |
 1212|      0|  {
 1213|      0|    {
 1214|      0|      __builtin_va_start(authors, version);
 1215|      0|      version_etc_va(stream, command_name, package, version, authors);
 1216|      0|    }
 1217|      0|    return;
 1218|      0|  }
 1219|      0|}
 1220|       |extern __attribute__((__nothrow__)) int
 1221|       |snprintf(char *__restrict __s, size_t __maxlen, char const *__restrict __format,
 1222|       |         ...);
 1223|       |extern __attribute__((__nothrow__)) int(__attribute__((
 1224|       |    __nonnull__(1), __leaf__)) utimes)(char const *__file,
 1225|       |                                       struct timeval const *__tvp);
 1226|       |extern __attribute__((__nothrow__)) int
 1227|       |sprintf(char *__restrict __s, char const *__restrict __format, ...);
 1228|       |extern void endpwent(void);
 1229|       |extern struct passwd *getpwnam(char const *__name);
 1230|       |extern void endgrent(void);
 1231|       |extern struct group *getgrgid(__gid_t __gid);
 1232|       |extern struct group *getgrnam(char const *__name);
 1233|       |extern __attribute__((__nothrow__)) char *(__attribute__((
 1234|       |    __nonnull__(1, 2), __leaf__)) strcpy)(char *__restrict __dest,
 1235|       |                                          char const *__restrict __src);
 1236|       |extern __attribute__((__nothrow__)) char *(
 1237|       |    __attribute__((__nonnull__(1), __leaf__)) strdup)(char const *__s)
 1238|       |    __attribute__((__malloc__));
 1239|       |static char const *E_invalid_user = "invalid user";
 1240|       |static char const *E_invalid_group = "invalid group";
 1241|       |static char const *E_bad_spec = "cannot get the login group of a numeric UID";
 1242|       |static char const *E_cannot_omit_both = "cannot omit both user and group";
 1243|       |extern size_t fwrite(void const *__restrict __ptr, size_t __size, size_t __n,
 1244|       |                     FILE *__restrict __s);
 1245|       |extern __attribute__((__nothrow__)) int(__attribute__((
 1246|       |    __nonnull__(1, 2), __leaf__)) strcmp)(char const *__s1, char const *__s2)
 1247|       |    __attribute__((__pure__));
 1248|       |extern iconv_t iconv_open(char const *__tocode, char const *__fromcode);
 1249|       |extern size_t iconv(iconv_t __cd, char **__restrict __inbuf,
 1250|       |                    size_t *__restrict __inbytesleft,
 1251|       |                    char **__restrict __outbuf,
 1252|       |                    size_t *__restrict __outbytesleft);
 1253|       |static int initialized;
 1254|       |static int is_utf8;
 1255|       |static iconv_t utf8_to_local;
 1256|       |extern __attribute__((__nothrow__)) struct tm *(
 1257|       |    __attribute__((__leaf__)) gmtime)(time_t const *__timer);
 1258|       |extern __attribute__((__nothrow__)) struct tm *(
 1259|       |    __attribute__((__leaf__)) localtime)(time_t const *__timer);
 1260|       |extern __attribute__((__nothrow__)) char *(__attribute__((__leaf__)) asctime)(
 1261|       |    struct tm const *__tp);
 1262|       |extern __attribute__((__nothrow__)) char *(__attribute__((__leaf__)) ctime)(
 1263|       |    time_t const *__timer);
 1264|       |char *base_name(char const *name);
 1265|       |size_t base_len(char const *name);
 1266|       |int strip_trailing_slashes(char *path);
 1267|      0|int strip_trailing_slashes(char *path) {
 1268|      0|  char *base;
 1269|      0|  char *tmp;
 1270|      0|  char *base_lim;
 1271|      0|  size_t tmp___0;
 1272|      0|  int had_slash;
 1273|       |
 1274|      0|  {
 1275|      0|    {
 1276|      0|      tmp = base_name((char const *)path);
 1277|      0|      base = tmp;
 1278|      0|      tmp___0 = base_len((char const *)base);
 1279|      0|      base_lim = base + tmp___0;
 1280|      0|      had_slash = (int)*base_lim;
 1281|      0|      *base_lim = (char)'\000';
 1282|      0|    }
 1283|      0|    return (had_slash);
 1284|      0|  }
 1285|      0|}
 1286|       |extern __attribute__((__nothrow__)) int(__attribute__((__leaf__)) tolower)(
 1287|       |    int __c);
 1288|       |extern __attribute__((__nothrow__)) int(__attribute__((__leaf__)) toupper)(
 1289|       |    int __c);
 1290|       |extern __attribute__((__nothrow__)) size_t(__attribute__((__leaf__)) strftime)(
 1291|       |    char *__restrict __s, size_t __maxsize, char const *__restrict __format,
 1292|       |    struct tm const *__restrict __tp);
 1293|       |extern __attribute__((__nothrow__)) int(__attribute__((__leaf__)) mbsinit)(
 1294|       |    mbstate_t const *__ps) __attribute__((__pure__));
 1295|       |extern __attribute__((__nothrow__))
 1296|       |size_t(__attribute__((__leaf__)) mbrlen)(char const *__restrict __s, size_t __n,
 1297|       |                                         mbstate_t *__restrict __ps);
 1298|       |static mbstate_t const mbstate_zero;
 1299|       |extern __attribute__((__nothrow__)) int(
 1300|       |    __attribute__((__leaf__)) __libc_current_sigrtmin)(void);
 1301|       |extern __attribute__((__nothrow__)) int(
 1302|       |    __attribute__((__leaf__)) __libc_current_sigrtmax)(void);
 1303|       |extern __attribute__((__nothrow__)) int(__attribute__((__nonnull__(1, 2),
 1304|       |                                                       __leaf__)) strncmp)(
 1305|       |    char const *__s1, char const *__s2, size_t __n) __attribute__((__pure__));
 1306|       |static struct numname numname_table[35] = {
 1307|       |    {1,
 1308|       |     {(char const)'H', (char const)'U', (char const)'P', (char const)'\000'}},
 1309|       |    {2,
 1310|       |     {(char const)'I', (char const)'N', (char const)'T', (char const)'\000'}},
 1311|       |    {3,
 1312|       |     {(char const)'Q', (char const)'U', (char const)'I', (char const)'T',
 1313|       |      (char const)'\000'}},
 1314|       |    {4,
 1315|       |     {(char const)'I', (char const)'L', (char const)'L', (char const)'\000'}},
 1316|       |    {5,
 1317|       |     {(char const)'T', (char const)'R', (char const)'A', (char const)'P',
 1318|       |      (char const)'\000'}},
 1319|       |    {6,
 1320|       |     {(char const)'A', (char const)'B', (char const)'R', (char const)'T',
 1321|       |      (char const)'\000'}},
 1322|       |    {8,
 1323|       |     {(char const)'F', (char const)'P', (char const)'E', (char const)'\000'}},
 1324|       |    {9,
 1325|       |     {(char const)'K', (char const)'I', (char const)'L', (char const)'L',
 1326|       |      (char const)'\000'}},
 1327|       |    {7,
 1328|       |     {(char const)'B', (char const)'U', (char const)'S', (char const)'\000'}},
 1329|       |    {11,
 1330|       |     {(char const)'S', (char const)'E', (char const)'G', (char const)'V',
 1331|       |      (char const)'\000'}},
 1332|       |    {13,
 1333|       |     {(char const)'P', (char const)'I', (char const)'P', (char const)'E',
 1334|       |      (char const)'\000'}},
 1335|       |    {14,
 1336|       |     {(char const)'A', (char const)'L', (char const)'R', (char const)'M',
 1337|       |      (char const)'\000'}},
 1338|       |    {15,
 1339|       |     {(char const)'T', (char const)'E', (char const)'R', (char const)'M',
 1340|       |      (char const)'\000'}},
 1341|       |    {10,
 1342|       |     {(char const)'U', (char const)'S', (char const)'R', (char const)'1',
 1343|       |      (char const)'\000'}},
 1344|       |    {12,
 1345|       |     {(char const)'U', (char const)'S', (char const)'R', (char const)'2',
 1346|       |      (char const)'\000'}},
 1347|       |    {17,
 1348|       |     {(char const)'C', (char const)'H', (char const)'L', (char const)'D',
 1349|       |      (char const)'\000'}},
 1350|       |    {23,
 1351|       |     {(char const)'U', (char const)'R', (char const)'G', (char const)'\000'}},
 1352|       |    {19,
 1353|       |     {(char const)'S', (char const)'T', (char const)'O', (char const)'P',
 1354|       |      (char const)'\000'}},
 1355|       |    {20,
 1356|       |     {(char const)'T', (char const)'S', (char const)'T', (char const)'P',
 1357|       |      (char const)'\000'}},
 1358|       |    {18,
 1359|       |     {(char const)'C', (char const)'O', (char const)'N', (char const)'T',
 1360|       |      (char const)'\000'}},
 1361|       |    {21,
 1362|       |     {(char const)'T', (char const)'T', (char const)'I', (char const)'N',
 1363|       |      (char const)'\000'}},
 1364|       |    {22,
 1365|       |     {(char const)'T', (char const)'T', (char const)'O', (char const)'U',
 1366|       |      (char const)'\000'}},
 1367|       |    {31,
 1368|       |     {(char const)'S', (char const)'Y', (char const)'S', (char const)'\000'}},
 1369|       |    {29,
 1370|       |     {(char const)'P', (char const)'O', (char const)'L', (char const)'L',
 1371|       |      (char const)'\000'}},
 1372|       |    {26,
 1373|       |     {(char const)'V', (char const)'T', (char const)'A', (char const)'L',
 1374|       |      (char const)'R', (char const)'M', (char const)'\000'}},
 1375|       |    {27,
 1376|       |     {(char const)'P', (char const)'R', (char const)'O', (char const)'F',
 1377|       |      (char const)'\000'}},
 1378|       |    {24,
 1379|       |     {(char const)'X', (char const)'C', (char const)'P', (char const)'U',
 1380|       |      (char const)'\000'}},
 1381|       |    {25,
 1382|       |     {(char const)'X', (char const)'F', (char const)'S', (char const)'Z',
 1383|       |      (char const)'\000'}},
 1384|       |    {6,
 1385|       |     {(char const)'I', (char const)'O', (char const)'T', (char const)'\000'}},
 1386|       |    {17,
 1387|       |     {(char const)'C', (char const)'L', (char const)'D', (char const)'\000'}},
 1388|       |    {30,
 1389|       |     {(char const)'P', (char const)'W', (char const)'R', (char const)'\000'}},
 1390|       |    {28,
 1391|       |     {(char const)'W', (char const)'I', (char const)'N', (char const)'C',
 1392|       |      (char const)'H', (char const)'\000'}},
 1393|       |    {29, {(char const)'I', (char const)'O', (char const)'\000'}},
 1394|       |    {16,
 1395|       |     {(char const)'S', (char const)'T', (char const)'K', (char const)'F',
 1396|       |      (char const)'L', (char const)'T', (char const)'\000'}},
 1397|       |    {0,
 1398|       |     {(char const)'E', (char const)'X', (char const)'I', (char const)'T',
 1399|       |      (char const)'\000'}}};
 1400|       |extern size_t fread_unlocked(void *__restrict __ptr, size_t __size, size_t __n,
 1401|       |                             FILE *__restrict __stream);
 1402|       |extern __attribute__((__nothrow__)) int(
 1403|       |    __attribute__((__leaf__)) feof_unlocked)(FILE *__stream);
 1404|       |extern __attribute__((__nothrow__)) int(
 1405|       |    __attribute__((__leaf__)) ferror_unlocked)(FILE *__stream);
 1406|       |static unsigned char const fillbuf[64] = {(unsigned char const)128,
 1407|       |                                          (unsigned char const)0};
 1408|       |extern __attribute__((__nothrow__)) int(__attribute__((__leaf__)) settimeofday)(
 1409|       |    struct timeval const *__tv, struct timezone const *__tz);
 1410|       |extern
 1411|       |    __attribute__((__nothrow__)) int(__attribute__((__leaf__)) clock_settime)(
 1412|       |        clockid_t __clock_id, struct timespec const *__tp);
 1413|       |extern DIR *(__attribute__((__nonnull__(1))) opendir)(char const *__name);
 1414|       |extern int(__attribute__((__nonnull__(1))) closedir)(DIR *__dirp);
 1415|       |extern struct dirent *(__attribute__((__nonnull__(1))) readdir)(DIR *__dirp);
 1416|       |extern int close(int __fd);
 1417|       |extern __attribute__((__nothrow__)) int(
 1418|       |    __attribute__((__nonnull__(1), __leaf__)) chdir)(char const *__path);
 1419|       |extern __attribute__((__nothrow__)) int(__attribute__((__leaf__)) fchdir)(
 1420|       |    int __fd);
 1421|       |extern int(__attribute__((__nonnull__(1))) open)(char const *__file,
 1422|       |                                                 int __oflag, ...);
 1423|       |int save_cwd(struct saved_cwd *cwd);
 1424|       |int restore_cwd(struct saved_cwd const *cwd);
 1425|       |void free_cwd(struct saved_cwd *cwd);
 1426|       |static int have_working_fchdir = 1;
 1427|      0|int save_cwd(struct saved_cwd *cwd) {
 1428|       |
 1429|      0|  {
 1430|      0|    cwd->desc = -1;
 1431|      0|    cwd->name = (char *)((void *)0);
 1432|      0|    if (have_working_fchdir) {
 1433|      0|      {
 1434|      0|        cwd->desc = open(".", 65536);
 1435|      0|      }
 1436|      0|      if (cwd->desc < 0) {
 1437|      0|        return (1);
 1438|      0|      }
 1439|      0|    }
 1440|      0|    if (!have_working_fchdir) {
 1441|      0|      {
 1442|      0|        cwd->name = xgetcwd();
 1443|      0|      }
 1444|      0|      if ((unsigned long)cwd->name == (unsigned long)((void *)0)) {
 1445|      0|        return (1);
 1446|      0|      }
 1447|      0|    }
 1448|      0|    return (0);
 1449|      0|  }
 1450|      0|}
 1451|      0|int restore_cwd(struct saved_cwd const *cwd) {
 1452|      0|  int tmp;
 1453|      0|  int tmp___0;
 1454|       |
 1455|      0|  {
 1456|      0|    if (0 <= (int)cwd->desc) {
 1457|      0|      {
 1458|      0|        tmp = fchdir((int)cwd->desc);
 1459|      0|      }
 1460|      0|      return (tmp < 0);
 1461|      0|    } else {
 1462|      0|      { tmp___0 = chdir((char const *)cwd->name); }
 1463|      0|      return (tmp___0 < 0);
 1464|      0|    }
 1465|      0|  }
 1466|      0|}
 1467|      0|void free_cwd(struct saved_cwd *cwd) {
 1468|       |
 1469|      0|  {
 1470|      0|    if (cwd->desc >= 0) {
 1471|      0|      {
 1472|      0|        close(cwd->desc);
 1473|      0|      }
 1474|      0|    }
 1475|      0|    if (cwd->name) {
 1476|      0|      {
 1477|      0|        rpl_free((void *)cwd->name);
 1478|      0|      }
 1479|      0|    }
 1480|      0|    return;
 1481|      0|  }
 1482|      0|}
 1483|       |extern __attribute__((__nothrow__)) int(__attribute__((
 1484|       |    __nonnull__(1, 2), __leaf__)) stat)(char const *__restrict __file,
 1485|       |                                        struct stat *__restrict __buf);
 1486|       |extern __attribute__((__nothrow__)) int(__attribute__((
 1487|       |    __nonnull__(1, 2), __leaf__)) memcmp)(void const *__s1, void const *__s2,
 1488|       |                                          size_t __n) __attribute__((__pure__));
 1489|       |int same_name(char const *source, char const *dest);
 1490|       |char *dir_name(char const *path);
 1491|      0|int same_name(char const *source, char const *dest) {
 1492|      0|  char const *source_basename;
 1493|      0|  char *tmp;
 1494|      0|  char const *dest_basename;
 1495|      0|  char *tmp___0;
 1496|      0|  size_t source_baselen;
 1497|      0|  size_t tmp___1;
 1498|      0|  size_t dest_baselen;
 1499|      0|  size_t tmp___2;
 1500|      0|  _Bool identical_basenames;
 1501|      0|  int tmp___3;
 1502|      0|  int tmp___4;
 1503|      0|  _Bool compare_dirs;
 1504|      0|  _Bool same;
 1505|      0|  struct stat source_dir_stats;
 1506|      0|  struct stat dest_dir_stats;
 1507|      0|  char *source_dirname;
 1508|      0|  char *dest_dirname;
 1509|      0|  int *tmp___5;
 1510|      0|  int tmp___6;
 1511|      0|  int *tmp___7;
 1512|      0|  int tmp___8;
 1513|      0|  int tmp___9;
 1514|      0|  void *__cil_tmp25;
 1515|      0|  void *__cil_tmp26;
 1516|       |
 1517|      0|  {
 1518|      0|    {
 1519|      0|      tmp = base_name(source);
 1520|      0|      source_basename = (char const *)tmp;
 1521|      0|      tmp___0 = base_name(dest);
 1522|      0|      dest_basename = (char const *)tmp___0;
 1523|      0|      tmp___1 = base_len(source_basename);
 1524|      0|      source_baselen = tmp___1;
 1525|      0|      tmp___2 = base_len(dest_basename);
 1526|      0|      dest_baselen = tmp___2;
 1527|      0|    }
 1528|      0|    if (source_baselen == dest_baselen) {
 1529|      0|      {
 1530|      0|        tmp___3 = memcmp((void const *)source_basename,
 1531|      0|                         (void const *)dest_basename, dest_baselen);
 1532|      0|      }
 1533|      0|      if (tmp___3 == 0) {
 1534|      0|        tmp___4 = 1;
 1535|      0|      } else {
 1536|      0|        tmp___4 = 0;
 1537|      0|      }
 1538|      0|    } else {
 1539|      0|      tmp___4 = 0;
 1540|      0|    }
 1541|      0|    identical_basenames = (_Bool)tmp___4;
 1542|      0|    compare_dirs = identical_basenames;
 1543|      0|    same = (_Bool)0;
 1544|      0|    if (compare_dirs) {
 1545|      0|      {
 1546|      0|        source_dirname = dir_name(source);
 1547|      0|        dest_dirname = dir_name(dest);
 1548|      0|        tmp___6 =
 1549|      0|            stat((char const * /* __restrict  */)((char const *)source_dirname),
 1550|      0|                 (struct stat * /* __restrict  */)(&source_dir_stats));
 1551|      0|      }
 1552|      0|      if (tmp___6) {
 1553|      0|        {
 1554|      0|          tmp___5 = __errno_location();
 1555|      0|          error(1, *tmp___5, "%s", source_dirname);
 1556|      0|        }
 1557|      0|      }
 1558|      0|      {
 1559|      0|        tmp___8 =
 1560|      0|            stat((char const * /* __restrict  */)((char const *)dest_dirname),
 1561|      0|                 (struct stat * /* __restrict  */)(&dest_dir_stats));
 1562|      0|      }
 1563|      0|      if (tmp___8) {
 1564|      0|        {
 1565|      0|          tmp___7 = __errno_location();
 1566|      0|          error(1, *tmp___7, "%s", dest_dirname);
 1567|      0|        }
 1568|      0|      }
 1569|      0|      if (source_dir_stats.st_ino == dest_dir_stats.st_ino) {
 1570|      0|        if (source_dir_stats.st_dev == dest_dir_stats.st_dev) {
 1571|      0|          tmp___9 = 1;
 1572|      0|        } else {
 1573|      0|          tmp___9 = 0;
 1574|      0|        }
 1575|      0|      } else {
 1576|      0|        tmp___9 = 0;
 1577|      0|      }
 1578|      0|      {
 1579|      0|        same = (_Bool)tmp___9;
 1580|      0|        rpl_free((void *)source_dirname);
 1581|      0|        rpl_free((void *)dest_dirname);
 1582|      0|      }
 1583|      0|    }
 1584|      0|    return ((int)same);
 1585|      0|  }
 1586|      0|}
 1587|       |extern ssize_t write(int __fd, void const *__buf, size_t __n);
 1588|       |extern ssize_t read(int __fd, void *__buf, size_t __nbytes);
 1589|       |extern __attribute__((__nothrow__)) int(__attribute__((
 1590|       |    __nonnull__(1, 2), __leaf__)) lstat)(char const *__restrict __file,
 1591|       |                                         struct stat *__restrict __buf);
 1592|       |extern __attribute__((__nothrow__)) char *(__attribute__((__nonnull__(1, 2),
 1593|       |                                                          __leaf__)) strncpy)(
 1594|       |    char *__restrict __dest, char const *__restrict __src, size_t __n);
 1595|       |extern void setutxent(void);
 1596|       |extern void endutxent(void);
 1597|       |extern struct utmpx *getutxent(void);
 1598|       |extern int utmpxname(char const *__file);
 1599|       |extern int getc_unlocked(FILE *__stream);
 1600|       |static char const *saved_delim = (char const *)((void *)0);
 1601|       |static char isdelim[256];
 1602|       |char const *const quoting_style_args[8];
 1603|       |enum quoting_style const quoting_style_vals[7];
 1604|       |int set_char_quoting(struct quoting_options *o, char c, int i);
 1605|       |size_t quotearg_buffer(char *buffer, size_t buffersize, char const *arg,
 1606|       |                       size_t argsize, struct quoting_options const *o);
 1607|       |char *quotearg_n_style(int n, enum quoting_style s, char const *arg);
 1608|       |char *quotearg_char(char const *arg, char ch);
 1609|       |char *quotearg_colon(char const *arg);
 1610|       |extern __attribute__((__nothrow__))
 1611|       |size_t(__attribute__((__leaf__)) __ctype_get_mb_cur_max)(void);
 1612|       |extern __attribute__((__nothrow__)) size_t(__attribute__((__leaf__)) mbrtowc)(
 1613|       |    wchar_t *__restrict __pwc, char const *__restrict __s, size_t __n,
 1614|       |    mbstate_t *__restrict __p);
 1615|       |extern __attribute__((__nothrow__)) int(__attribute__((__leaf__)) iswprint)(
 1616|       |    wint_t __wc);
 1617|       |char const *const quoting_style_args[8] = {
 1618|       |    (char const * /* const  */) "literal",
 1619|       |    (char const * /* const  */) "shell",
 1620|       |    (char const * /* const  */) "shell-always",
 1621|       |    (char const * /* const  */) "c",
 1622|       |    (char const * /* const  */) "escape",
 1623|       |    (char const * /* const  */) "locale",
 1624|       |    (char const * /* const  */) "clocale",
 1625|       |    (char const * /* const  */)((char const *)0)};
 1626|       |enum quoting_style const quoting_style_vals[7] = {
 1627|       |    (enum quoting_style const)0, (enum quoting_style const)1,
 1628|       |    (enum quoting_style const)2, (enum quoting_style const)3,
 1629|       |    (enum quoting_style const)4, (enum quoting_style const)5,
 1630|       |    (enum quoting_style const)6};
 1631|       |static struct quoting_options default_quoting_options;
 1632|      0|int set_char_quoting(struct quoting_options *o, char c, int i) {
 1633|      0|  unsigned char uc;
 1634|      0|  int *p;
 1635|      0|  struct quoting_options *tmp;
 1636|      0|  int shift;
 1637|      0|  int r;
 1638|       |
 1639|      0|  {
 1640|      0|    uc = (unsigned char)c;
 1641|      0|    if (o) {
 1642|      0|      tmp = o;
 1643|      0|    } else {
 1644|      0|      tmp = &default_quoting_options;
 1645|      0|    }
 1646|      0|    p = tmp->quote_these_too + (unsigned long)uc / (sizeof(int) * 8UL);
 1647|      0|    shift = (int)((unsigned long)uc % (sizeof(int) * 8UL));
 1648|      0|    r = (*p >> shift) & 1;
 1649|      0|    *p ^= ((i & 1) ^ r) << shift;
 1650|      0|    return (r);
 1651|      0|  }
 1652|      0|}
 1653|      0|static char const *gettext_quote(char const *msgid, enum quoting_style s) {
 1654|      0|  char const *translation;
 1655|      0|  char *tmp;
 1656|      0|  char *__cil_tmp5;
 1657|       |
 1658|      0|  {
 1659|      0|    {
 1660|      0|      tmp = gettext(msgid);
 1661|      0|      translation = (char const *)tmp;
 1662|      0|    }
 1663|      0|    if ((unsigned long)translation == (unsigned long)msgid) {
 1664|      0|      if ((unsigned int)s == 6U) {
 1665|      0|        translation = "\"";
 1666|      0|      }
 1667|      0|    }
 1668|      0|    return (translation);
 1669|      0|  }
 1670|      0|}
 1671|       |static size_t quotearg_buffer_restyled(char *buffer, size_t buffersize,
 1672|       |                                       char const *arg, size_t argsize,
 1673|       |                                       enum quoting_style quoting_style,
 1674|      0|                                       struct quoting_options const *o) {
 1675|      0|  size_t i;
 1676|      0|  size_t len;
 1677|      0|  char const *quote_string;
 1678|      0|  size_t quote_string_len;
 1679|      0|  int backslash_escapes;
 1680|      0|  int unibyte_locale;
 1681|      0|  size_t tmp;
 1682|      0|  char const *left;
 1683|      0|  char const *tmp___0;
 1684|      0|  char const *right;
 1685|      0|  char const *tmp___1;
 1686|      0|  unsigned char c;
 1687|      0|  unsigned char esc;
 1688|      0|  int tmp___2;
 1689|      0|  size_t m;
 1690|      0|  int printable;
 1691|      0|  unsigned short const **tmp___3;
 1692|      0|  mbstate_t mbstate;
 1693|      0|  wchar_t w;
 1694|      0|  size_t bytes;
 1695|      0|  size_t tmp___4;
 1696|      0|  int tmp___5;
 1697|      0|  int tmp___6;
 1698|      0|  size_t ilim;
 1699|      0|  int tmp___7;
 1700|      0|  size_t tmp___8;
 1701|      0|  void *__cil_tmp33;
 1702|      0|  char *__cil_tmp34;
 1703|      0|  char *__cil_tmp35;
 1704|      0|  char *__cil_tmp36;
 1705|      0|  char *__cil_tmp37;
 1706|       |
 1707|      0|  {
 1708|      0|    {
 1709|      0|      len = (size_t)0;
 1710|      0|      quote_string = (char const *)0;
 1711|      0|      quote_string_len = (size_t)0;
 1712|      0|      backslash_escapes = 0;
 1713|      0|      tmp = __ctype_get_mb_cur_max();
 1714|      0|      unibyte_locale = tmp == 1UL;
 1715|      0|    }
 1716|      0|    if ((unsigned int)quoting_style == 3U) {
 1717|      0|      goto case_3;
 1718|      0|    }
 1719|      0|    if ((unsigned int)quoting_style == 4U) {
 1720|      0|      goto case_4;
 1721|      0|    }
 1722|      0|    if ((unsigned int)quoting_style == 6U) {
 1723|      0|      goto case_6;
 1724|      0|    }
 1725|      0|    if ((unsigned int)quoting_style == 5U) {
 1726|      0|      goto case_6;
 1727|      0|    }
 1728|      0|    if ((unsigned int)quoting_style == 2U) {
 1729|      0|      goto case_2;
 1730|      0|    }
 1731|      0|    goto switch_default;
 1732|      0|  case_3: {
 1733|      0|    while (1) {
 1734|      0|    while_continue: /* CIL Label */
 1735|      0|        ;
 1736|       |
 1737|      0|      if (len < buffersize) {
 1738|      0|        *(buffer + len) = (char)'\"';
 1739|      0|      }
 1740|      0|      len++;
 1741|      0|      goto while_break;
 1742|      0|    }
 1743|      0|  while_break___25: /* CIL Label */
 1744|      0|      ;
 1745|      0|  }
 1746|      0|  while_break:
 1747|      0|    backslash_escapes = 1;
 1748|      0|    quote_string = "\"";
 1749|      0|    quote_string_len = (size_t)1;
 1750|      0|    goto switch_break;
 1751|      0|  case_4:
 1752|      0|    backslash_escapes = 1;
 1753|      0|    goto switch_break;
 1754|      0|  case_6: {
 1755|      0|    tmp___0 = gettext_quote("`", quoting_style);
 1756|      0|    left = tmp___0;
 1757|      0|    tmp___1 = gettext_quote("\'", quoting_style);
 1758|      0|    right = tmp___1;
 1759|      0|    quote_string = left;
 1760|      0|  }
 1761|      0|    {
 1762|      0|      while (1) {
 1763|      0|      while_continue___0: /* CIL Label */
 1764|      0|          ;
 1765|       |
 1766|      0|        if (!*quote_string) {
 1767|      0|          goto while_break___0;
 1768|      0|        }
 1769|      0|        {
 1770|      0|          while (1) {
 1771|      0|          while_continue___1: /* CIL Label */
 1772|      0|              ;
 1773|       |
 1774|      0|            if (len < buffersize) {
 1775|      0|              *(buffer + len) = (char)*quote_string;
 1776|      0|            }
 1777|      0|            len++;
 1778|      0|            goto while_break___1;
 1779|      0|          }
 1780|      0|        while_break___27: /* CIL Label */
 1781|      0|            ;
 1782|      0|        }
 1783|      0|      while_break___1:
 1784|      0|        quote_string++;
 1785|      0|      }
 1786|      0|    while_break___26: /* CIL Label */
 1787|      0|        ;
 1788|      0|    }
 1789|      0|  while_break___0: {
 1790|      0|    backslash_escapes = 1;
 1791|      0|    quote_string = right;
 1792|      0|    quote_string_len = strlen(quote_string);
 1793|      0|  }
 1794|      0|    goto switch_break;
 1795|      0|  case_2: {
 1796|      0|    while (1) {
 1797|      0|    while_continue___2: /* CIL Label */
 1798|      0|        ;
 1799|       |
 1800|      0|      if (len < buffersize) {
 1801|      0|        *(buffer + len) = (char)'\'';
 1802|      0|      }
 1803|      0|      len++;
 1804|      0|      goto while_break___2;
 1805|      0|    }
 1806|      0|  while_break___28: /* CIL Label */
 1807|      0|      ;
 1808|      0|  }
 1809|      0|  while_break___2:
 1810|      0|    quote_string = "\'";
 1811|      0|    quote_string_len = (size_t)1;
 1812|      0|    goto switch_break;
 1813|      0|  switch_default:
 1814|      0|    goto switch_break;
 1815|      0|  switch_break:
 1816|      0|    i = (size_t)0;
 1817|      0|    {
 1818|      0|      while (1) {
 1819|      0|      while_continue___3: /* CIL Label */
 1820|      0|          ;
 1821|       |
 1822|      0|        if (argsize == 0xffffffffffffffffUL) {
 1823|      0|          tmp___7 = (int const) * (arg + i) == 0;
 1824|      0|        } else {
 1825|      0|          tmp___7 = i == argsize;
 1826|      0|        }
 1827|      0|        if (tmp___7) {
 1828|      0|          goto while_break___3;
 1829|      0|        }
 1830|      0|        if (backslash_escapes) {
 1831|      0|          if (quote_string_len) {
 1832|      0|            if (i + quote_string_len <= argsize) {
 1833|      0|              {
 1834|      0|                tmp___2 = memcmp((void const *)(arg + i),
 1835|      0|                                 (void const *)quote_string, quote_string_len);
 1836|      0|              }
 1837|      0|              if (tmp___2 == 0) {
 1838|      0|                {
 1839|      0|                  while (1) {
 1840|      0|                  while_continue___4: /* CIL Label */
 1841|      0|                      ;
 1842|       |
 1843|      0|                    if (len < buffersize) {
 1844|      0|                      *(buffer + len) = (char)'\\';
 1845|      0|                    }
 1846|      0|                    len++;
 1847|      0|                    goto while_break___4;
 1848|      0|                  }
 1849|      0|                while_break___30: /* CIL Label */
 1850|      0|                    ;
 1851|      0|                }
 1852|      0|              while_break___4:;
 1853|      0|              }
 1854|      0|            }
 1855|      0|          }
 1856|      0|        }
 1857|      0|        c = (unsigned char)*(arg + i);
 1858|      0|        if ((int)c == 0) {
 1859|      0|          goto case_0;
 1860|      0|        }
 1861|      0|        if ((int)c == 63) {
 1862|      0|          goto case_63;
 1863|      0|        }
 1864|      0|        if ((int)c == 7) {
 1865|      0|          goto case_7;
 1866|      0|        }
 1867|      0|        if ((int)c == 8) {
 1868|      0|          goto case_8;
 1869|      0|        }
 1870|      0|        if ((int)c == 12) {
 1871|      0|          goto case_12;
 1872|      0|        }
 1873|      0|        if ((int)c == 10) {
 1874|      0|          goto case_10;
 1875|      0|        }
 1876|      0|        if ((int)c == 13) {
 1877|      0|          goto case_13;
 1878|      0|        }
 1879|      0|        if ((int)c == 9) {
 1880|      0|          goto case_9;
 1881|      0|        }
 1882|      0|        if ((int)c == 11) {
 1883|      0|          goto case_11;
 1884|      0|        }
 1885|      0|        if ((int)c == 92) {
 1886|      0|          goto case_92;
 1887|      0|        }
 1888|      0|        if ((int)c == 126) {
 1889|      0|          goto case_126;
 1890|      0|        }
 1891|      0|        if ((int)c == 35) {
 1892|      0|          goto case_126;
 1893|      0|        }
 1894|      0|        if ((int)c == 124) {
 1895|      0|          goto case_124;
 1896|      0|        }
 1897|      0|        if ((int)c == 96) {
 1898|      0|          goto case_124;
 1899|      0|        }
 1900|      0|        if ((int)c == 94) {
 1901|      0|          goto case_124;
 1902|      0|        }
 1903|      0|        if ((int)c == 91) {
 1904|      0|          goto case_124;
 1905|      0|        }
 1906|      0|        if ((int)c == 62) {
 1907|      0|          goto case_124;
 1908|      0|        }
 1909|      0|        if ((int)c == 60) {
 1910|      0|          goto case_124;
 1911|      0|        }
 1912|      0|        if ((int)c == 59) {
 1913|      0|          goto case_124;
 1914|      0|        }
 1915|      0|        if ((int)c == 42) {
 1916|      0|          goto case_124;
 1917|      0|        }
 1918|      0|        if ((int)c == 41) {
 1919|      0|          goto case_124;
 1920|      0|        }
 1921|      0|        if ((int)c == 40) {
 1922|      0|          goto case_124;
 1923|      0|        }
 1924|      0|        if ((int)c == 38) {
 1925|      0|          goto case_124;
 1926|      0|        }
 1927|      0|        if ((int)c == 36) {
 1928|      0|          goto case_124;
 1929|      0|        }
 1930|      0|        if ((int)c == 34) {
 1931|      0|          goto case_124;
 1932|      0|        }
 1933|      0|        if ((int)c == 33) {
 1934|      0|          goto case_124;
 1935|      0|        }
 1936|      0|        if ((int)c == 32) {
 1937|      0|          goto case_124;
 1938|      0|        }
 1939|      0|        if ((int)c == 39) {
 1940|      0|          goto case_39___0;
 1941|      0|        }
 1942|      0|        if ((int)c == 125) {
 1943|      0|          goto case_125;
 1944|      0|        }
 1945|      0|        if ((int)c == 123) {
 1946|      0|          goto case_125;
 1947|      0|        }
 1948|      0|        if ((int)c == 122) {
 1949|      0|          goto case_125;
 1950|      0|        }
 1951|      0|        if ((int)c == 121) {
 1952|      0|          goto case_125;
 1953|      0|        }
 1954|      0|        if ((int)c == 120) {
 1955|      0|          goto case_125;
 1956|      0|        }
 1957|      0|        if ((int)c == 119) {
 1958|      0|          goto case_125;
 1959|      0|        }
 1960|      0|        if ((int)c == 118) {
 1961|      0|          goto case_125;
 1962|      0|        }
 1963|      0|        if ((int)c == 117) {
 1964|      0|          goto case_125;
 1965|      0|        }
 1966|      0|        if ((int)c == 116) {
 1967|      0|          goto case_125;
 1968|      0|        }
 1969|      0|        if ((int)c == 115) {
 1970|      0|          goto case_125;
 1971|      0|        }
 1972|      0|        if ((int)c == 114) {
 1973|      0|          goto case_125;
 1974|      0|        }
 1975|      0|        if ((int)c == 113) {
 1976|      0|          goto case_125;
 1977|      0|        }
 1978|      0|        if ((int)c == 112) {
 1979|      0|          goto case_125;
 1980|      0|        }
 1981|      0|        if ((int)c == 111) {
 1982|      0|          goto case_125;
 1983|      0|        }
 1984|      0|        if ((int)c == 110) {
 1985|      0|          goto case_125;
 1986|      0|        }
 1987|      0|        if ((int)c == 109) {
 1988|      0|          goto case_125;
 1989|      0|        }
 1990|      0|        if ((int)c == 108) {
 1991|      0|          goto case_125;
 1992|      0|        }
 1993|      0|        if ((int)c == 107) {
 1994|      0|          goto case_125;
 1995|      0|        }
 1996|      0|        if ((int)c == 106) {
 1997|      0|          goto case_125;
 1998|      0|        }
 1999|      0|        if ((int)c == 105) {
 2000|      0|          goto case_125;
 2001|      0|        }
 2002|      0|        if ((int)c == 104) {
 2003|      0|          goto case_125;
 2004|      0|        }
 2005|      0|        if ((int)c == 103) {
 2006|      0|          goto case_125;
 2007|      0|        }
 2008|      0|        if ((int)c == 102) {
 2009|      0|          goto case_125;
 2010|      0|        }
 2011|      0|        if ((int)c == 101) {
 2012|      0|          goto case_125;
 2013|      0|        }
 2014|      0|        if ((int)c == 100) {
 2015|      0|          goto case_125;
 2016|      0|        }
 2017|      0|        if ((int)c == 99) {
 2018|      0|          goto case_125;
 2019|      0|        }
 2020|      0|        if ((int)c == 98) {
 2021|      0|          goto case_125;
 2022|      0|        }
 2023|      0|        if ((int)c == 97) {
 2024|      0|          goto case_125;
 2025|      0|        }
 2026|      0|        if ((int)c == 95) {
 2027|      0|          goto case_125;
 2028|      0|        }
 2029|      0|        if ((int)c == 93) {
 2030|      0|          goto case_125;
 2031|      0|        }
 2032|      0|        if ((int)c == 90) {
 2033|      0|          goto case_125;
 2034|      0|        }
 2035|      0|        if ((int)c == 89) {
 2036|      0|          goto case_125;
 2037|      0|        }
 2038|      0|        if ((int)c == 88) {
 2039|      0|          goto case_125;
 2040|      0|        }
 2041|      0|        if ((int)c == 87) {
 2042|      0|          goto case_125;
 2043|      0|        }
 2044|      0|        if ((int)c == 86) {
 2045|      0|          goto case_125;
 2046|      0|        }
 2047|      0|        if ((int)c == 85) {
 2048|      0|          goto case_125;
 2049|      0|        }
 2050|      0|        if ((int)c == 84) {
 2051|      0|          goto case_125;
 2052|      0|        }
 2053|      0|        if ((int)c == 83) {
 2054|      0|          goto case_125;
 2055|      0|        }
 2056|      0|        if ((int)c == 82) {
 2057|      0|          goto case_125;
 2058|      0|        }
 2059|      0|        if ((int)c == 81) {
 2060|      0|          goto case_125;
 2061|      0|        }
 2062|      0|        if ((int)c == 80) {
 2063|      0|          goto case_125;
 2064|      0|        }
 2065|      0|        if ((int)c == 79) {
 2066|      0|          goto case_125;
 2067|      0|        }
 2068|      0|        if ((int)c == 78) {
 2069|      0|          goto case_125;
 2070|      0|        }
 2071|      0|        if ((int)c == 77) {
 2072|      0|          goto case_125;
 2073|      0|        }
 2074|      0|        if ((int)c == 76) {
 2075|      0|          goto case_125;
 2076|      0|        }
 2077|      0|        if ((int)c == 75) {
 2078|      0|          goto case_125;
 2079|      0|        }
 2080|      0|        if ((int)c == 74) {
 2081|      0|          goto case_125;
 2082|      0|        }
 2083|      0|        if ((int)c == 73) {
 2084|      0|          goto case_125;
 2085|      0|        }
 2086|      0|        if ((int)c == 72) {
 2087|      0|          goto case_125;
 2088|      0|        }
 2089|      0|        if ((int)c == 71) {
 2090|      0|          goto case_125;
 2091|      0|        }
 2092|      0|        if ((int)c == 70) {
 2093|      0|          goto case_125;
 2094|      0|        }
 2095|      0|        if ((int)c == 69) {
 2096|      0|          goto case_125;
 2097|      0|        }
 2098|      0|        if ((int)c == 68) {
 2099|      0|          goto case_125;
 2100|      0|        }
 2101|      0|        if ((int)c == 67) {
 2102|      0|          goto case_125;
 2103|      0|        }
 2104|      0|        if ((int)c == 66) {
 2105|      0|          goto case_125;
 2106|      0|        }
 2107|      0|        if ((int)c == 65) {
 2108|      0|          goto case_125;
 2109|      0|        }
 2110|      0|        if ((int)c == 61) {
 2111|      0|          goto case_125;
 2112|      0|        }
 2113|      0|        if ((int)c == 58) {
 2114|      0|          goto case_125;
 2115|      0|        }
 2116|      0|        if ((int)c == 57) {
 2117|      0|          goto case_125;
 2118|      0|        }
 2119|      0|        if ((int)c == 56) {
 2120|      0|          goto case_125;
 2121|      0|        }
 2122|      0|        if ((int)c == 55) {
 2123|      0|          goto case_125;
 2124|      0|        }
 2125|      0|        if ((int)c == 54) {
 2126|      0|          goto case_125;
 2127|      0|        }
 2128|      0|        if ((int)c == 53) {
 2129|      0|          goto case_125;
 2130|      0|        }
 2131|      0|        if ((int)c == 52) {
 2132|      0|          goto case_125;
 2133|      0|        }
 2134|      0|        if ((int)c == 51) {
 2135|      0|          goto case_125;
 2136|      0|        }
 2137|      0|        if ((int)c == 50) {
 2138|      0|          goto case_125;
 2139|      0|        }
 2140|      0|        if ((int)c == 49) {
 2141|      0|          goto case_125;
 2142|      0|        }
 2143|      0|        if ((int)c == 48) {
 2144|      0|          goto case_125;
 2145|      0|        }
 2146|      0|        if ((int)c == 47) {
 2147|      0|          goto case_125;
 2148|      0|        }
 2149|      0|        if ((int)c == 46) {
 2150|      0|          goto case_125;
 2151|      0|        }
 2152|      0|        if ((int)c == 45) {
 2153|      0|          goto case_125;
 2154|      0|        }
 2155|      0|        if ((int)c == 44) {
 2156|      0|          goto case_125;
 2157|      0|        }
 2158|      0|        if ((int)c == 43) {
 2159|      0|          goto case_125;
 2160|      0|        }
 2161|      0|        if ((int)c == 37) {
 2162|      0|          goto case_125;
 2163|      0|        }
 2164|      0|        goto switch_default___2;
 2165|      0|      case_0:
 2166|      0|        if (backslash_escapes) {
 2167|      0|          {
 2168|      0|            while (1) {
 2169|      0|            while_continue___5: /* CIL Label */
 2170|      0|                ;
 2171|       |
 2172|      0|              if (len < buffersize) {
 2173|      0|                *(buffer + len) = (char)'\\';
 2174|      0|              }
 2175|      0|              len++;
 2176|      0|              goto while_break___5;
 2177|      0|            }
 2178|      0|          while_break___31: /* CIL Label */
 2179|      0|              ;
 2180|      0|          }
 2181|      0|        while_break___5:;
 2182|      0|          {
 2183|      0|            while (1) {
 2184|      0|            while_continue___6: /* CIL Label */
 2185|      0|                ;
 2186|       |
 2187|      0|              if (len < buffersize) {
 2188|      0|                *(buffer + len) = (char)'0';
 2189|      0|              }
 2190|      0|              len++;
 2191|      0|              goto while_break___6;
 2192|      0|            }
 2193|      0|          while_break___32: /* CIL Label */
 2194|      0|              ;
 2195|      0|          }
 2196|      0|        while_break___6:;
 2197|      0|          {
 2198|      0|            while (1) {
 2199|      0|            while_continue___7: /* CIL Label */
 2200|      0|                ;
 2201|       |
 2202|      0|              if (len < buffersize) {
 2203|      0|                *(buffer + len) = (char)'0';
 2204|      0|              }
 2205|      0|              len++;
 2206|      0|              goto while_break___7;
 2207|      0|            }
 2208|      0|          while_break___33: /* CIL Label */
 2209|      0|              ;
 2210|      0|          }
 2211|      0|        while_break___7:
 2212|      0|          c = (unsigned char)'0';
 2213|      0|        }
 2214|      0|        goto switch_break___0;
 2215|      0|      case_63:
 2216|      0|        if ((unsigned int)quoting_style == 1U) {
 2217|      0|          goto case_1;
 2218|      0|        }
 2219|      0|        if ((unsigned int)quoting_style == 3U) {
 2220|      0|          goto case_3___0;
 2221|      0|        }
 2222|      0|        goto switch_default___0;
 2223|      0|      case_1:
 2224|      0|        goto use_shell_always_quoting_style;
 2225|      0|      case_3___0:
 2226|      0|        if (i + 2UL < argsize) {
 2227|      0|          if ((int const) * (arg + (i + 1UL)) == 63) {
 2228|      0|            if ((int const) * (arg + (i + 2UL)) == 62) {
 2229|      0|              goto case_62;
 2230|      0|            }
 2231|      0|            if ((int const) * (arg + (i + 2UL)) == 61) {
 2232|      0|              goto case_62;
 2233|      0|            }
 2234|      0|            if ((int const) * (arg + (i + 2UL)) == 60) {
 2235|      0|              goto case_62;
 2236|      0|            }
 2237|      0|            if ((int const) * (arg + (i + 2UL)) == 47) {
 2238|      0|              goto case_62;
 2239|      0|            }
 2240|      0|            if ((int const) * (arg + (i + 2UL)) == 45) {
 2241|      0|              goto case_62;
 2242|      0|            }
 2243|      0|            if ((int const) * (arg + (i + 2UL)) == 41) {
 2244|      0|              goto case_62;
 2245|      0|            }
 2246|      0|            if ((int const) * (arg + (i + 2UL)) == 40) {
 2247|      0|              goto case_62;
 2248|      0|            }
 2249|      0|            if ((int const) * (arg + (i + 2UL)) == 39) {
 2250|      0|              goto case_62;
 2251|      0|            }
 2252|      0|            if ((int const) * (arg + (i + 2UL)) == 33) {
 2253|      0|              goto case_62;
 2254|      0|            }
 2255|      0|            goto switch_break___2;
 2256|      0|          case_62:
 2257|      0|            c = (unsigned char)*(arg + (i + 2UL));
 2258|      0|            i += 2UL;
 2259|      0|            {
 2260|      0|              while (1) {
 2261|      0|              while_continue___8: /* CIL Label */
 2262|      0|                  ;
 2263|       |
 2264|      0|                if (len < buffersize) {
 2265|      0|                  *(buffer + len) = (char)'?';
 2266|      0|                }
 2267|      0|                len++;
 2268|      0|                goto while_break___8;
 2269|      0|              }
 2270|      0|            while_break___34: /* CIL Label */
 2271|      0|                ;
 2272|      0|            }
 2273|      0|          while_break___8:;
 2274|      0|            {
 2275|      0|              while (1) {
 2276|      0|              while_continue___9: /* CIL Label */
 2277|      0|                  ;
 2278|       |
 2279|      0|                if (len < buffersize) {
 2280|      0|                  *(buffer + len) = (char)'\\';
 2281|      0|                }
 2282|      0|                len++;
 2283|      0|                goto while_break___9;
 2284|      0|              }
 2285|      0|            while_break___35: /* CIL Label */
 2286|      0|                ;
 2287|      0|            }
 2288|      0|          while_break___9:;
 2289|      0|            {
 2290|      0|              while (1) {
 2291|      0|              while_continue___10: /* CIL Label */
 2292|      0|                  ;
 2293|       |
 2294|      0|                if (len < buffersize) {
 2295|      0|                  *(buffer + len) = (char)'?';
 2296|      0|                }
 2297|      0|                len++;
 2298|      0|                goto while_break___10;
 2299|      0|              }
 2300|      0|            while_break___36: /* CIL Label */
 2301|      0|                ;
 2302|      0|            }
 2303|      0|          while_break___10:;
 2304|      0|            goto switch_break___2;
 2305|      0|          switch_break___2:;
 2306|      0|          }
 2307|      0|        }
 2308|      0|        goto switch_break___1;
 2309|      0|      switch_default___0:
 2310|      0|        goto switch_break___1;
 2311|      0|      switch_break___1:;
 2312|      0|        goto switch_break___0;
 2313|      0|      case_7:
 2314|      0|        esc = (unsigned char)'a';
 2315|      0|        goto c_escape;
 2316|      0|      case_8:
 2317|      0|        esc = (unsigned char)'b';
 2318|      0|        goto c_escape;
 2319|      0|      case_12:
 2320|      0|        esc = (unsigned char)'f';
 2321|      0|        goto c_escape;
 2322|      0|      case_10:
 2323|      0|        esc = (unsigned char)'n';
 2324|      0|        goto c_and_shell_escape;
 2325|      0|      case_13:
 2326|      0|        esc = (unsigned char)'r';
 2327|      0|        goto c_and_shell_escape;
 2328|      0|      case_9:
 2329|      0|        esc = (unsigned char)'t';
 2330|      0|        goto c_and_shell_escape;
 2331|      0|      case_11:
 2332|      0|        esc = (unsigned char)'v';
 2333|      0|        goto c_escape;
 2334|      0|      case_92:
 2335|      0|        esc = c;
 2336|      0|        goto c_and_shell_escape;
 2337|      0|      c_and_shell_escape:
 2338|      0|        if ((unsigned int)quoting_style == 1U) {
 2339|      0|          goto use_shell_always_quoting_style;
 2340|      0|        }
 2341|      0|      c_escape:
 2342|      0|        if (backslash_escapes) {
 2343|      0|          c = esc;
 2344|      0|          goto store_escape;
 2345|      0|        }
 2346|      0|        goto switch_break___0;
 2347|      0|      case_126:
 2348|      0|        if (i != 0UL) {
 2349|      0|          goto switch_break___0;
 2350|      0|        }
 2351|      0|      case_124:
 2352|      0|        if ((unsigned int)quoting_style == 1U) {
 2353|      0|          goto use_shell_always_quoting_style;
 2354|      0|        }
 2355|      0|        goto switch_break___0;
 2356|      0|      case_39___0:
 2357|      0|        if ((unsigned int)quoting_style == 1U) {
 2358|      0|          goto case_1___0;
 2359|      0|        }
 2360|      0|        if ((unsigned int)quoting_style == 2U) {
 2361|      0|          goto case_2___0;
 2362|      0|        }
 2363|      0|        goto switch_default___1;
 2364|      0|      case_1___0:
 2365|      0|        goto use_shell_always_quoting_style;
 2366|      0|      case_2___0: {
 2367|      0|        while (1) {
 2368|      0|        while_continue___11: /* CIL Label */
 2369|      0|            ;
 2370|       |
 2371|      0|          if (len < buffersize) {
 2372|      0|            *(buffer + len) = (char)'\'';
 2373|      0|          }
 2374|      0|          len++;
 2375|      0|          goto while_break___11;
 2376|      0|        }
 2377|      0|      while_break___37: /* CIL Label */
 2378|      0|          ;
 2379|      0|      }
 2380|      0|      while_break___11:;
 2381|      0|        {
 2382|      0|          while (1) {
 2383|      0|          while_continue___12: /* CIL Label */
 2384|      0|              ;
 2385|       |
 2386|      0|            if (len < buffersize) {
 2387|      0|              *(buffer + len) = (char)'\\';
 2388|      0|            }
 2389|      0|            len++;
 2390|      0|            goto while_break___12;
 2391|      0|          }
 2392|      0|        while_break___38: /* CIL Label */
 2393|      0|            ;
 2394|      0|        }
 2395|      0|      while_break___12:;
 2396|      0|        {
 2397|      0|          while (1) {
 2398|      0|          while_continue___13: /* CIL Label */
 2399|      0|              ;
 2400|       |
 2401|      0|            if (len < buffersize) {
 2402|      0|              *(buffer + len) = (char)'\'';
 2403|      0|            }
 2404|      0|            len++;
 2405|      0|            goto while_break___13;
 2406|      0|          }
 2407|      0|        while_break___39: /* CIL Label */
 2408|      0|            ;
 2409|      0|        }
 2410|      0|      while_break___13:;
 2411|      0|        goto switch_break___3;
 2412|      0|      switch_default___1:
 2413|      0|        goto switch_break___3;
 2414|      0|      switch_break___3:;
 2415|      0|        goto switch_break___0;
 2416|      0|      case_125:
 2417|      0|        goto switch_break___0;
 2418|      0|      switch_default___2:
 2419|      0|        if (unibyte_locale) {
 2420|      0|          {
 2421|      0|            m = (size_t)1;
 2422|      0|            tmp___3 = __ctype_b_loc();
 2423|      0|            printable = (int)((int const) * (*tmp___3 + (int)c) & 16384);
 2424|      0|          }
 2425|      0|        } else {
 2426|      0|          {
 2427|      0|            memset((void *)(&mbstate), 0, sizeof(mbstate));
 2428|      0|            m = (size_t)0;
 2429|      0|            printable = 1;
 2430|      0|          }
 2431|      0|          if (argsize == 0xffffffffffffffffUL) {
 2432|      0|            {
 2433|      0|              argsize = strlen(arg);
 2434|      0|            }
 2435|      0|          }
 2436|      0|          {
 2437|      0|            while (1) {
 2438|      0|            while_continue___14: /* CIL Label */
 2439|      0|                ;
 2440|      0|              {
 2441|      0|                tmp___4 =
 2442|      0|                    mbrtowc((wchar_t * /* __restrict  */)(&w),
 2443|      0|                            (char const * /* __restrict  */)(arg + (i + m)),
 2444|      0|                            argsize - (i + m),
 2445|      0|                            (mbstate_t * /* __restrict  */)(&mbstate));
 2446|      0|                bytes = tmp___4;
 2447|      0|              }
 2448|      0|              if (bytes == 0UL) {
 2449|      0|                goto while_break___14;
 2450|      0|              } else {
 2451|      0|                if (bytes == 0xffffffffffffffffUL) {
 2452|      0|                  printable = 0;
 2453|      0|                  goto while_break___14;
 2454|      0|                } else {
 2455|      0|                  if (bytes == 0xfffffffffffffffeUL) {
 2456|      0|                    printable = 0;
 2457|      0|                    {
 2458|      0|                      while (1) {
 2459|      0|                      while_continue___15: /* CIL Label */
 2460|      0|                          ;
 2461|       |
 2462|      0|                        if (i + m < argsize) {
 2463|      0|                          if (!*(arg + (i + m))) {
 2464|      0|                            goto while_break___15;
 2465|      0|                          }
 2466|      0|                        } else {
 2467|      0|                          goto while_break___15;
 2468|      0|                        }
 2469|      0|                        m++;
 2470|      0|                      }
 2471|      0|                    while_break___41: /* CIL Label */
 2472|      0|                        ;
 2473|      0|                    }
 2474|      0|                  while_break___15:;
 2475|      0|                    goto while_break___14;
 2476|      0|                  } else {
 2477|      0|                    { tmp___5 = iswprint((wint_t)w); }
 2478|      0|                    if (!tmp___5) {
 2479|      0|                      printable = 0;
 2480|      0|                    }
 2481|      0|                    m += bytes;
 2482|      0|                  }
 2483|      0|                }
 2484|      0|              }
 2485|      0|              { tmp___6 = mbsinit((mbstate_t const *)(&mbstate)); }
 2486|      0|              if (tmp___6) {
 2487|      0|                goto while_break___14;
 2488|      0|              }
 2489|      0|            }
 2490|      0|          while_break___40: /* CIL Label */
 2491|      0|              ;
 2492|      0|          }
 2493|      0|        while_break___14:;
 2494|      0|        }
 2495|      0|        if (1UL < m) {
 2496|      0|          goto _L;
 2497|      0|        } else {
 2498|      0|          if (backslash_escapes) {
 2499|      0|            if (!printable) {
 2500|      0|            _L:
 2501|      0|              ilim = i + m;
 2502|      0|              {
 2503|      0|                while (1) {
 2504|      0|                while_continue___16: /* CIL Label */
 2505|      0|                    ;
 2506|       |
 2507|      0|                  if (backslash_escapes) {
 2508|      0|                    if (!printable) {
 2509|      0|                      {
 2510|      0|                        while (1) {
 2511|      0|                        while_continue___17: /* CIL Label */
 2512|      0|                            ;
 2513|       |
 2514|      0|                          if (len < buffersize) {
 2515|      0|                            *(buffer + len) = (char)'\\';
 2516|      0|                          }
 2517|      0|                          len++;
 2518|      0|                          goto while_break___17;
 2519|      0|                        }
 2520|      0|                      while_break___43: /* CIL Label */
 2521|      0|                          ;
 2522|      0|                      }
 2523|      0|                    while_break___17:;
 2524|      0|                      {
 2525|      0|                        while (1) {
 2526|      0|                        while_continue___18: /* CIL Label */
 2527|      0|                            ;
 2528|       |
 2529|      0|                          if (len < buffersize) {
 2530|      0|                            *(buffer + len) = (char)(48 + ((int)c >> 6));
 2531|      0|                          }
 2532|      0|                          len++;
 2533|      0|                          goto while_break___18;
 2534|      0|                        }
 2535|      0|                      while_break___44: /* CIL Label */
 2536|      0|                          ;
 2537|      0|                      }
 2538|      0|                    while_break___18:;
 2539|      0|                      {
 2540|      0|                        while (1) {
 2541|      0|                        while_continue___19: /* CIL Label */
 2542|      0|                            ;
 2543|       |
 2544|      0|                          if (len < buffersize) {
 2545|      0|                            *(buffer + len) = (char)(48 + (((int)c >> 3) & 7));
 2546|      0|                          }
 2547|      0|                          len++;
 2548|      0|                          goto while_break___19;
 2549|      0|                        }
 2550|      0|                      while_break___45: /* CIL Label */
 2551|      0|                          ;
 2552|      0|                      }
 2553|      0|                    while_break___19:
 2554|      0|                      c = (unsigned char)(48 + ((int)c & 7));
 2555|      0|                    }
 2556|      0|                  }
 2557|      0|                  if (ilim <= i + 1UL) {
 2558|      0|                    goto while_break___16;
 2559|      0|                  }
 2560|      0|                  {
 2561|      0|                    while (1) {
 2562|      0|                    while_continue___20: /* CIL Label */
 2563|      0|                        ;
 2564|       |
 2565|      0|                      if (len < buffersize) {
 2566|      0|                        *(buffer + len) = (char)c;
 2567|      0|                      }
 2568|      0|                      len++;
 2569|      0|                      goto while_break___20;
 2570|      0|                    }
 2571|      0|                  while_break___46: /* CIL Label */
 2572|      0|                      ;
 2573|      0|                  }
 2574|      0|                while_break___20:
 2575|      0|                  i++;
 2576|      0|                  c = (unsigned char)*(arg + i);
 2577|      0|                }
 2578|      0|              while_break___42: /* CIL Label */
 2579|      0|                  ;
 2580|      0|              }
 2581|      0|            while_break___16:;
 2582|      0|              goto store_c;
 2583|      0|            }
 2584|      0|          }
 2585|      0|        }
 2586|      0|      switch_break___0:;
 2587|      0|        if (backslash_escapes) {
 2588|      0|          if (!(o->quote_these_too[(unsigned long)c / (sizeof(int) * 8UL)] &
 2589|      0|                (1 << (unsigned long)c % (sizeof(int) * 8UL)))) {
 2590|      0|            goto store_c;
 2591|      0|          }
 2592|      0|        } else {
 2593|      0|          goto store_c;
 2594|      0|        }
 2595|      0|      store_escape: {
 2596|      0|        while (1) {
 2597|      0|        while_continue___21: /* CIL Label */
 2598|      0|            ;
 2599|       |
 2600|      0|          if (len < buffersize) {
 2601|      0|            *(buffer + len) = (char)'\\';
 2602|      0|          }
 2603|      0|          len++;
 2604|      0|          goto while_break___21;
 2605|      0|        }
 2606|      0|      while_break___47: /* CIL Label */
 2607|      0|          ;
 2608|      0|      }
 2609|      0|      while_break___21:;
 2610|      0|      store_c: {
 2611|      0|        while (1) {
 2612|      0|        while_continue___22: /* CIL Label */
 2613|      0|            ;
 2614|       |
 2615|      0|          if (len < buffersize) {
 2616|      0|            *(buffer + len) = (char)c;
 2617|      0|          }
 2618|      0|          len++;
 2619|      0|          goto while_break___22;
 2620|      0|        }
 2621|      0|      while_break___48: /* CIL Label */
 2622|      0|          ;
 2623|      0|      }
 2624|      0|      while_break___22:
 2625|      0|        i++;
 2626|      0|      }
 2627|      0|    while_break___29: /* CIL Label */
 2628|      0|        ;
 2629|      0|    }
 2630|      0|  while_break___3:;
 2631|      0|    if (quote_string) {
 2632|      0|      {
 2633|      0|        while (1) {
 2634|      0|        while_continue___23: /* CIL Label */
 2635|      0|            ;
 2636|       |
 2637|      0|          if (!*quote_string) {
 2638|      0|            goto while_break___23;
 2639|      0|          }
 2640|      0|          {
 2641|      0|            while (1) {
 2642|      0|            while_continue___24: /* CIL Label */
 2643|      0|                ;
 2644|       |
 2645|      0|              if (len < buffersize) {
 2646|      0|                *(buffer + len) = (char)*quote_string;
 2647|      0|              }
 2648|      0|              len++;
 2649|      0|              goto while_break___24;
 2650|      0|            }
 2651|      0|          while_break___50: /* CIL Label */
 2652|      0|              ;
 2653|      0|          }
 2654|      0|        while_break___24:
 2655|      0|          quote_string++;
 2656|      0|        }
 2657|      0|      while_break___49: /* CIL Label */
 2658|      0|          ;
 2659|      0|      }
 2660|      0|    while_break___23:;
 2661|      0|    }
 2662|      0|    if (len < buffersize) {
 2663|      0|      *(buffer + len) = (char)'\000';
 2664|      0|    }
 2665|      0|    return (len);
 2666|      0|  use_shell_always_quoting_style: {
 2667|      0|    tmp___8 = quotearg_buffer_restyled(buffer, buffersize, arg, argsize,
 2668|      0|                                       (enum quoting_style)2, o);
 2669|      0|  }
 2670|      0|    return (tmp___8);
 2671|      0|  }
 2672|      0|}
 2673|       |size_t quotearg_buffer(char *buffer, size_t buffersize, char const *arg,
 2674|      0|                       size_t argsize, struct quoting_options const *o) {
 2675|      0|  struct quoting_options const *p;
 2676|      0|  struct quoting_options const *tmp;
 2677|      0|  int e;
 2678|      0|  int *tmp___0;
 2679|      0|  size_t r;
 2680|      0|  size_t tmp___1;
 2681|      0|  int *tmp___2;
 2682|       |
 2683|      0|  {
 2684|      0|    if (o) {
 2685|      0|      tmp = o;
 2686|      0|    } else {
 2687|      0|      tmp = (struct quoting_options const *)(&default_quoting_options);
 2688|      0|    }
 2689|      0|    {
 2690|      0|      p = tmp;
 2691|      0|      tmp___0 = __errno_location();
 2692|      0|      e = *tmp___0;
 2693|      0|      tmp___1 = quotearg_buffer_restyled(buffer, buffersize, arg, argsize,
 2694|      0|                                         (enum quoting_style)p->style, p);
 2695|      0|      r = tmp___1;
 2696|      0|      tmp___2 = __errno_location();
 2697|      0|      *tmp___2 = e;
 2698|      0|    }
 2699|      0|    return (r);
 2700|      0|  }
 2701|      0|}
 2702|       |static char slot0[256];
 2703|       |static char *quotearg_n_options(int n, char const *arg, size_t argsize,
 2704|       |                                struct quoting_options const *options);
 2705|       |static unsigned int nslots = 1U;
 2706|       |static struct slotvec slotvec0 = {sizeof(slot0), slot0};
 2707|       |static struct slotvec *slotvec = &slotvec0;
 2708|       |static char *quotearg_n_options(int n, char const *arg, size_t argsize,
 2709|      0|                                struct quoting_options const *options) {
 2710|      0|  int e;
 2711|      0|  int *tmp;
 2712|      0|  unsigned int n0;
 2713|      0|  unsigned int n1;
 2714|      0|  int tmp___0;
 2715|      0|  void *tmp___1;
 2716|      0|  void *tmp___2;
 2717|      0|  size_t size;
 2718|      0|  char *val;
 2719|      0|  size_t qsize;
 2720|      0|  size_t tmp___3;
 2721|      0|  void *tmp___4;
 2722|      0|  int *tmp___5;
 2723|       |
 2724|      0|  {
 2725|      0|    {
 2726|      0|      tmp = __errno_location();
 2727|      0|      e = *tmp;
 2728|      0|      n0 = (unsigned int)n;
 2729|      0|    }
 2730|      0|    if (n < 0) {
 2731|      0|      {
 2732|      0|        abort();
 2733|      0|      }
 2734|      0|    }
 2735|      0|    if (nslots <= n0) {
 2736|      0|      n1 = n0 + 1U;
 2737|      0|      if (sizeof(ptrdiff_t) <= sizeof(size_t)) {
 2738|      0|        tmp___0 = -1;
 2739|      0|      } else {
 2740|      0|        tmp___0 = -2;
 2741|      0|      }
 2742|      0|      if ((size_t)tmp___0 / sizeof(*slotvec) < (size_t)n1) {
 2743|      0|        {
 2744|      0|          xalloc_die();
 2745|      0|        }
 2746|      0|      }
 2747|      0|      if ((unsigned long)slotvec == (unsigned long)(&slotvec0)) {
 2748|      0|        {
 2749|      0|          tmp___1 = xmalloc(sizeof(*slotvec));
 2750|      0|          slotvec = (struct slotvec *)tmp___1;
 2751|      0|          *slotvec = slotvec0;
 2752|      0|        }
 2753|      0|      }
 2754|      0|      {
 2755|      0|        tmp___2 =
 2756|      0|            xrealloc((void *)slotvec, (unsigned long)n1 * sizeof(*slotvec));
 2757|      0|        slotvec = (struct slotvec *)tmp___2;
 2758|      0|        memset((void *)(slotvec + nslots), 0,
 2759|      0|               (unsigned long)(n1 - nslots) * sizeof(*slotvec));
 2760|      0|        nslots = n1;
 2761|      0|      }
 2762|      0|    }
 2763|      0|    {
 2764|      0|      size = (slotvec + n)->size;
 2765|      0|      val = (slotvec + n)->val;
 2766|      0|      tmp___3 = quotearg_buffer(val, size, arg, argsize, options);
 2767|      0|      qsize = tmp___3;
 2768|      0|    }
 2769|      0|    if (size <= qsize) {
 2770|      0|      size = qsize + 1UL;
 2771|      0|      (slotvec + n)->size = size;
 2772|      0|      if ((unsigned long)val != (unsigned long)(slot0)) {
 2773|      0|        {
 2774|      0|          rpl_free((void *)val);
 2775|      0|        }
 2776|      0|      }
 2777|      0|      {
 2778|      0|        tmp___4 = xmalloc(size);
 2779|      0|        val = (char *)tmp___4;
 2780|      0|        (slotvec + n)->val = val;
 2781|      0|        quotearg_buffer(val, size, arg, argsize, options);
 2782|      0|      }
 2783|      0|    }
 2784|      0|    {
 2785|      0|      tmp___5 = __errno_location();
 2786|      0|      *tmp___5 = e;
 2787|      0|    }
 2788|      0|    return (val);
 2789|      0|  }
 2790|      0|}
 2791|       |static struct quoting_options
 2792|      0|quoting_options_from_style(enum quoting_style style) {
 2793|      0|  struct quoting_options o;
 2794|      0|  void *__cil_tmp3;
 2795|       |
 2796|      0|  {
 2797|      0|    {
 2798|      0|      o.style = style;
 2799|      0|      memset((void *)(o.quote_these_too), 0, sizeof(o.quote_these_too));
 2800|      0|    }
 2801|      0|    return (o);
 2802|      0|  }
 2803|      0|}
 2804|      0|char *quotearg_n_style(int n, enum quoting_style s, char const *arg) {
 2805|      0|  struct quoting_options o;
 2806|      0|  struct quoting_options tmp;
 2807|      0|  char *tmp___0;
 2808|      0|  void *__cil_tmp7;
 2809|      0|  void *__cil_tmp8;
 2810|       |
 2811|      0|  {
 2812|      0|    {
 2813|      0|      tmp = quoting_options_from_style(s);
 2814|      0|      o = tmp;
 2815|      0|      tmp___0 = quotearg_n_options(n, arg, (size_t)-1,
 2816|      0|                                   (struct quoting_options const *)(&o));
 2817|      0|    }
 2818|      0|    return (tmp___0);
 2819|      0|  }
 2820|      0|}
 2821|      0|char *quotearg_char(char const *arg, char ch) {
 2822|      0|  struct quoting_options options;
 2823|      0|  char *tmp;
 2824|      0|  void *__cil_tmp5;
 2825|       |
 2826|      0|  {
 2827|      0|    {
 2828|      0|      options = default_quoting_options;
 2829|      0|      set_char_quoting(&options, ch, 1);
 2830|      0|      tmp = quotearg_n_options(0, arg, (size_t)-1,
 2831|      0|                               (struct quoting_options const *)(&options));
 2832|      0|    }
 2833|      0|    return (tmp);
 2834|      0|  }
 2835|      0|}
 2836|      0|char *quotearg_colon(char const *arg) {
 2837|      0|  char *tmp;
 2838|       |
 2839|      0|  {
 2840|      0|    { tmp = quotearg_char(arg, (char)':'); }
 2841|      0|    return (tmp);
 2842|      0|  }
 2843|      0|}
 2844|       |char const *quote_n(int n, char const *name);
 2845|      0|char const *quote_n(int n, char const *name) {
 2846|      0|  char *tmp;
 2847|       |
 2848|      0|  {
 2849|      0|    { tmp = quotearg_n_style(n, (enum quoting_style)5, name); }
 2850|      0|    return ((char const *)tmp);
 2851|      0|  }
 2852|      0|}
 2853|      0|char const *quote(char const *name) {
 2854|      0|  char const *tmp;
 2855|       |
 2856|      0|  {
 2857|      0|    { tmp = quote_n(0, name); }
 2858|      0|    return (tmp);
 2859|      0|  }
 2860|      0|}
 2861|       |extern __attribute__((__nothrow__)) char *(
 2862|       |    __attribute__((__nonnull__(1), __leaf__)) getenv)(char const *__name);
 2863|       |extern __attribute__((__nothrow__))
 2864|       |time_t(__attribute__((__leaf__)) time)(time_t *__timer);
 2865|       |extern __attribute__((__nothrow__)) long(__attribute__((__leaf__)) sysconf)(
 2866|       |    int __name);
 2867|       |extern __attribute__((__nothrow__)) void *(__attribute__((__nonnull__(1, 2),
 2868|       |                                                          __leaf__)) mempcpy)(
 2869|       |    void *__restrict __dest, void const *__restrict __src, size_t __n);
 2870|       |extern __attribute__((__nothrow__)) char *(
 2871|       |    __attribute__((__nonnull__(1, 2), __leaf__)) strstr)(char const *__haystack,
 2872|       |                                                         char const *__needle)
 2873|       |    __attribute__((__pure__));
 2874|       |extern __attribute__((__nothrow__))
 2875|       |FILE *(__attribute__((__leaf__)) setmntent)(char const *__file,
 2876|       |                                            char const *__mode);
 2877|       |extern __attribute__((__nothrow__)) struct mntent *(
 2878|       |    __attribute__((__leaf__)) getmntent)(FILE *__stream);
 2879|       |extern __attribute__((__nothrow__)) int(__attribute__((__leaf__)) endmntent)(
 2880|       |    FILE *__stream);
 2881|       |struct mode_change *mode_compile(char const *mode_string___0,
 2882|       |                                 unsigned int masked_ops);
 2883|       |mode_t mode_adjust(mode_t oldmode, struct mode_change const *changes);
 2884|       |void mode_free(struct mode_change *changes);
 2885|       |extern __attribute__((__nothrow__))
 2886|       |__mode_t(__attribute__((__leaf__)) umask)(__mode_t __mask);
 2887|      6|static struct mode_change *make_node_op_equals(mode_t new_mode) {
 2888|      6|  struct mode_change *p;
 2889|      6|  void *tmp;
 2890|       |
 2891|      6|  {
 2892|      6|    {
 2893|      6|      tmp = malloc(sizeof(struct mode_change));
 2894|      6|      p = (struct mode_change *)tmp;
 2895|      6|    }
 2896|      6|    if ((unsigned long)p == (unsigned long)((void *)0)) {
 2897|      0|      return (p);
 2898|      0|    }
 2899|      6|    p->next = (struct mode_change *)((void *)0);
 2900|      6|    p->op = (char)'=';
 2901|      6|    p->flags = (char)0;
 2902|      6|    p->value = new_mode;
 2903|      6|    p->affected = (mode_t)((4032 | (448 >> 3)) | ((448 >> 3) >> 3));
 2904|      6|    return (p);
 2905|      6|  }
 2906|      6|}
 2907|       |static void mode_append_entry(struct mode_change **head,
 2908|       |                              struct mode_change **tail,
 2909|      6|                              struct mode_change *e) {
 2910|      6|  struct mode_change *tmp;
 2911|       |
 2912|      6|  {
 2913|      6|    if ((unsigned long)*head == (unsigned long)((void *)0)) {
 2914|      6|      tmp = e;
 2915|      6|      *tail = tmp;
 2916|      6|      *head = tmp;
 2917|      6|    } else {
 2918|      0|      (*tail)->next = e;
 2919|      0|      *tail = e;
 2920|      0|    }
 2921|      6|    return;
 2922|      6|  }
 2923|      6|}
 2924|       |struct mode_change *mode_compile(char const *mode_string___0,
 2925|      6|                                 unsigned int masked_ops) {
 2926|      6|  struct mode_change *head;
 2927|      6|  struct mode_change *tail;
 2928|      6|  unsigned long octal_value;
 2929|      6|  mode_t umask_value;
 2930|      6|  struct mode_change *p;
 2931|      6|  mode_t mode;
 2932|      6|  int tmp;
 2933|      6|  int tmp___0;
 2934|      6|  int tmp___1;
 2935|      6|  int tmp___2;
 2936|      6|  int tmp___3;
 2937|      6|  int tmp___4;
 2938|      6|  int tmp___5;
 2939|      6|  int tmp___6;
 2940|      6|  int tmp___7;
 2941|      6|  int tmp___8;
 2942|      6|  int tmp___9;
 2943|      6|  int tmp___10;
 2944|      6|  strtol_error tmp___11;
 2945|      6|  mode_t affected_bits;
 2946|      6|  mode_t affected_masked;
 2947|      6|  unsigned int ops_to_mask;
 2948|      6|  int who_specified_p;
 2949|      6|  struct mode_change *change;
 2950|      6|  void *tmp___12;
 2951|      6|  struct mode_change *p___0;
 2952|      6|  struct mode_change *tmp___13;
 2953|      6|  int tmp___14;
 2954|      6|  int tmp___15;
 2955|      6|  int tmp___16;
 2956|      6|  char *__cil_tmp33;
 2957|       |
 2958|      6|  {
 2959|      6|    {
 2960|      6|      head = (struct mode_change *)((void *)0);
 2961|      6|      tmp___11 =
 2962|      6|          xstrtoul(mode_string___0, (char **)((void *)0), 8, &octal_value, "");
 2963|      6|    }
 2964|      6|    if ((unsigned int)tmp___11 == 0U) {
 2965|      6|      if (octal_value != (octal_value & 4095UL)) {
 2966|      0|        return ((struct mode_change *)0);
 2967|      0|      }
 2968|      6|      if (256 >> 3 == 32) {
 2969|      6|        if (128 >> 3 == 16) {
 2970|      6|          if (64 >> 3 == 8) {
 2971|      6|            if ((256 >> 3) >> 3 == 4) {
 2972|      6|              if ((128 >> 3) >> 3 == 2) {
 2973|      6|                if ((64 >> 3) >> 3 == 1) {
 2974|      6|                  mode = (mode_t)octal_value;
 2975|      6|                } else {
 2976|      0|                  goto _L___3;
 2977|      0|                }
 2978|      6|              } else {
 2979|      0|                goto _L___3;
 2980|      0|              }
 2981|      6|            } else {
 2982|      0|              goto _L___3;
 2983|      0|            }
 2984|      6|          } else {
 2985|      0|            goto _L___3;
 2986|      0|          }
 2987|      6|        } else {
 2988|      0|          goto _L___3;
 2989|      0|        }
 2990|      6|      } else {
 2991|      0|      _L___3:
 2992|      0|        if (octal_value & 2048UL) {
 2993|      0|          tmp = 2048;
 2994|      0|        } else {
 2995|      0|          tmp = 0;
 2996|      0|        }
 2997|      0|        if (octal_value & 1024UL) {
 2998|      0|          tmp___0 = 1024;
 2999|      0|        } else {
 3000|      0|          tmp___0 = 0;
 3001|      0|        }
 3002|      0|        if (octal_value & 512UL) {
 3003|      0|          tmp___1 = 512;
 3004|      0|        } else {
 3005|      0|          tmp___1 = 0;
 3006|      0|        }
 3007|      0|        if (octal_value & 256UL) {
 3008|      0|          tmp___2 = 256;
 3009|      0|        } else {
 3010|      0|          tmp___2 = 0;
 3011|      0|        }
 3012|      0|        if (octal_value & 128UL) {
 3013|      0|          tmp___3 = 128;
 3014|      0|        } else {
 3015|      0|          tmp___3 = 0;
 3016|      0|        }
 3017|      0|        if (octal_value & 64UL) {
 3018|      0|          tmp___4 = 64;
 3019|      0|        } else {
 3020|      0|          tmp___4 = 0;
 3021|      0|        }
 3022|      0|        if (octal_value & 32UL) {
 3023|      0|          tmp___5 = 256 >> 3;
 3024|      0|        } else {
 3025|      0|          tmp___5 = 0;
 3026|      0|        }
 3027|      0|        if (octal_value & 16UL) {
 3028|      0|          tmp___6 = 128 >> 3;
 3029|      0|        } else {
 3030|      0|          tmp___6 = 0;
 3031|      0|        }
 3032|      0|        if (octal_value & 8UL) {
 3033|      0|          tmp___7 = 64 >> 3;
 3034|      0|        } else {
 3035|      0|          tmp___7 = 0;
 3036|      0|        }
 3037|      0|        if (octal_value & 4UL) {
 3038|      0|          tmp___8 = (256 >> 3) >> 3;
 3039|      0|        } else {
 3040|      0|          tmp___8 = 0;
 3041|      0|        }
 3042|      0|        if (octal_value & 2UL) {
 3043|      0|          tmp___9 = (128 >> 3) >> 3;
 3044|      0|        } else {
 3045|      0|          tmp___9 = 0;
 3046|      0|        }
 3047|      0|        if (octal_value & 1UL) {
 3048|      0|          tmp___10 = (64 >> 3) >> 3;
 3049|      0|        } else {
 3050|      0|          tmp___10 = 0;
 3051|      0|        }
 3052|      0|        mode =
 3053|      0|            (mode_t)(((((((((((tmp | tmp___0) | tmp___1) | tmp___2) | tmp___3) |
 3054|      0|                           tmp___4) |
 3055|      0|                          tmp___5) |
 3056|      0|                         tmp___6) |
 3057|      0|                        tmp___7) |
 3058|      0|                       tmp___8) |
 3059|      0|                      tmp___9) |
 3060|      0|                     tmp___10);
 3061|      0|      }
 3062|      6|      { p = make_node_op_equals(mode); }
 3063|      6|      if ((unsigned long)p == (unsigned long)((void *)0)) {
 3064|      0|        return ((struct mode_change *)1);
 3065|      0|      }
 3066|      6|      { mode_append_entry(&head, &tail, p); }
 3067|      6|      return (head);
 3068|      6|    }
 3069|      0|    {
 3070|      0|      umask_value = umask((__mode_t)0);
 3071|      0|      umask(umask_value);
 3072|      0|      mode_string___0--;
 3073|      0|    }
 3074|      0|    {
 3075|      0|      while (1) {
 3076|      0|      while_continue: /* CIL Label */
 3077|      0|          ;
 3078|      0|        affected_bits = (mode_t)0;
 3079|      0|        ops_to_mask = 0U;
 3080|      0|        affected_bits = (mode_t)0;
 3081|      0|        ops_to_mask = 0U;
 3082|      0|        mode_string___0++;
 3083|      0|        {
 3084|      0|          while (1) {
 3085|      0|          while_continue___0: /* CIL Label */
 3086|      0|              ;
 3087|       |
 3088|      0|            if ((int const) * mode_string___0 == 117) {
 3089|      0|              goto case_117;
 3090|      0|            }
 3091|      0|            if ((int const) * mode_string___0 == 103) {
 3092|      0|              goto case_103;
 3093|      0|            }
 3094|      0|            if ((int const) * mode_string___0 == 111) {
 3095|      0|              goto case_111;
 3096|      0|            }
 3097|      0|            if ((int const) * mode_string___0 == 97) {
 3098|      0|              goto case_97;
 3099|      0|            }
 3100|      0|            goto switch_default;
 3101|      0|          case_117:
 3102|      0|            affected_bits |= 2496U;
 3103|      0|            goto switch_break;
 3104|      0|          case_103:
 3105|      0|            affected_bits |= (unsigned int)(1024 | (448 >> 3));
 3106|      0|            goto switch_break;
 3107|      0|          case_111:
 3108|      0|            affected_bits |= (unsigned int)(512 | ((448 >> 3) >> 3));
 3109|      0|            goto switch_break;
 3110|      0|          case_97:
 3111|      0|            affected_bits |=
 3112|      0|                (unsigned int)((4032 | (448 >> 3)) | ((448 >> 3) >> 3));
 3113|      0|            goto switch_break;
 3114|      0|          switch_default:
 3115|      0|            goto no_more_affected;
 3116|      0|          switch_break:
 3117|      0|            mode_string___0++;
 3118|      0|          }
 3119|      0|        while_break___3: /* CIL Label */
 3120|      0|            ;
 3121|      0|        }
 3122|       |
 3123|      0|      no_more_affected:
 3124|      0|        if (affected_bits) {
 3125|      0|          who_specified_p = 1;
 3126|      0|        } else {
 3127|      0|          who_specified_p = 0;
 3128|      0|          affected_bits = (mode_t)((4032 | (448 >> 3)) | ((448 >> 3) >> 3));
 3129|      0|          ops_to_mask = masked_ops;
 3130|      0|        }
 3131|      0|        {
 3132|      0|          while (1) {
 3133|      0|          while_continue___1: /* CIL Label */
 3134|      0|              ;
 3135|       |
 3136|      0|            if (!((int const) * mode_string___0 == 61)) {
 3137|      0|              if (!((int const) * mode_string___0 == 43)) {
 3138|      0|                if (!((int const) * mode_string___0 == 45)) {
 3139|      0|                  goto while_break___1;
 3140|      0|                }
 3141|      0|              }
 3142|      0|            }
 3143|      0|            {
 3144|      0|              tmp___12 = malloc(sizeof(struct mode_change));
 3145|      0|              change = (struct mode_change *)tmp___12;
 3146|      0|            }
 3147|      0|            if ((unsigned long)change == (unsigned long)((void *)0)) {
 3148|      0|              {
 3149|      0|                mode_free(head);
 3150|      0|              }
 3151|      0|              return ((struct mode_change *)1);
 3152|      0|            }
 3153|      0|            change->next = (struct mode_change *)((void *)0);
 3154|      0|            change->op = (char)*mode_string___0;
 3155|      0|            affected_masked = affected_bits;
 3156|      0|            if (!who_specified_p) {
 3157|      0|              if ((int const) * mode_string___0 == 61) {
 3158|      0|                tmp___14 = 1;
 3159|      0|              } else {
 3160|      0|                tmp___14 = 0;
 3161|      0|              }
 3162|      0|              if (ops_to_mask & (unsigned int)tmp___14) {
 3163|      0|                {
 3164|      0|                  tmp___13 = make_node_op_equals((mode_t)0);
 3165|      0|                  p___0 = tmp___13;
 3166|      0|                }
 3167|      0|                if ((unsigned long)p___0 == (unsigned long)((void *)0)) {
 3168|      0|                  return ((struct mode_change *)1);
 3169|      0|                }
 3170|      0|                { mode_append_entry(&head, &tail, p___0); }
 3171|      0|              }
 3172|      0|            }
 3173|      0|            if ((int const) * mode_string___0 == 61) {
 3174|      0|              tmp___16 = 1;
 3175|      0|            } else {
 3176|      0|              if ((int const) * mode_string___0 == 43) {
 3177|      0|                tmp___15 = 2;
 3178|      0|              } else {
 3179|      0|                tmp___15 = 4;
 3180|      0|              }
 3181|      0|              tmp___16 = tmp___15;
 3182|      0|            }
 3183|      0|            if (ops_to_mask & (unsigned int)tmp___16) {
 3184|      0|              affected_masked &= ~umask_value;
 3185|      0|            }
 3186|      0|            {
 3187|      0|              change->affected = affected_masked;
 3188|      0|              change->value = (mode_t)0;
 3189|      0|              change->flags = (char)0;
 3190|      0|              mode_append_entry(&head, &tail, change);
 3191|      0|              mode_string___0++;
 3192|      0|            }
 3193|      0|            {
 3194|      0|              while (1) {
 3195|      0|              while_continue___2: /* CIL Label */
 3196|      0|                  ;
 3197|       |
 3198|      0|                if ((int const) * mode_string___0 == 114) {
 3199|      0|                  goto case_114;
 3200|      0|                }
 3201|      0|                if ((int const) * mode_string___0 == 119) {
 3202|      0|                  goto case_119;
 3203|      0|                }
 3204|      0|                if ((int const) * mode_string___0 == 88) {
 3205|      0|                  goto case_88;
 3206|      0|                }
 3207|      0|                if ((int const) * mode_string___0 == 120) {
 3208|      0|                  goto case_120;
 3209|      0|                }
 3210|      0|                if ((int const) * mode_string___0 == 115) {
 3211|      0|                  goto case_115;
 3212|      0|                }
 3213|      0|                if ((int const) * mode_string___0 == 116) {
 3214|      0|                  goto case_116;
 3215|      0|                }
 3216|      0|                if ((int const) * mode_string___0 == 117) {
 3217|      0|                  goto case_117___0;
 3218|      0|                }
 3219|      0|                if ((int const) * mode_string___0 == 103) {
 3220|      0|                  goto case_103___0;
 3221|      0|                }
 3222|      0|                if ((int const) * mode_string___0 == 111) {
 3223|      0|                  goto case_111___0;
 3224|      0|                }
 3225|      0|                goto switch_default___0;
 3226|      0|              case_114:
 3227|      0|                change->value |=
 3228|      0|                    (unsigned int)((256 | (256 >> 3)) | ((256 >> 3) >> 3)) &
 3229|      0|                    affected_masked;
 3230|      0|                goto switch_break___0;
 3231|      0|              case_119:
 3232|      0|                change->value |=
 3233|      0|                    (unsigned int)((128 | (128 >> 3)) | ((128 >> 3) >> 3)) &
 3234|      0|                    affected_masked;
 3235|      0|                goto switch_break___0;
 3236|      0|              case_88:
 3237|      0|                change->flags = (char)((int)change->flags | 1);
 3238|      0|              case_120:
 3239|      0|                change->value |=
 3240|      0|                    (unsigned int)((64 | (64 >> 3)) | ((64 >> 3) >> 3)) &
 3241|      0|                    affected_masked;
 3242|      0|                goto switch_break___0;
 3243|      0|              case_115:
 3244|      0|                change->value |= 3072U & affected_masked;
 3245|      0|                goto switch_break___0;
 3246|      0|              case_116:
 3247|      0|                change->value |= 512U & affected_masked;
 3248|      0|                goto switch_break___0;
 3249|      0|              case_117___0:
 3250|      0|                if (change->value) {
 3251|      0|                  goto invalid;
 3252|      0|                }
 3253|      0|                change->value = (mode_t)448;
 3254|      0|                change->flags = (char)((int)change->flags | 2);
 3255|      0|                goto switch_break___0;
 3256|      0|              case_103___0:
 3257|      0|                if (change->value) {
 3258|      0|                  goto invalid;
 3259|      0|                }
 3260|      0|                change->value = (mode_t)(448 >> 3);
 3261|      0|                change->flags = (char)((int)change->flags | 2);
 3262|      0|                goto switch_break___0;
 3263|      0|              case_111___0:
 3264|      0|                if (change->value) {
 3265|      0|                  goto invalid;
 3266|      0|                }
 3267|      0|                change->value = (mode_t)((448 >> 3) >> 3);
 3268|      0|                change->flags = (char)((int)change->flags | 2);
 3269|      0|                goto switch_break___0;
 3270|      0|              switch_default___0:
 3271|      0|                goto no_more_values;
 3272|      0|              switch_break___0:
 3273|      0|                mode_string___0++;
 3274|      0|              }
 3275|      0|            while_break___5: /* CIL Label */
 3276|      0|                ;
 3277|      0|            }
 3278|       |
 3279|      0|          no_more_values:;
 3280|      0|          }
 3281|      0|        while_break___4: /* CIL Label */
 3282|      0|            ;
 3283|      0|        }
 3284|      0|      while_break___1:;
 3285|      0|        if (!((int const) * mode_string___0 == 44)) {
 3286|      0|          goto while_break;
 3287|      0|        }
 3288|      0|      }
 3289|      0|    while_break___2: /* CIL Label */
 3290|      0|        ;
 3291|      0|    }
 3292|      0|  while_break:;
 3293|      0|    if ((int const) * mode_string___0 == 0) {
 3294|      0|      return (head);
 3295|      0|    }
 3296|      0|  invalid: { mode_free(head); }
 3297|      0|    return ((struct mode_change *)0);
 3298|      0|  }
 3299|      0|}
 3300|      6|mode_t mode_adjust(mode_t oldmode, struct mode_change const *changes) {
 3301|      6|  mode_t newmode;
 3302|      6|  mode_t value;
 3303|      6|  int tmp;
 3304|      6|  int tmp___0;
 3305|      6|  int tmp___1;
 3306|      6|  int tmp___2;
 3307|      6|  int tmp___3;
 3308|      6|  int tmp___4;
 3309|      6|  int tmp___5;
 3310|      6|  int tmp___6;
 3311|      6|  int tmp___7;
 3312|       |
 3313|      6|  {
 3314|      6|    newmode = oldmode & (unsigned int)((4032 | (448 >> 3)) | ((448 >> 3) >> 3));
 3315|      6|    {
 3316|     12|      while (1) {
 3317|     12|      while_continue: /* CIL Label */
 3318|     12|          ;
 3319|       |
 3320|     12|        if (!changes) {
 3321|      6|          goto while_break;
 3322|      6|        }
 3323|      6|        if ((int const)changes->flags & 2) {
 3324|      0|          value = newmode & (unsigned int)changes->value;
 3325|      0|          if (changes->value & 448U) {
 3326|      0|            if (value & 256U) {
 3327|      0|              tmp = (256 >> 3) | ((256 >> 3) >> 3);
 3328|      0|            } else {
 3329|      0|              tmp = 0;
 3330|      0|            }
 3331|      0|            if (value & 128U) {
 3332|      0|              tmp___0 = (128 >> 3) | ((128 >> 3) >> 3);
 3333|      0|            } else {
 3334|      0|              tmp___0 = 0;
 3335|      0|            }
 3336|      0|            if (value & 64U) {
 3337|      0|              tmp___1 = (64 >> 3) | ((64 >> 3) >> 3);
 3338|      0|            } else {
 3339|      0|              tmp___1 = 0;
 3340|      0|            }
 3341|      0|            value |= (unsigned int)((tmp | tmp___0) | tmp___1);
 3342|      0|          } else {
 3343|      0|            if (changes->value & (unsigned int const)(448 >> 3)) {
 3344|      0|              if (value & (unsigned int)(256 >> 3)) {
 3345|      0|                tmp___2 = 256 | ((256 >> 3) >> 3);
 3346|      0|              } else {
 3347|      0|                tmp___2 = 0;
 3348|      0|              }
 3349|      0|              if (value & (unsigned int)(128 >> 3)) {
 3350|      0|                tmp___3 = 128 | ((128 >> 3) >> 3);
 3351|      0|              } else {
 3352|      0|                tmp___3 = 0;
 3353|      0|              }
 3354|      0|              if (value & (unsigned int)(64 >> 3)) {
 3355|      0|                tmp___4 = 64 | ((64 >> 3) >> 3);
 3356|      0|              } else {
 3357|      0|                tmp___4 = 0;
 3358|      0|              }
 3359|      0|              value |= (unsigned int)((tmp___2 | tmp___3) | tmp___4);
 3360|      0|            } else {
 3361|      0|              if (value & (unsigned int)((256 >> 3) >> 3)) {
 3362|      0|                tmp___5 = 256 | (256 >> 3);
 3363|      0|              } else {
 3364|      0|                tmp___5 = 0;
 3365|      0|              }
 3366|      0|              if (value & (unsigned int)((128 >> 3) >> 3)) {
 3367|      0|                tmp___6 = 128 | (128 >> 3);
 3368|      0|              } else {
 3369|      0|                tmp___6 = 0;
 3370|      0|              }
 3371|      0|              if (value & (unsigned int)((64 >> 3) >> 3)) {
 3372|      0|                tmp___7 = 64 | (64 >> 3);
 3373|      0|              } else {
 3374|      0|                tmp___7 = 0;
 3375|      0|              }
 3376|      0|              value |= (unsigned int)((tmp___5 | tmp___6) | tmp___7);
 3377|      0|            }
 3378|      0|          }
 3379|      0|          value &= (unsigned int)changes->affected;
 3380|      6|        } else {
 3381|      6|          value = (mode_t)changes->value;
 3382|      6|          if ((int const)changes->flags & 1) {
 3383|      0|            if (!((oldmode & 61440U) == 16384U)) {
 3384|      0|              if ((newmode &
 3385|      0|                   (unsigned int)((64 | (64 >> 3)) | ((64 >> 3) >> 3))) == 0U) {
 3386|      0|                value &= (unsigned int)(~((64 | (64 >> 3)) | ((64 >> 3) >> 3)));
 3387|      0|              }
 3388|      0|            }
 3389|      0|          }
 3390|      6|        }
 3391|      6|        if ((int const)changes->op == 61) {
 3392|      6|          goto case_61;
 3393|      6|        }
 3394|      0|        if ((int const)changes->op == 43) {
 3395|      0|          goto case_43;
 3396|      0|        }
 3397|      0|        if ((int const)changes->op == 45) {
 3398|      0|          goto case_45;
 3399|      0|        }
 3400|      0|        goto switch_break;
 3401|      6|      case_61:
 3402|      6|        newmode = (newmode & (unsigned int)(~changes->affected)) | value;
 3403|      6|        goto switch_break;
 3404|      0|      case_43:
 3405|      0|        newmode |= value;
 3406|      0|        goto switch_break;
 3407|      0|      case_45:
 3408|      0|        newmode &= ~value;
 3409|      0|        goto switch_break;
 3410|      6|      switch_break:
 3411|      6|        changes = (struct mode_change const *)changes->next;
 3412|      6|      }
 3413|      0|    while_break___0: /* CIL Label */
 3414|      0|        ;
 3415|      0|    }
 3416|      6|  while_break:;
 3417|      6|    return (newmode);
 3418|      0|  }
 3419|      0|}
 3420|      0|void mode_free(struct mode_change *changes) {
 3421|      0|  register struct mode_change *next;
 3422|       |
 3423|      0|  {
 3424|      0|    {
 3425|      0|      while (1) {
 3426|      0|      while_continue: /* CIL Label */
 3427|      0|          ;
 3428|       |
 3429|      0|        if (!changes) {
 3430|      0|          goto while_break;
 3431|      0|        }
 3432|      0|        {
 3433|      0|          next = changes->next;
 3434|      0|          rpl_free((void *)changes);
 3435|      0|          changes = next;
 3436|      0|        }
 3437|      0|      }
 3438|      0|    while_break___0: /* CIL Label */
 3439|      0|        ;
 3440|      0|    }
 3441|      0|  while_break:;
 3442|      0|    return;
 3443|      0|  }
 3444|      0|}
 3445|       |static unsigned short const __mon_yday[2][13] = {
 3446|       |    {(unsigned short const)0, (unsigned short const)31,
 3447|       |     (unsigned short const)59, (unsigned short const)90,
 3448|       |     (unsigned short const)120, (unsigned short const)151,
 3449|       |     (unsigned short const)181, (unsigned short const)212,
 3450|       |     (unsigned short const)243, (unsigned short const)273,
 3451|       |     (unsigned short const)304, (unsigned short const)334,
 3452|       |     (unsigned short const)365},
 3453|       |    {(unsigned short const)0, (unsigned short const)31,
 3454|       |     (unsigned short const)60, (unsigned short const)91,
 3455|       |     (unsigned short const)121, (unsigned short const)152,
 3456|       |     (unsigned short const)182, (unsigned short const)213,
 3457|       |     (unsigned short const)244, (unsigned short const)274,
 3458|       |     (unsigned short const)305, (unsigned short const)335,
 3459|       |     (unsigned short const)366}};
 3460|       |static time_t localtime_offset;
 3461|       |extern __attribute__((__nothrow__)) int(__attribute__((
 3462|       |    __nonnull__(1, 2), __leaf__)) strcoll)(char const *__s1, char const *__s2)
 3463|       |    __attribute__((__pure__));
 3464|       |static unsigned char const fillbuf___0[64] = {(unsigned char const)128,
 3465|       |                                              (unsigned char const)0};
 3466|       |extern __attribute__((__nothrow__)) int(__attribute__((__leaf__)) wcwidth)(
 3467|       |    wchar_t __c);
 3468|       |extern __attribute__((__nothrow__)) int(__attribute__((__leaf__)) iswcntrl)(
 3469|       |    wint_t __wc);
 3470|       |int make_path(char const *argpath, int mode, int parent_mode, uid_t owner,
 3471|       |              gid_t group, int preserve_existing,
 3472|       |              char const *verbose_fmt_string);
 3473|       |int make_dir(char const *dir, char const *dirpath, mode_t mode,
 3474|       |             int *created_dir_p);
 3475|       |extern __attribute__((__nothrow__)) int(__attribute__((
 3476|       |    __nonnull__(1), __leaf__)) chmod)(char const *__file, __mode_t __mode);
 3477|       |extern __attribute__((__nothrow__)) int(__attribute__((
 3478|       |    __nonnull__(1), __leaf__)) mkdir)(char const *__path, __mode_t __mode);
 3479|       |extern __attribute__((__nothrow__)) int(__attribute__((
 3480|       |    __nonnull__(1), __leaf__)) chown)(char const *__file, __uid_t __owner,
 3481|       |                                      __gid_t __group);
 3482|       |int make_dir(char const *dir, char const *dirpath, mode_t mode,
 3483|      6|             int *created_dir_p) {
 3484|      6|  int fail;
 3485|      6|  int created_dir;
 3486|      6|  int tmp;
 3487|      6|  struct stat stats;
 3488|      6|  int saved_errno;
 3489|      6|  int *tmp___0;
 3490|      6|  char const *tmp___1;
 3491|      6|  char *tmp___2;
 3492|      6|  char const *tmp___3;
 3493|      6|  char *tmp___4;
 3494|      6|  int tmp___5;
 3495|      6|  void *__cil_tmp16;
 3496|      6|  char *__cil_tmp17;
 3497|      6|  char *__cil_tmp18;
 3498|       |
 3499|      6|  {
 3500|      6|    {
 3501|      6|      fail = 0;
 3502|      6|      tmp = mkdir(dir, mode);
 3503|      6|      created_dir = tmp == 0;
 3504|      6|    }
 3505|      6|    if (!created_dir) {
 3506|      0|      {
 3507|      0|        tmp___0 = __errno_location();
 3508|      0|        saved_errno = *tmp___0;
 3509|      0|        tmp___5 = stat((char const * /* __restrict  */)dir,
 3510|      0|                       (struct stat * /* __restrict  */)(&stats));
 3511|      0|      }
 3512|      0|      if (tmp___5) {
 3513|      0|        {
 3514|      0|          tmp___1 = quote(dirpath);
 3515|      0|          tmp___2 = gettext("cannot create directory %s");
 3516|      0|          error(0, saved_errno, (char const *)tmp___2, tmp___1);
 3517|      0|          fail = 1;
 3518|      0|        }
 3519|      0|      } else {
 3520|      0|        if (!((stats.st_mode & 61440U) == 16384U)) {
 3521|      0|          {
 3522|      0|            tmp___3 = quote(dirpath);
 3523|      0|            tmp___4 = gettext("%s exists but is not a directory");
 3524|      0|            error(0, 0, (char const *)tmp___4, tmp___3);
 3525|      0|            fail = 1;
 3526|      0|          }
 3527|      0|        }
 3528|      0|      }
 3529|      0|    }
 3530|      6|    if (created_dir_p) {
 3531|      6|      *created_dir_p = created_dir;
 3532|      6|    }
 3533|      6|    return (fail);
 3534|      6|  }
 3535|      6|}
 3536|       |int make_path(char const *argpath, int mode, int parent_mode, uid_t owner,
 3537|       |              gid_t group, int preserve_existing,
 3538|      0|              char const *verbose_fmt_string) {
 3539|      0|  struct stat stats;
 3540|      0|  int retval;
 3541|      0|  char *slash;
 3542|      0|  int tmp_mode;
 3543|      0|  int re_protect;
 3544|      0|  struct ptr_list *p;
 3545|      0|  struct ptr_list *leading_dirs;
 3546|      0|  int do_chdir;
 3547|      0|  struct saved_cwd cwd;
 3548|      0|  char *basename_dir;
 3549|      0|  char *dirpath;
 3550|      0|  mode_t oldmask;
 3551|      0|  __mode_t tmp;
 3552|      0|  size_t tmp___0;
 3553|      0|  void *tmp___1;
 3554|      0|  int tmp___2;
 3555|      0|  int tmp___3;
 3556|      0|  int tmp___4;
 3557|      0|  int newly_created_dir;
 3558|      0|  int fail;
 3559|      0|  int _saved_errno;
 3560|      0|  int *tmp___5;
 3561|      0|  char *tmp___6;
 3562|      0|  int *tmp___7;
 3563|      0|  int *tmp___8;
 3564|      0|  int tmp___9;
 3565|      0|  char const *tmp___10;
 3566|      0|  char const *tmp___11;
 3567|      0|  char *tmp___12;
 3568|      0|  int *tmp___13;
 3569|      0|  int _saved_errno___0;
 3570|      0|  int *tmp___14;
 3571|      0|  char *tmp___15;
 3572|      0|  int *tmp___16;
 3573|      0|  int *tmp___17;
 3574|      0|  int tmp___18;
 3575|      0|  int tmp___19;
 3576|      0|  struct ptr_list *new;
 3577|      0|  void *tmp___20;
 3578|      0|  char const *tmp___21;
 3579|      0|  char *tmp___22;
 3580|      0|  int *tmp___23;
 3581|      0|  int _saved_errno___1;
 3582|      0|  int *tmp___24;
 3583|      0|  char *tmp___25;
 3584|      0|  int *tmp___26;
 3585|      0|  int *tmp___27;
 3586|      0|  int tmp___28;
 3587|      0|  int tmp___29;
 3588|      0|  char *tmp___30;
 3589|      0|  int _saved_errno___2;
 3590|      0|  int *tmp___31;
 3591|      0|  char *tmp___32;
 3592|      0|  int *tmp___33;
 3593|      0|  int *tmp___34;
 3594|      0|  int tmp___35;
 3595|      0|  int tmp___36;
 3596|      0|  char const *tmp___37;
 3597|      0|  char const *tmp___38;
 3598|      0|  char *tmp___39;
 3599|      0|  int *tmp___40;
 3600|      0|  int tmp___41;
 3601|      0|  char const *tmp___42;
 3602|      0|  char *tmp___43;
 3603|      0|  int *tmp___44;
 3604|      0|  int tmp___45;
 3605|      0|  int _saved_errno___3;
 3606|      0|  int *tmp___46;
 3607|      0|  char *tmp___47;
 3608|      0|  int *tmp___48;
 3609|      0|  int *tmp___49;
 3610|      0|  int tmp___50;
 3611|      0|  char const *tmp___51;
 3612|      0|  char *tmp___52;
 3613|      0|  int *tmp___53;
 3614|      0|  int tmp___54;
 3615|      0|  char const *dirpath___0;
 3616|      0|  char const *tmp___55;
 3617|      0|  char *tmp___56;
 3618|      0|  char const *tmp___57;
 3619|      0|  char *tmp___58;
 3620|      0|  int *tmp___59;
 3621|      0|  int tmp___60;
 3622|      0|  char const *tmp___61;
 3623|      0|  char *tmp___62;
 3624|      0|  int *tmp___63;
 3625|      0|  int tmp___64;
 3626|      0|  int tmp___65;
 3627|      0|  void *__cil_tmp96;
 3628|      0|  char *__cil_tmp97;
 3629|      0|  char *__cil_tmp98;
 3630|      0|  char *__cil_tmp99;
 3631|      0|  char *__cil_tmp100;
 3632|      0|  char *__cil_tmp101;
 3633|      0|  char *__cil_tmp102;
 3634|      0|  char *__cil_tmp103;
 3635|      0|  char *__cil_tmp104;
 3636|      0|  char *__cil_tmp105;
 3637|      0|  char *__cil_tmp106;
 3638|      0|  char *__cil_tmp107;
 3639|      0|  char *__cil_tmp108;
 3640|      0|  char *__cil_tmp109;
 3641|       |
 3642|      0|  {
 3643|      0|    {
 3644|      0|      retval = 0;
 3645|      0|      tmp___65 = stat((char const * /* __restrict  */)argpath,
 3646|      0|                      (struct stat * /* __restrict  */)(&stats));
 3647|      0|    }
 3648|      0|    if (tmp___65) {
 3649|      0|      {
 3650|      0|        leading_dirs = (struct ptr_list *)((void *)0);
 3651|      0|        tmp = umask((__mode_t)0);
 3652|      0|        oldmask = tmp;
 3653|      0|        tmp___0 = strlen(argpath);
 3654|      0|        tmp___1 = __builtin_alloca(tmp___0 + 1UL);
 3655|      0|        dirpath = (char *)tmp___1;
 3656|      0|        strcpy((char * /* __restrict  */)dirpath,
 3657|      0|               (char const * /* __restrict  */)argpath);
 3658|      0|        strip_trailing_slashes(dirpath);
 3659|      0|      }
 3660|      0|      if ((parent_mode & 192) != 192) {
 3661|      0|        tmp_mode = 448;
 3662|      0|        re_protect = 1;
 3663|      0|      } else {
 3664|      0|        if (owner != 4294967295U) {
 3665|      0|          goto _L;
 3666|      0|        } else {
 3667|      0|          if (group != 4294967295U) {
 3668|      0|          _L:
 3669|      0|            if ((parent_mode & 3584) != 0) {
 3670|      0|              tmp_mode = 448;
 3671|      0|              re_protect = 1;
 3672|      0|            } else {
 3673|      0|              tmp_mode = parent_mode;
 3674|      0|              re_protect = 0;
 3675|      0|            }
 3676|      0|          } else {
 3677|      0|            tmp_mode = parent_mode;
 3678|      0|            re_protect = 0;
 3679|      0|          }
 3680|      0|        }
 3681|      0|      }
 3682|      0|      { tmp___2 = save_cwd(&cwd); }
 3683|      0|      if (tmp___2) {
 3684|      0|        tmp___3 = 0;
 3685|      0|      } else {
 3686|      0|        tmp___3 = 1;
 3687|      0|      }
 3688|      0|      do_chdir = tmp___3;
 3689|      0|      if (do_chdir) {
 3690|      0|        if ((int)*dirpath == 47) {
 3691|      0|          {
 3692|      0|            tmp___4 = chdir("/");
 3693|      0|          }
 3694|      0|          if (tmp___4 < 0) {
 3695|      0|            do_chdir = 0;
 3696|      0|          }
 3697|      0|        }
 3698|      0|      }
 3699|      0|      slash = dirpath;
 3700|      0|      {
 3701|      0|        while (1) {
 3702|      0|        while_continue: /* CIL Label */
 3703|      0|            ;
 3704|       |
 3705|      0|          if (!((int)*slash == 47)) {
 3706|      0|            goto while_break;
 3707|      0|          }
 3708|      0|          slash++;
 3709|      0|        }
 3710|      0|      while_break___12: /* CIL Label */
 3711|      0|          ;
 3712|      0|      }
 3713|      0|    while_break:;
 3714|      0|      {
 3715|      0|        while (1) {
 3716|      0|        while_continue___0: /* CIL Label */
 3717|      0|            ;
 3718|      0|          {
 3719|      0|            basename_dir = slash;
 3720|      0|            slash = strchr((char const *)slash, '/');
 3721|      0|          }
 3722|      0|          if ((unsigned long)slash == (unsigned long)((void *)0)) {
 3723|      0|            goto while_break___0;
 3724|      0|          }
 3725|      0|          if (!do_chdir) {
 3726|      0|            basename_dir = dirpath;
 3727|      0|          }
 3728|      0|          {
 3729|      0|            *slash = (char)'\000';
 3730|      0|            fail = make_dir((char const *)basename_dir, (char const *)dirpath,
 3731|      0|                            (mode_t)tmp_mode, &newly_created_dir);
 3732|      0|          }
 3733|      0|          if (fail) {
 3734|      0|            {
 3735|      0|              while (1) {
 3736|      0|              while_continue___1: /* CIL Label */
 3737|      0|                  ;
 3738|      0|                { umask(oldmask); }
 3739|      0|                {
 3740|      0|                  while (1) {
 3741|      0|                  while_continue___2: /* CIL Label */
 3742|      0|                      ;
 3743|       |
 3744|      0|                    if (do_chdir) {
 3745|      0|                      {
 3746|      0|                        tmp___9 = restore_cwd((struct saved_cwd const *)(&cwd));
 3747|      0|                      }
 3748|      0|                      if (tmp___9 != 0) {
 3749|      0|                        {
 3750|      0|                          tmp___5 = __errno_location();
 3751|      0|                          _saved_errno = *tmp___5;
 3752|      0|                          tmp___6 = gettext(
 3753|      0|                              "failed to return to initial working directory");
 3754|      0|                          tmp___7 = __errno_location();
 3755|      0|                          error(0, *tmp___7, (char const *)tmp___6);
 3756|      0|                          free_cwd(&cwd);
 3757|      0|                          tmp___8 = __errno_location();
 3758|      0|                          *tmp___8 = _saved_errno;
 3759|      0|                        }
 3760|      0|                        return (1);
 3761|      0|                      }
 3762|      0|                      { free_cwd(&cwd); }
 3763|      0|                    }
 3764|      0|                    goto while_break___2;
 3765|      0|                  }
 3766|      0|                while_break___15: /* CIL Label */
 3767|      0|                    ;
 3768|      0|                }
 3769|      0|              while_break___2:;
 3770|      0|                goto while_break___1;
 3771|      0|              }
 3772|      0|            while_break___14: /* CIL Label */
 3773|      0|                ;
 3774|      0|            }
 3775|      0|          while_break___1:;
 3776|      0|            return (1);
 3777|      0|          }
 3778|      0|          if (newly_created_dir) {
 3779|      0|            if (verbose_fmt_string) {
 3780|      0|              {
 3781|      0|                tmp___10 = quote((char const *)dirpath);
 3782|      0|                error(0, 0, verbose_fmt_string, tmp___10);
 3783|      0|              }
 3784|      0|            }
 3785|      0|            if (owner != 4294967295U) {
 3786|      0|              goto _L___0;
 3787|      0|            } else {
 3788|      0|              if (group != 4294967295U) {
 3789|      0|              _L___0: {
 3790|      0|                tmp___19 = chown((char const *)basename_dir, owner, group);
 3791|      0|              }
 3792|      0|                if (tmp___19) {
 3793|      0|                  {
 3794|      0|                    tmp___11 = quote((char const *)dirpath);
 3795|      0|                    tmp___12 =
 3796|      0|                        gettext("cannot change owner and/or group of %s");
 3797|      0|                    tmp___13 = __errno_location();
 3798|      0|                    error(0, *tmp___13, (char const *)tmp___12, tmp___11);
 3799|      0|                  }
 3800|      0|                  {
 3801|      0|                    while (1) {
 3802|      0|                    while_continue___3: /* CIL Label */
 3803|      0|                        ;
 3804|      0|                      { umask(oldmask); }
 3805|      0|                      {
 3806|      0|                        while (1) {
 3807|      0|                        while_continue___4: /* CIL Label */
 3808|      0|                            ;
 3809|       |
 3810|      0|                          if (do_chdir) {
 3811|      0|                            {
 3812|      0|                              tmp___18 =
 3813|      0|                                  restore_cwd((struct saved_cwd const *)(&cwd));
 3814|      0|                            }
 3815|      0|                            if (tmp___18 != 0) {
 3816|      0|                              {
 3817|      0|                                tmp___14 = __errno_location();
 3818|      0|                                _saved_errno___0 = *tmp___14;
 3819|      0|                                tmp___15 = gettext("failed to return to "
 3820|      0|                                                   "initial working directory");
 3821|      0|                                tmp___16 = __errno_location();
 3822|      0|                                error(0, *tmp___16, (char const *)tmp___15);
 3823|      0|                                free_cwd(&cwd);
 3824|      0|                                tmp___17 = __errno_location();
 3825|      0|                                *tmp___17 = _saved_errno___0;
 3826|      0|                              }
 3827|      0|                              return (1);
 3828|      0|                            }
 3829|      0|                            { free_cwd(&cwd); }
 3830|      0|                          }
 3831|      0|                          goto while_break___4;
 3832|      0|                        }
 3833|      0|                      while_break___17: /* CIL Label */
 3834|      0|                          ;
 3835|      0|                      }
 3836|      0|                    while_break___4:;
 3837|      0|                      goto while_break___3;
 3838|      0|                    }
 3839|      0|                  while_break___16: /* CIL Label */
 3840|      0|                      ;
 3841|      0|                  }
 3842|      0|                while_break___3:;
 3843|      0|                  return (1);
 3844|      0|                }
 3845|      0|              }
 3846|      0|            }
 3847|      0|            if (re_protect) {
 3848|      0|              {
 3849|      0|                tmp___20 = __builtin_alloca(sizeof(struct ptr_list));
 3850|      0|                new = (struct ptr_list *)tmp___20;
 3851|      0|                new->dirname_end = slash;
 3852|      0|                new->next = leading_dirs;
 3853|      0|                leading_dirs = new;
 3854|      0|              }
 3855|      0|            }
 3856|      0|          }
 3857|      0|          if (do_chdir) {
 3858|      0|            {
 3859|      0|              tmp___29 = chdir((char const *)basename_dir);
 3860|      0|            }
 3861|      0|            if (tmp___29 < 0) {
 3862|      0|              {
 3863|      0|                tmp___21 = quote((char const *)dirpath);
 3864|      0|                tmp___22 = gettext("cannot chdir to directory %s");
 3865|      0|                tmp___23 = __errno_location();
 3866|      0|                error(0, *tmp___23, (char const *)tmp___22, tmp___21);
 3867|      0|              }
 3868|      0|              {
 3869|      0|                while (1) {
 3870|      0|                while_continue___5: /* CIL Label */
 3871|      0|                    ;
 3872|      0|                  { umask(oldmask); }
 3873|      0|                  {
 3874|      0|                    while (1) {
 3875|      0|                    while_continue___6: /* CIL Label */
 3876|      0|                        ;
 3877|       |
 3878|      0|                      if (do_chdir) {
 3879|      0|                        {
 3880|      0|                          tmp___28 =
 3881|      0|                              restore_cwd((struct saved_cwd const *)(&cwd));
 3882|      0|                        }
 3883|      0|                        if (tmp___28 != 0) {
 3884|      0|                          {
 3885|      0|                            tmp___24 = __errno_location();
 3886|      0|                            _saved_errno___1 = *tmp___24;
 3887|      0|                            tmp___25 = gettext("failed to return to initial "
 3888|      0|                                               "working directory");
 3889|      0|                            tmp___26 = __errno_location();
 3890|      0|                            error(0, *tmp___26, (char const *)tmp___25);
 3891|      0|                            free_cwd(&cwd);
 3892|      0|                            tmp___27 = __errno_location();
 3893|      0|                            *tmp___27 = _saved_errno___1;
 3894|      0|                          }
 3895|      0|                          return (1);
 3896|      0|                        }
 3897|      0|                        { free_cwd(&cwd); }
 3898|      0|                      }
 3899|      0|                      goto while_break___6;
 3900|      0|                    }
 3901|      0|                  while_break___19: /* CIL Label */
 3902|      0|                      ;
 3903|      0|                  }
 3904|      0|                while_break___6:;
 3905|      0|                  goto while_break___5;
 3906|      0|                }
 3907|      0|              while_break___18: /* CIL Label */
 3908|      0|                  ;
 3909|      0|              }
 3910|      0|            while_break___5:;
 3911|      0|              return (1);
 3912|      0|            }
 3913|      0|          }
 3914|      0|          tmp___30 = slash;
 3915|      0|          slash++;
 3916|      0|          *tmp___30 = (char)'/';
 3917|      0|          {
 3918|      0|            while (1) {
 3919|      0|            while_continue___7: /* CIL Label */
 3920|      0|                ;
 3921|       |
 3922|      0|              if (!((int)*slash == 47)) {
 3923|      0|                goto while_break___7;
 3924|      0|              }
 3925|      0|              slash++;
 3926|      0|            }
 3927|      0|          while_break___20: /* CIL Label */
 3928|      0|              ;
 3929|      0|          }
 3930|      0|        while_break___7:;
 3931|      0|        }
 3932|      0|      while_break___13: /* CIL Label */
 3933|      0|          ;
 3934|      0|      }
 3935|      0|    while_break___0:;
 3936|      0|      if (!do_chdir) {
 3937|      0|        basename_dir = dirpath;
 3938|      0|      }
 3939|      0|      {
 3940|      0|        umask(oldmask);
 3941|      0|        tmp___36 = make_dir((char const *)basename_dir, (char const *)dirpath,
 3942|      0|                            (mode_t)mode, (int *)((void *)0));
 3943|      0|      }
 3944|      0|      if (tmp___36) {
 3945|      0|        {
 3946|      0|          while (1) {
 3947|      0|          while_continue___8: /* CIL Label */
 3948|      0|              ;
 3949|      0|            { umask(oldmask); }
 3950|      0|            {
 3951|      0|              while (1) {
 3952|      0|              while_continue___9: /* CIL Label */
 3953|      0|                  ;
 3954|       |
 3955|      0|                if (do_chdir) {
 3956|      0|                  {
 3957|      0|                    tmp___35 = restore_cwd((struct saved_cwd const *)(&cwd));
 3958|      0|                  }
 3959|      0|                  if (tmp___35 != 0) {
 3960|      0|                    {
 3961|      0|                      tmp___31 = __errno_location();
 3962|      0|                      _saved_errno___2 = *tmp___31;
 3963|      0|                      tmp___32 = gettext(
 3964|      0|                          "failed to return to initial working directory");
 3965|      0|                      tmp___33 = __errno_location();
 3966|      0|                      error(0, *tmp___33, (char const *)tmp___32);
 3967|      0|                      free_cwd(&cwd);
 3968|      0|                      tmp___34 = __errno_location();
 3969|      0|                      *tmp___34 = _saved_errno___2;
 3970|      0|                    }
 3971|      0|                    return (1);
 3972|      0|                  }
 3973|      0|                  { free_cwd(&cwd); }
 3974|      0|                }
 3975|      0|                goto while_break___9;
 3976|      0|              }
 3977|      0|            while_break___22: /* CIL Label */
 3978|      0|                ;
 3979|      0|            }
 3980|      0|          while_break___9:;
 3981|      0|            goto while_break___8;
 3982|      0|          }
 3983|      0|        while_break___21: /* CIL Label */
 3984|      0|            ;
 3985|      0|        }
 3986|      0|      while_break___8:;
 3987|      0|        return (1);
 3988|      0|      }
 3989|      0|      if ((unsigned long)verbose_fmt_string != (unsigned long)((void *)0)) {
 3990|      0|        {
 3991|      0|          tmp___37 = quote((char const *)dirpath);
 3992|      0|          error(0, 0, verbose_fmt_string, tmp___37);
 3993|      0|        }
 3994|      0|      }
 3995|      0|      if (owner != 4294967295U) {
 3996|      0|        goto _L___1;
 3997|      0|      } else {
 3998|      0|        if (group != 4294967295U) {
 3999|      0|        _L___1: { tmp___41 = chown((char const *)basename_dir, owner, group); }
 4000|      0|          if (tmp___41) {
 4001|      0|            {
 4002|      0|              tmp___38 = quote((char const *)dirpath);
 4003|      0|              tmp___39 = gettext("cannot change owner and/or group of %s");
 4004|      0|              tmp___40 = __errno_location();
 4005|      0|              error(0, *tmp___40, (char const *)tmp___39, tmp___38);
 4006|      0|              retval = 1;
 4007|      0|            }
 4008|      0|          }
 4009|      0|        }
 4010|      0|      }
 4011|      0|      if (mode & ~((448 | (448 >> 3)) | ((448 >> 3) >> 3))) {
 4012|      0|        {
 4013|      0|          tmp___45 = chmod((char const *)basename_dir, (__mode_t)mode);
 4014|      0|        }
 4015|      0|        if (tmp___45) {
 4016|      0|          {
 4017|      0|            tmp___42 = quote((char const *)dirpath);
 4018|      0|            tmp___43 = gettext("cannot change permissions of %s");
 4019|      0|            tmp___44 = __errno_location();
 4020|      0|            error(0, *tmp___44, (char const *)tmp___43, tmp___42);
 4021|      0|            retval = 1;
 4022|      0|          }
 4023|      0|        }
 4024|      0|      }
 4025|      0|      {
 4026|      0|        while (1) {
 4027|      0|        while_continue___10: /* CIL Label */
 4028|      0|            ;
 4029|       |
 4030|      0|          if (do_chdir) {
 4031|      0|            {
 4032|      0|              tmp___50 = restore_cwd((struct saved_cwd const *)(&cwd));
 4033|      0|            }
 4034|      0|            if (tmp___50 != 0) {
 4035|      0|              {
 4036|      0|                tmp___46 = __errno_location();
 4037|      0|                _saved_errno___3 = *tmp___46;
 4038|      0|                tmp___47 =
 4039|      0|                    gettext("failed to return to initial working directory");
 4040|      0|                tmp___48 = __errno_location();
 4041|      0|                error(0, *tmp___48, (char const *)tmp___47);
 4042|      0|                free_cwd(&cwd);
 4043|      0|                tmp___49 = __errno_location();
 4044|      0|                *tmp___49 = _saved_errno___3;
 4045|      0|              }
 4046|      0|              return (1);
 4047|      0|            }
 4048|      0|            { free_cwd(&cwd); }
 4049|      0|          }
 4050|      0|          goto while_break___10;
 4051|      0|        }
 4052|      0|      while_break___23: /* CIL Label */
 4053|      0|          ;
 4054|      0|      }
 4055|      0|    while_break___10:
 4056|      0|      p = leading_dirs;
 4057|      0|      {
 4058|      0|        while (1) {
 4059|      0|        while_continue___11: /* CIL Label */
 4060|      0|            ;
 4061|       |
 4062|      0|          if (!((unsigned long)p != (unsigned long)((void *)0))) {
 4063|      0|            goto while_break___11;
 4064|      0|          }
 4065|      0|          {
 4066|      0|            *(p->dirname_end) = (char)'\000';
 4067|      0|            tmp___54 = chmod((char const *)dirpath, (__mode_t)parent_mode);
 4068|      0|          }
 4069|      0|          if (tmp___54) {
 4070|      0|            {
 4071|      0|              tmp___51 = quote((char const *)dirpath);
 4072|      0|              tmp___52 = gettext("cannot change permissions of %s");
 4073|      0|              tmp___53 = __errno_location();
 4074|      0|              error(0, *tmp___53, (char const *)tmp___52, tmp___51);
 4075|      0|              retval = 1;
 4076|      0|            }
 4077|      0|          }
 4078|      0|          p = p->next;
 4079|      0|        }
 4080|      0|      while_break___24: /* CIL Label */
 4081|      0|          ;
 4082|      0|      }
 4083|      0|    while_break___11:;
 4084|      0|    } else {
 4085|      0|      dirpath___0 = argpath;
 4086|      0|      if (!((stats.st_mode & 61440U) == 16384U)) {
 4087|      0|        {
 4088|      0|          tmp___55 = quote(dirpath___0);
 4089|      0|          tmp___56 = gettext("%s exists but is not a directory");
 4090|      0|          error(0, 0, (char const *)tmp___56, tmp___55);
 4091|      0|        }
 4092|      0|        return (1);
 4093|      0|      }
 4094|      0|      if (!preserve_existing) {
 4095|      0|        if (owner != 4294967295U) {
 4096|      0|          goto _L___2;
 4097|      0|        } else {
 4098|      0|          if (group != 4294967295U) {
 4099|      0|          _L___2: { tmp___60 = chown(dirpath___0, owner, group); }
 4100|      0|            if (tmp___60) {
 4101|      0|              {
 4102|      0|                tmp___57 = quote(dirpath___0);
 4103|      0|                tmp___58 = gettext("cannot change owner and/or group of %s");
 4104|      0|                tmp___59 = __errno_location();
 4105|      0|                error(0, *tmp___59, (char const *)tmp___58, tmp___57);
 4106|      0|                retval = 1;
 4107|      0|              }
 4108|      0|            }
 4109|      0|          }
 4110|      0|        }
 4111|      0|        { tmp___64 = chmod(dirpath___0, (__mode_t)mode); }
 4112|      0|        if (tmp___64) {
 4113|      0|          {
 4114|      0|            tmp___61 = quote(dirpath___0);
 4115|      0|            tmp___62 = gettext("cannot change permissions of %s");
 4116|      0|            tmp___63 = __errno_location();
 4117|      0|            error(0, *tmp___63, (char const *)tmp___62, tmp___61);
 4118|      0|            retval = 1;
 4119|      0|          }
 4120|      0|        }
 4121|      0|      }
 4122|      0|    }
 4123|      0|    return (retval);
 4124|      0|  }
 4125|      0|}
 4126|       |extern struct _IO_FILE *stdout;
 4127|       |extern __attribute__((__nothrow__, __noreturn__)) void(
 4128|       |    __attribute__((__leaf__)) exit)(int __status);
 4129|       |extern int optind;
 4130|       |extern int opterr;
 4131|       |extern int getopt_long(int ___argc, char *const *___argv,
 4132|       |                       char const *__shortopts, struct option const *__longopts,
 4133|       |                       int *__longind);
 4134|       |static struct option const long_options[3] = {
 4135|       |    {"help", 0, (int *)0, 'h'},
 4136|       |    {"version", 0, (int *)0, 'v'},
 4137|       |    {(char const *)0, 0, (int *)0, 0}};
 4138|       |extern int fclose(FILE *__stream);
 4139|       |extern FILE *fopen(char const *__restrict __filename,
 4140|       |                   char const *__restrict __modes);
 4141|       |extern int fscanf(FILE *__restrict __stream, char const *__restrict __format,
 4142|       |                  ...);
 4143|       |extern int ungetc(int __c, FILE *__stream);
 4144|       |extern __attribute__((__nothrow__)) char *(
 4145|       |    __attribute__((__leaf__)) nl_langinfo)(nl_item __item);
 4146|       |static char const *volatile charset_aliases;
 4147|       |extern struct passwd *getpwuid(__uid_t __uid);
 4148|       |static struct userid *user_alist;
 4149|       |static struct userid *nouser_alist;
 4150|       |static struct userid *group_alist;
 4151|       |static struct userid *nogroup_alist;
 4152|       |extern __attribute__((__nothrow__)) struct lconv *(
 4153|       |    __attribute__((__leaf__)) localeconv)(void);
 4154|       |extern __attribute__((__nothrow__)) void *(__attribute__((
 4155|       |    __nonnull__(1, 2), __leaf__)) memmove)(void *__dest, void const *__src,
 4156|       |                                           size_t __n);
 4157|       |static char const power_letter[9] = {
 4158|       |    (char const)0,   (char const)'K', (char const)'M',
 4159|       |    (char const)'G', (char const)'T', (char const)'P',
 4160|       |    (char const)'E', (char const)'Z', (char const)'Y'};
 4161|       |static char const *const block_size_args[3] = {
 4162|       |    (char const * /* const  */) "human-readable",
 4163|       |    (char const * /* const  */) "si",
 4164|       |    (char const * /* const  */)((char const *)0)};
 4165|       |static int const block_size_opts[2] = {(int const)112, (int const)80};
 4166|       |static struct hash_tuning const default_tuning = {
 4167|       |    (float)0.0, (float)1.0, (float)0.8, (float)1.414, (_Bool)0};
 4168|       |extern __attribute__((__nothrow__)) char *(__attribute__((__leaf__)) setlocale)(
 4169|       |    int __category, char const *__locale);
 4170|       |extern void setgrent(void);
 4171|       |extern struct group *getgrent(void);
 4172|       |extern __attribute__((__nothrow__)) int(__attribute__((
 4173|       |    __nonnull__(1), __leaf__)) gettimeofday)(struct timeval *__restrict __tv,
 4174|       |                                             __timezone_ptr_t __tz);
 4175|       |extern
 4176|       |    __attribute__((__nothrow__)) int(__attribute__((__leaf__)) clock_gettime)(
 4177|       |        clockid_t __clock_id, struct timespec *__tp);
 4178|       |static unsigned char const yytranslate[274] = {
 4179|       |    (unsigned char const)0,  (unsigned char const)2,  (unsigned char const)2,
 4180|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4181|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4182|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4183|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4184|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4185|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4186|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4187|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4188|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4189|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4190|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4191|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4192|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4193|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)20,
 4194|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)21,
 4195|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4196|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4197|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4198|       |    (unsigned char const)2,  (unsigned char const)19, (unsigned char const)2,
 4199|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4200|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4201|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4202|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4203|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4204|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4205|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4206|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4207|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4208|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4209|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4210|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4211|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4212|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4213|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4214|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4215|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4216|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4217|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4218|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4219|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4220|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4221|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4222|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4223|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4224|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4225|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4226|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4227|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4228|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4229|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4230|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4231|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4232|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4233|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4234|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4235|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4236|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4237|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4238|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4239|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4240|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4241|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4242|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4243|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4244|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4245|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4246|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4247|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4248|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4249|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4250|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4251|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4252|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4253|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4254|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4255|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4256|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4257|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4258|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4259|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4260|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4261|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4262|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4263|       |    (unsigned char const)2,  (unsigned char const)2,  (unsigned char const)2,
 4264|       |    (unsigned char const)2,  (unsigned char const)1,  (unsigned char const)2,
 4265|       |    (unsigned char const)3,  (unsigned char const)4,  (unsigned char const)5,
 4266|       |    (unsigned char const)6,  (unsigned char const)7,  (unsigned char const)8,
 4267|       |    (unsigned char const)9,  (unsigned char const)10, (unsigned char const)11,
 4268|       |    (unsigned char const)12, (unsigned char const)13, (unsigned char const)14,
 4269|       |    (unsigned char const)15, (unsigned char const)16, (unsigned char const)17,
 4270|       |    (unsigned char const)18};
 4271|       |static unsigned char const yyr1[56] = {
 4272|       |    (unsigned char const)0,  (unsigned char const)22, (unsigned char const)23,
 4273|       |    (unsigned char const)23, (unsigned char const)24, (unsigned char const)24,
 4274|       |    (unsigned char const)24, (unsigned char const)24, (unsigned char const)24,
 4275|       |    (unsigned char const)24, (unsigned char const)24, (unsigned char const)25,
 4276|       |    (unsigned char const)25, (unsigned char const)25, (unsigned char const)25,
 4277|       |    (unsigned char const)25, (unsigned char const)26, (unsigned char const)26,
 4278|       |    (unsigned char const)27, (unsigned char const)27, (unsigned char const)27,
 4279|       |    (unsigned char const)28, (unsigned char const)28, (unsigned char const)28,
 4280|       |    (unsigned char const)29, (unsigned char const)29, (unsigned char const)29,
 4281|       |    (unsigned char const)29, (unsigned char const)29, (unsigned char const)29,
 4282|       |    (unsigned char const)29, (unsigned char const)29, (unsigned char const)29,
 4283|       |    (unsigned char const)30, (unsigned char const)30, (unsigned char const)31,
 4284|       |    (unsigned char const)31, (unsigned char const)31, (unsigned char const)31,
 4285|       |    (unsigned char const)31, (unsigned char const)31, (unsigned char const)31,
 4286|       |    (unsigned char const)31, (unsigned char const)31, (unsigned char const)31,
 4287|       |    (unsigned char const)31, (unsigned char const)31, (unsigned char const)31,
 4288|       |    (unsigned char const)31, (unsigned char const)31, (unsigned char const)31,
 4289|       |    (unsigned char const)31, (unsigned char const)31, (unsigned char const)32,
 4290|       |    (unsigned char const)33, (unsigned char const)33};
 4291|       |static unsigned char const yyr2[56] = {
 4292|       |    (unsigned char const)0, (unsigned char const)2, (unsigned char const)0,
 4293|       |    (unsigned char const)2, (unsigned char const)1, (unsigned char const)1,
 4294|       |    (unsigned char const)1, (unsigned char const)1, (unsigned char const)1,
 4295|       |    (unsigned char const)1, (unsigned char const)1, (unsigned char const)2,
 4296|       |    (unsigned char const)4, (unsigned char const)4, (unsigned char const)6,
 4297|       |    (unsigned char const)6, (unsigned char const)1, (unsigned char const)2,
 4298|       |    (unsigned char const)1, (unsigned char const)1, (unsigned char const)2,
 4299|       |    (unsigned char const)1, (unsigned char const)2, (unsigned char const)2,
 4300|       |    (unsigned char const)3, (unsigned char const)5, (unsigned char const)3,
 4301|       |    (unsigned char const)3, (unsigned char const)3, (unsigned char const)2,
 4302|       |    (unsigned char const)4, (unsigned char const)2, (unsigned char const)3,
 4303|       |    (unsigned char const)2, (unsigned char const)1, (unsigned char const)2,
 4304|       |    (unsigned char const)2, (unsigned char const)1, (unsigned char const)2,
 4305|       |    (unsigned char const)2, (unsigned char const)1, (unsigned char const)2,
 4306|       |    (unsigned char const)2, (unsigned char const)1, (unsigned char const)2,
 4307|       |    (unsigned char const)2, (unsigned char const)1, (unsigned char const)2,
 4308|       |    (unsigned char const)2, (unsigned char const)1, (unsigned char const)2,
 4309|       |    (unsigned char const)2, (unsigned char const)1, (unsigned char const)1,
 4310|       |    (unsigned char const)0, (unsigned char const)1};
 4311|       |static unsigned char const yydefact[66] = {
 4312|       |    (unsigned char const)2,  (unsigned char const)0,  (unsigned char const)1,
 4313|       |    (unsigned char const)21, (unsigned char const)43, (unsigned char const)19,
 4314|       |    (unsigned char const)46, (unsigned char const)16, (unsigned char const)49,
 4315|       |    (unsigned char const)0,  (unsigned char const)40, (unsigned char const)52,
 4316|       |    (unsigned char const)37, (unsigned char const)18, (unsigned char const)0,
 4317|       |    (unsigned char const)53, (unsigned char const)3,  (unsigned char const)4,
 4318|       |    (unsigned char const)5,  (unsigned char const)6,  (unsigned char const)8,
 4319|       |    (unsigned char const)7,  (unsigned char const)9,  (unsigned char const)34,
 4320|       |    (unsigned char const)10, (unsigned char const)22, (unsigned char const)17,
 4321|       |    (unsigned char const)0,  (unsigned char const)29, (unsigned char const)20,
 4322|       |    (unsigned char const)42, (unsigned char const)45, (unsigned char const)48,
 4323|       |    (unsigned char const)39, (unsigned char const)51, (unsigned char const)36,
 4324|       |    (unsigned char const)23, (unsigned char const)41, (unsigned char const)44,
 4325|       |    (unsigned char const)11, (unsigned char const)47, (unsigned char const)31,
 4326|       |    (unsigned char const)38, (unsigned char const)50, (unsigned char const)35,
 4327|       |    (unsigned char const)0,  (unsigned char const)0,  (unsigned char const)0,
 4328|       |    (unsigned char const)33, (unsigned char const)28, (unsigned char const)0,
 4329|       |    (unsigned char const)27, (unsigned char const)32, (unsigned char const)26,
 4330|       |    (unsigned char const)54, (unsigned char const)24, (unsigned char const)30,
 4331|       |    (unsigned char const)55, (unsigned char const)13, (unsigned char const)0,
 4332|       |    (unsigned char const)12, (unsigned char const)0,  (unsigned char const)54,
 4333|       |    (unsigned char const)25, (unsigned char const)15, (unsigned char const)14};
 4334|       |static yysigned_char const yydefgoto[12] = {
 4335|       |    (yysigned_char const)-1, (yysigned_char const)1,  (yysigned_char const)16,
 4336|       |    (yysigned_char const)17, (yysigned_char const)18, (yysigned_char const)19,
 4337|       |    (yysigned_char const)20, (yysigned_char const)21, (yysigned_char const)22,
 4338|       |    (yysigned_char const)23, (yysigned_char const)24, (yysigned_char const)60};
 4339|       |static yysigned_char const yypact[66] = {
 4340|       |    (yysigned_char const)-17, (yysigned_char const)0,
 4341|       |    (yysigned_char const)-17, (yysigned_char const)1,
 4342|       |    (yysigned_char const)-17, (yysigned_char const)-17,
 4343|       |    (yysigned_char const)-17, (yysigned_char const)19,
 4344|       |    (yysigned_char const)-17, (yysigned_char const)-16,
 4345|       |    (yysigned_char const)-17, (yysigned_char const)-17,
 4346|       |    (yysigned_char const)-17, (yysigned_char const)32,
 4347|       |    (yysigned_char const)26,  (yysigned_char const)14,
 4348|       |    (yysigned_char const)-17, (yysigned_char const)-17,
 4349|       |    (yysigned_char const)-17, (yysigned_char const)-17,
 4350|       |    (yysigned_char const)-17, (yysigned_char const)-17,
 4351|       |    (yysigned_char const)-17, (yysigned_char const)27,
 4352|       |    (yysigned_char const)-17, (yysigned_char const)-17,
 4353|       |    (yysigned_char const)-17, (yysigned_char const)-13,
 4354|       |    (yysigned_char const)24,  (yysigned_char const)-17,
 4355|       |    (yysigned_char const)-17, (yysigned_char const)-17,
 4356|       |    (yysigned_char const)-17, (yysigned_char const)-17,
 4357|       |    (yysigned_char const)-17, (yysigned_char const)-17,
 4358|       |    (yysigned_char const)-17, (yysigned_char const)-17,
 4359|       |    (yysigned_char const)-17, (yysigned_char const)-17,
 4360|       |    (yysigned_char const)-17, (yysigned_char const)25,
 4361|       |    (yysigned_char const)-17, (yysigned_char const)-17,
 4362|       |    (yysigned_char const)-17, (yysigned_char const)29,
 4363|       |    (yysigned_char const)30,  (yysigned_char const)31,
 4364|       |    (yysigned_char const)-17, (yysigned_char const)-17,
 4365|       |    (yysigned_char const)33,  (yysigned_char const)-17,
 4366|       |    (yysigned_char const)-17, (yysigned_char const)-17,
 4367|       |    (yysigned_char const)28,  (yysigned_char const)34,
 4368|       |    (yysigned_char const)-17, (yysigned_char const)-17,
 4369|       |    (yysigned_char const)-17, (yysigned_char const)35,
 4370|       |    (yysigned_char const)-17, (yysigned_char const)36,
 4371|       |    (yysigned_char const)-7,  (yysigned_char const)-17,
 4372|       |    (yysigned_char const)-17, (yysigned_char const)-17};
 4373|       |static yysigned_char const yypgoto[12] = {
 4374|       |    (yysigned_char const)-17, (yysigned_char const)-17,
 4375|       |    (yysigned_char const)-17, (yysigned_char const)-17,
 4376|       |    (yysigned_char const)-17, (yysigned_char const)-17,
 4377|       |    (yysigned_char const)-17, (yysigned_char const)-17,
 4378|       |    (yysigned_char const)-17, (yysigned_char const)-17,
 4379|       |    (yysigned_char const)-17, (yysigned_char const)-12};
 4380|       |static unsigned char const yytable[56] = {
 4381|       |    (unsigned char const)2,  (unsigned char const)27, (unsigned char const)28,
 4382|       |    (unsigned char const)57, (unsigned char const)49, (unsigned char const)3,
 4383|       |    (unsigned char const)4,  (unsigned char const)5,  (unsigned char const)6,
 4384|       |    (unsigned char const)7,  (unsigned char const)64, (unsigned char const)8,
 4385|       |    (unsigned char const)9,  (unsigned char const)10, (unsigned char const)11,
 4386|       |    (unsigned char const)12, (unsigned char const)13, (unsigned char const)14,
 4387|       |    (unsigned char const)15, (unsigned char const)36, (unsigned char const)37,
 4388|       |    (unsigned char const)25, (unsigned char const)38, (unsigned char const)26,
 4389|       |    (unsigned char const)39, (unsigned char const)40, (unsigned char const)41,
 4390|       |    (unsigned char const)42, (unsigned char const)43, (unsigned char const)44,
 4391|       |    (unsigned char const)48, (unsigned char const)45, (unsigned char const)30,
 4392|       |    (unsigned char const)46, (unsigned char const)31, (unsigned char const)47,
 4393|       |    (unsigned char const)29, (unsigned char const)32, (unsigned char const)57,
 4394|       |    (unsigned char const)33, (unsigned char const)34, (unsigned char const)35,
 4395|       |    (unsigned char const)51, (unsigned char const)52, (unsigned char const)50,
 4396|       |    (unsigned char const)58, (unsigned char const)53, (unsigned char const)59,
 4397|       |    (unsigned char const)54, (unsigned char const)55, (unsigned char const)65,
 4398|       |    (unsigned char const)56, (unsigned char const)0,  (unsigned char const)62,
 4399|       |    (unsigned char const)63, (unsigned char const)61};
 4400|       |static yysigned_char const yycheck[56] = {
 4401|       |    (yysigned_char const)0,  (yysigned_char const)17, (yysigned_char const)18,
 4402|       |    (yysigned_char const)10, (yysigned_char const)17, (yysigned_char const)5,
 4403|       |    (yysigned_char const)6,  (yysigned_char const)7,  (yysigned_char const)8,
 4404|       |    (yysigned_char const)9,  (yysigned_char const)17, (yysigned_char const)11,
 4405|       |    (yysigned_char const)12, (yysigned_char const)13, (yysigned_char const)14,
 4406|       |    (yysigned_char const)15, (yysigned_char const)16, (yysigned_char const)17,
 4407|       |    (yysigned_char const)18, (yysigned_char const)5,  (yysigned_char const)6,
 4408|       |    (yysigned_char const)20, (yysigned_char const)8,  (yysigned_char const)4,
 4409|       |    (yysigned_char const)10, (yysigned_char const)11, (yysigned_char const)12,
 4410|       |    (yysigned_char const)13, (yysigned_char const)14, (yysigned_char const)15,
 4411|       |    (yysigned_char const)3,  (yysigned_char const)17, (yysigned_char const)6,
 4412|       |    (yysigned_char const)19, (yysigned_char const)8,  (yysigned_char const)21,
 4413|       |    (yysigned_char const)4,  (yysigned_char const)11, (yysigned_char const)10,
 4414|       |    (yysigned_char const)13, (yysigned_char const)14, (yysigned_char const)15,
 4415|       |    (yysigned_char const)17, (yysigned_char const)18, (yysigned_char const)20,
 4416|       |    (yysigned_char const)17, (yysigned_char const)17, (yysigned_char const)19,
 4417|       |    (yysigned_char const)18, (yysigned_char const)18, (yysigned_char const)62,
 4418|       |    (yysigned_char const)18, (yysigned_char const)-1, (yysigned_char const)18,
 4419|       |    (yysigned_char const)18, (yysigned_char const)21};
 4420|       |static unsigned char const yystos[66] = {
 4421|       |    (unsigned char const)0,  (unsigned char const)23, (unsigned char const)0,
 4422|       |    (unsigned char const)5,  (unsigned char const)6,  (unsigned char const)7,
 4423|       |    (unsigned char const)8,  (unsigned char const)9,  (unsigned char const)11,
 4424|       |    (unsigned char const)12, (unsigned char const)13, (unsigned char const)14,
 4425|       |    (unsigned char const)15, (unsigned char const)16, (unsigned char const)17,
 4426|       |    (unsigned char const)18, (unsigned char const)24, (unsigned char const)25,
 4427|       |    (unsigned char const)26, (unsigned char const)27, (unsigned char const)28,
 4428|       |    (unsigned char const)29, (unsigned char const)30, (unsigned char const)31,
 4429|       |    (unsigned char const)32, (unsigned char const)20, (unsigned char const)4,
 4430|       |    (unsigned char const)17, (unsigned char const)18, (unsigned char const)4,
 4431|       |    (unsigned char const)6,  (unsigned char const)8,  (unsigned char const)11,
 4432|       |    (unsigned char const)13, (unsigned char const)14, (unsigned char const)15,
 4433|       |    (unsigned char const)5,  (unsigned char const)6,  (unsigned char const)8,
 4434|       |    (unsigned char const)10, (unsigned char const)11, (unsigned char const)12,
 4435|       |    (unsigned char const)13, (unsigned char const)14, (unsigned char const)15,
 4436|       |    (unsigned char const)17, (unsigned char const)19, (unsigned char const)21,
 4437|       |    (unsigned char const)3,  (unsigned char const)17, (unsigned char const)20,
 4438|       |    (unsigned char const)17, (unsigned char const)18, (unsigned char const)17,
 4439|       |    (unsigned char const)18, (unsigned char const)18, (unsigned char const)18,
 4440|       |    (unsigned char const)10, (unsigned char const)17, (unsigned char const)19,
 4441|       |    (unsigned char const)33, (unsigned char const)21, (unsigned char const)18,
 4442|       |    (unsigned char const)18, (unsigned char const)17, (unsigned char const)33};
 4443|       |static table const meridian_table[5] = {{"AM", 265, 0},
 4444|       |                                        {"A.M.", 265, 0},
 4445|       |                                        {"PM", 265, 1},
 4446|       |                                        {"P.M.", 265, 1},
 4447|       |                                        {(char const *)0, 0, 0}};
 4448|       |static table const dst_table[1] = {{"DST", 259, 0}};
 4449|       |static table const month_and_day_table[25] = {
 4450|       |    {"JANUARY", 267, 1},    {"FEBRUARY", 267, 2}, {"MARCH", 267, 3},
 4451|       |    {"APRIL", 267, 4},      {"MAY", 267, 5},      {"JUNE", 267, 6},
 4452|       |    {"JULY", 267, 7},       {"AUGUST", 267, 8},   {"SEPTEMBER", 267, 9},
 4453|       |    {"SEPT", 267, 9},       {"OCTOBER", 267, 10}, {"NOVEMBER", 267, 11},
 4454|       |    {"DECEMBER", 267, 12},  {"SUNDAY", 260, 0},   {"MONDAY", 260, 1},
 4455|       |    {"TUESDAY", 260, 2},    {"TUES", 260, 2},     {"WEDNESDAY", 260, 3},
 4456|       |    {"WEDNES", 260, 3},     {"THURSDAY", 260, 4}, {"THUR", 260, 4},
 4457|       |    {"THURS", 260, 4},      {"FRIDAY", 260, 5},   {"SATURDAY", 260, 6},
 4458|       |    {(char const *)0, 0, 0}};
 4459|       |static table const time_units_table[11] = {
 4460|       |    {"YEAR", 270, 1},   {"MONTH", 268, 1},      {"FORTNIGHT", 261, 14},
 4461|       |    {"WEEK", 261, 7},   {"DAY", 261, 1},        {"HOUR", 263, 1},
 4462|       |    {"MINUTE", 266, 1}, {"MIN", 266, 1},        {"SECOND", 269, 1},
 4463|       |    {"SEC", 269, 1},    {(char const *)0, 0, 0}};
 4464|       |static table const relative_time_table[20] = {
 4465|       |    {"TOMORROW", 261, 1}, {"YESTERDAY", 261, -1}, {"TODAY", 261, 0},
 4466|       |    {"NOW", 261, 0},      {"LAST", 273, -1},      {"THIS", 273, 0},
 4467|       |    {"NEXT", 273, 1},     {"FIRST", 273, 1},      {"THIRD", 273, 3},
 4468|       |    {"FOURTH", 273, 4},   {"FIFTH", 273, 5},      {"SIXTH", 273, 6},
 4469|       |    {"SEVENTH", 273, 7},  {"EIGHTH", 273, 8},     {"NINTH", 273, 9},
 4470|       |    {"TENTH", 273, 10},   {"ELEVENTH", 273, 11},  {"TWELFTH", 273, 12},
 4471|       |    {"AGO", 258, 1},      {(char const *)0, 0, 0}};
 4472|       |static table const time_zone_table[51] = {
 4473|       |    {"GMT", 271, 0},     {"UT", 271, 0},     {"UTC", 271, 0},
 4474|       |    {"WET", 271, 0},     {"WEST", 262, 0},   {"BST", 262, 0},
 4475|       |    {"ART", 271, -180},  {"BRT", 271, -180}, {"BRST", 262, -180},
 4476|       |    {"NST", 271, -210},  {"NDT", 262, -210}, {"AST", 271, -240},
 4477|       |    {"ADT", 262, -240},  {"CLT", 271, -240}, {"CLST", 262, -240},
 4478|       |    {"EST", 271, -300},  {"EDT", 262, -300}, {"CST", 271, -360},
 4479|       |    {"CDT", 262, -360},  {"MST", 271, -420}, {"MDT", 262, -420},
 4480|       |    {"PST", 271, -480},  {"PDT", 262, -480}, {"AKST", 271, -540},
 4481|       |    {"AKDT", 262, -540}, {"HST", 271, -600}, {"HAST", 271, -600},
 4482|       |    {"HADT", 262, -600}, {"SST", 271, -720}, {"WAT", 271, 60},
 4483|       |    {"CET", 271, 60},    {"CEST", 262, 60},  {"MET", 271, 60},
 4484|       |    {"MEZ", 271, 60},    {"MEST", 262, 60},  {"MESZ", 262, 60},
 4485|       |    {"EET", 271, 120},   {"EEST", 262, 120}, {"CAT", 271, 120},
 4486|       |    {"SAST", 271, 120},  {"EAT", 271, 180},  {"MSK", 271, 180},
 4487|       |    {"MSD", 262, 180},   {"IST", 271, 330},  {"SGT", 271, 480},
 4488|       |    {"KST", 271, 540},   {"JST", 271, 540},  {"GST", 271, 600},
 4489|       |    {"NZST", 271, 720},  {"NZDT", 262, 720}, {(char const *)0, 0, 0}};
 4490|       |static table const military_table[26] = {
 4491|       |    {"A", 271, -60},  {"B", 271, -120},       {"C", 271, -180},
 4492|       |    {"D", 271, -240}, {"E", 271, -300},       {"F", 271, -360},
 4493|       |    {"G", 271, -420}, {"H", 271, -480},       {"I", 271, -540},
 4494|       |    {"K", 271, -600}, {"L", 271, -660},       {"M", 271, -720},
 4495|       |    {"N", 271, 60},   {"O", 271, 120},        {"P", 271, 180},
 4496|       |    {"Q", 271, 240},  {"R", 271, 300},        {"S", 271, 360},
 4497|       |    {"T", 271, 420},  {"U", 271, 480},        {"V", 271, 540},
 4498|       |    {"W", 271, 600},  {"X", 271, 660},        {"Y", 271, 720},
 4499|       |    {"Z", 271, 0},    {(char const *)0, 0, 0}};
 4500|       |extern char *getcwd(char *buf, size_t size);
 4501|       |__attribute__((__nothrow__)) char *(__attribute__((__leaf__)) rpl_getcwd)(
 4502|       |    char *buf, size_t size);
 4503|      0|char *(__attribute__((__leaf__)) rpl_getcwd)(char *buf, size_t size) {
 4504|      0|  char *cwd;
 4505|      0|  char *tmp;
 4506|      0|  size_t tmp___0;
 4507|      0|  int tmp___1;
 4508|      0|  int *tmp___2;
 4509|      0|  char *__cil_tmp8;
 4510|       |
 4511|      0|  {
 4512|      0|    {
 4513|      0|      tmp = getcwd(buf, size);
 4514|      0|      cwd = tmp;
 4515|      0|    }
 4516|      0|    if ((unsigned long)cwd == (unsigned long)((void *)0)) {
 4517|      0|      return ((char *)((void *)0));
 4518|      0|    }
 4519|      0|    { tmp___0 = strlen((char const *)cwd); }
 4520|      0|    if (tmp___0 <= 3839UL) {
 4521|      0|      return (cwd);
 4522|      0|    } else {
 4523|      0|      { tmp___1 = same_name((char const *)cwd, "."); }
 4524|      0|      if (tmp___1) {
 4525|      0|        return (cwd);
 4526|      0|      }
 4527|      0|    }
 4528|      0|    {
 4529|      0|      rpl_free((void *)cwd);
 4530|      0|      tmp___2 = __errno_location();
 4531|      0|      *tmp___2 = 36;
 4532|      0|    }
 4533|      0|    return ((char *)((void *)0));
 4534|      0|  }
 4535|      0|}
 4536|       |extern __attribute__((__nothrow__)) int(__attribute__((
 4537|       |    __nonnull__(2), __leaf__)) fstat)(int __fd, struct stat *__buf);
 4538|       |extern void(__attribute__((__nonnull__(1, 4))) qsort)(
 4539|       |    void *__base, size_t __nmemb, size_t __size,
 4540|       |    int (*__compar)(void const *, void const *));
 4541|       |extern char *(__attribute__((__nonnull__(1))) strrchr)(char const *__s, int __c)
 4542|       |    __attribute__((__pure__));
 4543|       |extern int(__attribute__((__nonnull__(1))) dirfd)(DIR *__dirp);
 4544|       |extern __attribute__((__nothrow__)) int(
 4545|       |    __attribute__((__nonnull__(1, 2), __leaf__)) statfs)(char const *__file,
 4546|       |                                                         struct statfs *__buf);
 4547|       |extern __attribute__((__nothrow__)) void(__attribute__((__leaf__)) free)(
 4548|       |    void *__ptr);
 4549|       |__attribute__((__nothrow__)) void(__attribute__((__leaf__)) rpl_free)(void *p);
 4550|      0|void(__attribute__((__leaf__)) rpl_free)(void *p) {
 4551|       |
 4552|      0|  {
 4553|      0|    if (p) {
 4554|      0|      {
 4555|      0|        free(p);
 4556|      0|      }
 4557|      0|    }
 4558|      0|    return;
 4559|      0|  }
 4560|      0|}
 4561|       |extern __attribute__((__nothrow__))
 4562|       |FILE *(__attribute__((__leaf__)) fdopen)(int __fd, char const *__modes);
 4563|       |extern __attribute__((__nothrow__)) int(__attribute__((__leaf__)) fileno)(
 4564|       |    FILE *__stream);
 4565|       |int volatile exit_failure = (int volatile)1;
 4566|       |extern struct _IO_FILE *stdin;
 4567|       |extern __attribute__((__nothrow__)) int(
 4568|       |    __attribute__((__nonnull__(1, 2), __leaf__)) strcasecmp)(char const *__s1,
 4569|       |                                                             char const *__s2)
 4570|       |    __attribute__((__pure__));
 4571|       |extern __attribute__((__nothrow__)) int(__attribute__((__nonnull__(1, 2),
 4572|       |                                                       __leaf__)) strncasecmp)(
 4573|       |    char const *__s1, char const *__s2, size_t __n) __attribute__((__pure__));
 4574|       |extern int fnmatch(char const *__pattern, char const *__name, int __flags);
 4575|       |extern int fcntl(int __fd, int __cmd, ...);
 4576|       |size_t dir_len(char const *path);
 4577|      0|size_t dir_len(char const *path) {
 4578|      0|  size_t prefix_length;
 4579|      0|  size_t length;
 4580|      0|  char *tmp;
 4581|       |
 4582|      0|  {
 4583|      0|    {
 4584|      0|      prefix_length = (size_t)0;
 4585|      0|      tmp = base_name(path);
 4586|      0|      length = (size_t)(tmp - (char *)path);
 4587|      0|    }
 4588|      0|    {
 4589|      0|      while (1) {
 4590|      0|      while_continue: /* CIL Label */
 4591|      0|          ;
 4592|       |
 4593|      0|        if (!(prefix_length < length)) {
 4594|      0|          goto while_break;
 4595|      0|        }
 4596|      0|        if (!((int const) * (path + (length - 1UL)) == 47)) {
 4597|      0|          return (length);
 4598|      0|        }
 4599|      0|        length--;
 4600|      0|      }
 4601|      0|    while_break___0: /* CIL Label */
 4602|      0|        ;
 4603|      0|    }
 4604|      0|  while_break:;
 4605|      0|    return (prefix_length +
 4606|      0|            (size_t)((int const) * (path + prefix_length) == 47));
 4607|      0|  }
 4608|      0|}
 4609|      0|char *dir_name(char const *path) {
 4610|      0|  size_t length;
 4611|      0|  size_t tmp;
 4612|      0|  int append_dot;
 4613|      0|  char *newpath;
 4614|      0|  void *tmp___0;
 4615|      0|  size_t tmp___1;
 4616|       |
 4617|      0|  {
 4618|      0|    {
 4619|      0|      tmp = dir_len(path);
 4620|      0|      length = tmp;
 4621|      0|      append_dot = length == 0UL;
 4622|      0|      tmp___0 = xmalloc((length + (size_t)append_dot) + 1UL);
 4623|      0|      newpath = (char *)tmp___0;
 4624|      0|      memcpy((void * /* __restrict  */)((void *)newpath),
 4625|      0|             (void const * /* __restrict  */)((void const *)path), length);
 4626|      0|    }
 4627|      0|    if (append_dot) {
 4628|      0|      tmp___1 = length;
 4629|      0|      length++;
 4630|      0|      *(newpath + tmp___1) = (char)'.';
 4631|      0|    }
 4632|      0|    *(newpath + length) = (char)0;
 4633|      0|    return (newpath);
 4634|      0|  }
 4635|      0|}
 4636|       |char const diacrit_base[256];
 4637|       |char const diacrit_diac[256];
 4638|       |char const diacrit_base[256] = {
 4639|       |    (char const)0,   (char const)0,   (char const)0,   (char const)0,
 4640|       |    (char const)0,   (char const)0,   (char const)0,   (char const)0,
 4641|       |    (char const)0,   (char const)0,   (char const)0,   (char const)0,
 4642|       |    (char const)0,   (char const)0,   (char const)0,   (char const)0,
 4643|       |    (char const)0,   (char const)0,   (char const)0,   (char const)0,
 4644|       |    (char const)0,   (char const)0,   (char const)0,   (char const)0,
 4645|       |    (char const)0,   (char const)0,   (char const)0,   (char const)0,
 4646|       |    (char const)0,   (char const)0,   (char const)0,   (char const)0,
 4647|       |    (char const)0,   (char const)0,   (char const)0,   (char const)0,
 4648|       |    (char const)0,   (char const)0,   (char const)0,   (char const)0,
 4649|       |    (char const)0,   (char const)0,   (char const)0,   (char const)0,
 4650|       |    (char const)0,   (char const)0,   (char const)0,   (char const)0,
 4651|       |    (char const)0,   (char const)0,   (char const)0,   (char const)0,
 4652|       |    (char const)0,   (char const)0,   (char const)0,   (char const)0,
 4653|       |    (char const)0,   (char const)0,   (char const)0,   (char const)0,
 4654|       |    (char const)0,   (char const)0,   (char const)0,   (char const)0,
 4655|       |    (char const)0,   (char const)'A', (char const)'B', (char const)'C',
 4656|       |    (char const)'D', (char const)'E', (char const)'F', (char const)'G',
 4657|       |    (char const)'H', (char const)'I', (char const)'J', (char const)'K',
 4658|       |    (char const)'L', (char const)'M', (char const)'N', (char const)'O',
 4659|       |    (char const)'P', (char const)'Q', (char const)'R', (char const)'S',
 4660|       |    (char const)'T', (char const)'U', (char const)'V', (char const)'W',
 4661|       |    (char const)'X', (char const)'Y', (char const)'Z', (char const)0,
 4662|       |    (char const)0,   (char const)0,   (char const)0,   (char const)0,
 4663|       |    (char const)0,   (char const)'a', (char const)'b', (char const)'c',
 4664|       |    (char const)'d', (char const)'e', (char const)'f', (char const)'g',
 4665|       |    (char const)'h', (char const)'i', (char const)'j', (char const)'k',
 4666|       |    (char const)'l', (char const)'m', (char const)'n', (char const)'o',
 4667|       |    (char const)'p', (char const)'q', (char const)'r', (char const)'s',
 4668|       |    (char const)'t', (char const)'u', (char const)'v', (char const)'w',
 4669|       |    (char const)'x', (char const)'y', (char const)'z', (char const)0,
 4670|       |    (char const)0,   (char const)0,   (char const)0,   (char const)0,
 4671|       |    (char const)0,   (char const)0,   (char const)0,   (char const)0,
 4672|       |    (char const)0,   (char const)0,   (char const)0,   (char const)0,
 4673|       |    (char const)0,   (char const)0,   (char const)0,   (char const)0,
 4674|       |    (char const)0,   (char const)0,   (char const)0,   (char const)0,
 4675|       |    (char const)0,   (char const)0,   (char const)0,   (char const)0,
 4676|       |    (char const)0,   (char const)0,   (char const)0,   (char const)0,
 4677|       |    (char const)0,   (char const)0,   (char const)0,   (char const)0,
 4678|       |    (char const)0,   (char const)0,   (char const)0,   (char const)0,
 4679|       |    (char const)0,   (char const)0,   (char const)0,   (char const)0,
 4680|       |    (char const)0,   (char const)0,   (char const)0,   (char const)0,
 4681|       |    (char const)0,   (char const)0,   (char const)0,   (char const)0,
 4682|       |    (char const)0,   (char const)0,   (char const)0,   (char const)0,
 4683|       |    (char const)0,   (char const)0,   (char const)0,   (char const)0,
 4684|       |    (char const)0,   (char const)0,   (char const)0,   (char const)0,
 4685|       |    (char const)0,   (char const)0,   (char const)0,   (char const)0,
 4686|       |    (char const)0,   (char const)0,   (char const)0,   (char const)0,
 4687|       |    (char const)'A', (char const)'A', (char const)'A', (char const)'A',
 4688|       |    (char const)'A', (char const)'A', (char const)'A', (char const)'C',
 4689|       |    (char const)'E', (char const)'E', (char const)'E', (char const)'E',
 4690|       |    (char const)'I', (char const)'I', (char const)'I', (char const)'I',
 4691|       |    (char const)0,   (char const)'N', (char const)'O', (char const)'O',
 4692|       |    (char const)'O', (char const)'O', (char const)'O', (char const)0,
 4693|       |    (char const)'O', (char const)'U', (char const)'U', (char const)'U',
 4694|       |    (char const)'U', (char const)'Y', (char const)0,   (char const)0,
 4695|       |    (char const)'a', (char const)'a', (char const)'a', (char const)'a',
 4696|       |    (char const)'a', (char const)'a', (char const)'a', (char const)'c',
 4697|       |    (char const)'e', (char const)'e', (char const)'e', (char const)'e',
 4698|       |    (char const)'i', (char const)'i', (char const)'i', (char const)'i',
 4699|       |    (char const)0,   (char const)'n', (char const)'o', (char const)'o',
 4700|       |    (char const)'o', (char const)'o', (char const)'o', (char const)0,
 4701|       |    (char const)'o', (char const)'u', (char const)'u', (char const)'u',
 4702|       |    (char const)'u', (char const)'y', (char const)0,   (char const)'y'};
 4703|       |char const diacrit_diac[256] = {
 4704|       |    (char const)0, (char const)0, (char const)0, (char const)0, (char const)0,
 4705|       |    (char const)0, (char const)0, (char const)0, (char const)0, (char const)0,
 4706|       |    (char const)0, (char const)0, (char const)0, (char const)0, (char const)0,
 4707|       |    (char const)0, (char const)0, (char const)0, (char const)0, (char const)0,
 4708|       |    (char const)0, (char const)0, (char const)0, (char const)0, (char const)0,
 4709|       |    (char const)0, (char const)0, (char const)0, (char const)0, (char const)0,
 4710|       |    (char const)0, (char const)0, (char const)0, (char const)0, (char const)0,
 4711|       |    (char const)0, (char const)0, (char const)0, (char const)0, (char const)0,
 4712|       |    (char const)0, (char const)0, (char const)0, (char const)0, (char const)0,
 4713|       |    (char const)0, (char const)0, (char const)0, (char const)0, (char const)0,
 4714|       |    (char const)0, (char const)0, (char const)0, (char const)0, (char const)0,
 4715|       |    (char const)0, (char const)0, (char const)0, (char const)0, (char const)0,
 4716|       |    (char const)0, (char const)0, (char const)0, (char const)0, (char const)0,
 4717|       |    (char const)0, (char const)0, (char const)0, (char const)0, (char const)0,
 4718|       |    (char const)0, (char const)0, (char const)0, (char const)0, (char const)0,
 4719|       |    (char const)0, (char const)0, (char const)0, (char const)0, (char const)0,
 4720|       |    (char const)0, (char const)0, (char const)0, (char const)0, (char const)0,
 4721|       |    (char const)0, (char const)0, (char const)0, (char const)0, (char const)0,
 4722|       |    (char const)0, (char const)0, (char const)0, (char const)0, (char const)4,
 4723|       |    (char const)0, (char const)3, (char const)0, (char const)0, (char const)0,
 4724|       |    (char const)0, (char const)0, (char const)0, (char const)0, (char const)0,
 4725|       |    (char const)0, (char const)0, (char const)0, (char const)0, (char const)0,
 4726|       |    (char const)0, (char const)0, (char const)0, (char const)0, (char const)0,
 4727|       |    (char const)0, (char const)0, (char const)0, (char const)0, (char const)0,
 4728|       |    (char const)0, (char const)0, (char const)0, (char const)0, (char const)0,
 4729|       |    (char const)0, (char const)6, (char const)0, (char const)0, (char const)0,
 4730|       |    (char const)0, (char const)0, (char const)0, (char const)0, (char const)0,
 4731|       |    (char const)0, (char const)0, (char const)0, (char const)0, (char const)0,
 4732|       |    (char const)0, (char const)0, (char const)0, (char const)0, (char const)0,
 4733|       |    (char const)0, (char const)0, (char const)0, (char const)0, (char const)0,
 4734|       |    (char const)0, (char const)0, (char const)0, (char const)0, (char const)0,
 4735|       |    (char const)0, (char const)0, (char const)0, (char const)0, (char const)0,
 4736|       |    (char const)0, (char const)0, (char const)0, (char const)0, (char const)0,
 4737|       |    (char const)0, (char const)0, (char const)0, (char const)0, (char const)0,
 4738|       |    (char const)0, (char const)0, (char const)0, (char const)0, (char const)0,
 4739|       |    (char const)0, (char const)0, (char const)0, (char const)0, (char const)0,
 4740|       |    (char const)0, (char const)0, (char const)0, (char const)0, (char const)0,
 4741|       |    (char const)0, (char const)0, (char const)0, (char const)0, (char const)0,
 4742|       |    (char const)0, (char const)0, (char const)3, (char const)2, (char const)4,
 4743|       |    (char const)6, (char const)5, (char const)8, (char const)1, (char const)7,
 4744|       |    (char const)3, (char const)2, (char const)4, (char const)5, (char const)3,
 4745|       |    (char const)2, (char const)4, (char const)5, (char const)0, (char const)6,
 4746|       |    (char const)3, (char const)2, (char const)4, (char const)6, (char const)5,
 4747|       |    (char const)0, (char const)9, (char const)3, (char const)2, (char const)4,
 4748|       |    (char const)5, (char const)2, (char const)0, (char const)0, (char const)3,
 4749|       |    (char const)2, (char const)4, (char const)6, (char const)5, (char const)8,
 4750|       |    (char const)1, (char const)7, (char const)3, (char const)2, (char const)4,
 4751|       |    (char const)5, (char const)3, (char const)2, (char const)4, (char const)5,
 4752|       |    (char const)0, (char const)6, (char const)3, (char const)2, (char const)4,
 4753|       |    (char const)6, (char const)5, (char const)0, (char const)9, (char const)3,
 4754|       |    (char const)2, (char const)4, (char const)5, (char const)2, (char const)0,
 4755|       |    (char const)0};
 4756|       |void close_stdout(void);
 4757|       |extern __attribute__((__nothrow__))
 4758|       |size_t(__attribute__((__leaf__)) __fpending)(FILE *__fp);
 4759|       |static char const *file_name;
 4760|      6|void close_stdout(void) {
 4761|      6|  int e;
 4762|      6|  int tmp___0;
 4763|      6|  int tmp___1;
 4764|      6|  size_t tmp___2;
 4765|      6|  int *tmp___3;
 4766|      6|  int tmp___4;
 4767|      6|  char const *write_error;
 4768|      6|  char *tmp___5;
 4769|      6|  char *tmp___6;
 4770|      6|  char *__cil_tmp10;
 4771|       |
 4772|      6|  {
 4773|      6|    { tmp___1 = ferror_unlocked(stdout); }
 4774|      6|    if (tmp___1) {
 4775|      0|      tmp___0 = 0;
 4776|      6|    } else {
 4777|      6|      tmp___0 = -1;
 4778|      6|    }
 4779|      6|    e = tmp___0;
 4780|      6|    if (e) {
 4781|      6|      {
 4782|      6|        tmp___2 = __fpending(stdout);
 4783|      6|      }
 4784|      6|      if (tmp___2 == 0UL) {
 4785|      6|        return;
 4786|      6|      }
 4787|      6|    }
 4788|      0|    { tmp___4 = fclose(stdout); }
 4789|      0|    if (tmp___4 != 0) {
 4790|      0|      {
 4791|      0|        tmp___3 = __errno_location();
 4792|      0|        e = *tmp___3;
 4793|      0|      }
 4794|      0|    }
 4795|      0|    if (0 <= e) {
 4796|      0|      {
 4797|      0|        tmp___5 = gettext("write error");
 4798|      0|        write_error = (char const *)tmp___5;
 4799|      0|      }
 4800|      0|      if (file_name) {
 4801|      0|        {
 4802|      0|          tmp___6 = quotearg_colon(file_name);
 4803|      0|          error((int)exit_failure, e, "%s: %s", tmp___6, write_error);
 4804|      0|        }
 4805|      0|      } else {
 4806|      0|        { error((int)exit_failure, e, "%s", write_error); }
 4807|      0|      }
 4808|      0|    }
 4809|      0|    return;
 4810|      6|  }
 4811|      6|}
 4812|       |extern struct hostent *gethostbyaddr(void const *__addr, __socklen_t __len,
 4813|       |                                     int __type);
 4814|       |extern struct hostent *gethostbyname(char const *__name);
 4815|       |extern __attribute__((__nothrow__)) char *(__attribute__((__leaf__)) inet_ntoa)(
 4816|       |    struct in_addr __in);
 4817|       |extern __attribute__((__nothrow__)) double(__attribute__((
 4818|       |    __nonnull__(1), __leaf__)) strtod)(char const *__restrict __nptr,
 4819|       |                                       char **__restrict __endptr);
 4820|      0|char *base_name(char const *name) {
 4821|      0|  char const *base;
 4822|      0|  char const *p;
 4823|       |
 4824|      0|  {
 4825|      0|    base = name + 0;
 4826|      0|    p = base;
 4827|      0|    {
 4828|      0|      while (1) {
 4829|      0|      while_continue: /* CIL Label */
 4830|      0|          ;
 4831|       |
 4832|      0|        if (!*p) {
 4833|      0|          goto while_break;
 4834|      0|        }
 4835|      0|        if ((int const) * p == 47) {
 4836|      0|          {
 4837|      0|            while (1) {
 4838|      0|            while_continue___0: /* CIL Label */
 4839|      0|                ;
 4840|      0|              p++;
 4841|      0|              if (!((int const) * p == 47)) {
 4842|      0|                goto while_break___0;
 4843|      0|              }
 4844|      0|            }
 4845|      0|          while_break___2: /* CIL Label */
 4846|      0|              ;
 4847|      0|          }
 4848|      0|        while_break___0:;
 4849|      0|          if (!*p) {
 4850|      0|            if ((int const) * base == 47) {
 4851|      0|              base = p - 1;
 4852|      0|            }
 4853|      0|            goto while_break;
 4854|      0|          }
 4855|      0|          base = p;
 4856|      0|        }
 4857|      0|        p++;
 4858|      0|      }
 4859|      0|    while_break___1: /* CIL Label */
 4860|      0|        ;
 4861|      0|    }
 4862|      0|  while_break:;
 4863|      0|    return ((char *)base);
 4864|      0|  }
 4865|      0|}
 4866|      0|size_t base_len(char const *name) {
 4867|      0|  size_t len;
 4868|       |
 4869|      0|  {
 4870|      0|    { len = strlen(name); }
 4871|      0|    {
 4872|      0|      while (1) {
 4873|      0|      while_continue: /* CIL Label */
 4874|      0|          ;
 4875|       |
 4876|      0|        if (1UL < len) {
 4877|      0|          if (!((int const) * (name + (len - 1UL)) == 47)) {
 4878|      0|            goto while_break;
 4879|      0|          }
 4880|      0|        } else {
 4881|      0|          goto while_break;
 4882|      0|        }
 4883|      0|        goto __Cont;
 4884|      0|      __Cont:
 4885|      0|        len--;
 4886|      0|      }
 4887|      0|    while_break___0: /* CIL Label */
 4888|      0|        ;
 4889|      0|    }
 4890|      0|  while_break:;
 4891|      0|    return (len);
 4892|      0|  }
 4893|      0|}
 4894|       |void (*argmatch_die)(void);
 4895|       |char const *simple_backup_suffix;
 4896|       |char const *simple_backup_suffix = "~";
 4897|       |static char const *const backup_args[9] = {
 4898|       |    (char const * /* const  */) "none",
 4899|       |    (char const * /* const  */) "off",
 4900|       |    (char const * /* const  */) "simple",
 4901|       |    (char const * /* const  */) "never",
 4902|       |    (char const * /* const  */) "existing",
 4903|       |    (char const * /* const  */) "nil",
 4904|       |    (char const * /* const  */) "numbered",
 4905|       |    (char const * /* const  */) "t",
 4906|       |    (char const * /* const  */)((char const *)0)};
 4907|       |static enum backup_type const backup_types[8] = {
 4908|       |    (enum backup_type const)0, (enum backup_type const)0,
 4909|       |    (enum backup_type const)1, (enum backup_type const)1,
 4910|       |    (enum backup_type const)2, (enum backup_type const)2,
 4911|       |    (enum backup_type const)3, (enum backup_type const)3};
 4912|       |extern struct _IO_FILE *stderr;
 4913|       |void usage(int status);
 4914|       |extern __attribute__((__nothrow__)) long(__attribute__((
 4915|       |    __nonnull__(1), __leaf__)) pathconf)(char const *__path, int __name);
 4916|       |extern int printf(char const *__restrict __format, ...);
 4917|       |extern char *optarg;
 4918|       |extern __attribute__((__nothrow__)) int(
 4919|       |    __attribute__((__nonnull__(1), __leaf__)) atexit)(void (*__func)(void));
 4920|       |extern __attribute__((__nothrow__)) char *(
 4921|       |    __attribute__((__leaf__)) textdomain)(char const *__domainname);
 4922|       |extern __attribute__((__nothrow__)) char *(__attribute__((
 4923|       |    __leaf__)) bindtextdomain)(char const *__domainname, char const *__dirname);
 4924|       |char *program_name;
 4925|       |static int create_parents;
 4926|       |static struct option const longopts[6] = {
 4927|       |    {"mode", 1, (int *)((void *)0), 'm'},
 4928|       |    {"parents", 0, (int *)((void *)0), 'p'},
 4929|       |    {"verbose", 0, (int *)((void *)0), 'v'},
 4930|       |    {"help", 0, (int *)0, -130},
 4931|       |    {"version", 0, (int *)0, -131},
 4932|       |    {(char const *)((void *)0), 0, (int *)((void *)0), 0}};
 4933|      0|void usage(int status) {
 4934|      0|  char *tmp;
 4935|      0|  char *tmp___0;
 4936|      0|  char *tmp___1;
 4937|      0|  char *tmp___2;
 4938|      0|  char *tmp___3;
 4939|      0|  char *tmp___4;
 4940|      0|  char *tmp___5;
 4941|      0|  char *tmp___6;
 4942|      0|  char *__cil_tmp10;
 4943|      0|  char *__cil_tmp11;
 4944|      0|  char *__cil_tmp12;
 4945|      0|  char *__cil_tmp13;
 4946|      0|  char *__cil_tmp14;
 4947|      0|  char *__cil_tmp15;
 4948|      0|  char *__cil_tmp16;
 4949|      0|  char *__cil_tmp17;
 4950|       |
 4951|      0|  {
 4952|      0|    if (status != 0) {
 4953|      0|      {
 4954|      0|        tmp = gettext("Try `%s --help\' for more information.\n");
 4955|      0|        fprintf((FILE * /* __restrict  */)stderr,
 4956|      0|                (char const * /* __restrict  */)((char const *)tmp),
 4957|      0|                program_name);
 4958|      0|      }
 4959|      0|    } else {
 4960|      0|      {
 4961|      0|        tmp___0 = gettext("Usage: %s [OPTION] DIRECTORY...\n");
 4962|      0|        printf((char const * /* __restrict  */)((char const *)tmp___0),
 4963|      0|               program_name);
 4964|      0|        tmp___1 = gettext(
 4965|      0|            "Create the DIRECTORY(ies), if they do not already exist.\n\n");
 4966|      0|        fputs_unlocked((char const * /* __restrict  */)((char const *)tmp___1),
 4967|      0|                       (FILE * /* __restrict  */)stdout);
 4968|      0|        tmp___2 = gettext("Mandatory arguments to long options are mandatory "
 4969|      0|                          "for short options too.\n");
 4970|      0|        fputs_unlocked((char const * /* __restrict  */)((char const *)tmp___2),
 4971|      0|                       (FILE * /* __restrict  */)stdout);
 4972|      0|        tmp___3 = gettext(
 4973|      0|            "  -m, --mode=MODE   set permission mode (as in chmod), not "
 4974|      0|            "rwxrwxrwx - umask\n  -p, --parents     no error if existing, make "
 4975|      0|            "parent directories as needed\n  -v, --verbose     print a message "
 4976|      0|            "for each created directory\n");
 4977|      0|        fputs_unlocked((char const * /* __restrict  */)((char const *)tmp___3),
 4978|      0|                       (FILE * /* __restrict  */)stdout);
 4979|      0|        tmp___4 = gettext("      --help     display this help and exit\n");
 4980|      0|        fputs_unlocked((char const * /* __restrict  */)((char const *)tmp___4),
 4981|      0|                       (FILE * /* __restrict  */)stdout);
 4982|      0|        tmp___5 =
 4983|      0|            gettext("      --version  output version information and exit\n");
 4984|      0|        fputs_unlocked((char const * /* __restrict  */)((char const *)tmp___5),
 4985|      0|                       (FILE * /* __restrict  */)stdout);
 4986|      0|        tmp___6 = gettext("\nReport bugs to <%s>.\n");
 4987|      0|        printf((char const * /* __restrict  */)((char const *)tmp___6),
 4988|      0|               "bug-coreutils@gnu.org");
 4989|      0|      }
 4990|      0|    }
 4991|      0|    { exit(status); }
 4992|      0|  }
 4993|      0|}
 4994|      6|int main(int argc, char **argv) {
 4995|      6|  mode_t newmode;
 4996|      6|  mode_t parent_mode;
 4997|      6|  char const *specified_mode;
 4998|      6|  char const *verbose_fmt_string;
 4999|      6|  int errors;
 5000|      6|  int optc;
 5001|      6|  char *tmp;
 5002|      6|  char *tmp___0;
 5003|      6|  mode_t umask_value;
 5004|      6|  __mode_t tmp___1;
 5005|      6|  struct mode_change *change;
 5006|      6|  struct mode_change *tmp___2;
 5007|      6|  __mode_t tmp___3;
 5008|      6|  char const *tmp___4;
 5009|      6|  char *tmp___5;
 5010|      6|  int fail;
 5011|      6|  char *dir;
 5012|      6|  char const *dir___0;
 5013|      6|  int dir_created;
 5014|      6|  char const *tmp___6;
 5015|      6|  char *tmp___7;
 5016|      6|  char const *tmp___8;
 5017|      6|  char const *tmp___9;
 5018|      6|  char *tmp___10;
 5019|      6|  int *tmp___11;
 5020|      6|  char *__cil_tmp28;
 5021|      6|  char *__cil_tmp29;
 5022|      6|  char *__cil_tmp30;
 5023|      6|  char *__cil_tmp31;
 5024|      6|  char *__cil_tmp32;
 5025|      6|  char *__cil_tmp33;
 5026|      6|  char *__cil_tmp34;
 5027|      6|  char *__cil_tmp35;
 5028|      6|  char *__cil_tmp36;
 5029|       |
 5030|      6|  {
 5031|      6|    {
 5032|      6|      specified_mode = (char const *)((void *)0);
 5033|      6|      verbose_fmt_string = (char const *)((void *)0);
 5034|      6|      errors = 0;
 5035|      6|      program_name = *(argv + 0);
 5036|      6|      setlocale(6, "");
 5037|      6|      bindtextdomain("coreutils", "/usr/local/share/locale");
 5038|      6|      textdomain("coreutils");
 5039|      6|      atexit(&close_stdout);
 5040|      6|      create_parents = 0;
 5041|      6|    }
 5042|      6|    {
 5043|     12|      while (1) {
 5044|     12|      while_continue: /* CIL Label */
 5045|     12|          ;
 5046|     12|        {
 5047|     12|          optc = getopt_long(argc, (char *const *)argv, "pm:v", longopts,
 5048|     12|                             (int *)((void *)0));
 5049|     12|        }
 5050|     12|        if (!(optc != -1)) {
 5051|      6|          goto while_break;
 5052|      6|        }
 5053|      6|        if (optc == 0) {
 5054|      0|          goto case_0;
 5055|      0|        }
 5056|      6|        if (optc == 112) {
 5057|      0|          goto case_112;
 5058|      0|        }
 5059|      6|        if (optc == 109) {
 5060|      6|          goto case_109;
 5061|      6|        }
 5062|      0|        if (optc == 118) {
 5063|      0|          goto case_118;
 5064|      0|        }
 5065|      0|        if (optc == -130) {
 5066|      0|          goto case_neg_130;
 5067|      0|        }
 5068|      0|        if (optc == -131) {
 5069|      0|          goto case_neg_131;
 5070|      0|        }
 5071|      0|        goto switch_default;
 5072|      0|      case_0:
 5073|      0|        goto switch_break;
 5074|      0|      case_112:
 5075|      0|        create_parents = 1;
 5076|      0|        goto switch_break;
 5077|      6|      case_109:
 5078|      6|        specified_mode = (char const *)optarg;
 5079|      6|        goto switch_break;
 5080|      0|      case_118: {
 5081|      0|        tmp = gettext("created directory %s");
 5082|      0|        verbose_fmt_string = (char const *)tmp;
 5083|      0|      }
 5084|      0|        goto switch_break;
 5085|      0|      case_neg_130: { usage(0); }
 5086|      0|        goto switch_break;
 5087|      0|      case_neg_131: {
 5088|      0|        version_etc(stdout, "mkdir", "coreutils", "5.2.1", "David MacKenzie",
 5089|      0|                    (char *)((void *)0));
 5090|      0|        exit(0);
 5091|      0|      }
 5092|      0|        goto switch_break;
 5093|      0|      switch_default: { usage(1); }
 5094|      6|      switch_break:;
 5095|      6|      }
 5096|      0|    while_break___1: /* CIL Label */
 5097|      0|        ;
 5098|      0|    }
 5099|      6|  while_break:;
 5100|      6|    if (optind == argc) {
 5101|      0|      {
 5102|      0|        tmp___0 = gettext("too few arguments");
 5103|      0|        error(0, 0, (char const *)tmp___0);
 5104|      0|        usage(1);
 5105|      0|      }
 5106|      0|    }
 5107|      6|    {
 5108|      6|      newmode = (mode_t)((448 | (448 >> 3)) | ((448 >> 3) >> 3));
 5109|      6|      tmp___1 = umask((__mode_t)0);
 5110|      6|      umask_value = tmp___1;
 5111|      6|      umask(umask_value);
 5112|      6|      parent_mode = ((newmode & ~umask_value) | 128U) | 64U;
 5113|      6|    }
 5114|      6|    if (specified_mode) {
 5115|      6|      {
 5116|      6|        tmp___2 = mode_compile(specified_mode, 0U);
 5117|      6|        change = tmp___2;
 5118|      6|        tmp___3 = umask((__mode_t)0);
 5119|      6|        newmode &= ~tmp___3;
 5120|      6|      }
 5121|      6|      if ((unsigned long)change == (unsigned long)((struct mode_change *)0)) {
 5122|      0|        {
 5123|      0|          tmp___4 = quote(specified_mode);
 5124|      0|          tmp___5 = gettext("invalid mode %s");
 5125|      0|          error(1, 0, (char const *)tmp___5, tmp___4);
 5126|      0|        }
 5127|      6|      } else {
 5128|      6|        if ((unsigned long)change == (unsigned long)((struct mode_change *)1)) {
 5129|      0|          {
 5130|      0|            xalloc_die();
 5131|      0|          }
 5132|      0|        }
 5133|      6|      }
 5134|      6|      { newmode = mode_adjust(newmode, (struct mode_change const *)change); }
 5135|      6|    }
 5136|      6|    {
 5137|     12|      while (1) {
 5138|     12|      while_continue___0: /* CIL Label */
 5139|     12|          ;
 5140|       |
 5141|     12|        if (!(optind < argc)) {
 5142|      6|          goto while_break___0;
 5143|      6|        }
 5144|      6|        fail = 0;
 5145|      6|        if (create_parents) {
 5146|      0|          {
 5147|      0|            dir = *(argv + optind);
 5148|      0|            fail = make_path((char const *)dir, (int)newmode, (int)parent_mode,
 5149|      0|                             (uid_t)-1, (gid_t)-1, 1, verbose_fmt_string);
 5150|      0|          }
 5151|      6|        } else {
 5152|      6|          {
 5153|      6|            dir___0 = (char const *)*(argv + optind);
 5154|      6|            fail = make_dir(dir___0, dir___0, newmode, &dir_created);
 5155|      6|          }
 5156|      6|          if (!fail) {
 5157|      6|            if (!create_parents) {
 5158|      6|              if (!dir_created) {
 5159|      0|                {
 5160|      0|                  tmp___6 = quote(dir___0);
 5161|      0|                  tmp___7 = gettext("cannot create directory %s");
 5162|      0|                  error(0, 17, (char const *)tmp___7, tmp___6);
 5163|      0|                  fail = 1;
 5164|      0|                }
 5165|      6|              } else {
 5166|      6|                goto _L;
 5167|      6|              }
 5168|      6|            } else {
 5169|      6|            _L:
 5170|      6|              if (verbose_fmt_string) {
 5171|      0|                {
 5172|      0|                  tmp___8 = quote(dir___0);
 5173|      0|                  error(0, 0, verbose_fmt_string, tmp___8);
 5174|      0|                }
 5175|      0|              }
 5176|      6|            }
 5177|      6|          }
 5178|      6|          if (fail == 0) {
 5179|      6|            if (specified_mode) {
 5180|      6|              if (dir_created) {
 5181|      6|                {
 5182|      6|                  fail = chmod(dir___0, newmode);
 5183|      6|                }
 5184|      6|                if (fail) {
 5185|      0|                  {
 5186|      0|                    tmp___9 = quote(dir___0);
 5187|      0|                    tmp___10 =
 5188|      0|                        gettext("cannot set permissions of directory %s");
 5189|      0|                    tmp___11 = __errno_location();
 5190|      0|                    error(0, *tmp___11, (char const *)tmp___10, tmp___9);
 5191|      0|                  }
 5192|      0|                }
 5193|      6|              }
 5194|      6|            }
 5195|      6|          }
 5196|      6|        }
 5197|      6|        if (fail) {
 5198|      0|          errors = 1;
 5199|      0|        }
 5200|      6|        optind++;
 5201|      6|      }
 5202|      0|    while_break___2: /* CIL Label */
 5203|      0|        ;
 5204|      0|    }
 5205|      6|  while_break___0: { exit(errors); }
 5206|      0|  }
 5207|      0|}
 5208|       |

